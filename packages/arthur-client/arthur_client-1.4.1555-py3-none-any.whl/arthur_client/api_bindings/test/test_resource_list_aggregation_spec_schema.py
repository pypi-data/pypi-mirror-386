# coding: utf-8

"""
    Arthur Scope

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from arthur_client.api_bindings.models.resource_list_aggregation_spec_schema import ResourceListAggregationSpecSchema

class TestResourceListAggregationSpecSchema(unittest.TestCase):
    """ResourceListAggregationSpecSchema unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ResourceListAggregationSpecSchema:
        """Test ResourceListAggregationSpecSchema
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ResourceListAggregationSpecSchema`
        """
        model = ResourceListAggregationSpecSchema()
        if include_optional:
            return ResourceListAggregationSpecSchema(
                records = [
                    arthur_client.api_bindings.models.aggregation_spec_schema.AggregationSpecSchema(
                        name = '', 
                        id = '', 
                        description = '', 
                        metric_type = 'sketch', 
                        init_args = [
                            null
                            ], 
                        aggregate_args = [
                            null
                            ], 
                        reported_aggregations = [
                            arthur_client.api_bindings.models.base_reported_aggregation.BaseReportedAggregation(
                                metric_name = '', 
                                description = '', )
                            ], )
                    ],
                pagination = arthur_client.api_bindings.models.pagination.Pagination(
                    page = 56, 
                    page_size = 56, 
                    total_pages = 56, 
                    total_records = 56, )
            )
        else:
            return ResourceListAggregationSpecSchema(
                records = [
                    arthur_client.api_bindings.models.aggregation_spec_schema.AggregationSpecSchema(
                        name = '', 
                        id = '', 
                        description = '', 
                        metric_type = 'sketch', 
                        init_args = [
                            null
                            ], 
                        aggregate_args = [
                            null
                            ], 
                        reported_aggregations = [
                            arthur_client.api_bindings.models.base_reported_aggregation.BaseReportedAggregation(
                                metric_name = '', 
                                description = '', )
                            ], )
                    ],
                pagination = arthur_client.api_bindings.models.pagination.Pagination(
                    page = 56, 
                    page_size = 56, 
                    total_pages = 56, 
                    total_records = 56, ),
        )
        """

    def testResourceListAggregationSpecSchema(self):
        """Test ResourceListAggregationSpecSchema"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
