# coding: utf-8

"""
    Arthur Scope

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from arthur_client.api_bindings.models.connector_spec_schema import ConnectorSpecSchema

class TestConnectorSpecSchema(unittest.TestCase):
    """ConnectorSpecSchema unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ConnectorSpecSchema:
        """Test ConnectorSpecSchema
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ConnectorSpecSchema`
        """
        model = ConnectorSpecSchema()
        if include_optional:
            return ConnectorSpecSchema(
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                connector_type = 'shield',
                fields = [
                    arthur_client.api_bindings.models.connector_spec_schema_field.ConnectorSpecSchemaField(
                        name = '', 
                        is_sensitive = True, 
                        is_optional = True, 
                        d_type = 'string', 
                        description = '', 
                        allowed_values = [
                            ''
                            ], )
                    ],
                dataset_locator_schema = arthur_client.api_bindings.models.dataset_locator_schema.DatasetLocatorSchema(
                    fields = [
                        arthur_client.api_bindings.models.dataset_locator_schema_field.DatasetLocatorSchemaField(
                            name = '', 
                            d_type = 'UUID', 
                            is_optional = True, 
                            description = '', 
                            allowed_values = [
                                ''
                                ], )
                        ], ),
                supports_dataset_listing = True
            )
        else:
            return ConnectorSpecSchema(
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                connector_type = 'shield',
                fields = [
                    arthur_client.api_bindings.models.connector_spec_schema_field.ConnectorSpecSchemaField(
                        name = '', 
                        is_sensitive = True, 
                        is_optional = True, 
                        d_type = 'string', 
                        description = '', 
                        allowed_values = [
                            ''
                            ], )
                    ],
                dataset_locator_schema = arthur_client.api_bindings.models.dataset_locator_schema.DatasetLocatorSchema(
                    fields = [
                        arthur_client.api_bindings.models.dataset_locator_schema_field.DatasetLocatorSchemaField(
                            name = '', 
                            d_type = 'UUID', 
                            is_optional = True, 
                            description = '', 
                            allowed_values = [
                                ''
                                ], )
                        ], ),
                supports_dataset_listing = True,
        )
        """

    def testConnectorSpecSchema(self):
        """Test ConnectorSpecSchema"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
