# coding: utf-8

"""
    Arthur Scope

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from arthur_client.api_bindings.models.bound_member import BoundMember
from arthur_client.api_bindings.models.bound_member_kind import BoundMemberKind
from arthur_client.api_bindings.models.bound_resource import BoundResource
from arthur_client.api_bindings.models.bound_resource_kind import BoundResourceKind
from arthur_client.api_bindings.models.bound_role import BoundRole
from typing import Optional, Set
from typing_extensions import Self

class RoleBinding(BaseModel):
    """
    RoleBinding
    """ # noqa: E501
    created_at: datetime = Field(description="Time of record creation.")
    updated_at: datetime = Field(description="Time of last record update.")
    id: StrictStr = Field(description="ID of the role binding.")
    role: BoundRole = Field(description="Bound role.")
    bound_resource_kind: BoundResourceKind = Field(description="Kind of the bound resource.")
    bound_resource: BoundResource = Field(description="Bound resource.")
    bound_member_kind: BoundMemberKind = Field(description="Kind of the bound member.")
    bound_member: BoundMember = Field(description="Bound member.")
    __properties: ClassVar[List[str]] = ["created_at", "updated_at", "id", "role", "bound_resource_kind", "bound_resource", "bound_member_kind", "bound_member"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RoleBinding from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of role
        if self.role:
            _dict['role'] = self.role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bound_resource
        if self.bound_resource:
            _dict['bound_resource'] = self.bound_resource.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bound_member
        if self.bound_member:
            _dict['bound_member'] = self.bound_member.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RoleBinding from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "id": obj.get("id"),
            "role": BoundRole.from_dict(obj["role"]) if obj.get("role") is not None else None,
            "bound_resource_kind": obj.get("bound_resource_kind"),
            "bound_resource": BoundResource.from_dict(obj["bound_resource"]) if obj.get("bound_resource") is not None else None,
            "bound_member_kind": obj.get("bound_member_kind"),
            "bound_member": BoundMember.from_dict(obj["bound_member"]) if obj.get("bound_member") is not None else None
        })
        return _obj


