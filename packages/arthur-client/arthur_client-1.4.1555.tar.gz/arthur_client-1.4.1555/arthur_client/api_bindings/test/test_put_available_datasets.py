# coding: utf-8

"""
    Arthur Scope

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from arthur_client.api_bindings.models.put_available_datasets import PutAvailableDatasets

class TestPutAvailableDatasets(unittest.TestCase):
    """PutAvailableDatasets unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PutAvailableDatasets:
        """Test PutAvailableDatasets
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PutAvailableDatasets`
        """
        model = PutAvailableDatasets()
        if include_optional:
            return PutAvailableDatasets(
                available_datasets = [
                    arthur_client.api_bindings.models.put_available_dataset.PutAvailableDataset(
                        name = '', 
                        dataset_locator = arthur_client.api_bindings.models.dataset_locator.DatasetLocator(
                            fields = [
                                arthur_client.api_bindings.models.dataset_locator_field.DatasetLocatorField(
                                    key = '', 
                                    value = '', )
                                ], ), 
                        dataset_schema = arthur_client.api_bindings.models.put_dataset_schema.PutDatasetSchema(
                            alias_mask = {
                                'key' : ''
                                }, 
                            columns = [
                                arthur_client.api_bindings.models.dataset_column.DatasetColumn(
                                    id = '', 
                                    source_name = '', 
                                    definition = null, )
                                ], ), 
                        model_problem_type = 'regression', 
                        dataset_join_spec = arthur_client.api_bindings.models.post_dataset_join_spec.PostDatasetJoinSpec(
                            left_dataset_id = '', 
                            right_dataset_id = '', 
                            left_dataset_join_key = '', 
                            right_dataset_join_key = '', 
                            join_type = 'inner', ), )
                    ]
            )
        else:
            return PutAvailableDatasets(
                available_datasets = [
                    arthur_client.api_bindings.models.put_available_dataset.PutAvailableDataset(
                        name = '', 
                        dataset_locator = arthur_client.api_bindings.models.dataset_locator.DatasetLocator(
                            fields = [
                                arthur_client.api_bindings.models.dataset_locator_field.DatasetLocatorField(
                                    key = '', 
                                    value = '', )
                                ], ), 
                        dataset_schema = arthur_client.api_bindings.models.put_dataset_schema.PutDatasetSchema(
                            alias_mask = {
                                'key' : ''
                                }, 
                            columns = [
                                arthur_client.api_bindings.models.dataset_column.DatasetColumn(
                                    id = '', 
                                    source_name = '', 
                                    definition = null, )
                                ], ), 
                        model_problem_type = 'regression', 
                        dataset_join_spec = arthur_client.api_bindings.models.post_dataset_join_spec.PostDatasetJoinSpec(
                            left_dataset_id = '', 
                            right_dataset_id = '', 
                            left_dataset_join_key = '', 
                            right_dataset_join_key = '', 
                            join_type = 'inner', ), )
                    ],
        )
        """

    def testPutAvailableDatasets(self):
        """Test PutAvailableDatasets"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
