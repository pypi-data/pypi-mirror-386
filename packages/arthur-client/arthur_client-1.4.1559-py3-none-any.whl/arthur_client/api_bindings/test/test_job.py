# coding: utf-8

"""
    Arthur Scope

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from arthur_client.api_bindings.models.job import Job

class TestJob(unittest.TestCase):
    """Job unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Job:
        """Test Job
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Job`
        """
        model = Job()
        if include_optional:
            return Job(
                id = '',
                kind = 'metrics_calculation',
                job_spec = None,
                state = 'queued',
                project_id = '',
                data_plane_id = '',
                queued_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                ready_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                finished_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                duration_sec = 56,
                error_count = 56,
                trigger_type = 'user',
                triggered_by_user = arthur_client.api_bindings.models.user.User(
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    organization_id = '', 
                    id = '', 
                    first_name = '', 
                    last_name = '', 
                    email = '', 
                    picture = '', 
                    user_type = 'user', 
                    data_plane_id = '', 
                    client_id = '', 
                    organization_name = '', ),
                schedule_id = '',
                attempts = 56,
                max_attempts = 56,
                nonce = '',
                memory_requirements_mb = 56,
                job_priority = 100
            )
        else:
            return Job(
                id = '',
                kind = 'metrics_calculation',
                job_spec = None,
                state = 'queued',
                project_id = '',
                queued_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                ready_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                trigger_type = 'user',
                attempts = 56,
                max_attempts = 56,
                memory_requirements_mb = 56,
                job_priority = 100,
        )
        """

    def testJob(self):
        """Test Job"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
