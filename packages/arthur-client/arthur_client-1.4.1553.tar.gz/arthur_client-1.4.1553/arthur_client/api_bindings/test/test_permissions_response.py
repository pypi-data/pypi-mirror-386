# coding: utf-8

"""
    Arthur Scope

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from arthur_client.api_bindings.models.permissions_response import PermissionsResponse

class TestPermissionsResponse(unittest.TestCase):
    """PermissionsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PermissionsResponse:
        """Test PermissionsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PermissionsResponse`
        """
        model = PermissionsResponse()
        if include_optional:
            return PermissionsResponse(
                permissions = [
                    arthur_client.api_bindings.models.permission_response_item.PermissionResponseItem(
                        resource_kind = 'platform', 
                        resource_id = '', 
                        permission_name = 'organization_read', 
                        allowed = True, )
                    ]
            )
        else:
            return PermissionsResponse(
                permissions = [
                    arthur_client.api_bindings.models.permission_response_item.PermissionResponseItem(
                        resource_kind = 'platform', 
                        resource_id = '', 
                        permission_name = 'organization_read', 
                        allowed = True, )
                    ],
        )
        """

    def testPermissionsResponse(self):
        """Test PermissionsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
