# coding: utf-8

"""
    Arthur Scope

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from arthur_client.api_bindings.models.model import Model

class TestModel(unittest.TestCase):
    """Model unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Model:
        """Test Model
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Model`
        """
        model = Model()
        if include_optional:
            return Model(
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                id = '',
                project_id = '',
                name = '',
                description = '',
                onboarding_identifier = '',
                last_updated_by_user = arthur_client.api_bindings.models.user.User(
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    organization_id = '', 
                    id = '', 
                    first_name = '', 
                    last_name = '', 
                    email = '', 
                    picture = '', 
                    user_type = 'user', 
                    data_plane_id = '', 
                    client_id = '', 
                    organization_name = '', ),
                metric_config = arthur_client.api_bindings.models.model_metric_spec.ModelMetricSpec(
                    aggregation_specs = [
                        arthur_client.api_bindings.models.aggregation_spec.AggregationSpec(
                            aggregation_id = '', 
                            aggregation_init_args = [
                                arthur_client.api_bindings.models.metrics_arg_spec.MetricsArgSpec(
                                    arg_key = '', 
                                    arg_value = null, )
                                ], 
                            aggregation_args = [
                                arthur_client.api_bindings.models.metrics_arg_spec.MetricsArgSpec(
                                    arg_key = '', 
                                    arg_value = null, )
                                ], 
                            aggregation_kind = 'default', 
                            aggregation_version = 56, )
                        ], 
                    id = '', ),
                schedule = arthur_client.api_bindings.models.model_metrics_schedule.ModelMetricsSchedule(
                    cron = '', 
                    lookback_period_seconds = 56, 
                    name = '', 
                    id = '', ),
                model_problem_types = [
                    'regression'
                    ],
                datasets = [
                    arthur_client.api_bindings.models.dataset_reference.DatasetReference(
                        dataset_id = '', 
                        dataset_name = '', 
                        dataset_connector_type = 'shield', )
                    ],
                data_plane_id = ''
            )
        else:
            return Model(
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                id = '',
                project_id = '',
                name = '',
                description = '',
                metric_config = arthur_client.api_bindings.models.model_metric_spec.ModelMetricSpec(
                    aggregation_specs = [
                        arthur_client.api_bindings.models.aggregation_spec.AggregationSpec(
                            aggregation_id = '', 
                            aggregation_init_args = [
                                arthur_client.api_bindings.models.metrics_arg_spec.MetricsArgSpec(
                                    arg_key = '', 
                                    arg_value = null, )
                                ], 
                            aggregation_args = [
                                arthur_client.api_bindings.models.metrics_arg_spec.MetricsArgSpec(
                                    arg_key = '', 
                                    arg_value = null, )
                                ], 
                            aggregation_kind = 'default', 
                            aggregation_version = 56, )
                        ], 
                    id = '', ),
                model_problem_types = [
                    'regression'
                    ],
                datasets = [
                    arthur_client.api_bindings.models.dataset_reference.DatasetReference(
                        dataset_id = '', 
                        dataset_name = '', 
                        dataset_connector_type = 'shield', )
                    ],
                data_plane_id = '',
        )
        """

    def testModel(self):
        """Test Model"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
