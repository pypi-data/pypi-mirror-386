# coding: utf-8

"""
    Arthur Scope

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from arthur_client.api_bindings.models.job_spec import JobSpec

class TestJobSpec(unittest.TestCase):
    """JobSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> JobSpec:
        """Test JobSpec
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `JobSpec`
        """
        model = JobSpec()
        if include_optional:
            return JobSpec(
                job_type = 'link_model_task',
                dataset_id = '',
                available_dataset_id = '',
                start_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                end_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                operation_id = '',
                data_filters = [
                    arthur_client.api_bindings.models.data_result_filter.DataResultFilter(
                        field_name = '', 
                        op = 'greater_than', 
                        value = null, )
                    ],
                pagination_options = arthur_client.api_bindings.models.connector_pagination_options.ConnectorPaginationOptions(
                    page = 1.0, 
                    page_size = 1.0, ),
                scope_model_id = '',
                connector_id = '',
                check_range_start_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                check_range_end_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                task_name = '',
                onboarding_identifier = '',
                initial_rules = [
                    arthur_client.api_bindings.models.new_rule_request.NewRuleRequest(
                        name = '', 
                        type = '', 
                        apply_to_prompt = True, 
                        apply_to_response = True, 
                        config = null, )
                    ],
                task_type = 'traditional',
                initial_metrics = [
                    arthur_client.api_bindings.models.new_metric_request.NewMetricRequest(
                        type = 'QueryRelevance', 
                        name = '', 
                        metric_metadata = '', 
                        config = arthur_client.api_bindings.models.relevance_metric_config.RelevanceMetricConfig(
                            relevance_threshold = 1.337, 
                            use_llm_judge = True, ), )
                    ],
                rules_to_enable = [
                    ''
                    ],
                rules_to_disable = [
                    ''
                    ],
                rules_to_archive = [
                    ''
                    ],
                rules_to_add = [
                    arthur_client.api_bindings.models.new_rule_request.NewRuleRequest(
                        name = '', 
                        type = '', 
                        apply_to_prompt = True, 
                        apply_to_response = True, 
                        config = null, )
                    ],
                task_id = ''
            )
        else:
            return JobSpec(
                available_dataset_id = '',
                start_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                end_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                operation_id = '',
                data_filters = [
                    arthur_client.api_bindings.models.data_result_filter.DataResultFilter(
                        field_name = '', 
                        op = 'greater_than', 
                        value = null, )
                    ],
                pagination_options = arthur_client.api_bindings.models.connector_pagination_options.ConnectorPaginationOptions(
                    page = 1.0, 
                    page_size = 1.0, ),
                scope_model_id = '',
                connector_id = '',
                check_range_start_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                check_range_end_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                task_name = '',
                initial_rules = [
                    arthur_client.api_bindings.models.new_rule_request.NewRuleRequest(
                        name = '', 
                        type = '', 
                        apply_to_prompt = True, 
                        apply_to_response = True, 
                        config = null, )
                    ],
                initial_metrics = [
                    arthur_client.api_bindings.models.new_metric_request.NewMetricRequest(
                        type = 'QueryRelevance', 
                        name = '', 
                        metric_metadata = '', 
                        config = arthur_client.api_bindings.models.relevance_metric_config.RelevanceMetricConfig(
                            relevance_threshold = 1.337, 
                            use_llm_judge = True, ), )
                    ],
                task_id = '',
        )
        """

    def testJobSpec(self):
        """Test JobSpec"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
