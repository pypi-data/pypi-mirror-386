# coding: utf-8

"""
    Arthur Scope

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from arthur_client.api_bindings.models.new_rule_request import NewRuleRequest
from typing import Optional, Set
from typing_extensions import Self

class PostTaskRequest(BaseModel):
    """
    PostTaskRequest
    """ # noqa: E501
    name: Annotated[str, Field(min_length=1, strict=True)] = Field(description="The name of the task")
    connector_id: StrictStr = Field(description="The id of the connector where the task will be created. The connector must be an engine internal connector.")
    onboarding_identifier: Optional[StrictStr] = None
    rules_to_add: Optional[List[NewRuleRequest]] = Field(default=None, description="List of rules to add to the task.")
    is_agentic: Optional[StrictBool] = Field(default=False, description="Whether this task should be created as an agentic trace task. If True, no rules will be applied to the task.")
    __properties: ClassVar[List[str]] = ["name", "connector_id", "onboarding_identifier", "rules_to_add", "is_agentic"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostTaskRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in rules_to_add (list)
        _items = []
        if self.rules_to_add:
            for _item_rules_to_add in self.rules_to_add:
                if _item_rules_to_add:
                    _items.append(_item_rules_to_add.to_dict())
            _dict['rules_to_add'] = _items
        # set to None if onboarding_identifier (nullable) is None
        # and model_fields_set contains the field
        if self.onboarding_identifier is None and "onboarding_identifier" in self.model_fields_set:
            _dict['onboarding_identifier'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostTaskRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "connector_id": obj.get("connector_id"),
            "onboarding_identifier": obj.get("onboarding_identifier"),
            "rules_to_add": [NewRuleRequest.from_dict(_item) for _item in obj["rules_to_add"]] if obj.get("rules_to_add") is not None else None,
            "is_agentic": obj.get("is_agentic") if obj.get("is_agentic") is not None else False
        })
        return _obj


