{
    "api_params": {
        "dataset_type": "action_recognition",
        "actions": [
            "train",
            "evaluate",
            "export",
            "inference"
        ],
        "formats": [
            "default"
        ],
        "accepted_ds_intents": [
            "training"
        ],
        "image": "TAO_PYTORCH",
        "spec_backend": "yaml",
        "actions_pipe": {
            "train": "train",
            "evaluate": "evaluate",
            "export": "export_with_spec",
            "inference": "inference"
        }
    },
    "dataset_validation": {
        "required_files": {
            "default": [
                {
                    "all_of": [
                        {
                            "path": "train.tar.gz",
                            "type": "file"
                        },
                        {
                            "path": "test.tar.gz",
                            "type": "file"
                        }
                    ]
                }
            ]
        }
    },
    "dynamic_config": {
        "model_type_key": "model.model_type",
        "rules": {
            "rgb": {
                "remove": [
                    "model.of_seq_length",
                    "model.of_pretrained_num_classes",
                    "dataset.augmentation_config.of_input_mean",
                    "dataset.augmentation_config.of_input_std",
                    "model.of_pretrained_model_path"
                ],
                "remove_if_action": {
                    "train": [
                        "model.of_pretrained_num_classes"
                    ]
                }
            },
            "of": {
                "remove": [
                    "model.rgb_seq_length",
                    "model.rgb_pretrained_num_classes",
                    "dataset.augmentation_config.rgb_input_mean",
                    "dataset.augmentation_config.rgb_input_std",
                    "model.rgb_pretrained_model_path"
                ],
                "remove_if_action": {
                    "train": [
                        "model.rgb_pretrained_num_classes"
                    ]
                }
            },
            "joint": {
                "transform": "split_pretrained_paths"
            }
        },
        "defaults": {
            "dataset.label_map": {
                "catch": 0,
                "smile": 1
            }
        }
    },
    "data_sources": {
        "train": {
            "dataset.train_dataset_dir": {
                "source": "train_datasets",
                "multiple_sources": false,
                "path": "train.tar.gz"
            },
            "dataset.val_dataset_dir": {
                "source": "train_datasets",
                "multiple_sources": false,
                "path": "test.tar.gz"
            }
        },
        "evaluate": {
            "evaluate.test_dataset_dir": {
                "source": "train_datasets",
                "multiple_sources": false,
                "path": "test.tar.gz"
            }
        },
        "inference": {
            "inference.inference_dataset_dir": {
                "source": "train_datasets",
                "multiple_sources": false,
                "path": "test/smile.tar.gz"
            }
        }
    },
    "spec_params": {
        "train": {
            "results_dir": "output_dir",
            "model.rgb_pretrained_model_path": "ptm_if_no_resume_model",
            "model.of_pretrained_model_path": "ptm_if_no_resume_model",
            "train.resume_training_checkpoint_path": "resume_model",
            "encryption_key": "key"
        },
        "evaluate": {
            "results_dir": "output_dir",
            "evaluate.checkpoint": "parent_model",
            "encryption_key": "key"
        },
        "inference": {
            "results_dir": "output_dir",
            "inference.checkpoint": "parent_model",
            "encryption_key": "key"
        },
        "export": {
            "results_dir": "output_dir",
            "export.checkpoint": "parent_model",
            "export.onnx_file": "create_onnx_file",
            "encryption_key": "key"
        }
    },
    "automl_spec_params": {
        "results_dir": "automl_output_dir",
        "model.rgb_pretrained_model_path": "automl_assign_ptm",
        "model.of_pretrained_model_path": "automl_assign_ptm",
        "train.resume_training_checkpoint_path": "automl_resume_model",
        "train.checkpoint_interval": "assign_const_value,train.num_epochs",
        "train.validation_interval": "assign_const_value,train.num_epochs,train.checkpoint_interval",
        "encryption_key": "key"
    },
    "metrics": {
        "available_metrics": [
            "val_acc"
        ],
        "monitoring_metric": "val_acc"
    },
    "cloud_upload": {
        "upload_strategy": {
            "inference": "tarball_after_completion"
        }
    }
}