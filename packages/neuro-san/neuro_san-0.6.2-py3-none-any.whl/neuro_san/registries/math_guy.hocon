
# Copyright (C) 2023-2025 Cognizant Digital Business, Evolutionary AI.
# All Rights Reserved.
# Issued under the Academic Public License.
#
# You can be released from the terms, and requirements of the Academic Public
# License by purchasing a commercial license.
# Purchase of a commercial license is mandatory for any use of the
# neuro-san SDK Software in commercial settings.
#
# END COPYRIGHT

# The schema specifications for this file are documented here:
# https://github.com/cognizant-ai-lab/neuro-san/blob/main/docs/agent_hocon_reference.md

{
    # Optional metadata describing this agent network
    "metadata": {
        "description": "Simple agent network using a CodedTool and sly_data"
        "tags": ["example"],
        "rai_scores": {
            # These are not real scores, they are just an example
            "bogosity": 0.9,
            "safety": 0.8,    
        }
    },
    "llm_config": {
        "model_name": "gpt-4o",
    },
    "tools": [
        # This first agent definition is regarded as the "Front Man", which
        # does all the talking to the outside world/client.
        #
        # Some disqualifications from being a front man:
        #   1) Cannot use a CodedTool "class" definition
        #   2) Cannot use a Tool "toolbox" definition
        #
        # Besides the first agent being the front man, these tool definitions
        # do not have to be in any particular order. How they are linked and
        # call each other is defined within their own specs.
        # This could be a graph, potentially even with cycles.
        {
            "name": "math_guy",

            "function": {

                # The description acts as an initial prompt.
                "description": """
I am a test agent network that can do math with values in sly_data.
Just give me the name of an arithmetic operator and I will do the work
on the secret numbers.
""",
                # This parameters section isn't strictly needed if the agent network
                # is not expected to be called as an external agent.
                # This one is used with math_guy_passthrough, so we need to add this.
                "parameters": {
                    "type": "object",
                    "properties": {
                        "operator": {
                            "type": "string",
                            "description": "The single-word name of the math operator to perform"
                        }
                    },
                    "required": ["operator"]
                },

                # You can also optionally specify the schema needed for any sly_data input.
                # This is to allow generic clients to prompt for private-data inputs
                # that do not belong in the chat stream.
                "sly_data_schema": {
                    "type": "object",
                    "properties": {
                        "x": {
                            "type": "float",
                            "description": "The first operand for the arithmetic operation"
                        },
                        "y": {
                            "type": "float",
                            "description": "The second operand for the arithmetic operation"
                        }
                    },
                    "required": ["x", "y"]
                }
            },

            "instructions": """
You are an interface for a calculator tool.
Always call the real_calculator tool to perform the arithmetic calculation,
but know that the operand values will always be hidden from you. Do not ask
for them. Instead trust that the real_calculator tool will get the operands
by some other means, and just pass the name of the operator to the real_calculator tool.
Return verbatim whatever real_calculator returns.
""",
            "allow": {
                "to_upstream": {
                    "sly_data": ["equals"]
                }
            },
            "tools": ["real_calculator"],

            "metadata": {
                "rai_scores": {
                    # These are not real scores, they are just an example
                    "bogosity": 0.9,
                    "safety": 0.8,    
                }
            }
        },

        # The calculator is a low-level CodedTool and does not call anyone else.
        # He is called by the front-man.
        {
            "name": "real_calculator",
            "function": {
                "description": "Performs arithmetic on sly-data values x and y given the operator",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "operator": {
                            "type": "string",
                            "description": "The single-word name of the math operator to perform"
                        }
                    },
                    "required": ["operator"]
                }
            },
            "class": "calculator.Calculator"
        }
    ]
}
