
# Copyright (C) 2023-2025 Cognizant Digital Business, Evolutionary AI.
# All Rights Reserved.
# Issued under the Academic Public License.
#
# You can be released from the terms, and requirements of the Academic Public
# License by purchasing a commercial license.
# Purchase of a commercial license is mandatory for any use of the
# neuro-san SDK Software in commercial settings.
#
# END COPYRIGHT

# The schema specifications for this file are documented here:
# https://github.com/cognizant-ai-lab/neuro-san/blob/main/docs/agent_hocon_reference.md

{
    # Optional metadata describing this agent network
    "metadata": {
        "description": "Used by Neuro-SAN test infrastruture to determine agent network response failures",
        "tags": ["test_infrastructure"]
    },

    "llm_config": {
        "model_name": "gpt-4o",
    },
    "tools": [
        # This first agent definition is regarded as the "Front Man", which
        # does all the talking to the outside world/client.
        #
        # Some disqualifications from being a front man:
        #   1) Cannot use a CodedTool "class" definition
        #   2) Cannot use a Tool "toolbox" definition
        #
        # Besides the first agent being the front man, these tool definitions
        # do not have to be in any particular order. How they are linked and
        # call each other is defined within their own specs.
        # This could be a graph, potentially even with cycles.
        {
            "name": "gist",

            "function": {

                # The description acts as an initial prompt.
                "description": """
Will return the single string "pass" if the text sample meets the given acceptance criteria
or the single string "fail" if the text sample does not meet the given acceptance criteria.
""",
                # This parameters section isn't strictly needed if the agent network
                # is not expected to be called as an external agent.
                "parameters": {
                    "type": "object",
                    "properties": {
                        "acceptance_criteria": {
                            "type": "string",
                            "description": """
A description of what kind of content or meaning a text_sample would need to contain
in order to constitute a passing value for the test.
"""
                        },
                        "text_sample": {
                            "type": "string",
                            "description": "The sample of text to match against the acceptance_criteria"
                        }
                    },
                    "required": ["sample", "acceptance_criteria"]
                }
            },

            "instructions": """
You are an expert at evaluating text samples.

You will be given two inputs:
1. an acceptance_criteria which describes what constitutes a passing evaluation for any sample of text.
2. a text_sample which is to be evaluated against the acceptance_criteria description.

Evaluate the text_sample and come to a conclusion as to whether or not
it meets what is described by the acceptance_criteria.

Should there be multiple points described in the acceptance_criteria, take care that any logical 
descriptions containing OR or AND are upheld in your conclusion.

If you conclude that what is described by the acceptance_criteria is met by the contents of the text_sample, 
output only the single word "pass", otherwise output only the single word "fail".
Never add any embellishment or commentary to your answer.
""",
            "tools": []
        }
    ]
}
