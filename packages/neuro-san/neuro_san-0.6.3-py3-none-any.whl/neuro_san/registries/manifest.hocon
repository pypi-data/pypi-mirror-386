
# Copyright (C) 2023-2025 Cognizant Digital Business, Evolutionary AI.
# All Rights Reserved.
# Issued under the Academic Public License.
#
# You can be released from the terms, and requirements of the Academic Public
# License by purchasing a commercial license.
# Purchase of a commercial license is mandatory for any use of the
# neuro-san SDK Software in commercial settings.
#
# END COPYRIGHT

# The schema specifications for this file are documented here:
# https://github.com/cognizant-ai-lab/neuro-san/blob/main/docs/manifest_hocon_reference.md

{
    # Currently we list each hocon file we want to serve as a key with a boolean value.
    # Eventually we might have a dictionary value with server specifications for each.

    # Simple manifest entry where the key is the name of the hocon file with the
    # agent specification in it, and the value is a boolean as to whether or not
    # the agent should be served up as a public listing via the Concierge service.
    "hello_world.hocon": true,

    "esp_decision_assistant.hocon": true,
    "intranet_agents.hocon": true,
    "math_guy.hocon": true,
    "math_guy_passthrough.hocon": true,
    "music_nerd.hocon": true,
    "music_nerd_pro.hocon": true,
    "music_nerd_pro_llm_anthropic.hocon": true,
    "music_nerd_pro_llm_gemini.hocon": true,
    "music_nerd_pro_llm_azure.hocon": true,
    "music_nerd_pro_llm_ollama.hocon": true,
    "music_nerd_pro_multi_agents.hocon": true,
    "music_nerd_pro_llm_bedrock_claude.hocon": true,

    # These two allow us to test agent hocons in a directory hierarchy.
    "deep/math_guy_passthrough.hocon": {
        # A long-hand version of what the simple boolean true value expands to.
        "serve": true,      # Whether or not this agent network should be served up
        "public": true      # Network should be publicly listed via the Concierge service.
    },
    "deep/math_guy.hocon": {
        "serve": true,      # Whether or not this agent network should be served up
        "public": false     # Network should *not* be publicly listed via the Concierge service.
                            # Note this network can still be called externally on a need-to-know basis.
                            # This false value is useful when the agent is called by other
                            # agent networks as an implementation detail and you don't really
                            # want it to be an externally advertised entrypoint.
    },

    # This one is an example of agents calling tools that has no parameters.
    "date_time.hocon": true,

    # These next 2 go together as an example for agents calling other agents.
    # They are the only reason we have ddgs listed in the dependencies.
    "website_search.hocon": true,
    "website_search_usage_example.hocon": true,

    # The next one is an example of agents calling langchain base tools from toolbox.
    # This requires an environment variable TAVILY_API_KEY set to run.
    # To get the key go to https://www.tavily.com/
    # Because this requires the key, this is not served up by default.
    "tavily_search.hocon": false,

    # This one is an example of agents calling shared coded tools.
    # In other words, these coded tools can be used in any agent network.
    # These tools are also predefined in the toolbox.
    "website_rag.hocon": true,

    # Reservations example
    "copy_cat.hocon": true,

    # These 2 agents are examples of calling MCP tools using string and dictionary format, respectively.
    "mcp_deepwiki_dict.hocon": true,
    "mcp_deepwiki_str.hocon": true,

    # Agents having to do with test infrastructure
    "gist.hocon": true,
    "assess_failure.hocon": true,
    "chat_mock_llm_echo.hocon": true,

    # STOP AND READ: YOU PROBABLY DON'T WANT TO ADD YOUR .hocon FILE HERE.
    #
    # The agent network .hocon files above are examples specific to the neuro-san library.
    #
    # It would be an Easy thing to do to add your own agent network's .hocon file to the
    # list above to get started, but 99% of the time it is not the Right, Simple thing to do
    # to make a commit with your agent listed here.
    # Why? Because many agent networks drag in dependencies for their CodedTools,
    # and we are continually trying to keep neuro-san a lean library.
    #
    # We are quite sure your agent is superlative and special... to you.
    # If your agent really is the 1% of cases which is so exemplary that we need to show it
    # off to the world, you will need to be talking to the neuro-san team to make it
    # the exemplary case you perhaps unintentionally end up meaning it to be by adding
    # it here, in the neuro-san repo.
    #
    # The Right thing to do is to start your own repo with your own registries/ directory,
    # with your own manifest.hocon file for your own agent network .hocon file projects,
    # and your own coded_tools directory for those agents.  And when you do that,
    # you will delete this set of comments, because you will have free reign in your own repo.
    # After all: Stallions must run, and run free.
    #
    # Use the AGENT_MANIFEST_FILE and AGENT_TOOL_PATH env vars to direct a generic neuro-san
    # server to your own repo's agents and CodedTools, respectively.
    #
    # See https://github.com/cognizant-ai-lab/neuro-san-studio for an example of how to do this.
}
