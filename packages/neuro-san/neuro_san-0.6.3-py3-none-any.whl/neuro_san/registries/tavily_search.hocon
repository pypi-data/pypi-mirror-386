
# Copyright (C) 2023-2025 Cognizant Digital Business, Evolutionary AI.
# All Rights Reserved.
# Issued under the Academic Public License.
#
# You can be released from the terms, and requirements of the Academic Public
# License by purchasing a commercial license.
# Purchase of a commercial license is mandatory for any use of the
# neuro-san SDK Software in commercial settings.
#
# END COPYRIGHT

# The schema specifications for this file are documented here:
# https://github.com/cognizant-ai-lab/neuro-san/blob/main/docs/agent_hocon_reference.md

{
    # Optional metadata describing this agent network
    "metadata": {
        "description": "Example of web search using Tavily Search.",
        "tags": ["example", "web_search"],
    },
    "llm_config": {
        "model_name": "gpt-4o",
    },
    "tools": [
        # This first agent definition is regarded as the "Front Man", which
        # does all the talking to the outside world/client.
        #
        # Some disqualifications from being a front man:
        #   1) Cannot use a CodedTool "class" definition
        #   2) Cannot use a Tool "toolbox" definition
        #
        # Besides the first agent being the front man, these tool definitions
        # do not have to be in any particular order. How they are linked and
        # call each other is defined within their own specs.
        # This could be a graph, potentially even with cycles.
        {
            "name": "searcher",
            "instructions": "Use your tool to respond to the inquiry.",
             "function": {
                "description": "Assist user with answer from internet."
             }
            "tools": ["search_tool"]
        },
        {
            "name": "search_tool",
            # The "toolbox" specifies which tool in the toolbox should be instantiated.
            # In this case, "tavily_search" is chosen, which allows querying Tavily for search results.

            # Note that tools in toolbox can be either langchain tools or coded tools
            
            # Documentation on the Tavily search tool:
            # - LangChain's Tavily Search Tool: https://python.langchain.com/docs/integrations/tools/tavily_search/
            
            "toolbox": "tavily_search",

            # "args" contains the parameters that will be passed to the selected tool.
            # These arguments must align with the tool’s expected function signature.
            # 
            # For "tavily_search", one of the key parameters is "max_results", which determines 
            # how many search results should be returned from Tavily.
            # 
            # Other tools will have different required/optional arguments, so be sure to refer to
            # the tool’s documentation to understand what parameters can be configured.

            "args": {
                "max_results": 3
            }

            # -------------------------------------------------------------------------------
            # CURRENTLY AVAILABLE TOOLS IN TOOLBOX
            # The following tools can be used as values for "toolbox":
            #
            # Langchain Tools
            #
            #   - "tavily_search": Uses Tavily for search queries.
            #   - "requests_get": Makes an HTTP GET request.
            #   - "requests_post": Makes an HTTP POST request.
            #   - "requests_patch": Makes an HTTP PATCH request.
            #   - "requests_put": Makes an HTTP PUT request.
            #   - "requests_delete": Makes an HTTP DELETE request.
            #   - "requests_toolkit": Contains all of the request tools.
            #
            # Coded Tools
            #
            #   - "website_search": Search internet with DuckduckgoSearch.
            #   - "rag_retriever": Perform retrival-augmented generation on given urls.
            #
            # Each of these tools may require specific arguments in the "args" section.
            # Refer to the tool's documentation for more details.
            # -------------------------------------------------------------------------------

            # -------------------------------------------------------------------------------
            # EXTENSIBILITY
            # - Tool registration can be done without modifying core code by specifying the 
            #   tool configuration file (HOCON format) via the AGENT_TOOLBOX_INFO_FILE environment variable
            #   or key "toolbox_info_file" in the agent network hocon file.
            # - The default tool configuration file is located at: 
            #   neuro_san/internals/run_context/langchain/toolbox/toolbox_info.hocon
            #
            #   See https://github.com/cognizant-ai-lab/neuro-san/blob/main/docs/toolbox_info_hocon_reference.md
            # -------------------------------------------------------------------------------

        }
    ]
}
