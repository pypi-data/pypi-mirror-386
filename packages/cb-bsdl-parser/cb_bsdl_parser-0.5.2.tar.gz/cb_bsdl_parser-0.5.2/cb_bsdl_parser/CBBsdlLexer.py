# Generated from CBBsdlLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,42,331,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,
        1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,
        1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,
        1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,
        1,21,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,
        1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,
        1,32,1,33,1,33,1,34,1,34,1,35,1,35,5,35,287,8,35,10,35,12,35,290,
        9,35,1,36,1,36,1,36,1,36,3,36,296,8,36,1,37,1,37,1,37,5,37,301,8,
        37,10,37,12,37,304,9,37,1,38,1,38,1,39,1,39,3,39,310,8,39,1,39,1,
        39,1,40,4,40,315,8,40,11,40,12,40,316,1,40,1,40,1,41,1,41,1,41,1,
        41,5,41,325,8,41,10,41,12,41,328,9,41,1,41,1,41,0,0,42,1,1,3,2,5,
        3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,
        75,38,77,39,79,40,81,41,83,42,1,0,5,3,0,65,90,95,95,97,122,4,0,48,
        57,65,90,95,95,97,122,2,0,43,43,45,45,3,0,9,10,13,13,32,32,2,0,10,
        10,13,13,337,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
        1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
        1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
        1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
        1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,1,85,1,0,0,0,3,92,1,0,0,0,5,96,
        1,0,0,0,7,99,1,0,0,0,9,107,1,0,0,0,11,114,1,0,0,0,13,131,1,0,0,0,
        15,141,1,0,0,0,17,157,1,0,0,0,19,175,1,0,0,0,21,178,1,0,0,0,23,182,
        1,0,0,0,25,191,1,0,0,0,27,206,1,0,0,0,29,211,1,0,0,0,31,217,1,0,
        0,0,33,220,1,0,0,0,35,224,1,0,0,0,37,232,1,0,0,0,39,236,1,0,0,0,
        41,247,1,0,0,0,43,250,1,0,0,0,45,257,1,0,0,0,47,259,1,0,0,0,49,261,
        1,0,0,0,51,263,1,0,0,0,53,265,1,0,0,0,55,267,1,0,0,0,57,269,1,0,
        0,0,59,271,1,0,0,0,61,273,1,0,0,0,63,276,1,0,0,0,65,278,1,0,0,0,
        67,280,1,0,0,0,69,282,1,0,0,0,71,284,1,0,0,0,73,291,1,0,0,0,75,297,
        1,0,0,0,77,305,1,0,0,0,79,307,1,0,0,0,81,314,1,0,0,0,83,320,1,0,
        0,0,85,86,5,101,0,0,86,87,5,110,0,0,87,88,5,116,0,0,88,89,5,105,
        0,0,89,90,5,116,0,0,90,91,5,121,0,0,91,2,1,0,0,0,92,93,5,101,0,0,
        93,94,5,110,0,0,94,95,5,100,0,0,95,4,1,0,0,0,96,97,5,105,0,0,97,
        98,5,115,0,0,98,6,1,0,0,0,99,100,5,103,0,0,100,101,5,101,0,0,101,
        102,5,110,0,0,102,103,5,101,0,0,103,104,5,114,0,0,104,105,5,105,
        0,0,105,106,5,99,0,0,106,8,1,0,0,0,107,108,5,115,0,0,108,109,5,116,
        0,0,109,110,5,114,0,0,110,111,5,105,0,0,111,112,5,110,0,0,112,113,
        5,103,0,0,113,10,1,0,0,0,114,115,5,80,0,0,115,116,5,72,0,0,116,117,
        5,89,0,0,117,118,5,83,0,0,118,119,5,73,0,0,119,120,5,67,0,0,120,
        121,5,65,0,0,121,122,5,76,0,0,122,123,5,95,0,0,123,124,5,80,0,0,
        124,125,5,73,0,0,125,126,5,78,0,0,126,127,5,95,0,0,127,128,5,77,
        0,0,128,129,5,65,0,0,129,130,5,80,0,0,130,12,1,0,0,0,131,132,5,97,
        0,0,132,133,5,116,0,0,133,134,5,116,0,0,134,135,5,114,0,0,135,136,
        5,105,0,0,136,137,5,98,0,0,137,138,5,117,0,0,138,139,5,116,0,0,139,
        140,5,101,0,0,140,14,1,0,0,0,141,142,5,66,0,0,142,143,5,79,0,0,143,
        144,5,85,0,0,144,145,5,78,0,0,145,146,5,68,0,0,146,147,5,65,0,0,
        147,148,5,82,0,0,148,149,5,89,0,0,149,150,5,95,0,0,150,151,5,76,
        0,0,151,152,5,69,0,0,152,153,5,78,0,0,153,154,5,71,0,0,154,155,5,
        84,0,0,155,156,5,72,0,0,156,16,1,0,0,0,157,158,5,66,0,0,158,159,
        5,79,0,0,159,160,5,85,0,0,160,161,5,78,0,0,161,162,5,68,0,0,162,
        163,5,65,0,0,163,164,5,82,0,0,164,165,5,89,0,0,165,166,5,95,0,0,
        166,167,5,82,0,0,167,168,5,69,0,0,168,169,5,71,0,0,169,170,5,73,
        0,0,170,171,5,83,0,0,171,172,5,84,0,0,172,173,5,69,0,0,173,174,5,
        82,0,0,174,18,1,0,0,0,175,176,5,111,0,0,176,177,5,102,0,0,177,20,
        1,0,0,0,178,179,5,117,0,0,179,180,5,115,0,0,180,181,5,101,0,0,181,
        22,1,0,0,0,182,183,5,99,0,0,183,184,5,111,0,0,184,185,5,110,0,0,
        185,186,5,115,0,0,186,187,5,116,0,0,187,188,5,97,0,0,188,189,5,110,
        0,0,189,190,5,116,0,0,190,24,1,0,0,0,191,192,5,80,0,0,192,193,5,
        73,0,0,193,194,5,78,0,0,194,195,5,95,0,0,195,196,5,77,0,0,196,197,
        5,65,0,0,197,198,5,80,0,0,198,199,5,95,0,0,199,200,5,83,0,0,200,
        201,5,84,0,0,201,202,5,82,0,0,202,203,5,73,0,0,203,204,5,78,0,0,
        204,205,5,71,0,0,205,26,1,0,0,0,206,207,5,112,0,0,207,208,5,111,
        0,0,208,209,5,114,0,0,209,210,5,116,0,0,210,28,1,0,0,0,211,212,5,
        105,0,0,212,213,5,110,0,0,213,214,5,111,0,0,214,215,5,117,0,0,215,
        216,5,116,0,0,216,30,1,0,0,0,217,218,5,105,0,0,218,219,5,110,0,0,
        219,32,1,0,0,0,220,221,5,111,0,0,221,222,5,117,0,0,222,223,5,116,
        0,0,223,34,1,0,0,0,224,225,5,108,0,0,225,226,5,105,0,0,226,227,5,
        110,0,0,227,228,5,107,0,0,228,229,5,97,0,0,229,230,5,103,0,0,230,
        231,5,101,0,0,231,36,1,0,0,0,232,233,5,98,0,0,233,234,5,105,0,0,
        234,235,5,116,0,0,235,38,1,0,0,0,236,237,5,98,0,0,237,238,5,105,
        0,0,238,239,5,116,0,0,239,240,5,95,0,0,240,241,5,118,0,0,241,242,
        5,101,0,0,242,243,5,99,0,0,243,244,5,116,0,0,244,245,5,111,0,0,245,
        246,5,114,0,0,246,40,1,0,0,0,247,248,5,116,0,0,248,249,5,111,0,0,
        249,42,1,0,0,0,250,251,5,100,0,0,251,252,5,111,0,0,252,253,5,119,
        0,0,253,254,5,110,0,0,254,255,5,116,0,0,255,256,5,111,0,0,256,44,
        1,0,0,0,257,258,5,46,0,0,258,46,1,0,0,0,259,260,5,44,0,0,260,48,
        1,0,0,0,261,262,5,58,0,0,262,50,1,0,0,0,263,264,5,59,0,0,264,52,
        1,0,0,0,265,266,5,40,0,0,266,54,1,0,0,0,267,268,5,41,0,0,268,56,
        1,0,0,0,269,270,5,38,0,0,270,58,1,0,0,0,271,272,5,34,0,0,272,60,
        1,0,0,0,273,274,5,58,0,0,274,275,5,61,0,0,275,62,1,0,0,0,276,277,
        5,42,0,0,277,64,1,0,0,0,278,279,5,95,0,0,279,66,1,0,0,0,280,281,
        5,91,0,0,281,68,1,0,0,0,282,283,5,93,0,0,283,70,1,0,0,0,284,288,
        7,0,0,0,285,287,7,1,0,0,286,285,1,0,0,0,287,290,1,0,0,0,288,286,
        1,0,0,0,288,289,1,0,0,0,289,72,1,0,0,0,290,288,1,0,0,0,291,292,3,
        75,37,0,292,293,5,46,0,0,293,295,3,75,37,0,294,296,3,79,39,0,295,
        294,1,0,0,0,295,296,1,0,0,0,296,74,1,0,0,0,297,302,3,77,38,0,298,
        301,5,95,0,0,299,301,3,77,38,0,300,298,1,0,0,0,300,299,1,0,0,0,301,
        304,1,0,0,0,302,300,1,0,0,0,302,303,1,0,0,0,303,76,1,0,0,0,304,302,
        1,0,0,0,305,306,2,48,57,0,306,78,1,0,0,0,307,309,5,69,0,0,308,310,
        7,2,0,0,309,308,1,0,0,0,309,310,1,0,0,0,310,311,1,0,0,0,311,312,
        3,75,37,0,312,80,1,0,0,0,313,315,7,3,0,0,314,313,1,0,0,0,315,316,
        1,0,0,0,316,314,1,0,0,0,316,317,1,0,0,0,317,318,1,0,0,0,318,319,
        6,40,0,0,319,82,1,0,0,0,320,321,5,45,0,0,321,322,5,45,0,0,322,326,
        1,0,0,0,323,325,8,4,0,0,324,323,1,0,0,0,325,328,1,0,0,0,326,324,
        1,0,0,0,326,327,1,0,0,0,327,329,1,0,0,0,328,326,1,0,0,0,329,330,
        6,41,0,0,330,84,1,0,0,0,8,0,288,295,300,302,309,316,326,1,6,0,0
    ]

class CBBsdlLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ENTITY = 1
    END = 2
    IS = 3
    GENERIC = 4
    STRING = 5
    PHYSICAL_PIN_MAP = 6
    ATTRIBUTE = 7
    BS_LEN = 8
    BS_REG = 9
    OF = 10
    USE = 11
    CONSTANT = 12
    PIN_MAP_STRING = 13
    PORT = 14
    INOUT = 15
    IN = 16
    OUT = 17
    LINKAGE = 18
    BIT = 19
    BIT_VECTOR = 20
    TO = 21
    DOWNTO = 22
    DOT = 23
    COMMA = 24
    COLON = 25
    SEMICOLON = 26
    BRACKET_OPEN = 27
    BRACKET_CLOSE = 28
    AMPERSAND = 29
    QUOTES = 30
    EQUALS = 31
    ASTERISK = 32
    UNDERLINE = 33
    SQUARE_OPEN = 34
    SQUARE_CLOSE = 35
    ID = 36
    REAL_LITERAL = 37
    INTEGER = 38
    DIGIT = 39
    EXPONENT = 40
    WS = 41
    COMMENT = 42

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'entity'", "'end'", "'is'", "'generic'", "'string'", "'PHYSICAL_PIN_MAP'", 
            "'attribute'", "'BOUNDARY_LENGTH'", "'BOUNDARY_REGISTER'", "'of'", 
            "'use'", "'constant'", "'PIN_MAP_STRING'", "'port'", "'inout'", 
            "'in'", "'out'", "'linkage'", "'bit'", "'bit_vector'", "'to'", 
            "'downto'", "'.'", "','", "':'", "';'", "'('", "')'", "'&'", 
            "'\"'", "':='", "'*'", "'_'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "ENTITY", "END", "IS", "GENERIC", "STRING", "PHYSICAL_PIN_MAP", 
            "ATTRIBUTE", "BS_LEN", "BS_REG", "OF", "USE", "CONSTANT", "PIN_MAP_STRING", 
            "PORT", "INOUT", "IN", "OUT", "LINKAGE", "BIT", "BIT_VECTOR", 
            "TO", "DOWNTO", "DOT", "COMMA", "COLON", "SEMICOLON", "BRACKET_OPEN", 
            "BRACKET_CLOSE", "AMPERSAND", "QUOTES", "EQUALS", "ASTERISK", 
            "UNDERLINE", "SQUARE_OPEN", "SQUARE_CLOSE", "ID", "REAL_LITERAL", 
            "INTEGER", "DIGIT", "EXPONENT", "WS", "COMMENT" ]

    ruleNames = [ "ENTITY", "END", "IS", "GENERIC", "STRING", "PHYSICAL_PIN_MAP", 
                  "ATTRIBUTE", "BS_LEN", "BS_REG", "OF", "USE", "CONSTANT", 
                  "PIN_MAP_STRING", "PORT", "INOUT", "IN", "OUT", "LINKAGE", 
                  "BIT", "BIT_VECTOR", "TO", "DOWNTO", "DOT", "COMMA", "COLON", 
                  "SEMICOLON", "BRACKET_OPEN", "BRACKET_CLOSE", "AMPERSAND", 
                  "QUOTES", "EQUALS", "ASTERISK", "UNDERLINE", "SQUARE_OPEN", 
                  "SQUARE_CLOSE", "ID", "REAL_LITERAL", "INTEGER", "DIGIT", 
                  "EXPONENT", "WS", "COMMENT" ]

    grammarFileName = "CBBsdlLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


