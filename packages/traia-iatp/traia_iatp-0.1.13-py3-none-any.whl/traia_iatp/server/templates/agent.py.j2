"""
{{ agent_name }} - CrewAI Agent Implementation

This module defines the CrewAI agent that wraps the {{ mcp_server_name }} MCP server.
Auto-generated for the {{ agent_name }} utility agent.
"""

import logging
from typing import List, Dict, Any, Optional
from crewai import Agent, Task, Crew, LLM
import os

# Import MCP integration from traia_iatp.mcp
from traia_iatp.mcp import MCPServerConfig, MCPAgentBuilder, run_with_mcp_tools, MCPServerInfo

# Import AgentOps for operation tracking
try:
    import agentops
    from agentops.sdk.decorators import operation
    AGENTOPS_AVAILABLE = True
except ImportError:
    AGENTOPS_AVAILABLE = False
    agentops = None
    # Create a no-op decorator if AgentOps is not available
    def operation(func):
        return func

DEFAULT_LLM = LLM(
    model=os.getenv("LLM_MODEL", "gpt-4.1-nano"),  # Using environment variable with fallback
    temperature=os.getenv("LLM_MODEL_TEMPERATURE", 0.1),
    api_key=os.getenv("OPENAI_API_KEY")
)

logger = logging.getLogger(__name__)

logger.info(f"Current LLM model used: {os.getenv("LLM_MODEL", "gpt-4.1-nano")}")

class {{ class_name }}Agent:
    """{{ agent_name }} agent that processes requests using {{ mcp_server_name }}."""
    
    def __init__(self, mcp_config: MCPServerConfig):
        self.mcp_config = mcp_config
        self.mcp_server_info = self._create_server_info()
    
    def _create_server_info(self) -> MCPServerInfo:
        """Create MCPServerInfo from config."""
        return MCPServerInfo(
            id="",  # Not needed for direct usage
            name=self.mcp_config.name,
            url=self.mcp_config.url,
            description=self.mcp_config.description,
            server_type=self.mcp_config.server_type,
            capabilities=self.mcp_config.capabilities,
            metadata=self.mcp_config.metadata,
            tags=self.mcp_config.metadata.get("tags", [])
        )
    
    def create_agent(self, tools_subset: Optional[List[str]] = None) -> Agent:
        """Create a CrewAI agent for this MCP server."""
        # Use MCPAgentBuilder to create the agent
        return MCPAgentBuilder.create_agent(
            role="{{ agent_name }} Specialist",
            goal="Process requests using {{ mcp_server_name }} capabilities to provide accurate and helpful responses",
            backstory=(
                "You are an expert at using {{ mcp_server_name }}. "
                "{{ mcp_server_description }} "
                "You excel at understanding user requests and utilizing the available tools to provide comprehensive solutions."
            ),
            verbose=True,
            allow_delegation=False,
            llm=DEFAULT_LLM,
            tools_subset=tools_subset
        )
    
    @operation
    def process_request(self, request: str, context: Dict[str, Any] = None) -> str:
        """Process a request using the MCP server capabilities."""
        try:
            # Create an agent for this request
            agent = self.create_agent()
            
            # Create a task
            task = Task(
                description=request,
                expected_output="A comprehensive response based on {{ mcp_server_name }} capabilities",
                agent=agent
            )
            
            # Run with MCP tools
            result = run_with_mcp_tools(
                tasks=[task],
                mcp_server=self.mcp_server_info,
                inputs=context or {},
                skip_health_check=True  # Skip for production usage
            )
            
            return str(result)
            
        except Exception as e:
            logger.error(f"Error processing request: {e}")
            raise 