#!/bin/bash

# Script to build and run the {{ api_name }} MCP Server locally in Docker

set -e  # Exit on error

# Color codes for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Configuration
IMAGE_NAME="{{ api_slug }}-mcp-server"
CONTAINER_NAME="{{ api_slug }}-mcp-local"
HOST_PORT=8000
CONTAINER_PORT=8000

echo -e "${BLUE}üöÄ Building and running {{ api_name }} MCP Server...${NC}"
echo

# Check if Docker is installed
if ! command -v docker &> /dev/null; then
    echo -e "${RED}‚ùå Docker is not installed. Please install Docker first.${NC}"
    exit 1
fi

# Stop and remove existing container if it exists
if docker ps -a | grep -q $CONTAINER_NAME; then
    echo -e "${YELLOW}üõë Stopping existing container...${NC}"
    docker stop $CONTAINER_NAME >/dev/null 2>&1 || true
    docker rm $CONTAINER_NAME >/dev/null 2>&1 || true
fi

# Build the Docker image
echo -e "${BLUE}üî® Building Docker image...${NC}"
docker build --no-cache -t $IMAGE_NAME .

# Run the container
echo -e "${BLUE}üèÉ Starting container...${NC}"
docker run -d \
    --name $CONTAINER_NAME \
    -p $HOST_PORT:$CONTAINER_PORT \
    -e STAGE="${STAGE:-MAINNET}" \
    -e LOG_LEVEL="${LOG_LEVEL:-INFO}" \
{% if api_key_env_var %}
    -e {{ api_key_env_var }}="{% raw %}${{% endraw %}{{ api_key_env_var }}{% raw %}}{% endraw %}" \
{% endif %}
    -e PORT="$CONTAINER_PORT" \
    $IMAGE_NAME

# Wait for the server to start
echo -e "${YELLOW}‚è≥ Waiting for server to start...${NC}"
sleep 3

# Check if container is running
if ! docker ps | grep -q $CONTAINER_NAME; then
    echo -e "${RED}‚ùå Container failed to start. Checking logs:${NC}"
    docker logs $CONTAINER_NAME
    exit 1
fi

# Get container info
CONTAINER_ID=$(docker ps -q -f name=$CONTAINER_NAME)
CONTAINER_IP=$(docker inspect -f '{% raw %}{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}{% endraw %}' $CONTAINER_ID)

# Output connection information
echo
echo -e "${GREEN}‚úÖ {{ api_name }} MCP Server is running!${NC}"
echo
echo -e "${BLUE}üìç Connection Information:${NC}"
echo -e "   Local URL:        ${GREEN}http://localhost:${HOST_PORT}/mcp${NC}"
echo -e "   Container IP:     ${GREEN}${CONTAINER_IP}:${CONTAINER_PORT}${NC}"
echo -e "   Container Name:   ${GREEN}${CONTAINER_NAME}${NC}"
echo -e "   Container ID:     ${GREEN}${CONTAINER_ID:0:12}${NC}"
echo
echo -e "${BLUE}üìù Useful commands:${NC}"
echo -e "   View logs:        ${YELLOW}docker logs -f ${CONTAINER_NAME}${NC}"
echo -e "   Stop server:      ${YELLOW}docker stop ${CONTAINER_NAME}${NC}"
echo -e "   Remove container: ${YELLOW}docker rm ${CONTAINER_NAME}${NC}"
echo -e "   Shell access:     ${YELLOW}docker exec -it ${CONTAINER_NAME} /bin/bash${NC}"
echo
echo -e "${BLUE}üîå MCP Server Endpoint:${NC}"
echo -e "   ${GREEN}http://localhost:${HOST_PORT}/mcp${NC}"
echo

# Check if the server is responding
echo -e "${YELLOW}üîç Checking server health...${NC}"
if curl -s -o /dev/null -w "%{http_code}" "http://localhost:${HOST_PORT}/mcp" | grep -q "200\|404\|405"; then
    echo -e "${GREEN}‚úÖ Server is responding!${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Server may still be starting up. Check logs with: docker logs -f ${CONTAINER_NAME}${NC}"
fi 