"use strict";(self.webpackChunkjupyterlab_sql_editor=self.webpackChunkjupyterlab_sql_editor||[]).push([[350],{3350:(t,e,r)=>{r.r(e),r.d(e,{default:()=>F});var o,s=r(4560),a=r(812),i=r(4337),n=r(8762),l=r(6544),c=r(2986),d=r(1321);!function(t){t.SHORT_PLUGIN_NAME="jupyterlab-sql-editor",t.FORMAT_COMMAND=`${t.SHORT_PLUGIN_NAME}:format_cell`,t.FORMAT_COMMAND_DOCUMENT=`${t.SHORT_PLUGIN_NAME}:format_document`,t.LONG_PLUGIN_NAME=`${t.SHORT_PLUGIN_NAME}`,t.SETTINGS_SECTION=`${t.LONG_PLUGIN_NAME}:plugin`}(o||(o={}));var h=r(9697);const p="[0-9a-zA-Z\\._]+",g="-[a-z]",m="--[_a-zA-Z]+",u=`(?: |${g} ${p}|${m} ${p}|${g}|${m})*`;function f(t){return new h.RegExpForeignCodeExtractor({language:t,pattern:`(?:^|\n)%${t}${u}([^\n]*)`,foreignCaptureGroups:[1],isStandalone:!0,fileExtension:t})}function C(t){return new h.RegExpForeignCodeExtractor({language:t,pattern:`^%%(${t})( .*?)?\n([^]*)`,foreignCaptureGroups:[3],isStandalone:!0,fileExtension:t})}function k(t,e,r){return new h.RegExpForeignCodeExtractor({language:r,pattern:`${t}.*?\n([\\S\\s]*)${e}`,foreignCaptureGroups:[1],isStandalone:!0,fileExtension:r})}class M{constructor(t,e,r){this.formatTabWidth=t,this.formatUseTabs=e,this.formatKeywordCase=r}format(t){return(0,d.format)(t||"",{language:"spark",tabWidth:this.formatTabWidth,useTabs:this.formatUseTabs,keywordCase:this.formatKeywordCase,linesBetweenQueries:2})}}class y{constructor(t,e){this.working=!1,this.notebookTracker=t,this.extractors=[],this.extractors.push(C("sparksql")),this.extractors.push(C("trino")),this.sqlFormatter=e}setFormatter(t){this.sqlFormatter=t}pushExtractors(t,e,r,o){this.extractors.push(k(t,e,"sparksql")),this.extractors.push(k(r,o,"trino"))}async formatAction(){return this.formatCells(!0)}async formatSelectedCodeCells(t){return this.formatCells(!0,t)}getCodeCells(t=!0,e){var r,o;if(!(null===(r=this.notebookTracker)||void 0===r?void 0:r.currentWidget))return[];const s=[];return(e=e||(null===(o=this.notebookTracker)||void 0===o?void 0:o.currentWidget.content)).widgets.forEach((r=>{"code"===r.model.type&&(t&&!(null==e?void 0:e.isSelectedOrActive(r))||s.push(r))})),s}tryReplacing(t,e,r){const o=r.extractForeignCode(e),s=t.editor;if(s&&o&&o.length>0&&o[0].foreignCode&&o[0].range){const e=o[0].foreignCode,r=this.sqlFormatter.format(e)+"\n";t.model.sharedModel.updateSource((null==s?void 0:s.getOffsetAt(o[0].range.start))||0,(null==s?void 0:s.getOffsetAt(o[0].range.end))||0,r)}}async formatCells(t,e){if(!this.working&&this.applicable())try{this.working=!0;const r=this.getCodeCells(t,e);if(r.length>0){const t=r.map((t=>t.model.sharedModel.getSource()));for(let e=0;e<r.length;++e){const o=r[e],s=t[e];if(o.model.sharedModel.getSource()===s)for(let t=0;t<this.extractors.length;++t)this.tryReplacing(o,s,this.extractors[t])}}}catch(t){await(0,c.showErrorMessage)("Jupyterlab Code Formatter Error",t)}finally{this.working=!1}}applicable(){const t=this.getCodeCells();if(t.length>0){const e=t.map((t=>t.model.sharedModel.getSource()));let r=0;return e.forEach((t=>{this.extractors.find((e=>e.hasForeignCode(t)))&&r++})),r==t.length}return!1}}class x{constructor(t,e){this.working=!1,this.editorTracker=t,this.sqlFormatter=e}setFormatter(t){this.sqlFormatter=t}formatAction(){if(this.working)return;const t=this.editorTracker.currentWidget;if(t)try{this.working=!0;const e=t.content.editor,r=null==e?void 0:e.model.sharedModel.getSource(),o=this.sqlFormatter.format(r);t.content.editor.model.sharedModel.setSource(o)}finally{this.working=!1}}}class b{constructor(t,e,r,o){this.app=t,this.tracker=e,this.editorTracker=r,this.notebookCodeFormatter=new y(this.tracker,o),this.fileEditorCodeFormatter=new x(this.editorTracker,o),this.setupCommands(),this.setupContextMenu()}setFormatter(t){this.notebookCodeFormatter.setFormatter(t),this.fileEditorCodeFormatter.setFormatter(t)}pushExtractors(t,e,r,o){this.notebookCodeFormatter.pushExtractors(t,e,r,o)}setupContextMenu(){this.app.contextMenu.addItem({command:o.FORMAT_COMMAND,selector:".jp-CodeCell"}),this.app.contextMenu.addItem({command:o.FORMAT_COMMAND_DOCUMENT,selector:".jp-FileEditor"})}setupCommands(){this.app.commands.addCommand(o.FORMAT_COMMAND,{execute:async()=>{await this.notebookCodeFormatter.formatSelectedCodeCells()},isVisible:()=>this.notebookCodeFormatter.applicable(),label:"Format SQL Cell"}),this.app.commands.addCommand(o.FORMAT_COMMAND_DOCUMENT,{execute:async()=>{await this.fileEditorCodeFormatter.formatAction()},label:"Format SQL Document"})}}const E="jupyterlab-sql-editor:plugin",F={id:E,description:"SQL editor support for formatting, syntax highlighting and code completion of SQL in cell magic, line magic, python string and file editor.",autoStart:!0,optional:[],requires:[s.ISettingRegistry,a.ILSPCodeExtractorsManager,n.INotebookTracker,l.IEditorTracker,i.IEditorLanguageRegistry],activate:(t,e,o,s,a,i)=>{const n=(t,e)=>{const r=t.get("formatTabWidth").composite,s=t.get("formatUseTabs").composite,a=t.get("formatKeywordCase").composite,i=t.get("sparksqlStartMarker").composite,n=t.get("sparksqlEndMarker").composite,l=t.get("trinoStartMarker").composite,c=t.get("trinoEndMarker").composite,d=new M(r,s,a);o.register(k(i,n,"sparksql"),"python"),o.register(k(l,c,"trino"),"python"),e.setFormatter(d),e.pushExtractors(i,n,l,c),console.log("jupyterlab-sql-editor SQL code formatter registered")};t.restored.then((()=>{i.addLanguage({name:"sparksql",displayName:"Spark language server",mime:["application/sparksql","text/x-sparksql"],extensions:["sparksql"],load:async()=>(await Promise.all([r.e(277),r.e(580)]).then(r.bind(r,8277))).sql()}),i.addLanguage({name:"trino",displayName:"Trino language server",mime:["application/trino","text/x-trino"],extensions:["trino"],load:async()=>(await Promise.all([r.e(277),r.e(580)]).then(r.bind(r,8277))).sql()}),console.log("jupyterlab-sql-editor: languages added for syntax highlighting"),o.register(f("sparksql"),"python"),o.register(C("sparksql"),"python"),o.register(f("trino"),"python"),o.register(C("trino"),"python"),console.log("jupyterlab-sql-editor: LSP extractors registered");const l=e.load(E),c=new b(t,s,a,new M(4,!1,"upper"));console.log("jupyterlab-sql-editor: sqlCodeFormatter initialized"),l.then((t=>{n(t,c),t.changed.connect((t=>{n(t,c)}))})).catch(console.error)})).catch(console.error),console.log("jupyterlab-sql-editor is activated")}}}}]);