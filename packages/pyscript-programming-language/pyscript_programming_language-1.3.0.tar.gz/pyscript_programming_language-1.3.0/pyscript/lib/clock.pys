import time

_clockAttr = {}

class Clock {

    __slots__ = ()

    func __new__(cls) {
        if not isinstance(_clockAttr.get('instance', None), Clock)
            _clockAttr['instance'] = super(Clock, Clock).__new__(Clock)

        _clockAttr['last_tick'] = time.monotonic()
        _clockAttr['time_elapsed'] = 0.0
        _clockAttr['raw_time'] = 0.0
        _clockAttr['fps'] = 0.0

        return _clockAttr['instance']
    }

    func tick(self, framerate) {
        current_time = time.monotonic()
        elapsed_time = current_time - _clockAttr['last_tick']

        if framerate > 0 {
            min_frame_time = 1 / framerate
            if elapsed_time < min_frame_time
                time.sleep(min_frame_time - elapsed_time)
        }

        current_time = time.monotonic()

        _clockAttr['fps'] = current_time == _clockAttr['last_tick'] ? 0.0 : 1 / (current_time - _clockAttr['last_tick'])
        _clockAttr['time_elapsed'] = current_time - _clockAttr['last_tick']
        _clockAttr['raw_time'] = elapsed_time
        _clockAttr['last_tick'] = current_time

        return _clockAttr['time_elapsed']
    }

    func get_time(self)
        return _clockAttr['time_elapsed']

    func get_rawtime(self)
        return _clockAttr['raw_time']

    func get_fps(self)
        return _clockAttr['fps']
}