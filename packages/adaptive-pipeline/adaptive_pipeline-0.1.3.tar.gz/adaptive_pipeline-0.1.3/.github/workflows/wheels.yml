name: Build Wheels

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*'
  pull_request:
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            cibw_archs: "x86_64"
          - os: windows-latest
            cibw_archs: "AMD64"
          - os: macos-13  # Intel
            cibw_archs: "x86_64"
          - os: macos-14  # Apple Silicon
            cibw_archs: "arm64"

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive  # In case you have git submodules

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.21.3
        env:
          # Configure cibuildwheel to build wheels for specific Python versions
          CIBW_BUILD: cp38-* cp39-* cp310-* cp311-* cp312-* cp313-*

          # Skip 32-bit builds and musl (Alpine Linux) builds
          CIBW_SKIP: "*-win32 *-manylinux_i686 *-musllinux_*"

          # Set up C++20 compiler requirements
          CIBW_ENVIRONMENT: CMAKE_BUILD_TYPE=Release

          # For macOS: specify minimum deployment target
          CIBW_ENVIRONMENT_MACOS: MACOSX_DEPLOYMENT_TARGET=10.15

          # Build only for the specified architecture
          CIBW_ARCHS: ${{ matrix.cibw_archs }}

          # Run tests after building (optional)
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: python -c "from adaptive_pipeline import AdaptivePipelineCache; cache = AdaptivePipelineCache(1024); print('Import test passed')"

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build sdist
        run: python -m build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  upload_pypi:
    name: Upload to PyPI
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # Only upload to PyPI on tagged releases
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: dist/

      - uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
