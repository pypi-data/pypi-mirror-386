# coding: utf-8

"""
    ReCodEx API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlagiarismIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'upload_completed': 'bool',
        'assignments': 'list[str]'
    }

    attribute_map = {
        'upload_completed': 'uploadCompleted',
        'assignments': 'assignments'
    }

    def __init__(self, upload_completed=None, assignments=None):  # noqa: E501
        """PlagiarismIdBody - a model defined in Swagger"""  # noqa: E501
        self._upload_completed = None
        self._assignments = None
        self.discriminator = None
        if upload_completed is not None:
            self.upload_completed = upload_completed
        if assignments is not None:
            self.assignments = assignments

    @property
    def upload_completed(self):
        """Gets the upload_completed of this PlagiarismIdBody.  # noqa: E501

        Whether the upload of the batch data is completed or not.  # noqa: E501

        :return: The upload_completed of this PlagiarismIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._upload_completed

    @upload_completed.setter
    def upload_completed(self, upload_completed):
        """Sets the upload_completed of this PlagiarismIdBody.

        Whether the upload of the batch data is completed or not.  # noqa: E501

        :param upload_completed: The upload_completed of this PlagiarismIdBody.  # noqa: E501
        :type: bool
        """

        self._upload_completed = upload_completed

    @property
    def assignments(self):
        """Gets the assignments of this PlagiarismIdBody.  # noqa: E501

        List of assignment IDs to be marked as 'checked' by this batch.  # noqa: E501

        :return: The assignments of this PlagiarismIdBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._assignments

    @assignments.setter
    def assignments(self, assignments):
        """Sets the assignments of this PlagiarismIdBody.

        List of assignment IDs to be marked as 'checked' by this batch.  # noqa: E501

        :param assignments: The assignments of this PlagiarismIdBody.  # noqa: E501
        :type: list[str]
        """

        self._assignments = assignments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlagiarismIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlagiarismIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
