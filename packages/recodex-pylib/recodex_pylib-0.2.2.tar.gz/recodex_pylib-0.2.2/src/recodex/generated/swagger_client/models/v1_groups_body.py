# coding: utf-8

"""
    ReCodEx API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1GroupsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instance_id': 'str',
        'external_id': 'str',
        'parent_group_id': 'str',
        'public_stats': 'bool',
        'detaining': 'bool',
        'is_public': 'bool',
        'is_organizational': 'bool',
        'is_exam': 'bool',
        'localized_texts': 'list[object]',
        'threshold': 'int',
        'points_limit': 'int',
        'no_admin': 'bool'
    }

    attribute_map = {
        'instance_id': 'instanceId',
        'external_id': 'externalId',
        'parent_group_id': 'parentGroupId',
        'public_stats': 'publicStats',
        'detaining': 'detaining',
        'is_public': 'isPublic',
        'is_organizational': 'isOrganizational',
        'is_exam': 'isExam',
        'localized_texts': 'localizedTexts',
        'threshold': 'threshold',
        'points_limit': 'pointsLimit',
        'no_admin': 'noAdmin'
    }

    def __init__(self, instance_id=None, external_id=None, parent_group_id=None, public_stats=None, detaining=None, is_public=None, is_organizational=None, is_exam=None, localized_texts=None, threshold=None, points_limit=None, no_admin=None):  # noqa: E501
        """V1GroupsBody - a model defined in Swagger"""  # noqa: E501
        self._instance_id = None
        self._external_id = None
        self._parent_group_id = None
        self._public_stats = None
        self._detaining = None
        self._is_public = None
        self._is_organizational = None
        self._is_exam = None
        self._localized_texts = None
        self._threshold = None
        self._points_limit = None
        self._no_admin = None
        self.discriminator = None
        self.instance_id = instance_id
        if external_id is not None:
            self.external_id = external_id
        if parent_group_id is not None:
            self.parent_group_id = parent_group_id
        if public_stats is not None:
            self.public_stats = public_stats
        if detaining is not None:
            self.detaining = detaining
        if is_public is not None:
            self.is_public = is_public
        if is_organizational is not None:
            self.is_organizational = is_organizational
        if is_exam is not None:
            self.is_exam = is_exam
        if localized_texts is not None:
            self.localized_texts = localized_texts
        if threshold is not None:
            self.threshold = threshold
        if points_limit is not None:
            self.points_limit = points_limit
        if no_admin is not None:
            self.no_admin = no_admin

    @property
    def instance_id(self):
        """Gets the instance_id of this V1GroupsBody.  # noqa: E501

        An identifier of the instance where the group should be created  # noqa: E501

        :return: The instance_id of this V1GroupsBody.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this V1GroupsBody.

        An identifier of the instance where the group should be created  # noqa: E501

        :param instance_id: The instance_id of this V1GroupsBody.  # noqa: E501
        :type: str
        """
        if instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")  # noqa: E501

        self._instance_id = instance_id

    @property
    def external_id(self):
        """Gets the external_id of this V1GroupsBody.  # noqa: E501

        An informative, human readable identifier of the group  # noqa: E501

        :return: The external_id of this V1GroupsBody.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this V1GroupsBody.

        An informative, human readable identifier of the group  # noqa: E501

        :param external_id: The external_id of this V1GroupsBody.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def parent_group_id(self):
        """Gets the parent_group_id of this V1GroupsBody.  # noqa: E501

        Identifier of the parent group (if none is given, a top-level group is created)  # noqa: E501

        :return: The parent_group_id of this V1GroupsBody.  # noqa: E501
        :rtype: str
        """
        return self._parent_group_id

    @parent_group_id.setter
    def parent_group_id(self, parent_group_id):
        """Sets the parent_group_id of this V1GroupsBody.

        Identifier of the parent group (if none is given, a top-level group is created)  # noqa: E501

        :param parent_group_id: The parent_group_id of this V1GroupsBody.  # noqa: E501
        :type: str
        """

        self._parent_group_id = parent_group_id

    @property
    def public_stats(self):
        """Gets the public_stats of this V1GroupsBody.  # noqa: E501

        Should students be able to see each other's results?  # noqa: E501

        :return: The public_stats of this V1GroupsBody.  # noqa: E501
        :rtype: bool
        """
        return self._public_stats

    @public_stats.setter
    def public_stats(self, public_stats):
        """Sets the public_stats of this V1GroupsBody.

        Should students be able to see each other's results?  # noqa: E501

        :param public_stats: The public_stats of this V1GroupsBody.  # noqa: E501
        :type: bool
        """

        self._public_stats = public_stats

    @property
    def detaining(self):
        """Gets the detaining of this V1GroupsBody.  # noqa: E501

        Are students prevented from leaving the group on their own?  # noqa: E501

        :return: The detaining of this V1GroupsBody.  # noqa: E501
        :rtype: bool
        """
        return self._detaining

    @detaining.setter
    def detaining(self, detaining):
        """Sets the detaining of this V1GroupsBody.

        Are students prevented from leaving the group on their own?  # noqa: E501

        :param detaining: The detaining of this V1GroupsBody.  # noqa: E501
        :type: bool
        """

        self._detaining = detaining

    @property
    def is_public(self):
        """Gets the is_public of this V1GroupsBody.  # noqa: E501

        Should the group be visible to all student?  # noqa: E501

        :return: The is_public of this V1GroupsBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this V1GroupsBody.

        Should the group be visible to all student?  # noqa: E501

        :param is_public: The is_public of this V1GroupsBody.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    @property
    def is_organizational(self):
        """Gets the is_organizational of this V1GroupsBody.  # noqa: E501

        Whether the group is organizational (no assignments nor students).  # noqa: E501

        :return: The is_organizational of this V1GroupsBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_organizational

    @is_organizational.setter
    def is_organizational(self, is_organizational):
        """Sets the is_organizational of this V1GroupsBody.

        Whether the group is organizational (no assignments nor students).  # noqa: E501

        :param is_organizational: The is_organizational of this V1GroupsBody.  # noqa: E501
        :type: bool
        """

        self._is_organizational = is_organizational

    @property
    def is_exam(self):
        """Gets the is_exam of this V1GroupsBody.  # noqa: E501

        Whether the group is an exam group.  # noqa: E501

        :return: The is_exam of this V1GroupsBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_exam

    @is_exam.setter
    def is_exam(self, is_exam):
        """Sets the is_exam of this V1GroupsBody.

        Whether the group is an exam group.  # noqa: E501

        :param is_exam: The is_exam of this V1GroupsBody.  # noqa: E501
        :type: bool
        """

        self._is_exam = is_exam

    @property
    def localized_texts(self):
        """Gets the localized_texts of this V1GroupsBody.  # noqa: E501

        Localized names and descriptions  # noqa: E501

        :return: The localized_texts of this V1GroupsBody.  # noqa: E501
        :rtype: list[object]
        """
        return self._localized_texts

    @localized_texts.setter
    def localized_texts(self, localized_texts):
        """Sets the localized_texts of this V1GroupsBody.

        Localized names and descriptions  # noqa: E501

        :param localized_texts: The localized_texts of this V1GroupsBody.  # noqa: E501
        :type: list[object]
        """

        self._localized_texts = localized_texts

    @property
    def threshold(self):
        """Gets the threshold of this V1GroupsBody.  # noqa: E501

        A minimum percentage of points needed to pass the course  # noqa: E501

        :return: The threshold of this V1GroupsBody.  # noqa: E501
        :rtype: int
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this V1GroupsBody.

        A minimum percentage of points needed to pass the course  # noqa: E501

        :param threshold: The threshold of this V1GroupsBody.  # noqa: E501
        :type: int
        """

        self._threshold = threshold

    @property
    def points_limit(self):
        """Gets the points_limit of this V1GroupsBody.  # noqa: E501

        A minimum of (absolute) points needed to pass the course  # noqa: E501

        :return: The points_limit of this V1GroupsBody.  # noqa: E501
        :rtype: int
        """
        return self._points_limit

    @points_limit.setter
    def points_limit(self, points_limit):
        """Sets the points_limit of this V1GroupsBody.

        A minimum of (absolute) points needed to pass the course  # noqa: E501

        :param points_limit: The points_limit of this V1GroupsBody.  # noqa: E501
        :type: int
        """

        self._points_limit = points_limit

    @property
    def no_admin(self):
        """Gets the no_admin of this V1GroupsBody.  # noqa: E501

        If true, no admin is assigned to group (current user is assigned as admin by default.  # noqa: E501

        :return: The no_admin of this V1GroupsBody.  # noqa: E501
        :rtype: bool
        """
        return self._no_admin

    @no_admin.setter
    def no_admin(self, no_admin):
        """Sets the no_admin of this V1GroupsBody.

        If true, no admin is assigned to group (current user is assigned as admin by default.  # noqa: E501

        :param no_admin: The no_admin of this V1GroupsBody.  # noqa: E501
        :type: bool
        """

        self._no_admin = no_admin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1GroupsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1GroupsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
