# coding: utf-8

"""
    ReCodEx API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConfigVariablesBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'runtime_environment_id': 'str',
        'pipelines_ids': 'list[object]'
    }

    attribute_map = {
        'runtime_environment_id': 'runtimeEnvironmentId',
        'pipelines_ids': 'pipelinesIds'
    }

    def __init__(self, runtime_environment_id=None, pipelines_ids=None):  # noqa: E501
        """ConfigVariablesBody - a model defined in Swagger"""  # noqa: E501
        self._runtime_environment_id = None
        self._pipelines_ids = None
        self.discriminator = None
        if runtime_environment_id is not None:
            self.runtime_environment_id = runtime_environment_id
        self.pipelines_ids = pipelines_ids

    @property
    def runtime_environment_id(self):
        """Gets the runtime_environment_id of this ConfigVariablesBody.  # noqa: E501

        Environment identifier  # noqa: E501

        :return: The runtime_environment_id of this ConfigVariablesBody.  # noqa: E501
        :rtype: str
        """
        return self._runtime_environment_id

    @runtime_environment_id.setter
    def runtime_environment_id(self, runtime_environment_id):
        """Sets the runtime_environment_id of this ConfigVariablesBody.

        Environment identifier  # noqa: E501

        :param runtime_environment_id: The runtime_environment_id of this ConfigVariablesBody.  # noqa: E501
        :type: str
        """

        self._runtime_environment_id = runtime_environment_id

    @property
    def pipelines_ids(self):
        """Gets the pipelines_ids of this ConfigVariablesBody.  # noqa: E501

        Identifiers of selected pipelines for one test  # noqa: E501

        :return: The pipelines_ids of this ConfigVariablesBody.  # noqa: E501
        :rtype: list[object]
        """
        return self._pipelines_ids

    @pipelines_ids.setter
    def pipelines_ids(self, pipelines_ids):
        """Sets the pipelines_ids of this ConfigVariablesBody.

        Identifiers of selected pipelines for one test  # noqa: E501

        :param pipelines_ids: The pipelines_ids of this ConfigVariablesBody.  # noqa: E501
        :type: list[object]
        """
        if pipelines_ids is None:
            raise ValueError("Invalid value for `pipelines_ids`, must not be `None`")  # noqa: E501

        self._pipelines_ids = pipelines_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigVariablesBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigVariablesBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
