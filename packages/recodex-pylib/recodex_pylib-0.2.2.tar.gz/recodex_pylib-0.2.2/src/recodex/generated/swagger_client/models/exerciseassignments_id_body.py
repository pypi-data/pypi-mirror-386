# coding: utf-8

"""
    ReCodEx API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExerciseassignmentsIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'int',
        'is_public': 'bool',
        'localized_texts': 'list[object]',
        'first_deadline': 'int',
        'max_points_before_first_deadline': 'int',
        'submissions_count_limit': 'int',
        'solution_files_limit': 'int',
        'solution_size_limit': 'int',
        'allow_second_deadline': 'bool',
        'visible_from': 'int',
        'can_view_limit_ratios': 'bool',
        'can_view_measured_values': 'bool',
        'can_view_judge_stdout': 'bool',
        'can_view_judge_stderr': 'bool',
        'second_deadline': 'int',
        'max_points_before_second_deadline': 'int',
        'max_points_deadline_interpolation': 'bool',
        'is_bonus': 'bool',
        'points_percentual_threshold': 'float',
        'disabled_runtime_environment_ids': 'list[object]',
        'send_notification': 'bool',
        'is_exam': 'bool'
    }

    attribute_map = {
        'version': 'version',
        'is_public': 'isPublic',
        'localized_texts': 'localizedTexts',
        'first_deadline': 'firstDeadline',
        'max_points_before_first_deadline': 'maxPointsBeforeFirstDeadline',
        'submissions_count_limit': 'submissionsCountLimit',
        'solution_files_limit': 'solutionFilesLimit',
        'solution_size_limit': 'solutionSizeLimit',
        'allow_second_deadline': 'allowSecondDeadline',
        'visible_from': 'visibleFrom',
        'can_view_limit_ratios': 'canViewLimitRatios',
        'can_view_measured_values': 'canViewMeasuredValues',
        'can_view_judge_stdout': 'canViewJudgeStdout',
        'can_view_judge_stderr': 'canViewJudgeStderr',
        'second_deadline': 'secondDeadline',
        'max_points_before_second_deadline': 'maxPointsBeforeSecondDeadline',
        'max_points_deadline_interpolation': 'maxPointsDeadlineInterpolation',
        'is_bonus': 'isBonus',
        'points_percentual_threshold': 'pointsPercentualThreshold',
        'disabled_runtime_environment_ids': 'disabledRuntimeEnvironmentIds',
        'send_notification': 'sendNotification',
        'is_exam': 'isExam'
    }

    def __init__(self, version=None, is_public=None, localized_texts=None, first_deadline=None, max_points_before_first_deadline=None, submissions_count_limit=None, solution_files_limit=None, solution_size_limit=None, allow_second_deadline=None, visible_from=None, can_view_limit_ratios=None, can_view_measured_values=None, can_view_judge_stdout=None, can_view_judge_stderr=None, second_deadline=None, max_points_before_second_deadline=None, max_points_deadline_interpolation=None, is_bonus=None, points_percentual_threshold=None, disabled_runtime_environment_ids=None, send_notification=None, is_exam=None):  # noqa: E501
        """ExerciseassignmentsIdBody - a model defined in Swagger"""  # noqa: E501
        self._version = None
        self._is_public = None
        self._localized_texts = None
        self._first_deadline = None
        self._max_points_before_first_deadline = None
        self._submissions_count_limit = None
        self._solution_files_limit = None
        self._solution_size_limit = None
        self._allow_second_deadline = None
        self._visible_from = None
        self._can_view_limit_ratios = None
        self._can_view_measured_values = None
        self._can_view_judge_stdout = None
        self._can_view_judge_stderr = None
        self._second_deadline = None
        self._max_points_before_second_deadline = None
        self._max_points_deadline_interpolation = None
        self._is_bonus = None
        self._points_percentual_threshold = None
        self._disabled_runtime_environment_ids = None
        self._send_notification = None
        self._is_exam = None
        self.discriminator = None
        self.version = version
        self.is_public = is_public
        self.localized_texts = localized_texts
        self.first_deadline = first_deadline
        self.max_points_before_first_deadline = max_points_before_first_deadline
        self.submissions_count_limit = submissions_count_limit
        self.solution_files_limit = solution_files_limit
        self.solution_size_limit = solution_size_limit
        self.allow_second_deadline = allow_second_deadline
        if visible_from is not None:
            self.visible_from = visible_from
        self.can_view_limit_ratios = can_view_limit_ratios
        self.can_view_measured_values = can_view_measured_values
        self.can_view_judge_stdout = can_view_judge_stdout
        self.can_view_judge_stderr = can_view_judge_stderr
        if second_deadline is not None:
            self.second_deadline = second_deadline
        if max_points_before_second_deadline is not None:
            self.max_points_before_second_deadline = max_points_before_second_deadline
        self.max_points_deadline_interpolation = max_points_deadline_interpolation
        self.is_bonus = is_bonus
        if points_percentual_threshold is not None:
            self.points_percentual_threshold = points_percentual_threshold
        if disabled_runtime_environment_ids is not None:
            self.disabled_runtime_environment_ids = disabled_runtime_environment_ids
        if send_notification is not None:
            self.send_notification = send_notification
        if is_exam is not None:
            self.is_exam = is_exam

    @property
    def version(self):
        """Gets the version of this ExerciseassignmentsIdBody.  # noqa: E501

        Version of the edited assignment  # noqa: E501

        :return: The version of this ExerciseassignmentsIdBody.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ExerciseassignmentsIdBody.

        Version of the edited assignment  # noqa: E501

        :param version: The version of this ExerciseassignmentsIdBody.  # noqa: E501
        :type: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def is_public(self):
        """Gets the is_public of this ExerciseassignmentsIdBody.  # noqa: E501

        Is the assignment ready to be displayed to students?  # noqa: E501

        :return: The is_public of this ExerciseassignmentsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this ExerciseassignmentsIdBody.

        Is the assignment ready to be displayed to students?  # noqa: E501

        :param is_public: The is_public of this ExerciseassignmentsIdBody.  # noqa: E501
        :type: bool
        """
        if is_public is None:
            raise ValueError("Invalid value for `is_public`, must not be `None`")  # noqa: E501

        self._is_public = is_public

    @property
    def localized_texts(self):
        """Gets the localized_texts of this ExerciseassignmentsIdBody.  # noqa: E501

        A description of the assignment  # noqa: E501

        :return: The localized_texts of this ExerciseassignmentsIdBody.  # noqa: E501
        :rtype: list[object]
        """
        return self._localized_texts

    @localized_texts.setter
    def localized_texts(self, localized_texts):
        """Sets the localized_texts of this ExerciseassignmentsIdBody.

        A description of the assignment  # noqa: E501

        :param localized_texts: The localized_texts of this ExerciseassignmentsIdBody.  # noqa: E501
        :type: list[object]
        """
        if localized_texts is None:
            raise ValueError("Invalid value for `localized_texts`, must not be `None`")  # noqa: E501

        self._localized_texts = localized_texts

    @property
    def first_deadline(self):
        """Gets the first_deadline of this ExerciseassignmentsIdBody.  # noqa: E501

        First deadline for submission of the assignment  # noqa: E501

        :return: The first_deadline of this ExerciseassignmentsIdBody.  # noqa: E501
        :rtype: int
        """
        return self._first_deadline

    @first_deadline.setter
    def first_deadline(self, first_deadline):
        """Sets the first_deadline of this ExerciseassignmentsIdBody.

        First deadline for submission of the assignment  # noqa: E501

        :param first_deadline: The first_deadline of this ExerciseassignmentsIdBody.  # noqa: E501
        :type: int
        """
        if first_deadline is None:
            raise ValueError("Invalid value for `first_deadline`, must not be `None`")  # noqa: E501

        self._first_deadline = first_deadline

    @property
    def max_points_before_first_deadline(self):
        """Gets the max_points_before_first_deadline of this ExerciseassignmentsIdBody.  # noqa: E501

        A maximum of points that can be awarded for a submission before first deadline  # noqa: E501

        :return: The max_points_before_first_deadline of this ExerciseassignmentsIdBody.  # noqa: E501
        :rtype: int
        """
        return self._max_points_before_first_deadline

    @max_points_before_first_deadline.setter
    def max_points_before_first_deadline(self, max_points_before_first_deadline):
        """Sets the max_points_before_first_deadline of this ExerciseassignmentsIdBody.

        A maximum of points that can be awarded for a submission before first deadline  # noqa: E501

        :param max_points_before_first_deadline: The max_points_before_first_deadline of this ExerciseassignmentsIdBody.  # noqa: E501
        :type: int
        """
        if max_points_before_first_deadline is None:
            raise ValueError("Invalid value for `max_points_before_first_deadline`, must not be `None`")  # noqa: E501

        self._max_points_before_first_deadline = max_points_before_first_deadline

    @property
    def submissions_count_limit(self):
        """Gets the submissions_count_limit of this ExerciseassignmentsIdBody.  # noqa: E501

        A maximum amount of submissions by a student for the assignment  # noqa: E501

        :return: The submissions_count_limit of this ExerciseassignmentsIdBody.  # noqa: E501
        :rtype: int
        """
        return self._submissions_count_limit

    @submissions_count_limit.setter
    def submissions_count_limit(self, submissions_count_limit):
        """Sets the submissions_count_limit of this ExerciseassignmentsIdBody.

        A maximum amount of submissions by a student for the assignment  # noqa: E501

        :param submissions_count_limit: The submissions_count_limit of this ExerciseassignmentsIdBody.  # noqa: E501
        :type: int
        """
        if submissions_count_limit is None:
            raise ValueError("Invalid value for `submissions_count_limit`, must not be `None`")  # noqa: E501

        self._submissions_count_limit = submissions_count_limit

    @property
    def solution_files_limit(self):
        """Gets the solution_files_limit of this ExerciseassignmentsIdBody.  # noqa: E501

        Maximal number of files in a solution being submitted  # noqa: E501

        :return: The solution_files_limit of this ExerciseassignmentsIdBody.  # noqa: E501
        :rtype: int
        """
        return self._solution_files_limit

    @solution_files_limit.setter
    def solution_files_limit(self, solution_files_limit):
        """Sets the solution_files_limit of this ExerciseassignmentsIdBody.

        Maximal number of files in a solution being submitted  # noqa: E501

        :param solution_files_limit: The solution_files_limit of this ExerciseassignmentsIdBody.  # noqa: E501
        :type: int
        """
        if solution_files_limit is None:
            raise ValueError("Invalid value for `solution_files_limit`, must not be `None`")  # noqa: E501

        self._solution_files_limit = solution_files_limit

    @property
    def solution_size_limit(self):
        """Gets the solution_size_limit of this ExerciseassignmentsIdBody.  # noqa: E501

        Maximal size (bytes) of all files in a solution being submitted  # noqa: E501

        :return: The solution_size_limit of this ExerciseassignmentsIdBody.  # noqa: E501
        :rtype: int
        """
        return self._solution_size_limit

    @solution_size_limit.setter
    def solution_size_limit(self, solution_size_limit):
        """Sets the solution_size_limit of this ExerciseassignmentsIdBody.

        Maximal size (bytes) of all files in a solution being submitted  # noqa: E501

        :param solution_size_limit: The solution_size_limit of this ExerciseassignmentsIdBody.  # noqa: E501
        :type: int
        """
        if solution_size_limit is None:
            raise ValueError("Invalid value for `solution_size_limit`, must not be `None`")  # noqa: E501

        self._solution_size_limit = solution_size_limit

    @property
    def allow_second_deadline(self):
        """Gets the allow_second_deadline of this ExerciseassignmentsIdBody.  # noqa: E501

        Should there be a second deadline for students who didn't make the first one?  # noqa: E501

        :return: The allow_second_deadline of this ExerciseassignmentsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._allow_second_deadline

    @allow_second_deadline.setter
    def allow_second_deadline(self, allow_second_deadline):
        """Sets the allow_second_deadline of this ExerciseassignmentsIdBody.

        Should there be a second deadline for students who didn't make the first one?  # noqa: E501

        :param allow_second_deadline: The allow_second_deadline of this ExerciseassignmentsIdBody.  # noqa: E501
        :type: bool
        """
        if allow_second_deadline is None:
            raise ValueError("Invalid value for `allow_second_deadline`, must not be `None`")  # noqa: E501

        self._allow_second_deadline = allow_second_deadline

    @property
    def visible_from(self):
        """Gets the visible_from of this ExerciseassignmentsIdBody.  # noqa: E501

        Date from which this assignment will be visible to students  # noqa: E501

        :return: The visible_from of this ExerciseassignmentsIdBody.  # noqa: E501
        :rtype: int
        """
        return self._visible_from

    @visible_from.setter
    def visible_from(self, visible_from):
        """Sets the visible_from of this ExerciseassignmentsIdBody.

        Date from which this assignment will be visible to students  # noqa: E501

        :param visible_from: The visible_from of this ExerciseassignmentsIdBody.  # noqa: E501
        :type: int
        """

        self._visible_from = visible_from

    @property
    def can_view_limit_ratios(self):
        """Gets the can_view_limit_ratios of this ExerciseassignmentsIdBody.  # noqa: E501

        Can all users view ratio of theirs solution memory and time usages and assignment limits?  # noqa: E501

        :return: The can_view_limit_ratios of this ExerciseassignmentsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._can_view_limit_ratios

    @can_view_limit_ratios.setter
    def can_view_limit_ratios(self, can_view_limit_ratios):
        """Sets the can_view_limit_ratios of this ExerciseassignmentsIdBody.

        Can all users view ratio of theirs solution memory and time usages and assignment limits?  # noqa: E501

        :param can_view_limit_ratios: The can_view_limit_ratios of this ExerciseassignmentsIdBody.  # noqa: E501
        :type: bool
        """
        if can_view_limit_ratios is None:
            raise ValueError("Invalid value for `can_view_limit_ratios`, must not be `None`")  # noqa: E501

        self._can_view_limit_ratios = can_view_limit_ratios

    @property
    def can_view_measured_values(self):
        """Gets the can_view_measured_values of this ExerciseassignmentsIdBody.  # noqa: E501

        Can all users view absolute memory and time values?  # noqa: E501

        :return: The can_view_measured_values of this ExerciseassignmentsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._can_view_measured_values

    @can_view_measured_values.setter
    def can_view_measured_values(self, can_view_measured_values):
        """Sets the can_view_measured_values of this ExerciseassignmentsIdBody.

        Can all users view absolute memory and time values?  # noqa: E501

        :param can_view_measured_values: The can_view_measured_values of this ExerciseassignmentsIdBody.  # noqa: E501
        :type: bool
        """
        if can_view_measured_values is None:
            raise ValueError("Invalid value for `can_view_measured_values`, must not be `None`")  # noqa: E501

        self._can_view_measured_values = can_view_measured_values

    @property
    def can_view_judge_stdout(self):
        """Gets the can_view_judge_stdout of this ExerciseassignmentsIdBody.  # noqa: E501

        Can all users view judge primary log (stdout) of theirs solution?  # noqa: E501

        :return: The can_view_judge_stdout of this ExerciseassignmentsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._can_view_judge_stdout

    @can_view_judge_stdout.setter
    def can_view_judge_stdout(self, can_view_judge_stdout):
        """Sets the can_view_judge_stdout of this ExerciseassignmentsIdBody.

        Can all users view judge primary log (stdout) of theirs solution?  # noqa: E501

        :param can_view_judge_stdout: The can_view_judge_stdout of this ExerciseassignmentsIdBody.  # noqa: E501
        :type: bool
        """
        if can_view_judge_stdout is None:
            raise ValueError("Invalid value for `can_view_judge_stdout`, must not be `None`")  # noqa: E501

        self._can_view_judge_stdout = can_view_judge_stdout

    @property
    def can_view_judge_stderr(self):
        """Gets the can_view_judge_stderr of this ExerciseassignmentsIdBody.  # noqa: E501

        Can all users view judge secondary log (stderr) of theirs solution?  # noqa: E501

        :return: The can_view_judge_stderr of this ExerciseassignmentsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._can_view_judge_stderr

    @can_view_judge_stderr.setter
    def can_view_judge_stderr(self, can_view_judge_stderr):
        """Sets the can_view_judge_stderr of this ExerciseassignmentsIdBody.

        Can all users view judge secondary log (stderr) of theirs solution?  # noqa: E501

        :param can_view_judge_stderr: The can_view_judge_stderr of this ExerciseassignmentsIdBody.  # noqa: E501
        :type: bool
        """
        if can_view_judge_stderr is None:
            raise ValueError("Invalid value for `can_view_judge_stderr`, must not be `None`")  # noqa: E501

        self._can_view_judge_stderr = can_view_judge_stderr

    @property
    def second_deadline(self):
        """Gets the second_deadline of this ExerciseassignmentsIdBody.  # noqa: E501

        A second deadline for submission of the assignment (with different point award)  # noqa: E501

        :return: The second_deadline of this ExerciseassignmentsIdBody.  # noqa: E501
        :rtype: int
        """
        return self._second_deadline

    @second_deadline.setter
    def second_deadline(self, second_deadline):
        """Sets the second_deadline of this ExerciseassignmentsIdBody.

        A second deadline for submission of the assignment (with different point award)  # noqa: E501

        :param second_deadline: The second_deadline of this ExerciseassignmentsIdBody.  # noqa: E501
        :type: int
        """

        self._second_deadline = second_deadline

    @property
    def max_points_before_second_deadline(self):
        """Gets the max_points_before_second_deadline of this ExerciseassignmentsIdBody.  # noqa: E501

        A maximum of points that can be awarded for a late submission  # noqa: E501

        :return: The max_points_before_second_deadline of this ExerciseassignmentsIdBody.  # noqa: E501
        :rtype: int
        """
        return self._max_points_before_second_deadline

    @max_points_before_second_deadline.setter
    def max_points_before_second_deadline(self, max_points_before_second_deadline):
        """Sets the max_points_before_second_deadline of this ExerciseassignmentsIdBody.

        A maximum of points that can be awarded for a late submission  # noqa: E501

        :param max_points_before_second_deadline: The max_points_before_second_deadline of this ExerciseassignmentsIdBody.  # noqa: E501
        :type: int
        """

        self._max_points_before_second_deadline = max_points_before_second_deadline

    @property
    def max_points_deadline_interpolation(self):
        """Gets the max_points_deadline_interpolation of this ExerciseassignmentsIdBody.  # noqa: E501

        Use linear interpolation for max. points between 1st and 2nd deadline  # noqa: E501

        :return: The max_points_deadline_interpolation of this ExerciseassignmentsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._max_points_deadline_interpolation

    @max_points_deadline_interpolation.setter
    def max_points_deadline_interpolation(self, max_points_deadline_interpolation):
        """Sets the max_points_deadline_interpolation of this ExerciseassignmentsIdBody.

        Use linear interpolation for max. points between 1st and 2nd deadline  # noqa: E501

        :param max_points_deadline_interpolation: The max_points_deadline_interpolation of this ExerciseassignmentsIdBody.  # noqa: E501
        :type: bool
        """
        if max_points_deadline_interpolation is None:
            raise ValueError("Invalid value for `max_points_deadline_interpolation`, must not be `None`")  # noqa: E501

        self._max_points_deadline_interpolation = max_points_deadline_interpolation

    @property
    def is_bonus(self):
        """Gets the is_bonus of this ExerciseassignmentsIdBody.  # noqa: E501

        If true, points from this exercise will not be included in overall score of group  # noqa: E501

        :return: The is_bonus of this ExerciseassignmentsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_bonus

    @is_bonus.setter
    def is_bonus(self, is_bonus):
        """Sets the is_bonus of this ExerciseassignmentsIdBody.

        If true, points from this exercise will not be included in overall score of group  # noqa: E501

        :param is_bonus: The is_bonus of this ExerciseassignmentsIdBody.  # noqa: E501
        :type: bool
        """
        if is_bonus is None:
            raise ValueError("Invalid value for `is_bonus`, must not be `None`")  # noqa: E501

        self._is_bonus = is_bonus

    @property
    def points_percentual_threshold(self):
        """Gets the points_percentual_threshold of this ExerciseassignmentsIdBody.  # noqa: E501

        A minimum percentage of points needed to gain point from assignment  # noqa: E501

        :return: The points_percentual_threshold of this ExerciseassignmentsIdBody.  # noqa: E501
        :rtype: float
        """
        return self._points_percentual_threshold

    @points_percentual_threshold.setter
    def points_percentual_threshold(self, points_percentual_threshold):
        """Sets the points_percentual_threshold of this ExerciseassignmentsIdBody.

        A minimum percentage of points needed to gain point from assignment  # noqa: E501

        :param points_percentual_threshold: The points_percentual_threshold of this ExerciseassignmentsIdBody.  # noqa: E501
        :type: float
        """

        self._points_percentual_threshold = points_percentual_threshold

    @property
    def disabled_runtime_environment_ids(self):
        """Gets the disabled_runtime_environment_ids of this ExerciseassignmentsIdBody.  # noqa: E501

        Identifiers of runtime environments that should not be used for student submissions  # noqa: E501

        :return: The disabled_runtime_environment_ids of this ExerciseassignmentsIdBody.  # noqa: E501
        :rtype: list[object]
        """
        return self._disabled_runtime_environment_ids

    @disabled_runtime_environment_ids.setter
    def disabled_runtime_environment_ids(self, disabled_runtime_environment_ids):
        """Sets the disabled_runtime_environment_ids of this ExerciseassignmentsIdBody.

        Identifiers of runtime environments that should not be used for student submissions  # noqa: E501

        :param disabled_runtime_environment_ids: The disabled_runtime_environment_ids of this ExerciseassignmentsIdBody.  # noqa: E501
        :type: list[object]
        """

        self._disabled_runtime_environment_ids = disabled_runtime_environment_ids

    @property
    def send_notification(self):
        """Gets the send_notification of this ExerciseassignmentsIdBody.  # noqa: E501

        If email notification (when assignment becomes public) should be sent  # noqa: E501

        :return: The send_notification of this ExerciseassignmentsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._send_notification

    @send_notification.setter
    def send_notification(self, send_notification):
        """Sets the send_notification of this ExerciseassignmentsIdBody.

        If email notification (when assignment becomes public) should be sent  # noqa: E501

        :param send_notification: The send_notification of this ExerciseassignmentsIdBody.  # noqa: E501
        :type: bool
        """

        self._send_notification = send_notification

    @property
    def is_exam(self):
        """Gets the is_exam of this ExerciseassignmentsIdBody.  # noqa: E501

        This assignment is dedicated for an exam (should be solved in exam mode)  # noqa: E501

        :return: The is_exam of this ExerciseassignmentsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_exam

    @is_exam.setter
    def is_exam(self, is_exam):
        """Sets the is_exam of this ExerciseassignmentsIdBody.

        This assignment is dedicated for an exam (should be solved in exam mode)  # noqa: E501

        :param is_exam: The is_exam of this ExerciseassignmentsIdBody.  # noqa: E501
        :type: bool
        """

        self._is_exam = is_exam

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExerciseassignmentsIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExerciseassignmentsIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
