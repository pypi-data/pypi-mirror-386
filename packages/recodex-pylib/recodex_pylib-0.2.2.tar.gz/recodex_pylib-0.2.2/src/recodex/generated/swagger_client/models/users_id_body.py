# coding: utf-8

"""
    ReCodEx API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UsersIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_name': 'str',
        'last_name': 'str',
        'titles_before_name': 'str',
        'titles_after_name': 'str',
        'email': 'str',
        'old_password': 'str',
        'password': 'str',
        'password_confirm': 'str',
        'gravatar_url_enabled': 'bool'
    }

    attribute_map = {
        'first_name': 'firstName',
        'last_name': 'lastName',
        'titles_before_name': 'titlesBeforeName',
        'titles_after_name': 'titlesAfterName',
        'email': 'email',
        'old_password': 'oldPassword',
        'password': 'password',
        'password_confirm': 'passwordConfirm',
        'gravatar_url_enabled': 'gravatarUrlEnabled'
    }

    def __init__(self, first_name=None, last_name=None, titles_before_name=None, titles_after_name=None, email=None, old_password=None, password=None, password_confirm=None, gravatar_url_enabled=None):  # noqa: E501
        """UsersIdBody - a model defined in Swagger"""  # noqa: E501
        self._first_name = None
        self._last_name = None
        self._titles_before_name = None
        self._titles_after_name = None
        self._email = None
        self._old_password = None
        self._password = None
        self._password_confirm = None
        self._gravatar_url_enabled = None
        self.discriminator = None
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if titles_before_name is not None:
            self.titles_before_name = titles_before_name
        if titles_after_name is not None:
            self.titles_after_name = titles_after_name
        if email is not None:
            self.email = email
        if old_password is not None:
            self.old_password = old_password
        if password is not None:
            self.password = password
        if password_confirm is not None:
            self.password_confirm = password_confirm
        if gravatar_url_enabled is not None:
            self.gravatar_url_enabled = gravatar_url_enabled

    @property
    def first_name(self):
        """Gets the first_name of this UsersIdBody.  # noqa: E501

        First name  # noqa: E501

        :return: The first_name of this UsersIdBody.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UsersIdBody.

        First name  # noqa: E501

        :param first_name: The first_name of this UsersIdBody.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UsersIdBody.  # noqa: E501

        Last name  # noqa: E501

        :return: The last_name of this UsersIdBody.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UsersIdBody.

        Last name  # noqa: E501

        :param last_name: The last_name of this UsersIdBody.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def titles_before_name(self):
        """Gets the titles_before_name of this UsersIdBody.  # noqa: E501

        Titles before name  # noqa: E501

        :return: The titles_before_name of this UsersIdBody.  # noqa: E501
        :rtype: str
        """
        return self._titles_before_name

    @titles_before_name.setter
    def titles_before_name(self, titles_before_name):
        """Sets the titles_before_name of this UsersIdBody.

        Titles before name  # noqa: E501

        :param titles_before_name: The titles_before_name of this UsersIdBody.  # noqa: E501
        :type: str
        """

        self._titles_before_name = titles_before_name

    @property
    def titles_after_name(self):
        """Gets the titles_after_name of this UsersIdBody.  # noqa: E501

        Titles after name  # noqa: E501

        :return: The titles_after_name of this UsersIdBody.  # noqa: E501
        :rtype: str
        """
        return self._titles_after_name

    @titles_after_name.setter
    def titles_after_name(self, titles_after_name):
        """Sets the titles_after_name of this UsersIdBody.

        Titles after name  # noqa: E501

        :param titles_after_name: The titles_after_name of this UsersIdBody.  # noqa: E501
        :type: str
        """

        self._titles_after_name = titles_after_name

    @property
    def email(self):
        """Gets the email of this UsersIdBody.  # noqa: E501

        New email address  # noqa: E501

        :return: The email of this UsersIdBody.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UsersIdBody.

        New email address  # noqa: E501

        :param email: The email of this UsersIdBody.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def old_password(self):
        """Gets the old_password of this UsersIdBody.  # noqa: E501

        Old password of current user  # noqa: E501

        :return: The old_password of this UsersIdBody.  # noqa: E501
        :rtype: str
        """
        return self._old_password

    @old_password.setter
    def old_password(self, old_password):
        """Sets the old_password of this UsersIdBody.

        Old password of current user  # noqa: E501

        :param old_password: The old_password of this UsersIdBody.  # noqa: E501
        :type: str
        """

        self._old_password = old_password

    @property
    def password(self):
        """Gets the password of this UsersIdBody.  # noqa: E501

        New password of current user  # noqa: E501

        :return: The password of this UsersIdBody.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UsersIdBody.

        New password of current user  # noqa: E501

        :param password: The password of this UsersIdBody.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def password_confirm(self):
        """Gets the password_confirm of this UsersIdBody.  # noqa: E501

        Confirmation of new password of current user  # noqa: E501

        :return: The password_confirm of this UsersIdBody.  # noqa: E501
        :rtype: str
        """
        return self._password_confirm

    @password_confirm.setter
    def password_confirm(self, password_confirm):
        """Sets the password_confirm of this UsersIdBody.

        Confirmation of new password of current user  # noqa: E501

        :param password_confirm: The password_confirm of this UsersIdBody.  # noqa: E501
        :type: str
        """

        self._password_confirm = password_confirm

    @property
    def gravatar_url_enabled(self):
        """Gets the gravatar_url_enabled of this UsersIdBody.  # noqa: E501

        Enable or disable gravatar profile image  # noqa: E501

        :return: The gravatar_url_enabled of this UsersIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._gravatar_url_enabled

    @gravatar_url_enabled.setter
    def gravatar_url_enabled(self, gravatar_url_enabled):
        """Sets the gravatar_url_enabled of this UsersIdBody.

        Enable or disable gravatar profile image  # noqa: E501

        :param gravatar_url_enabled: The gravatar_url_enabled of this UsersIdBody.  # noqa: E501
        :type: bool
        """

        self._gravatar_url_enabled = gravatar_url_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UsersIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsersIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
