# coding: utf-8

"""
    ReCodEx API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ...swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def assignment_solution_reviews_presenter_action_default(self, id, **kwargs):  # noqa: E501
        """Get detail of the solution and a list of review comments.  # noqa: E501

        Get detail of the solution and a list of review comments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solution_reviews_presenter_action_default(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identifier of the solution (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignment_solution_reviews_presenter_action_default_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.assignment_solution_reviews_presenter_action_default_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def assignment_solution_reviews_presenter_action_default_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get detail of the solution and a list of review comments.  # noqa: E501

        Get detail of the solution and a list of review comments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solution_reviews_presenter_action_default_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identifier of the solution (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignment_solution_reviews_presenter_action_default" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assignment_solution_reviews_presenter_action_default`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/assignment-solutions/{id}/review', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignment_solution_reviews_presenter_action_delete_comment(self, id, comment_id, **kwargs):  # noqa: E501
        """Remove one comment from a review.  # noqa: E501

        Remove one comment from a review.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solution_reviews_presenter_action_delete_comment(id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identifier of the solution (required)
        :param str comment_id: identifier of the review comment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignment_solution_reviews_presenter_action_delete_comment_with_http_info(id, comment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assignment_solution_reviews_presenter_action_delete_comment_with_http_info(id, comment_id, **kwargs)  # noqa: E501
            return data

    def assignment_solution_reviews_presenter_action_delete_comment_with_http_info(self, id, comment_id, **kwargs):  # noqa: E501
        """Remove one comment from a review.  # noqa: E501

        Remove one comment from a review.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solution_reviews_presenter_action_delete_comment_with_http_info(id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identifier of the solution (required)
        :param str comment_id: identifier of the review comment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'comment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignment_solution_reviews_presenter_action_delete_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assignment_solution_reviews_presenter_action_delete_comment`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if ('comment_id' not in params or
                params['comment_id'] is None):
            raise ValueError("Missing the required parameter `comment_id` when calling `assignment_solution_reviews_presenter_action_delete_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/assignment-solutions/{id}/review-comment/{commentId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignment_solution_reviews_presenter_action_edit_comment(self, id, comment_id, **kwargs):  # noqa: E501
        """Update existing comment within a review.  # noqa: E501

        Update existing comment within a review.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solution_reviews_presenter_action_edit_comment(id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identifier of the solution (required)
        :param str comment_id: identifier of the review comment (required)
        :param ReviewcommentCommentIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignment_solution_reviews_presenter_action_edit_comment_with_http_info(id, comment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assignment_solution_reviews_presenter_action_edit_comment_with_http_info(id, comment_id, **kwargs)  # noqa: E501
            return data

    def assignment_solution_reviews_presenter_action_edit_comment_with_http_info(self, id, comment_id, **kwargs):  # noqa: E501
        """Update existing comment within a review.  # noqa: E501

        Update existing comment within a review.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solution_reviews_presenter_action_edit_comment_with_http_info(id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identifier of the solution (required)
        :param str comment_id: identifier of the review comment (required)
        :param ReviewcommentCommentIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'comment_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignment_solution_reviews_presenter_action_edit_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assignment_solution_reviews_presenter_action_edit_comment`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if ('comment_id' not in params or
                params['comment_id'] is None):
            raise ValueError("Missing the required parameter `comment_id` when calling `assignment_solution_reviews_presenter_action_edit_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/assignment-solutions/{id}/review-comment/{commentId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignment_solution_reviews_presenter_action_new_comment(self, id, **kwargs):  # noqa: E501
        """Create a new comment within a review.  # noqa: E501

        Create a new comment within a review.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solution_reviews_presenter_action_new_comment(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identifier of the solution (required)
        :param IdReviewcommentBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignment_solution_reviews_presenter_action_new_comment_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.assignment_solution_reviews_presenter_action_new_comment_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def assignment_solution_reviews_presenter_action_new_comment_with_http_info(self, id, **kwargs):  # noqa: E501
        """Create a new comment within a review.  # noqa: E501

        Create a new comment within a review.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solution_reviews_presenter_action_new_comment_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identifier of the solution (required)
        :param IdReviewcommentBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignment_solution_reviews_presenter_action_new_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assignment_solution_reviews_presenter_action_new_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/assignment-solutions/{id}/review-comment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignment_solution_reviews_presenter_action_pending(self, id, **kwargs):  # noqa: E501
        """Return all solutions with pending reviews that given user teaches (is admin/supervisor in corresponding groups). Along with that it returns all assignment entities of the corresponding solutions.  # noqa: E501

        Return all solutions with pending reviews that given user teaches (is admin/supervisor in corresponding groups). Along with that it returns all assignment entities of the corresponding solutions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solution_reviews_presenter_action_pending(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: of the user whose pending reviews are listed (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignment_solution_reviews_presenter_action_pending_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.assignment_solution_reviews_presenter_action_pending_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def assignment_solution_reviews_presenter_action_pending_with_http_info(self, id, **kwargs):  # noqa: E501
        """Return all solutions with pending reviews that given user teaches (is admin/supervisor in corresponding groups). Along with that it returns all assignment entities of the corresponding solutions.  # noqa: E501

        Return all solutions with pending reviews that given user teaches (is admin/supervisor in corresponding groups). Along with that it returns all assignment entities of the corresponding solutions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solution_reviews_presenter_action_pending_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: of the user whose pending reviews are listed (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignment_solution_reviews_presenter_action_pending" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assignment_solution_reviews_presenter_action_pending`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{id}/pending-reviews', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignment_solution_reviews_presenter_action_remove(self, id, **kwargs):  # noqa: E501
        """Update the state of the review process of the solution.  # noqa: E501

        Update the state of the review process of the solution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solution_reviews_presenter_action_remove(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identifier of the solution (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignment_solution_reviews_presenter_action_remove_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.assignment_solution_reviews_presenter_action_remove_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def assignment_solution_reviews_presenter_action_remove_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update the state of the review process of the solution.  # noqa: E501

        Update the state of the review process of the solution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solution_reviews_presenter_action_remove_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identifier of the solution (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignment_solution_reviews_presenter_action_remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assignment_solution_reviews_presenter_action_remove`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/assignment-solutions/{id}/review', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignment_solution_reviews_presenter_action_update(self, id, **kwargs):  # noqa: E501
        """Update the state of the review process of the solution.  # noqa: E501

        Update the state of the review process of the solution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solution_reviews_presenter_action_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identifier of the solution (required)
        :param IdReviewBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignment_solution_reviews_presenter_action_update_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.assignment_solution_reviews_presenter_action_update_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def assignment_solution_reviews_presenter_action_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update the state of the review process of the solution.  # noqa: E501

        Update the state of the review process of the solution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solution_reviews_presenter_action_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identifier of the solution (required)
        :param IdReviewBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignment_solution_reviews_presenter_action_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assignment_solution_reviews_presenter_action_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/assignment-solutions/{id}/review', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignment_solutions_presenter_action_delete_solution(self, id, **kwargs):  # noqa: E501
        """Delete assignment solution with given identification.  # noqa: E501

        Delete assignment solution with given identification.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solutions_presenter_action_delete_solution(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identifier of assignment solution (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignment_solutions_presenter_action_delete_solution_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.assignment_solutions_presenter_action_delete_solution_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def assignment_solutions_presenter_action_delete_solution_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete assignment solution with given identification.  # noqa: E501

        Delete assignment solution with given identification.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solutions_presenter_action_delete_solution_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identifier of assignment solution (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignment_solutions_presenter_action_delete_solution" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assignment_solutions_presenter_action_delete_solution`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/assignment-solutions/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignment_solutions_presenter_action_delete_submission(self, submission_id, **kwargs):  # noqa: E501
        """Remove the submission permanently  # noqa: E501

        Remove the submission permanently  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solutions_presenter_action_delete_submission(submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str submission_id: Identifier of the submission (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignment_solutions_presenter_action_delete_submission_with_http_info(submission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assignment_solutions_presenter_action_delete_submission_with_http_info(submission_id, **kwargs)  # noqa: E501
            return data

    def assignment_solutions_presenter_action_delete_submission_with_http_info(self, submission_id, **kwargs):  # noqa: E501
        """Remove the submission permanently  # noqa: E501

        Remove the submission permanently  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solutions_presenter_action_delete_submission_with_http_info(submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str submission_id: Identifier of the submission (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['submission_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignment_solutions_presenter_action_delete_submission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'submission_id' is set
        if ('submission_id' not in params or
                params['submission_id'] is None):
            raise ValueError("Missing the required parameter `submission_id` when calling `assignment_solutions_presenter_action_delete_submission`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'submission_id' in params:
            path_params['submissionId'] = params['submission_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/assignment-solutions/submission/{submissionId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignment_solutions_presenter_action_download_result_archive(self, submission_id, **kwargs):  # noqa: E501
        """Download result archive from backend for particular submission.  # noqa: E501

        Download result archive from backend for particular submission.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solutions_presenter_action_download_result_archive(submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str submission_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignment_solutions_presenter_action_download_result_archive_with_http_info(submission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assignment_solutions_presenter_action_download_result_archive_with_http_info(submission_id, **kwargs)  # noqa: E501
            return data

    def assignment_solutions_presenter_action_download_result_archive_with_http_info(self, submission_id, **kwargs):  # noqa: E501
        """Download result archive from backend for particular submission.  # noqa: E501

        Download result archive from backend for particular submission.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solutions_presenter_action_download_result_archive_with_http_info(submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str submission_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['submission_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignment_solutions_presenter_action_download_result_archive" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'submission_id' is set
        if ('submission_id' not in params or
                params['submission_id'] is None):
            raise ValueError("Missing the required parameter `submission_id` when calling `assignment_solutions_presenter_action_download_result_archive`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'submission_id' in params:
            path_params['submissionId'] = params['submission_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/assignment-solutions/submission/{submissionId}/download-result', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignment_solutions_presenter_action_download_solution_archive(self, id, **kwargs):  # noqa: E501
        """Download archive containing all solution files for particular solution.  # noqa: E501

        Download archive containing all solution files for particular solution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solutions_presenter_action_download_solution_archive(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: of assignment solution (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignment_solutions_presenter_action_download_solution_archive_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.assignment_solutions_presenter_action_download_solution_archive_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def assignment_solutions_presenter_action_download_solution_archive_with_http_info(self, id, **kwargs):  # noqa: E501
        """Download archive containing all solution files for particular solution.  # noqa: E501

        Download archive containing all solution files for particular solution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solutions_presenter_action_download_solution_archive_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: of assignment solution (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignment_solutions_presenter_action_download_solution_archive" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assignment_solutions_presenter_action_download_solution_archive`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/assignment-solutions/{id}/download-solution', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignment_solutions_presenter_action_evaluation_score_config(self, submission_id, **kwargs):  # noqa: E501
        """Get score configuration associated with given submission evaluation  # noqa: E501

        Get score configuration associated with given submission evaluation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solutions_presenter_action_evaluation_score_config(submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str submission_id: Identifier of the submission (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignment_solutions_presenter_action_evaluation_score_config_with_http_info(submission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assignment_solutions_presenter_action_evaluation_score_config_with_http_info(submission_id, **kwargs)  # noqa: E501
            return data

    def assignment_solutions_presenter_action_evaluation_score_config_with_http_info(self, submission_id, **kwargs):  # noqa: E501
        """Get score configuration associated with given submission evaluation  # noqa: E501

        Get score configuration associated with given submission evaluation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solutions_presenter_action_evaluation_score_config_with_http_info(submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str submission_id: Identifier of the submission (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['submission_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignment_solutions_presenter_action_evaluation_score_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'submission_id' is set
        if ('submission_id' not in params or
                params['submission_id'] is None):
            raise ValueError("Missing the required parameter `submission_id` when calling `assignment_solutions_presenter_action_evaluation_score_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'submission_id' in params:
            path_params['submissionId'] = params['submission_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/assignment-solutions/submission/{submissionId}/score-config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignment_solutions_presenter_action_files(self, id, **kwargs):  # noqa: E501
        """Get the list of submitted files of the solution.  # noqa: E501

        Get the list of submitted files of the solution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solutions_presenter_action_files(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: of assignment solution (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignment_solutions_presenter_action_files_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.assignment_solutions_presenter_action_files_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def assignment_solutions_presenter_action_files_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the list of submitted files of the solution.  # noqa: E501

        Get the list of submitted files of the solution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solutions_presenter_action_files_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: of assignment solution (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignment_solutions_presenter_action_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assignment_solutions_presenter_action_files`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/assignment-solutions/{id}/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignment_solutions_presenter_action_review_requests(self, id, **kwargs):  # noqa: E501
        """Return all solutions with reviewRequest flag that given user might need to review (is admin/supervisor in corresponding groups). Along with that it returns all assignment entities of the corresponding solutions.  # noqa: E501

        Return all solutions with reviewRequest flag that given user might need to review (is admin/supervisor in corresponding groups). Along with that it returns all assignment entities of the corresponding solutions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solutions_presenter_action_review_requests(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: of the user whose solutions with requested reviews are listed (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignment_solutions_presenter_action_review_requests_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.assignment_solutions_presenter_action_review_requests_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def assignment_solutions_presenter_action_review_requests_with_http_info(self, id, **kwargs):  # noqa: E501
        """Return all solutions with reviewRequest flag that given user might need to review (is admin/supervisor in corresponding groups). Along with that it returns all assignment entities of the corresponding solutions.  # noqa: E501

        Return all solutions with reviewRequest flag that given user might need to review (is admin/supervisor in corresponding groups). Along with that it returns all assignment entities of the corresponding solutions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solutions_presenter_action_review_requests_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: of the user whose solutions with requested reviews are listed (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignment_solutions_presenter_action_review_requests" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assignment_solutions_presenter_action_review_requests`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{id}/review-requests', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignment_solutions_presenter_action_set_bonus_points(self, id, **kwargs):  # noqa: E501
        """Set new amount of bonus points for a solution (and optionally points override) Returns array of solution entities that has been changed by this.  # noqa: E501

        Set new amount of bonus points for a solution (and optionally points override) Returns array of solution entities that has been changed by this.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solutions_presenter_action_set_bonus_points(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the solution (required)
        :param IdBonuspointsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignment_solutions_presenter_action_set_bonus_points_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.assignment_solutions_presenter_action_set_bonus_points_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def assignment_solutions_presenter_action_set_bonus_points_with_http_info(self, id, **kwargs):  # noqa: E501
        """Set new amount of bonus points for a solution (and optionally points override) Returns array of solution entities that has been changed by this.  # noqa: E501

        Set new amount of bonus points for a solution (and optionally points override) Returns array of solution entities that has been changed by this.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solutions_presenter_action_set_bonus_points_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the solution (required)
        :param IdBonuspointsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignment_solutions_presenter_action_set_bonus_points" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assignment_solutions_presenter_action_set_bonus_points`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/assignment-solutions/{id}/bonus-points', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignment_solutions_presenter_action_set_flag(self, id, flag, **kwargs):  # noqa: E501
        """Set flag of the assignment solution.  # noqa: E501

        Set flag of the assignment solution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solutions_presenter_action_set_flag(id, flag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identifier of the solution (required)
        :param str flag: name of the flag which should to be changed (required)
        :param SetflagFlagBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignment_solutions_presenter_action_set_flag_with_http_info(id, flag, **kwargs)  # noqa: E501
        else:
            (data) = self.assignment_solutions_presenter_action_set_flag_with_http_info(id, flag, **kwargs)  # noqa: E501
            return data

    def assignment_solutions_presenter_action_set_flag_with_http_info(self, id, flag, **kwargs):  # noqa: E501
        """Set flag of the assignment solution.  # noqa: E501

        Set flag of the assignment solution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solutions_presenter_action_set_flag_with_http_info(id, flag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identifier of the solution (required)
        :param str flag: name of the flag which should to be changed (required)
        :param SetflagFlagBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'flag', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignment_solutions_presenter_action_set_flag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assignment_solutions_presenter_action_set_flag`")  # noqa: E501
        # verify the required parameter 'flag' is set
        if ('flag' not in params or
                params['flag'] is None):
            raise ValueError("Missing the required parameter `flag` when calling `assignment_solutions_presenter_action_set_flag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'flag' in params:
            path_params['flag'] = params['flag']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/assignment-solutions/{id}/set-flag/{flag}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignment_solutions_presenter_action_solution(self, id, **kwargs):  # noqa: E501
        """Get information about solutions.  # noqa: E501

        Get information about solutions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solutions_presenter_action_solution(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the solution (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignment_solutions_presenter_action_solution_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.assignment_solutions_presenter_action_solution_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def assignment_solutions_presenter_action_solution_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get information about solutions.  # noqa: E501

        Get information about solutions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solutions_presenter_action_solution_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the solution (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignment_solutions_presenter_action_solution" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assignment_solutions_presenter_action_solution`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/assignment-solutions/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignment_solutions_presenter_action_submission(self, submission_id, **kwargs):  # noqa: E501
        """Get information about the evaluation of a submission  # noqa: E501

        Get information about the evaluation of a submission  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solutions_presenter_action_submission(submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str submission_id: Identifier of the submission (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignment_solutions_presenter_action_submission_with_http_info(submission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assignment_solutions_presenter_action_submission_with_http_info(submission_id, **kwargs)  # noqa: E501
            return data

    def assignment_solutions_presenter_action_submission_with_http_info(self, submission_id, **kwargs):  # noqa: E501
        """Get information about the evaluation of a submission  # noqa: E501

        Get information about the evaluation of a submission  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solutions_presenter_action_submission_with_http_info(submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str submission_id: Identifier of the submission (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['submission_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignment_solutions_presenter_action_submission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'submission_id' is set
        if ('submission_id' not in params or
                params['submission_id'] is None):
            raise ValueError("Missing the required parameter `submission_id` when calling `assignment_solutions_presenter_action_submission`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'submission_id' in params:
            path_params['submissionId'] = params['submission_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/assignment-solutions/submission/{submissionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignment_solutions_presenter_action_submissions(self, id, **kwargs):  # noqa: E501
        """Get list of all submissions of a solution  # noqa: E501

        Get list of all submissions of a solution  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solutions_presenter_action_submissions(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the solution (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignment_solutions_presenter_action_submissions_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.assignment_solutions_presenter_action_submissions_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def assignment_solutions_presenter_action_submissions_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get list of all submissions of a solution  # noqa: E501

        Get list of all submissions of a solution  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solutions_presenter_action_submissions_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the solution (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignment_solutions_presenter_action_submissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assignment_solutions_presenter_action_submissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/assignment-solutions/{id}/submissions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignment_solutions_presenter_action_update_solution(self, id, **kwargs):  # noqa: E501
        """Update details about the solution (note, etc...)  # noqa: E501

        Update details about the solution (note, etc...)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solutions_presenter_action_update_solution(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the solution (required)
        :param AssignmentsolutionsIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignment_solutions_presenter_action_update_solution_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.assignment_solutions_presenter_action_update_solution_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def assignment_solutions_presenter_action_update_solution_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update details about the solution (note, etc...)  # noqa: E501

        Update details about the solution (note, etc...)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solutions_presenter_action_update_solution_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the solution (required)
        :param AssignmentsolutionsIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignment_solutions_presenter_action_update_solution" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assignment_solutions_presenter_action_update_solution`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/assignment-solutions/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignment_solvers_presenter_action_default(self, **kwargs):  # noqa: E501
        """Get a list of assignment solvers based on given parameters (assignment/group and solver user). Either assignment or group ID must be set (group is ignored if assignment is set), user ID is optional.  # noqa: E501

        Get a list of assignment solvers based on given parameters (assignment/group and solver user). Either assignment or group ID must be set (group is ignored if assignment is set), user ID is optional.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solvers_presenter_action_default(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assignment_id:
        :param str group_id: An alternative for assignment ID, selects all assignments from a group.
        :param str user_id:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignment_solvers_presenter_action_default_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.assignment_solvers_presenter_action_default_with_http_info(**kwargs)  # noqa: E501
            return data

    def assignment_solvers_presenter_action_default_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of assignment solvers based on given parameters (assignment/group and solver user). Either assignment or group ID must be set (group is ignored if assignment is set), user ID is optional.  # noqa: E501

        Get a list of assignment solvers based on given parameters (assignment/group and solver user). Either assignment or group ID must be set (group is ignored if assignment is set), user ID is optional.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_solvers_presenter_action_default_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assignment_id:
        :param str group_id: An alternative for assignment ID, selects all assignments from a group.
        :param str user_id:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['assignment_id', 'group_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignment_solvers_presenter_action_default" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'assignment_id' in params:
            query_params.append(('assignmentId', params['assignment_id']))  # noqa: E501
        if 'group_id' in params:
            query_params.append(('groupId', params['group_id']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/assignment-solvers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignments_presenter_action_best_solution(self, id, user_id, **kwargs):  # noqa: E501
        """Get the best solution by a user to an assignment  # noqa: E501

        Get the best solution by a user to an assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignments_presenter_action_best_solution(id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the assignment (required)
        :param str user_id: Identifier of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignments_presenter_action_best_solution_with_http_info(id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assignments_presenter_action_best_solution_with_http_info(id, user_id, **kwargs)  # noqa: E501
            return data

    def assignments_presenter_action_best_solution_with_http_info(self, id, user_id, **kwargs):  # noqa: E501
        """Get the best solution by a user to an assignment  # noqa: E501

        Get the best solution by a user to an assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignments_presenter_action_best_solution_with_http_info(id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the assignment (required)
        :param str user_id: Identifier of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignments_presenter_action_best_solution" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assignments_presenter_action_best_solution`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `assignments_presenter_action_best_solution`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercise-assignments/{id}/users/{userId}/best-solution', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignments_presenter_action_best_solutions(self, id, **kwargs):  # noqa: E501
        """Get the best solutions to an assignment for all students in group.  # noqa: E501

        Get the best solutions to an assignment for all students in group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignments_presenter_action_best_solutions(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the assignment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignments_presenter_action_best_solutions_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.assignments_presenter_action_best_solutions_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def assignments_presenter_action_best_solutions_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the best solutions to an assignment for all students in group.  # noqa: E501

        Get the best solutions to an assignment for all students in group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignments_presenter_action_best_solutions_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the assignment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignments_presenter_action_best_solutions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assignments_presenter_action_best_solutions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercise-assignments/{id}/best-solutions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignments_presenter_action_create(self, **kwargs):  # noqa: E501
        """Assign an exercise to a group  # noqa: E501

        Assign an exercise to a group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignments_presenter_action_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1ExerciseassignmentsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignments_presenter_action_create_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.assignments_presenter_action_create_with_http_info(**kwargs)  # noqa: E501
            return data

    def assignments_presenter_action_create_with_http_info(self, **kwargs):  # noqa: E501
        """Assign an exercise to a group  # noqa: E501

        Assign an exercise to a group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignments_presenter_action_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1ExerciseassignmentsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignments_presenter_action_create" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercise-assignments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignments_presenter_action_detail(self, id, **kwargs):  # noqa: E501
        """Get details of an assignment  # noqa: E501

        Get details of an assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignments_presenter_action_detail(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the assignment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignments_presenter_action_detail_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.assignments_presenter_action_detail_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def assignments_presenter_action_detail_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get details of an assignment  # noqa: E501

        Get details of an assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignments_presenter_action_detail_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the assignment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignments_presenter_action_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assignments_presenter_action_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercise-assignments/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignments_presenter_action_download_best_solutions_archive(self, id, **kwargs):  # noqa: E501
        """Download the best solutions of an assignment for all students in group.  # noqa: E501

        Download the best solutions of an assignment for all students in group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignments_presenter_action_download_best_solutions_archive(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the assignment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignments_presenter_action_download_best_solutions_archive_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.assignments_presenter_action_download_best_solutions_archive_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def assignments_presenter_action_download_best_solutions_archive_with_http_info(self, id, **kwargs):  # noqa: E501
        """Download the best solutions of an assignment for all students in group.  # noqa: E501

        Download the best solutions of an assignment for all students in group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignments_presenter_action_download_best_solutions_archive_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the assignment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignments_presenter_action_download_best_solutions_archive" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assignments_presenter_action_download_best_solutions_archive`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercise-assignments/{id}/download-best-solutions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignments_presenter_action_remove(self, id, **kwargs):  # noqa: E501
        """Delete an assignment  # noqa: E501

        Delete an assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignments_presenter_action_remove(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the assignment to be removed (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignments_presenter_action_remove_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.assignments_presenter_action_remove_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def assignments_presenter_action_remove_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete an assignment  # noqa: E501

        Delete an assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignments_presenter_action_remove_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the assignment to be removed (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignments_presenter_action_remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assignments_presenter_action_remove`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercise-assignments/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignments_presenter_action_solutions(self, id, **kwargs):  # noqa: E501
        """Get a list of solutions of all users for the assignment  # noqa: E501

        Get a list of solutions of all users for the assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignments_presenter_action_solutions(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the assignment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignments_presenter_action_solutions_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.assignments_presenter_action_solutions_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def assignments_presenter_action_solutions_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a list of solutions of all users for the assignment  # noqa: E501

        Get a list of solutions of all users for the assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignments_presenter_action_solutions_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the assignment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignments_presenter_action_solutions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assignments_presenter_action_solutions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercise-assignments/{id}/solutions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignments_presenter_action_sync_with_exercise(self, id, **kwargs):  # noqa: E501
        """Update the assignment so that it matches with the current version of the exercise (limits, texts, etc.)  # noqa: E501

        Update the assignment so that it matches with the current version of the exercise (limits, texts, etc.)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignments_presenter_action_sync_with_exercise(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the assignment that should be synchronized (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignments_presenter_action_sync_with_exercise_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.assignments_presenter_action_sync_with_exercise_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def assignments_presenter_action_sync_with_exercise_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update the assignment so that it matches with the current version of the exercise (limits, texts, etc.)  # noqa: E501

        Update the assignment so that it matches with the current version of the exercise (limits, texts, etc.)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignments_presenter_action_sync_with_exercise_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the assignment that should be synchronized (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignments_presenter_action_sync_with_exercise" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assignments_presenter_action_sync_with_exercise`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercise-assignments/{id}/sync-exercise', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignments_presenter_action_update_detail(self, id, **kwargs):  # noqa: E501
        """Update details of an assignment  # noqa: E501

        Update details of an assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignments_presenter_action_update_detail(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the updated assignment (required)
        :param ExerciseassignmentsIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignments_presenter_action_update_detail_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.assignments_presenter_action_update_detail_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def assignments_presenter_action_update_detail_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update details of an assignment  # noqa: E501

        Update details of an assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignments_presenter_action_update_detail_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the updated assignment (required)
        :param ExerciseassignmentsIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignments_presenter_action_update_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assignments_presenter_action_update_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercise-assignments/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignments_presenter_action_user_solutions(self, id, user_id, **kwargs):  # noqa: E501
        """Get a list of solutions created by a user of an assignment  # noqa: E501

        Get a list of solutions created by a user of an assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignments_presenter_action_user_solutions(id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the assignment (required)
        :param str user_id: Identifier of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignments_presenter_action_user_solutions_with_http_info(id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assignments_presenter_action_user_solutions_with_http_info(id, user_id, **kwargs)  # noqa: E501
            return data

    def assignments_presenter_action_user_solutions_with_http_info(self, id, user_id, **kwargs):  # noqa: E501
        """Get a list of solutions created by a user of an assignment  # noqa: E501

        Get a list of solutions created by a user of an assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignments_presenter_action_user_solutions_with_http_info(id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the assignment (required)
        :param str user_id: Identifier of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignments_presenter_action_user_solutions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assignments_presenter_action_user_solutions`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `assignments_presenter_action_user_solutions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercise-assignments/{id}/users/{userId}/solutions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignments_presenter_action_validate(self, id, **kwargs):  # noqa: E501
        """Check if the version of the assignment is up-to-date.  # noqa: E501

        Check if the version of the assignment is up-to-date.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignments_presenter_action_validate(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the assignment (required)
        :param IdValidateBody1 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignments_presenter_action_validate_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.assignments_presenter_action_validate_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def assignments_presenter_action_validate_with_http_info(self, id, **kwargs):  # noqa: E501
        """Check if the version of the assignment is up-to-date.  # noqa: E501

        Check if the version of the assignment is up-to-date.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignments_presenter_action_validate_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the assignment (required)
        :param IdValidateBody1 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignments_presenter_action_validate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assignments_presenter_action_validate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercise-assignments/{id}/validate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def async_jobs_presenter_action_abort(self, id, **kwargs):  # noqa: E501
        """Retrieves details about particular async job.  # noqa: E501

        Retrieves details about particular async job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.async_jobs_presenter_action_abort(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: job identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.async_jobs_presenter_action_abort_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.async_jobs_presenter_action_abort_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def async_jobs_presenter_action_abort_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves details about particular async job.  # noqa: E501

        Retrieves details about particular async job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.async_jobs_presenter_action_abort_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: job identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method async_jobs_presenter_action_abort" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `async_jobs_presenter_action_abort`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/async-jobs/{id}/abort', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def async_jobs_presenter_action_assignment_jobs(self, id, **kwargs):  # noqa: E501
        """Get all pending async jobs related to a particular assignment.  # noqa: E501

        Get all pending async jobs related to a particular assignment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.async_jobs_presenter_action_assignment_jobs(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.async_jobs_presenter_action_assignment_jobs_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.async_jobs_presenter_action_assignment_jobs_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def async_jobs_presenter_action_assignment_jobs_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get all pending async jobs related to a particular assignment.  # noqa: E501

        Get all pending async jobs related to a particular assignment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.async_jobs_presenter_action_assignment_jobs_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method async_jobs_presenter_action_assignment_jobs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `async_jobs_presenter_action_assignment_jobs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercise-assignments/{id}/async-jobs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def async_jobs_presenter_action_default(self, id, **kwargs):  # noqa: E501
        """Retrieves details about particular async job.  # noqa: E501

        Retrieves details about particular async job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.async_jobs_presenter_action_default(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: job identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.async_jobs_presenter_action_default_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.async_jobs_presenter_action_default_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def async_jobs_presenter_action_default_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves details about particular async job.  # noqa: E501

        Retrieves details about particular async job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.async_jobs_presenter_action_default_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: job identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method async_jobs_presenter_action_default" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `async_jobs_presenter_action_default`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/async-jobs/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def async_jobs_presenter_action_list(self, **kwargs):  # noqa: E501
        """Retrieves details about async jobs that are either pending or were recently completed.  # noqa: E501

        Retrieves details about async jobs that are either pending or were recently completed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.async_jobs_presenter_action_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int age_threshold: Maximal time since completion (in seconds), null = only pending operations
        :param bool include_scheduled: If true, pending scheduled events will be listed as well
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.async_jobs_presenter_action_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.async_jobs_presenter_action_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def async_jobs_presenter_action_list_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves details about async jobs that are either pending or were recently completed.  # noqa: E501

        Retrieves details about async jobs that are either pending or were recently completed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.async_jobs_presenter_action_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int age_threshold: Maximal time since completion (in seconds), null = only pending operations
        :param bool include_scheduled: If true, pending scheduled events will be listed as well
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['age_threshold', 'include_scheduled']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method async_jobs_presenter_action_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'age_threshold' in params:
            query_params.append(('ageThreshold', params['age_threshold']))  # noqa: E501
        if 'include_scheduled' in params:
            query_params.append(('includeScheduled', params['include_scheduled']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/async-jobs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def async_jobs_presenter_action_ping(self, **kwargs):  # noqa: E501
        """Initiates ping job. An empty job designed to verify the async handler is running.  # noqa: E501

        Initiates ping job. An empty job designed to verify the async handler is running.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.async_jobs_presenter_action_ping(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.async_jobs_presenter_action_ping_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.async_jobs_presenter_action_ping_with_http_info(**kwargs)  # noqa: E501
            return data

    def async_jobs_presenter_action_ping_with_http_info(self, **kwargs):  # noqa: E501
        """Initiates ping job. An empty job designed to verify the async handler is running.  # noqa: E501

        Initiates ping job. An empty job designed to verify the async handler is running.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.async_jobs_presenter_action_ping_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method async_jobs_presenter_action_ping" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/async-jobs/ping', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def broker_presenter_action_freeze(self, **kwargs):  # noqa: E501
        """Freeze broker and its execution.  # noqa: E501

        Freeze broker and its execution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.broker_presenter_action_freeze(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.broker_presenter_action_freeze_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.broker_presenter_action_freeze_with_http_info(**kwargs)  # noqa: E501
            return data

    def broker_presenter_action_freeze_with_http_info(self, **kwargs):  # noqa: E501
        """Freeze broker and its execution.  # noqa: E501

        Freeze broker and its execution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.broker_presenter_action_freeze_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method broker_presenter_action_freeze" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/broker/freeze', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def broker_presenter_action_stats(self, **kwargs):  # noqa: E501
        """Get current statistics from broker.  # noqa: E501

        Get current statistics from broker.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.broker_presenter_action_stats(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.broker_presenter_action_stats_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.broker_presenter_action_stats_with_http_info(**kwargs)  # noqa: E501
            return data

    def broker_presenter_action_stats_with_http_info(self, **kwargs):  # noqa: E501
        """Get current statistics from broker.  # noqa: E501

        Get current statistics from broker.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.broker_presenter_action_stats_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method broker_presenter_action_stats" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/broker/stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def broker_presenter_action_unfreeze(self, **kwargs):  # noqa: E501
        """Unfreeze broker and its execution.  # noqa: E501

        Unfreeze broker and its execution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.broker_presenter_action_unfreeze(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.broker_presenter_action_unfreeze_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.broker_presenter_action_unfreeze_with_http_info(**kwargs)  # noqa: E501
            return data

    def broker_presenter_action_unfreeze_with_http_info(self, **kwargs):  # noqa: E501
        """Unfreeze broker and its execution.  # noqa: E501

        Unfreeze broker and its execution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.broker_presenter_action_unfreeze_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method broker_presenter_action_unfreeze" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/broker/unfreeze', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def broker_reports_presenter_action_error(self, **kwargs):  # noqa: E501
        """Announce a backend error that is not related to any job (meant to be called by the backend)  # noqa: E501

        Announce a backend error that is not related to any job (meant to be called by the backend)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.broker_reports_presenter_action_error(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BrokerreportsErrorBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.broker_reports_presenter_action_error_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.broker_reports_presenter_action_error_with_http_info(**kwargs)  # noqa: E501
            return data

    def broker_reports_presenter_action_error_with_http_info(self, **kwargs):  # noqa: E501
        """Announce a backend error that is not related to any job (meant to be called by the backend)  # noqa: E501

        Announce a backend error that is not related to any job (meant to be called by the backend)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.broker_reports_presenter_action_error_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BrokerreportsErrorBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method broker_reports_presenter_action_error" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/broker-reports/error', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def broker_reports_presenter_action_job_status(self, job_id, **kwargs):  # noqa: E501
        """Update the status of a job (meant to be called by the backend)  # noqa: E501

        Update the status of a job (meant to be called by the backend)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.broker_reports_presenter_action_job_status(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: Identifier of the job whose status is being reported (required)
        :param JobstatusJobIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.broker_reports_presenter_action_job_status_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.broker_reports_presenter_action_job_status_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def broker_reports_presenter_action_job_status_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """Update the status of a job (meant to be called by the backend)  # noqa: E501

        Update the status of a job (meant to be called by the backend)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.broker_reports_presenter_action_job_status_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: Identifier of the job whose status is being reported (required)
        :param JobstatusJobIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method broker_reports_presenter_action_job_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `broker_reports_presenter_action_job_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/broker-reports/job-status/{jobId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def comments_presenter_action_add_comment(self, id, **kwargs):  # noqa: E501
        """Add a comment to a thread  # noqa: E501

        Add a comment to a thread  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.comments_presenter_action_add_comment(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the comment thread (required)
        :param CommentsIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.comments_presenter_action_add_comment_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.comments_presenter_action_add_comment_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def comments_presenter_action_add_comment_with_http_info(self, id, **kwargs):  # noqa: E501
        """Add a comment to a thread  # noqa: E501

        Add a comment to a thread  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.comments_presenter_action_add_comment_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the comment thread (required)
        :param CommentsIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method comments_presenter_action_add_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `comments_presenter_action_add_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/comments/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def comments_presenter_action_default(self, id, **kwargs):  # noqa: E501
        """Get a comment thread  # noqa: E501

        Get a comment thread  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.comments_presenter_action_default(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the comment thread (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.comments_presenter_action_default_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.comments_presenter_action_default_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def comments_presenter_action_default_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a comment thread  # noqa: E501

        Get a comment thread  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.comments_presenter_action_default_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the comment thread (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method comments_presenter_action_default" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `comments_presenter_action_default`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/comments/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def comments_presenter_action_delete(self, thread_id, comment_id, **kwargs):  # noqa: E501
        """Delete a comment  # noqa: E501

        Delete a comment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.comments_presenter_action_delete(thread_id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str thread_id: Identifier of the comment thread (required)
        :param str comment_id: Identifier of the comment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.comments_presenter_action_delete_with_http_info(thread_id, comment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.comments_presenter_action_delete_with_http_info(thread_id, comment_id, **kwargs)  # noqa: E501
            return data

    def comments_presenter_action_delete_with_http_info(self, thread_id, comment_id, **kwargs):  # noqa: E501
        """Delete a comment  # noqa: E501

        Delete a comment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.comments_presenter_action_delete_with_http_info(thread_id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str thread_id: Identifier of the comment thread (required)
        :param str comment_id: Identifier of the comment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['thread_id', 'comment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method comments_presenter_action_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'thread_id' is set
        if ('thread_id' not in params or
                params['thread_id'] is None):
            raise ValueError("Missing the required parameter `thread_id` when calling `comments_presenter_action_delete`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if ('comment_id' not in params or
                params['comment_id'] is None):
            raise ValueError("Missing the required parameter `comment_id` when calling `comments_presenter_action_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'thread_id' in params:
            path_params['threadId'] = params['thread_id']  # noqa: E501
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/comments/{threadId}/comment/{commentId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def comments_presenter_action_set_private(self, thread_id, comment_id, **kwargs):  # noqa: E501
        """Set the private flag of a comment  # noqa: E501

        Set the private flag of a comment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.comments_presenter_action_set_private(thread_id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str thread_id: Identifier of the comment thread (required)
        :param str comment_id: Identifier of the comment (required)
        :param CommentIdPrivateBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.comments_presenter_action_set_private_with_http_info(thread_id, comment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.comments_presenter_action_set_private_with_http_info(thread_id, comment_id, **kwargs)  # noqa: E501
            return data

    def comments_presenter_action_set_private_with_http_info(self, thread_id, comment_id, **kwargs):  # noqa: E501
        """Set the private flag of a comment  # noqa: E501

        Set the private flag of a comment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.comments_presenter_action_set_private_with_http_info(thread_id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str thread_id: Identifier of the comment thread (required)
        :param str comment_id: Identifier of the comment (required)
        :param CommentIdPrivateBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['thread_id', 'comment_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method comments_presenter_action_set_private" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'thread_id' is set
        if ('thread_id' not in params or
                params['thread_id'] is None):
            raise ValueError("Missing the required parameter `thread_id` when calling `comments_presenter_action_set_private`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if ('comment_id' not in params or
                params['comment_id'] is None):
            raise ValueError("Missing the required parameter `comment_id` when calling `comments_presenter_action_set_private`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'thread_id' in params:
            path_params['threadId'] = params['thread_id']  # noqa: E501
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/comments/{threadId}/comment/{commentId}/private', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def comments_presenter_action_toggle_private(self, thread_id, comment_id, **kwargs):  # noqa: E501
        """Make a private comment public or vice versa  # noqa: E501

        Make a private comment public or vice versa  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.comments_presenter_action_toggle_private(thread_id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str thread_id: Identifier of the comment thread (required)
        :param str comment_id: Identifier of the comment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.comments_presenter_action_toggle_private_with_http_info(thread_id, comment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.comments_presenter_action_toggle_private_with_http_info(thread_id, comment_id, **kwargs)  # noqa: E501
            return data

    def comments_presenter_action_toggle_private_with_http_info(self, thread_id, comment_id, **kwargs):  # noqa: E501
        """Make a private comment public or vice versa  # noqa: E501

        Make a private comment public or vice versa  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.comments_presenter_action_toggle_private_with_http_info(thread_id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str thread_id: Identifier of the comment thread (required)
        :param str comment_id: Identifier of the comment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['thread_id', 'comment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method comments_presenter_action_toggle_private" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'thread_id' is set
        if ('thread_id' not in params or
                params['thread_id'] is None):
            raise ValueError("Missing the required parameter `thread_id` when calling `comments_presenter_action_toggle_private`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if ('comment_id' not in params or
                params['comment_id'] is None):
            raise ValueError("Missing the required parameter `comment_id` when calling `comments_presenter_action_toggle_private`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'thread_id' in params:
            path_params['threadId'] = params['thread_id']  # noqa: E501
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/comments/{threadId}/comment/{commentId}/toggle', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def email_verification_presenter_action_email_verification(self, **kwargs):  # noqa: E501
        """Verify users email.  # noqa: E501

        Verify users email.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.email_verification_presenter_action_email_verification(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.email_verification_presenter_action_email_verification_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.email_verification_presenter_action_email_verification_with_http_info(**kwargs)  # noqa: E501
            return data

    def email_verification_presenter_action_email_verification_with_http_info(self, **kwargs):  # noqa: E501
        """Verify users email.  # noqa: E501

        Verify users email.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.email_verification_presenter_action_email_verification_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method email_verification_presenter_action_email_verification" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/email-verification/verify', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def email_verification_presenter_action_resend_verification_email(self, **kwargs):  # noqa: E501
        """Resend the email for the current user to verify his/her email address.  # noqa: E501

        Resend the email for the current user to verify his/her email address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.email_verification_presenter_action_resend_verification_email(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.email_verification_presenter_action_resend_verification_email_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.email_verification_presenter_action_resend_verification_email_with_http_info(**kwargs)  # noqa: E501
            return data

    def email_verification_presenter_action_resend_verification_email_with_http_info(self, **kwargs):  # noqa: E501
        """Resend the email for the current user to verify his/her email address.  # noqa: E501

        Resend the email for the current user to verify his/her email address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.email_verification_presenter_action_resend_verification_email_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method email_verification_presenter_action_resend_verification_email" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/email-verification/resend', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def emails_presenter_action_default(self, **kwargs):  # noqa: E501
        """Sends an email with provided subject and message to all ReCodEx users.  # noqa: E501

        Sends an email with provided subject and message to all ReCodEx users.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.emails_presenter_action_default(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1EmailsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.emails_presenter_action_default_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.emails_presenter_action_default_with_http_info(**kwargs)  # noqa: E501
            return data

    def emails_presenter_action_default_with_http_info(self, **kwargs):  # noqa: E501
        """Sends an email with provided subject and message to all ReCodEx users.  # noqa: E501

        Sends an email with provided subject and message to all ReCodEx users.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.emails_presenter_action_default_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1EmailsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method emails_presenter_action_default" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/emails', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def emails_presenter_action_send_to_group_members(self, group_id, **kwargs):  # noqa: E501
        """Sends an email with provided subject and message to regular members of given group and optionally to supervisors and admins.  # noqa: E501

        Sends an email with provided subject and message to regular members of given group and optionally to supervisors and admins.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.emails_presenter_action_send_to_group_members(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: (required)
        :param GroupsGroupIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.emails_presenter_action_send_to_group_members_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.emails_presenter_action_send_to_group_members_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def emails_presenter_action_send_to_group_members_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """Sends an email with provided subject and message to regular members of given group and optionally to supervisors and admins.  # noqa: E501

        Sends an email with provided subject and message to regular members of given group and optionally to supervisors and admins.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.emails_presenter_action_send_to_group_members_with_http_info(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: (required)
        :param GroupsGroupIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method emails_presenter_action_send_to_group_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `emails_presenter_action_send_to_group_members`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/emails/groups/{groupId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def emails_presenter_action_send_to_regular_users(self, **kwargs):  # noqa: E501
        """Sends an email with provided subject and message to all regular users.  # noqa: E501

        Sends an email with provided subject and message to all regular users.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.emails_presenter_action_send_to_regular_users(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmailsRegularusersBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.emails_presenter_action_send_to_regular_users_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.emails_presenter_action_send_to_regular_users_with_http_info(**kwargs)  # noqa: E501
            return data

    def emails_presenter_action_send_to_regular_users_with_http_info(self, **kwargs):  # noqa: E501
        """Sends an email with provided subject and message to all regular users.  # noqa: E501

        Sends an email with provided subject and message to all regular users.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.emails_presenter_action_send_to_regular_users_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmailsRegularusersBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method emails_presenter_action_send_to_regular_users" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/emails/regular-users', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def emails_presenter_action_send_to_supervisors(self, **kwargs):  # noqa: E501
        """Sends an email with provided subject and message to all supervisors and superadmins.  # noqa: E501

        Sends an email with provided subject and message to all supervisors and superadmins.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.emails_presenter_action_send_to_supervisors(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmailsSupervisorsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.emails_presenter_action_send_to_supervisors_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.emails_presenter_action_send_to_supervisors_with_http_info(**kwargs)  # noqa: E501
            return data

    def emails_presenter_action_send_to_supervisors_with_http_info(self, **kwargs):  # noqa: E501
        """Sends an email with provided subject and message to all supervisors and superadmins.  # noqa: E501

        Sends an email with provided subject and message to all supervisors and superadmins.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.emails_presenter_action_send_to_supervisors_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmailsSupervisorsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method emails_presenter_action_send_to_supervisors" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/emails/supervisors', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercise_files_presenter_action_delete_attachment_file(self, id, file_id, **kwargs):  # noqa: E501
        """Delete attachment exercise file with given id  # noqa: E501

        Delete attachment exercise file with given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercise_files_presenter_action_delete_attachment_file(id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identification of exercise (required)
        :param str file_id: identification of file (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercise_files_presenter_action_delete_attachment_file_with_http_info(id, file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercise_files_presenter_action_delete_attachment_file_with_http_info(id, file_id, **kwargs)  # noqa: E501
            return data

    def exercise_files_presenter_action_delete_attachment_file_with_http_info(self, id, file_id, **kwargs):  # noqa: E501
        """Delete attachment exercise file with given id  # noqa: E501

        Delete attachment exercise file with given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercise_files_presenter_action_delete_attachment_file_with_http_info(id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identification of exercise (required)
        :param str file_id: identification of file (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercise_files_presenter_action_delete_attachment_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercise_files_presenter_action_delete_attachment_file`")  # noqa: E501
        # verify the required parameter 'file_id' is set
        if ('file_id' not in params or
                params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `exercise_files_presenter_action_delete_attachment_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'file_id' in params:
            path_params['fileId'] = params['file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}/attachment-files/{fileId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercise_files_presenter_action_delete_supplementary_file(self, id, file_id, **kwargs):  # noqa: E501
        """Delete supplementary exercise file with given id  # noqa: E501

        Delete supplementary exercise file with given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercise_files_presenter_action_delete_supplementary_file(id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identification of exercise (required)
        :param str file_id: identification of file (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercise_files_presenter_action_delete_supplementary_file_with_http_info(id, file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercise_files_presenter_action_delete_supplementary_file_with_http_info(id, file_id, **kwargs)  # noqa: E501
            return data

    def exercise_files_presenter_action_delete_supplementary_file_with_http_info(self, id, file_id, **kwargs):  # noqa: E501
        """Delete supplementary exercise file with given id  # noqa: E501

        Delete supplementary exercise file with given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercise_files_presenter_action_delete_supplementary_file_with_http_info(id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identification of exercise (required)
        :param str file_id: identification of file (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercise_files_presenter_action_delete_supplementary_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercise_files_presenter_action_delete_supplementary_file`")  # noqa: E501
        # verify the required parameter 'file_id' is set
        if ('file_id' not in params or
                params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `exercise_files_presenter_action_delete_supplementary_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'file_id' in params:
            path_params['fileId'] = params['file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}/supplementary-files/{fileId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercise_files_presenter_action_download_attachment_files_archive(self, id, **kwargs):  # noqa: E501
        """Download archive containing all attachment files for exercise.  # noqa: E501

        Download archive containing all attachment files for exercise.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercise_files_presenter_action_download_attachment_files_archive(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: of exercise (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercise_files_presenter_action_download_attachment_files_archive_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercise_files_presenter_action_download_attachment_files_archive_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def exercise_files_presenter_action_download_attachment_files_archive_with_http_info(self, id, **kwargs):  # noqa: E501
        """Download archive containing all attachment files for exercise.  # noqa: E501

        Download archive containing all attachment files for exercise.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercise_files_presenter_action_download_attachment_files_archive_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: of exercise (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercise_files_presenter_action_download_attachment_files_archive" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercise_files_presenter_action_download_attachment_files_archive`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}/attachment-files/download-archive', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercise_files_presenter_action_download_supplementary_files_archive(self, id, **kwargs):  # noqa: E501
        """Download archive containing all supplementary files for exercise.  # noqa: E501

        Download archive containing all supplementary files for exercise.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercise_files_presenter_action_download_supplementary_files_archive(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: of exercise (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercise_files_presenter_action_download_supplementary_files_archive_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercise_files_presenter_action_download_supplementary_files_archive_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def exercise_files_presenter_action_download_supplementary_files_archive_with_http_info(self, id, **kwargs):  # noqa: E501
        """Download archive containing all supplementary files for exercise.  # noqa: E501

        Download archive containing all supplementary files for exercise.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercise_files_presenter_action_download_supplementary_files_archive_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: of exercise (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercise_files_presenter_action_download_supplementary_files_archive" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercise_files_presenter_action_download_supplementary_files_archive`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}/supplementary-files/download-archive', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercise_files_presenter_action_get_attachment_files(self, id, **kwargs):  # noqa: E501
        """Get a list of all attachment files for an exercise  # noqa: E501

        Get a list of all attachment files for an exercise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercise_files_presenter_action_get_attachment_files(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identification of exercise (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercise_files_presenter_action_get_attachment_files_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercise_files_presenter_action_get_attachment_files_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def exercise_files_presenter_action_get_attachment_files_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a list of all attachment files for an exercise  # noqa: E501

        Get a list of all attachment files for an exercise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercise_files_presenter_action_get_attachment_files_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identification of exercise (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercise_files_presenter_action_get_attachment_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercise_files_presenter_action_get_attachment_files`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}/attachment-files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercise_files_presenter_action_get_supplementary_files(self, id, **kwargs):  # noqa: E501
        """Get list of all supplementary files for an exercise  # noqa: E501

        Get list of all supplementary files for an exercise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercise_files_presenter_action_get_supplementary_files(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identification of exercise (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercise_files_presenter_action_get_supplementary_files_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercise_files_presenter_action_get_supplementary_files_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def exercise_files_presenter_action_get_supplementary_files_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get list of all supplementary files for an exercise  # noqa: E501

        Get list of all supplementary files for an exercise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercise_files_presenter_action_get_supplementary_files_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identification of exercise (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercise_files_presenter_action_get_supplementary_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercise_files_presenter_action_get_supplementary_files`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}/supplementary-files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercise_files_presenter_action_upload_attachment_files(self, id, **kwargs):  # noqa: E501
        """Associate attachment exercise files with an exercise  # noqa: E501

        Associate attachment exercise files with an exercise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercise_files_presenter_action_upload_attachment_files(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identification of exercise (required)
        :param IdAttachmentfilesBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercise_files_presenter_action_upload_attachment_files_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercise_files_presenter_action_upload_attachment_files_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def exercise_files_presenter_action_upload_attachment_files_with_http_info(self, id, **kwargs):  # noqa: E501
        """Associate attachment exercise files with an exercise  # noqa: E501

        Associate attachment exercise files with an exercise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercise_files_presenter_action_upload_attachment_files_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identification of exercise (required)
        :param IdAttachmentfilesBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercise_files_presenter_action_upload_attachment_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercise_files_presenter_action_upload_attachment_files`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}/attachment-files', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercise_files_presenter_action_upload_supplementary_files(self, id, **kwargs):  # noqa: E501
        """Associate supplementary files with an exercise and upload them to remote file server  # noqa: E501

        Associate supplementary files with an exercise and upload them to remote file server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercise_files_presenter_action_upload_supplementary_files(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identification of exercise (required)
        :param IdSupplementaryfilesBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercise_files_presenter_action_upload_supplementary_files_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercise_files_presenter_action_upload_supplementary_files_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def exercise_files_presenter_action_upload_supplementary_files_with_http_info(self, id, **kwargs):  # noqa: E501
        """Associate supplementary files with an exercise and upload them to remote file server  # noqa: E501

        Associate supplementary files with an exercise and upload them to remote file server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercise_files_presenter_action_upload_supplementary_files_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identification of exercise (required)
        :param IdSupplementaryfilesBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercise_files_presenter_action_upload_supplementary_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercise_files_presenter_action_upload_supplementary_files`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}/supplementary-files', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_config_presenter_action_get_configuration(self, id, **kwargs):  # noqa: E501
        """Get a basic exercise high level configuration.  # noqa: E501

        Get a basic exercise high level configuration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_config_presenter_action_get_configuration(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_config_presenter_action_get_configuration_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercises_config_presenter_action_get_configuration_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def exercises_config_presenter_action_get_configuration_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a basic exercise high level configuration.  # noqa: E501

        Get a basic exercise high level configuration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_config_presenter_action_get_configuration_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_config_presenter_action_get_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercises_config_presenter_action_get_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_config_presenter_action_get_environment_configs(self, id, **kwargs):  # noqa: E501
        """Get runtime configurations for exercise.  # noqa: E501

        Get runtime configurations for exercise.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_config_presenter_action_get_environment_configs(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_config_presenter_action_get_environment_configs_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercises_config_presenter_action_get_environment_configs_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def exercises_config_presenter_action_get_environment_configs_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get runtime configurations for exercise.  # noqa: E501

        Get runtime configurations for exercise.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_config_presenter_action_get_environment_configs_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_config_presenter_action_get_environment_configs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercises_config_presenter_action_get_environment_configs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}/environment-configs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_config_presenter_action_get_hardware_group_limits(self, id, runtime_environment_id, hw_group_id, **kwargs):  # noqa: E501
        """Get a description of resource limits for an exercise for given hwgroup.  # noqa: E501

        Get a description of resource limits for an exercise for given hwgroup.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_config_presenter_action_get_hardware_group_limits(id, runtime_environment_id, hw_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :param str runtime_environment_id: (required)
        :param str hw_group_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_config_presenter_action_get_hardware_group_limits_with_http_info(id, runtime_environment_id, hw_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercises_config_presenter_action_get_hardware_group_limits_with_http_info(id, runtime_environment_id, hw_group_id, **kwargs)  # noqa: E501
            return data

    def exercises_config_presenter_action_get_hardware_group_limits_with_http_info(self, id, runtime_environment_id, hw_group_id, **kwargs):  # noqa: E501
        """Get a description of resource limits for an exercise for given hwgroup.  # noqa: E501

        Get a description of resource limits for an exercise for given hwgroup.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_config_presenter_action_get_hardware_group_limits_with_http_info(id, runtime_environment_id, hw_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :param str runtime_environment_id: (required)
        :param str hw_group_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'runtime_environment_id', 'hw_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_config_presenter_action_get_hardware_group_limits" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercises_config_presenter_action_get_hardware_group_limits`")  # noqa: E501
        # verify the required parameter 'runtime_environment_id' is set
        if ('runtime_environment_id' not in params or
                params['runtime_environment_id'] is None):
            raise ValueError("Missing the required parameter `runtime_environment_id` when calling `exercises_config_presenter_action_get_hardware_group_limits`")  # noqa: E501
        # verify the required parameter 'hw_group_id' is set
        if ('hw_group_id' not in params or
                params['hw_group_id'] is None):
            raise ValueError("Missing the required parameter `hw_group_id` when calling `exercises_config_presenter_action_get_hardware_group_limits`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'runtime_environment_id' in params:
            path_params['runtimeEnvironmentId'] = params['runtime_environment_id']  # noqa: E501
        if 'hw_group_id' in params:
            path_params['hwGroupId'] = params['hw_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}/environment/{runtimeEnvironmentId}/hwgroup/{hwGroupId}/limits', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_config_presenter_action_get_limits(self, id, **kwargs):  # noqa: E501
        """Get a description of resource limits for given exercise (all hwgroups all environments).  # noqa: E501

        Get a description of resource limits for given exercise (all hwgroups all environments).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_config_presenter_action_get_limits(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_config_presenter_action_get_limits_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercises_config_presenter_action_get_limits_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def exercises_config_presenter_action_get_limits_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a description of resource limits for given exercise (all hwgroups all environments).  # noqa: E501

        Get a description of resource limits for given exercise (all hwgroups all environments).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_config_presenter_action_get_limits_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_config_presenter_action_get_limits" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercises_config_presenter_action_get_limits`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}/limits', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_config_presenter_action_get_score_config(self, id, **kwargs):  # noqa: E501
        """Get score configuration for exercise based on given identification.  # noqa: E501

        Get score configuration for exercise based on given identification.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_config_presenter_action_get_score_config(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_config_presenter_action_get_score_config_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercises_config_presenter_action_get_score_config_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def exercises_config_presenter_action_get_score_config_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get score configuration for exercise based on given identification.  # noqa: E501

        Get score configuration for exercise based on given identification.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_config_presenter_action_get_score_config_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_config_presenter_action_get_score_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercises_config_presenter_action_get_score_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}/score-config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_config_presenter_action_get_tests(self, id, **kwargs):  # noqa: E501
        """Get tests for exercise based on given identification.  # noqa: E501

        Get tests for exercise based on given identification.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_config_presenter_action_get_tests(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_config_presenter_action_get_tests_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercises_config_presenter_action_get_tests_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def exercises_config_presenter_action_get_tests_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get tests for exercise based on given identification.  # noqa: E501

        Get tests for exercise based on given identification.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_config_presenter_action_get_tests_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_config_presenter_action_get_tests" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercises_config_presenter_action_get_tests`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}/tests', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_config_presenter_action_get_variables_for_exercise_config(self, id, **kwargs):  # noqa: E501
        """Get variables for exercise configuration which are derived from given pipelines and runtime environment.  # noqa: E501

        Get variables for exercise configuration which are derived from given pipelines and runtime environment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_config_presenter_action_get_variables_for_exercise_config(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :param ConfigVariablesBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_config_presenter_action_get_variables_for_exercise_config_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercises_config_presenter_action_get_variables_for_exercise_config_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def exercises_config_presenter_action_get_variables_for_exercise_config_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get variables for exercise configuration which are derived from given pipelines and runtime environment.  # noqa: E501

        Get variables for exercise configuration which are derived from given pipelines and runtime environment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_config_presenter_action_get_variables_for_exercise_config_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :param ConfigVariablesBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_config_presenter_action_get_variables_for_exercise_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercises_config_presenter_action_get_variables_for_exercise_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}/config/variables', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_config_presenter_action_remove_hardware_group_limits(self, id, runtime_environment_id, hw_group_id, **kwargs):  # noqa: E501
        """Remove resource limits of given hwgroup from an exercise.  # noqa: E501

        Remove resource limits of given hwgroup from an exercise.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_config_presenter_action_remove_hardware_group_limits(id, runtime_environment_id, hw_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :param str runtime_environment_id: (required)
        :param str hw_group_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_config_presenter_action_remove_hardware_group_limits_with_http_info(id, runtime_environment_id, hw_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercises_config_presenter_action_remove_hardware_group_limits_with_http_info(id, runtime_environment_id, hw_group_id, **kwargs)  # noqa: E501
            return data

    def exercises_config_presenter_action_remove_hardware_group_limits_with_http_info(self, id, runtime_environment_id, hw_group_id, **kwargs):  # noqa: E501
        """Remove resource limits of given hwgroup from an exercise.  # noqa: E501

        Remove resource limits of given hwgroup from an exercise.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_config_presenter_action_remove_hardware_group_limits_with_http_info(id, runtime_environment_id, hw_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :param str runtime_environment_id: (required)
        :param str hw_group_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'runtime_environment_id', 'hw_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_config_presenter_action_remove_hardware_group_limits" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercises_config_presenter_action_remove_hardware_group_limits`")  # noqa: E501
        # verify the required parameter 'runtime_environment_id' is set
        if ('runtime_environment_id' not in params or
                params['runtime_environment_id'] is None):
            raise ValueError("Missing the required parameter `runtime_environment_id` when calling `exercises_config_presenter_action_remove_hardware_group_limits`")  # noqa: E501
        # verify the required parameter 'hw_group_id' is set
        if ('hw_group_id' not in params or
                params['hw_group_id'] is None):
            raise ValueError("Missing the required parameter `hw_group_id` when calling `exercises_config_presenter_action_remove_hardware_group_limits`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'runtime_environment_id' in params:
            path_params['runtimeEnvironmentId'] = params['runtime_environment_id']  # noqa: E501
        if 'hw_group_id' in params:
            path_params['hwGroupId'] = params['hw_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}/environment/{runtimeEnvironmentId}/hwgroup/{hwGroupId}/limits', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_config_presenter_action_set_configuration(self, id, **kwargs):  # noqa: E501
        """Set basic exercise configuration  # noqa: E501

        Set basic exercise configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_config_presenter_action_set_configuration(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :param IdConfigBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_config_presenter_action_set_configuration_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercises_config_presenter_action_set_configuration_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def exercises_config_presenter_action_set_configuration_with_http_info(self, id, **kwargs):  # noqa: E501
        """Set basic exercise configuration  # noqa: E501

        Set basic exercise configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_config_presenter_action_set_configuration_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :param IdConfigBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_config_presenter_action_set_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercises_config_presenter_action_set_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_config_presenter_action_set_hardware_group_limits(self, id, runtime_environment_id, hw_group_id, **kwargs):  # noqa: E501
        """Set resource limits for an exercise for given hwgroup.  # noqa: E501

        Set resource limits for an exercise for given hwgroup.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_config_presenter_action_set_hardware_group_limits(id, runtime_environment_id, hw_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :param str runtime_environment_id: (required)
        :param str hw_group_id: (required)
        :param HwGroupIdLimitsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_config_presenter_action_set_hardware_group_limits_with_http_info(id, runtime_environment_id, hw_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercises_config_presenter_action_set_hardware_group_limits_with_http_info(id, runtime_environment_id, hw_group_id, **kwargs)  # noqa: E501
            return data

    def exercises_config_presenter_action_set_hardware_group_limits_with_http_info(self, id, runtime_environment_id, hw_group_id, **kwargs):  # noqa: E501
        """Set resource limits for an exercise for given hwgroup.  # noqa: E501

        Set resource limits for an exercise for given hwgroup.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_config_presenter_action_set_hardware_group_limits_with_http_info(id, runtime_environment_id, hw_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :param str runtime_environment_id: (required)
        :param str hw_group_id: (required)
        :param HwGroupIdLimitsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'runtime_environment_id', 'hw_group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_config_presenter_action_set_hardware_group_limits" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercises_config_presenter_action_set_hardware_group_limits`")  # noqa: E501
        # verify the required parameter 'runtime_environment_id' is set
        if ('runtime_environment_id' not in params or
                params['runtime_environment_id'] is None):
            raise ValueError("Missing the required parameter `runtime_environment_id` when calling `exercises_config_presenter_action_set_hardware_group_limits`")  # noqa: E501
        # verify the required parameter 'hw_group_id' is set
        if ('hw_group_id' not in params or
                params['hw_group_id'] is None):
            raise ValueError("Missing the required parameter `hw_group_id` when calling `exercises_config_presenter_action_set_hardware_group_limits`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'runtime_environment_id' in params:
            path_params['runtimeEnvironmentId'] = params['runtime_environment_id']  # noqa: E501
        if 'hw_group_id' in params:
            path_params['hwGroupId'] = params['hw_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}/environment/{runtimeEnvironmentId}/hwgroup/{hwGroupId}/limits', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_config_presenter_action_set_limits(self, id, **kwargs):  # noqa: E501
        """Update resource limits for given exercise. If limits for particular hwGroup or environment are not posted, no change occurs. If limits for particular hwGroup or environment are posted as null, they are removed.  # noqa: E501

        Update resource limits for given exercise. If limits for particular hwGroup or environment are not posted, no change occurs. If limits for particular hwGroup or environment are posted as null, they are removed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_config_presenter_action_set_limits(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :param IdLimitsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_config_presenter_action_set_limits_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercises_config_presenter_action_set_limits_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def exercises_config_presenter_action_set_limits_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update resource limits for given exercise. If limits for particular hwGroup or environment are not posted, no change occurs. If limits for particular hwGroup or environment are posted as null, they are removed.  # noqa: E501

        Update resource limits for given exercise. If limits for particular hwGroup or environment are not posted, no change occurs. If limits for particular hwGroup or environment are posted as null, they are removed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_config_presenter_action_set_limits_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :param IdLimitsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_config_presenter_action_set_limits" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercises_config_presenter_action_set_limits`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}/limits', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_config_presenter_action_set_score_config(self, id, **kwargs):  # noqa: E501
        """Set score configuration for exercise.  # noqa: E501

        Set score configuration for exercise.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_config_presenter_action_set_score_config(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :param IdScoreconfigBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_config_presenter_action_set_score_config_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercises_config_presenter_action_set_score_config_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def exercises_config_presenter_action_set_score_config_with_http_info(self, id, **kwargs):  # noqa: E501
        """Set score configuration for exercise.  # noqa: E501

        Set score configuration for exercise.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_config_presenter_action_set_score_config_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :param IdScoreconfigBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_config_presenter_action_set_score_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercises_config_presenter_action_set_score_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}/score-config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_config_presenter_action_set_tests(self, id, **kwargs):  # noqa: E501
        """Set tests for exercise based on given identification.  # noqa: E501

        Set tests for exercise based on given identification.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_config_presenter_action_set_tests(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :param IdTestsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_config_presenter_action_set_tests_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercises_config_presenter_action_set_tests_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def exercises_config_presenter_action_set_tests_with_http_info(self, id, **kwargs):  # noqa: E501
        """Set tests for exercise based on given identification.  # noqa: E501

        Set tests for exercise based on given identification.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_config_presenter_action_set_tests_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :param IdTestsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_config_presenter_action_set_tests" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercises_config_presenter_action_set_tests`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}/tests', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_config_presenter_action_update_environment_configs(self, id, **kwargs):  # noqa: E501
        """Change runtime configuration of exercise. Configurations can be added or deleted here, based on what is provided in arguments.  # noqa: E501

        Change runtime configuration of exercise. Configurations can be added or deleted here, based on what is provided in arguments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_config_presenter_action_update_environment_configs(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identification of exercise (required)
        :param IdEnvironmentconfigsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_config_presenter_action_update_environment_configs_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercises_config_presenter_action_update_environment_configs_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def exercises_config_presenter_action_update_environment_configs_with_http_info(self, id, **kwargs):  # noqa: E501
        """Change runtime configuration of exercise. Configurations can be added or deleted here, based on what is provided in arguments.  # noqa: E501

        Change runtime configuration of exercise. Configurations can be added or deleted here, based on what is provided in arguments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_config_presenter_action_update_environment_configs_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identification of exercise (required)
        :param IdEnvironmentconfigsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_config_presenter_action_update_environment_configs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercises_config_presenter_action_update_environment_configs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}/environment-configs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_presenter_action_add_tag(self, id, name, **kwargs):  # noqa: E501
        """Add tag with given name to the exercise.  # noqa: E501

        Add tag with given name to the exercise.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_add_tag(id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :param str name: Name of the newly added tag to given exercise (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_presenter_action_add_tag_with_http_info(id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.exercises_presenter_action_add_tag_with_http_info(id, name, **kwargs)  # noqa: E501
            return data

    def exercises_presenter_action_add_tag_with_http_info(self, id, name, **kwargs):  # noqa: E501
        """Add tag with given name to the exercise.  # noqa: E501

        Add tag with given name to the exercise.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_add_tag_with_http_info(id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :param str name: Name of the newly added tag to given exercise (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_presenter_action_add_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercises_presenter_action_add_tag`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `exercises_presenter_action_add_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}/tags/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_presenter_action_all_tags(self, **kwargs):  # noqa: E501
        """Get list of global exercise tag names which are currently registered.  # noqa: E501

        Get list of global exercise tag names which are currently registered.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_all_tags(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_presenter_action_all_tags_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.exercises_presenter_action_all_tags_with_http_info(**kwargs)  # noqa: E501
            return data

    def exercises_presenter_action_all_tags_with_http_info(self, **kwargs):  # noqa: E501
        """Get list of global exercise tag names which are currently registered.  # noqa: E501

        Get list of global exercise tag names which are currently registered.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_all_tags_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_presenter_action_all_tags" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_presenter_action_assignments(self, id, **kwargs):  # noqa: E501
        """Get all non-archived assignments created from this exercise.  # noqa: E501

        Get all non-archived assignments created from this exercise.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_assignments(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :param bool archived: Include also archived groups in the result
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_presenter_action_assignments_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercises_presenter_action_assignments_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def exercises_presenter_action_assignments_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get all non-archived assignments created from this exercise.  # noqa: E501

        Get all non-archived assignments created from this exercise.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_assignments_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :param bool archived: Include also archived groups in the result
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'archived']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_presenter_action_assignments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercises_presenter_action_assignments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'archived' in params:
            query_params.append(('archived', params['archived']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}/assignments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_presenter_action_attach_group(self, id, group_id, **kwargs):  # noqa: E501
        """Attach exercise to group with given identification.  # noqa: E501

        Attach exercise to group with given identification.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_attach_group(id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :param str group_id: Identifier of the group to which exercise should be attached (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_presenter_action_attach_group_with_http_info(id, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercises_presenter_action_attach_group_with_http_info(id, group_id, **kwargs)  # noqa: E501
            return data

    def exercises_presenter_action_attach_group_with_http_info(self, id, group_id, **kwargs):  # noqa: E501
        """Attach exercise to group with given identification.  # noqa: E501

        Attach exercise to group with given identification.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_attach_group_with_http_info(id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :param str group_id: Identifier of the group to which exercise should be attached (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_presenter_action_attach_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercises_presenter_action_attach_group`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `exercises_presenter_action_attach_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}/groups/{groupId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_presenter_action_authors(self, **kwargs):  # noqa: E501
        """List authors of all exercises, possibly filtered by a group in which the exercises appear.  # noqa: E501

        List authors of all exercises, possibly filtered by a group in which the exercises appear.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_authors(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_id: Id of an instance from which the authors are listed.
        :param str group_id: A group where the relevant exercises can be seen (assigned).
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_presenter_action_authors_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.exercises_presenter_action_authors_with_http_info(**kwargs)  # noqa: E501
            return data

    def exercises_presenter_action_authors_with_http_info(self, **kwargs):  # noqa: E501
        """List authors of all exercises, possibly filtered by a group in which the exercises appear.  # noqa: E501

        List authors of all exercises, possibly filtered by a group in which the exercises appear.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_authors_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_id: Id of an instance from which the authors are listed.
        :param str group_id: A group where the relevant exercises can be seen (assigned).
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_id', 'group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_presenter_action_authors" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'instance_id' in params:
            query_params.append(('instanceId', params['instance_id']))  # noqa: E501
        if 'group_id' in params:
            query_params.append(('groupId', params['group_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/authors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_presenter_action_create(self, **kwargs):  # noqa: E501
        """Create exercise with all default values. Exercise detail can be then changed in appropriate endpoint.  # noqa: E501

        Create exercise with all default values. Exercise detail can be then changed in appropriate endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1ExercisesBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_presenter_action_create_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.exercises_presenter_action_create_with_http_info(**kwargs)  # noqa: E501
            return data

    def exercises_presenter_action_create_with_http_info(self, **kwargs):  # noqa: E501
        """Create exercise with all default values. Exercise detail can be then changed in appropriate endpoint.  # noqa: E501

        Create exercise with all default values. Exercise detail can be then changed in appropriate endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1ExercisesBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_presenter_action_create" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_presenter_action_default(self, **kwargs):  # noqa: E501
        """Get a list of all exercises matching given filters in given pagination rage. The result conforms to pagination protocol.  # noqa: E501

        Get a list of all exercises matching given filters in given pagination rage. The result conforms to pagination protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_default(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Index of the first result.
        :param int limit: Maximal number of results returned.
        :param str order_by: Name of the column (column concept). The '!' prefix indicate descending order.
        :param list[object] filters: Named filters that prune the result.
        :param str locale: Currently set locale (used to augment order by clause if necessary),
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_presenter_action_default_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.exercises_presenter_action_default_with_http_info(**kwargs)  # noqa: E501
            return data

    def exercises_presenter_action_default_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of all exercises matching given filters in given pagination rage. The result conforms to pagination protocol.  # noqa: E501

        Get a list of all exercises matching given filters in given pagination rage. The result conforms to pagination protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_default_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Index of the first result.
        :param int limit: Maximal number of results returned.
        :param str order_by: Name of the column (column concept). The '!' prefix indicate descending order.
        :param list[object] filters: Named filters that prune the result.
        :param str locale: Currently set locale (used to augment order by clause if necessary),
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'order_by', 'filters', 'locale']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_presenter_action_default" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'filters' in params:
            query_params.append(('filters', params['filters']))  # noqa: E501
            collection_formats['filters'] = 'multi'  # noqa: E501
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_presenter_action_detach_group(self, id, group_id, **kwargs):  # noqa: E501
        """Detach exercise from given group.  # noqa: E501

        Detach exercise from given group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_detach_group(id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :param str group_id: Identifier of the group which should be detached from exercise (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_presenter_action_detach_group_with_http_info(id, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercises_presenter_action_detach_group_with_http_info(id, group_id, **kwargs)  # noqa: E501
            return data

    def exercises_presenter_action_detach_group_with_http_info(self, id, group_id, **kwargs):  # noqa: E501
        """Detach exercise from given group.  # noqa: E501

        Detach exercise from given group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_detach_group_with_http_info(id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :param str group_id: Identifier of the group which should be detached from exercise (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_presenter_action_detach_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercises_presenter_action_detach_group`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `exercises_presenter_action_detach_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}/groups/{groupId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_presenter_action_detail(self, id, **kwargs):  # noqa: E501
        """Get details of an exercise  # noqa: E501

        Get details of an exercise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_detail(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identification of exercise (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_presenter_action_detail_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercises_presenter_action_detail_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def exercises_presenter_action_detail_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get details of an exercise  # noqa: E501

        Get details of an exercise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_detail_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identification of exercise (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_presenter_action_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercises_presenter_action_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_presenter_action_fork_from(self, id, **kwargs):  # noqa: E501
        """Fork exercise from given one into the completely new one.  # noqa: E501

        Fork exercise from given one into the completely new one.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_fork_from(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :param IdForkBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_presenter_action_fork_from_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercises_presenter_action_fork_from_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def exercises_presenter_action_fork_from_with_http_info(self, id, **kwargs):  # noqa: E501
        """Fork exercise from given one into the completely new one.  # noqa: E501

        Fork exercise from given one into the completely new one.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_fork_from_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :param IdForkBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_presenter_action_fork_from" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercises_presenter_action_fork_from`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}/fork', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_presenter_action_hardware_groups(self, id, **kwargs):  # noqa: E501
        """Set hardware groups which are associated with exercise.  # noqa: E501

        Set hardware groups which are associated with exercise.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_hardware_groups(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identifier of exercise (required)
        :param IdHardwaregroupsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_presenter_action_hardware_groups_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercises_presenter_action_hardware_groups_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def exercises_presenter_action_hardware_groups_with_http_info(self, id, **kwargs):  # noqa: E501
        """Set hardware groups which are associated with exercise.  # noqa: E501

        Set hardware groups which are associated with exercise.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_hardware_groups_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identifier of exercise (required)
        :param IdHardwaregroupsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_presenter_action_hardware_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercises_presenter_action_hardware_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}/hardware-groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_presenter_action_list_by_ids(self, **kwargs):  # noqa: E501
        """Get a list of exercises based on given ids.  # noqa: E501

        Get a list of exercises based on given ids.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_list_by_ids(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExercisesListBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_presenter_action_list_by_ids_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.exercises_presenter_action_list_by_ids_with_http_info(**kwargs)  # noqa: E501
            return data

    def exercises_presenter_action_list_by_ids_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of exercises based on given ids.  # noqa: E501

        Get a list of exercises based on given ids.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_list_by_ids_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExercisesListBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_presenter_action_list_by_ids" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_presenter_action_remove(self, id, **kwargs):  # noqa: E501
        """Delete an exercise  # noqa: E501

        Delete an exercise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_remove(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_presenter_action_remove_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercises_presenter_action_remove_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def exercises_presenter_action_remove_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete an exercise  # noqa: E501

        Delete an exercise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_remove_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_presenter_action_remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercises_presenter_action_remove`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_presenter_action_remove_tag(self, id, name, **kwargs):  # noqa: E501
        """Remove tag with given name from exercise.  # noqa: E501

        Remove tag with given name from exercise.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_remove_tag(id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :param str name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_presenter_action_remove_tag_with_http_info(id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.exercises_presenter_action_remove_tag_with_http_info(id, name, **kwargs)  # noqa: E501
            return data

    def exercises_presenter_action_remove_tag_with_http_info(self, id, name, **kwargs):  # noqa: E501
        """Remove tag with given name from exercise.  # noqa: E501

        Remove tag with given name from exercise.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_remove_tag_with_http_info(id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :param str name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_presenter_action_remove_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercises_presenter_action_remove_tag`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `exercises_presenter_action_remove_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}/tags/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_presenter_action_send_notification(self, id, **kwargs):  # noqa: E501
        """Sends an email to all group admins and supervisors, where the exercise is assigned. The purpose of this is to quickly notify all relevant teachers when a bug is found or the exercise is modified significantly. The response is number of emails sent (number of notified users).  # noqa: E501

        Sends an email to all group admins and supervisors, where the exercise is assigned. The purpose of this is to quickly notify all relevant teachers when a bug is found or the exercise is modified significantly. The response is number of emails sent (number of notified users).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_send_notification(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identifier of the exercise (required)
        :param IdNotificationBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_presenter_action_send_notification_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercises_presenter_action_send_notification_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def exercises_presenter_action_send_notification_with_http_info(self, id, **kwargs):  # noqa: E501
        """Sends an email to all group admins and supervisors, where the exercise is assigned. The purpose of this is to quickly notify all relevant teachers when a bug is found or the exercise is modified significantly. The response is number of emails sent (number of notified users).  # noqa: E501

        Sends an email to all group admins and supervisors, where the exercise is assigned. The purpose of this is to quickly notify all relevant teachers when a bug is found or the exercise is modified significantly. The response is number of emails sent (number of notified users).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_send_notification_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identifier of the exercise (required)
        :param IdNotificationBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_presenter_action_send_notification" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercises_presenter_action_send_notification`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}/notification', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_presenter_action_set_admins(self, id, **kwargs):  # noqa: E501
        """Change who the admins of an exercise are (all users on the list are added, prior admins not on the list are removed).  # noqa: E501

        Change who the admins of an exercise are (all users on the list are added, prior admins not on the list are removed).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_set_admins(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identifier of the exercise (required)
        :param IdAdminsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_presenter_action_set_admins_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercises_presenter_action_set_admins_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def exercises_presenter_action_set_admins_with_http_info(self, id, **kwargs):  # noqa: E501
        """Change who the admins of an exercise are (all users on the list are added, prior admins not on the list are removed).  # noqa: E501

        Change who the admins of an exercise are (all users on the list are added, prior admins not on the list are removed).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_set_admins_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identifier of the exercise (required)
        :param IdAdminsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_presenter_action_set_admins" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercises_presenter_action_set_admins`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}/admins', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_presenter_action_set_archived(self, id, **kwargs):  # noqa: E501
        """(Un)mark the exercise as archived. Nothing happens if the exercise is already in the requested state.  # noqa: E501

        (Un)mark the exercise as archived. Nothing happens if the exercise is already in the requested state.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_set_archived(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :param IdArchivedBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_presenter_action_set_archived_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercises_presenter_action_set_archived_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def exercises_presenter_action_set_archived_with_http_info(self, id, **kwargs):  # noqa: E501
        """(Un)mark the exercise as archived. Nothing happens if the exercise is already in the requested state.  # noqa: E501

        (Un)mark the exercise as archived. Nothing happens if the exercise is already in the requested state.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_set_archived_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :param IdArchivedBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_presenter_action_set_archived" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercises_presenter_action_set_archived`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}/archived', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_presenter_action_set_author(self, id, **kwargs):  # noqa: E501
        """Change the author of the exercise. This is a very special operation reserved for powerful users.  # noqa: E501

        Change the author of the exercise. This is a very special operation reserved for powerful users.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_set_author(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identifier of the exercise (required)
        :param IdAuthorBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_presenter_action_set_author_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercises_presenter_action_set_author_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def exercises_presenter_action_set_author_with_http_info(self, id, **kwargs):  # noqa: E501
        """Change the author of the exercise. This is a very special operation reserved for powerful users.  # noqa: E501

        Change the author of the exercise. This is a very special operation reserved for powerful users.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_set_author_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identifier of the exercise (required)
        :param IdAuthorBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_presenter_action_set_author" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercises_presenter_action_set_author`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}/author', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_presenter_action_tags_stats(self, **kwargs):  # noqa: E501
        """Get list of global exercise tag names along with how many times they have been used.  # noqa: E501

        Get list of global exercise tag names along with how many times they have been used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_tags_stats(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_presenter_action_tags_stats_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.exercises_presenter_action_tags_stats_with_http_info(**kwargs)  # noqa: E501
            return data

    def exercises_presenter_action_tags_stats_with_http_info(self, **kwargs):  # noqa: E501
        """Get list of global exercise tag names along with how many times they have been used.  # noqa: E501

        Get list of global exercise tag names along with how many times they have been used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_tags_stats_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_presenter_action_tags_stats" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/tags-stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_presenter_action_tags_update_global(self, tag, **kwargs):  # noqa: E501
        """Update the tag globally. At the moment, the only 'update' function is 'rename'. Other types of updates may be implemented in the future.  # noqa: E501

        Update the tag globally. At the moment, the only 'update' function is 'rename'. Other types of updates may be implemented in the future.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_tags_update_global(tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tag: Tag to be updated (required)
        :param str rename_to: New name of the tag
        :param bool force: If true, the rename will be allowed even if the new tag name exists (tags will be merged). Otherwise, name collisions will result in error.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_presenter_action_tags_update_global_with_http_info(tag, **kwargs)  # noqa: E501
        else:
            (data) = self.exercises_presenter_action_tags_update_global_with_http_info(tag, **kwargs)  # noqa: E501
            return data

    def exercises_presenter_action_tags_update_global_with_http_info(self, tag, **kwargs):  # noqa: E501
        """Update the tag globally. At the moment, the only 'update' function is 'rename'. Other types of updates may be implemented in the future.  # noqa: E501

        Update the tag globally. At the moment, the only 'update' function is 'rename'. Other types of updates may be implemented in the future.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_tags_update_global_with_http_info(tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tag: Tag to be updated (required)
        :param str rename_to: New name of the tag
        :param bool force: If true, the rename will be allowed even if the new tag name exists (tags will be merged). Otherwise, name collisions will result in error.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tag', 'rename_to', 'force']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_presenter_action_tags_update_global" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tag' is set
        if ('tag' not in params or
                params['tag'] is None):
            raise ValueError("Missing the required parameter `tag` when calling `exercises_presenter_action_tags_update_global`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tag' in params:
            path_params['tag'] = params['tag']  # noqa: E501

        query_params = []
        if 'rename_to' in params:
            query_params.append(('renameTo', params['rename_to']))  # noqa: E501
        if 'force' in params:
            query_params.append(('force', params['force']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/tags/{tag}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_presenter_action_update_detail(self, id, **kwargs):  # noqa: E501
        """Update detail of an exercise  # noqa: E501

        Update detail of an exercise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_update_detail(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identification of exercise (required)
        :param ExercisesIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_presenter_action_update_detail_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercises_presenter_action_update_detail_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def exercises_presenter_action_update_detail_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update detail of an exercise  # noqa: E501

        Update detail of an exercise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_update_detail_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identification of exercise (required)
        :param ExercisesIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_presenter_action_update_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercises_presenter_action_update_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exercises_presenter_action_validate(self, id, **kwargs):  # noqa: E501
        """Check if the version of the exercise is up-to-date.  # noqa: E501

        Check if the version of the exercise is up-to-date.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_validate(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :param IdValidateBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exercises_presenter_action_validate_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.exercises_presenter_action_validate_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def exercises_presenter_action_validate_with_http_info(self, id, **kwargs):  # noqa: E501
        """Check if the version of the exercise is up-to-date.  # noqa: E501

        Check if the version of the exercise is up-to-date.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exercises_presenter_action_validate_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the exercise (required)
        :param IdValidateBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exercises_presenter_action_validate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `exercises_presenter_action_validate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercises/{id}/validate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def extensions_presenter_action_token(self, ext_id, **kwargs):  # noqa: E501
        """This endpoint is used by a backend of an extension to get a proper access token (from a temp token passed via URL). It also returns details about authenticated user.  # noqa: E501

        This endpoint is used by a backend of an extension to get a proper access token (from a temp token passed via URL). It also returns details about authenticated user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.extensions_presenter_action_token(ext_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ext_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.extensions_presenter_action_token_with_http_info(ext_id, **kwargs)  # noqa: E501
        else:
            (data) = self.extensions_presenter_action_token_with_http_info(ext_id, **kwargs)  # noqa: E501
            return data

    def extensions_presenter_action_token_with_http_info(self, ext_id, **kwargs):  # noqa: E501
        """This endpoint is used by a backend of an extension to get a proper access token (from a temp token passed via URL). It also returns details about authenticated user.  # noqa: E501

        This endpoint is used by a backend of an extension to get a proper access token (from a temp token passed via URL). It also returns details about authenticated user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.extensions_presenter_action_token_with_http_info(ext_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ext_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ext_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method extensions_presenter_action_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ext_id' is set
        if ('ext_id' not in params or
                params['ext_id'] is None):
            raise ValueError("Missing the required parameter `ext_id` when calling `extensions_presenter_action_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ext_id' in params:
            path_params['extId'] = params['ext_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/extensions/{extId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def extensions_presenter_action_url(self, ext_id, instance_id, **kwargs):  # noqa: E501
        """Return URL referring to the extension with properly injected temporary JWT token.  # noqa: E501

        Return URL referring to the extension with properly injected temporary JWT token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.extensions_presenter_action_url(ext_id, instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ext_id: (required)
        :param str instance_id: (required)
        :param str locale:
        :param str _return:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.extensions_presenter_action_url_with_http_info(ext_id, instance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.extensions_presenter_action_url_with_http_info(ext_id, instance_id, **kwargs)  # noqa: E501
            return data

    def extensions_presenter_action_url_with_http_info(self, ext_id, instance_id, **kwargs):  # noqa: E501
        """Return URL referring to the extension with properly injected temporary JWT token.  # noqa: E501

        Return URL referring to the extension with properly injected temporary JWT token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.extensions_presenter_action_url_with_http_info(ext_id, instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ext_id: (required)
        :param str instance_id: (required)
        :param str locale:
        :param str _return:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ext_id', 'instance_id', 'locale', '_return']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method extensions_presenter_action_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ext_id' is set
        if ('ext_id' not in params or
                params['ext_id'] is None):
            raise ValueError("Missing the required parameter `ext_id` when calling `extensions_presenter_action_url`")  # noqa: E501
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params or
                params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `extensions_presenter_action_url`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ext_id' in params:
            path_params['extId'] = params['ext_id']  # noqa: E501
        if 'instance_id' in params:
            path_params['instanceId'] = params['instance_id']  # noqa: E501

        query_params = []
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501
        if '_return' in params:
            query_params.append(('return', params['_return']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/extensions/{extId}/{instanceId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def forgotten_password_presenter_action_change(self, **kwargs):  # noqa: E501
        """Change the user's password  # noqa: E501

        Change the user's password  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.forgotten_password_presenter_action_change(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ForgottenpasswordChangeBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.forgotten_password_presenter_action_change_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.forgotten_password_presenter_action_change_with_http_info(**kwargs)  # noqa: E501
            return data

    def forgotten_password_presenter_action_change_with_http_info(self, **kwargs):  # noqa: E501
        """Change the user's password  # noqa: E501

        Change the user's password  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.forgotten_password_presenter_action_change_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ForgottenpasswordChangeBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method forgotten_password_presenter_action_change" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/forgotten-password/change', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def forgotten_password_presenter_action_default(self, **kwargs):  # noqa: E501
        """Request a password reset (user will receive an e-mail that prompts them to reset their password)  # noqa: E501

        Request a password reset (user will receive an e-mail that prompts them to reset their password)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.forgotten_password_presenter_action_default(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1ForgottenpasswordBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.forgotten_password_presenter_action_default_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.forgotten_password_presenter_action_default_with_http_info(**kwargs)  # noqa: E501
            return data

    def forgotten_password_presenter_action_default_with_http_info(self, **kwargs):  # noqa: E501
        """Request a password reset (user will receive an e-mail that prompts them to reset their password)  # noqa: E501

        Request a password reset (user will receive an e-mail that prompts them to reset their password)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.forgotten_password_presenter_action_default_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1ForgottenpasswordBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method forgotten_password_presenter_action_default" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/forgotten-password', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def forgotten_password_presenter_action_validate_password_strength(self, **kwargs):  # noqa: E501
        """Check if a password is strong enough  # noqa: E501

        Check if a password is strong enough  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.forgotten_password_presenter_action_validate_password_strength(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ForgottenpasswordValidatepasswordstrengthBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.forgotten_password_presenter_action_validate_password_strength_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.forgotten_password_presenter_action_validate_password_strength_with_http_info(**kwargs)  # noqa: E501
            return data

    def forgotten_password_presenter_action_validate_password_strength_with_http_info(self, **kwargs):  # noqa: E501
        """Check if a password is strong enough  # noqa: E501

        Check if a password is strong enough  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.forgotten_password_presenter_action_validate_password_strength_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ForgottenpasswordValidatepasswordstrengthBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method forgotten_password_presenter_action_validate_password_strength" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/forgotten-password/validate-password-strength', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_external_attributes_presenter_action_add(self, group_id, **kwargs):  # noqa: E501
        """Create an external attribute for given group.  # noqa: E501

        Create an external attribute for given group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_external_attributes_presenter_action_add(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: (required)
        :param GroupattributesGroupIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_external_attributes_presenter_action_add_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.group_external_attributes_presenter_action_add_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def group_external_attributes_presenter_action_add_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """Create an external attribute for given group.  # noqa: E501

        Create an external attribute for given group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_external_attributes_presenter_action_add_with_http_info(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: (required)
        :param GroupattributesGroupIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_external_attributes_presenter_action_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `group_external_attributes_presenter_action_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/group-attributes/{groupId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_external_attributes_presenter_action_default(self, instance, **kwargs):  # noqa: E501
        """Return special brief groups entities with injected external attributes and given user affiliation.  # noqa: E501

        Return special brief groups entities with injected external attributes and given user affiliation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_external_attributes_presenter_action_default(instance, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance: ID of the instance, whose groups are returned. (required)
        :param str service: ID of the external service, of which the attributes are returned. If missing, all attributes are returned.
        :param str user: Relationship info of this user is included for each returned group.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_external_attributes_presenter_action_default_with_http_info(instance, **kwargs)  # noqa: E501
        else:
            (data) = self.group_external_attributes_presenter_action_default_with_http_info(instance, **kwargs)  # noqa: E501
            return data

    def group_external_attributes_presenter_action_default_with_http_info(self, instance, **kwargs):  # noqa: E501
        """Return special brief groups entities with injected external attributes and given user affiliation.  # noqa: E501

        Return special brief groups entities with injected external attributes and given user affiliation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_external_attributes_presenter_action_default_with_http_info(instance, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance: ID of the instance, whose groups are returned. (required)
        :param str service: ID of the external service, of which the attributes are returned. If missing, all attributes are returned.
        :param str user: Relationship info of this user is included for each returned group.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'service', 'user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_external_attributes_presenter_action_default" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params or
                params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `group_external_attributes_presenter_action_default`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501
        if 'service' in params:
            query_params.append(('service', params['service']))  # noqa: E501
        if 'user' in params:
            query_params.append(('user', params['user']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/group-attributes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_external_attributes_presenter_action_remove(self, group_id, service, key, value, **kwargs):  # noqa: E501
        """Remove selected attribute  # noqa: E501

        Remove selected attribute  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_external_attributes_presenter_action_remove(group_id, service, key, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: (required)
        :param str service: Identifier of the external service creating the attribute (required)
        :param str key: Key of the attribute (must be valid identifier) (required)
        :param str value: Value of the attribute (arbitrary string) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_external_attributes_presenter_action_remove_with_http_info(group_id, service, key, value, **kwargs)  # noqa: E501
        else:
            (data) = self.group_external_attributes_presenter_action_remove_with_http_info(group_id, service, key, value, **kwargs)  # noqa: E501
            return data

    def group_external_attributes_presenter_action_remove_with_http_info(self, group_id, service, key, value, **kwargs):  # noqa: E501
        """Remove selected attribute  # noqa: E501

        Remove selected attribute  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_external_attributes_presenter_action_remove_with_http_info(group_id, service, key, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: (required)
        :param str service: Identifier of the external service creating the attribute (required)
        :param str key: Key of the attribute (must be valid identifier) (required)
        :param str value: Value of the attribute (arbitrary string) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'service', 'key', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_external_attributes_presenter_action_remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `group_external_attributes_presenter_action_remove`")  # noqa: E501
        # verify the required parameter 'service' is set
        if ('service' not in params or
                params['service'] is None):
            raise ValueError("Missing the required parameter `service` when calling `group_external_attributes_presenter_action_remove`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `group_external_attributes_presenter_action_remove`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `group_external_attributes_presenter_action_remove`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []
        if 'service' in params:
            query_params.append(('service', params['service']))  # noqa: E501
        if 'key' in params:
            query_params.append(('key', params['key']))  # noqa: E501
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/group-attributes/{groupId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_invitations_presenter_action_accept(self, id, **kwargs):  # noqa: E501
        """Allow the current user to join the corresponding group using the invitation.  # noqa: E501

        Allow the current user to join the corresponding group using the invitation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_invitations_presenter_action_accept(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group invitation (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_invitations_presenter_action_accept_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.group_invitations_presenter_action_accept_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def group_invitations_presenter_action_accept_with_http_info(self, id, **kwargs):  # noqa: E501
        """Allow the current user to join the corresponding group using the invitation.  # noqa: E501

        Allow the current user to join the corresponding group using the invitation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_invitations_presenter_action_accept_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group invitation (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_invitations_presenter_action_accept" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_invitations_presenter_action_accept`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/group-invitations/{id}/accept', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_invitations_presenter_action_create(self, group_id, **kwargs):  # noqa: E501
        """Create a new invitation for given group.  # noqa: E501

        Create a new invitation for given group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_invitations_presenter_action_create(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: (required)
        :param GroupIdInvitationsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_invitations_presenter_action_create_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.group_invitations_presenter_action_create_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def group_invitations_presenter_action_create_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """Create a new invitation for given group.  # noqa: E501

        Create a new invitation for given group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_invitations_presenter_action_create_with_http_info(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: (required)
        :param GroupIdInvitationsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_invitations_presenter_action_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `group_invitations_presenter_action_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{groupId}/invitations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_invitations_presenter_action_default(self, id, **kwargs):  # noqa: E501
        """Return invitation details including all relevant group entities (so a name can be constructed).  # noqa: E501

        Return invitation details including all relevant group entities (so a name can be constructed).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_invitations_presenter_action_default(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group invitation (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_invitations_presenter_action_default_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.group_invitations_presenter_action_default_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def group_invitations_presenter_action_default_with_http_info(self, id, **kwargs):  # noqa: E501
        """Return invitation details including all relevant group entities (so a name can be constructed).  # noqa: E501

        Return invitation details including all relevant group entities (so a name can be constructed).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_invitations_presenter_action_default_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group invitation (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_invitations_presenter_action_default" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_invitations_presenter_action_default`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/group-invitations/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_invitations_presenter_action_list(self, group_id, **kwargs):  # noqa: E501
        """List all invitations of a group.  # noqa: E501

        List all invitations of a group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_invitations_presenter_action_list(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_invitations_presenter_action_list_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.group_invitations_presenter_action_list_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def group_invitations_presenter_action_list_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """List all invitations of a group.  # noqa: E501

        List all invitations of a group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_invitations_presenter_action_list_with_http_info(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_invitations_presenter_action_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `group_invitations_presenter_action_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{groupId}/invitations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_invitations_presenter_action_remove(self, id, **kwargs):  # noqa: E501
        """group_invitations_presenter_action_remove  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_invitations_presenter_action_remove(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group invitation (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_invitations_presenter_action_remove_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.group_invitations_presenter_action_remove_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def group_invitations_presenter_action_remove_with_http_info(self, id, **kwargs):  # noqa: E501
        """group_invitations_presenter_action_remove  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_invitations_presenter_action_remove_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group invitation (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_invitations_presenter_action_remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_invitations_presenter_action_remove`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/group-invitations/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def group_invitations_presenter_action_update(self, id, **kwargs):  # noqa: E501
        """Edit the invitation.  # noqa: E501

        Edit the invitation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_invitations_presenter_action_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group invitation (required)
        :param GroupinvitationsIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.group_invitations_presenter_action_update_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.group_invitations_presenter_action_update_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def group_invitations_presenter_action_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """Edit the invitation.  # noqa: E501

        Edit the invitation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.group_invitations_presenter_action_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group invitation (required)
        :param GroupinvitationsIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method group_invitations_presenter_action_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `group_invitations_presenter_action_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/group-invitations/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def groups_presenter_action_add_group(self, **kwargs):  # noqa: E501
        """Create a new group  # noqa: E501

        Create a new group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_add_group(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1GroupsBody body:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.groups_presenter_action_add_group_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.groups_presenter_action_add_group_with_http_info(**kwargs)  # noqa: E501
            return data

    def groups_presenter_action_add_group_with_http_info(self, **kwargs):  # noqa: E501
        """Create a new group  # noqa: E501

        Create a new group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_add_group_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1GroupsBody body:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_presenter_action_add_group" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def groups_presenter_action_add_member(self, id, user_id, **kwargs):  # noqa: E501
        """Add/update a membership (other than student) for given user  # noqa: E501

        Add/update a membership (other than student) for given user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_add_member(id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group (required)
        :param str user_id: Identifier of the supervisor (required)
        :param MembersUserIdBody body:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.groups_presenter_action_add_member_with_http_info(id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.groups_presenter_action_add_member_with_http_info(id, user_id, **kwargs)  # noqa: E501
            return data

    def groups_presenter_action_add_member_with_http_info(self, id, user_id, **kwargs):  # noqa: E501
        """Add/update a membership (other than student) for given user  # noqa: E501

        Add/update a membership (other than student) for given user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_add_member_with_http_info(id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group (required)
        :param str user_id: Identifier of the supervisor (required)
        :param MembersUserIdBody body:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'user_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_presenter_action_add_member" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `groups_presenter_action_add_member`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `groups_presenter_action_add_member`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{id}/members/{userId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def groups_presenter_action_add_student(self, id, user_id, **kwargs):  # noqa: E501
        """Add a student to a group  # noqa: E501

        Add a student to a group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_add_student(id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group (required)
        :param str user_id: Identifier of the student (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.groups_presenter_action_add_student_with_http_info(id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.groups_presenter_action_add_student_with_http_info(id, user_id, **kwargs)  # noqa: E501
            return data

    def groups_presenter_action_add_student_with_http_info(self, id, user_id, **kwargs):  # noqa: E501
        """Add a student to a group  # noqa: E501

        Add a student to a group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_add_student_with_http_info(id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group (required)
        :param str user_id: Identifier of the student (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_presenter_action_add_student" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `groups_presenter_action_add_student`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `groups_presenter_action_add_student`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{id}/students/{userId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def groups_presenter_action_assignments(self, id, **kwargs):  # noqa: E501
        """Get all exercise assignments for a group  # noqa: E501

        Get all exercise assignments for a group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_assignments(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.groups_presenter_action_assignments_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.groups_presenter_action_assignments_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def groups_presenter_action_assignments_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get all exercise assignments for a group  # noqa: E501

        Get all exercise assignments for a group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_assignments_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_presenter_action_assignments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `groups_presenter_action_assignments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{id}/assignments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def groups_presenter_action_default(self, **kwargs):  # noqa: E501
        """Get a list of all non-archived groups a user can see. The return set is filtered by parameters.  # noqa: E501

        Get a list of all non-archived groups a user can see. The return set is filtered by parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_default(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_id: Only groups of this instance are returned.
        :param bool ancestors: If true, returns an ancestral closure of the initial result set. Included ancestral groups do not respect other filters (archived, search, ...).
        :param str search: Search string. Only groups containing this string as a substring of their names are returned.
        :param bool archived: Include also archived groups in the result.
        :param bool only_archived: Automatically implies $archived flag and returns only archived groups.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.groups_presenter_action_default_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.groups_presenter_action_default_with_http_info(**kwargs)  # noqa: E501
            return data

    def groups_presenter_action_default_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of all non-archived groups a user can see. The return set is filtered by parameters.  # noqa: E501

        Get a list of all non-archived groups a user can see. The return set is filtered by parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_default_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_id: Only groups of this instance are returned.
        :param bool ancestors: If true, returns an ancestral closure of the initial result set. Included ancestral groups do not respect other filters (archived, search, ...).
        :param str search: Search string. Only groups containing this string as a substring of their names are returned.
        :param bool archived: Include also archived groups in the result.
        :param bool only_archived: Automatically implies $archived flag and returns only archived groups.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_id', 'ancestors', 'search', 'archived', 'only_archived']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_presenter_action_default" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'instance_id' in params:
            query_params.append(('instanceId', params['instance_id']))  # noqa: E501
        if 'ancestors' in params:
            query_params.append(('ancestors', params['ancestors']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'archived' in params:
            query_params.append(('archived', params['archived']))  # noqa: E501
        if 'only_archived' in params:
            query_params.append(('onlyArchived', params['only_archived']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def groups_presenter_action_detail(self, id, **kwargs):  # noqa: E501
        """Get details of a group  # noqa: E501

        Get details of a group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_detail(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.groups_presenter_action_detail_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.groups_presenter_action_detail_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def groups_presenter_action_detail_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get details of a group  # noqa: E501

        Get details of a group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_detail_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_presenter_action_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `groups_presenter_action_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def groups_presenter_action_get_exam_locks(self, id, exam_id, **kwargs):  # noqa: E501
        """Retrieve a list of locks for given exam  # noqa: E501

        Retrieve a list of locks for given exam  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_get_exam_locks(id, exam_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: An identifier of the related group (required)
        :param int exam_id: An identifier of the exam (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.groups_presenter_action_get_exam_locks_with_http_info(id, exam_id, **kwargs)  # noqa: E501
        else:
            (data) = self.groups_presenter_action_get_exam_locks_with_http_info(id, exam_id, **kwargs)  # noqa: E501
            return data

    def groups_presenter_action_get_exam_locks_with_http_info(self, id, exam_id, **kwargs):  # noqa: E501
        """Retrieve a list of locks for given exam  # noqa: E501

        Retrieve a list of locks for given exam  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_get_exam_locks_with_http_info(id, exam_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: An identifier of the related group (required)
        :param int exam_id: An identifier of the exam (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'exam_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_presenter_action_get_exam_locks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `groups_presenter_action_get_exam_locks`")  # noqa: E501
        # verify the required parameter 'exam_id' is set
        if ('exam_id' not in params or
                params['exam_id'] is None):
            raise ValueError("Missing the required parameter `exam_id` when calling `groups_presenter_action_get_exam_locks`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'exam_id' in params:
            path_params['examId'] = params['exam_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{id}/exam/{examId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def groups_presenter_action_lock_student(self, id, user_id, **kwargs):  # noqa: E501
        """Lock student in a group and with an IP from which the request was made.  # noqa: E501

        Lock student in a group and with an IP from which the request was made.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_lock_student(id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group (required)
        :param str user_id: Identifier of the student (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.groups_presenter_action_lock_student_with_http_info(id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.groups_presenter_action_lock_student_with_http_info(id, user_id, **kwargs)  # noqa: E501
            return data

    def groups_presenter_action_lock_student_with_http_info(self, id, user_id, **kwargs):  # noqa: E501
        """Lock student in a group and with an IP from which the request was made.  # noqa: E501

        Lock student in a group and with an IP from which the request was made.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_lock_student_with_http_info(id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group (required)
        :param str user_id: Identifier of the student (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_presenter_action_lock_student" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `groups_presenter_action_lock_student`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `groups_presenter_action_lock_student`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{id}/lock/{userId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def groups_presenter_action_members(self, id, **kwargs):  # noqa: E501
        """Get a list of members of a group  # noqa: E501

        Get a list of members of a group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_members(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.groups_presenter_action_members_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.groups_presenter_action_members_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def groups_presenter_action_members_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a list of members of a group  # noqa: E501

        Get a list of members of a group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_members_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_presenter_action_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `groups_presenter_action_members`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{id}/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def groups_presenter_action_relocate(self, id, new_parent_id, **kwargs):  # noqa: E501
        """Relocate the group under a different parent.  # noqa: E501

        Relocate the group under a different parent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_relocate(id, new_parent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: An identifier of the relocated group (required)
        :param str new_parent_id: An identifier of the new parent group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.groups_presenter_action_relocate_with_http_info(id, new_parent_id, **kwargs)  # noqa: E501
        else:
            (data) = self.groups_presenter_action_relocate_with_http_info(id, new_parent_id, **kwargs)  # noqa: E501
            return data

    def groups_presenter_action_relocate_with_http_info(self, id, new_parent_id, **kwargs):  # noqa: E501
        """Relocate the group under a different parent.  # noqa: E501

        Relocate the group under a different parent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_relocate_with_http_info(id, new_parent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: An identifier of the relocated group (required)
        :param str new_parent_id: An identifier of the new parent group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'new_parent_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_presenter_action_relocate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `groups_presenter_action_relocate`")  # noqa: E501
        # verify the required parameter 'new_parent_id' is set
        if ('new_parent_id' not in params or
                params['new_parent_id'] is None):
            raise ValueError("Missing the required parameter `new_parent_id` when calling `groups_presenter_action_relocate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'new_parent_id' in params:
            path_params['newParentId'] = params['new_parent_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{id}/relocate/{newParentId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def groups_presenter_action_remove_exam_period(self, id, **kwargs):  # noqa: E501
        """Change the group back to regular group (remove information about an exam).  # noqa: E501

        Change the group back to regular group (remove information about an exam).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_remove_exam_period(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: An identifier of the updated group (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.groups_presenter_action_remove_exam_period_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.groups_presenter_action_remove_exam_period_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def groups_presenter_action_remove_exam_period_with_http_info(self, id, **kwargs):  # noqa: E501
        """Change the group back to regular group (remove information about an exam).  # noqa: E501

        Change the group back to regular group (remove information about an exam).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_remove_exam_period_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: An identifier of the updated group (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_presenter_action_remove_exam_period" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `groups_presenter_action_remove_exam_period`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{id}/examPeriod', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def groups_presenter_action_remove_group(self, id, **kwargs):  # noqa: E501
        """Delete a group  # noqa: E501

        Delete a group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_remove_group(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.groups_presenter_action_remove_group_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.groups_presenter_action_remove_group_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def groups_presenter_action_remove_group_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a group  # noqa: E501

        Delete a group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_remove_group_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_presenter_action_remove_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `groups_presenter_action_remove_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def groups_presenter_action_remove_member(self, id, user_id, **kwargs):  # noqa: E501
        """Remove a member (other than student) from a group  # noqa: E501

        Remove a member (other than student) from a group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_remove_member(id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group (required)
        :param str user_id: Identifier of the supervisor (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.groups_presenter_action_remove_member_with_http_info(id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.groups_presenter_action_remove_member_with_http_info(id, user_id, **kwargs)  # noqa: E501
            return data

    def groups_presenter_action_remove_member_with_http_info(self, id, user_id, **kwargs):  # noqa: E501
        """Remove a member (other than student) from a group  # noqa: E501

        Remove a member (other than student) from a group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_remove_member_with_http_info(id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group (required)
        :param str user_id: Identifier of the supervisor (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_presenter_action_remove_member" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `groups_presenter_action_remove_member`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `groups_presenter_action_remove_member`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{id}/members/{userId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def groups_presenter_action_remove_student(self, id, user_id, **kwargs):  # noqa: E501
        """Remove a student from a group  # noqa: E501

        Remove a student from a group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_remove_student(id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group (required)
        :param str user_id: Identifier of the student (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.groups_presenter_action_remove_student_with_http_info(id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.groups_presenter_action_remove_student_with_http_info(id, user_id, **kwargs)  # noqa: E501
            return data

    def groups_presenter_action_remove_student_with_http_info(self, id, user_id, **kwargs):  # noqa: E501
        """Remove a student from a group  # noqa: E501

        Remove a student from a group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_remove_student_with_http_info(id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group (required)
        :param str user_id: Identifier of the student (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_presenter_action_remove_student" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `groups_presenter_action_remove_student`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `groups_presenter_action_remove_student`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{id}/students/{userId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def groups_presenter_action_set_archived(self, id, **kwargs):  # noqa: E501
        """Set the 'isArchived' flag for a group  # noqa: E501

        Set the 'isArchived' flag for a group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_set_archived(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: An identifier of the updated group (required)
        :param IdArchivedBody1 body:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.groups_presenter_action_set_archived_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.groups_presenter_action_set_archived_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def groups_presenter_action_set_archived_with_http_info(self, id, **kwargs):  # noqa: E501
        """Set the 'isArchived' flag for a group  # noqa: E501

        Set the 'isArchived' flag for a group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_set_archived_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: An identifier of the updated group (required)
        :param IdArchivedBody1 body:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_presenter_action_set_archived" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `groups_presenter_action_set_archived`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{id}/archived', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def groups_presenter_action_set_exam_period(self, id, **kwargs):  # noqa: E501
        """Set an examination period (in the future) when the group will be secured for submitting. Only locked students may submit solutions in the group during this period. This endpoint is also used to update already planned exam period, but only dates in the future can be edited (e.g., once an exam begins, the beginning may no longer be updated).  # noqa: E501

        Set an examination period (in the future) when the group will be secured for submitting. Only locked students may submit solutions in the group during this period. This endpoint is also used to update already planned exam period, but only dates in the future can be edited (e.g., once an exam begins, the beginning may no longer be updated).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_set_exam_period(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: An identifier of the updated group (required)
        :param IdExamPeriodBody body:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.groups_presenter_action_set_exam_period_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.groups_presenter_action_set_exam_period_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def groups_presenter_action_set_exam_period_with_http_info(self, id, **kwargs):  # noqa: E501
        """Set an examination period (in the future) when the group will be secured for submitting. Only locked students may submit solutions in the group during this period. This endpoint is also used to update already planned exam period, but only dates in the future can be edited (e.g., once an exam begins, the beginning may no longer be updated).  # noqa: E501

        Set an examination period (in the future) when the group will be secured for submitting. Only locked students may submit solutions in the group during this period. This endpoint is also used to update already planned exam period, but only dates in the future can be edited (e.g., once an exam begins, the beginning may no longer be updated).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_set_exam_period_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: An identifier of the updated group (required)
        :param IdExamPeriodBody body:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_presenter_action_set_exam_period" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `groups_presenter_action_set_exam_period`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{id}/examPeriod', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def groups_presenter_action_set_organizational(self, id, **kwargs):  # noqa: E501
        """Set the 'isOrganizational' flag for a group  # noqa: E501

        Set the 'isOrganizational' flag for a group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_set_organizational(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: An identifier of the updated group (required)
        :param IdOrganizationalBody body:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.groups_presenter_action_set_organizational_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.groups_presenter_action_set_organizational_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def groups_presenter_action_set_organizational_with_http_info(self, id, **kwargs):  # noqa: E501
        """Set the 'isOrganizational' flag for a group  # noqa: E501

        Set the 'isOrganizational' flag for a group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_set_organizational_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: An identifier of the updated group (required)
        :param IdOrganizationalBody body:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_presenter_action_set_organizational" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `groups_presenter_action_set_organizational`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{id}/organizational', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def groups_presenter_action_shadow_assignments(self, id, **kwargs):  # noqa: E501
        """Get all shadow assignments for a group  # noqa: E501

        Get all shadow assignments for a group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_shadow_assignments(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.groups_presenter_action_shadow_assignments_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.groups_presenter_action_shadow_assignments_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def groups_presenter_action_shadow_assignments_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get all shadow assignments for a group  # noqa: E501

        Get all shadow assignments for a group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_shadow_assignments_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_presenter_action_shadow_assignments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `groups_presenter_action_shadow_assignments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{id}/shadow-assignments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def groups_presenter_action_stats(self, id, **kwargs):  # noqa: E501
        """Get statistics of a group. If the user does not have the rights to view all of these, try to at least return their statistics.  # noqa: E501

        Get statistics of a group. If the user does not have the rights to view all of these, try to at least return their statistics.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_stats(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.groups_presenter_action_stats_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.groups_presenter_action_stats_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def groups_presenter_action_stats_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get statistics of a group. If the user does not have the rights to view all of these, try to at least return their statistics.  # noqa: E501

        Get statistics of a group. If the user does not have the rights to view all of these, try to at least return their statistics.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_stats_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_presenter_action_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `groups_presenter_action_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{id}/students/stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def groups_presenter_action_students_solutions(self, id, user_id, **kwargs):  # noqa: E501
        """Get all solutions of a single student from all assignments in a group  # noqa: E501

        Get all solutions of a single student from all assignments in a group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_students_solutions(id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group (required)
        :param str user_id: Identifier of the student (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.groups_presenter_action_students_solutions_with_http_info(id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.groups_presenter_action_students_solutions_with_http_info(id, user_id, **kwargs)  # noqa: E501
            return data

    def groups_presenter_action_students_solutions_with_http_info(self, id, user_id, **kwargs):  # noqa: E501
        """Get all solutions of a single student from all assignments in a group  # noqa: E501

        Get all solutions of a single student from all assignments in a group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_students_solutions_with_http_info(id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group (required)
        :param str user_id: Identifier of the student (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_presenter_action_students_solutions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `groups_presenter_action_students_solutions`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `groups_presenter_action_students_solutions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{id}/students/{userId}/solutions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def groups_presenter_action_students_stats(self, id, user_id, **kwargs):  # noqa: E501
        """Get statistics of a single student in a group  # noqa: E501

        Get statistics of a single student in a group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_students_stats(id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group (required)
        :param str user_id: Identifier of the student (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.groups_presenter_action_students_stats_with_http_info(id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.groups_presenter_action_students_stats_with_http_info(id, user_id, **kwargs)  # noqa: E501
            return data

    def groups_presenter_action_students_stats_with_http_info(self, id, user_id, **kwargs):  # noqa: E501
        """Get statistics of a single student in a group  # noqa: E501

        Get statistics of a single student in a group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_students_stats_with_http_info(id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group (required)
        :param str user_id: Identifier of the student (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_presenter_action_students_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `groups_presenter_action_students_stats`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `groups_presenter_action_students_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{id}/students/{userId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def groups_presenter_action_subgroups(self, id, **kwargs):  # noqa: E501
        """Get a list of subgroups of a group  # noqa: E501

        Get a list of subgroups of a group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_subgroups(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.groups_presenter_action_subgroups_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.groups_presenter_action_subgroups_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def groups_presenter_action_subgroups_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a list of subgroups of a group  # noqa: E501

        Get a list of subgroups of a group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_subgroups_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_presenter_action_subgroups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `groups_presenter_action_subgroups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{id}/subgroups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def groups_presenter_action_unlock_student(self, id, user_id, **kwargs):  # noqa: E501
        """Unlock a student currently locked in a group.  # noqa: E501

        Unlock a student currently locked in a group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_unlock_student(id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group (required)
        :param str user_id: Identifier of the student (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.groups_presenter_action_unlock_student_with_http_info(id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.groups_presenter_action_unlock_student_with_http_info(id, user_id, **kwargs)  # noqa: E501
            return data

    def groups_presenter_action_unlock_student_with_http_info(self, id, user_id, **kwargs):  # noqa: E501
        """Unlock a student currently locked in a group.  # noqa: E501

        Unlock a student currently locked in a group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_unlock_student_with_http_info(id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the group (required)
        :param str user_id: Identifier of the student (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_presenter_action_unlock_student" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `groups_presenter_action_unlock_student`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `groups_presenter_action_unlock_student`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{id}/lock/{userId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def groups_presenter_action_update_group(self, id, **kwargs):  # noqa: E501
        """Update group info  # noqa: E501

        Update group info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_update_group(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: An identifier of the updated group (required)
        :param GroupsIdBody body:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.groups_presenter_action_update_group_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.groups_presenter_action_update_group_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def groups_presenter_action_update_group_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update group info  # noqa: E501

        Update group info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_update_group_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: An identifier of the updated group (required)
        :param GroupsIdBody body:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_presenter_action_update_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `groups_presenter_action_update_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def groups_presenter_action_validate_add_group_data(self, **kwargs):  # noqa: E501
        """Validate group creation data  # noqa: E501

        Validate group creation data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_validate_add_group_data(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GroupsValidateaddgroupdataBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.groups_presenter_action_validate_add_group_data_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.groups_presenter_action_validate_add_group_data_with_http_info(**kwargs)  # noqa: E501
            return data

    def groups_presenter_action_validate_add_group_data_with_http_info(self, **kwargs):  # noqa: E501
        """Validate group creation data  # noqa: E501

        Validate group creation data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.groups_presenter_action_validate_add_group_data_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GroupsValidateaddgroupdataBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_presenter_action_validate_add_group_data" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/validate-add-group-data', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def hardware_groups_presenter_action_default(self, **kwargs):  # noqa: E501
        """Get a list of all hardware groups in system  # noqa: E501

        Get a list of all hardware groups in system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hardware_groups_presenter_action_default(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.hardware_groups_presenter_action_default_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.hardware_groups_presenter_action_default_with_http_info(**kwargs)  # noqa: E501
            return data

    def hardware_groups_presenter_action_default_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of all hardware groups in system  # noqa: E501

        Get a list of all hardware groups in system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hardware_groups_presenter_action_default_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hardware_groups_presenter_action_default" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/hardware-groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instances_presenter_action_create_instance(self, **kwargs):  # noqa: E501
        """Create a new instance  # noqa: E501

        Create a new instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_presenter_action_create_instance(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1InstancesBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instances_presenter_action_create_instance_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.instances_presenter_action_create_instance_with_http_info(**kwargs)  # noqa: E501
            return data

    def instances_presenter_action_create_instance_with_http_info(self, **kwargs):  # noqa: E501
        """Create a new instance  # noqa: E501

        Create a new instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_presenter_action_create_instance_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1InstancesBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instances_presenter_action_create_instance" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/instances', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instances_presenter_action_create_licence(self, id, **kwargs):  # noqa: E501
        """Create a new license for an instance  # noqa: E501

        Create a new license for an instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_presenter_action_create_licence(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: An identifier of the instance (required)
        :param IdLicencesBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instances_presenter_action_create_licence_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.instances_presenter_action_create_licence_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def instances_presenter_action_create_licence_with_http_info(self, id, **kwargs):  # noqa: E501
        """Create a new license for an instance  # noqa: E501

        Create a new license for an instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_presenter_action_create_licence_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: An identifier of the instance (required)
        :param IdLicencesBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instances_presenter_action_create_licence" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `instances_presenter_action_create_licence`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/instances/{id}/licences', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instances_presenter_action_default(self, **kwargs):  # noqa: E501
        """Get a list of all instances  # noqa: E501

        Get a list of all instances  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_presenter_action_default(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instances_presenter_action_default_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.instances_presenter_action_default_with_http_info(**kwargs)  # noqa: E501
            return data

    def instances_presenter_action_default_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of all instances  # noqa: E501

        Get a list of all instances  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_presenter_action_default_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instances_presenter_action_default" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/instances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instances_presenter_action_delete_instance(self, id, **kwargs):  # noqa: E501
        """Delete an instance  # noqa: E501

        Delete an instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_presenter_action_delete_instance(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: An identifier of the instance to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instances_presenter_action_delete_instance_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.instances_presenter_action_delete_instance_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def instances_presenter_action_delete_instance_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete an instance  # noqa: E501

        Delete an instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_presenter_action_delete_instance_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: An identifier of the instance to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instances_presenter_action_delete_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `instances_presenter_action_delete_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/instances/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instances_presenter_action_delete_licence(self, licence_id, **kwargs):  # noqa: E501
        """Remove existing license for an instance  # noqa: E501

        Remove existing license for an instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_presenter_action_delete_licence(licence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str licence_id: Identifier of the license (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instances_presenter_action_delete_licence_with_http_info(licence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.instances_presenter_action_delete_licence_with_http_info(licence_id, **kwargs)  # noqa: E501
            return data

    def instances_presenter_action_delete_licence_with_http_info(self, licence_id, **kwargs):  # noqa: E501
        """Remove existing license for an instance  # noqa: E501

        Remove existing license for an instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_presenter_action_delete_licence_with_http_info(licence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str licence_id: Identifier of the license (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['licence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instances_presenter_action_delete_licence" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'licence_id' is set
        if ('licence_id' not in params or
                params['licence_id'] is None):
            raise ValueError("Missing the required parameter `licence_id` when calling `instances_presenter_action_delete_licence`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'licence_id' in params:
            path_params['licenceId'] = params['licence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/instances/licences/{licenceId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instances_presenter_action_detail(self, id, **kwargs):  # noqa: E501
        """Get details of an instance  # noqa: E501

        Get details of an instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_presenter_action_detail(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: An identifier of the instance (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instances_presenter_action_detail_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.instances_presenter_action_detail_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def instances_presenter_action_detail_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get details of an instance  # noqa: E501

        Get details of an instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_presenter_action_detail_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: An identifier of the instance (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instances_presenter_action_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `instances_presenter_action_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/instances/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instances_presenter_action_licences(self, id, **kwargs):  # noqa: E501
        """Get a list of licenses associated with an instance  # noqa: E501

        Get a list of licenses associated with an instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_presenter_action_licences(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: An identifier of the instance (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instances_presenter_action_licences_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.instances_presenter_action_licences_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def instances_presenter_action_licences_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a list of licenses associated with an instance  # noqa: E501

        Get a list of licenses associated with an instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_presenter_action_licences_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: An identifier of the instance (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instances_presenter_action_licences" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `instances_presenter_action_licences`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/instances/{id}/licences', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instances_presenter_action_update_instance(self, id, **kwargs):  # noqa: E501
        """Update an instance  # noqa: E501

        Update an instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_presenter_action_update_instance(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: An identifier of the updated instance (required)
        :param InstancesIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instances_presenter_action_update_instance_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.instances_presenter_action_update_instance_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def instances_presenter_action_update_instance_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update an instance  # noqa: E501

        Update an instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_presenter_action_update_instance_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: An identifier of the updated instance (required)
        :param InstancesIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instances_presenter_action_update_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `instances_presenter_action_update_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/instances/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instances_presenter_action_update_licence(self, licence_id, **kwargs):  # noqa: E501
        """Update an existing license for an instance  # noqa: E501

        Update an existing license for an instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_presenter_action_update_licence(licence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str licence_id: Identifier of the license (required)
        :param LicencesLicenceIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instances_presenter_action_update_licence_with_http_info(licence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.instances_presenter_action_update_licence_with_http_info(licence_id, **kwargs)  # noqa: E501
            return data

    def instances_presenter_action_update_licence_with_http_info(self, licence_id, **kwargs):  # noqa: E501
        """Update an existing license for an instance  # noqa: E501

        Update an existing license for an instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_presenter_action_update_licence_with_http_info(licence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str licence_id: Identifier of the license (required)
        :param LicencesLicenceIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['licence_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instances_presenter_action_update_licence" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'licence_id' is set
        if ('licence_id' not in params or
                params['licence_id'] is None):
            raise ValueError("Missing the required parameter `licence_id` when calling `instances_presenter_action_update_licence`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'licence_id' in params:
            path_params['licenceId'] = params['licence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/instances/licences/{licenceId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def login_presenter_action_default(self, **kwargs):  # noqa: E501
        """Log in using user credentials  # noqa: E501

        Log in using user credentials  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login_presenter_action_default(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1LoginBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.login_presenter_action_default_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.login_presenter_action_default_with_http_info(**kwargs)  # noqa: E501
            return data

    def login_presenter_action_default_with_http_info(self, **kwargs):  # noqa: E501
        """Log in using user credentials  # noqa: E501

        Log in using user credentials  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login_presenter_action_default_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1LoginBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method login_presenter_action_default" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/login', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def login_presenter_action_external(self, authenticator_name, **kwargs):  # noqa: E501
        """Log in using an external authentication service  # noqa: E501

        Log in using an external authentication service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login_presenter_action_external(authenticator_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authenticator_name: Identifier of the external authenticator (required)
        :param LoginAuthenticatorNameBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.login_presenter_action_external_with_http_info(authenticator_name, **kwargs)  # noqa: E501
        else:
            (data) = self.login_presenter_action_external_with_http_info(authenticator_name, **kwargs)  # noqa: E501
            return data

    def login_presenter_action_external_with_http_info(self, authenticator_name, **kwargs):  # noqa: E501
        """Log in using an external authentication service  # noqa: E501

        Log in using an external authentication service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login_presenter_action_external_with_http_info(authenticator_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authenticator_name: Identifier of the external authenticator (required)
        :param LoginAuthenticatorNameBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authenticator_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method login_presenter_action_external" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authenticator_name' is set
        if ('authenticator_name' not in params or
                params['authenticator_name'] is None):
            raise ValueError("Missing the required parameter `authenticator_name` when calling `login_presenter_action_external`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'authenticator_name' in params:
            path_params['authenticatorName'] = params['authenticator_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/login/{authenticatorName}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def login_presenter_action_issue_restricted_token(self, **kwargs):  # noqa: E501
        """Issue a new access token with a restricted set of scopes  # noqa: E501

        Issue a new access token with a restricted set of scopes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login_presenter_action_issue_restricted_token(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LoginIssuerestrictedtokenBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.login_presenter_action_issue_restricted_token_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.login_presenter_action_issue_restricted_token_with_http_info(**kwargs)  # noqa: E501
            return data

    def login_presenter_action_issue_restricted_token_with_http_info(self, **kwargs):  # noqa: E501
        """Issue a new access token with a restricted set of scopes  # noqa: E501

        Issue a new access token with a restricted set of scopes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login_presenter_action_issue_restricted_token_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LoginIssuerestrictedtokenBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method login_presenter_action_issue_restricted_token" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/login/issue-restricted-token', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def login_presenter_action_refresh(self, **kwargs):  # noqa: E501
        """Refresh the access token of current user  # noqa: E501

        Refresh the access token of current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login_presenter_action_refresh(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.login_presenter_action_refresh_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.login_presenter_action_refresh_with_http_info(**kwargs)  # noqa: E501
            return data

    def login_presenter_action_refresh_with_http_info(self, **kwargs):  # noqa: E501
        """Refresh the access token of current user  # noqa: E501

        Refresh the access token of current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login_presenter_action_refresh_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method login_presenter_action_refresh" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/login/refresh', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def login_presenter_action_take_over(self, user_id, **kwargs):  # noqa: E501
        """Takeover user account with specified user identification.  # noqa: E501

        Takeover user account with specified user identification.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login_presenter_action_take_over(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.login_presenter_action_take_over_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.login_presenter_action_take_over_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def login_presenter_action_take_over_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Takeover user account with specified user identification.  # noqa: E501

        Takeover user account with specified user identification.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login_presenter_action_take_over_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method login_presenter_action_take_over" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `login_presenter_action_take_over`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/login/takeover/{userId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notifications_presenter_action_all(self, **kwargs):  # noqa: E501
        """Get all notifications in the system.  # noqa: E501

        Get all notifications in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notifications_presenter_action_all(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.notifications_presenter_action_all_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.notifications_presenter_action_all_with_http_info(**kwargs)  # noqa: E501
            return data

    def notifications_presenter_action_all_with_http_info(self, **kwargs):  # noqa: E501
        """Get all notifications in the system.  # noqa: E501

        Get all notifications in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notifications_presenter_action_all_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notifications_presenter_action_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/notifications/all', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notifications_presenter_action_create(self, **kwargs):  # noqa: E501
        """Create notification with given attributes  # noqa: E501

        Create notification with given attributes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notifications_presenter_action_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1NotificationsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.notifications_presenter_action_create_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.notifications_presenter_action_create_with_http_info(**kwargs)  # noqa: E501
            return data

    def notifications_presenter_action_create_with_http_info(self, **kwargs):  # noqa: E501
        """Create notification with given attributes  # noqa: E501

        Create notification with given attributes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notifications_presenter_action_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1NotificationsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notifications_presenter_action_create" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/notifications', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notifications_presenter_action_default(self, **kwargs):  # noqa: E501
        """Get all notifications which are currently active. If groupsIds is given returns only the ones from given groups (and their ancestors) and global ones (without group).  # noqa: E501

        Get all notifications which are currently active. If groupsIds is given returns only the ones from given groups (and their ancestors) and global ones (without group).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notifications_presenter_action_default(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[object] groups_ids: identifications of groups
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.notifications_presenter_action_default_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.notifications_presenter_action_default_with_http_info(**kwargs)  # noqa: E501
            return data

    def notifications_presenter_action_default_with_http_info(self, **kwargs):  # noqa: E501
        """Get all notifications which are currently active. If groupsIds is given returns only the ones from given groups (and their ancestors) and global ones (without group).  # noqa: E501

        Get all notifications which are currently active. If groupsIds is given returns only the ones from given groups (and their ancestors) and global ones (without group).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notifications_presenter_action_default_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[object] groups_ids: identifications of groups
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['groups_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notifications_presenter_action_default" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'groups_ids' in params:
            query_params.append(('groupsIds', params['groups_ids']))  # noqa: E501
            collection_formats['groupsIds'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/notifications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notifications_presenter_action_remove(self, id, **kwargs):  # noqa: E501
        """Delete a notification  # noqa: E501

        Delete a notification  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notifications_presenter_action_remove(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.notifications_presenter_action_remove_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.notifications_presenter_action_remove_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def notifications_presenter_action_remove_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a notification  # noqa: E501

        Delete a notification  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notifications_presenter_action_remove_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notifications_presenter_action_remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `notifications_presenter_action_remove`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/notifications/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notifications_presenter_action_update(self, id, **kwargs):  # noqa: E501
        """Update notification  # noqa: E501

        Update notification  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notifications_presenter_action_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param NotificationsIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.notifications_presenter_action_update_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.notifications_presenter_action_update_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def notifications_presenter_action_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update notification  # noqa: E501

        Update notification  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notifications_presenter_action_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param NotificationsIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notifications_presenter_action_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `notifications_presenter_action_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/notifications/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pipelines_presenter_action_create_pipeline(self, **kwargs):  # noqa: E501
        """Create a brand new pipeline.  # noqa: E501

        Create a brand new pipeline.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pipelines_presenter_action_create_pipeline(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1PipelinesBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pipelines_presenter_action_create_pipeline_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.pipelines_presenter_action_create_pipeline_with_http_info(**kwargs)  # noqa: E501
            return data

    def pipelines_presenter_action_create_pipeline_with_http_info(self, **kwargs):  # noqa: E501
        """Create a brand new pipeline.  # noqa: E501

        Create a brand new pipeline.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pipelines_presenter_action_create_pipeline_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1PipelinesBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pipelines_presenter_action_create_pipeline" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/pipelines', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pipelines_presenter_action_default(self, **kwargs):  # noqa: E501
        """Get a list of pipelines with an optional filter, ordering, and pagination pruning. The result conforms to pagination protocol.  # noqa: E501

        Get a list of pipelines with an optional filter, ordering, and pagination pruning. The result conforms to pagination protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pipelines_presenter_action_default(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Index of the first result.
        :param int limit: Maximal number of results returned.
        :param str order_by: Name of the column (column concept). The '!' prefix indicate descending order.
        :param list[object] filters: Named filters that prune the result.
        :param str locale: Currently set locale (used to augment order by clause if necessary),
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pipelines_presenter_action_default_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.pipelines_presenter_action_default_with_http_info(**kwargs)  # noqa: E501
            return data

    def pipelines_presenter_action_default_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of pipelines with an optional filter, ordering, and pagination pruning. The result conforms to pagination protocol.  # noqa: E501

        Get a list of pipelines with an optional filter, ordering, and pagination pruning. The result conforms to pagination protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pipelines_presenter_action_default_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Index of the first result.
        :param int limit: Maximal number of results returned.
        :param str order_by: Name of the column (column concept). The '!' prefix indicate descending order.
        :param list[object] filters: Named filters that prune the result.
        :param str locale: Currently set locale (used to augment order by clause if necessary),
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'order_by', 'filters', 'locale']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pipelines_presenter_action_default" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'filters' in params:
            query_params.append(('filters', params['filters']))  # noqa: E501
            collection_formats['filters'] = 'multi'  # noqa: E501
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/pipelines', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pipelines_presenter_action_delete_supplementary_file(self, id, file_id, **kwargs):  # noqa: E501
        """Delete supplementary pipeline file with given id  # noqa: E501

        Delete supplementary pipeline file with given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pipelines_presenter_action_delete_supplementary_file(id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identification of pipeline (required)
        :param str file_id: identification of file (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pipelines_presenter_action_delete_supplementary_file_with_http_info(id, file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.pipelines_presenter_action_delete_supplementary_file_with_http_info(id, file_id, **kwargs)  # noqa: E501
            return data

    def pipelines_presenter_action_delete_supplementary_file_with_http_info(self, id, file_id, **kwargs):  # noqa: E501
        """Delete supplementary pipeline file with given id  # noqa: E501

        Delete supplementary pipeline file with given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pipelines_presenter_action_delete_supplementary_file_with_http_info(id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identification of pipeline (required)
        :param str file_id: identification of file (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pipelines_presenter_action_delete_supplementary_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `pipelines_presenter_action_delete_supplementary_file`")  # noqa: E501
        # verify the required parameter 'file_id' is set
        if ('file_id' not in params or
                params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `pipelines_presenter_action_delete_supplementary_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'file_id' in params:
            path_params['fileId'] = params['file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/pipelines/{id}/supplementary-files/{fileId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pipelines_presenter_action_fork_pipeline(self, id, **kwargs):  # noqa: E501
        """Create a complete copy of given pipeline.  # noqa: E501

        Create a complete copy of given pipeline.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pipelines_presenter_action_fork_pipeline(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identification of pipeline to be copied (required)
        :param IdForkBody1 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pipelines_presenter_action_fork_pipeline_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.pipelines_presenter_action_fork_pipeline_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def pipelines_presenter_action_fork_pipeline_with_http_info(self, id, **kwargs):  # noqa: E501
        """Create a complete copy of given pipeline.  # noqa: E501

        Create a complete copy of given pipeline.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pipelines_presenter_action_fork_pipeline_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identification of pipeline to be copied (required)
        :param IdForkBody1 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pipelines_presenter_action_fork_pipeline" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `pipelines_presenter_action_fork_pipeline`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/pipelines/{id}/fork', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pipelines_presenter_action_get_default_boxes(self, **kwargs):  # noqa: E501
        """Get a list of default boxes which might be used in pipeline.  # noqa: E501

        Get a list of default boxes which might be used in pipeline.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pipelines_presenter_action_get_default_boxes(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pipelines_presenter_action_get_default_boxes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.pipelines_presenter_action_get_default_boxes_with_http_info(**kwargs)  # noqa: E501
            return data

    def pipelines_presenter_action_get_default_boxes_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of default boxes which might be used in pipeline.  # noqa: E501

        Get a list of default boxes which might be used in pipeline.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pipelines_presenter_action_get_default_boxes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pipelines_presenter_action_get_default_boxes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/pipelines/boxes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pipelines_presenter_action_get_pipeline(self, id, **kwargs):  # noqa: E501
        """Get pipeline based on given identification.  # noqa: E501

        Get pipeline based on given identification.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pipelines_presenter_action_get_pipeline(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the pipeline (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pipelines_presenter_action_get_pipeline_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.pipelines_presenter_action_get_pipeline_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def pipelines_presenter_action_get_pipeline_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get pipeline based on given identification.  # noqa: E501

        Get pipeline based on given identification.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pipelines_presenter_action_get_pipeline_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the pipeline (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pipelines_presenter_action_get_pipeline" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `pipelines_presenter_action_get_pipeline`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/pipelines/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pipelines_presenter_action_get_pipeline_exercises(self, id, **kwargs):  # noqa: E501
        """Get all exercises that use given pipeline. Only bare minimum is retrieved for each exercise (localized name and author).  # noqa: E501

        Get all exercises that use given pipeline. Only bare minimum is retrieved for each exercise (localized name and author).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pipelines_presenter_action_get_pipeline_exercises(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the pipeline (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pipelines_presenter_action_get_pipeline_exercises_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.pipelines_presenter_action_get_pipeline_exercises_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def pipelines_presenter_action_get_pipeline_exercises_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get all exercises that use given pipeline. Only bare minimum is retrieved for each exercise (localized name and author).  # noqa: E501

        Get all exercises that use given pipeline. Only bare minimum is retrieved for each exercise (localized name and author).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pipelines_presenter_action_get_pipeline_exercises_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the pipeline (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pipelines_presenter_action_get_pipeline_exercises" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `pipelines_presenter_action_get_pipeline_exercises`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/pipelines/{id}/exercises', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pipelines_presenter_action_get_supplementary_files(self, id, **kwargs):  # noqa: E501
        """Get list of all supplementary files for a pipeline  # noqa: E501

        Get list of all supplementary files for a pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pipelines_presenter_action_get_supplementary_files(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identification of pipeline (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pipelines_presenter_action_get_supplementary_files_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.pipelines_presenter_action_get_supplementary_files_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def pipelines_presenter_action_get_supplementary_files_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get list of all supplementary files for a pipeline  # noqa: E501

        Get list of all supplementary files for a pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pipelines_presenter_action_get_supplementary_files_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identification of pipeline (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pipelines_presenter_action_get_supplementary_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `pipelines_presenter_action_get_supplementary_files`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/pipelines/{id}/supplementary-files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pipelines_presenter_action_remove_pipeline(self, id, **kwargs):  # noqa: E501
        """Delete an pipeline  # noqa: E501

        Delete an pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pipelines_presenter_action_remove_pipeline(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the pipeline (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pipelines_presenter_action_remove_pipeline_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.pipelines_presenter_action_remove_pipeline_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def pipelines_presenter_action_remove_pipeline_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete an pipeline  # noqa: E501

        Delete an pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pipelines_presenter_action_remove_pipeline_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the pipeline (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pipelines_presenter_action_remove_pipeline" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `pipelines_presenter_action_remove_pipeline`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/pipelines/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pipelines_presenter_action_update_pipeline(self, id, **kwargs):  # noqa: E501
        """Update pipeline with given data.  # noqa: E501

        Update pipeline with given data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pipelines_presenter_action_update_pipeline(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the pipeline (required)
        :param PipelinesIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pipelines_presenter_action_update_pipeline_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.pipelines_presenter_action_update_pipeline_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def pipelines_presenter_action_update_pipeline_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update pipeline with given data.  # noqa: E501

        Update pipeline with given data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pipelines_presenter_action_update_pipeline_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the pipeline (required)
        :param PipelinesIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pipelines_presenter_action_update_pipeline" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `pipelines_presenter_action_update_pipeline`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/pipelines/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pipelines_presenter_action_update_runtime_environments(self, id, **kwargs):  # noqa: E501
        """Set runtime environments associated with given pipeline.  # noqa: E501

        Set runtime environments associated with given pipeline.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pipelines_presenter_action_update_runtime_environments(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the pipeline (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pipelines_presenter_action_update_runtime_environments_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.pipelines_presenter_action_update_runtime_environments_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def pipelines_presenter_action_update_runtime_environments_with_http_info(self, id, **kwargs):  # noqa: E501
        """Set runtime environments associated with given pipeline.  # noqa: E501

        Set runtime environments associated with given pipeline.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pipelines_presenter_action_update_runtime_environments_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the pipeline (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pipelines_presenter_action_update_runtime_environments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `pipelines_presenter_action_update_runtime_environments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/pipelines/{id}/runtime-environments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pipelines_presenter_action_upload_supplementary_files(self, id, **kwargs):  # noqa: E501
        """Associate supplementary files with a pipeline and upload them to remote file server  # noqa: E501

        Associate supplementary files with a pipeline and upload them to remote file server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pipelines_presenter_action_upload_supplementary_files(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identification of pipeline (required)
        :param IdSupplementaryfilesBody1 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pipelines_presenter_action_upload_supplementary_files_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.pipelines_presenter_action_upload_supplementary_files_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def pipelines_presenter_action_upload_supplementary_files_with_http_info(self, id, **kwargs):  # noqa: E501
        """Associate supplementary files with a pipeline and upload them to remote file server  # noqa: E501

        Associate supplementary files with a pipeline and upload them to remote file server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pipelines_presenter_action_upload_supplementary_files_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identification of pipeline (required)
        :param IdSupplementaryfilesBody1 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pipelines_presenter_action_upload_supplementary_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `pipelines_presenter_action_upload_supplementary_files`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/pipelines/{id}/supplementary-files', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pipelines_presenter_action_validate_pipeline(self, id, **kwargs):  # noqa: E501
        """Check if the version of the pipeline is up-to-date.  # noqa: E501

        Check if the version of the pipeline is up-to-date.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pipelines_presenter_action_validate_pipeline(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the pipeline (required)
        :param IdValidateBody2 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pipelines_presenter_action_validate_pipeline_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.pipelines_presenter_action_validate_pipeline_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def pipelines_presenter_action_validate_pipeline_with_http_info(self, id, **kwargs):  # noqa: E501
        """Check if the version of the pipeline is up-to-date.  # noqa: E501

        Check if the version of the pipeline is up-to-date.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pipelines_presenter_action_validate_pipeline_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the pipeline (required)
        :param IdValidateBody2 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pipelines_presenter_action_validate_pipeline" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `pipelines_presenter_action_validate_pipeline`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/pipelines/{id}/validate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def plagiarism_presenter_action_add_similarities(self, id, solution_id, **kwargs):  # noqa: E501
        """Appends one detected similarity record (similarities associated with one file and one other author) into a detected batch. This division was selected to make the appends relatively small and manageable.  # noqa: E501

        Appends one detected similarity record (similarities associated with one file and one other author) into a detected batch. This division was selected to make the appends relatively small and manageable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.plagiarism_presenter_action_add_similarities(id, solution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identification of the detection batch (required)
        :param str solution_id: (required)
        :param IdSolutionIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.plagiarism_presenter_action_add_similarities_with_http_info(id, solution_id, **kwargs)  # noqa: E501
        else:
            (data) = self.plagiarism_presenter_action_add_similarities_with_http_info(id, solution_id, **kwargs)  # noqa: E501
            return data

    def plagiarism_presenter_action_add_similarities_with_http_info(self, id, solution_id, **kwargs):  # noqa: E501
        """Appends one detected similarity record (similarities associated with one file and one other author) into a detected batch. This division was selected to make the appends relatively small and manageable.  # noqa: E501

        Appends one detected similarity record (similarities associated with one file and one other author) into a detected batch. This division was selected to make the appends relatively small and manageable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.plagiarism_presenter_action_add_similarities_with_http_info(id, solution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identification of the detection batch (required)
        :param str solution_id: (required)
        :param IdSolutionIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'solution_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method plagiarism_presenter_action_add_similarities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `plagiarism_presenter_action_add_similarities`")  # noqa: E501
        # verify the required parameter 'solution_id' is set
        if ('solution_id' not in params or
                params['solution_id'] is None):
            raise ValueError("Missing the required parameter `solution_id` when calling `plagiarism_presenter_action_add_similarities`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'solution_id' in params:
            path_params['solutionId'] = params['solution_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/plagiarism/{id}/{solutionId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def plagiarism_presenter_action_batch_detail(self, id, **kwargs):  # noqa: E501
        """Fetch a detail of a particular batch record.  # noqa: E501

        Fetch a detail of a particular batch record.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.plagiarism_presenter_action_batch_detail(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identification of the detection batch (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.plagiarism_presenter_action_batch_detail_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.plagiarism_presenter_action_batch_detail_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def plagiarism_presenter_action_batch_detail_with_http_info(self, id, **kwargs):  # noqa: E501
        """Fetch a detail of a particular batch record.  # noqa: E501

        Fetch a detail of a particular batch record.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.plagiarism_presenter_action_batch_detail_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identification of the detection batch (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method plagiarism_presenter_action_batch_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `plagiarism_presenter_action_batch_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/plagiarism/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def plagiarism_presenter_action_create_batch(self, **kwargs):  # noqa: E501
        """Create new detection batch record  # noqa: E501

        Create new detection batch record  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.plagiarism_presenter_action_create_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1PlagiarismBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.plagiarism_presenter_action_create_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.plagiarism_presenter_action_create_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def plagiarism_presenter_action_create_batch_with_http_info(self, **kwargs):  # noqa: E501
        """Create new detection batch record  # noqa: E501

        Create new detection batch record  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.plagiarism_presenter_action_create_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1PlagiarismBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method plagiarism_presenter_action_create_batch" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/plagiarism', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def plagiarism_presenter_action_get_similarities(self, id, solution_id, **kwargs):  # noqa: E501
        """Retrieve detected plagiarism records from a specific batch related to one solution. Returns a list of detected similarities entities (similar file records are nested within).  # noqa: E501

        Retrieve detected plagiarism records from a specific batch related to one solution. Returns a list of detected similarities entities (similar file records are nested within).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.plagiarism_presenter_action_get_similarities(id, solution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identification of the detection batch (required)
        :param str solution_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.plagiarism_presenter_action_get_similarities_with_http_info(id, solution_id, **kwargs)  # noqa: E501
        else:
            (data) = self.plagiarism_presenter_action_get_similarities_with_http_info(id, solution_id, **kwargs)  # noqa: E501
            return data

    def plagiarism_presenter_action_get_similarities_with_http_info(self, id, solution_id, **kwargs):  # noqa: E501
        """Retrieve detected plagiarism records from a specific batch related to one solution. Returns a list of detected similarities entities (similar file records are nested within).  # noqa: E501

        Retrieve detected plagiarism records from a specific batch related to one solution. Returns a list of detected similarities entities (similar file records are nested within).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.plagiarism_presenter_action_get_similarities_with_http_info(id, solution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identification of the detection batch (required)
        :param str solution_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'solution_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method plagiarism_presenter_action_get_similarities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `plagiarism_presenter_action_get_similarities`")  # noqa: E501
        # verify the required parameter 'solution_id' is set
        if ('solution_id' not in params or
                params['solution_id'] is None):
            raise ValueError("Missing the required parameter `solution_id` when calling `plagiarism_presenter_action_get_similarities`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'solution_id' in params:
            path_params['solutionId'] = params['solution_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/plagiarism/{id}/{solutionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def plagiarism_presenter_action_list_batches(self, **kwargs):  # noqa: E501
        """Get a list of all batches, optionally filtered by query params.  # noqa: E501

        Get a list of all batches, optionally filtered by query params.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.plagiarism_presenter_action_list_batches(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str detection_tool: Requests only batches created by a particular detection tool.
        :param str solution_id: Requests only batches where particular solution has detected similarities.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.plagiarism_presenter_action_list_batches_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.plagiarism_presenter_action_list_batches_with_http_info(**kwargs)  # noqa: E501
            return data

    def plagiarism_presenter_action_list_batches_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of all batches, optionally filtered by query params.  # noqa: E501

        Get a list of all batches, optionally filtered by query params.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.plagiarism_presenter_action_list_batches_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str detection_tool: Requests only batches created by a particular detection tool.
        :param str solution_id: Requests only batches where particular solution has detected similarities.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['detection_tool', 'solution_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method plagiarism_presenter_action_list_batches" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'detection_tool' in params:
            query_params.append(('detectionTool', params['detection_tool']))  # noqa: E501
        if 'solution_id' in params:
            query_params.append(('solutionId', params['solution_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/plagiarism', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def plagiarism_presenter_action_update_batch(self, id, **kwargs):  # noqa: E501
        """Update detection bath record. At the moment, only the uploadCompletedAt can be changed.  # noqa: E501

        Update detection bath record. At the moment, only the uploadCompletedAt can be changed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.plagiarism_presenter_action_update_batch(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identification of the detection batch (required)
        :param PlagiarismIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.plagiarism_presenter_action_update_batch_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.plagiarism_presenter_action_update_batch_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def plagiarism_presenter_action_update_batch_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update detection bath record. At the moment, only the uploadCompletedAt can be changed.  # noqa: E501

        Update detection bath record. At the moment, only the uploadCompletedAt can be changed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.plagiarism_presenter_action_update_batch_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identification of the detection batch (required)
        :param PlagiarismIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method plagiarism_presenter_action_update_batch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `plagiarism_presenter_action_update_batch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/plagiarism/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reference_exercise_solutions_presenter_action_delete_reference_solution(self, solution_id, **kwargs):  # noqa: E501
        """Delete reference solution with given identification.  # noqa: E501

        Delete reference solution with given identification.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_exercise_solutions_presenter_action_delete_reference_solution(solution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str solution_id: identifier of reference solution (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reference_exercise_solutions_presenter_action_delete_reference_solution_with_http_info(solution_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reference_exercise_solutions_presenter_action_delete_reference_solution_with_http_info(solution_id, **kwargs)  # noqa: E501
            return data

    def reference_exercise_solutions_presenter_action_delete_reference_solution_with_http_info(self, solution_id, **kwargs):  # noqa: E501
        """Delete reference solution with given identification.  # noqa: E501

        Delete reference solution with given identification.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_exercise_solutions_presenter_action_delete_reference_solution_with_http_info(solution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str solution_id: identifier of reference solution (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['solution_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reference_exercise_solutions_presenter_action_delete_reference_solution" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'solution_id' is set
        if ('solution_id' not in params or
                params['solution_id'] is None):
            raise ValueError("Missing the required parameter `solution_id` when calling `reference_exercise_solutions_presenter_action_delete_reference_solution`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'solution_id' in params:
            path_params['solutionId'] = params['solution_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/reference-solutions/{solutionId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reference_exercise_solutions_presenter_action_delete_submission(self, submission_id, **kwargs):  # noqa: E501
        """Remove reference solution evaluation (submission) permanently.  # noqa: E501

        Remove reference solution evaluation (submission) permanently.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_exercise_solutions_presenter_action_delete_submission(submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str submission_id: Identifier of the reference solution submission (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reference_exercise_solutions_presenter_action_delete_submission_with_http_info(submission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reference_exercise_solutions_presenter_action_delete_submission_with_http_info(submission_id, **kwargs)  # noqa: E501
            return data

    def reference_exercise_solutions_presenter_action_delete_submission_with_http_info(self, submission_id, **kwargs):  # noqa: E501
        """Remove reference solution evaluation (submission) permanently.  # noqa: E501

        Remove reference solution evaluation (submission) permanently.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_exercise_solutions_presenter_action_delete_submission_with_http_info(submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str submission_id: Identifier of the reference solution submission (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['submission_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reference_exercise_solutions_presenter_action_delete_submission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'submission_id' is set
        if ('submission_id' not in params or
                params['submission_id'] is None):
            raise ValueError("Missing the required parameter `submission_id` when calling `reference_exercise_solutions_presenter_action_delete_submission`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'submission_id' in params:
            path_params['submissionId'] = params['submission_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/reference-solutions/submission/{submissionId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reference_exercise_solutions_presenter_action_detail(self, solution_id, **kwargs):  # noqa: E501
        """Get details of a reference solution  # noqa: E501

        Get details of a reference solution  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_exercise_solutions_presenter_action_detail(solution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str solution_id: An identifier of the solution (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reference_exercise_solutions_presenter_action_detail_with_http_info(solution_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reference_exercise_solutions_presenter_action_detail_with_http_info(solution_id, **kwargs)  # noqa: E501
            return data

    def reference_exercise_solutions_presenter_action_detail_with_http_info(self, solution_id, **kwargs):  # noqa: E501
        """Get details of a reference solution  # noqa: E501

        Get details of a reference solution  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_exercise_solutions_presenter_action_detail_with_http_info(solution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str solution_id: An identifier of the solution (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['solution_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reference_exercise_solutions_presenter_action_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'solution_id' is set
        if ('solution_id' not in params or
                params['solution_id'] is None):
            raise ValueError("Missing the required parameter `solution_id` when calling `reference_exercise_solutions_presenter_action_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'solution_id' in params:
            path_params['solutionId'] = params['solution_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/reference-solutions/{solutionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reference_exercise_solutions_presenter_action_download_result_archive(self, submission_id, **kwargs):  # noqa: E501
        """Download result archive from backend for a reference solution evaluation  # noqa: E501

        Download result archive from backend for a reference solution evaluation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_exercise_solutions_presenter_action_download_result_archive(submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str submission_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reference_exercise_solutions_presenter_action_download_result_archive_with_http_info(submission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reference_exercise_solutions_presenter_action_download_result_archive_with_http_info(submission_id, **kwargs)  # noqa: E501
            return data

    def reference_exercise_solutions_presenter_action_download_result_archive_with_http_info(self, submission_id, **kwargs):  # noqa: E501
        """Download result archive from backend for a reference solution evaluation  # noqa: E501

        Download result archive from backend for a reference solution evaluation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_exercise_solutions_presenter_action_download_result_archive_with_http_info(submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str submission_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['submission_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reference_exercise_solutions_presenter_action_download_result_archive" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'submission_id' is set
        if ('submission_id' not in params or
                params['submission_id'] is None):
            raise ValueError("Missing the required parameter `submission_id` when calling `reference_exercise_solutions_presenter_action_download_result_archive`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'submission_id' in params:
            path_params['submissionId'] = params['submission_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/reference-solutions/submission/{submissionId}/download-result', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reference_exercise_solutions_presenter_action_download_solution_archive(self, solution_id, **kwargs):  # noqa: E501
        """Download archive containing all solution files for particular reference solution.  # noqa: E501

        Download archive containing all solution files for particular reference solution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_exercise_solutions_presenter_action_download_solution_archive(solution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str solution_id: of reference solution (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reference_exercise_solutions_presenter_action_download_solution_archive_with_http_info(solution_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reference_exercise_solutions_presenter_action_download_solution_archive_with_http_info(solution_id, **kwargs)  # noqa: E501
            return data

    def reference_exercise_solutions_presenter_action_download_solution_archive_with_http_info(self, solution_id, **kwargs):  # noqa: E501
        """Download archive containing all solution files for particular reference solution.  # noqa: E501

        Download archive containing all solution files for particular reference solution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_exercise_solutions_presenter_action_download_solution_archive_with_http_info(solution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str solution_id: of reference solution (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['solution_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reference_exercise_solutions_presenter_action_download_solution_archive" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'solution_id' is set
        if ('solution_id' not in params or
                params['solution_id'] is None):
            raise ValueError("Missing the required parameter `solution_id` when calling `reference_exercise_solutions_presenter_action_download_solution_archive`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'solution_id' in params:
            path_params['solutionId'] = params['solution_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/reference-solutions/{solutionId}/download-solution', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reference_exercise_solutions_presenter_action_evaluation_score_config(self, submission_id, **kwargs):  # noqa: E501
        """Get score configuration associated with given submission evaluation  # noqa: E501

        Get score configuration associated with given submission evaluation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_exercise_solutions_presenter_action_evaluation_score_config(submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str submission_id: identifier of the reference exercise submission (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reference_exercise_solutions_presenter_action_evaluation_score_config_with_http_info(submission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reference_exercise_solutions_presenter_action_evaluation_score_config_with_http_info(submission_id, **kwargs)  # noqa: E501
            return data

    def reference_exercise_solutions_presenter_action_evaluation_score_config_with_http_info(self, submission_id, **kwargs):  # noqa: E501
        """Get score configuration associated with given submission evaluation  # noqa: E501

        Get score configuration associated with given submission evaluation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_exercise_solutions_presenter_action_evaluation_score_config_with_http_info(submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str submission_id: identifier of the reference exercise submission (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['submission_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reference_exercise_solutions_presenter_action_evaluation_score_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'submission_id' is set
        if ('submission_id' not in params or
                params['submission_id'] is None):
            raise ValueError("Missing the required parameter `submission_id` when calling `reference_exercise_solutions_presenter_action_evaluation_score_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'submission_id' in params:
            path_params['submissionId'] = params['submission_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/reference-solutions/submission/{submissionId}/score-config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reference_exercise_solutions_presenter_action_files(self, id, **kwargs):  # noqa: E501
        """Get the list of submitted files of the solution.  # noqa: E501

        Get the list of submitted files of the solution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_exercise_solutions_presenter_action_files(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: of reference solution (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reference_exercise_solutions_presenter_action_files_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.reference_exercise_solutions_presenter_action_files_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def reference_exercise_solutions_presenter_action_files_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the list of submitted files of the solution.  # noqa: E501

        Get the list of submitted files of the solution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_exercise_solutions_presenter_action_files_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: of reference solution (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reference_exercise_solutions_presenter_action_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `reference_exercise_solutions_presenter_action_files`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/reference-solutions/{id}/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reference_exercise_solutions_presenter_action_pre_submit(self, exercise_id, **kwargs):  # noqa: E501
        """Pre submit action which will, based on given files, detect possible runtime environments for the exercise. Also it can be further used for entry points and other important things that should be provided by user during submit.  # noqa: E501

        Pre submit action which will, based on given files, detect possible runtime environments for the exercise. Also it can be further used for entry points and other important things that should be provided by user during submit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_exercise_solutions_presenter_action_pre_submit(exercise_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exercise_id: identifier of exercise (required)
        :param ExerciseIdPresubmitBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reference_exercise_solutions_presenter_action_pre_submit_with_http_info(exercise_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reference_exercise_solutions_presenter_action_pre_submit_with_http_info(exercise_id, **kwargs)  # noqa: E501
            return data

    def reference_exercise_solutions_presenter_action_pre_submit_with_http_info(self, exercise_id, **kwargs):  # noqa: E501
        """Pre submit action which will, based on given files, detect possible runtime environments for the exercise. Also it can be further used for entry points and other important things that should be provided by user during submit.  # noqa: E501

        Pre submit action which will, based on given files, detect possible runtime environments for the exercise. Also it can be further used for entry points and other important things that should be provided by user during submit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_exercise_solutions_presenter_action_pre_submit_with_http_info(exercise_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exercise_id: identifier of exercise (required)
        :param ExerciseIdPresubmitBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exercise_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reference_exercise_solutions_presenter_action_pre_submit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exercise_id' is set
        if ('exercise_id' not in params or
                params['exercise_id'] is None):
            raise ValueError("Missing the required parameter `exercise_id` when calling `reference_exercise_solutions_presenter_action_pre_submit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exercise_id' in params:
            path_params['exerciseId'] = params['exercise_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/reference-solutions/exercise/{exerciseId}/pre-submit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reference_exercise_solutions_presenter_action_resubmit(self, id, **kwargs):  # noqa: E501
        """Evaluate a single reference exercise solution for all configured hardware groups  # noqa: E501

        Evaluate a single reference exercise solution for all configured hardware groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_exercise_solutions_presenter_action_resubmit(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the reference solution (required)
        :param IdResubmitBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reference_exercise_solutions_presenter_action_resubmit_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.reference_exercise_solutions_presenter_action_resubmit_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def reference_exercise_solutions_presenter_action_resubmit_with_http_info(self, id, **kwargs):  # noqa: E501
        """Evaluate a single reference exercise solution for all configured hardware groups  # noqa: E501

        Evaluate a single reference exercise solution for all configured hardware groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_exercise_solutions_presenter_action_resubmit_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the reference solution (required)
        :param IdResubmitBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reference_exercise_solutions_presenter_action_resubmit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `reference_exercise_solutions_presenter_action_resubmit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/reference-solutions/{id}/resubmit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reference_exercise_solutions_presenter_action_resubmit_all(self, exercise_id, **kwargs):  # noqa: E501
        """Evaluate all reference solutions for an exercise (and for all configured hardware groups).  # noqa: E501

        Evaluate all reference solutions for an exercise (and for all configured hardware groups).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_exercise_solutions_presenter_action_resubmit_all(exercise_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exercise_id: Identifier of the exercise (required)
        :param ExerciseIdResubmitallBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reference_exercise_solutions_presenter_action_resubmit_all_with_http_info(exercise_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reference_exercise_solutions_presenter_action_resubmit_all_with_http_info(exercise_id, **kwargs)  # noqa: E501
            return data

    def reference_exercise_solutions_presenter_action_resubmit_all_with_http_info(self, exercise_id, **kwargs):  # noqa: E501
        """Evaluate all reference solutions for an exercise (and for all configured hardware groups).  # noqa: E501

        Evaluate all reference solutions for an exercise (and for all configured hardware groups).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_exercise_solutions_presenter_action_resubmit_all_with_http_info(exercise_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exercise_id: Identifier of the exercise (required)
        :param ExerciseIdResubmitallBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exercise_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reference_exercise_solutions_presenter_action_resubmit_all" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exercise_id' is set
        if ('exercise_id' not in params or
                params['exercise_id'] is None):
            raise ValueError("Missing the required parameter `exercise_id` when calling `reference_exercise_solutions_presenter_action_resubmit_all`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exercise_id' in params:
            path_params['exerciseId'] = params['exercise_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/reference-solutions/exercise/{exerciseId}/resubmit-all', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reference_exercise_solutions_presenter_action_set_visibility(self, solution_id, **kwargs):  # noqa: E501
        """Set visibility of given reference solution.  # noqa: E501

        Set visibility of given reference solution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_exercise_solutions_presenter_action_set_visibility(solution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str solution_id: of reference solution (required)
        :param SolutionIdVisibilityBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reference_exercise_solutions_presenter_action_set_visibility_with_http_info(solution_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reference_exercise_solutions_presenter_action_set_visibility_with_http_info(solution_id, **kwargs)  # noqa: E501
            return data

    def reference_exercise_solutions_presenter_action_set_visibility_with_http_info(self, solution_id, **kwargs):  # noqa: E501
        """Set visibility of given reference solution.  # noqa: E501

        Set visibility of given reference solution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_exercise_solutions_presenter_action_set_visibility_with_http_info(solution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str solution_id: of reference solution (required)
        :param SolutionIdVisibilityBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['solution_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reference_exercise_solutions_presenter_action_set_visibility" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'solution_id' is set
        if ('solution_id' not in params or
                params['solution_id'] is None):
            raise ValueError("Missing the required parameter `solution_id` when calling `reference_exercise_solutions_presenter_action_set_visibility`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'solution_id' in params:
            path_params['solutionId'] = params['solution_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/reference-solutions/{solutionId}/visibility', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reference_exercise_solutions_presenter_action_solutions(self, exercise_id, **kwargs):  # noqa: E501
        """Get reference solutions for an exercise  # noqa: E501

        Get reference solutions for an exercise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_exercise_solutions_presenter_action_solutions(exercise_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exercise_id: Identifier of the exercise (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reference_exercise_solutions_presenter_action_solutions_with_http_info(exercise_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reference_exercise_solutions_presenter_action_solutions_with_http_info(exercise_id, **kwargs)  # noqa: E501
            return data

    def reference_exercise_solutions_presenter_action_solutions_with_http_info(self, exercise_id, **kwargs):  # noqa: E501
        """Get reference solutions for an exercise  # noqa: E501

        Get reference solutions for an exercise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_exercise_solutions_presenter_action_solutions_with_http_info(exercise_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exercise_id: Identifier of the exercise (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exercise_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reference_exercise_solutions_presenter_action_solutions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exercise_id' is set
        if ('exercise_id' not in params or
                params['exercise_id'] is None):
            raise ValueError("Missing the required parameter `exercise_id` when calling `reference_exercise_solutions_presenter_action_solutions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exercise_id' in params:
            path_params['exerciseId'] = params['exercise_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/reference-solutions/exercise/{exerciseId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reference_exercise_solutions_presenter_action_submission(self, submission_id, **kwargs):  # noqa: E501
        """Get reference solution evaluation (i.e., submission) for an exercise solution.  # noqa: E501

        Get reference solution evaluation (i.e., submission) for an exercise solution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_exercise_solutions_presenter_action_submission(submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str submission_id: identifier of the reference exercise submission (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reference_exercise_solutions_presenter_action_submission_with_http_info(submission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reference_exercise_solutions_presenter_action_submission_with_http_info(submission_id, **kwargs)  # noqa: E501
            return data

    def reference_exercise_solutions_presenter_action_submission_with_http_info(self, submission_id, **kwargs):  # noqa: E501
        """Get reference solution evaluation (i.e., submission) for an exercise solution.  # noqa: E501

        Get reference solution evaluation (i.e., submission) for an exercise solution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_exercise_solutions_presenter_action_submission_with_http_info(submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str submission_id: identifier of the reference exercise submission (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['submission_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reference_exercise_solutions_presenter_action_submission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'submission_id' is set
        if ('submission_id' not in params or
                params['submission_id'] is None):
            raise ValueError("Missing the required parameter `submission_id` when calling `reference_exercise_solutions_presenter_action_submission`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'submission_id' in params:
            path_params['submissionId'] = params['submission_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/reference-solutions/submission/{submissionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reference_exercise_solutions_presenter_action_submissions(self, solution_id, **kwargs):  # noqa: E501
        """Get a list of submissions for given reference solution.  # noqa: E501

        Get a list of submissions for given reference solution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_exercise_solutions_presenter_action_submissions(solution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str solution_id: identifier of the reference exercise solution (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reference_exercise_solutions_presenter_action_submissions_with_http_info(solution_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reference_exercise_solutions_presenter_action_submissions_with_http_info(solution_id, **kwargs)  # noqa: E501
            return data

    def reference_exercise_solutions_presenter_action_submissions_with_http_info(self, solution_id, **kwargs):  # noqa: E501
        """Get a list of submissions for given reference solution.  # noqa: E501

        Get a list of submissions for given reference solution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_exercise_solutions_presenter_action_submissions_with_http_info(solution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str solution_id: identifier of the reference exercise solution (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['solution_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reference_exercise_solutions_presenter_action_submissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'solution_id' is set
        if ('solution_id' not in params or
                params['solution_id'] is None):
            raise ValueError("Missing the required parameter `solution_id` when calling `reference_exercise_solutions_presenter_action_submissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'solution_id' in params:
            path_params['solutionId'] = params['solution_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/reference-solutions/{solutionId}/submissions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reference_exercise_solutions_presenter_action_submit(self, exercise_id, **kwargs):  # noqa: E501
        """Add new reference solution to an exercise  # noqa: E501

        Add new reference solution to an exercise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_exercise_solutions_presenter_action_submit(exercise_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exercise_id: Identifier of the exercise (required)
        :param ExerciseIdSubmitBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reference_exercise_solutions_presenter_action_submit_with_http_info(exercise_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reference_exercise_solutions_presenter_action_submit_with_http_info(exercise_id, **kwargs)  # noqa: E501
            return data

    def reference_exercise_solutions_presenter_action_submit_with_http_info(self, exercise_id, **kwargs):  # noqa: E501
        """Add new reference solution to an exercise  # noqa: E501

        Add new reference solution to an exercise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_exercise_solutions_presenter_action_submit_with_http_info(exercise_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exercise_id: Identifier of the exercise (required)
        :param ExerciseIdSubmitBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exercise_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reference_exercise_solutions_presenter_action_submit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exercise_id' is set
        if ('exercise_id' not in params or
                params['exercise_id'] is None):
            raise ValueError("Missing the required parameter `exercise_id` when calling `reference_exercise_solutions_presenter_action_submit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exercise_id' in params:
            path_params['exerciseId'] = params['exercise_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/reference-solutions/exercise/{exerciseId}/submit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reference_exercise_solutions_presenter_action_update(self, solution_id, **kwargs):  # noqa: E501
        """Update details about the ref. solution (note, etc...)  # noqa: E501

        Update details about the ref. solution (note, etc...)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_exercise_solutions_presenter_action_update(solution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str solution_id: Identifier of the solution (required)
        :param ReferencesolutionsSolutionIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reference_exercise_solutions_presenter_action_update_with_http_info(solution_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reference_exercise_solutions_presenter_action_update_with_http_info(solution_id, **kwargs)  # noqa: E501
            return data

    def reference_exercise_solutions_presenter_action_update_with_http_info(self, solution_id, **kwargs):  # noqa: E501
        """Update details about the ref. solution (note, etc...)  # noqa: E501

        Update details about the ref. solution (note, etc...)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reference_exercise_solutions_presenter_action_update_with_http_info(solution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str solution_id: Identifier of the solution (required)
        :param ReferencesolutionsSolutionIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['solution_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reference_exercise_solutions_presenter_action_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'solution_id' is set
        if ('solution_id' not in params or
                params['solution_id'] is None):
            raise ValueError("Missing the required parameter `solution_id` when calling `reference_exercise_solutions_presenter_action_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'solution_id' in params:
            path_params['solutionId'] = params['solution_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/reference-solutions/{solutionId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def registration_presenter_action_accept_invitation(self, **kwargs):  # noqa: E501
        """Accept invitation and create corresponding user account.  # noqa: E501

        Accept invitation and create corresponding user account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.registration_presenter_action_accept_invitation(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UsersAcceptinvitationBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.registration_presenter_action_accept_invitation_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.registration_presenter_action_accept_invitation_with_http_info(**kwargs)  # noqa: E501
            return data

    def registration_presenter_action_accept_invitation_with_http_info(self, **kwargs):  # noqa: E501
        """Accept invitation and create corresponding user account.  # noqa: E501

        Accept invitation and create corresponding user account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.registration_presenter_action_accept_invitation_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UsersAcceptinvitationBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method registration_presenter_action_accept_invitation" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/accept-invitation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def registration_presenter_action_create_account(self, **kwargs):  # noqa: E501
        """Create a user account  # noqa: E501

        Create a user account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.registration_presenter_action_create_account(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1UsersBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.registration_presenter_action_create_account_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.registration_presenter_action_create_account_with_http_info(**kwargs)  # noqa: E501
            return data

    def registration_presenter_action_create_account_with_http_info(self, **kwargs):  # noqa: E501
        """Create a user account  # noqa: E501

        Create a user account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.registration_presenter_action_create_account_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1UsersBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method registration_presenter_action_create_account" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def registration_presenter_action_create_invitation(self, **kwargs):  # noqa: E501
        """Create an invitation for a user and send it over via email  # noqa: E501

        Create an invitation for a user and send it over via email  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.registration_presenter_action_create_invitation(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UsersInviteBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.registration_presenter_action_create_invitation_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.registration_presenter_action_create_invitation_with_http_info(**kwargs)  # noqa: E501
            return data

    def registration_presenter_action_create_invitation_with_http_info(self, **kwargs):  # noqa: E501
        """Create an invitation for a user and send it over via email  # noqa: E501

        Create an invitation for a user and send it over via email  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.registration_presenter_action_create_invitation_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UsersInviteBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method registration_presenter_action_create_invitation" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/invite', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def registration_presenter_action_validate_registration_data(self, **kwargs):  # noqa: E501
        """Check if the registered E-mail isn't already used and if the password is strong enough  # noqa: E501

        Check if the registered E-mail isn't already used and if the password is strong enough  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.registration_presenter_action_validate_registration_data(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UsersValidateregistrationdataBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.registration_presenter_action_validate_registration_data_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.registration_presenter_action_validate_registration_data_with_http_info(**kwargs)  # noqa: E501
            return data

    def registration_presenter_action_validate_registration_data_with_http_info(self, **kwargs):  # noqa: E501
        """Check if the registered E-mail isn't already used and if the password is strong enough  # noqa: E501

        Check if the registered E-mail isn't already used and if the password is strong enough  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.registration_presenter_action_validate_registration_data_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UsersValidateregistrationdataBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method registration_presenter_action_validate_registration_data" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/validate-registration-data', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def runtime_environments_presenter_action_default(self, **kwargs):  # noqa: E501
        """Get a list of all runtime environments  # noqa: E501

        Get a list of all runtime environments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.runtime_environments_presenter_action_default(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.runtime_environments_presenter_action_default_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.runtime_environments_presenter_action_default_with_http_info(**kwargs)  # noqa: E501
            return data

    def runtime_environments_presenter_action_default_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of all runtime environments  # noqa: E501

        Get a list of all runtime environments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.runtime_environments_presenter_action_default_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method runtime_environments_presenter_action_default" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/runtime-environments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def security_presenter_action_check(self, **kwargs):  # noqa: E501
        """security_presenter_action_check  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_presenter_action_check(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SecurityCheckBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.security_presenter_action_check_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.security_presenter_action_check_with_http_info(**kwargs)  # noqa: E501
            return data

    def security_presenter_action_check_with_http_info(self, **kwargs):  # noqa: E501
        """security_presenter_action_check  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_presenter_action_check_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SecurityCheckBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_presenter_action_check" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/security/check', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shadow_assignments_presenter_action_create(self, **kwargs):  # noqa: E501
        """Create new shadow assignment in given group.  # noqa: E501

        Create new shadow assignment in given group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shadow_assignments_presenter_action_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1ShadowassignmentsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shadow_assignments_presenter_action_create_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.shadow_assignments_presenter_action_create_with_http_info(**kwargs)  # noqa: E501
            return data

    def shadow_assignments_presenter_action_create_with_http_info(self, **kwargs):  # noqa: E501
        """Create new shadow assignment in given group.  # noqa: E501

        Create new shadow assignment in given group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shadow_assignments_presenter_action_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1ShadowassignmentsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shadow_assignments_presenter_action_create" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/shadow-assignments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shadow_assignments_presenter_action_create_points(self, id, **kwargs):  # noqa: E501
        """Create new points for shadow assignment and user.  # noqa: E501

        Create new points for shadow assignment and user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shadow_assignments_presenter_action_create_points(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the shadow assignment (required)
        :param IdCreatepointsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shadow_assignments_presenter_action_create_points_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.shadow_assignments_presenter_action_create_points_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def shadow_assignments_presenter_action_create_points_with_http_info(self, id, **kwargs):  # noqa: E501
        """Create new points for shadow assignment and user.  # noqa: E501

        Create new points for shadow assignment and user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shadow_assignments_presenter_action_create_points_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the shadow assignment (required)
        :param IdCreatepointsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shadow_assignments_presenter_action_create_points" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `shadow_assignments_presenter_action_create_points`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/shadow-assignments/{id}/create-points', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shadow_assignments_presenter_action_detail(self, id, **kwargs):  # noqa: E501
        """Get details of a shadow assignment  # noqa: E501

        Get details of a shadow assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shadow_assignments_presenter_action_detail(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the assignment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shadow_assignments_presenter_action_detail_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.shadow_assignments_presenter_action_detail_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def shadow_assignments_presenter_action_detail_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get details of a shadow assignment  # noqa: E501

        Get details of a shadow assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shadow_assignments_presenter_action_detail_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the assignment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shadow_assignments_presenter_action_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `shadow_assignments_presenter_action_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/shadow-assignments/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shadow_assignments_presenter_action_remove(self, id, **kwargs):  # noqa: E501
        """Delete shadow assignment  # noqa: E501

        Delete shadow assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shadow_assignments_presenter_action_remove(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the assignment to be removed (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shadow_assignments_presenter_action_remove_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.shadow_assignments_presenter_action_remove_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def shadow_assignments_presenter_action_remove_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete shadow assignment  # noqa: E501

        Delete shadow assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shadow_assignments_presenter_action_remove_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the assignment to be removed (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shadow_assignments_presenter_action_remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `shadow_assignments_presenter_action_remove`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/shadow-assignments/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shadow_assignments_presenter_action_remove_points(self, points_id, **kwargs):  # noqa: E501
        """Remove points of shadow assignment.  # noqa: E501

        Remove points of shadow assignment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shadow_assignments_presenter_action_remove_points(points_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str points_id: Identifier of the shadow assignment points (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shadow_assignments_presenter_action_remove_points_with_http_info(points_id, **kwargs)  # noqa: E501
        else:
            (data) = self.shadow_assignments_presenter_action_remove_points_with_http_info(points_id, **kwargs)  # noqa: E501
            return data

    def shadow_assignments_presenter_action_remove_points_with_http_info(self, points_id, **kwargs):  # noqa: E501
        """Remove points of shadow assignment.  # noqa: E501

        Remove points of shadow assignment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shadow_assignments_presenter_action_remove_points_with_http_info(points_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str points_id: Identifier of the shadow assignment points (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['points_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shadow_assignments_presenter_action_remove_points" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'points_id' is set
        if ('points_id' not in params or
                params['points_id'] is None):
            raise ValueError("Missing the required parameter `points_id` when calling `shadow_assignments_presenter_action_remove_points`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'points_id' in params:
            path_params['pointsId'] = params['points_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/shadow-assignments/points/{pointsId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shadow_assignments_presenter_action_update_detail(self, id, **kwargs):  # noqa: E501
        """Update details of an shadow assignment  # noqa: E501

        Update details of an shadow assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shadow_assignments_presenter_action_update_detail(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the updated assignment (required)
        :param ShadowassignmentsIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shadow_assignments_presenter_action_update_detail_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.shadow_assignments_presenter_action_update_detail_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def shadow_assignments_presenter_action_update_detail_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update details of an shadow assignment  # noqa: E501

        Update details of an shadow assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shadow_assignments_presenter_action_update_detail_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the updated assignment (required)
        :param ShadowassignmentsIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shadow_assignments_presenter_action_update_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `shadow_assignments_presenter_action_update_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/shadow-assignments/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shadow_assignments_presenter_action_update_points(self, points_id, **kwargs):  # noqa: E501
        """Update detail of shadow assignment points.  # noqa: E501

        Update detail of shadow assignment points.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shadow_assignments_presenter_action_update_points(points_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str points_id: Identifier of the shadow assignment points (required)
        :param PointsPointsIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shadow_assignments_presenter_action_update_points_with_http_info(points_id, **kwargs)  # noqa: E501
        else:
            (data) = self.shadow_assignments_presenter_action_update_points_with_http_info(points_id, **kwargs)  # noqa: E501
            return data

    def shadow_assignments_presenter_action_update_points_with_http_info(self, points_id, **kwargs):  # noqa: E501
        """Update detail of shadow assignment points.  # noqa: E501

        Update detail of shadow assignment points.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shadow_assignments_presenter_action_update_points_with_http_info(points_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str points_id: Identifier of the shadow assignment points (required)
        :param PointsPointsIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['points_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shadow_assignments_presenter_action_update_points" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'points_id' is set
        if ('points_id' not in params or
                params['points_id'] is None):
            raise ValueError("Missing the required parameter `points_id` when calling `shadow_assignments_presenter_action_update_points`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'points_id' in params:
            path_params['pointsId'] = params['points_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/shadow-assignments/points/{pointsId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shadow_assignments_presenter_action_validate(self, id, **kwargs):  # noqa: E501
        """Check if the version of the shadow assignment is up-to-date.  # noqa: E501

        Check if the version of the shadow assignment is up-to-date.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shadow_assignments_presenter_action_validate(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the shadow assignment (required)
        :param IdValidateBody3 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shadow_assignments_presenter_action_validate_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.shadow_assignments_presenter_action_validate_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def shadow_assignments_presenter_action_validate_with_http_info(self, id, **kwargs):  # noqa: E501
        """Check if the version of the shadow assignment is up-to-date.  # noqa: E501

        Check if the version of the shadow assignment is up-to-date.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shadow_assignments_presenter_action_validate_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the shadow assignment (required)
        :param IdValidateBody3 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shadow_assignments_presenter_action_validate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `shadow_assignments_presenter_action_validate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/shadow-assignments/{id}/validate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sis_presenter_action_bind_group(self, course_id, **kwargs):  # noqa: E501
        """Bind an existing local group to a SIS group  # noqa: E501

        Bind an existing local group to a SIS group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sis_presenter_action_bind_group(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: (required)
        :param CourseIdBindBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sis_presenter_action_bind_group_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sis_presenter_action_bind_group_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def sis_presenter_action_bind_group_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Bind an existing local group to a SIS group  # noqa: E501

        Bind an existing local group to a SIS group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sis_presenter_action_bind_group_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: (required)
        :param CourseIdBindBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sis_presenter_action_bind_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if ('course_id' not in params or
                params['course_id'] is None):
            raise ValueError("Missing the required parameter `course_id` when calling `sis_presenter_action_bind_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['courseId'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/extensions/sis/remote-courses/{courseId}/bind', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sis_presenter_action_create_group(self, course_id, **kwargs):  # noqa: E501
        """Create a new group based on a SIS group  # noqa: E501

        Create a new group based on a SIS group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sis_presenter_action_create_group(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: (required)
        :param CourseIdCreateBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sis_presenter_action_create_group_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sis_presenter_action_create_group_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def sis_presenter_action_create_group_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Create a new group based on a SIS group  # noqa: E501

        Create a new group based on a SIS group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sis_presenter_action_create_group_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: (required)
        :param CourseIdCreateBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sis_presenter_action_create_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if ('course_id' not in params or
                params['course_id'] is None):
            raise ValueError("Missing the required parameter `course_id` when calling `sis_presenter_action_create_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['courseId'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/extensions/sis/remote-courses/{courseId}/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sis_presenter_action_delete_term(self, id, **kwargs):  # noqa: E501
        """Delete a term  # noqa: E501

        Delete a term  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sis_presenter_action_delete_term(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sis_presenter_action_delete_term_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.sis_presenter_action_delete_term_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def sis_presenter_action_delete_term_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a term  # noqa: E501

        Delete a term  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sis_presenter_action_delete_term_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sis_presenter_action_delete_term" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `sis_presenter_action_delete_term`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/extensions/sis/terms/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sis_presenter_action_edit_term(self, id, **kwargs):  # noqa: E501
        """Set details of a term  # noqa: E501

        Set details of a term  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sis_presenter_action_edit_term(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param TermsIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sis_presenter_action_edit_term_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.sis_presenter_action_edit_term_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def sis_presenter_action_edit_term_with_http_info(self, id, **kwargs):  # noqa: E501
        """Set details of a term  # noqa: E501

        Set details of a term  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sis_presenter_action_edit_term_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param TermsIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sis_presenter_action_edit_term" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `sis_presenter_action_edit_term`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/extensions/sis/terms/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sis_presenter_action_get_terms(self, **kwargs):  # noqa: E501
        """Get a list of all registered SIS terms  # noqa: E501

        Get a list of all registered SIS terms  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sis_presenter_action_get_terms(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sis_presenter_action_get_terms_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sis_presenter_action_get_terms_with_http_info(**kwargs)  # noqa: E501
            return data

    def sis_presenter_action_get_terms_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of all registered SIS terms  # noqa: E501

        Get a list of all registered SIS terms  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sis_presenter_action_get_terms_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sis_presenter_action_get_terms" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/extensions/sis/terms/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sis_presenter_action_possible_parents(self, course_id, **kwargs):  # noqa: E501
        """Find groups that can be chosen as parents of a group created from given SIS group by current user  # noqa: E501

        Find groups that can be chosen as parents of a group created from given SIS group by current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sis_presenter_action_possible_parents(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sis_presenter_action_possible_parents_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sis_presenter_action_possible_parents_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def sis_presenter_action_possible_parents_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Find groups that can be chosen as parents of a group created from given SIS group by current user  # noqa: E501

        Find groups that can be chosen as parents of a group created from given SIS group by current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sis_presenter_action_possible_parents_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sis_presenter_action_possible_parents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if ('course_id' not in params or
                params['course_id'] is None):
            raise ValueError("Missing the required parameter `course_id` when calling `sis_presenter_action_possible_parents`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['courseId'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/extensions/sis/remote-courses/{courseId}/possible-parents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sis_presenter_action_register_term(self, **kwargs):  # noqa: E501
        """Register a new term  # noqa: E501

        Register a new term  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sis_presenter_action_register_term(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SisTermsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sis_presenter_action_register_term_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sis_presenter_action_register_term_with_http_info(**kwargs)  # noqa: E501
            return data

    def sis_presenter_action_register_term_with_http_info(self, **kwargs):  # noqa: E501
        """Register a new term  # noqa: E501

        Register a new term  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sis_presenter_action_register_term_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SisTermsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sis_presenter_action_register_term" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/extensions/sis/terms/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sis_presenter_action_status(self, **kwargs):  # noqa: E501
        """sis_presenter_action_status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sis_presenter_action_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sis_presenter_action_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sis_presenter_action_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def sis_presenter_action_status_with_http_info(self, **kwargs):  # noqa: E501
        """sis_presenter_action_status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sis_presenter_action_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sis_presenter_action_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/extensions/sis/status/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sis_presenter_action_subscribed_courses(self, user_id, year, term, **kwargs):  # noqa: E501
        """Get all courses subscirbed by a student and corresponding ReCodEx groups. Organizational and archived groups are filtered out from the result. Each course holds bound group IDs and group objects are returned in a separate array. Whole ancestral closure of groups is returned, so the webapp may properly assemble hiarichial group names.  # noqa: E501

        Get all courses subscirbed by a student and corresponding ReCodEx groups. Organizational and archived groups are filtered out from the result. Each course holds bound group IDs and group objects are returned in a separate array. Whole ancestral closure of groups is returned, so the webapp may properly assemble hiarichial group names.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sis_presenter_action_subscribed_courses(user_id, year, term, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: (required)
        :param int year: (required)
        :param int term: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sis_presenter_action_subscribed_courses_with_http_info(user_id, year, term, **kwargs)  # noqa: E501
        else:
            (data) = self.sis_presenter_action_subscribed_courses_with_http_info(user_id, year, term, **kwargs)  # noqa: E501
            return data

    def sis_presenter_action_subscribed_courses_with_http_info(self, user_id, year, term, **kwargs):  # noqa: E501
        """Get all courses subscirbed by a student and corresponding ReCodEx groups. Organizational and archived groups are filtered out from the result. Each course holds bound group IDs and group objects are returned in a separate array. Whole ancestral closure of groups is returned, so the webapp may properly assemble hiarichial group names.  # noqa: E501

        Get all courses subscirbed by a student and corresponding ReCodEx groups. Organizational and archived groups are filtered out from the result. Each course holds bound group IDs and group objects are returned in a separate array. Whole ancestral closure of groups is returned, so the webapp may properly assemble hiarichial group names.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sis_presenter_action_subscribed_courses_with_http_info(user_id, year, term, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: (required)
        :param int year: (required)
        :param int term: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'year', 'term']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sis_presenter_action_subscribed_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `sis_presenter_action_subscribed_courses`")  # noqa: E501
        # verify the required parameter 'year' is set
        if ('year' not in params or
                params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `sis_presenter_action_subscribed_courses`")  # noqa: E501
        # verify the required parameter 'term' is set
        if ('term' not in params or
                params['term'] is None):
            raise ValueError("Missing the required parameter `term` when calling `sis_presenter_action_subscribed_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501
        if 'year' in params:
            path_params['year'] = params['year']  # noqa: E501
        if 'term' in params:
            path_params['term'] = params['term']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/extensions/sis/users/{userId}/subscribed-groups/{year}/{term}/as-student', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sis_presenter_action_supervised_courses(self, user_id, year, term, **kwargs):  # noqa: E501
        """Get supervised SIS courses and corresponding ReCodEx groups. Each course holds bound group IDs and group objects are returned in a separate array. Whole ancestral closure of groups is returned, so the webapp may properly assemble hiarichial group names.  # noqa: E501

        Get supervised SIS courses and corresponding ReCodEx groups. Each course holds bound group IDs and group objects are returned in a separate array. Whole ancestral closure of groups is returned, so the webapp may properly assemble hiarichial group names.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sis_presenter_action_supervised_courses(user_id, year, term, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: (required)
        :param int year: (required)
        :param int term: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sis_presenter_action_supervised_courses_with_http_info(user_id, year, term, **kwargs)  # noqa: E501
        else:
            (data) = self.sis_presenter_action_supervised_courses_with_http_info(user_id, year, term, **kwargs)  # noqa: E501
            return data

    def sis_presenter_action_supervised_courses_with_http_info(self, user_id, year, term, **kwargs):  # noqa: E501
        """Get supervised SIS courses and corresponding ReCodEx groups. Each course holds bound group IDs and group objects are returned in a separate array. Whole ancestral closure of groups is returned, so the webapp may properly assemble hiarichial group names.  # noqa: E501

        Get supervised SIS courses and corresponding ReCodEx groups. Each course holds bound group IDs and group objects are returned in a separate array. Whole ancestral closure of groups is returned, so the webapp may properly assemble hiarichial group names.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sis_presenter_action_supervised_courses_with_http_info(user_id, year, term, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: (required)
        :param int year: (required)
        :param int term: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'year', 'term']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sis_presenter_action_supervised_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `sis_presenter_action_supervised_courses`")  # noqa: E501
        # verify the required parameter 'year' is set
        if ('year' not in params or
                params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `sis_presenter_action_supervised_courses`")  # noqa: E501
        # verify the required parameter 'term' is set
        if ('term' not in params or
                params['term'] is None):
            raise ValueError("Missing the required parameter `term` when calling `sis_presenter_action_supervised_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501
        if 'year' in params:
            path_params['year'] = params['year']  # noqa: E501
        if 'term' in params:
            path_params['term'] = params['term']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/extensions/sis/users/{userId}/supervised-courses/{year}/{term}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sis_presenter_action_unbind_group(self, course_id, group_id, **kwargs):  # noqa: E501
        """Delete a binding between a local group and a SIS group  # noqa: E501

        Delete a binding between a local group and a SIS group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sis_presenter_action_unbind_group(course_id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: an identifier of a SIS course (required)
        :param str group_id: an identifier of a local group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sis_presenter_action_unbind_group_with_http_info(course_id, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sis_presenter_action_unbind_group_with_http_info(course_id, group_id, **kwargs)  # noqa: E501
            return data

    def sis_presenter_action_unbind_group_with_http_info(self, course_id, group_id, **kwargs):  # noqa: E501
        """Delete a binding between a local group and a SIS group  # noqa: E501

        Delete a binding between a local group and a SIS group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sis_presenter_action_unbind_group_with_http_info(course_id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: an identifier of a SIS course (required)
        :param str group_id: an identifier of a local group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sis_presenter_action_unbind_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if ('course_id' not in params or
                params['course_id'] is None):
            raise ValueError("Missing the required parameter `course_id` when calling `sis_presenter_action_unbind_group`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `sis_presenter_action_unbind_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['courseId'] = params['course_id']  # noqa: E501
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/extensions/sis/remote-courses/{courseId}/bindings/{groupId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def submission_failures_presenter_action_default(self, **kwargs):  # noqa: E501
        """List all submission failures, ever  # noqa: E501

        List all submission failures, ever  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submission_failures_presenter_action_default(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.submission_failures_presenter_action_default_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.submission_failures_presenter_action_default_with_http_info(**kwargs)  # noqa: E501
            return data

    def submission_failures_presenter_action_default_with_http_info(self, **kwargs):  # noqa: E501
        """List all submission failures, ever  # noqa: E501

        List all submission failures, ever  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submission_failures_presenter_action_default_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submission_failures_presenter_action_default" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/submission-failures', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def submission_failures_presenter_action_detail(self, id, **kwargs):  # noqa: E501
        """Get details of a failure  # noqa: E501

        Get details of a failure  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submission_failures_presenter_action_detail(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: An identifier of the failure (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.submission_failures_presenter_action_detail_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.submission_failures_presenter_action_detail_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def submission_failures_presenter_action_detail_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get details of a failure  # noqa: E501

        Get details of a failure  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submission_failures_presenter_action_detail_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: An identifier of the failure (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submission_failures_presenter_action_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `submission_failures_presenter_action_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/submission-failures/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def submission_failures_presenter_action_resolve(self, id, **kwargs):  # noqa: E501
        """Mark a submission failure as resolved  # noqa: E501

        Mark a submission failure as resolved  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submission_failures_presenter_action_resolve(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: An identifier of the failure (required)
        :param IdResolveBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.submission_failures_presenter_action_resolve_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.submission_failures_presenter_action_resolve_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def submission_failures_presenter_action_resolve_with_http_info(self, id, **kwargs):  # noqa: E501
        """Mark a submission failure as resolved  # noqa: E501

        Mark a submission failure as resolved  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submission_failures_presenter_action_resolve_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: An identifier of the failure (required)
        :param IdResolveBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submission_failures_presenter_action_resolve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `submission_failures_presenter_action_resolve`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/submission-failures/{id}/resolve', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def submission_failures_presenter_action_unresolved(self, **kwargs):  # noqa: E501
        """List all unresolved submission failures  # noqa: E501

        List all unresolved submission failures  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submission_failures_presenter_action_unresolved(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.submission_failures_presenter_action_unresolved_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.submission_failures_presenter_action_unresolved_with_http_info(**kwargs)  # noqa: E501
            return data

    def submission_failures_presenter_action_unresolved_with_http_info(self, **kwargs):  # noqa: E501
        """List all unresolved submission failures  # noqa: E501

        List all unresolved submission failures  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submission_failures_presenter_action_unresolved_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submission_failures_presenter_action_unresolved" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/submission-failures/unresolved', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def submit_presenter_action_can_submit(self, id, **kwargs):  # noqa: E501
        """Check if the given user can submit solutions to the assignment  # noqa: E501

        Check if the given user can submit solutions to the assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_presenter_action_can_submit(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the assignment (required)
        :param str user_id: Identification of the user
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.submit_presenter_action_can_submit_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.submit_presenter_action_can_submit_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def submit_presenter_action_can_submit_with_http_info(self, id, **kwargs):  # noqa: E501
        """Check if the given user can submit solutions to the assignment  # noqa: E501

        Check if the given user can submit solutions to the assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_presenter_action_can_submit_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the assignment (required)
        :param str user_id: Identification of the user
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submit_presenter_action_can_submit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `submit_presenter_action_can_submit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercise-assignments/{id}/can-submit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def submit_presenter_action_pre_submit(self, id, **kwargs):  # noqa: E501
        """Pre submit action which will, based on given files, detect possible runtime environments for the assignment. Also it can be further used for entry points and other important things that should be provided by user during submit.  # noqa: E501

        Pre submit action which will, based on given files, detect possible runtime environments for the assignment. Also it can be further used for entry points and other important things that should be provided by user during submit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_presenter_action_pre_submit(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identifier of assignment (required)
        :param IdPresubmitBody body:
        :param str user_id: Identifier of the submission author
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.submit_presenter_action_pre_submit_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.submit_presenter_action_pre_submit_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def submit_presenter_action_pre_submit_with_http_info(self, id, **kwargs):  # noqa: E501
        """Pre submit action which will, based on given files, detect possible runtime environments for the assignment. Also it can be further used for entry points and other important things that should be provided by user during submit.  # noqa: E501

        Pre submit action which will, based on given files, detect possible runtime environments for the assignment. Also it can be further used for entry points and other important things that should be provided by user during submit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_presenter_action_pre_submit_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identifier of assignment (required)
        :param IdPresubmitBody body:
        :param str user_id: Identifier of the submission author
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submit_presenter_action_pre_submit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `submit_presenter_action_pre_submit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercise-assignments/{id}/pre-submit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def submit_presenter_action_resubmit(self, id, **kwargs):  # noqa: E501
        """Resubmit a solution (i.e., create a new submission)  # noqa: E501

        Resubmit a solution (i.e., create a new submission)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_presenter_action_resubmit(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the solution (required)
        :param IdResubmitBody1 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.submit_presenter_action_resubmit_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.submit_presenter_action_resubmit_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def submit_presenter_action_resubmit_with_http_info(self, id, **kwargs):  # noqa: E501
        """Resubmit a solution (i.e., create a new submission)  # noqa: E501

        Resubmit a solution (i.e., create a new submission)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_presenter_action_resubmit_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the solution (required)
        :param IdResubmitBody1 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submit_presenter_action_resubmit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `submit_presenter_action_resubmit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/assignment-solutions/{id}/resubmit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def submit_presenter_action_resubmit_all(self, id, **kwargs):  # noqa: E501
        """Start async job that resubmits all submissions of an assignment. No job is started when there are pending resubmit jobs for the selected assignment. Returns list of pending async jobs (same as GET call)  # noqa: E501

        Start async job that resubmits all submissions of an assignment. No job is started when there are pending resubmit jobs for the selected assignment. Returns list of pending async jobs (same as GET call)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_presenter_action_resubmit_all(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the assignment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.submit_presenter_action_resubmit_all_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.submit_presenter_action_resubmit_all_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def submit_presenter_action_resubmit_all_with_http_info(self, id, **kwargs):  # noqa: E501
        """Start async job that resubmits all submissions of an assignment. No job is started when there are pending resubmit jobs for the selected assignment. Returns list of pending async jobs (same as GET call)  # noqa: E501

        Start async job that resubmits all submissions of an assignment. No job is started when there are pending resubmit jobs for the selected assignment. Returns list of pending async jobs (same as GET call)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_presenter_action_resubmit_all_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the assignment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submit_presenter_action_resubmit_all" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `submit_presenter_action_resubmit_all`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercise-assignments/{id}/resubmit-all', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def submit_presenter_action_resubmit_all_async_job_status(self, id, **kwargs):  # noqa: E501
        """Return a list of all pending resubmit async jobs associated with given assignment. Under normal circumstances, the list should be either empty, or contain only one job.  # noqa: E501

        Return a list of all pending resubmit async jobs associated with given assignment. Under normal circumstances, the list should be either empty, or contain only one job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_presenter_action_resubmit_all_async_job_status(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the assignment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.submit_presenter_action_resubmit_all_async_job_status_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.submit_presenter_action_resubmit_all_async_job_status_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def submit_presenter_action_resubmit_all_async_job_status_with_http_info(self, id, **kwargs):  # noqa: E501
        """Return a list of all pending resubmit async jobs associated with given assignment. Under normal circumstances, the list should be either empty, or contain only one job.  # noqa: E501

        Return a list of all pending resubmit async jobs associated with given assignment. Under normal circumstances, the list should be either empty, or contain only one job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_presenter_action_resubmit_all_async_job_status_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the assignment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submit_presenter_action_resubmit_all_async_job_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `submit_presenter_action_resubmit_all_async_job_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercise-assignments/{id}/resubmit-all', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def submit_presenter_action_submit(self, id, **kwargs):  # noqa: E501
        """Submit a solution of an assignment  # noqa: E501

        Submit a solution of an assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_presenter_action_submit(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the assignment (required)
        :param IdSubmitBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.submit_presenter_action_submit_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.submit_presenter_action_submit_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def submit_presenter_action_submit_with_http_info(self, id, **kwargs):  # noqa: E501
        """Submit a solution of an assignment  # noqa: E501

        Submit a solution of an assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_presenter_action_submit_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the assignment (required)
        :param IdSubmitBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submit_presenter_action_submit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `submit_presenter_action_submit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/exercise-assignments/{id}/submit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def uploaded_files_presenter_action_append_partial(self, offset, id, **kwargs):  # noqa: E501
        """Add another chunk to partial upload.  # noqa: E501

        Add another chunk to partial upload.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.uploaded_files_presenter_action_append_partial(offset, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Offset of the chunk for verification (required)
        :param str id: Identifier of the partial file (required)
        :param Object body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.uploaded_files_presenter_action_append_partial_with_http_info(offset, id, **kwargs)  # noqa: E501
        else:
            (data) = self.uploaded_files_presenter_action_append_partial_with_http_info(offset, id, **kwargs)  # noqa: E501
            return data

    def uploaded_files_presenter_action_append_partial_with_http_info(self, offset, id, **kwargs):  # noqa: E501
        """Add another chunk to partial upload.  # noqa: E501

        Add another chunk to partial upload.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.uploaded_files_presenter_action_append_partial_with_http_info(offset, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Offset of the chunk for verification (required)
        :param str id: Identifier of the partial file (required)
        :param Object body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method uploaded_files_presenter_action_append_partial" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'offset' is set
        if ('offset' not in params or
                params['offset'] is None):
            raise ValueError("Missing the required parameter `offset` when calling `uploaded_files_presenter_action_append_partial`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `uploaded_files_presenter_action_append_partial`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/uploaded-files/partial/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def uploaded_files_presenter_action_cancel_partial(self, id, **kwargs):  # noqa: E501
        """Cancel partial upload and remove all uploaded chunks.  # noqa: E501

        Cancel partial upload and remove all uploaded chunks.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.uploaded_files_presenter_action_cancel_partial(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the partial file (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.uploaded_files_presenter_action_cancel_partial_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.uploaded_files_presenter_action_cancel_partial_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def uploaded_files_presenter_action_cancel_partial_with_http_info(self, id, **kwargs):  # noqa: E501
        """Cancel partial upload and remove all uploaded chunks.  # noqa: E501

        Cancel partial upload and remove all uploaded chunks.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.uploaded_files_presenter_action_cancel_partial_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the partial file (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method uploaded_files_presenter_action_cancel_partial" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `uploaded_files_presenter_action_cancel_partial`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/uploaded-files/partial/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def uploaded_files_presenter_action_complete_partial(self, id, **kwargs):  # noqa: E501
        """Finalize partial upload and convert the partial file into UploadFile. All data chunks are extracted from the store, assembled into one file, and is moved back into the store.  # noqa: E501

        Finalize partial upload and convert the partial file into UploadFile. All data chunks are extracted from the store, assembled into one file, and is moved back into the store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.uploaded_files_presenter_action_complete_partial(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the partial file (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.uploaded_files_presenter_action_complete_partial_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.uploaded_files_presenter_action_complete_partial_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def uploaded_files_presenter_action_complete_partial_with_http_info(self, id, **kwargs):  # noqa: E501
        """Finalize partial upload and convert the partial file into UploadFile. All data chunks are extracted from the store, assembled into one file, and is moved back into the store.  # noqa: E501

        Finalize partial upload and convert the partial file into UploadFile. All data chunks are extracted from the store, assembled into one file, and is moved back into the store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.uploaded_files_presenter_action_complete_partial_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the partial file (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method uploaded_files_presenter_action_complete_partial" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `uploaded_files_presenter_action_complete_partial`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/uploaded-files/partial/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def uploaded_files_presenter_action_content(self, id, **kwargs):  # noqa: E501
        """Get the contents of a file  # noqa: E501

        Get the contents of a file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.uploaded_files_presenter_action_content(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the file (required)
        :param str entry: Name of the entry in the ZIP archive (if the target file is ZIP)
        :param str similar_solution_id: Id of an assignment solution which has detected possible plagiarism in this file. This is basically a shortcut (hint) for ACLs.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.uploaded_files_presenter_action_content_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.uploaded_files_presenter_action_content_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def uploaded_files_presenter_action_content_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the contents of a file  # noqa: E501

        Get the contents of a file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.uploaded_files_presenter_action_content_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the file (required)
        :param str entry: Name of the entry in the ZIP archive (if the target file is ZIP)
        :param str similar_solution_id: Id of an assignment solution which has detected possible plagiarism in this file. This is basically a shortcut (hint) for ACLs.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'entry', 'similar_solution_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method uploaded_files_presenter_action_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `uploaded_files_presenter_action_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'entry' in params:
            query_params.append(('entry', params['entry']))  # noqa: E501
        if 'similar_solution_id' in params:
            query_params.append(('similarSolutionId', params['similar_solution_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/uploaded-files/{id}/content', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def uploaded_files_presenter_action_detail(self, id, **kwargs):  # noqa: E501
        """Get details of a file  # noqa: E501

        Get details of a file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.uploaded_files_presenter_action_detail(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the uploaded file (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.uploaded_files_presenter_action_detail_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.uploaded_files_presenter_action_detail_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def uploaded_files_presenter_action_detail_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get details of a file  # noqa: E501

        Get details of a file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.uploaded_files_presenter_action_detail_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the uploaded file (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method uploaded_files_presenter_action_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `uploaded_files_presenter_action_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/uploaded-files/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def uploaded_files_presenter_action_digest(self, id, **kwargs):  # noqa: E501
        """Compute a digest using a hashing algorithm. This feature is intended for upload checksums only. In the future, we might want to add algorithm selection via query parameter (default is SHA1).  # noqa: E501

        Compute a digest using a hashing algorithm. This feature is intended for upload checksums only. In the future, we might want to add algorithm selection via query parameter (default is SHA1).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.uploaded_files_presenter_action_digest(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the file (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.uploaded_files_presenter_action_digest_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.uploaded_files_presenter_action_digest_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def uploaded_files_presenter_action_digest_with_http_info(self, id, **kwargs):  # noqa: E501
        """Compute a digest using a hashing algorithm. This feature is intended for upload checksums only. In the future, we might want to add algorithm selection via query parameter (default is SHA1).  # noqa: E501

        Compute a digest using a hashing algorithm. This feature is intended for upload checksums only. In the future, we might want to add algorithm selection via query parameter (default is SHA1).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.uploaded_files_presenter_action_digest_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the file (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method uploaded_files_presenter_action_digest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `uploaded_files_presenter_action_digest`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/uploaded-files/{id}/digest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def uploaded_files_presenter_action_download(self, id, **kwargs):  # noqa: E501
        """Download a file  # noqa: E501

        Download a file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.uploaded_files_presenter_action_download(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the file (required)
        :param str entry: Name of the entry in the ZIP archive (if the target file is ZIP)
        :param str similar_solution_id: Id of an assignment solution which has detected possible plagiarism in this file. This is basically a shortcut (hint) for ACLs.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.uploaded_files_presenter_action_download_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.uploaded_files_presenter_action_download_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def uploaded_files_presenter_action_download_with_http_info(self, id, **kwargs):  # noqa: E501
        """Download a file  # noqa: E501

        Download a file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.uploaded_files_presenter_action_download_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the file (required)
        :param str entry: Name of the entry in the ZIP archive (if the target file is ZIP)
        :param str similar_solution_id: Id of an assignment solution which has detected possible plagiarism in this file. This is basically a shortcut (hint) for ACLs.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'entry', 'similar_solution_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method uploaded_files_presenter_action_download" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `uploaded_files_presenter_action_download`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'entry' in params:
            query_params.append(('entry', params['entry']))  # noqa: E501
        if 'similar_solution_id' in params:
            query_params.append(('similarSolutionId', params['similar_solution_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/uploaded-files/{id}/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def uploaded_files_presenter_action_download_supplementary_file(self, id, **kwargs):  # noqa: E501
        """Download supplementary file  # noqa: E501

        Download supplementary file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.uploaded_files_presenter_action_download_supplementary_file(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the file (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.uploaded_files_presenter_action_download_supplementary_file_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.uploaded_files_presenter_action_download_supplementary_file_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def uploaded_files_presenter_action_download_supplementary_file_with_http_info(self, id, **kwargs):  # noqa: E501
        """Download supplementary file  # noqa: E501

        Download supplementary file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.uploaded_files_presenter_action_download_supplementary_file_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the file (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method uploaded_files_presenter_action_download_supplementary_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `uploaded_files_presenter_action_download_supplementary_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/uploaded-files/supplementary-file/{id}/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def uploaded_files_presenter_action_start_partial(self, **kwargs):  # noqa: E501
        """Start new upload per-partes. This process expects the file is uploaded as a sequence of PUT requests, each one carrying a chunk of data. Once all the chunks are in place, the complete request assembles them together in one file and transforms UploadPartialFile into UploadFile entity.  # noqa: E501

        Start new upload per-partes. This process expects the file is uploaded as a sequence of PUT requests, each one carrying a chunk of data. Once all the chunks are in place, the complete request assembles them together in one file and transforms UploadPartialFile into UploadFile entity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.uploaded_files_presenter_action_start_partial(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UploadedfilesPartialBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.uploaded_files_presenter_action_start_partial_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.uploaded_files_presenter_action_start_partial_with_http_info(**kwargs)  # noqa: E501
            return data

    def uploaded_files_presenter_action_start_partial_with_http_info(self, **kwargs):  # noqa: E501
        """Start new upload per-partes. This process expects the file is uploaded as a sequence of PUT requests, each one carrying a chunk of data. Once all the chunks are in place, the complete request assembles them together in one file and transforms UploadPartialFile into UploadFile entity.  # noqa: E501

        Start new upload per-partes. This process expects the file is uploaded as a sequence of PUT requests, each one carrying a chunk of data. Once all the chunks are in place, the complete request assembles them together in one file and transforms UploadPartialFile into UploadFile entity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.uploaded_files_presenter_action_start_partial_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UploadedfilesPartialBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method uploaded_files_presenter_action_start_partial" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/uploaded-files/partial', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def uploaded_files_presenter_action_upload(self, **kwargs):  # noqa: E501
        """Upload a file  # noqa: E501

        Upload a file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.uploaded_files_presenter_action_upload(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.uploaded_files_presenter_action_upload_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.uploaded_files_presenter_action_upload_with_http_info(**kwargs)  # noqa: E501
            return data

    def uploaded_files_presenter_action_upload_with_http_info(self, **kwargs):  # noqa: E501
        """Upload a file  # noqa: E501

        Upload a file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.uploaded_files_presenter_action_upload_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method uploaded_files_presenter_action_upload" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/uploaded-files', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_calendars_presenter_action_create_calendar(self, id, **kwargs):  # noqa: E501
        """Create new iCal token for a particular user.  # noqa: E501

        Create new iCal token for a particular user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_calendars_presenter_action_create_calendar(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_calendars_presenter_action_create_calendar_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_calendars_presenter_action_create_calendar_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def user_calendars_presenter_action_create_calendar_with_http_info(self, id, **kwargs):  # noqa: E501
        """Create new iCal token for a particular user.  # noqa: E501

        Create new iCal token for a particular user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_calendars_presenter_action_create_calendar_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_calendars_presenter_action_create_calendar" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `user_calendars_presenter_action_create_calendar`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{id}/calendar-tokens', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_calendars_presenter_action_default(self, id, **kwargs):  # noqa: E501
        """Get calendar values in iCal format that correspond to given token.  # noqa: E501

        Get calendar values in iCal format that correspond to given token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_calendars_presenter_action_default(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: the iCal token (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_calendars_presenter_action_default_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_calendars_presenter_action_default_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def user_calendars_presenter_action_default_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get calendar values in iCal format that correspond to given token.  # noqa: E501

        Get calendar values in iCal format that correspond to given token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_calendars_presenter_action_default_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: the iCal token (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_calendars_presenter_action_default" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `user_calendars_presenter_action_default`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/ical/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_calendars_presenter_action_expire_calendar(self, id, **kwargs):  # noqa: E501
        """Set given iCal token to expired state. Expired tokens cannot be used to retrieve calendars.  # noqa: E501

        Set given iCal token to expired state. Expired tokens cannot be used to retrieve calendars.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_calendars_presenter_action_expire_calendar(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: the iCal token (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_calendars_presenter_action_expire_calendar_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_calendars_presenter_action_expire_calendar_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def user_calendars_presenter_action_expire_calendar_with_http_info(self, id, **kwargs):  # noqa: E501
        """Set given iCal token to expired state. Expired tokens cannot be used to retrieve calendars.  # noqa: E501

        Set given iCal token to expired state. Expired tokens cannot be used to retrieve calendars.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_calendars_presenter_action_expire_calendar_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: the iCal token (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_calendars_presenter_action_expire_calendar" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `user_calendars_presenter_action_expire_calendar`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/ical/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_calendars_presenter_action_user_calendars(self, id, **kwargs):  # noqa: E501
        """Get all iCal tokens of one user (including expired ones).  # noqa: E501

        Get all iCal tokens of one user (including expired ones).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_calendars_presenter_action_user_calendars(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_calendars_presenter_action_user_calendars_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_calendars_presenter_action_user_calendars_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def user_calendars_presenter_action_user_calendars_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get all iCal tokens of one user (including expired ones).  # noqa: E501

        Get all iCal tokens of one user (including expired ones).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_calendars_presenter_action_user_calendars_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_calendars_presenter_action_user_calendars" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `user_calendars_presenter_action_user_calendars`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{id}/calendar-tokens', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_presenter_action_all_groups(self, id, **kwargs):  # noqa: E501
        """Get a list of all groups for a user  # noqa: E501

        Get a list of all groups for a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_presenter_action_all_groups(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_presenter_action_all_groups_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.users_presenter_action_all_groups_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def users_presenter_action_all_groups_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a list of all groups for a user  # noqa: E501

        Get a list of all groups for a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_presenter_action_all_groups_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_presenter_action_all_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `users_presenter_action_all_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{id}/groups/all', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_presenter_action_create_local_account(self, id, **kwargs):  # noqa: E501
        """If user is registered externally, add local account as another login method. Created password is empty and has to be changed in order to use it.  # noqa: E501

        If user is registered externally, add local account as another login method. Created password is empty and has to be changed in order to use it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_presenter_action_create_local_account(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_presenter_action_create_local_account_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.users_presenter_action_create_local_account_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def users_presenter_action_create_local_account_with_http_info(self, id, **kwargs):  # noqa: E501
        """If user is registered externally, add local account as another login method. Created password is empty and has to be changed in order to use it.  # noqa: E501

        If user is registered externally, add local account as another login method. Created password is empty and has to be changed in order to use it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_presenter_action_create_local_account_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_presenter_action_create_local_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `users_presenter_action_create_local_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{id}/create-local', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_presenter_action_default(self, **kwargs):  # noqa: E501
        """Get a list of all users matching given filters in given pagination rage. The result conforms to pagination protocol.  # noqa: E501

        Get a list of all users matching given filters in given pagination rage. The result conforms to pagination protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_presenter_action_default(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Index of the first result.
        :param int limit: Maximal number of results returned.
        :param str order_by: Name of the column (column concept). The '!' prefix indicate descending order.
        :param str filters_search:
        :param str filters_instance_id:
        :param list[str] filters_roles:
        :param str locale: Currently set locale (used to augment order by clause if necessary),
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_presenter_action_default_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.users_presenter_action_default_with_http_info(**kwargs)  # noqa: E501
            return data

    def users_presenter_action_default_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of all users matching given filters in given pagination rage. The result conforms to pagination protocol.  # noqa: E501

        Get a list of all users matching given filters in given pagination rage. The result conforms to pagination protocol.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_presenter_action_default_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Index of the first result.
        :param int limit: Maximal number of results returned.
        :param str order_by: Name of the column (column concept). The '!' prefix indicate descending order.
        :param str filters_search:
        :param str filters_instance_id:
        :param list[str] filters_roles:
        :param str locale: Currently set locale (used to augment order by clause if necessary),
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'order_by', 'filters_search', 'filters_instance_id', 'filters_roles', 'locale']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_presenter_action_default" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'filters_search' in params:
            query_params.append(('filters[search]', params['filters_search']))  # noqa: E501
        if 'filters_instance_id' in params:
            query_params.append(('filters[instanceId]', params['filters_instance_id']))  # noqa: E501
        if 'filters_roles' in params:
            query_params.append(('filters[roles][]', params['filters_roles']))  # noqa: E501
            collection_formats['filters[roles][]'] = 'multi'  # noqa: E501
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_presenter_action_delete(self, id, **kwargs):  # noqa: E501
        """Delete a user account  # noqa: E501

        Delete a user account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_presenter_action_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_presenter_action_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.users_presenter_action_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def users_presenter_action_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a user account  # noqa: E501

        Delete a user account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_presenter_action_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_presenter_action_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `users_presenter_action_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_presenter_action_detail(self, id, **kwargs):  # noqa: E501
        """Get details of a user account  # noqa: E501

        Get details of a user account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_presenter_action_detail(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_presenter_action_detail_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.users_presenter_action_detail_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def users_presenter_action_detail_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get details of a user account  # noqa: E501

        Get details of a user account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_presenter_action_detail_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_presenter_action_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `users_presenter_action_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_presenter_action_groups(self, id, **kwargs):  # noqa: E501
        """Get a list of non-archived groups for a user  # noqa: E501

        Get a list of non-archived groups for a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_presenter_action_groups(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_presenter_action_groups_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.users_presenter_action_groups_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def users_presenter_action_groups_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a list of non-archived groups for a user  # noqa: E501

        Get a list of non-archived groups for a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_presenter_action_groups_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_presenter_action_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `users_presenter_action_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{id}/groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_presenter_action_instances(self, id, **kwargs):  # noqa: E501
        """Get a list of instances where a user is registered  # noqa: E501

        Get a list of instances where a user is registered  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_presenter_action_instances(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_presenter_action_instances_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.users_presenter_action_instances_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def users_presenter_action_instances_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a list of instances where a user is registered  # noqa: E501

        Get a list of instances where a user is registered  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_presenter_action_instances_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_presenter_action_instances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `users_presenter_action_instances`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{id}/instances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_presenter_action_invalidate_tokens(self, id, **kwargs):  # noqa: E501
        """Invalidate all existing tokens issued for given user  # noqa: E501

        Invalidate all existing tokens issued for given user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_presenter_action_invalidate_tokens(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_presenter_action_invalidate_tokens_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.users_presenter_action_invalidate_tokens_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def users_presenter_action_invalidate_tokens_with_http_info(self, id, **kwargs):  # noqa: E501
        """Invalidate all existing tokens issued for given user  # noqa: E501

        Invalidate all existing tokens issued for given user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_presenter_action_invalidate_tokens_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_presenter_action_invalidate_tokens" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `users_presenter_action_invalidate_tokens`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{id}/invalidate-tokens', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_presenter_action_list_by_ids(self, **kwargs):  # noqa: E501
        """Get a list of users based on given ids.  # noqa: E501

        Get a list of users based on given ids.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_presenter_action_list_by_ids(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UsersListBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_presenter_action_list_by_ids_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.users_presenter_action_list_by_ids_with_http_info(**kwargs)  # noqa: E501
            return data

    def users_presenter_action_list_by_ids_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of users based on given ids.  # noqa: E501

        Get a list of users based on given ids.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_presenter_action_list_by_ids_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UsersListBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_presenter_action_list_by_ids" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_presenter_action_remove_external_login(self, id, service, **kwargs):  # noqa: E501
        """Remove external ID of given authentication service.  # noqa: E501

        Remove external ID of given authentication service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_presenter_action_remove_external_login(id, service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identifier of the user (required)
        :param str service: identifier of the authentication service (login type) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_presenter_action_remove_external_login_with_http_info(id, service, **kwargs)  # noqa: E501
        else:
            (data) = self.users_presenter_action_remove_external_login_with_http_info(id, service, **kwargs)  # noqa: E501
            return data

    def users_presenter_action_remove_external_login_with_http_info(self, id, service, **kwargs):  # noqa: E501
        """Remove external ID of given authentication service.  # noqa: E501

        Remove external ID of given authentication service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_presenter_action_remove_external_login_with_http_info(id, service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identifier of the user (required)
        :param str service: identifier of the authentication service (login type) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'service']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_presenter_action_remove_external_login" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `users_presenter_action_remove_external_login`")  # noqa: E501
        # verify the required parameter 'service' is set
        if ('service' not in params or
                params['service'] is None):
            raise ValueError("Missing the required parameter `service` when calling `users_presenter_action_remove_external_login`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'service' in params:
            path_params['service'] = params['service']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{id}/external-login/{service}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_presenter_action_set_role(self, id, **kwargs):  # noqa: E501
        """Set a given role to the given user.  # noqa: E501

        Set a given role to the given user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_presenter_action_set_role(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the user (required)
        :param IdRoleBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_presenter_action_set_role_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.users_presenter_action_set_role_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def users_presenter_action_set_role_with_http_info(self, id, **kwargs):  # noqa: E501
        """Set a given role to the given user.  # noqa: E501

        Set a given role to the given user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_presenter_action_set_role_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the user (required)
        :param IdRoleBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_presenter_action_set_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `users_presenter_action_set_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{id}/role', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_presenter_action_update_external_login(self, id, service, **kwargs):  # noqa: E501
        """Add or update existing external ID of given authentication service.  # noqa: E501

        Add or update existing external ID of given authentication service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_presenter_action_update_external_login(id, service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identifier of the user (required)
        :param str service: identifier of the authentication service (login type) (required)
        :param ExternalloginServiceBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_presenter_action_update_external_login_with_http_info(id, service, **kwargs)  # noqa: E501
        else:
            (data) = self.users_presenter_action_update_external_login_with_http_info(id, service, **kwargs)  # noqa: E501
            return data

    def users_presenter_action_update_external_login_with_http_info(self, id, service, **kwargs):  # noqa: E501
        """Add or update existing external ID of given authentication service.  # noqa: E501

        Add or update existing external ID of given authentication service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_presenter_action_update_external_login_with_http_info(id, service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identifier of the user (required)
        :param str service: identifier of the authentication service (login type) (required)
        :param ExternalloginServiceBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'service', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_presenter_action_update_external_login" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `users_presenter_action_update_external_login`")  # noqa: E501
        # verify the required parameter 'service' is set
        if ('service' not in params or
                params['service'] is None):
            raise ValueError("Missing the required parameter `service` when calling `users_presenter_action_update_external_login`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'service' in params:
            path_params['service'] = params['service']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{id}/external-login/{service}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_presenter_action_update_profile(self, id, **kwargs):  # noqa: E501
        """Update the profile associated with a user account  # noqa: E501

        Update the profile associated with a user account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_presenter_action_update_profile(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the user (required)
        :param UsersIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_presenter_action_update_profile_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.users_presenter_action_update_profile_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def users_presenter_action_update_profile_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update the profile associated with a user account  # noqa: E501

        Update the profile associated with a user account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_presenter_action_update_profile_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the user (required)
        :param UsersIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_presenter_action_update_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `users_presenter_action_update_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_presenter_action_update_settings(self, id, **kwargs):  # noqa: E501
        """Update the profile settings  # noqa: E501

        Update the profile settings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_presenter_action_update_settings(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the user (required)
        :param IdSettingsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_presenter_action_update_settings_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.users_presenter_action_update_settings_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def users_presenter_action_update_settings_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update the profile settings  # noqa: E501

        Update the profile settings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_presenter_action_update_settings_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the user (required)
        :param IdSettingsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_presenter_action_update_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `users_presenter_action_update_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{id}/settings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_presenter_action_update_ui_data(self, id, **kwargs):  # noqa: E501
        """Update the user-specific structured UI data  # noqa: E501

        Update the user-specific structured UI data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_presenter_action_update_ui_data(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the user (required)
        :param IdUidataBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_presenter_action_update_ui_data_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.users_presenter_action_update_ui_data_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def users_presenter_action_update_ui_data_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update the user-specific structured UI data  # noqa: E501

        Update the user-specific structured UI data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_presenter_action_update_ui_data_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the user (required)
        :param IdUidataBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_presenter_action_update_ui_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `users_presenter_action_update_ui_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{id}/ui-data', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def worker_files_presenter_action_download_supplementary_file(self, hash, **kwargs):  # noqa: E501
        """Sends over an exercise supplementary file (a data file required by the tests).  # noqa: E501

        Sends over an exercise supplementary file (a data file required by the tests).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.worker_files_presenter_action_download_supplementary_file(hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hash: identification of the supplementary file (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.worker_files_presenter_action_download_supplementary_file_with_http_info(hash, **kwargs)  # noqa: E501
        else:
            (data) = self.worker_files_presenter_action_download_supplementary_file_with_http_info(hash, **kwargs)  # noqa: E501
            return data

    def worker_files_presenter_action_download_supplementary_file_with_http_info(self, hash, **kwargs):  # noqa: E501
        """Sends over an exercise supplementary file (a data file required by the tests).  # noqa: E501

        Sends over an exercise supplementary file (a data file required by the tests).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.worker_files_presenter_action_download_supplementary_file_with_http_info(hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hash: identification of the supplementary file (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hash']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method worker_files_presenter_action_download_supplementary_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hash' is set
        if ('hash' not in params or
                params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `worker_files_presenter_action_download_supplementary_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hash' in params:
            path_params['hash'] = params['hash']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/worker-files/supplementary-file/{hash}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
