# coding: utf-8

"""
    ReCodEx API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import unittest

import swagger_client
from swagger_client.api.default_api import DefaultApi  # noqa: E501
from swagger_client.rest import ApiException


class TestDefaultApi(unittest.TestCase):
    """DefaultApi unit test stubs"""

    def setUp(self):
        self.api = DefaultApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_assignment_solution_reviews_presenter_action_default(self):
        """Test case for assignment_solution_reviews_presenter_action_default

        Get detail of the solution and a list of review comments.  # noqa: E501
        """
        pass

    def test_assignment_solution_reviews_presenter_action_delete_comment(self):
        """Test case for assignment_solution_reviews_presenter_action_delete_comment

        Remove one comment from a review.  # noqa: E501
        """
        pass

    def test_assignment_solution_reviews_presenter_action_edit_comment(self):
        """Test case for assignment_solution_reviews_presenter_action_edit_comment

        Update existing comment within a review.  # noqa: E501
        """
        pass

    def test_assignment_solution_reviews_presenter_action_new_comment(self):
        """Test case for assignment_solution_reviews_presenter_action_new_comment

        Create a new comment within a review.  # noqa: E501
        """
        pass

    def test_assignment_solution_reviews_presenter_action_pending(self):
        """Test case for assignment_solution_reviews_presenter_action_pending

        Return all solutions with pending reviews that given user teaches (is admin/supervisor in corresponding groups). Along with that it returns all assignment entities of the corresponding solutions.  # noqa: E501
        """
        pass

    def test_assignment_solution_reviews_presenter_action_remove(self):
        """Test case for assignment_solution_reviews_presenter_action_remove

        Update the state of the review process of the solution.  # noqa: E501
        """
        pass

    def test_assignment_solution_reviews_presenter_action_update(self):
        """Test case for assignment_solution_reviews_presenter_action_update

        Update the state of the review process of the solution.  # noqa: E501
        """
        pass

    def test_assignment_solutions_presenter_action_delete_solution(self):
        """Test case for assignment_solutions_presenter_action_delete_solution

        Delete assignment solution with given identification.  # noqa: E501
        """
        pass

    def test_assignment_solutions_presenter_action_delete_submission(self):
        """Test case for assignment_solutions_presenter_action_delete_submission

        Remove the submission permanently  # noqa: E501
        """
        pass

    def test_assignment_solutions_presenter_action_download_result_archive(self):
        """Test case for assignment_solutions_presenter_action_download_result_archive

        Download result archive from backend for particular submission.  # noqa: E501
        """
        pass

    def test_assignment_solutions_presenter_action_download_solution_archive(self):
        """Test case for assignment_solutions_presenter_action_download_solution_archive

        Download archive containing all solution files for particular solution.  # noqa: E501
        """
        pass

    def test_assignment_solutions_presenter_action_evaluation_score_config(self):
        """Test case for assignment_solutions_presenter_action_evaluation_score_config

        Get score configuration associated with given submission evaluation  # noqa: E501
        """
        pass

    def test_assignment_solutions_presenter_action_files(self):
        """Test case for assignment_solutions_presenter_action_files

        Get the list of submitted files of the solution.  # noqa: E501
        """
        pass

    def test_assignment_solutions_presenter_action_review_requests(self):
        """Test case for assignment_solutions_presenter_action_review_requests

        Return all solutions with reviewRequest flag that given user might need to review (is admin/supervisor in corresponding groups). Along with that it returns all assignment entities of the corresponding solutions.  # noqa: E501
        """
        pass

    def test_assignment_solutions_presenter_action_set_bonus_points(self):
        """Test case for assignment_solutions_presenter_action_set_bonus_points

        Set new amount of bonus points for a solution (and optionally points override) Returns array of solution entities that has been changed by this.  # noqa: E501
        """
        pass

    def test_assignment_solutions_presenter_action_set_flag(self):
        """Test case for assignment_solutions_presenter_action_set_flag

        Set flag of the assignment solution.  # noqa: E501
        """
        pass

    def test_assignment_solutions_presenter_action_solution(self):
        """Test case for assignment_solutions_presenter_action_solution

        Get information about solutions.  # noqa: E501
        """
        pass

    def test_assignment_solutions_presenter_action_submission(self):
        """Test case for assignment_solutions_presenter_action_submission

        Get information about the evaluation of a submission  # noqa: E501
        """
        pass

    def test_assignment_solutions_presenter_action_submissions(self):
        """Test case for assignment_solutions_presenter_action_submissions

        Get list of all submissions of a solution  # noqa: E501
        """
        pass

    def test_assignment_solutions_presenter_action_update_solution(self):
        """Test case for assignment_solutions_presenter_action_update_solution

        Update details about the solution (note, etc...)  # noqa: E501
        """
        pass

    def test_assignment_solvers_presenter_action_default(self):
        """Test case for assignment_solvers_presenter_action_default

        Get a list of assignment solvers based on given parameters (assignment/group and solver user). Either assignment or group ID must be set (group is ignored if assignment is set), user ID is optional.  # noqa: E501
        """
        pass

    def test_assignments_presenter_action_best_solution(self):
        """Test case for assignments_presenter_action_best_solution

        Get the best solution by a user to an assignment  # noqa: E501
        """
        pass

    def test_assignments_presenter_action_best_solutions(self):
        """Test case for assignments_presenter_action_best_solutions

        Get the best solutions to an assignment for all students in group.  # noqa: E501
        """
        pass

    def test_assignments_presenter_action_create(self):
        """Test case for assignments_presenter_action_create

        Assign an exercise to a group  # noqa: E501
        """
        pass

    def test_assignments_presenter_action_detail(self):
        """Test case for assignments_presenter_action_detail

        Get details of an assignment  # noqa: E501
        """
        pass

    def test_assignments_presenter_action_download_best_solutions_archive(self):
        """Test case for assignments_presenter_action_download_best_solutions_archive

        Download the best solutions of an assignment for all students in group.  # noqa: E501
        """
        pass

    def test_assignments_presenter_action_remove(self):
        """Test case for assignments_presenter_action_remove

        Delete an assignment  # noqa: E501
        """
        pass

    def test_assignments_presenter_action_solutions(self):
        """Test case for assignments_presenter_action_solutions

        Get a list of solutions of all users for the assignment  # noqa: E501
        """
        pass

    def test_assignments_presenter_action_sync_with_exercise(self):
        """Test case for assignments_presenter_action_sync_with_exercise

        Update the assignment so that it matches with the current version of the exercise (limits, texts, etc.)  # noqa: E501
        """
        pass

    def test_assignments_presenter_action_update_detail(self):
        """Test case for assignments_presenter_action_update_detail

        Update details of an assignment  # noqa: E501
        """
        pass

    def test_assignments_presenter_action_user_solutions(self):
        """Test case for assignments_presenter_action_user_solutions

        Get a list of solutions created by a user of an assignment  # noqa: E501
        """
        pass

    def test_assignments_presenter_action_validate(self):
        """Test case for assignments_presenter_action_validate

        Check if the version of the assignment is up-to-date.  # noqa: E501
        """
        pass

    def test_async_jobs_presenter_action_abort(self):
        """Test case for async_jobs_presenter_action_abort

        Retrieves details about particular async job.  # noqa: E501
        """
        pass

    def test_async_jobs_presenter_action_assignment_jobs(self):
        """Test case for async_jobs_presenter_action_assignment_jobs

        Get all pending async jobs related to a particular assignment.  # noqa: E501
        """
        pass

    def test_async_jobs_presenter_action_default(self):
        """Test case for async_jobs_presenter_action_default

        Retrieves details about particular async job.  # noqa: E501
        """
        pass

    def test_async_jobs_presenter_action_list(self):
        """Test case for async_jobs_presenter_action_list

        Retrieves details about async jobs that are either pending or were recently completed.  # noqa: E501
        """
        pass

    def test_async_jobs_presenter_action_ping(self):
        """Test case for async_jobs_presenter_action_ping

        Initiates ping job. An empty job designed to verify the async handler is running.  # noqa: E501
        """
        pass

    def test_broker_presenter_action_freeze(self):
        """Test case for broker_presenter_action_freeze

        Freeze broker and its execution.  # noqa: E501
        """
        pass

    def test_broker_presenter_action_stats(self):
        """Test case for broker_presenter_action_stats

        Get current statistics from broker.  # noqa: E501
        """
        pass

    def test_broker_presenter_action_unfreeze(self):
        """Test case for broker_presenter_action_unfreeze

        Unfreeze broker and its execution.  # noqa: E501
        """
        pass

    def test_broker_reports_presenter_action_error(self):
        """Test case for broker_reports_presenter_action_error

        Announce a backend error that is not related to any job (meant to be called by the backend)  # noqa: E501
        """
        pass

    def test_broker_reports_presenter_action_job_status(self):
        """Test case for broker_reports_presenter_action_job_status

        Update the status of a job (meant to be called by the backend)  # noqa: E501
        """
        pass

    def test_comments_presenter_action_add_comment(self):
        """Test case for comments_presenter_action_add_comment

        Add a comment to a thread  # noqa: E501
        """
        pass

    def test_comments_presenter_action_default(self):
        """Test case for comments_presenter_action_default

        Get a comment thread  # noqa: E501
        """
        pass

    def test_comments_presenter_action_delete(self):
        """Test case for comments_presenter_action_delete

        Delete a comment  # noqa: E501
        """
        pass

    def test_comments_presenter_action_set_private(self):
        """Test case for comments_presenter_action_set_private

        Set the private flag of a comment  # noqa: E501
        """
        pass

    def test_comments_presenter_action_toggle_private(self):
        """Test case for comments_presenter_action_toggle_private

        Make a private comment public or vice versa  # noqa: E501
        """
        pass

    def test_email_verification_presenter_action_email_verification(self):
        """Test case for email_verification_presenter_action_email_verification

        Verify users email.  # noqa: E501
        """
        pass

    def test_email_verification_presenter_action_resend_verification_email(self):
        """Test case for email_verification_presenter_action_resend_verification_email

        Resend the email for the current user to verify his/her email address.  # noqa: E501
        """
        pass

    def test_emails_presenter_action_default(self):
        """Test case for emails_presenter_action_default

        Sends an email with provided subject and message to all ReCodEx users.  # noqa: E501
        """
        pass

    def test_emails_presenter_action_send_to_group_members(self):
        """Test case for emails_presenter_action_send_to_group_members

        Sends an email with provided subject and message to regular members of given group and optionally to supervisors and admins.  # noqa: E501
        """
        pass

    def test_emails_presenter_action_send_to_regular_users(self):
        """Test case for emails_presenter_action_send_to_regular_users

        Sends an email with provided subject and message to all regular users.  # noqa: E501
        """
        pass

    def test_emails_presenter_action_send_to_supervisors(self):
        """Test case for emails_presenter_action_send_to_supervisors

        Sends an email with provided subject and message to all supervisors and superadmins.  # noqa: E501
        """
        pass

    def test_exercise_files_presenter_action_delete_attachment_file(self):
        """Test case for exercise_files_presenter_action_delete_attachment_file

        Delete attachment exercise file with given id  # noqa: E501
        """
        pass

    def test_exercise_files_presenter_action_delete_supplementary_file(self):
        """Test case for exercise_files_presenter_action_delete_supplementary_file

        Delete supplementary exercise file with given id  # noqa: E501
        """
        pass

    def test_exercise_files_presenter_action_download_attachment_files_archive(self):
        """Test case for exercise_files_presenter_action_download_attachment_files_archive

        Download archive containing all attachment files for exercise.  # noqa: E501
        """
        pass

    def test_exercise_files_presenter_action_download_supplementary_files_archive(self):
        """Test case for exercise_files_presenter_action_download_supplementary_files_archive

        Download archive containing all supplementary files for exercise.  # noqa: E501
        """
        pass

    def test_exercise_files_presenter_action_get_attachment_files(self):
        """Test case for exercise_files_presenter_action_get_attachment_files

        Get a list of all attachment files for an exercise  # noqa: E501
        """
        pass

    def test_exercise_files_presenter_action_get_supplementary_files(self):
        """Test case for exercise_files_presenter_action_get_supplementary_files

        Get list of all supplementary files for an exercise  # noqa: E501
        """
        pass

    def test_exercise_files_presenter_action_upload_attachment_files(self):
        """Test case for exercise_files_presenter_action_upload_attachment_files

        Associate attachment exercise files with an exercise  # noqa: E501
        """
        pass

    def test_exercise_files_presenter_action_upload_supplementary_files(self):
        """Test case for exercise_files_presenter_action_upload_supplementary_files

        Associate supplementary files with an exercise and upload them to remote file server  # noqa: E501
        """
        pass

    def test_exercises_config_presenter_action_get_configuration(self):
        """Test case for exercises_config_presenter_action_get_configuration

        Get a basic exercise high level configuration.  # noqa: E501
        """
        pass

    def test_exercises_config_presenter_action_get_environment_configs(self):
        """Test case for exercises_config_presenter_action_get_environment_configs

        Get runtime configurations for exercise.  # noqa: E501
        """
        pass

    def test_exercises_config_presenter_action_get_hardware_group_limits(self):
        """Test case for exercises_config_presenter_action_get_hardware_group_limits

        Get a description of resource limits for an exercise for given hwgroup.  # noqa: E501
        """
        pass

    def test_exercises_config_presenter_action_get_limits(self):
        """Test case for exercises_config_presenter_action_get_limits

        Get a description of resource limits for given exercise (all hwgroups all environments).  # noqa: E501
        """
        pass

    def test_exercises_config_presenter_action_get_score_config(self):
        """Test case for exercises_config_presenter_action_get_score_config

        Get score configuration for exercise based on given identification.  # noqa: E501
        """
        pass

    def test_exercises_config_presenter_action_get_tests(self):
        """Test case for exercises_config_presenter_action_get_tests

        Get tests for exercise based on given identification.  # noqa: E501
        """
        pass

    def test_exercises_config_presenter_action_get_variables_for_exercise_config(self):
        """Test case for exercises_config_presenter_action_get_variables_for_exercise_config

        Get variables for exercise configuration which are derived from given pipelines and runtime environment.  # noqa: E501
        """
        pass

    def test_exercises_config_presenter_action_remove_hardware_group_limits(self):
        """Test case for exercises_config_presenter_action_remove_hardware_group_limits

        Remove resource limits of given hwgroup from an exercise.  # noqa: E501
        """
        pass

    def test_exercises_config_presenter_action_set_configuration(self):
        """Test case for exercises_config_presenter_action_set_configuration

        Set basic exercise configuration  # noqa: E501
        """
        pass

    def test_exercises_config_presenter_action_set_hardware_group_limits(self):
        """Test case for exercises_config_presenter_action_set_hardware_group_limits

        Set resource limits for an exercise for given hwgroup.  # noqa: E501
        """
        pass

    def test_exercises_config_presenter_action_set_limits(self):
        """Test case for exercises_config_presenter_action_set_limits

        Update resource limits for given exercise. If limits for particular hwGroup or environment are not posted, no change occurs. If limits for particular hwGroup or environment are posted as null, they are removed.  # noqa: E501
        """
        pass

    def test_exercises_config_presenter_action_set_score_config(self):
        """Test case for exercises_config_presenter_action_set_score_config

        Set score configuration for exercise.  # noqa: E501
        """
        pass

    def test_exercises_config_presenter_action_set_tests(self):
        """Test case for exercises_config_presenter_action_set_tests

        Set tests for exercise based on given identification.  # noqa: E501
        """
        pass

    def test_exercises_config_presenter_action_update_environment_configs(self):
        """Test case for exercises_config_presenter_action_update_environment_configs

        Change runtime configuration of exercise. Configurations can be added or deleted here, based on what is provided in arguments.  # noqa: E501
        """
        pass

    def test_exercises_presenter_action_add_tag(self):
        """Test case for exercises_presenter_action_add_tag

        Add tag with given name to the exercise.  # noqa: E501
        """
        pass

    def test_exercises_presenter_action_all_tags(self):
        """Test case for exercises_presenter_action_all_tags

        Get list of global exercise tag names which are currently registered.  # noqa: E501
        """
        pass

    def test_exercises_presenter_action_assignments(self):
        """Test case for exercises_presenter_action_assignments

        Get all non-archived assignments created from this exercise.  # noqa: E501
        """
        pass

    def test_exercises_presenter_action_attach_group(self):
        """Test case for exercises_presenter_action_attach_group

        Attach exercise to group with given identification.  # noqa: E501
        """
        pass

    def test_exercises_presenter_action_authors(self):
        """Test case for exercises_presenter_action_authors

        List authors of all exercises, possibly filtered by a group in which the exercises appear.  # noqa: E501
        """
        pass

    def test_exercises_presenter_action_create(self):
        """Test case for exercises_presenter_action_create

        Create exercise with all default values. Exercise detail can be then changed in appropriate endpoint.  # noqa: E501
        """
        pass

    def test_exercises_presenter_action_default(self):
        """Test case for exercises_presenter_action_default

        Get a list of all exercises matching given filters in given pagination rage. The result conforms to pagination protocol.  # noqa: E501
        """
        pass

    def test_exercises_presenter_action_detach_group(self):
        """Test case for exercises_presenter_action_detach_group

        Detach exercise from given group.  # noqa: E501
        """
        pass

    def test_exercises_presenter_action_detail(self):
        """Test case for exercises_presenter_action_detail

        Get details of an exercise  # noqa: E501
        """
        pass

    def test_exercises_presenter_action_fork_from(self):
        """Test case for exercises_presenter_action_fork_from

        Fork exercise from given one into the completely new one.  # noqa: E501
        """
        pass

    def test_exercises_presenter_action_hardware_groups(self):
        """Test case for exercises_presenter_action_hardware_groups

        Set hardware groups which are associated with exercise.  # noqa: E501
        """
        pass

    def test_exercises_presenter_action_list_by_ids(self):
        """Test case for exercises_presenter_action_list_by_ids

        Get a list of exercises based on given ids.  # noqa: E501
        """
        pass

    def test_exercises_presenter_action_remove(self):
        """Test case for exercises_presenter_action_remove

        Delete an exercise  # noqa: E501
        """
        pass

    def test_exercises_presenter_action_remove_tag(self):
        """Test case for exercises_presenter_action_remove_tag

        Remove tag with given name from exercise.  # noqa: E501
        """
        pass

    def test_exercises_presenter_action_send_notification(self):
        """Test case for exercises_presenter_action_send_notification

        Sends an email to all group admins and supervisors, where the exercise is assigned. The purpose of this is to quickly notify all relevant teachers when a bug is found or the exercise is modified significantly. The response is number of emails sent (number of notified users).  # noqa: E501
        """
        pass

    def test_exercises_presenter_action_set_admins(self):
        """Test case for exercises_presenter_action_set_admins

        Change who the admins of an exercise are (all users on the list are added, prior admins not on the list are removed).  # noqa: E501
        """
        pass

    def test_exercises_presenter_action_set_archived(self):
        """Test case for exercises_presenter_action_set_archived

        (Un)mark the exercise as archived. Nothing happens if the exercise is already in the requested state.  # noqa: E501
        """
        pass

    def test_exercises_presenter_action_set_author(self):
        """Test case for exercises_presenter_action_set_author

        Change the author of the exercise. This is a very special operation reserved for powerful users.  # noqa: E501
        """
        pass

    def test_exercises_presenter_action_tags_stats(self):
        """Test case for exercises_presenter_action_tags_stats

        Get list of global exercise tag names along with how many times they have been used.  # noqa: E501
        """
        pass

    def test_exercises_presenter_action_tags_update_global(self):
        """Test case for exercises_presenter_action_tags_update_global

        Update the tag globally. At the moment, the only 'update' function is 'rename'. Other types of updates may be implemented in the future.  # noqa: E501
        """
        pass

    def test_exercises_presenter_action_update_detail(self):
        """Test case for exercises_presenter_action_update_detail

        Update detail of an exercise  # noqa: E501
        """
        pass

    def test_exercises_presenter_action_validate(self):
        """Test case for exercises_presenter_action_validate

        Check if the version of the exercise is up-to-date.  # noqa: E501
        """
        pass

    def test_extensions_presenter_action_token(self):
        """Test case for extensions_presenter_action_token

        This endpoint is used by a backend of an extension to get a proper access token (from a temp token passed via URL). It also returns details about authenticated user.  # noqa: E501
        """
        pass

    def test_extensions_presenter_action_url(self):
        """Test case for extensions_presenter_action_url

        Return URL referring to the extension with properly injected temporary JWT token.  # noqa: E501
        """
        pass

    def test_forgotten_password_presenter_action_change(self):
        """Test case for forgotten_password_presenter_action_change

        Change the user's password  # noqa: E501
        """
        pass

    def test_forgotten_password_presenter_action_default(self):
        """Test case for forgotten_password_presenter_action_default

        Request a password reset (user will receive an e-mail that prompts them to reset their password)  # noqa: E501
        """
        pass

    def test_forgotten_password_presenter_action_validate_password_strength(self):
        """Test case for forgotten_password_presenter_action_validate_password_strength

        Check if a password is strong enough  # noqa: E501
        """
        pass

    def test_group_external_attributes_presenter_action_add(self):
        """Test case for group_external_attributes_presenter_action_add

        Create an external attribute for given group.  # noqa: E501
        """
        pass

    def test_group_external_attributes_presenter_action_default(self):
        """Test case for group_external_attributes_presenter_action_default

        Return special brief groups entities with injected external attributes and given user affiliation.  # noqa: E501
        """
        pass

    def test_group_external_attributes_presenter_action_remove(self):
        """Test case for group_external_attributes_presenter_action_remove

        Remove selected attribute  # noqa: E501
        """
        pass

    def test_group_invitations_presenter_action_accept(self):
        """Test case for group_invitations_presenter_action_accept

        Allow the current user to join the corresponding group using the invitation.  # noqa: E501
        """
        pass

    def test_group_invitations_presenter_action_create(self):
        """Test case for group_invitations_presenter_action_create

        Create a new invitation for given group.  # noqa: E501
        """
        pass

    def test_group_invitations_presenter_action_default(self):
        """Test case for group_invitations_presenter_action_default

        Return invitation details including all relevant group entities (so a name can be constructed).  # noqa: E501
        """
        pass

    def test_group_invitations_presenter_action_list(self):
        """Test case for group_invitations_presenter_action_list

        List all invitations of a group.  # noqa: E501
        """
        pass

    def test_group_invitations_presenter_action_remove(self):
        """Test case for group_invitations_presenter_action_remove

        """
        pass

    def test_group_invitations_presenter_action_update(self):
        """Test case for group_invitations_presenter_action_update

        Edit the invitation.  # noqa: E501
        """
        pass

    def test_groups_presenter_action_add_group(self):
        """Test case for groups_presenter_action_add_group

        Create a new group  # noqa: E501
        """
        pass

    def test_groups_presenter_action_add_member(self):
        """Test case for groups_presenter_action_add_member

        Add/update a membership (other than student) for given user  # noqa: E501
        """
        pass

    def test_groups_presenter_action_add_student(self):
        """Test case for groups_presenter_action_add_student

        Add a student to a group  # noqa: E501
        """
        pass

    def test_groups_presenter_action_assignments(self):
        """Test case for groups_presenter_action_assignments

        Get all exercise assignments for a group  # noqa: E501
        """
        pass

    def test_groups_presenter_action_default(self):
        """Test case for groups_presenter_action_default

        Get a list of all non-archived groups a user can see. The return set is filtered by parameters.  # noqa: E501
        """
        pass

    def test_groups_presenter_action_detail(self):
        """Test case for groups_presenter_action_detail

        Get details of a group  # noqa: E501
        """
        pass

    def test_groups_presenter_action_get_exam_locks(self):
        """Test case for groups_presenter_action_get_exam_locks

        Retrieve a list of locks for given exam  # noqa: E501
        """
        pass

    def test_groups_presenter_action_lock_student(self):
        """Test case for groups_presenter_action_lock_student

        Lock student in a group and with an IP from which the request was made.  # noqa: E501
        """
        pass

    def test_groups_presenter_action_members(self):
        """Test case for groups_presenter_action_members

        Get a list of members of a group  # noqa: E501
        """
        pass

    def test_groups_presenter_action_relocate(self):
        """Test case for groups_presenter_action_relocate

        Relocate the group under a different parent.  # noqa: E501
        """
        pass

    def test_groups_presenter_action_remove_exam_period(self):
        """Test case for groups_presenter_action_remove_exam_period

        Change the group back to regular group (remove information about an exam).  # noqa: E501
        """
        pass

    def test_groups_presenter_action_remove_group(self):
        """Test case for groups_presenter_action_remove_group

        Delete a group  # noqa: E501
        """
        pass

    def test_groups_presenter_action_remove_member(self):
        """Test case for groups_presenter_action_remove_member

        Remove a member (other than student) from a group  # noqa: E501
        """
        pass

    def test_groups_presenter_action_remove_student(self):
        """Test case for groups_presenter_action_remove_student

        Remove a student from a group  # noqa: E501
        """
        pass

    def test_groups_presenter_action_set_archived(self):
        """Test case for groups_presenter_action_set_archived

        Set the 'isArchived' flag for a group  # noqa: E501
        """
        pass

    def test_groups_presenter_action_set_exam_period(self):
        """Test case for groups_presenter_action_set_exam_period

        Set an examination period (in the future) when the group will be secured for submitting. Only locked students may submit solutions in the group during this period. This endpoint is also used to update already planned exam period, but only dates in the future can be edited (e.g., once an exam begins, the beginning may no longer be updated).  # noqa: E501
        """
        pass

    def test_groups_presenter_action_set_organizational(self):
        """Test case for groups_presenter_action_set_organizational

        Set the 'isOrganizational' flag for a group  # noqa: E501
        """
        pass

    def test_groups_presenter_action_shadow_assignments(self):
        """Test case for groups_presenter_action_shadow_assignments

        Get all shadow assignments for a group  # noqa: E501
        """
        pass

    def test_groups_presenter_action_stats(self):
        """Test case for groups_presenter_action_stats

        Get statistics of a group. If the user does not have the rights to view all of these, try to at least return their statistics.  # noqa: E501
        """
        pass

    def test_groups_presenter_action_students_solutions(self):
        """Test case for groups_presenter_action_students_solutions

        Get all solutions of a single student from all assignments in a group  # noqa: E501
        """
        pass

    def test_groups_presenter_action_students_stats(self):
        """Test case for groups_presenter_action_students_stats

        Get statistics of a single student in a group  # noqa: E501
        """
        pass

    def test_groups_presenter_action_subgroups(self):
        """Test case for groups_presenter_action_subgroups

        Get a list of subgroups of a group  # noqa: E501
        """
        pass

    def test_groups_presenter_action_unlock_student(self):
        """Test case for groups_presenter_action_unlock_student

        Unlock a student currently locked in a group.  # noqa: E501
        """
        pass

    def test_groups_presenter_action_update_group(self):
        """Test case for groups_presenter_action_update_group

        Update group info  # noqa: E501
        """
        pass

    def test_groups_presenter_action_validate_add_group_data(self):
        """Test case for groups_presenter_action_validate_add_group_data

        Validate group creation data  # noqa: E501
        """
        pass

    def test_hardware_groups_presenter_action_default(self):
        """Test case for hardware_groups_presenter_action_default

        Get a list of all hardware groups in system  # noqa: E501
        """
        pass

    def test_instances_presenter_action_create_instance(self):
        """Test case for instances_presenter_action_create_instance

        Create a new instance  # noqa: E501
        """
        pass

    def test_instances_presenter_action_create_licence(self):
        """Test case for instances_presenter_action_create_licence

        Create a new license for an instance  # noqa: E501
        """
        pass

    def test_instances_presenter_action_default(self):
        """Test case for instances_presenter_action_default

        Get a list of all instances  # noqa: E501
        """
        pass

    def test_instances_presenter_action_delete_instance(self):
        """Test case for instances_presenter_action_delete_instance

        Delete an instance  # noqa: E501
        """
        pass

    def test_instances_presenter_action_delete_licence(self):
        """Test case for instances_presenter_action_delete_licence

        Remove existing license for an instance  # noqa: E501
        """
        pass

    def test_instances_presenter_action_detail(self):
        """Test case for instances_presenter_action_detail

        Get details of an instance  # noqa: E501
        """
        pass

    def test_instances_presenter_action_licences(self):
        """Test case for instances_presenter_action_licences

        Get a list of licenses associated with an instance  # noqa: E501
        """
        pass

    def test_instances_presenter_action_update_instance(self):
        """Test case for instances_presenter_action_update_instance

        Update an instance  # noqa: E501
        """
        pass

    def test_instances_presenter_action_update_licence(self):
        """Test case for instances_presenter_action_update_licence

        Update an existing license for an instance  # noqa: E501
        """
        pass

    def test_login_presenter_action_default(self):
        """Test case for login_presenter_action_default

        Log in using user credentials  # noqa: E501
        """
        pass

    def test_login_presenter_action_external(self):
        """Test case for login_presenter_action_external

        Log in using an external authentication service  # noqa: E501
        """
        pass

    def test_login_presenter_action_issue_restricted_token(self):
        """Test case for login_presenter_action_issue_restricted_token

        Issue a new access token with a restricted set of scopes  # noqa: E501
        """
        pass

    def test_login_presenter_action_refresh(self):
        """Test case for login_presenter_action_refresh

        Refresh the access token of current user  # noqa: E501
        """
        pass

    def test_login_presenter_action_take_over(self):
        """Test case for login_presenter_action_take_over

        Takeover user account with specified user identification.  # noqa: E501
        """
        pass

    def test_notifications_presenter_action_all(self):
        """Test case for notifications_presenter_action_all

        Get all notifications in the system.  # noqa: E501
        """
        pass

    def test_notifications_presenter_action_create(self):
        """Test case for notifications_presenter_action_create

        Create notification with given attributes  # noqa: E501
        """
        pass

    def test_notifications_presenter_action_default(self):
        """Test case for notifications_presenter_action_default

        Get all notifications which are currently active. If groupsIds is given returns only the ones from given groups (and their ancestors) and global ones (without group).  # noqa: E501
        """
        pass

    def test_notifications_presenter_action_remove(self):
        """Test case for notifications_presenter_action_remove

        Delete a notification  # noqa: E501
        """
        pass

    def test_notifications_presenter_action_update(self):
        """Test case for notifications_presenter_action_update

        Update notification  # noqa: E501
        """
        pass

    def test_pipelines_presenter_action_create_pipeline(self):
        """Test case for pipelines_presenter_action_create_pipeline

        Create a brand new pipeline.  # noqa: E501
        """
        pass

    def test_pipelines_presenter_action_default(self):
        """Test case for pipelines_presenter_action_default

        Get a list of pipelines with an optional filter, ordering, and pagination pruning. The result conforms to pagination protocol.  # noqa: E501
        """
        pass

    def test_pipelines_presenter_action_delete_supplementary_file(self):
        """Test case for pipelines_presenter_action_delete_supplementary_file

        Delete supplementary pipeline file with given id  # noqa: E501
        """
        pass

    def test_pipelines_presenter_action_fork_pipeline(self):
        """Test case for pipelines_presenter_action_fork_pipeline

        Create a complete copy of given pipeline.  # noqa: E501
        """
        pass

    def test_pipelines_presenter_action_get_default_boxes(self):
        """Test case for pipelines_presenter_action_get_default_boxes

        Get a list of default boxes which might be used in pipeline.  # noqa: E501
        """
        pass

    def test_pipelines_presenter_action_get_pipeline(self):
        """Test case for pipelines_presenter_action_get_pipeline

        Get pipeline based on given identification.  # noqa: E501
        """
        pass

    def test_pipelines_presenter_action_get_pipeline_exercises(self):
        """Test case for pipelines_presenter_action_get_pipeline_exercises

        Get all exercises that use given pipeline. Only bare minimum is retrieved for each exercise (localized name and author).  # noqa: E501
        """
        pass

    def test_pipelines_presenter_action_get_supplementary_files(self):
        """Test case for pipelines_presenter_action_get_supplementary_files

        Get list of all supplementary files for a pipeline  # noqa: E501
        """
        pass

    def test_pipelines_presenter_action_remove_pipeline(self):
        """Test case for pipelines_presenter_action_remove_pipeline

        Delete an pipeline  # noqa: E501
        """
        pass

    def test_pipelines_presenter_action_update_pipeline(self):
        """Test case for pipelines_presenter_action_update_pipeline

        Update pipeline with given data.  # noqa: E501
        """
        pass

    def test_pipelines_presenter_action_update_runtime_environments(self):
        """Test case for pipelines_presenter_action_update_runtime_environments

        Set runtime environments associated with given pipeline.  # noqa: E501
        """
        pass

    def test_pipelines_presenter_action_upload_supplementary_files(self):
        """Test case for pipelines_presenter_action_upload_supplementary_files

        Associate supplementary files with a pipeline and upload them to remote file server  # noqa: E501
        """
        pass

    def test_pipelines_presenter_action_validate_pipeline(self):
        """Test case for pipelines_presenter_action_validate_pipeline

        Check if the version of the pipeline is up-to-date.  # noqa: E501
        """
        pass

    def test_plagiarism_presenter_action_add_similarities(self):
        """Test case for plagiarism_presenter_action_add_similarities

        Appends one detected similarity record (similarities associated with one file and one other author) into a detected batch. This division was selected to make the appends relatively small and manageable.  # noqa: E501
        """
        pass

    def test_plagiarism_presenter_action_batch_detail(self):
        """Test case for plagiarism_presenter_action_batch_detail

        Fetch a detail of a particular batch record.  # noqa: E501
        """
        pass

    def test_plagiarism_presenter_action_create_batch(self):
        """Test case for plagiarism_presenter_action_create_batch

        Create new detection batch record  # noqa: E501
        """
        pass

    def test_plagiarism_presenter_action_get_similarities(self):
        """Test case for plagiarism_presenter_action_get_similarities

        Retrieve detected plagiarism records from a specific batch related to one solution. Returns a list of detected similarities entities (similar file records are nested within).  # noqa: E501
        """
        pass

    def test_plagiarism_presenter_action_list_batches(self):
        """Test case for plagiarism_presenter_action_list_batches

        Get a list of all batches, optionally filtered by query params.  # noqa: E501
        """
        pass

    def test_plagiarism_presenter_action_update_batch(self):
        """Test case for plagiarism_presenter_action_update_batch

        Update detection bath record. At the moment, only the uploadCompletedAt can be changed.  # noqa: E501
        """
        pass

    def test_reference_exercise_solutions_presenter_action_delete_reference_solution(self):
        """Test case for reference_exercise_solutions_presenter_action_delete_reference_solution

        Delete reference solution with given identification.  # noqa: E501
        """
        pass

    def test_reference_exercise_solutions_presenter_action_delete_submission(self):
        """Test case for reference_exercise_solutions_presenter_action_delete_submission

        Remove reference solution evaluation (submission) permanently.  # noqa: E501
        """
        pass

    def test_reference_exercise_solutions_presenter_action_detail(self):
        """Test case for reference_exercise_solutions_presenter_action_detail

        Get details of a reference solution  # noqa: E501
        """
        pass

    def test_reference_exercise_solutions_presenter_action_download_result_archive(self):
        """Test case for reference_exercise_solutions_presenter_action_download_result_archive

        Download result archive from backend for a reference solution evaluation  # noqa: E501
        """
        pass

    def test_reference_exercise_solutions_presenter_action_download_solution_archive(self):
        """Test case for reference_exercise_solutions_presenter_action_download_solution_archive

        Download archive containing all solution files for particular reference solution.  # noqa: E501
        """
        pass

    def test_reference_exercise_solutions_presenter_action_evaluation_score_config(self):
        """Test case for reference_exercise_solutions_presenter_action_evaluation_score_config

        Get score configuration associated with given submission evaluation  # noqa: E501
        """
        pass

    def test_reference_exercise_solutions_presenter_action_files(self):
        """Test case for reference_exercise_solutions_presenter_action_files

        Get the list of submitted files of the solution.  # noqa: E501
        """
        pass

    def test_reference_exercise_solutions_presenter_action_pre_submit(self):
        """Test case for reference_exercise_solutions_presenter_action_pre_submit

        Pre submit action which will, based on given files, detect possible runtime environments for the exercise. Also it can be further used for entry points and other important things that should be provided by user during submit.  # noqa: E501
        """
        pass

    def test_reference_exercise_solutions_presenter_action_resubmit(self):
        """Test case for reference_exercise_solutions_presenter_action_resubmit

        Evaluate a single reference exercise solution for all configured hardware groups  # noqa: E501
        """
        pass

    def test_reference_exercise_solutions_presenter_action_resubmit_all(self):
        """Test case for reference_exercise_solutions_presenter_action_resubmit_all

        Evaluate all reference solutions for an exercise (and for all configured hardware groups).  # noqa: E501
        """
        pass

    def test_reference_exercise_solutions_presenter_action_set_visibility(self):
        """Test case for reference_exercise_solutions_presenter_action_set_visibility

        Set visibility of given reference solution.  # noqa: E501
        """
        pass

    def test_reference_exercise_solutions_presenter_action_solutions(self):
        """Test case for reference_exercise_solutions_presenter_action_solutions

        Get reference solutions for an exercise  # noqa: E501
        """
        pass

    def test_reference_exercise_solutions_presenter_action_submission(self):
        """Test case for reference_exercise_solutions_presenter_action_submission

        Get reference solution evaluation (i.e., submission) for an exercise solution.  # noqa: E501
        """
        pass

    def test_reference_exercise_solutions_presenter_action_submissions(self):
        """Test case for reference_exercise_solutions_presenter_action_submissions

        Get a list of submissions for given reference solution.  # noqa: E501
        """
        pass

    def test_reference_exercise_solutions_presenter_action_submit(self):
        """Test case for reference_exercise_solutions_presenter_action_submit

        Add new reference solution to an exercise  # noqa: E501
        """
        pass

    def test_reference_exercise_solutions_presenter_action_update(self):
        """Test case for reference_exercise_solutions_presenter_action_update

        Update details about the ref. solution (note, etc...)  # noqa: E501
        """
        pass

    def test_registration_presenter_action_accept_invitation(self):
        """Test case for registration_presenter_action_accept_invitation

        Accept invitation and create corresponding user account.  # noqa: E501
        """
        pass

    def test_registration_presenter_action_create_account(self):
        """Test case for registration_presenter_action_create_account

        Create a user account  # noqa: E501
        """
        pass

    def test_registration_presenter_action_create_invitation(self):
        """Test case for registration_presenter_action_create_invitation

        Create an invitation for a user and send it over via email  # noqa: E501
        """
        pass

    def test_registration_presenter_action_validate_registration_data(self):
        """Test case for registration_presenter_action_validate_registration_data

        Check if the registered E-mail isn't already used and if the password is strong enough  # noqa: E501
        """
        pass

    def test_runtime_environments_presenter_action_default(self):
        """Test case for runtime_environments_presenter_action_default

        Get a list of all runtime environments  # noqa: E501
        """
        pass

    def test_security_presenter_action_check(self):
        """Test case for security_presenter_action_check

        """
        pass

    def test_shadow_assignments_presenter_action_create(self):
        """Test case for shadow_assignments_presenter_action_create

        Create new shadow assignment in given group.  # noqa: E501
        """
        pass

    def test_shadow_assignments_presenter_action_create_points(self):
        """Test case for shadow_assignments_presenter_action_create_points

        Create new points for shadow assignment and user.  # noqa: E501
        """
        pass

    def test_shadow_assignments_presenter_action_detail(self):
        """Test case for shadow_assignments_presenter_action_detail

        Get details of a shadow assignment  # noqa: E501
        """
        pass

    def test_shadow_assignments_presenter_action_remove(self):
        """Test case for shadow_assignments_presenter_action_remove

        Delete shadow assignment  # noqa: E501
        """
        pass

    def test_shadow_assignments_presenter_action_remove_points(self):
        """Test case for shadow_assignments_presenter_action_remove_points

        Remove points of shadow assignment.  # noqa: E501
        """
        pass

    def test_shadow_assignments_presenter_action_update_detail(self):
        """Test case for shadow_assignments_presenter_action_update_detail

        Update details of an shadow assignment  # noqa: E501
        """
        pass

    def test_shadow_assignments_presenter_action_update_points(self):
        """Test case for shadow_assignments_presenter_action_update_points

        Update detail of shadow assignment points.  # noqa: E501
        """
        pass

    def test_shadow_assignments_presenter_action_validate(self):
        """Test case for shadow_assignments_presenter_action_validate

        Check if the version of the shadow assignment is up-to-date.  # noqa: E501
        """
        pass

    def test_sis_presenter_action_bind_group(self):
        """Test case for sis_presenter_action_bind_group

        Bind an existing local group to a SIS group  # noqa: E501
        """
        pass

    def test_sis_presenter_action_create_group(self):
        """Test case for sis_presenter_action_create_group

        Create a new group based on a SIS group  # noqa: E501
        """
        pass

    def test_sis_presenter_action_delete_term(self):
        """Test case for sis_presenter_action_delete_term

        Delete a term  # noqa: E501
        """
        pass

    def test_sis_presenter_action_edit_term(self):
        """Test case for sis_presenter_action_edit_term

        Set details of a term  # noqa: E501
        """
        pass

    def test_sis_presenter_action_get_terms(self):
        """Test case for sis_presenter_action_get_terms

        Get a list of all registered SIS terms  # noqa: E501
        """
        pass

    def test_sis_presenter_action_possible_parents(self):
        """Test case for sis_presenter_action_possible_parents

        Find groups that can be chosen as parents of a group created from given SIS group by current user  # noqa: E501
        """
        pass

    def test_sis_presenter_action_register_term(self):
        """Test case for sis_presenter_action_register_term

        Register a new term  # noqa: E501
        """
        pass

    def test_sis_presenter_action_status(self):
        """Test case for sis_presenter_action_status

        """
        pass

    def test_sis_presenter_action_subscribed_courses(self):
        """Test case for sis_presenter_action_subscribed_courses

        Get all courses subscirbed by a student and corresponding ReCodEx groups. Organizational and archived groups are filtered out from the result. Each course holds bound group IDs and group objects are returned in a separate array. Whole ancestral closure of groups is returned, so the webapp may properly assemble hiarichial group names.  # noqa: E501
        """
        pass

    def test_sis_presenter_action_supervised_courses(self):
        """Test case for sis_presenter_action_supervised_courses

        Get supervised SIS courses and corresponding ReCodEx groups. Each course holds bound group IDs and group objects are returned in a separate array. Whole ancestral closure of groups is returned, so the webapp may properly assemble hiarichial group names.  # noqa: E501
        """
        pass

    def test_sis_presenter_action_unbind_group(self):
        """Test case for sis_presenter_action_unbind_group

        Delete a binding between a local group and a SIS group  # noqa: E501
        """
        pass

    def test_submission_failures_presenter_action_default(self):
        """Test case for submission_failures_presenter_action_default

        List all submission failures, ever  # noqa: E501
        """
        pass

    def test_submission_failures_presenter_action_detail(self):
        """Test case for submission_failures_presenter_action_detail

        Get details of a failure  # noqa: E501
        """
        pass

    def test_submission_failures_presenter_action_resolve(self):
        """Test case for submission_failures_presenter_action_resolve

        Mark a submission failure as resolved  # noqa: E501
        """
        pass

    def test_submission_failures_presenter_action_unresolved(self):
        """Test case for submission_failures_presenter_action_unresolved

        List all unresolved submission failures  # noqa: E501
        """
        pass

    def test_submit_presenter_action_can_submit(self):
        """Test case for submit_presenter_action_can_submit

        Check if the given user can submit solutions to the assignment  # noqa: E501
        """
        pass

    def test_submit_presenter_action_pre_submit(self):
        """Test case for submit_presenter_action_pre_submit

        Pre submit action which will, based on given files, detect possible runtime environments for the assignment. Also it can be further used for entry points and other important things that should be provided by user during submit.  # noqa: E501
        """
        pass

    def test_submit_presenter_action_resubmit(self):
        """Test case for submit_presenter_action_resubmit

        Resubmit a solution (i.e., create a new submission)  # noqa: E501
        """
        pass

    def test_submit_presenter_action_resubmit_all(self):
        """Test case for submit_presenter_action_resubmit_all

        Start async job that resubmits all submissions of an assignment. No job is started when there are pending resubmit jobs for the selected assignment. Returns list of pending async jobs (same as GET call)  # noqa: E501
        """
        pass

    def test_submit_presenter_action_resubmit_all_async_job_status(self):
        """Test case for submit_presenter_action_resubmit_all_async_job_status

        Return a list of all pending resubmit async jobs associated with given assignment. Under normal circumstances, the list should be either empty, or contain only one job.  # noqa: E501
        """
        pass

    def test_submit_presenter_action_submit(self):
        """Test case for submit_presenter_action_submit

        Submit a solution of an assignment  # noqa: E501
        """
        pass

    def test_uploaded_files_presenter_action_append_partial(self):
        """Test case for uploaded_files_presenter_action_append_partial

        Add another chunk to partial upload.  # noqa: E501
        """
        pass

    def test_uploaded_files_presenter_action_cancel_partial(self):
        """Test case for uploaded_files_presenter_action_cancel_partial

        Cancel partial upload and remove all uploaded chunks.  # noqa: E501
        """
        pass

    def test_uploaded_files_presenter_action_complete_partial(self):
        """Test case for uploaded_files_presenter_action_complete_partial

        Finalize partial upload and convert the partial file into UploadFile. All data chunks are extracted from the store, assembled into one file, and is moved back into the store.  # noqa: E501
        """
        pass

    def test_uploaded_files_presenter_action_content(self):
        """Test case for uploaded_files_presenter_action_content

        Get the contents of a file  # noqa: E501
        """
        pass

    def test_uploaded_files_presenter_action_detail(self):
        """Test case for uploaded_files_presenter_action_detail

        Get details of a file  # noqa: E501
        """
        pass

    def test_uploaded_files_presenter_action_digest(self):
        """Test case for uploaded_files_presenter_action_digest

        Compute a digest using a hashing algorithm. This feature is intended for upload checksums only. In the future, we might want to add algorithm selection via query parameter (default is SHA1).  # noqa: E501
        """
        pass

    def test_uploaded_files_presenter_action_download(self):
        """Test case for uploaded_files_presenter_action_download

        Download a file  # noqa: E501
        """
        pass

    def test_uploaded_files_presenter_action_download_supplementary_file(self):
        """Test case for uploaded_files_presenter_action_download_supplementary_file

        Download supplementary file  # noqa: E501
        """
        pass

    def test_uploaded_files_presenter_action_start_partial(self):
        """Test case for uploaded_files_presenter_action_start_partial

        Start new upload per-partes. This process expects the file is uploaded as a sequence of PUT requests, each one carrying a chunk of data. Once all the chunks are in place, the complete request assembles them together in one file and transforms UploadPartialFile into UploadFile entity.  # noqa: E501
        """
        pass

    def test_uploaded_files_presenter_action_upload(self):
        """Test case for uploaded_files_presenter_action_upload

        Upload a file  # noqa: E501
        """
        pass

    def test_user_calendars_presenter_action_create_calendar(self):
        """Test case for user_calendars_presenter_action_create_calendar

        Create new iCal token for a particular user.  # noqa: E501
        """
        pass

    def test_user_calendars_presenter_action_default(self):
        """Test case for user_calendars_presenter_action_default

        Get calendar values in iCal format that correspond to given token.  # noqa: E501
        """
        pass

    def test_user_calendars_presenter_action_expire_calendar(self):
        """Test case for user_calendars_presenter_action_expire_calendar

        Set given iCal token to expired state. Expired tokens cannot be used to retrieve calendars.  # noqa: E501
        """
        pass

    def test_user_calendars_presenter_action_user_calendars(self):
        """Test case for user_calendars_presenter_action_user_calendars

        Get all iCal tokens of one user (including expired ones).  # noqa: E501
        """
        pass

    def test_users_presenter_action_all_groups(self):
        """Test case for users_presenter_action_all_groups

        Get a list of all groups for a user  # noqa: E501
        """
        pass

    def test_users_presenter_action_create_local_account(self):
        """Test case for users_presenter_action_create_local_account

        If user is registered externally, add local account as another login method. Created password is empty and has to be changed in order to use it.  # noqa: E501
        """
        pass

    def test_users_presenter_action_default(self):
        """Test case for users_presenter_action_default

        Get a list of all users matching given filters in given pagination rage. The result conforms to pagination protocol.  # noqa: E501
        """
        pass

    def test_users_presenter_action_delete(self):
        """Test case for users_presenter_action_delete

        Delete a user account  # noqa: E501
        """
        pass

    def test_users_presenter_action_detail(self):
        """Test case for users_presenter_action_detail

        Get details of a user account  # noqa: E501
        """
        pass

    def test_users_presenter_action_groups(self):
        """Test case for users_presenter_action_groups

        Get a list of non-archived groups for a user  # noqa: E501
        """
        pass

    def test_users_presenter_action_instances(self):
        """Test case for users_presenter_action_instances

        Get a list of instances where a user is registered  # noqa: E501
        """
        pass

    def test_users_presenter_action_invalidate_tokens(self):
        """Test case for users_presenter_action_invalidate_tokens

        Invalidate all existing tokens issued for given user  # noqa: E501
        """
        pass

    def test_users_presenter_action_list_by_ids(self):
        """Test case for users_presenter_action_list_by_ids

        Get a list of users based on given ids.  # noqa: E501
        """
        pass

    def test_users_presenter_action_remove_external_login(self):
        """Test case for users_presenter_action_remove_external_login

        Remove external ID of given authentication service.  # noqa: E501
        """
        pass

    def test_users_presenter_action_set_role(self):
        """Test case for users_presenter_action_set_role

        Set a given role to the given user.  # noqa: E501
        """
        pass

    def test_users_presenter_action_update_external_login(self):
        """Test case for users_presenter_action_update_external_login

        Add or update existing external ID of given authentication service.  # noqa: E501
        """
        pass

    def test_users_presenter_action_update_profile(self):
        """Test case for users_presenter_action_update_profile

        Update the profile associated with a user account  # noqa: E501
        """
        pass

    def test_users_presenter_action_update_settings(self):
        """Test case for users_presenter_action_update_settings

        Update the profile settings  # noqa: E501
        """
        pass

    def test_users_presenter_action_update_ui_data(self):
        """Test case for users_presenter_action_update_ui_data

        Update the user-specific structured UI data  # noqa: E501
        """
        pass

    def test_worker_files_presenter_action_download_supplementary_file(self):
        """Test case for worker_files_presenter_action_download_supplementary_file

        Sends over an exercise supplementary file (a data file required by the tests).  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
