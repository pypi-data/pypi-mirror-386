# coding: utf-8

"""
    ReCodEx API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExercisesIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'int',
        'difficulty': 'str',
        'localized_texts': 'list[object]',
        'is_public': 'bool',
        'is_locked': 'bool',
        'configuration_type': 'str',
        'solution_files_limit': 'int',
        'solution_size_limit': 'int',
        'merge_judge_logs': 'bool'
    }

    attribute_map = {
        'version': 'version',
        'difficulty': 'difficulty',
        'localized_texts': 'localizedTexts',
        'is_public': 'isPublic',
        'is_locked': 'isLocked',
        'configuration_type': 'configurationType',
        'solution_files_limit': 'solutionFilesLimit',
        'solution_size_limit': 'solutionSizeLimit',
        'merge_judge_logs': 'mergeJudgeLogs'
    }

    def __init__(self, version=None, difficulty=None, localized_texts=None, is_public=None, is_locked=None, configuration_type=None, solution_files_limit=None, solution_size_limit=None, merge_judge_logs=None):  # noqa: E501
        """ExercisesIdBody - a model defined in Swagger"""  # noqa: E501
        self._version = None
        self._difficulty = None
        self._localized_texts = None
        self._is_public = None
        self._is_locked = None
        self._configuration_type = None
        self._solution_files_limit = None
        self._solution_size_limit = None
        self._merge_judge_logs = None
        self.discriminator = None
        self.version = version
        self.difficulty = difficulty
        self.localized_texts = localized_texts
        if is_public is not None:
            self.is_public = is_public
        if is_locked is not None:
            self.is_locked = is_locked
        if configuration_type is not None:
            self.configuration_type = configuration_type
        self.solution_files_limit = solution_files_limit
        self.solution_size_limit = solution_size_limit
        self.merge_judge_logs = merge_judge_logs

    @property
    def version(self):
        """Gets the version of this ExercisesIdBody.  # noqa: E501

        Version of the edited exercise  # noqa: E501

        :return: The version of this ExercisesIdBody.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ExercisesIdBody.

        Version of the edited exercise  # noqa: E501

        :param version: The version of this ExercisesIdBody.  # noqa: E501
        :type: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def difficulty(self):
        """Gets the difficulty of this ExercisesIdBody.  # noqa: E501

        Difficulty of an exercise, should be one of 'easy', 'medium' or 'hard'  # noqa: E501

        :return: The difficulty of this ExercisesIdBody.  # noqa: E501
        :rtype: str
        """
        return self._difficulty

    @difficulty.setter
    def difficulty(self, difficulty):
        """Sets the difficulty of this ExercisesIdBody.

        Difficulty of an exercise, should be one of 'easy', 'medium' or 'hard'  # noqa: E501

        :param difficulty: The difficulty of this ExercisesIdBody.  # noqa: E501
        :type: str
        """
        if difficulty is None:
            raise ValueError("Invalid value for `difficulty`, must not be `None`")  # noqa: E501

        self._difficulty = difficulty

    @property
    def localized_texts(self):
        """Gets the localized_texts of this ExercisesIdBody.  # noqa: E501

        A description of the exercise  # noqa: E501

        :return: The localized_texts of this ExercisesIdBody.  # noqa: E501
        :rtype: list[object]
        """
        return self._localized_texts

    @localized_texts.setter
    def localized_texts(self, localized_texts):
        """Sets the localized_texts of this ExercisesIdBody.

        A description of the exercise  # noqa: E501

        :param localized_texts: The localized_texts of this ExercisesIdBody.  # noqa: E501
        :type: list[object]
        """
        if localized_texts is None:
            raise ValueError("Invalid value for `localized_texts`, must not be `None`")  # noqa: E501

        self._localized_texts = localized_texts

    @property
    def is_public(self):
        """Gets the is_public of this ExercisesIdBody.  # noqa: E501

        Exercise can be public or private  # noqa: E501

        :return: The is_public of this ExercisesIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this ExercisesIdBody.

        Exercise can be public or private  # noqa: E501

        :param is_public: The is_public of this ExercisesIdBody.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    @property
    def is_locked(self):
        """Gets the is_locked of this ExercisesIdBody.  # noqa: E501

        If true, the exercise cannot be assigned  # noqa: E501

        :return: The is_locked of this ExercisesIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_locked

    @is_locked.setter
    def is_locked(self, is_locked):
        """Sets the is_locked of this ExercisesIdBody.

        If true, the exercise cannot be assigned  # noqa: E501

        :param is_locked: The is_locked of this ExercisesIdBody.  # noqa: E501
        :type: bool
        """

        self._is_locked = is_locked

    @property
    def configuration_type(self):
        """Gets the configuration_type of this ExercisesIdBody.  # noqa: E501

        Identifies the way the evaluation of the exercise is configured  # noqa: E501

        :return: The configuration_type of this ExercisesIdBody.  # noqa: E501
        :rtype: str
        """
        return self._configuration_type

    @configuration_type.setter
    def configuration_type(self, configuration_type):
        """Sets the configuration_type of this ExercisesIdBody.

        Identifies the way the evaluation of the exercise is configured  # noqa: E501

        :param configuration_type: The configuration_type of this ExercisesIdBody.  # noqa: E501
        :type: str
        """

        self._configuration_type = configuration_type

    @property
    def solution_files_limit(self):
        """Gets the solution_files_limit of this ExercisesIdBody.  # noqa: E501

        Maximal number of files in a solution being submitted (default for assignments)  # noqa: E501

        :return: The solution_files_limit of this ExercisesIdBody.  # noqa: E501
        :rtype: int
        """
        return self._solution_files_limit

    @solution_files_limit.setter
    def solution_files_limit(self, solution_files_limit):
        """Sets the solution_files_limit of this ExercisesIdBody.

        Maximal number of files in a solution being submitted (default for assignments)  # noqa: E501

        :param solution_files_limit: The solution_files_limit of this ExercisesIdBody.  # noqa: E501
        :type: int
        """
        if solution_files_limit is None:
            raise ValueError("Invalid value for `solution_files_limit`, must not be `None`")  # noqa: E501

        self._solution_files_limit = solution_files_limit

    @property
    def solution_size_limit(self):
        """Gets the solution_size_limit of this ExercisesIdBody.  # noqa: E501

        Maximal size (bytes) of all files in a solution being submitted (default for assignments)  # noqa: E501

        :return: The solution_size_limit of this ExercisesIdBody.  # noqa: E501
        :rtype: int
        """
        return self._solution_size_limit

    @solution_size_limit.setter
    def solution_size_limit(self, solution_size_limit):
        """Sets the solution_size_limit of this ExercisesIdBody.

        Maximal size (bytes) of all files in a solution being submitted (default for assignments)  # noqa: E501

        :param solution_size_limit: The solution_size_limit of this ExercisesIdBody.  # noqa: E501
        :type: int
        """
        if solution_size_limit is None:
            raise ValueError("Invalid value for `solution_size_limit`, must not be `None`")  # noqa: E501

        self._solution_size_limit = solution_size_limit

    @property
    def merge_judge_logs(self):
        """Gets the merge_judge_logs of this ExercisesIdBody.  # noqa: E501

        If true, judge stderr will be merged into stdout (default for assignments)  # noqa: E501

        :return: The merge_judge_logs of this ExercisesIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._merge_judge_logs

    @merge_judge_logs.setter
    def merge_judge_logs(self, merge_judge_logs):
        """Sets the merge_judge_logs of this ExercisesIdBody.

        If true, judge stderr will be merged into stdout (default for assignments)  # noqa: E501

        :param merge_judge_logs: The merge_judge_logs of this ExercisesIdBody.  # noqa: E501
        :type: bool
        """
        if merge_judge_logs is None:
            raise ValueError("Invalid value for `merge_judge_logs`, must not be `None`")  # noqa: E501

        self._merge_judge_logs = merge_judge_logs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExercisesIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExercisesIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
