# coding: utf-8

"""
    ReCodEx API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1UsersBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'password': 'str',
        'password_confirm': 'str',
        'instance_id': 'str',
        'titles_before_name': 'str',
        'titles_after_name': 'str',
        'ignore_name_collision': 'bool'
    }

    attribute_map = {
        'email': 'email',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'password': 'password',
        'password_confirm': 'passwordConfirm',
        'instance_id': 'instanceId',
        'titles_before_name': 'titlesBeforeName',
        'titles_after_name': 'titlesAfterName',
        'ignore_name_collision': 'ignoreNameCollision'
    }

    def __init__(self, email=None, first_name=None, last_name=None, password=None, password_confirm=None, instance_id=None, titles_before_name=None, titles_after_name=None, ignore_name_collision=None):  # noqa: E501
        """V1UsersBody - a model defined in Swagger"""  # noqa: E501
        self._email = None
        self._first_name = None
        self._last_name = None
        self._password = None
        self._password_confirm = None
        self._instance_id = None
        self._titles_before_name = None
        self._titles_after_name = None
        self._ignore_name_collision = None
        self.discriminator = None
        self.email = email
        self.first_name = first_name
        self.last_name = last_name
        self.password = password
        self.password_confirm = password_confirm
        self.instance_id = instance_id
        if titles_before_name is not None:
            self.titles_before_name = titles_before_name
        if titles_after_name is not None:
            self.titles_after_name = titles_after_name
        if ignore_name_collision is not None:
            self.ignore_name_collision = ignore_name_collision

    @property
    def email(self):
        """Gets the email of this V1UsersBody.  # noqa: E501

        An email that will serve as a login name  # noqa: E501

        :return: The email of this V1UsersBody.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this V1UsersBody.

        An email that will serve as a login name  # noqa: E501

        :param email: The email of this V1UsersBody.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this V1UsersBody.  # noqa: E501

        First name  # noqa: E501

        :return: The first_name of this V1UsersBody.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this V1UsersBody.

        First name  # noqa: E501

        :param first_name: The first_name of this V1UsersBody.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this V1UsersBody.  # noqa: E501

        Last name  # noqa: E501

        :return: The last_name of this V1UsersBody.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this V1UsersBody.

        Last name  # noqa: E501

        :param last_name: The last_name of this V1UsersBody.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def password(self):
        """Gets the password of this V1UsersBody.  # noqa: E501

        A password for authentication  # noqa: E501

        :return: The password of this V1UsersBody.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this V1UsersBody.

        A password for authentication  # noqa: E501

        :param password: The password of this V1UsersBody.  # noqa: E501
        :type: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def password_confirm(self):
        """Gets the password_confirm of this V1UsersBody.  # noqa: E501

        A password confirmation  # noqa: E501

        :return: The password_confirm of this V1UsersBody.  # noqa: E501
        :rtype: str
        """
        return self._password_confirm

    @password_confirm.setter
    def password_confirm(self, password_confirm):
        """Sets the password_confirm of this V1UsersBody.

        A password confirmation  # noqa: E501

        :param password_confirm: The password_confirm of this V1UsersBody.  # noqa: E501
        :type: str
        """
        if password_confirm is None:
            raise ValueError("Invalid value for `password_confirm`, must not be `None`")  # noqa: E501

        self._password_confirm = password_confirm

    @property
    def instance_id(self):
        """Gets the instance_id of this V1UsersBody.  # noqa: E501

        Identifier of the instance to register in  # noqa: E501

        :return: The instance_id of this V1UsersBody.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this V1UsersBody.

        Identifier of the instance to register in  # noqa: E501

        :param instance_id: The instance_id of this V1UsersBody.  # noqa: E501
        :type: str
        """
        if instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")  # noqa: E501

        self._instance_id = instance_id

    @property
    def titles_before_name(self):
        """Gets the titles_before_name of this V1UsersBody.  # noqa: E501

        Titles which is placed before user name  # noqa: E501

        :return: The titles_before_name of this V1UsersBody.  # noqa: E501
        :rtype: str
        """
        return self._titles_before_name

    @titles_before_name.setter
    def titles_before_name(self, titles_before_name):
        """Sets the titles_before_name of this V1UsersBody.

        Titles which is placed before user name  # noqa: E501

        :param titles_before_name: The titles_before_name of this V1UsersBody.  # noqa: E501
        :type: str
        """

        self._titles_before_name = titles_before_name

    @property
    def titles_after_name(self):
        """Gets the titles_after_name of this V1UsersBody.  # noqa: E501

        Titles which is placed after user name  # noqa: E501

        :return: The titles_after_name of this V1UsersBody.  # noqa: E501
        :rtype: str
        """
        return self._titles_after_name

    @titles_after_name.setter
    def titles_after_name(self, titles_after_name):
        """Sets the titles_after_name of this V1UsersBody.

        Titles which is placed after user name  # noqa: E501

        :param titles_after_name: The titles_after_name of this V1UsersBody.  # noqa: E501
        :type: str
        """

        self._titles_after_name = titles_after_name

    @property
    def ignore_name_collision(self):
        """Gets the ignore_name_collision of this V1UsersBody.  # noqa: E501

        If a use with the same name exists, this needs to be set to true.  # noqa: E501

        :return: The ignore_name_collision of this V1UsersBody.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_name_collision

    @ignore_name_collision.setter
    def ignore_name_collision(self, ignore_name_collision):
        """Sets the ignore_name_collision of this V1UsersBody.

        If a use with the same name exists, this needs to be set to true.  # noqa: E501

        :param ignore_name_collision: The ignore_name_collision of this V1UsersBody.  # noqa: E501
        :type: bool
        """

        self._ignore_name_collision = ignore_name_collision

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1UsersBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1UsersBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
