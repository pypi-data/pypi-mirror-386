# coding: utf-8

"""
    ReCodEx API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IdSettingsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_language': 'str',
        'new_assignment_emails': 'bool',
        'assignment_deadline_emails': 'bool',
        'submission_evaluated_emails': 'bool',
        'solution_comments_emails': 'bool',
        'solution_reviews_emails': 'bool',
        'points_changed_emails': 'bool',
        'assignment_submit_after_accepted_emails': 'bool',
        'assignment_submit_after_reviewed_emails': 'bool',
        'exercise_notification_emails': 'bool',
        'solution_accepted_emails': 'bool',
        'solution_review_requested_emails': 'bool'
    }

    attribute_map = {
        'default_language': 'defaultLanguage',
        'new_assignment_emails': 'newAssignmentEmails',
        'assignment_deadline_emails': 'assignmentDeadlineEmails',
        'submission_evaluated_emails': 'submissionEvaluatedEmails',
        'solution_comments_emails': 'solutionCommentsEmails',
        'solution_reviews_emails': 'solutionReviewsEmails',
        'points_changed_emails': 'pointsChangedEmails',
        'assignment_submit_after_accepted_emails': 'assignmentSubmitAfterAcceptedEmails',
        'assignment_submit_after_reviewed_emails': 'assignmentSubmitAfterReviewedEmails',
        'exercise_notification_emails': 'exerciseNotificationEmails',
        'solution_accepted_emails': 'solutionAcceptedEmails',
        'solution_review_requested_emails': 'solutionReviewRequestedEmails'
    }

    def __init__(self, default_language=None, new_assignment_emails=None, assignment_deadline_emails=None, submission_evaluated_emails=None, solution_comments_emails=None, solution_reviews_emails=None, points_changed_emails=None, assignment_submit_after_accepted_emails=None, assignment_submit_after_reviewed_emails=None, exercise_notification_emails=None, solution_accepted_emails=None, solution_review_requested_emails=None):  # noqa: E501
        """IdSettingsBody - a model defined in Swagger"""  # noqa: E501
        self._default_language = None
        self._new_assignment_emails = None
        self._assignment_deadline_emails = None
        self._submission_evaluated_emails = None
        self._solution_comments_emails = None
        self._solution_reviews_emails = None
        self._points_changed_emails = None
        self._assignment_submit_after_accepted_emails = None
        self._assignment_submit_after_reviewed_emails = None
        self._exercise_notification_emails = None
        self._solution_accepted_emails = None
        self._solution_review_requested_emails = None
        self.discriminator = None
        if default_language is not None:
            self.default_language = default_language
        if new_assignment_emails is not None:
            self.new_assignment_emails = new_assignment_emails
        if assignment_deadline_emails is not None:
            self.assignment_deadline_emails = assignment_deadline_emails
        if submission_evaluated_emails is not None:
            self.submission_evaluated_emails = submission_evaluated_emails
        if solution_comments_emails is not None:
            self.solution_comments_emails = solution_comments_emails
        if solution_reviews_emails is not None:
            self.solution_reviews_emails = solution_reviews_emails
        if points_changed_emails is not None:
            self.points_changed_emails = points_changed_emails
        if assignment_submit_after_accepted_emails is not None:
            self.assignment_submit_after_accepted_emails = assignment_submit_after_accepted_emails
        if assignment_submit_after_reviewed_emails is not None:
            self.assignment_submit_after_reviewed_emails = assignment_submit_after_reviewed_emails
        if exercise_notification_emails is not None:
            self.exercise_notification_emails = exercise_notification_emails
        if solution_accepted_emails is not None:
            self.solution_accepted_emails = solution_accepted_emails
        if solution_review_requested_emails is not None:
            self.solution_review_requested_emails = solution_review_requested_emails

    @property
    def default_language(self):
        """Gets the default_language of this IdSettingsBody.  # noqa: E501

        Default language of UI  # noqa: E501

        :return: The default_language of this IdSettingsBody.  # noqa: E501
        :rtype: str
        """
        return self._default_language

    @default_language.setter
    def default_language(self, default_language):
        """Sets the default_language of this IdSettingsBody.

        Default language of UI  # noqa: E501

        :param default_language: The default_language of this IdSettingsBody.  # noqa: E501
        :type: str
        """

        self._default_language = default_language

    @property
    def new_assignment_emails(self):
        """Gets the new_assignment_emails of this IdSettingsBody.  # noqa: E501

        Flag if email should be sent to user when new assignment was created  # noqa: E501

        :return: The new_assignment_emails of this IdSettingsBody.  # noqa: E501
        :rtype: bool
        """
        return self._new_assignment_emails

    @new_assignment_emails.setter
    def new_assignment_emails(self, new_assignment_emails):
        """Sets the new_assignment_emails of this IdSettingsBody.

        Flag if email should be sent to user when new assignment was created  # noqa: E501

        :param new_assignment_emails: The new_assignment_emails of this IdSettingsBody.  # noqa: E501
        :type: bool
        """

        self._new_assignment_emails = new_assignment_emails

    @property
    def assignment_deadline_emails(self):
        """Gets the assignment_deadline_emails of this IdSettingsBody.  # noqa: E501

        Flag if email should be sent to user if assignment deadline is nearby  # noqa: E501

        :return: The assignment_deadline_emails of this IdSettingsBody.  # noqa: E501
        :rtype: bool
        """
        return self._assignment_deadline_emails

    @assignment_deadline_emails.setter
    def assignment_deadline_emails(self, assignment_deadline_emails):
        """Sets the assignment_deadline_emails of this IdSettingsBody.

        Flag if email should be sent to user if assignment deadline is nearby  # noqa: E501

        :param assignment_deadline_emails: The assignment_deadline_emails of this IdSettingsBody.  # noqa: E501
        :type: bool
        """

        self._assignment_deadline_emails = assignment_deadline_emails

    @property
    def submission_evaluated_emails(self):
        """Gets the submission_evaluated_emails of this IdSettingsBody.  # noqa: E501

        Flag if email should be sent to user when resubmission was evaluated  # noqa: E501

        :return: The submission_evaluated_emails of this IdSettingsBody.  # noqa: E501
        :rtype: bool
        """
        return self._submission_evaluated_emails

    @submission_evaluated_emails.setter
    def submission_evaluated_emails(self, submission_evaluated_emails):
        """Sets the submission_evaluated_emails of this IdSettingsBody.

        Flag if email should be sent to user when resubmission was evaluated  # noqa: E501

        :param submission_evaluated_emails: The submission_evaluated_emails of this IdSettingsBody.  # noqa: E501
        :type: bool
        """

        self._submission_evaluated_emails = submission_evaluated_emails

    @property
    def solution_comments_emails(self):
        """Gets the solution_comments_emails of this IdSettingsBody.  # noqa: E501

        Flag if email should be sent to user when new submission comment is added  # noqa: E501

        :return: The solution_comments_emails of this IdSettingsBody.  # noqa: E501
        :rtype: bool
        """
        return self._solution_comments_emails

    @solution_comments_emails.setter
    def solution_comments_emails(self, solution_comments_emails):
        """Sets the solution_comments_emails of this IdSettingsBody.

        Flag if email should be sent to user when new submission comment is added  # noqa: E501

        :param solution_comments_emails: The solution_comments_emails of this IdSettingsBody.  # noqa: E501
        :type: bool
        """

        self._solution_comments_emails = solution_comments_emails

    @property
    def solution_reviews_emails(self):
        """Gets the solution_reviews_emails of this IdSettingsBody.  # noqa: E501

        Flag enabling review-related email notifications sent to the author of the solution  # noqa: E501

        :return: The solution_reviews_emails of this IdSettingsBody.  # noqa: E501
        :rtype: bool
        """
        return self._solution_reviews_emails

    @solution_reviews_emails.setter
    def solution_reviews_emails(self, solution_reviews_emails):
        """Sets the solution_reviews_emails of this IdSettingsBody.

        Flag enabling review-related email notifications sent to the author of the solution  # noqa: E501

        :param solution_reviews_emails: The solution_reviews_emails of this IdSettingsBody.  # noqa: E501
        :type: bool
        """

        self._solution_reviews_emails = solution_reviews_emails

    @property
    def points_changed_emails(self):
        """Gets the points_changed_emails of this IdSettingsBody.  # noqa: E501

        Flag if email should be sent to user when the points were awarded for assignment  # noqa: E501

        :return: The points_changed_emails of this IdSettingsBody.  # noqa: E501
        :rtype: bool
        """
        return self._points_changed_emails

    @points_changed_emails.setter
    def points_changed_emails(self, points_changed_emails):
        """Sets the points_changed_emails of this IdSettingsBody.

        Flag if email should be sent to user when the points were awarded for assignment  # noqa: E501

        :param points_changed_emails: The points_changed_emails of this IdSettingsBody.  # noqa: E501
        :type: bool
        """

        self._points_changed_emails = points_changed_emails

    @property
    def assignment_submit_after_accepted_emails(self):
        """Gets the assignment_submit_after_accepted_emails of this IdSettingsBody.  # noqa: E501

        Flag if email should be sent to the group supervisor if a student submits new solution for already accepted assignment  # noqa: E501

        :return: The assignment_submit_after_accepted_emails of this IdSettingsBody.  # noqa: E501
        :rtype: bool
        """
        return self._assignment_submit_after_accepted_emails

    @assignment_submit_after_accepted_emails.setter
    def assignment_submit_after_accepted_emails(self, assignment_submit_after_accepted_emails):
        """Sets the assignment_submit_after_accepted_emails of this IdSettingsBody.

        Flag if email should be sent to the group supervisor if a student submits new solution for already accepted assignment  # noqa: E501

        :param assignment_submit_after_accepted_emails: The assignment_submit_after_accepted_emails of this IdSettingsBody.  # noqa: E501
        :type: bool
        """

        self._assignment_submit_after_accepted_emails = assignment_submit_after_accepted_emails

    @property
    def assignment_submit_after_reviewed_emails(self):
        """Gets the assignment_submit_after_reviewed_emails of this IdSettingsBody.  # noqa: E501

        Flag if email should be sent to group supervisor if a student submits new solution for already reviewed and not accepted assignment  # noqa: E501

        :return: The assignment_submit_after_reviewed_emails of this IdSettingsBody.  # noqa: E501
        :rtype: bool
        """
        return self._assignment_submit_after_reviewed_emails

    @assignment_submit_after_reviewed_emails.setter
    def assignment_submit_after_reviewed_emails(self, assignment_submit_after_reviewed_emails):
        """Sets the assignment_submit_after_reviewed_emails of this IdSettingsBody.

        Flag if email should be sent to group supervisor if a student submits new solution for already reviewed and not accepted assignment  # noqa: E501

        :param assignment_submit_after_reviewed_emails: The assignment_submit_after_reviewed_emails of this IdSettingsBody.  # noqa: E501
        :type: bool
        """

        self._assignment_submit_after_reviewed_emails = assignment_submit_after_reviewed_emails

    @property
    def exercise_notification_emails(self):
        """Gets the exercise_notification_emails of this IdSettingsBody.  # noqa: E501

        Flag if notifications sent by authors of exercises should be sent via email.  # noqa: E501

        :return: The exercise_notification_emails of this IdSettingsBody.  # noqa: E501
        :rtype: bool
        """
        return self._exercise_notification_emails

    @exercise_notification_emails.setter
    def exercise_notification_emails(self, exercise_notification_emails):
        """Sets the exercise_notification_emails of this IdSettingsBody.

        Flag if notifications sent by authors of exercises should be sent via email.  # noqa: E501

        :param exercise_notification_emails: The exercise_notification_emails of this IdSettingsBody.  # noqa: E501
        :type: bool
        """

        self._exercise_notification_emails = exercise_notification_emails

    @property
    def solution_accepted_emails(self):
        """Gets the solution_accepted_emails of this IdSettingsBody.  # noqa: E501

        Flag if notification should be sent to a student when solution accepted flag is changed.  # noqa: E501

        :return: The solution_accepted_emails of this IdSettingsBody.  # noqa: E501
        :rtype: bool
        """
        return self._solution_accepted_emails

    @solution_accepted_emails.setter
    def solution_accepted_emails(self, solution_accepted_emails):
        """Sets the solution_accepted_emails of this IdSettingsBody.

        Flag if notification should be sent to a student when solution accepted flag is changed.  # noqa: E501

        :param solution_accepted_emails: The solution_accepted_emails of this IdSettingsBody.  # noqa: E501
        :type: bool
        """

        self._solution_accepted_emails = solution_accepted_emails

    @property
    def solution_review_requested_emails(self):
        """Gets the solution_review_requested_emails of this IdSettingsBody.  # noqa: E501

        Flag if notification should be send to a teacher when a solution reviewRequested flag is changed in a supervised/admin-ed group.  # noqa: E501

        :return: The solution_review_requested_emails of this IdSettingsBody.  # noqa: E501
        :rtype: bool
        """
        return self._solution_review_requested_emails

    @solution_review_requested_emails.setter
    def solution_review_requested_emails(self, solution_review_requested_emails):
        """Sets the solution_review_requested_emails of this IdSettingsBody.

        Flag if notification should be send to a teacher when a solution reviewRequested flag is changed in a supervised/admin-ed group.  # noqa: E501

        :param solution_review_requested_emails: The solution_review_requested_emails of this IdSettingsBody.  # noqa: E501
        :type: bool
        """

        self._solution_review_requested_emails = solution_review_requested_emails

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IdSettingsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdSettingsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
