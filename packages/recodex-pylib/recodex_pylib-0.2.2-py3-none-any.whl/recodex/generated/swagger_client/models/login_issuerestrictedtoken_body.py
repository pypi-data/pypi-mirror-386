# coding: utf-8

"""
    ReCodEx API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LoginIssuerestrictedtokenBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'effective_role': 'str',
        'scopes': 'list[object]',
        'expiration': 'int'
    }

    attribute_map = {
        'effective_role': 'effectiveRole',
        'scopes': 'scopes',
        'expiration': 'expiration'
    }

    def __init__(self, effective_role=None, scopes=None, expiration=None):  # noqa: E501
        """LoginIssuerestrictedtokenBody - a model defined in Swagger"""  # noqa: E501
        self._effective_role = None
        self._scopes = None
        self._expiration = None
        self.discriminator = None
        if effective_role is not None:
            self.effective_role = effective_role
        self.scopes = scopes
        if expiration is not None:
            self.expiration = expiration

    @property
    def effective_role(self):
        """Gets the effective_role of this LoginIssuerestrictedtokenBody.  # noqa: E501

        Effective user role contained within issued token  # noqa: E501

        :return: The effective_role of this LoginIssuerestrictedtokenBody.  # noqa: E501
        :rtype: str
        """
        return self._effective_role

    @effective_role.setter
    def effective_role(self, effective_role):
        """Sets the effective_role of this LoginIssuerestrictedtokenBody.

        Effective user role contained within issued token  # noqa: E501

        :param effective_role: The effective_role of this LoginIssuerestrictedtokenBody.  # noqa: E501
        :type: str
        """

        self._effective_role = effective_role

    @property
    def scopes(self):
        """Gets the scopes of this LoginIssuerestrictedtokenBody.  # noqa: E501

        A list of requested scopes  # noqa: E501

        :return: The scopes of this LoginIssuerestrictedtokenBody.  # noqa: E501
        :rtype: list[object]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this LoginIssuerestrictedtokenBody.

        A list of requested scopes  # noqa: E501

        :param scopes: The scopes of this LoginIssuerestrictedtokenBody.  # noqa: E501
        :type: list[object]
        """
        if scopes is None:
            raise ValueError("Invalid value for `scopes`, must not be `None`")  # noqa: E501

        self._scopes = scopes

    @property
    def expiration(self):
        """Gets the expiration of this LoginIssuerestrictedtokenBody.  # noqa: E501

        How long should the token be valid (in seconds)  # noqa: E501

        :return: The expiration of this LoginIssuerestrictedtokenBody.  # noqa: E501
        :rtype: int
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this LoginIssuerestrictedtokenBody.

        How long should the token be valid (in seconds)  # noqa: E501

        :param expiration: The expiration of this LoginIssuerestrictedtokenBody.  # noqa: E501
        :type: int
        """

        self._expiration = expiration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoginIssuerestrictedtokenBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoginIssuerestrictedtokenBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
