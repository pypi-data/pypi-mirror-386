# coding: utf-8

"""
    ReCodEx API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExerciseIdSubmitBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'note': 'str',
        'files': 'str',
        'runtime_environment_id': 'str',
        'solution_params': 'str'
    }

    attribute_map = {
        'note': 'note',
        'files': 'files',
        'runtime_environment_id': 'runtimeEnvironmentId',
        'solution_params': 'solutionParams'
    }

    def __init__(self, note=None, files=None, runtime_environment_id=None, solution_params=None):  # noqa: E501
        """ExerciseIdSubmitBody - a model defined in Swagger"""  # noqa: E501
        self._note = None
        self._files = None
        self._runtime_environment_id = None
        self._solution_params = None
        self.discriminator = None
        self.note = note
        self.files = files
        self.runtime_environment_id = runtime_environment_id
        if solution_params is not None:
            self.solution_params = solution_params

    @property
    def note(self):
        """Gets the note of this ExerciseIdSubmitBody.  # noqa: E501

        Description of this particular reference solution, for example used algorithm  # noqa: E501

        :return: The note of this ExerciseIdSubmitBody.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this ExerciseIdSubmitBody.

        Description of this particular reference solution, for example used algorithm  # noqa: E501

        :param note: The note of this ExerciseIdSubmitBody.  # noqa: E501
        :type: str
        """
        if note is None:
            raise ValueError("Invalid value for `note`, must not be `None`")  # noqa: E501

        self._note = note

    @property
    def files(self):
        """Gets the files of this ExerciseIdSubmitBody.  # noqa: E501

        Files of the reference solution  # noqa: E501

        :return: The files of this ExerciseIdSubmitBody.  # noqa: E501
        :rtype: str
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this ExerciseIdSubmitBody.

        Files of the reference solution  # noqa: E501

        :param files: The files of this ExerciseIdSubmitBody.  # noqa: E501
        :type: str
        """
        if files is None:
            raise ValueError("Invalid value for `files`, must not be `None`")  # noqa: E501

        self._files = files

    @property
    def runtime_environment_id(self):
        """Gets the runtime_environment_id of this ExerciseIdSubmitBody.  # noqa: E501

        ID of runtime for this solution  # noqa: E501

        :return: The runtime_environment_id of this ExerciseIdSubmitBody.  # noqa: E501
        :rtype: str
        """
        return self._runtime_environment_id

    @runtime_environment_id.setter
    def runtime_environment_id(self, runtime_environment_id):
        """Sets the runtime_environment_id of this ExerciseIdSubmitBody.

        ID of runtime for this solution  # noqa: E501

        :param runtime_environment_id: The runtime_environment_id of this ExerciseIdSubmitBody.  # noqa: E501
        :type: str
        """
        if runtime_environment_id is None:
            raise ValueError("Invalid value for `runtime_environment_id`, must not be `None`")  # noqa: E501

        self._runtime_environment_id = runtime_environment_id

    @property
    def solution_params(self):
        """Gets the solution_params of this ExerciseIdSubmitBody.  # noqa: E501

        Solution parameters  # noqa: E501

        :return: The solution_params of this ExerciseIdSubmitBody.  # noqa: E501
        :rtype: str
        """
        return self._solution_params

    @solution_params.setter
    def solution_params(self, solution_params):
        """Sets the solution_params of this ExerciseIdSubmitBody.

        Solution parameters  # noqa: E501

        :param solution_params: The solution_params of this ExerciseIdSubmitBody.  # noqa: E501
        :type: str
        """

        self._solution_params = solution_params

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExerciseIdSubmitBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExerciseIdSubmitBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
