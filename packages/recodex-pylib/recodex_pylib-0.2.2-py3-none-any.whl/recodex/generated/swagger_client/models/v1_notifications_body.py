# coding: utf-8

"""
    ReCodEx API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1NotificationsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'groups_ids': 'list[object]',
        'visible_from': 'int',
        'visible_to': 'int',
        'role': 'str',
        'type': 'str',
        'localized_texts': 'list[object]'
    }

    attribute_map = {
        'groups_ids': 'groupsIds',
        'visible_from': 'visibleFrom',
        'visible_to': 'visibleTo',
        'role': 'role',
        'type': 'type',
        'localized_texts': 'localizedTexts'
    }

    def __init__(self, groups_ids=None, visible_from=None, visible_to=None, role=None, type=None, localized_texts=None):  # noqa: E501
        """V1NotificationsBody - a model defined in Swagger"""  # noqa: E501
        self._groups_ids = None
        self._visible_from = None
        self._visible_to = None
        self._role = None
        self._type = None
        self._localized_texts = None
        self.discriminator = None
        self.groups_ids = groups_ids
        self.visible_from = visible_from
        self.visible_to = visible_to
        self.role = role
        self.type = type
        self.localized_texts = localized_texts

    @property
    def groups_ids(self):
        """Gets the groups_ids of this V1NotificationsBody.  # noqa: E501

        Identification of groups  # noqa: E501

        :return: The groups_ids of this V1NotificationsBody.  # noqa: E501
        :rtype: list[object]
        """
        return self._groups_ids

    @groups_ids.setter
    def groups_ids(self, groups_ids):
        """Sets the groups_ids of this V1NotificationsBody.

        Identification of groups  # noqa: E501

        :param groups_ids: The groups_ids of this V1NotificationsBody.  # noqa: E501
        :type: list[object]
        """
        if groups_ids is None:
            raise ValueError("Invalid value for `groups_ids`, must not be `None`")  # noqa: E501

        self._groups_ids = groups_ids

    @property
    def visible_from(self):
        """Gets the visible_from of this V1NotificationsBody.  # noqa: E501

        Date from which is notification visible  # noqa: E501

        :return: The visible_from of this V1NotificationsBody.  # noqa: E501
        :rtype: int
        """
        return self._visible_from

    @visible_from.setter
    def visible_from(self, visible_from):
        """Sets the visible_from of this V1NotificationsBody.

        Date from which is notification visible  # noqa: E501

        :param visible_from: The visible_from of this V1NotificationsBody.  # noqa: E501
        :type: int
        """
        if visible_from is None:
            raise ValueError("Invalid value for `visible_from`, must not be `None`")  # noqa: E501

        self._visible_from = visible_from

    @property
    def visible_to(self):
        """Gets the visible_to of this V1NotificationsBody.  # noqa: E501

        Date to which is notification visible  # noqa: E501

        :return: The visible_to of this V1NotificationsBody.  # noqa: E501
        :rtype: int
        """
        return self._visible_to

    @visible_to.setter
    def visible_to(self, visible_to):
        """Sets the visible_to of this V1NotificationsBody.

        Date to which is notification visible  # noqa: E501

        :param visible_to: The visible_to of this V1NotificationsBody.  # noqa: E501
        :type: int
        """
        if visible_to is None:
            raise ValueError("Invalid value for `visible_to`, must not be `None`")  # noqa: E501

        self._visible_to = visible_to

    @property
    def role(self):
        """Gets the role of this V1NotificationsBody.  # noqa: E501

        Users with this role and its children can see notification  # noqa: E501

        :return: The role of this V1NotificationsBody.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this V1NotificationsBody.

        Users with this role and its children can see notification  # noqa: E501

        :param role: The role of this V1NotificationsBody.  # noqa: E501
        :type: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501

        self._role = role

    @property
    def type(self):
        """Gets the type of this V1NotificationsBody.  # noqa: E501

        Type of the notification (custom)  # noqa: E501

        :return: The type of this V1NotificationsBody.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V1NotificationsBody.

        Type of the notification (custom)  # noqa: E501

        :param type: The type of this V1NotificationsBody.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def localized_texts(self):
        """Gets the localized_texts of this V1NotificationsBody.  # noqa: E501

        Text of notification  # noqa: E501

        :return: The localized_texts of this V1NotificationsBody.  # noqa: E501
        :rtype: list[object]
        """
        return self._localized_texts

    @localized_texts.setter
    def localized_texts(self, localized_texts):
        """Sets the localized_texts of this V1NotificationsBody.

        Text of notification  # noqa: E501

        :param localized_texts: The localized_texts of this V1NotificationsBody.  # noqa: E501
        :type: list[object]
        """
        if localized_texts is None:
            raise ValueError("Invalid value for `localized_texts`, must not be `None`")  # noqa: E501

        self._localized_texts = localized_texts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1NotificationsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1NotificationsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
