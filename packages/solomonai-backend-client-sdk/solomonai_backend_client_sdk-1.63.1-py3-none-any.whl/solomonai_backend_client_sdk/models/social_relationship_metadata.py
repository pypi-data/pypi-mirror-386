# coding: utf-8

"""
    User Service API

    Solomon AI User Service API - Manages user profiles and authentication

    The version of the OpenAPI document: 1.0
    Contact: yoanyomba@solomon-ai.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from solomonai_backend_client_sdk.models.social_profile_metadata import SocialProfileMetadata
from typing import Optional, Set
from typing_extensions import Self

class SocialRelationshipMetadata(BaseModel):
    """
    SocialRelationshipMetadata
    """ # noqa: E501
    source_profile: SocialProfileMetadata = Field(alias="sourceProfile")
    target_profile: SocialProfileMetadata = Field(alias="targetProfile")
    following: Optional[StrictBool] = None
    following_since: Optional[StrictStr] = Field(default=None, alias="followingSince")
    __properties: ClassVar[List[str]] = ["sourceProfile", "targetProfile", "following", "followingSince"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SocialRelationshipMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of source_profile
        if self.source_profile:
            _dict['sourceProfile'] = self.source_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_profile
        if self.target_profile:
            _dict['targetProfile'] = self.target_profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SocialRelationshipMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sourceProfile": SocialProfileMetadata.from_dict(obj["sourceProfile"]) if obj.get("sourceProfile") is not None else None,
            "targetProfile": SocialProfileMetadata.from_dict(obj["targetProfile"]) if obj.get("targetProfile") is not None else None,
            "following": obj.get("following"),
            "followingSince": obj.get("followingSince")
        })
        return _obj


