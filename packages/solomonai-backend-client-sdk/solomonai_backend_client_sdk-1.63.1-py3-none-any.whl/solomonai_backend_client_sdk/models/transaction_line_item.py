# coding: utf-8

"""
    User Service API

    Solomon AI User Service API - Manages user profiles and authentication

    The version of the OpenAPI document: 1.0
    Contact: yoanyomba@solomon-ai.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TransactionLineItem(BaseModel):
    """
    The TransactionLineItem object is used to represent a transaction's line items.
    """ # noqa: E501
    id: Optional[StrictStr] = None
    remote_id: Optional[StrictStr] = Field(default=None, alias="remoteId")
    memo: Optional[StrictStr] = Field(default=None, description="An internal note used by the business to clarify purpose of the transaction.")
    unit_price: Optional[StrictStr] = Field(default=None, description="The line item's unit price.", alias="unitPrice")
    quantity: Optional[StrictStr] = Field(default=None, description="The line item's quantity.")
    item: Optional[StrictStr] = None
    account: Optional[StrictStr] = Field(default=None, description="The line item's account.")
    tracking_category: Optional[StrictStr] = Field(default=None, description="The line's associated tracking category.", alias="trackingCategory")
    tracking_categories: Optional[List[StrictStr]] = Field(default=None, alias="trackingCategories")
    total_line_amount: Optional[StrictStr] = Field(default=None, description="The line item's total.", alias="totalLineAmount")
    tax_rate: Optional[StrictStr] = Field(default=None, description="The line item's tax rate.", alias="taxRate")
    currency: Optional[StrictStr] = None
    exchange_rate: Optional[StrictStr] = Field(default=None, description="The line item's exchange rate.  Assuming string, but might be better as float or double.", alias="exchangeRate")
    company: Optional[StrictStr] = Field(default=None, description="The company the line belongs to.")
    modified_at: Optional[datetime] = Field(default=None, alias="modifiedAt")
    remote_was_deleted: Optional[StrictBool] = Field(default=None, description="Indicates whether or not this object has been deleted in the third party platform.", alias="remoteWasDeleted")
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    deleted_at: Optional[datetime] = Field(default=None, alias="deletedAt")
    __properties: ClassVar[List[str]] = ["id", "remoteId", "memo", "unitPrice", "quantity", "item", "account", "trackingCategory", "trackingCategories", "totalLineAmount", "taxRate", "currency", "exchangeRate", "company", "modifiedAt", "remoteWasDeleted", "createdAt", "deletedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransactionLineItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransactionLineItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "remoteId": obj.get("remoteId"),
            "memo": obj.get("memo"),
            "unitPrice": obj.get("unitPrice"),
            "quantity": obj.get("quantity"),
            "item": obj.get("item"),
            "account": obj.get("account"),
            "trackingCategory": obj.get("trackingCategory"),
            "trackingCategories": obj.get("trackingCategories"),
            "totalLineAmount": obj.get("totalLineAmount"),
            "taxRate": obj.get("taxRate"),
            "currency": obj.get("currency"),
            "exchangeRate": obj.get("exchangeRate"),
            "company": obj.get("company"),
            "modifiedAt": obj.get("modifiedAt"),
            "remoteWasDeleted": obj.get("remoteWasDeleted"),
            "createdAt": obj.get("createdAt"),
            "deletedAt": obj.get("deletedAt")
        })
        return _obj


