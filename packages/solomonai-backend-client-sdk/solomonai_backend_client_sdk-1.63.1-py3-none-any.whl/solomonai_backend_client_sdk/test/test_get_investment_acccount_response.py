# coding: utf-8

"""
    User Service API

    Solomon AI User Service API - Manages user profiles and authentication

    The version of the OpenAPI document: 1.0
    Contact: yoanyomba@solomon-ai.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from solomonai_backend_client_sdk.models.get_investment_acccount_response import GetInvestmentAcccountResponse

class TestGetInvestmentAcccountResponse(unittest.TestCase):
    """GetInvestmentAcccountResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetInvestmentAcccountResponse:
        """Test GetInvestmentAcccountResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetInvestmentAcccountResponse`
        """
        model = GetInvestmentAcccountResponse()
        if include_optional:
            return GetInvestmentAcccountResponse(
                investment_account = solomonai_backend_client_sdk.models.investment_account.InvestmentAccount(
                    id = '', 
                    user_id = '', 
                    name = '', 
                    number = '', 
                    type = 'BANK_ACCOUNT_TYPE_UNSPECIFIED', 
                    balance = 1.337, 
                    current_funds = 1.337, 
                    balance_limit = '', 
                    plaid_account_id = '', 
                    subtype = '', 
                    holdings = [
                        solomonai_backend_client_sdk.models.invesment_holding.InvesmentHolding(
                            id = '', 
                            name = 'nfdkjfjksdhjhfjsdhjgf', 
                            plaid_account_id = 'k67E4xKvMlhmleEa4pg9hlwGGNnnEeixPolGm', 
                            cost_basis = 15, 
                            institution_price = 13.73, 
                            institution_price_as_of = '2021-04-13T00:00:00.000Z', 
                            institution_price_datetime = '2022-06-07T23:01:00.000Z', 
                            institution_value = 4437.35905, 
                            iso_currency_code = 'USD', 
                            quantity = 25000, 
                            security_id = 'vLRMV3MvY1FYNP91on35CJD5QN5rw9Fpa9qOL', 
                            unofficial_currency_code = 'USD', 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    securities = [
                        solomonai_backend_client_sdk.models.investment_security.InvestmentSecurity(
                            id = '', 
                            close_price = 1.337, 
                            close_price_as_of = '2022-01-24T00:00:00.000Z', 
                            cusip = 'dfkjhdgjdhhgd', 
                            institution_id = 'ins_3', 
                            institution_security_id = 'dfkjhdgjdhhgd', 
                            is_cash_equivalent = True, 
                            isin = 'dfkjhdgjdhhgd', 
                            iso_currency_code = 'USD', 
                            name = 'Dogecoin', 
                            proxy_security_id = 'dfkjhdgjdhhgd', 
                            security_id = 'vLRMV3MvY1FYNP91on35CJD5QN5rw9Fpa9qOL', 
                            sedol = 'dfkjhdgjdhhgd', 
                            ticker_symbol = 'DOGE', 
                            unofficial_currency_code = 'USD', 
                            update_datetime = '2022-06-07T23:01:00.000Z', 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    status = 'BANK_ACCOUNT_STATUS_UNSPECIFIED', 
                    transactions = [
                        solomonai_backend_client_sdk.models.plaid_account_investment_transaction.PlaidAccountInvestmentTransaction(
                            account_id = '', 
                            ammount = '', 
                            investment_transaction_id = '', 
                            security_id = '', 
                            current_date = '', 
                            name = '', 
                            quantity = 1.337, 
                            amount = 1.337, 
                            price = 1.337, 
                            fees = 1.337, 
                            subtype = '', 
                            iso_currency_code = '', 
                            unofficial_currency_code = '', 
                            link_id = '', 
                            id = '', 
                            user_id = '', 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            additional_properties = {
                                'key' : null
                                }, 
                            notes = [
                                solomonai_backend_client_sdk.models.note_schema.Note schema(
                                    id = '', 
                                    user_id = '', 
                                    content = 'Note content here...', 
                                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    statements = [
                        solomonai_backend_client_sdk.models.account_statements_is_a_set_of_statements_tied_to_an_account.AccountStatements is a set of statements tied to an account(
                            id = '', 
                            plaid_statement_id = '', 
                            month = '', 
                            year = '', 
                            statement_pdf_url = '', 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    plaid_account_type = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
            )
        else:
            return GetInvestmentAcccountResponse(
        )
        """

    def testGetInvestmentAcccountResponse(self):
        """Test GetInvestmentAcccountResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
