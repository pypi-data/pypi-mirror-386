# coding: utf-8

"""
    User Service API

    Solomon AI User Service API - Manages user profiles and authentication

    The version of the OpenAPI document: 1.0
    Contact: yoanyomba@solomon-ai.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from solomonai_backend_client_sdk.api.financial_service_api import FinancialServiceApi


class TestFinancialServiceApi(unittest.TestCase):
    """FinancialServiceApi unit test stubs"""

    def setUp(self) -> None:
        self.api = FinancialServiceApi()

    def tearDown(self) -> None:
        pass

    def test_add_default_pockets_to_bank_account(self) -> None:
        """Test case for add_default_pockets_to_bank_account

        adds a default set of pockets to a specific bank account of interest
        """
        pass

    def test_add_note_to_financial_user_profile(self) -> None:
        """Test case for add_note_to_financial_user_profile

        Adds a note to a business account
        """
        pass

    def test_add_note_to_recurring_transaction(self) -> None:
        """Test case for add_note_to_recurring_transaction

        adds a note to a transaction
        """
        pass

    def test_add_note_to_smart_goal(self) -> None:
        """Test case for add_note_to_smart_goal

        adds a note to a smart goal
        """
        pass

    def test_add_note_to_transaction(self) -> None:
        """Test case for add_note_to_transaction

        adds a note to a transaction
        """
        pass

    def test_add_transactions_to_manually_linked_account(self) -> None:
        """Test case for add_transactions_to_manually_linked_account

        Adds transactions to a manually linked account
        """
        pass

    def test_ask_copilot_question(self) -> None:
        """Test case for ask_copilot_question

        Ask a question to copilot
        """
        pass

    def test_bulk_update_recurring_transaction(self) -> None:
        """Test case for bulk_update_recurring_transaction

        update a transaction
        """
        pass

    def test_bulk_update_transaction(self) -> None:
        """Test case for bulk_update_transaction

        update a transaction
        """
        pass

    def test_check_if_quota_exceeded(self) -> None:
        """Test case for check_if_quota_exceeded

        Checks if the question quota has been exceeded
        """
        pass

    def test_create_bank_account(self) -> None:
        """Test case for create_bank_account

        create a bank account for a given user profile
        """
        pass

    def test_create_budget(self) -> None:
        """Test case for create_budget

        create a budget
        """
        pass

    def test_create_credit_account(self) -> None:
        """Test case for create_credit_account

        create a credit account for a given user profile
        """
        pass

    def test_create_link(self) -> None:
        """Test case for create_link

        create link
        """
        pass

    def test_create_milestone(self) -> None:
        """Test case for create_milestone

        create a milestone
        """
        pass

    def test_create_smart_goal(self) -> None:
        """Test case for create_smart_goal

        create a smart goal
        """
        pass

    def test_create_subscription(self) -> None:
        """Test case for create_subscription

        Creates a new subscription for a given customer against stripe
        """
        pass

    def test_create_user_profile1(self) -> None:
        """Test case for create_user_profile1

        create a user profile
        """
        pass

    def test_delete_budget(self) -> None:
        """Test case for delete_budget

        delete a budget
        """
        pass

    def test_delete_link(self) -> None:
        """Test case for delete_link

        delete link by id
        """
        pass

    def test_delete_milestone(self) -> None:
        """Test case for delete_milestone

        delete a milestone
        """
        pass

    def test_delete_note_from_recurring_transaction(self) -> None:
        """Test case for delete_note_from_recurring_transaction

        deletes a note from a transaction
        """
        pass

    def test_delete_note_from_smart_goal(self) -> None:
        """Test case for delete_note_from_smart_goal

        deletes a note from a smart goal
        """
        pass

    def test_delete_note_from_transaction(self) -> None:
        """Test case for delete_note_from_transaction

        deletes a note from a transaction
        """
        pass

    def test_delete_pocket(self) -> None:
        """Test case for delete_pocket

        deletes a pocket
        """
        pass

    def test_delete_smart_goal(self) -> None:
        """Test case for delete_smart_goal

        delete a smart goal
        """
        pass

    def test_delete_transaction(self) -> None:
        """Test case for delete_transaction

        deletes a transaction by id
        """
        pass

    def test_delete_transaction1(self) -> None:
        """Test case for delete_transaction1

        deletes a transaction by id
        """
        pass

    def test_delete_user_profile1(self) -> None:
        """Test case for delete_user_profile1

        deletes a bank account for a given user profile
        """
        pass

    def test_delete_user_profile2(self) -> None:
        """Test case for delete_user_profile2

        deletes a user profile
        """
        pass

    def test_get_account_balance(self) -> None:
        """Test case for get_account_balance

        gets account balance of an account
        """
        pass

    def test_get_account_balance_history(self) -> None:
        """Test case for get_account_balance_history

        Returns the account balance history for an account
        """
        pass

    def test_get_all_budgets(self) -> None:
        """Test case for get_all_budgets

        get all budgets
        """
        pass

    def test_get_bank_account(self) -> None:
        """Test case for get_bank_account

        get a bank account for a given user profile
        """
        pass

    def test_get_budget(self) -> None:
        """Test case for get_budget

        get budget by id
        """
        pass

    def test_get_category_metrics_financial_sub_profile_over_time(self) -> None:
        """Test case for get_category_metrics_financial_sub_profile_over_time

        Gets category metrics for a financial sub profile over time
        """
        pass

    def test_get_category_monthly_transaction_count(self) -> None:
        """Test case for get_category_monthly_transaction_count

        Get monthly transaction count by user, month, and category
        """
        pass

    def test_get_debt_to_income_ratio(self) -> None:
        """Test case for get_debt_to_income_ratio

        Get Debt-to-Income ratio by user and month
        """
        pass

    def test_get_expense_metrics(self) -> None:
        """Test case for get_expense_metrics

        Get Expense Metrics by user, month and category
        """
        pass

    def test_get_expense_metrics_financial_sub_profile_over_time(self) -> None:
        """Test case for get_expense_metrics_financial_sub_profile_over_time

        Gets expense metrics for a financial sub profile over time
        """
        pass

    def test_get_financial_profile(self) -> None:
        """Test case for get_financial_profile

        Get Financial Profile by user and month
        """
        pass

    def test_get_forecast(self) -> None:
        """Test case for get_forecast

        get forecast by id
        """
        pass

    def test_get_income_expense_ratio(self) -> None:
        """Test case for get_income_expense_ratio

        Get Income Expense Ratio by user and month
        """
        pass

    def test_get_income_metrics(self) -> None:
        """Test case for get_income_metrics

        Get Income Metrics by user, month and category
        """
        pass

    def test_get_income_metrics_financial_sub_profile_over_time(self) -> None:
        """Test case for get_income_metrics_financial_sub_profile_over_time

        Gets income metrics for a financial sub profile over time
        """
        pass

    def test_get_investment_account(self) -> None:
        """Test case for get_investment_account

        get investment account by id
        """
        pass

    def test_get_liability_account(self) -> None:
        """Test case for get_liability_account

        get liability account by id
        """
        pass

    def test_get_link(self) -> None:
        """Test case for get_link

        get link by id
        """
        pass

    def test_get_links(self) -> None:
        """Test case for get_links

        get links
        """
        pass

    def test_get_location_metrics_financial_sub_profile_over_time(self) -> None:
        """Test case for get_location_metrics_financial_sub_profile_over_time

        Gets income metrics for a financial sub profile over time
        """
        pass

    def test_get_melody_financial_context(self) -> None:
        """Test case for get_melody_financial_context

        Get Melody Financial Context
        """
        pass

    def test_get_merchant_metrics_financial_sub_profile_over_time(self) -> None:
        """Test case for get_merchant_metrics_financial_sub_profile_over_time

        Gets merchant metrics for a financial sub profile over time
        """
        pass

    def test_get_merchant_monthly_expenditure(self) -> None:
        """Test case for get_merchant_monthly_expenditure

        Get Merchant Monthly Expenditure by user, month and merchant name
        """
        pass

    def test_get_milestone(self) -> None:
        """Test case for get_milestone

        get milestone by id
        """
        pass

    def test_get_milestones(self) -> None:
        """Test case for get_milestones

        get milestones by smart goal id
        """
        pass

    def test_get_monthly_balance(self) -> None:
        """Test case for get_monthly_balance

        Get Monthly Balance by user and month
        """
        pass

    def test_get_monthly_expenditure(self) -> None:
        """Test case for get_monthly_expenditure

        Get Monthly Expenditure by user and month
        """
        pass

    def test_get_monthly_income(self) -> None:
        """Test case for get_monthly_income

        Get Monthly Income by user and month
        """
        pass

    def test_get_monthly_savings(self) -> None:
        """Test case for get_monthly_savings

        Get Monthly Savings by user and month
        """
        pass

    def test_get_monthly_total_quantity_by_security_and_user(self) -> None:
        """Test case for get_monthly_total_quantity_by_security_and_user

        Get Monthly Total Quantity of Security by user, month and security
        """
        pass

    def test_get_monthly_transaction_count(self) -> None:
        """Test case for get_monthly_transaction_count

        Get Monthly Transaction Count by user and month
        """
        pass

    def test_get_mortage_account(self) -> None:
        """Test case for get_mortage_account

        get mortgage account by id
        """
        pass

    def test_get_note_from_smart_goal(self) -> None:
        """Test case for get_note_from_smart_goal

        gets a note from a smart goal
        """
        pass

    def test_get_note_from_transaction(self) -> None:
        """Test case for get_note_from_transaction

        gets a note from a transaction
        """
        pass

    def test_get_notes_from_financial_user_profile(self) -> None:
        """Test case for get_notes_from_financial_user_profile

        Gets notes from a business account
        """
        pass

    def test_get_notes_from_smart_goal(self) -> None:
        """Test case for get_notes_from_smart_goal

        gets notes from a smart goal
        """
        pass

    def test_get_payment_channel_financial_sub_profile_over_time(self) -> None:
        """Test case for get_payment_channel_financial_sub_profile_over_time

        Gets payment metrics for a financial sub profile over time
        """
        pass

    def test_get_payment_channel_monthly_expenditure(self) -> None:
        """Test case for get_payment_channel_monthly_expenditure

        Get Payment Channel Monthly Expenditure by user, month, and payment channel
        """
        pass

    def test_get_pocket(self) -> None:
        """Test case for get_pocket

        get a pocket
        """
        pass

    def test_get_recurring_transaction(self) -> None:
        """Test case for get_recurring_transaction

        lists a set of transactions against a given account of interest
        """
        pass

    def test_get_recurring_transactions_for_user(self) -> None:
        """Test case for get_recurring_transactions_for_user

        get recurring transactions
        """
        pass

    def test_get_smart_goals_by_pocket_id(self) -> None:
        """Test case for get_smart_goals_by_pocket_id

        get smart goals by pocket id
        """
        pass

    def test_get_split_transaction(self) -> None:
        """Test case for get_split_transaction

        gets a split transaction
        """
        pass

    def test_get_student_loan_account(self) -> None:
        """Test case for get_student_loan_account

        get student loan account by id
        """
        pass

    def test_get_total_investment_by_security(self) -> None:
        """Test case for get_total_investment_by_security

        Get Total Investment by user and security
        """
        pass

    def test_get_transaction(self) -> None:
        """Test case for get_transaction

        lists a set of transactions against a given account of interest
        """
        pass

    def test_get_transactions(self) -> None:
        """Test case for get_transactions

        get transactions tied to a bank account and account id
        """
        pass

    def test_get_transactions1(self) -> None:
        """Test case for get_transactions1

        get transactions
        """
        pass

    def test_get_transactions_by_time(self) -> None:
        """Test case for get_transactions_by_time

        get transactions by time
        """
        pass

    def test_get_transactions_for_past_month(self) -> None:
        """Test case for get_transactions_for_past_month

        Get transactions for the past month
        """
        pass

    def test_get_transactions_for_past_week(self) -> None:
        """Test case for get_transactions_for_past_week

        get transactions for the past week
        """
        pass

    def test_get_user_account_balance_history(self) -> None:
        """Test case for get_user_account_balance_history

        Returns the account balance history for a user
        """
        pass

    def test_get_user_category_monthly_expenditure(self) -> None:
        """Test case for get_user_category_monthly_expenditure

        Returns the monthly category expenditure for a user
        """
        pass

    def test_get_user_category_monthly_income(self) -> None:
        """Test case for get_user_category_monthly_income

        Get monthly income by user for a specific category
        """
        pass

    def test_get_user_profile1(self) -> None:
        """Test case for get_user_profile1

        Gets a user profile
        """
        pass

    def test_health_check2(self) -> None:
        """Test case for health_check2

        health check
        """
        pass

    def test_list_recurring_transaction_notes(self) -> None:
        """Test case for list_recurring_transaction_notes

        lists notes from a transaction
        """
        pass

    def test_list_recurring_transactions_for_user_and_account(self) -> None:
        """Test case for list_recurring_transactions_for_user_and_account

        lists a set of transactions against a given account of interest
        """
        pass

    def test_list_transaction_notes(self) -> None:
        """Test case for list_transaction_notes

        lists notes from a transaction
        """
        pass

    def test_list_transactions(self) -> None:
        """Test case for list_transactions

        lists a set of transactions against a given account of interest
        """
        pass

    def test_list_transactions1(self) -> None:
        """Test case for list_transactions1

        lists a set of transactions across all connected accounts
        """
        pass

    def test_plaid_exchange_token(self) -> None:
        """Test case for plaid_exchange_token

        exchange plaid token
        """
        pass

    def test_plaid_initiate_token_exchange(self) -> None:
        """Test case for plaid_initiate_token_exchange

        initiate plaid setup
        """
        pass

    def test_plaid_initiate_token_update(self) -> None:
        """Test case for plaid_initiate_token_update

        initiate plaid link token update
        """
        pass

    def test_plaid_sync_account_from_access_token(self) -> None:
        """Test case for plaid_sync_account_from_access_token

        sync accounts based on plaid access token
        """
        pass

    def test_poll_async_task_execution_status(self) -> None:
        """Test case for poll_async_task_execution_status

        polls the status of an async task
        """
        pass

    def test_readyness_check2(self) -> None:
        """Test case for readyness_check2

        readyness check
        """
        pass

    def test_search_transactions(self) -> None:
        """Test case for search_transactions

        searches transactions
        """
        pass

    def test_split_transaction(self) -> None:
        """Test case for split_transaction

        splits a transaction
        """
        pass

    def test_transaction_aggregates(self) -> None:
        """Test case for transaction_aggregates

        Returns the aggregated transactions for a user and month
        """
        pass

    def test_trigger_sync(self) -> None:
        """Test case for trigger_sync

        Triggers a sync
        """
        pass

    def test_unsplit_transactions(self) -> None:
        """Test case for unsplit_transactions

        unsplit a transaction
        """
        pass

    def test_update_bank_account(self) -> None:
        """Test case for update_bank_account

        update a bank account for a given user profile
        """
        pass

    def test_update_note_to_recurring_transaction(self) -> None:
        """Test case for update_note_to_recurring_transaction

        Updates a note to a transaction
        """
        pass

    def test_update_note_to_smart_goal(self) -> None:
        """Test case for update_note_to_smart_goal

        updates a note to a smart goal
        """
        pass

    def test_update_note_to_transaction(self) -> None:
        """Test case for update_note_to_transaction

        Updates a note to a transaction
        """
        pass

    def test_update_pocket(self) -> None:
        """Test case for update_pocket

        updates a pocket
        """
        pass

    def test_update_single_transaction(self) -> None:
        """Test case for update_single_transaction

        update a transaction
        """
        pass

    def test_update_smart_goal(self) -> None:
        """Test case for update_smart_goal

        update a smart goal
        """
        pass

    def test_update_transaction(self) -> None:
        """Test case for update_transaction

        update a transaction
        """
        pass

    def test_update_user_profile(self) -> None:
        """Test case for update_user_profile

        update a user profile
        """
        pass

    def test_updates_budget(self) -> None:
        """Test case for updates_budget

        updates a budget
        """
        pass

    def test_updates_milestone(self) -> None:
        """Test case for updates_milestone

        updates a milestone
        """
        pass


if __name__ == '__main__':
    unittest.main()
