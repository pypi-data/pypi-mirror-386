# coding: utf-8

"""
    User Service API

    Solomon AI User Service API - Manages user profiles and authentication

    The version of the OpenAPI document: 1.0
    Contact: yoanyomba@solomon-ai.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from solomonai_backend_client_sdk.models.employer_benefits import EmployerBenefits

class TestEmployerBenefits(unittest.TestCase):
    """EmployerBenefits unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EmployerBenefits:
        """Test EmployerBenefits
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EmployerBenefits`
        """
        model = EmployerBenefits()
        if include_optional:
            return EmployerBenefits(
                id = '',
                remote_id = '',
                benefit_plan_type = 'BENEFIT_PLAN_TYPE_UNSPECIFIED',
                name = '',
                description = '',
                deduction_code = '',
                remote_was_deleted = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                modified_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                merge_account_id = '',
                employee_benefits = [
                    solomonai_backend_client_sdk.models.employee_benefits.EmployeeBenefits(
                        id = '', 
                        remote_id = '', 
                        provider_name = '', 
                        employee_merge_account_id = '', 
                        benefit_plan_merge_account_id = '', 
                        employee_contribution = '', 
                        company_contribution = '', 
                        start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        remote_was_deleted = True, 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        modified_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        merge_account_id = '', 
                        deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return EmployerBenefits(
        )
        """

    def testEmployerBenefits(self):
        """Test EmployerBenefits"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
