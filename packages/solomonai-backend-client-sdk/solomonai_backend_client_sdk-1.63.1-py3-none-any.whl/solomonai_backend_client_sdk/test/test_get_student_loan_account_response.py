# coding: utf-8

"""
    User Service API

    Solomon AI User Service API - Manages user profiles and authentication

    The version of the OpenAPI document: 1.0
    Contact: yoanyomba@solomon-ai.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from solomonai_backend_client_sdk.models.get_student_loan_account_response import GetStudentLoanAccountResponse

class TestGetStudentLoanAccountResponse(unittest.TestCase):
    """GetStudentLoanAccountResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetStudentLoanAccountResponse:
        """Test GetStudentLoanAccountResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetStudentLoanAccountResponse`
        """
        model = GetStudentLoanAccountResponse()
        if include_optional:
            return GetStudentLoanAccountResponse(
                student_loan_account = solomonai_backend_client_sdk.models.student_loan_account.StudentLoanAccount(
                    id = '', 
                    plaid_account_id = '', 
                    disbursement_dates = [
                        ''
                        ], 
                    expected_payoff_date = '', 
                    guarantor = '', 
                    interest_rate_percentage = 1.337, 
                    is_overdue = True, 
                    last_payment_amount = 1.337, 
                    last_payment_date = '', 
                    last_statement_issue_date = '', 
                    loan_name = '', 
                    loan_end_date = '', 
                    minimum_payment_amount = 1.337, 
                    next_payment_due_date = '', 
                    origination_date = '', 
                    origination_principal_amount = 1.337, 
                    outstanding_interest_amount = 1.337, 
                    payment_reference_number = '', 
                    sequence_number = '', 
                    ytd_interest_paid = 1.337, 
                    ytd_principal_paid = 1.337, 
                    loan_type = '', 
                    pslf_status_estimated_eligibility_date = '', 
                    pslf_status_payments_made = 56, 
                    pslf_status_payments_remaining = 56, 
                    repayment_plan_type = '', 
                    repayment_plan_description = '', 
                    servicer_address_city = '', 
                    servicer_address_postal_code = '', 
                    servicer_address_state = '', 
                    servicer_address_street = '', 
                    servicer_address_region = '', 
                    servicer_address_country = '', 
                    user_id = '', 
                    name = '', 
                    status = 'BANK_ACCOUNT_STATUS_UNSPECIFIED', 
                    statements = [
                        solomonai_backend_client_sdk.models.account_statements_is_a_set_of_statements_tied_to_an_account.AccountStatements is a set of statements tied to an account(
                            id = '', 
                            plaid_statement_id = '', 
                            month = '', 
                            year = '', 
                            statement_pdf_url = '', 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    plaid_account_type = '', 
                    type = 'BANK_ACCOUNT_TYPE_UNSPECIFIED', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
            )
        else:
            return GetStudentLoanAccountResponse(
        )
        """

    def testGetStudentLoanAccountResponse(self):
        """Test GetStudentLoanAccountResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
