# coding: utf-8

"""
    User Service API

    Solomon AI User Service API - Manages user profiles and authentication

    The version of the OpenAPI document: 1.0
    Contact: yoanyomba@solomon-ai.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from solomonai_backend_client_sdk.models.business_actionable_insight import BusinessActionableInsight

class TestBusinessActionableInsight(unittest.TestCase):
    """BusinessActionableInsight unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BusinessActionableInsight:
        """Test BusinessActionableInsight
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BusinessActionableInsight`
        """
        model = BusinessActionableInsight()
        if include_optional:
            return BusinessActionableInsight(
                id = '1234567890',
                type = 'BUSINESS_ACTIONABLE_INSIGHT_TYPE_UNSPECIFIED',
                description = 'Reduce operating costs by optimizing energy usage.',
                takeaway = 'Optimizing energy usage can lead to significant cost savings.',
                action = 'Implement energy-efficient lighting and machinery.',
                expected_benefit = 'Expected to reduce energy costs by up to 20% annually.',
                tags = ["cost-saving","energy-efficiency"],
                generated_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                metrics_to_optimize_for = ["operating costs","energy consumption"],
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return BusinessActionableInsight(
        )
        """

    def testBusinessActionableInsight(self):
        """Test BusinessActionableInsight"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
