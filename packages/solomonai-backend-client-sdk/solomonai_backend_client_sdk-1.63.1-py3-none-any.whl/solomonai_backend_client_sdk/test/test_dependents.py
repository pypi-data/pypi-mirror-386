# coding: utf-8

"""
    User Service API

    Solomon AI User Service API - Manages user profiles and authentication

    The version of the OpenAPI document: 1.0
    Contact: yoanyomba@solomon-ai.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from solomonai_backend_client_sdk.models.dependents import Dependents

class TestDependents(unittest.TestCase):
    """Dependents unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Dependents:
        """Test Dependents
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Dependents`
        """
        model = Dependents()
        if include_optional:
            return Dependents(
                id = '',
                remote_id = '',
                first_name = '',
                last_name = '',
                middle_name = '',
                dependent_relationship_to_employee = 'DEPENDENT_RELATIONSHIP_UNSPECIFIED',
                date_of_birth = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                gender = 'GENDER_UNSPECIFIED',
                phone_number = '',
                home_location = solomonai_backend_client_sdk.models.location_address.LocationAddress(
                    id = '', 
                    remote_id = '', 
                    name = '', 
                    phone_number = '', 
                    street1 = '', 
                    street2 = '', 
                    city = '', 
                    state = '', 
                    zip_code = '', 
                    country = '', 
                    location_type = 'LOCATION_TYPE_UNSPECIFIED', 
                    remote_was_deleted = True, 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    modified_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    merge_account_id = '', 
                    deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                is_student = True,
                ssn = '',
                remote_was_deleted = True,
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                modified_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                merge_account_id = '',
                deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return Dependents(
        )
        """

    def testDependents(self):
        """Test Dependents"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
