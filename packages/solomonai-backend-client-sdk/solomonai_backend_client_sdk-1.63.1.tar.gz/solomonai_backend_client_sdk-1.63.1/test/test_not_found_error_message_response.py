# coding: utf-8

"""
    Lead Scraping Service API

    Vector Lead Scraping Service API - Manages Lead Scraping Jobs

    The version of the OpenAPI document: 1.0
    Contact: yoanyomba@vector.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from backend_client.models.not_found_error_message_response import NotFoundErrorMessageResponse

class TestNotFoundErrorMessageResponse(unittest.TestCase):
    """NotFoundErrorMessageResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NotFoundErrorMessageResponse:
        """Test NotFoundErrorMessageResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NotFoundErrorMessageResponse`
        """
        model = NotFoundErrorMessageResponse()
        if include_optional:
            return NotFoundErrorMessageResponse(
                code = 'NO_NOT_FOUND_ERROR',
                message = '',
                resource_info = backend_client.models.resource_info.ResourceInfo(
                    type = '', 
                    id = '', 
                    path = '', 
                    tenant_id = '', 
                    scopes = [
                        ''
                        ], ),
                suggestions = backend_client.models.suggestions.Suggestions(
                    similar_resources = [
                        ''
                        ], 
                    alternative_paths = [
                        ''
                        ], 
                    documentation_url = '', 
                    hints = {
                        'key' : ''
                        }, ),
                api_info = backend_client.models.api_info.APIInfo(
                    version = '', 
                    supported_versions = [
                        ''
                        ], 
                    is_deprecated = True, 
                    sunset_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                error_response = backend_client.models.base_error_message_response,_extending_google/rpc/status.Base error message response, extending google.rpc.Status(
                    status = backend_client.models.status.Status(
                        code = 56, 
                        message = '', 
                        details = [
                            {
                                'key' : null
                                }
                            ], ), )
            )
        else:
            return NotFoundErrorMessageResponse(
        )
        """

    def testNotFoundErrorMessageResponse(self):
        """Test NotFoundErrorMessageResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
