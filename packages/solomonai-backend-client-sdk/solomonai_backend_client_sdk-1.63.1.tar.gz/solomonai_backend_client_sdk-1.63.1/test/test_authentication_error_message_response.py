# coding: utf-8

"""
    Lead Scraping Service API

    Vector Lead Scraping Service API - Manages Lead Scraping Jobs

    The version of the OpenAPI document: 1.0
    Contact: yoanyomba@vector.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from backend_client.models.authentication_error_message_response import AuthenticationErrorMessageResponse

class TestAuthenticationErrorMessageResponse(unittest.TestCase):
    """AuthenticationErrorMessageResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AuthenticationErrorMessageResponse:
        """Test AuthenticationErrorMessageResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AuthenticationErrorMessageResponse`
        """
        model = AuthenticationErrorMessageResponse()
        if include_optional:
            return AuthenticationErrorMessageResponse(
                code = 'NO_AUTH_ERROR',
                message = '',
                token_info = backend_client.models.token_info.TokenInfo(
                    token_id = '', 
                    token_type = '', 
                    expiry = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    issuer = '', 
                    audiences = [
                        ''
                        ], ),
                auth_context = backend_client.models.auth_context.AuthContext(
                    required_scopes = [
                        ''
                        ], 
                    provided_scopes = [
                        ''
                        ], 
                    missing_permissions = [
                        ''
                        ], 
                    tenant_id = '', ),
                session_info = backend_client.models.session_info.SessionInfo(
                    session_id = '', 
                    last_active = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    device_id = '', 
                    ip_address = '', ),
                mfa_info = backend_client.models.mfa_info.MFAInfo(
                    mfa_required = True, 
                    allowed_methods = [
                        ''
                        ], 
                    failed_reason = '', ),
                error_response = backend_client.models.base_error_message_response,_extending_google/rpc/status.Base error message response, extending google.rpc.Status(
                    status = backend_client.models.status.Status(
                        code = 56, 
                        message = '', 
                        details = [
                            {
                                'key' : null
                                }
                            ], ), )
            )
        else:
            return AuthenticationErrorMessageResponse(
        )
        """

    def testAuthenticationErrorMessageResponse(self):
        """Test AuthenticationErrorMessageResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
