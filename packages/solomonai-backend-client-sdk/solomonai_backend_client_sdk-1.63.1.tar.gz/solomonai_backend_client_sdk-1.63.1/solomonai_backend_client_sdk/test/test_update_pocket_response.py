# coding: utf-8

"""
    User Service API

    Solomon AI User Service API - Manages user profiles and authentication

    The version of the OpenAPI document: 1.0
    Contact: yoanyomba@solomon-ai.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from solomonai_backend_client_sdk.models.update_pocket_response import UpdatePocketResponse

class TestUpdatePocketResponse(unittest.TestCase):
    """UpdatePocketResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UpdatePocketResponse:
        """Test UpdatePocketResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UpdatePocketResponse`
        """
        model = UpdatePocketResponse()
        if include_optional:
            return UpdatePocketResponse(
                pocket = solomonai_backend_client_sdk.models.pocket_is_an_abstraction_of_a_over_a_bank_account/_a_user_can_has_at_most_4_pockets_per_connected_account
note:_these_pockets_are_automatically_created_by_the_system_and_should_not_be_exposed_for_mutation
by_any_client/_the_only_operations_that_can_be_performed_against_a_pocket_are:
1/_get_the_pocket
2/_get_the_pocket's_smart_goals
3/_adding_a_smart_goal_to_the_pocket.Pocket is an abstraction of a over a bank account. A user can has at most 4 pockets per connected account
NOTE: these pockets are automatically created by the system and should not be exposed for mutation
by any client. The only operations that can be performed against a pocket are:
1. Get the pocket
2. Get the pocket's smart goals
3. Adding a smart goal to the pocket(
                    id = '', 
                    goals = [
                        solomonai_backend_client_sdk.models.smart_goal.SmartGoal(
                            id = '', 
                            user_id = '', 
                            name = '', 
                            description = 'Buy a car', 
                            is_completed = True, 
                            goal_type = 'GOAL_TYPE_UNSPECIFIED', 
                            duration = 'Active', 
                            start_date = 'Active', 
                            end_date = 'Active', 
                            target_amount = 'Active', 
                            current_amount = 'Active', 
                            milestones = [
                                solomonai_backend_client_sdk.models.milestone:_represents_a_milestone_in_the_context_of_simfinni/_a_financial_milestone_that_is_both_smart
and_achievable/_a_milestone_is_a_sub_goal_of_a_goal_and_is_tied_to_a_goal_by_the_goal_id.Milestone: represents a milestone in the context of simfinni. A financial milestone that is both smart
and achievable. A milestone is a sub goal of a goal and is tied to a goal by the goal id(
                                    id = '', 
                                    name = 'Buy a car', 
                                    description = 'Buy a car', 
                                    target_date = 'testtagdescription', 
                                    target_amount = 'Active', 
                                    is_completed = True, 
                                    budget = solomonai_backend_client_sdk.models.budget.Budget(
                                        id = '', 
                                        name = 'Buy a car', 
                                        description = '', 
                                        start_date = '', 
                                        end_date = '', 
                                        category = solomonai_backend_client_sdk.models.category1.Category1(
                                            id = '', 
                                            name = 'Housing', 
                                            description = 'Housing is a category primarily for housing', 
                                            subcategories = [
                                                ''
                                                ], 
                                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                            deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            forecasts = solomonai_backend_client_sdk.models.forecast.Forecast(
                                id = '', 
                                forecasted_amount = 'Active', 
                                forecasted_completion_date = 'Active', 
                                variance_amount = 'Active', 
                                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            notes = [
                                solomonai_backend_client_sdk.models.note_schema.Note schema(
                                    id = '', 
                                    user_id = '', 
                                    content = 'Note content here...', 
                                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    type = 'POCKET_TYPE_UNSPECIFIED', 
                    tags = [
                        ''
                        ], 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
            )
        else:
            return UpdatePocketResponse(
        )
        """

    def testUpdatePocketResponse(self):
        """Test UpdatePocketResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
