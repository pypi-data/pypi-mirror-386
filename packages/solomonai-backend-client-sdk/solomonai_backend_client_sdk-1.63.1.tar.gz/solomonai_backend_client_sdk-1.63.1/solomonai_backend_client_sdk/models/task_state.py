# coding: utf-8

"""
    User Service API

    Solomon AI User Service API - Manages user profiles and authentication

    The version of the OpenAPI document: 1.0
    Contact: yoanyomba@solomon-ai.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
from enum import Enum
from typing_extensions import Self


class TaskState(str, Enum):
    """
     - TASK_STATE_UNSPECIFIED: The zero value is omitted in proto3 by convention if it's not used. In your case, since you start your iota with 1, we will not define a zero value.  - TASK_STATE_ACTIVE: Indicates that the task is currently being processed by Handler.  - TASK_STATE_PENDING: Indicates that the task is ready to be processed by Handler.  - TASK_STATE_SCHEDULED: Indicates that the task is scheduled to be processed some time in the future.  - TASK_STATE_RETRY: Indicates that the task has previously failed and scheduled to be processed some time in the future.  - TASK_STATE_ARCHIVED: Indicates that the task is archived and stored for inspection purposes.  - TASK_STATE_COMPLETED: Indicates that the task is processed successfully and retained until the retention TTL expires.  - TASK_STATE_AGGREGATING: Indicates that the task is waiting in a group to be aggregated into one task.  - TASK_STATE_FAILED: Indicates that the task has failed and will not be retried.
    """

    """
    allowed enum values
    """
    TASK_STATE_UNSPECIFIED = 'TASK_STATE_UNSPECIFIED'
    TASK_STATE_ACTIVE = 'TASK_STATE_ACTIVE'
    TASK_STATE_PENDING = 'TASK_STATE_PENDING'
    TASK_STATE_SCHEDULED = 'TASK_STATE_SCHEDULED'
    TASK_STATE_RETRY = 'TASK_STATE_RETRY'
    TASK_STATE_ARCHIVED = 'TASK_STATE_ARCHIVED'
    TASK_STATE_COMPLETED = 'TASK_STATE_COMPLETED'
    TASK_STATE_AGGREGATING = 'TASK_STATE_AGGREGATING'
    TASK_STATE_FAILED = 'TASK_STATE_FAILED'

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TaskState from a JSON string"""
        return cls(json.loads(json_str))


