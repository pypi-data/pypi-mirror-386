interactions:
- request:
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '1455'
      content-type:
      - application/json
      host:
      - api.openai.com
    method: POST
    parsed_body:
      input:
      - content: |-
          Always respond with a JSON object that's compatible with this schema:

          {"type": "object", "properties": {"result": {"anyOf": [{"type": "object", "properties": {"kind": {"type": "string", "const": "CityLocation"}, "data": {"properties": {"city": {"type": "string"}, "country": {"type": "string"}}, "required": ["city", "country"], "title": "CityLocation", "type": "object"}}, "description": "CityLocation", "required": ["kind", "data"], "additionalProperties": false}, {"type": "object", "properties": {"kind": {"type": "string", "const": "CountryLanguage"}, "data": {"properties": {"country": {"type": "string"}, "language": {"type": "string"}}, "required": ["country", "language"], "title": "CountryLanguage", "type": "object"}}, "description": "CountryLanguage", "required": ["kind", "data"], "additionalProperties": false}]}}, "required": ["result"], "additionalProperties": false}

          Don't include any text or Markdown fencing before or after.
        role: system
      - content: What is the largest city in the user country?
        role: user
      model: gpt-4o
      stream: false
      text:
        format:
          type: json_object
      tool_choice: auto
      tools:
      - description: ''
        name: get_user_country
        parameters:
          additionalProperties: false
          properties: {}
          type: object
        strict: false
        type: function
    uri: https://api.openai.com/v1/responses
  response:
    headers:
      alt-svc:
      - h3=":443"; ma=86400
      connection:
      - keep-alive
      content-length:
      - '1408'
      content-type:
      - application/json
      openai-organization:
      - pydantic-28gund
      openai-processing-ms:
      - '11445'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      transfer-encoding:
      - chunked
    parsed_body:
      background: false
      created_at: 1749561117
      error: null
      id: resp_68482f1d38e081a1ac828acda978aa6b08e79646fe74d5ee
      incomplete_details: null
      instructions: null
      max_output_tokens: null
      metadata: {}
      model: gpt-4o-2024-08-06
      object: response
      output:
      - arguments: '{}'
        call_id: call_my4OyoVXRT0m7bLWmsxcaCQI
        id: fc_68482f2889d481a199caa61de7ccb62c08e79646fe74d5ee
        name: get_user_country
        status: completed
        type: function_call
      parallel_tool_calls: true
      previous_response_id: null
      reasoning:
        effort: null
        summary: null
      service_tier: default
      status: completed
      store: true
      temperature: 1.0
      text:
        format:
          type: json_object
      tool_choice: auto
      tools:
      - description: null
        name: get_user_country
        parameters:
          additionalProperties: false
          properties: {}
          type: object
        strict: false
        type: function
      top_p: 1.0
      truncation: disabled
      usage:
        input_tokens: 283
        input_tokens_details:
          cached_tokens: 0
        output_tokens: 12
        output_tokens_details:
          reasoning_tokens: 0
        total_tokens: 295
      user: null
    status:
      code: 200
      message: OK
- request:
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '1691'
      content-type:
      - application/json
      cookie:
      - __cf_bm=l95LdgPzGHw0UAhBwse9ADphgmMDWrhYqgiO4gdmSy4-1749561128-1.0.1.1-9zPIs3d5_ipszLpQ7yBaCZEStp8qoRIGFshR93V6n7Z_7AznH0MfuczwuoiaW8e6cEVeVHLhskjXScolO9gP5TmpsaFo37GRuHsHZTRgEeI;
        _cfuvid=5L5qtbtbFCFzMmoVufSY.ksn06ay8AFs.UXFEv07pkY-1749561128680-0.0.1.1-604800000
      host:
      - api.openai.com
    method: POST
    parsed_body:
      input:
      - content: |-
          Always respond with a JSON object that's compatible with this schema:

          {"type": "object", "properties": {"result": {"anyOf": [{"type": "object", "properties": {"kind": {"type": "string", "const": "CityLocation"}, "data": {"properties": {"city": {"type": "string"}, "country": {"type": "string"}}, "required": ["city", "country"], "title": "CityLocation", "type": "object"}}, "description": "CityLocation", "required": ["kind", "data"], "additionalProperties": false}, {"type": "object", "properties": {"kind": {"type": "string", "const": "CountryLanguage"}, "data": {"properties": {"country": {"type": "string"}, "language": {"type": "string"}}, "required": ["country", "language"], "title": "CountryLanguage", "type": "object"}}, "description": "CountryLanguage", "required": ["kind", "data"], "additionalProperties": false}]}}, "required": ["result"], "additionalProperties": false}

          Don't include any text or Markdown fencing before or after.
        role: system
      - content: What is the largest city in the user country?
        role: user
      - content: ''
        role: assistant
      - arguments: '{}'
        call_id: call_my4OyoVXRT0m7bLWmsxcaCQI
        name: get_user_country
        type: function_call
      - call_id: call_my4OyoVXRT0m7bLWmsxcaCQI
        output: Mexico
        type: function_call_output
      model: gpt-4o
      stream: false
      text:
        format:
          type: json_object
      tool_choice: auto
      tools:
      - description: ''
        name: get_user_country
        parameters:
          additionalProperties: false
          properties: {}
          type: object
        strict: false
        type: function
    uri: https://api.openai.com/v1/responses
  response:
    headers:
      alt-svc:
      - h3=":443"; ma=86400
      connection:
      - keep-alive
      content-length:
      - '1551'
      content-type:
      - application/json
      openai-organization:
      - pydantic-28gund
      openai-processing-ms:
      - '2545'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      transfer-encoding:
      - chunked
    parsed_body:
      background: false
      created_at: 1749561128
      error: null
      id: resp_68482f28c1b081a1ae73cbbee012ee4906b4ab2d00d03024
      incomplete_details: null
      instructions: null
      max_output_tokens: null
      metadata: {}
      model: gpt-4o-2024-08-06
      object: response
      output:
      - content:
        - annotations: []
          text: '{"result":{"kind":"CityLocation","data":{"city":"Mexico City","country":"Mexico"}}}'
          type: output_text
        id: msg_68482f296bfc81a18665547d4008ab2c06b4ab2d00d03024
        role: assistant
        status: completed
        type: message
      parallel_tool_calls: true
      previous_response_id: null
      reasoning:
        effort: null
        summary: null
      service_tier: default
      status: completed
      store: true
      temperature: 1.0
      text:
        format:
          type: json_object
      tool_choice: auto
      tools:
      - description: null
        name: get_user_country
        parameters:
          additionalProperties: false
          properties: {}
          type: object
        strict: false
        type: function
      top_p: 1.0
      truncation: disabled
      usage:
        input_tokens: 306
        input_tokens_details:
          cached_tokens: 0
        output_tokens: 22
        output_tokens_details:
          reasoning_tokens: 0
        total_tokens: 328
      user: null
    status:
      code: 200
      message: OK
version: 1
