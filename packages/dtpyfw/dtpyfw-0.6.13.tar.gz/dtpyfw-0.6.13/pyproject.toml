[tool.poetry]
name          = "dtpyfw"
description   = "DealerTower Python Framework: reusable buildingâ€‘blocks for DealerTower services"
version       = "0.6.13"
authors       = ["Reza Shirazi <reza@dealertower.com>"]
readme        = "README.md"
license       = "DealerTower Proprietary License"
homepage      = "https://github.com/datgate/dtpyfw"
repository    = "https://github.com/datgate/dtpyfw"
documentation = "https://github.com/datgate/dtpyfw/tree/main/docs"
keywords      = ["framework", "microservices", "fastapi", "sqlalchemy", "celery", "redis", "kafka"]
classifiers   = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: Other/Proprietary License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Software Development :: Libraries :: Application Frameworks",
  "Framework :: FastAPI",
  "Framework :: Celery",
  "Typing :: Typed",
]
include       = [
  { path = "README.md", format = ["sdist", "wheel"] },
  { path = "LICENSE", format = ["sdist", "wheel"] },
  { path = "CHANGELOG.md", format = ["sdist", "wheel"] },
  { path = "py.typed", format = ["sdist", "wheel"] }
]
exclude       = [
  { path = ".github" },
  { path = "tests" },
  { path = "examples" },
  { path = "__pycache__" },
  { path = "*.pyc" }
]

packages     = [
  { include = "dtpyfw" }
]

# ============================================================================
# Dependencies
# ============================================================================

[tool.poetry.dependencies]
# Base dependencies - always installed
python = ">=3.11,<4.0"
requests = "~=2.32.3"
pydantic = "~=2.11.8"

# Optional dependencies - installed via extras
# Encryption & Hashing
python-jose       = { version = "~=3.5.0",    optional = true }
passlib           = { version = "~=1.7.4",    optional = true, extras = ["bcrypt", "argon2"] }
bcrypt            = { version = "~=4.3.0",    optional = true }

# API (FastAPI)
fastapi           = { version = "~=0.116.1",  optional = true }
gunicorn          = { version = "~=23.0.0",   optional = true }
uvicorn           = { version = "~=0.35.0",   optional = true }
python-multipart  = { version = "~=0.0.20",   optional = true }

# Object Storage (S3-compatible)
boto3             = { version = "~=1.40.4",   optional = true }

# Database (SQLAlchemy)
SQLAlchemy        = { version = "~=2.0.42",   optional = true }
# PostgreSQL drivers
psycopg2          = { version = "~=2.9.10",   optional = true }
asyncpg           = { version = "~=0.30.0",   optional = true }
# MySQL drivers
PyMySQL           = { version = "~=1.1.2",    optional = true }
aiomysql          = { version = "~=0.2.0",    optional = true }

# FTP/SFTP
paramiko          = { version = "~=4.0.0",    optional = true }
python-dateutil   = { version = "~=2.9.0",    optional = true }

# Redis
redis             = { version = "~=6.4.0",    optional = true }

# Celery (Background Tasks)
celery            = { version = "~=5.5.3",    optional = true }
celery-redbeat    = { version = "~=2.3.3",    optional = true }
celery_once       = { version = "~=3.0.1",    optional = true }

# Kafka
kafka-python      = { version = "~=2.2.15",   optional = true }

# ============================================================================
# Optional Feature Groups
# ============================================================================

[tool.poetry.extras]
# Complete installation profiles
all = [
  "python-jose", "passlib", "bcrypt",
  "fastapi", "gunicorn", "uvicorn", "python-multipart",
  "boto3",
  "SQLAlchemy", "psycopg2", "asyncpg",
  "paramiko", "python-dateutil",
  "redis", "celery", "celery-redbeat", "celery_once",
  "kafka-python",
]
normal  = [
  "fastapi", "gunicorn", "uvicorn", "python-multipart",
  "SQLAlchemy", "psycopg2", "asyncpg",
  "redis", "celery", "celery-redbeat", "celery_once",
]

# Streamlined profiles for specific use cases
slim-api  = [
  "fastapi", "gunicorn", "uvicorn", "python-multipart",
  "SQLAlchemy", "psycopg2", "asyncpg"
]
slim-task  = [
  "SQLAlchemy", "psycopg2", "asyncpg",
  "redis", "celery", "celery-redbeat", "celery_once",
]

# Individual feature groups
encrypt        = ["python-jose", "passlib", "bcrypt"]
api            = ["fastapi", "gunicorn", "uvicorn", "python-multipart"]
bucket         = ["boto3"]
db             = ["SQLAlchemy", "psycopg2", "asyncpg"]
db-mysql       = ["SQLAlchemy", "PyMySQL", "aiomysql"]
ftp            = ["paramiko", "python-dateutil"]
redis          = ["redis"]
redis_streamer = ["redis"]
kafka          = ["kafka-python"]
worker         = ["redis", "celery", "celery-redbeat", "celery_once"]

# ============================================================================
# Development Dependencies
# ============================================================================

[tool.poetry.group.dev.dependencies]
# Type stubs for better type checking
types-requests = "*"
types-passlib = "*"
types-python-dateutil = "*"
boto3-stubs = "*"
types-paramiko = "*"
types-redis = "*"
types-python-jose = "*"
types-psycopg2 = "*"
types-PyMySQL = "*"
celery-types = "*"

# Development tools (add these for better DX)
black = "^24.0.0"
isort = "^5.13.0"
mypy = "^1.11.0"
pytest = "^8.3.0"
pytest-asyncio = "^0.24.0"
pytest-cov = "^5.0.0"
ruff = "^0.6.0"

# ============================================================================
# Build System
# ============================================================================

[build-system]
requires    = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# ============================================================================
# Tool Configurations
# ============================================================================

[tool.black]
line-length = 88
target-version = ["py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true
skip = [".venv", "venv", ".tox", "build", "dist", "__pycache__"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_calls = false
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
strict_optional = true
ignore_missing_imports = true
show_error_codes = true
namespace_packages = true
explicit_package_bases = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
  "--strict-markers",
  "--tb=short",
  "--disable-warnings",
]
markers = [
  "unit: Unit tests",
  "integration: Integration tests",
  "asyncio: Async tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["dtpyfw"]
omit = [
  "*/tests/*",
  "*/test_*.py",
  "*/__pycache__/*",
  "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "if typing.TYPE_CHECKING:",
  "@abstractmethod",
  "@abc.abstractmethod",
]
precision = 2
show_missing = true

[tool.ruff]
line-length = 88
target-version = "py311"
extend-exclude = [
  ".venv",
  "venv",
  "__pycache__",
  ".mypy_cache",
  ".pytest_cache",
  "build",
  "dist",
]

[tool.ruff.lint]
select = [
  "E",   # pycodestyle errors
  "W",   # pycodestyle warnings
  "F",   # pyflakes
  "I",   # isort
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "UP",  # pyupgrade
]
ignore = [
  "E501",  # line too long (handled by black)
  "B008",  # do not perform function calls in argument defaults
  "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"tests/**/*.py" = ["B018"]

[tool.ruff.lint.isort]
known-first-party = ["dtpyfw"]
