name: Version Bump PR

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version Bump Type'
        required: true
        type: choice
        options:
          - major
          - minor
          - patch
        default: 'minor'

permissions:
  contents: write
  pull-requests: write

jobs:
  version_bump_pr:
    runs-on: ubuntu-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        cache: true

    - name: Install dependencies
      run: |
        uv pip install --system toml

    - name: Bump version
      id: bump_version
      run: |
        BUMP_TYPE="${{ github.event.inputs.bump_type }}"

        # Read current version from pyproject.toml
        CURRENT_VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
        echo "Current version: $CURRENT_VERSION"

        # Split version into components
        IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR="${VERSION_PARTS[0]}"
        MINOR="${VERSION_PARTS[1]}"
        PATCH="${VERSION_PARTS[2]}"

        # Bump version according to bump type
        case "$BUMP_TYPE" in
          major)
            NEW_VERSION="$((MAJOR + 1)).0.0"
            ;;
          minor)
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
            ;;
          patch)
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
            ;;
          *)
            echo "Error: Invalid bump type"
            exit 1
            ;;
        esac

        echo "New version: $NEW_VERSION"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

        # Ensure there's exactly one version line in the [project] section
        PROJECT_VERSION_LINES=$(sed -n '/^\[project\]/,/^\[/p' pyproject.toml | grep -c 'version = "')

        if [ "$PROJECT_VERSION_LINES" -ne 1 ]; then
          echo "Error: Found $PROJECT_VERSION_LINES version lines in [project] section, expected exactly 1"
          exit 1
        fi

        # Update version in pyproject.toml (only in the [project] section)
        sed -i -E '/^\[project\]/,/^\[/ s/^(version = ")[0-9]+\.[0-9]+\.[0-9]+(")$/\1'"$NEW_VERSION"'\2/' pyproject.toml

        # Verify the change was made
        if ! grep -q 'version = "'"$NEW_VERSION"'"' pyproject.toml; then
          echo "Error: Failed to update version in pyproject.toml"
          exit 1
        fi

    - name: Import GPG key
      uses: crazy-max/ghaction-import-gpg@v6
      with:
        gpg_private_key: ${{ secrets.PANTHER_BOT_GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.PANTHER_BOT_GPG_PRIVATE_KEY_PASSPHRASE }}
        git_user_signingkey: true
        git_commit_gpgsign: true

    - name: Create Branch and Pull Request
      run: |
        NEW_VERSION="${{ steps.bump_version.outputs.new_version }}"
        git config --global user.email "github-service-account-automation@panther.io"
        git config --global user.name "panther-bot-automation"

        BRANCH_NAME="bump-version-to-$NEW_VERSION"
        git checkout -b "$BRANCH_NAME"
        git add pyproject.toml
        git commit -S -m "Bump version to $NEW_VERSION"
        git push --set-upstream origin "$BRANCH_NAME"

        gh pr create \
          --title "Version bump to v$NEW_VERSION" \
          --body "Automated version bump to prepare for release v$NEW_VERSION" \
          --base main
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
