name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        uv pip install --system -e ".[dev]"

    - name: Run linting with ruff
      run: |
        ruff check src/ tests/

    - name: Run type checking with mypy
      run: |
        mypy src/claude_worktree

    - name: Run tests with pytest
      run: |
        pytest -v --cov=claude_worktree --cov-report=xml --cov-report=term --junit-xml=pytest-results.xml

    - name: Generate test summary
      if: always()
      run: |
        echo "## Test Results - ${{ matrix.os }} / Python ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Parse pytest XML results
        if [ -f pytest-results.xml ]; then
          python3 << 'EOF'
        import xml.etree.ElementTree as ET
        import sys

        try:
            tree = ET.parse('pytest-results.xml')
            root = tree.getroot()
            testsuite = root.find('.//testsuite')

            if testsuite is not None:
                tests = int(testsuite.get('tests', 0))
                failures = int(testsuite.get('failures', 0))
                errors = int(testsuite.get('errors', 0))
                skipped = int(testsuite.get('skipped', 0))
                time = float(testsuite.get('time', 0))
                passed = tests - failures - errors - skipped

                # Write summary table
                print(f"| Metric | Value |")
                print(f"|--------|-------|")
                print(f"| ✅ Passed | {passed} |")
                print(f"| ❌ Failed | {failures} |")
                print(f"| ⚠️ Errors | {errors} |")
                print(f"| ⏭️ Skipped | {skipped} |")
                print(f"| 📊 Total | {tests} |")
                print(f"| ⏱️ Duration | {time:.2f}s |")
                print()

                # Overall status
                if failures == 0 and errors == 0:
                    print("### ✅ All tests passed!")
                else:
                    print(f"### ❌ {failures + errors} test(s) failed")
                    print()
                    # List failed tests
                    print("#### Failed Tests:")
                    for testcase in root.findall('.//testcase'):
                        failure = testcase.find('failure')
                        error = testcase.find('error')
                        if failure is not None or error is not None:
                            classname = testcase.get('classname', '')
                            name = testcase.get('name', '')
                            print(f"- `{classname}.{name}`")
        except Exception as e:
            print(f"Error parsing test results: {e}")
        EOF
        fi >> $GITHUB_STEP_SUMMARY

        # Add coverage info if available
        if [ -f coverage.xml ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📈 Coverage" >> $GITHUB_STEP_SUMMARY
          python3 << 'EOF'
        import xml.etree.ElementTree as ET
        try:
            tree = ET.parse('coverage.xml')
            root = tree.getroot()
            coverage = root.find('.')
            if coverage is not None:
                line_rate = float(coverage.get('line-rate', 0))
                coverage_pct = line_rate * 100

                if coverage_pct >= 80:
                    emoji = "🟢"
                elif coverage_pct >= 60:
                    emoji = "🟡"
                else:
                    emoji = "🔴"

                print(f"{emoji} **{coverage_pct:.1f}%** line coverage")
        except:
            pass
        EOF
        fi >> $GITHUB_STEP_SUMMARY

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
