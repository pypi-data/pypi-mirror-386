[project]
name = "oidc-provider-mock"
version = "0.3.1"
description = "OpenID Connect provider server for testing authentication"
authors = [{ name = "Thomas Scholtes", email = "geigerzaehler@axiom.fm" }]
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
keywords = [
  "OpenID Connect",
  "OIDC",
  "mock",
  "OAuth",
  "testing",
  "development",
  "authentication",
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Topic :: Software Development :: Testing",
  "Topic :: Software Development :: Testing :: Mocking",
  "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
  "Topic :: Security",
]
dependencies = [
  "authlib>=1.5",
  "flask>=3.1",
  "httpx>=0.26",
  "htpy>=25.2.0",
  "joserfc>=1.0.3",
  "pydantic>=2.0",
  "typing-extensions>=4.0",
  "uvicorn>=0.30.0",
]

[project.scripts]
oidc-provider-mock = "oidc_provider_mock.__main__:run"

[project.urls]
# https://packaging.python.org/en/latest/specifications/well-known-project-urls/#well-known-labels
Homepage = "https://github.com/geigerzaehler/oidc-provider-mock"
Documentation = "https://github.com/geigerzaehler/oidc-provider-mock"
Source = "https://github.com/geigerzaehler/oidc-provider-mock"
Issues = "https://github.com/geigerzaehler/oidc-provider-mock/issues"

[dependency-groups]
dev = [
  "faker>=33.3.1",
  "flask-oidc>=2.2.2",
  "httpx>=0.28.1",
  "myst-parser>=4.0.0",
  "pyright==1.1.406",
  "pytest-cov>=6.0.0",
  "pytest-flask>=1.3.0",
  "pytest-playwright>=0.6.2",
  "pytest-randomly>=3.16.0",
  "pytest-watcher>=0.4.3",
  "pytest>=8.3.4",
  "ruff>=0.8.4",
  "shibuya>=2024.12.21",
  "sphinx-autobuild>=2024.10.3",
  "sphinx>=8.1.3",
  "typeguard>=4.4.1",
  "watchfiles>=1.0.3",
  "freezegun>=1.5.1",
  "ipython>=8.31.0",
]


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pytest.ini_options]
addopts = """\
  --verbose \
  --cov-report term
  --cov-report html
  --tb=short
  --doctest-modules
  --tracing=retain-on-failure
  --pdbcls=IPython.terminal.debugger:TerminalPdb
  """
python_files = ["*_test.py", "*/examples/*.py"]
python_classes = ""
filterwarnings = [
  "error",
  "ignore:Cannot resolve forward reference 'Response':typeguard.TypeHintWarning",
]
markers = [
  "provider_config", # Configure provider with certain options
]
typeguard-debug-instrumentation = true
typeguard-forward-ref-policy = "WARN"
typeguard-collection-check-strategy = "ALL_ITEMS"
# pytest-flask
live_server_scope = "function"

[tool.ruff.format]
preview = true

[tool.ruff.lint]
preview = true
extend-select = [
  "I",
  "UP",
  "PT",
  "PIE",
  "B",
  "SIM",
  "TCH",
  "T20",
  "RUF",
  "C4",   # List comprehension
  "DTZ",
  "FURB",
]
ignore = [
  # Pyright checks for unused imports and does it better.
  "F401",
  # contextlib.suppress() is less explicit
  "SIM105",
  # ternary is often less readable
  "SIM108",
  # Ignore ambigious unicode characters
  "RUF001",
  "RUF002",
  "RUF003",
  # ClassVar annotations are to verbose
  "RUF012",
  # Itâ€™s ok to reimplement operators in lambdas. The lambda is more explicit and
  # easier to understand.
  "FURB118",
]

[tool.pyright]
typeCheckingMode = "strict"
reportMissingTypeStubs = "none"
reportUnnecessaryTypeIgnoreComment = "warning"
reportUnusedClass = "warning"
reportUnusedImport = "warning"
reportUnusedFunction = "none"
reportUnusedVariable = "warning"

[tool.coverage.run]
branch = true
