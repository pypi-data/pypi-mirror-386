[tool.poetry]
name = "pyportainer"
version = "1.0.5"
description = "Asynchronous Python client for the Portainer API"
authors = ["Erwin Douna <e.douna@gmail.com>"]
maintainers = ["Erwin Douna <e.douna@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/erwindouna/pyportainer"
repository = "https://github.com/erwindouna/pyportainer"
documentation = "https://github.com/erwindouna/pyportainer"
keywords = ["python-portainer", "api", "async", "client"]
classifiers = [
  "Framework :: AsyncIO",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
packages = [
  { include = "pyportainer", from = "src"},
]

[tool.poetry.dependencies]
aiohttp = ">=3.0.0"
python = "^3.11"
yarl = ">=1.6.0"
mashumaro = ">=3.15"
orjson = "^3.10.16"


[tool.poetry.urls]
"Bug Tracker" = "https://github.com/erwindouna/pyportainer/issues"
Changelog = "https://github.com/erwindouna/pyportainer/releases"

[tool.poetry.group.dev.dependencies]
aresponses = "3.0.0"
codespell = "2.3.0"
covdefaults = "2.3.0"
coverage = {version = "7.11.0", extras = ["toml"]}
mypy = "1.18.2"
pre-commit = "4.3.0"
pre-commit-hooks = "6.0.0"
pylint = "4.0.1"
pytest = "8.4.2"
pytest-asyncio = "1.2.0"
pytest-cov = "7.0.0"
ruff = "0.14.1"
syrupy = "5.0.0"
yamllint = "1.37.1"
datamodel-code-generator = ">=0.28.5,<0.36.0"

[tool.coverage.run]
plugins = ["covdefaults"]
source = ["pyportainer"]

[tool.coverage.report]
fail_under = 90
show_missing = true

[tool.mypy]
# Specify the target platform details in config, so your developers are
# free to run mypy on Windows, Linux, or macOS and get consistent
# results.
platform = "linux"
python_version = "3.11"

# flake8-mypy expects the two following for sensible formatting
show_column_numbers = true

# show error messages from unrelated files
follow_imports = "normal"

# suppress errors about unsatisfied imports
ignore_missing_imports = true

# be strict
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
strict_optional = true
warn_incomplete_stub = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pylint.MASTER]
ignore = ["tests"]

[tool.pylint.BASIC]
good-names = ["_", "ex", "fp", "i", "id", "j", "k", "on", "Run", "T"]

[tool.pylint."MESSAGES CONTROL"]
disable= [
  "duplicate-code",
  "format",
  "unsubscriptable-object",
]

[tool.pylint.SIMILARITIES]
ignore-imports = true

[tool.pylint.FORMAT]
max-line-length = 88

[tool.pylint.DESIGN]
max-attributes = 20

[tool.pytest.ini_options]
addopts = "--cov"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.ruff]
lint.select = ["ALL"]
line-length = 150
lint.ignore = [
  "ANN401",  # Opinioated warning on disallowing dynamically typed expressions
  "D203",    # Conflicts with other rules
  "D213",    # Conflicts with other rules
  "D417",    # False positives in some occasions
  "PLR2004", # Just annoying, not really useful
  "SLOT000", # Has a bug with enums: https://github.com/astral-sh/ruff/issues/5748

  # Conflicts with the Ruff formatter
  "COM812",
  "ISC001",
]

[tool.ruff.lint.flake8-pytest-style]
mark-parentheses = false
fixture-parentheses = false

[tool.ruff.lint.isort]
known-first-party = ["pyportainer"]

[tool.ruff.lint.mccabe]
max-complexity = 25

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.0.0"]
