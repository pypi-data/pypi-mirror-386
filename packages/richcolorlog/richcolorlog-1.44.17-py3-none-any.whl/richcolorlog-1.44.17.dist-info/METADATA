Metadata-Version: 2.4
Name: richcolorlog
Version: 1.44.17
Summary: A beautiful and feature-rich logging package using Rich library
Home-page: https://github.com/cumulus13/richcolorlog
Author: Hadi Cahyadi
Author-email: Hadi Cahyadi <cumulus13@gmail.com>
Maintainer-email: Hadi Cahyadi <cumulus13@gmail.com>
License: MIT
Project-URL: Homepage, https://github.com/cumulus13/richcolorlog
Project-URL: Repository, https://github.com/cumulus13/richcolorlog
Project-URL: Documentation, https://github.com/cumulus13/richcolorlog#readme
Project-URL: Bug Tracker, https://github.com/cumulus13/richcolorlog/issues
Keywords: logging,rich,console,terminal,colors,formatting
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: System :: Logging
Classifier: Topic :: Utilities
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: rich>=10.0.0
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: flake8; extra == "dev"
Requires-Dist: mypy; extra == "dev"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# üåà **richcolorlog** ‚Äì Beautiful, Powerful & Multi-Output Logging for Python

> ‚ú® **Log like a pro** with emoji icons, syntax highlighting, custom log levels, and support for **console, file, RabbitMQ, Kafka, ZeroMQ, Syslog, and databases** ‚Äî all in one package!

[![PyPI version](https://img.shields.io/pypi/v/richcolorlog.svg?color=blue&logo=pypi)](https://pypi.org/project/richcolorlog/)
[![Python Versions](https://img.shields.io/pypi/pyversions/richcolorlog.svg?logo=python)](https://pypi.org/project/richcolorlog/)
[![License](https://img.shields.io/github/license/cumulus13/richcolorlog?color=green)](https://github.com/cumulus13/richcolorlog/blob/main/LICENSE)
[![Downloads](https://static.pepy.tech/badge/richcolorlog)](https://pepy.tech/project/richcolorlog)

[![Screenshot](https://raw.githubusercontent.com/cumulus13/richcolorlog/master/screenshot.png)](https://raw.githubusercontent.com/cumulus13/richcolorlog/master/screenshot.png)

---

## üöÄ Features

- ‚úÖ **Rich Console Output** with colors, backgrounds, and **emoji icons** per log level  
- üé® **Syntax Highlighting** for code snippets (Python, SQL, JSON, etc.) via `lexer='python'`  
- üéØ **Custom Log Levels**: `EMERGENCY`, `ALERT`, `NOTICE`, `FATAL` (Syslog-compliant)  
- üì¶ **Multi-Handler Support**:  
  - üñ•Ô∏è Console (Rich + ANSI fallback)  
  - üìÑ File (with level-based formatting)  
  - üêá RabbitMQ  
  - üì° Kafka  
  - üì° ZeroMQ  
  - üì° Syslog  
  - üóÑÔ∏è PostgreSQL / MySQL / MariaDB / SQLite  

- üß™ **Jupyter/IPython Friendly** (no async warnings!)  
- üß© **Full LogRecord Template Support**: `%(asctime)s`, `%(funcName)s`, `%(threadName)s`, `%(icon)s`, etc.  
- üîÅ **Smart Timestamp**: Repeated timestamps are hidden (like `RichHandler` original)
- üé® **Custom Colors**: Set color per level (`info_color`, `error_color`, etc.)
- ‚öôÔ∏è **Highly Configurable**: `icon_first`, `level_in_message`, `show_background`, etc.  
- üöÄ **Easy to use** - Simple setup with sensible defaults
- ‚ö° **Zero required dependencies** (only `rich` for Rich mode; brokers optional)
- üé® **Support any terminal** - with ansi color Fallback

---

## üì¶ Installation

Install from PyPI:

```bash
pip install richcolorlog
```

> üí° **Optional**: Install extras for message brokers:
> ```bash
> pip install richcolorlog[rabbitmq,kafka,zmq,db]
> ```

Or install from source:

```bash
git clone https://github.com/cumulus13/richcolorlog
cd richcolorlog
pip install -e .
```

---

## üß™ Quick Start

### Basic Usage (Rich Console)

```python
>>> from richcolorlog import setup_logging

>>> logger = setup_logging(
        name="myapp",
        show_background=True,
        show_icon=True,
        icon_first=True
    )
>>> logger.emergency("This is an emergency message")
    logger.alert("This is an alert message")
    logger.critical("This is a critical message")
    logger.error("This is an error message")
    logger.warning("This is a warning message")
    logger.notice("This is a notice message")
    logger.info("This is an info message")
    logger.debug("This is a debug message")
>>> # output
    üÜò [10/04/25 14:12:07] EMERGENCY This is an emergency message
    üö® [10/04/25 14:12:07] ALERT    This is an alert message
    üí• [10/04/25 14:12:07] CRITICAL This is a critical message
    ‚ùå [10/04/25 14:12:07] ERROR    This is an error message
    ‚õî [10/04/25 14:12:07] WARNING  This is a warning message
    üì¢ [10/04/25 14:12:07] NOTICE   This is a notice message
    üîî [10/04/25 14:12:07] INFO     This is an info message
    üêõ [10/04/25 14:12:07] DEBUG    This is a debug message

>>> FORMAT = "%(icon)s %(asctime)s - %(name)s - %(process)d - %(levelname)s - %(message)s (%(filename)s:%(lineno)d)"
>>> logger = setup_logging(show_background=True, format_template=FORMAT, name="TEST")
>>> code = """
    def hello():
        print("Hello World")
    """
>>> logger.info(code, lexer='python')
>>> #output
    üîî [10/04/25 15:12:34] TEST 15448 INFO

    def hello():
        print("Hello World")

>>> logger.debug("SELECT * FROM users", lexer="sql")  # Syntax highlighted!
>>> #output
    üêõ [10/04/25 15:12:35] TEST 15448 DEBUG                                
    SELECT * FROM users

```

### With Custom Format Template

```python
template = "%(asctime)s | %(levelname)s | %(name)s | %(funcName)s() | %(message)s"

logger = setup_logging(
    name="api",
    format_template=template,
    show_background=False
)

logger.notice("User logged in successfully üîë")
```

### Custom Format Template + Icon in Template

```python
FORMAT = "%(icon)s %(asctime)s - %(levelname)s - %(message)s (%(filename)s:%(lineno)d)"

logger = setup_logging(
    name="TEST",
    format_template=FORMAT,
    icon_first=True,           # Icon always at start (overrides template position)
    omit_repeated_times=True   # Hide repeated timestamps
)

logger.info("Hello world")
# Output:
# üîî [10/06/25 15:30:00] INFO - Hello world (test.py:10)
# üîî                     INFO - Another message (test.py:11)
```

### Show Level in Message (`level_in_message=True`)

```python
logger = setup_logging(level_in_message=True)
logger.info("This is a message")
# Output: INFO - This is a message
```

### Simple Logger (No Rich, for Jupyter)

```python
from richcolorlog import setup_logging_custom

logger = setup_logging_custom(
    name="notebook",
    show_icon=True,
    icon_first=False,
    show_background=False
)

logger.info("Running analysis in Jupyter üìä")
```

---

## üéØ Advanced Examples

### üîå Send Logs to Kafka & File Logging

```python
logger = setup_logging(
    name="producer",
    log_file=True,
    log_file_name="app.log",
    kafka=True,
    kafka_host="localhost",
    kafka_port=9092,
    kafka_topic="app-logs",
    level="DEBUG"
)

logger.alert("Critical system event! üö®")
```

### üóÑÔ∏è Log to PostgreSQL

```python
logger = setup_logging(
    db=True,
    db_type="postgresql",
    db_host="localhost",
    db_name="logs",
    db_user="admin",
    db_password="secret"
)

logger.emergency("Database connection lost!")
```

### üé® Custom Colors per Level

```python
logger = setup_logging(
    info_color="#00FFAA",
    error_color="bold red on #111111",
    warning_color="yellow",
    show_background=True
)
logger.info("Custom color!")
logger.error("Custom background!")
```

### üß† Custom Log Levels

```python
logger.notice("New user registered üì¢")      # Custom level 25
logger.fatal("Fatal error ‚Äî shutting down üíÄ")  # Level 55
logger.alert("Immediate action required! üö®")   # Level 59
```

### üß† Custom Log Levels (Correct Location!)

```python
# File: test.py
logger = setup_logging(name="test")
logger.emergency("System down!")  # Shows: test.py:5 (not logger.py!)
```

```
import logging
logger = logging.getLogger("INHERITANCE")
from richcolorlog import RichColorLogHandler
handler = RichColorLogHandler()
logger.handlers.clear()
logger.addHandler(handler)
logger.propagate = False

logger.emergency("RGBME v0.13.2 - 128x64 Matrix | 1x1 Chain | 12px per LED (REAL) | BrowserAdapter")
logger.alert("RGBME v0.13.2 - 128x64 Matrix | 1x1 Chain | 12px per LED (REAL) | BrowserAdapter")
logger.critical("RGBME v0.13.2 - 128x64 Matrix | 1x1 Chain | 12px per LED (REAL) | BrowserAdapter")
logger.error("RGBME v0.13.2 - 128x64 Matrix | 1x1 Chain | 12px per LED (REAL) | BrowserAdapter")
logger.warning("RGBME v0.13.2 - 128x64 Matrix | 1x1 Chain | 12px per LED (REAL) | BrowserAdapter")
logger.notice("RGBME v0.13.2 - 128x64 Matrix | 1x1 Chain | 12px per LED (REAL) | BrowserAdapter")
logger.debug("RGBME v0.13.2 - 128x64 Matrix | 1x1 Chain | 12px per LED (REAL) | BrowserAdapter")

```
---

## üõ†Ô∏è Configuration Options

| Parameter | Description | Default |
|----------|------------|--------|
| `show_icon` | Show emoji icons | `True` |
| `icon_first` | Icon before timestamp | `True` |
| `format_template` | Log format (supports `%(icon)s`) | `None` |
| `level_in_message` | Prefix message with `"LEVEL - "` | `False` |
| `omit_repeated_times` | Hide repeated timestamps | `True` |
| `show_background` | Enable background colors | `True` |
| `..._color` | Custom color per level (`info_color`, `error_color`, etc.) | Default |
| All `RichHandler` args | `tracebacks_show_locals`, `keywords`, `highlighter`, etc. | Fully supported |

> ‚úÖ If `format_template` contains `%(icon)s`, the icon is **still controlled by `icon_first`** ‚Äî no duplicates.

---

## ü¶ù Available Lexers

You can use any lexer supported by Pygments for syntax highlighting:

- `"python"` - Python code
- `"javascript"` - JavaScript code
- `"sql"` - SQL queries  
- `"json"` - JSON data
- `"yaml"` - YAML configuration
- `"bash"` - Shell scripts
- And many more...

## üêá Custom Log Levels

richcolorlog adds several custom log levels above the standard CRITICAL level:

| Level | Numeric Value | Description |
|-------|---------------|-------------|
| NOTICE | 55 | Informational messages |
| ALERT | 60 | Alert conditions |
| CRITICAL | 65 | Critical conditions |
| FATAL | 70 | Fatal errors |
| EMERGENCY | 75 | System is unusable |

---

## üß© Supported Log Record Fields in Templates

You can use **any standard `LogRecord` field** in your `format_template`:

```text
%(asctime)s       ‚Üí 2025-10-03 14:30:00
%(name)s          ‚Üí myapp
%(levelname)s     ‚Üí INFO
%(message)s       ‚Üí Your log message
%(filename)s      ‚Üí app.py
%(lineno)d        ‚Üí 42
%(funcName)s      ‚Üí main
%(process)d       ‚Üí 12345
%(thread)d        ‚Üí 67890
%(module)s        ‚Üí app
%(pathname)s      ‚Üí /path/to/app.py
%(created)f       ‚Üí 1728000000.123
%(msecs)d         ‚Üí 123
%(relativeCreated)d ‚Üí 456
%(processName)s   ‚Üí MainProcess
%(threadName)s    ‚Üí Thread-1
%(icon)s          ‚Üí üêû (auto-injected)
```

> ‚úÖ **Custom fields** from `extra={}` are also supported!

---

## üåê Compatibility

- ‚úÖ **Python 3.8+**
- ‚úÖ **Jupyter Notebook / IPython** (auto-detects and disables async features)
- ‚úÖ **Terminals** (Windows, macOS, Linux)
- ‚úÖ **Docker / CI Environments** (falls back to ANSI if needed)

---

## üìö Why Use `richcolorlog`?

| Feature | Standard `logging` | `rich` | `richcolorlog` |
|--------|-------------------|--------|----------------|
| Emoji Icons | ‚ùå | ‚ùå | ‚úÖ |
| Custom Levels (`NOTICE`, `ALERT`) | ‚ùå | ‚ùå | ‚úÖ |
| Syntax Highlighting | ‚ùå | ‚ùå | ‚úÖ |
| Multi-Output (File + Kafka + DB) | Manual | ‚ùå | ‚úÖ |
| Template + Icon | ‚ùå | Limited | ‚úÖ |
| Accurate File/Line | ‚úÖ | ‚ùå | ‚úÖ |
| Jupyter Safe | ‚ùå | ‚ö†Ô∏è | ‚úÖ |
| Repeated Timestamps | ‚ùå | ‚úÖ | ‚úÖ 
| Custom Format Templates | ‚úÖ | Limited | ‚úÖ + **icon support** |

---

## üôè Acknowledgements

- Built on top of [`rich`](https://github.com/Textualize/rich) by Will McGugan with ansi color Fallback if no rich installed  
- Icons from [EmojiOne](https://emojione.com/)
---

## üìú License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

MIT ¬© [Hadi Cahyadi](https://github.com/cumulus13)

---

## üîó Links

- üì¶ **PyPI**: https://pypi.org/project/richcolorlog/  
- üíª **GitHub**: https://github.com/cumulus13/richcolorlog  
- üìß **Author**: cumulus13@gmail.com

---

> üí¨ **Made with ‚ù§Ô∏è for developers who love beautiful, informative logs!**  
> ‚≠ê **Star the repo if you find it useful!**


## author
[Hadi Cahyadi](mailto:cumulus13@gmail.com)
    

[![Buy Me a Coffee](https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png)](https://www.buymeacoffee.com/cumulus13)

[![Donate via Ko-fi](https://ko-fi.com/img/githubbutton_sm.svg)](https://ko-fi.com/cumulus13)
 
[Support me on Patreon](https://www.patreon.com/cumulus13)
