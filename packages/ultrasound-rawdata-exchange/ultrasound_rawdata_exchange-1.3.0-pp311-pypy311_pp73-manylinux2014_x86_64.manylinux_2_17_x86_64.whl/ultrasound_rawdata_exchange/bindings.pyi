from typing import ClassVar, Iterable, Iterator, overload

import numpy
import numpy.typing as npt

URX_VERSION_MAJOR: int
URX_VERSION_MINOR: int
URX_VERSION_PATCH: int

class Acquisition:
    authors: str
    country_code: str
    description: str
    excitations: VecExcitationPtr | list[Excitation]
    groups: VecGroupPtr | list[Group]
    groups_data: VecGroupData | list[GroupData]
    local_time: str
    probes: VecProbePtr | list[Probe]
    system: str
    timestamp: DoubleNan | float | int
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Acquisition) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: str, arg4: str, arg5: DoubleNan | float | int, arg6: VecProbePtr | list[Probe], arg7: VecExcitationPtr | list[Excitation], arg8: VecGroupPtr | list[Group], arg9: VecGroupData | list[GroupData]) -> None: ...
    def __eq__(self, arg0: Acquisition) -> bool: ...
    def __ne__(self, arg0: Acquisition) -> bool: ...

class DataType:
    __members__: ClassVar[dict] = ...  # read-only
    DOUBLE: ClassVar[DataType] = ...
    FLOAT: ClassVar[DataType] = ...
    INT16: ClassVar[DataType] = ...
    INT32: ClassVar[DataType] = ...
    UNDEFINED: ClassVar[DataType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Dataset:
    acquisition: Acquisition
    version: Version
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Dataset) -> None: ...
    @overload
    def __init__(self, arg0: Acquisition, arg1: Version) -> None: ...
    def __eq__(self, arg0: Dataset) -> bool: ...
    def __ne__(self, arg0: Dataset) -> bool: ...

class DoubleNan:
    value: float
    @overload
    def __init__(self, arg0: float) -> None: ...
    @overload
    def __init__(self, arg0: DoubleNan | float | int) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __add__(self, arg0: DoubleNan | float | int) -> DoubleNan: ...
    @overload
    def __add__(self, arg0: float) -> DoubleNan: ...
    def __array__(self) -> numpy.ndarray[numpy.float64]: ...
    @overload
    def __eq__(self, arg0: DoubleNan | float | int) -> bool: ...
    @overload
    def __eq__(self, arg0: float) -> bool: ...
    def __float__(self) -> float: ...
    @overload
    def __iadd__(self, arg0: DoubleNan | float | int) -> DoubleNan: ...
    @overload
    def __iadd__(self, arg0: float) -> DoubleNan: ...
    @overload
    def __imul__(self, arg0: DoubleNan | float | int) -> DoubleNan: ...
    @overload
    def __imul__(self, arg0: float) -> DoubleNan: ...
    @overload
    def __isub__(self, arg0: DoubleNan | float | int) -> DoubleNan: ...
    @overload
    def __isub__(self, arg0: float) -> DoubleNan: ...
    @overload
    def __itruediv__(self, arg0: DoubleNan | float | int) -> DoubleNan: ...
    @overload
    def __itruediv__(self, arg0: float) -> DoubleNan: ...
    @overload
    def __mul__(self, arg0: DoubleNan | float | int) -> DoubleNan: ...
    @overload
    def __mul__(self, arg0: float) -> DoubleNan: ...
    @overload
    def __ne__(self, arg0: DoubleNan | float | int) -> bool: ...
    @overload
    def __ne__(self, arg0: float) -> bool: ...
    def __neg__(self) -> float: ...
    def __pos__(self) -> float: ...
    def __radd__(self, arg0: float) -> DoubleNan: ...
    def __rmul__(self, arg0: float) -> DoubleNan: ...
    def __rsub__(self, arg0: float) -> DoubleNan: ...
    def __rtruediv__(self, arg0: float) -> DoubleNan: ...
    @overload
    def __sub__(self, arg0: DoubleNan | float | int) -> DoubleNan: ...
    @overload
    def __sub__(self, arg0: float) -> DoubleNan: ...
    @overload
    def __truediv__(self, arg0: DoubleNan | float | int) -> DoubleNan: ...
    @overload
    def __truediv__(self, arg0: float) -> DoubleNan: ...

class Element:
    element_geometry: ElementGeometry
    impulse_response: ImpulseResponse
    transform: Transform
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Element) -> None: ...
    @overload
    def __init__(self, arg0: Transform, arg1: ElementGeometry, arg2: ImpulseResponse) -> None: ...
    def __eq__(self, arg0: Element) -> bool: ...
    def __ne__(self, arg0: Element) -> bool: ...

class ElementGeometry:
    perimeter: VecVector3D | list[Vector3D]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: ElementGeometry) -> None: ...
    @overload
    def __init__(self, arg0: VecVector3D | list[Vector3D]) -> None: ...
    def __eq__(self, arg0: ElementGeometry) -> bool: ...
    def __ne__(self, arg0: ElementGeometry) -> bool: ...

class Event:
    receive_setup: ReceiveSetup
    transmit_setup: TransmitSetup
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Event) -> None: ...
    @overload
    def __init__(self, arg0: TransmitSetup, arg1: ReceiveSetup) -> None: ...
    def __eq__(self, arg0: Event) -> bool: ...
    def __ne__(self, arg0: Event) -> bool: ...

class Excitation:
    pulse_shape: str
    sampling_frequency: DoubleNan | float | int
    transmit_frequency: DoubleNan | float | int
    waveform: VecFloat64 | list[float] | npt.NDArray[numpy.float64]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Excitation) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: DoubleNan | float | int, arg2: DoubleNan | float | int, arg3: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> None: ...
    def __eq__(self, arg0: Excitation) -> bool: ...
    def __ne__(self, arg0: Excitation) -> bool: ...

class Group:
    data_type: DataType
    description: str
    sampling_type: SamplingType
    sequence: VecEvent | list[Event]
    sound_speed: DoubleNan | float | int
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Group) -> None: ...
    @overload
    def __init__(self, arg0: SamplingType, arg1: DataType, arg2: str, arg3: DoubleNan | float | int, arg4: VecEvent | list[Event]) -> None: ...
    def __eq__(self, arg0: Group) -> bool: ...
    def __ne__(self, arg0: Group) -> bool: ...

class GroupData:
    event_timestamps: VecVecFloat64 | list[list[float]] | npt.NDArray[numpy.float64]
    group: Group
    group_timestamp: DoubleNan | float | int
    raw_data: numpy.ndarray
    sequence_timestamps: VecFloat64 | list[float] | npt.NDArray[numpy.float64]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: GroupData) -> None: ...
    @overload
    def __init__(self, arg0: Group, arg1: numpy.ndarray, arg2: DoubleNan | float | int, arg3: VecFloat64 | list[float] | npt.NDArray[numpy.float64], arg4: VecVecFloat64 | list[list[float]] | npt.NDArray[numpy.float64]) -> None: ...
    def __eq__(self, arg0: GroupData) -> bool: ...
    def __ne__(self, arg0: GroupData) -> bool: ...

class GroupDataReader:
    def __init__(self, arg0: GroupData) -> None: ...
    def channelsCount(self, arg0: int) -> int: ...
    def eventsCount(self) -> int: ...
    def offset(self, arg0: int, arg1: int, arg2: int, arg3: int) -> int: ...
    def sampleByteSize(self) -> int: ...
    def samplesCount(self, arg0: int) -> int: ...
    def sequencesCount(self) -> int: ...

class GroupDatastream:
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def append(self, arg0, arg1: float, arg2: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> None: ...
    @overload
    def append(self, arg0: numpy.ndarray, arg1: float, arg2: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> None: ...
    def getGroupData(self) -> GroupData: ...

class ImpulseResponse:
    data: VecFloat64 | list[float] | npt.NDArray[numpy.float64]
    sampling_frequency: DoubleNan | float | int
    time_offset: DoubleNan | float | int
    units: str
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: ImpulseResponse) -> None: ...
    @overload
    def __init__(self, arg0: DoubleNan | float | int, arg1: DoubleNan | float | int, arg2: str, arg3: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> None: ...
    def __eq__(self, arg0: ImpulseResponse) -> bool: ...
    def __ne__(self, arg0: ImpulseResponse) -> bool: ...

class Probe:
    description: str
    element_geometries: VecElementGeometryPtr | list[ElementGeometry]
    elements: VecElement | list[Element]
    impulse_responses: VecImpulseResponsePtr | list[ImpulseResponse]
    transform: Transform
    type: ProbeType
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Probe) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: ProbeType, arg2: Transform, arg3: VecElementGeometryPtr | list[ElementGeometry], arg4: VecImpulseResponsePtr | list[ImpulseResponse], arg5: VecElement | list[Element]) -> None: ...
    def __eq__(self, arg0: Probe) -> bool: ...
    def __ne__(self, arg0: Probe) -> bool: ...

class ProbeType:
    __members__: ClassVar[dict] = ...  # read-only
    CURVILINEAR: ClassVar[ProbeType] = ...
    LINEAR: ClassVar[ProbeType] = ...
    MATRIX: ClassVar[ProbeType] = ...
    RCA: ClassVar[ProbeType] = ...
    SPARSE: ClassVar[ProbeType] = ...
    UNDEFINED: ClassVar[ProbeType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class RawDataLoadPolicy:
    __members__: ClassVar[dict] = ...  # read-only
    FULL: ClassVar[RawDataLoadPolicy] = ...
    STREAM: ClassVar[RawDataLoadPolicy] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class ReadFileException(RuntimeError): ...

class ReaderOptions:
    raw_data_load_policy: RawDataLoadPolicy
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: RawDataLoadPolicy) -> None: ...

class ReceiveSetup:
    active_elements: VecVecUInt32 | list[list[int]] | npt.NDArray[numpy.uint32]
    modulation_frequency: DoubleNan | float | int
    number_samples: int
    probe: Probe
    probe_transform: Transform
    sampling_frequency: DoubleNan | float | int
    tgc_profile: VecFloat64 | list[float] | npt.NDArray[numpy.float64]
    tgc_sampling_frequency: DoubleNan | float | int
    time_offset: DoubleNan | float | int
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: ReceiveSetup) -> None: ...
    @overload
    def __init__(self, arg0: Probe, arg1: Transform, arg2: DoubleNan | float | int, arg3: int, arg4: VecVecUInt32 | list[list[int]] | npt.NDArray[numpy.uint32], arg5: VecFloat64 | list[float] | npt.NDArray[numpy.float64], arg6: DoubleNan | float | int, arg7: DoubleNan | float | int, arg8: DoubleNan | float | int) -> None: ...
    def __eq__(self, arg0: ReceiveSetup) -> bool: ...
    def __ne__(self, arg0: ReceiveSetup) -> bool: ...

class SamplingType:
    __members__: ClassVar[dict] = ...  # read-only
    IQ: ClassVar[SamplingType] = ...
    RF: ClassVar[SamplingType] = ...
    UNDEFINED: ClassVar[SamplingType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Stream:
    def __init__(self, arg0: str, arg1: Dataset) -> None: ...
    def createGroupData(self, arg0: Group, arg1: DoubleNan | float | int) -> GroupDatastream: ...
    def loadFromFile(self) -> None: ...
    @overload
    def readRawData(self, arg0: int, arg1, arg2: int, arg3: int, arg4: int) -> None: ...
    @overload
    def readRawData(self, arg0: int, arg1: numpy.ndarray, arg2: int, arg3: int, arg4: int) -> numpy.ndarray: ...
    def readerOptions(self) -> ReaderOptions: ...
    def saveToFile(self) -> None: ...
    def writerOptions(self) -> WriterOptions: ...
    @property
    def dataset(self) -> Dataset: ...

class Transform:
    rotation: Vector3D
    translation: Vector3D
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Transform) -> None: ...
    @overload
    def __init__(self, arg0: Vector3D, arg1: Vector3D) -> None: ...
    def __eq__(self, arg0: Transform) -> bool: ...
    def __ne__(self, arg0: Transform) -> bool: ...

class TransmitSetup:
    active_elements: VecVecUInt32 | list[list[int]] | npt.NDArray[numpy.uint32]
    delays: VecFloat64 | list[float] | npt.NDArray[numpy.float64]
    excitations: VecExcitationPtr | list[Excitation]
    probe: Probe
    probe_transform: Transform
    time_offset: DoubleNan | float | int
    wave: Wave
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: TransmitSetup) -> None: ...
    @overload
    def __init__(self, arg0: Probe, arg1: Wave, arg2: VecVecUInt32 | list[list[int]] | npt.NDArray[numpy.uint32], arg3: VecExcitationPtr | list[Excitation], arg4: VecFloat64 | list[float] | npt.NDArray[numpy.float64], arg5: Transform, arg6: DoubleNan | float | int) -> None: ...
    def __eq__(self, arg0: TransmitSetup) -> bool: ...
    def __ne__(self, arg0: TransmitSetup) -> bool: ...

class UrxAcquisition:
    authors: str
    country_code: str
    description: str
    excitations: VecExcitationPtr | list[Excitation]
    groups: VecGroupPtr | list[Group]
    groups_data: VecGroupData | list[GroupData]
    local_time: str
    probes: VecProbePtr | list[Probe]
    system: str
    timestamp: DoubleNan | float | int
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Acquisition) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: str, arg4: str, arg5: DoubleNan | float | int, arg6: VecProbePtr | list[Probe], arg7: VecExcitationPtr | list[Excitation], arg8: VecGroupPtr | list[Group], arg9: VecGroupData | list[GroupData]) -> None: ...
    def __eq__(self, arg0: Acquisition) -> bool: ...
    def __ne__(self, arg0: Acquisition) -> bool: ...

class UrxDataType:
    __members__: ClassVar[dict] = ...  # read-only
    DOUBLE: ClassVar[DataType] = ...
    FLOAT: ClassVar[DataType] = ...
    INT16: ClassVar[DataType] = ...
    INT32: ClassVar[DataType] = ...
    UNDEFINED: ClassVar[DataType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class UrxDataset:
    acquisition: Acquisition
    version: Version
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Dataset) -> None: ...
    @overload
    def __init__(self, arg0: Acquisition, arg1: Version) -> None: ...
    def __eq__(self, arg0: Dataset) -> bool: ...
    def __ne__(self, arg0: Dataset) -> bool: ...

class UrxDoubleNan:
    value: float
    @overload
    def __init__(self, arg0: float) -> None: ...
    @overload
    def __init__(self, arg0: DoubleNan | float | int) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __add__(self, arg0: DoubleNan | float | int) -> DoubleNan: ...
    @overload
    def __add__(self, arg0: float) -> DoubleNan: ...
    def __array__(self) -> numpy.ndarray[numpy.float64]: ...
    @overload
    def __eq__(self, arg0: DoubleNan | float | int) -> bool: ...
    @overload
    def __eq__(self, arg0: float) -> bool: ...
    def __float__(self) -> float: ...
    @overload
    def __iadd__(self, arg0: DoubleNan | float | int) -> DoubleNan: ...
    @overload
    def __iadd__(self, arg0: float) -> DoubleNan: ...
    @overload
    def __imul__(self, arg0: DoubleNan | float | int) -> DoubleNan: ...
    @overload
    def __imul__(self, arg0: float) -> DoubleNan: ...
    @overload
    def __isub__(self, arg0: DoubleNan | float | int) -> DoubleNan: ...
    @overload
    def __isub__(self, arg0: float) -> DoubleNan: ...
    @overload
    def __itruediv__(self, arg0: DoubleNan | float | int) -> DoubleNan: ...
    @overload
    def __itruediv__(self, arg0: float) -> DoubleNan: ...
    @overload
    def __mul__(self, arg0: DoubleNan | float | int) -> DoubleNan: ...
    @overload
    def __mul__(self, arg0: float) -> DoubleNan: ...
    @overload
    def __ne__(self, arg0: DoubleNan | float | int) -> bool: ...
    @overload
    def __ne__(self, arg0: float) -> bool: ...
    def __neg__(self) -> float: ...
    def __pos__(self) -> float: ...
    def __radd__(self, arg0: float) -> DoubleNan: ...
    def __rmul__(self, arg0: float) -> DoubleNan: ...
    def __rsub__(self, arg0: float) -> DoubleNan: ...
    def __rtruediv__(self, arg0: float) -> DoubleNan: ...
    @overload
    def __sub__(self, arg0: DoubleNan | float | int) -> DoubleNan: ...
    @overload
    def __sub__(self, arg0: float) -> DoubleNan: ...
    @overload
    def __truediv__(self, arg0: DoubleNan | float | int) -> DoubleNan: ...
    @overload
    def __truediv__(self, arg0: float) -> DoubleNan: ...

class UrxElement:
    element_geometry: ElementGeometry
    impulse_response: ImpulseResponse
    transform: Transform
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Element) -> None: ...
    @overload
    def __init__(self, arg0: Transform, arg1: ElementGeometry, arg2: ImpulseResponse) -> None: ...
    def __eq__(self, arg0: Element) -> bool: ...
    def __ne__(self, arg0: Element) -> bool: ...

class UrxElementGeometry:
    perimeter: VecVector3D | list[Vector3D]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: ElementGeometry) -> None: ...
    @overload
    def __init__(self, arg0: VecVector3D | list[Vector3D]) -> None: ...
    def __eq__(self, arg0: ElementGeometry) -> bool: ...
    def __ne__(self, arg0: ElementGeometry) -> bool: ...

class UrxEvent:
    receive_setup: ReceiveSetup
    transmit_setup: TransmitSetup
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Event) -> None: ...
    @overload
    def __init__(self, arg0: TransmitSetup, arg1: ReceiveSetup) -> None: ...
    def __eq__(self, arg0: Event) -> bool: ...
    def __ne__(self, arg0: Event) -> bool: ...

class UrxExcitation:
    pulse_shape: str
    sampling_frequency: DoubleNan | float | int
    transmit_frequency: DoubleNan | float | int
    waveform: VecFloat64 | list[float] | npt.NDArray[numpy.float64]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Excitation) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: DoubleNan | float | int, arg2: DoubleNan | float | int, arg3: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> None: ...
    def __eq__(self, arg0: Excitation) -> bool: ...
    def __ne__(self, arg0: Excitation) -> bool: ...

class UrxGroup:
    data_type: DataType
    description: str
    sampling_type: SamplingType
    sequence: VecEvent | list[Event]
    sound_speed: DoubleNan | float | int
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Group) -> None: ...
    @overload
    def __init__(self, arg0: SamplingType, arg1: DataType, arg2: str, arg3: DoubleNan | float | int, arg4: VecEvent | list[Event]) -> None: ...
    def __eq__(self, arg0: Group) -> bool: ...
    def __ne__(self, arg0: Group) -> bool: ...

class UrxGroupData:
    event_timestamps: VecVecFloat64 | list[list[float]] | npt.NDArray[numpy.float64]
    group: Group
    group_timestamp: DoubleNan | float | int
    raw_data: numpy.ndarray
    sequence_timestamps: VecFloat64 | list[float] | npt.NDArray[numpy.float64]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: GroupData) -> None: ...
    @overload
    def __init__(self, arg0: Group, arg1: numpy.ndarray, arg2: DoubleNan | float | int, arg3: VecFloat64 | list[float] | npt.NDArray[numpy.float64], arg4: VecVecFloat64 | list[list[float]] | npt.NDArray[numpy.float64]) -> None: ...
    def __eq__(self, arg0: GroupData) -> bool: ...
    def __ne__(self, arg0: GroupData) -> bool: ...

class UrxGroupDataReader:
    def __init__(self, arg0: GroupData) -> None: ...
    def channelsCount(self, arg0: int) -> int: ...
    def eventsCount(self) -> int: ...
    def offset(self, arg0: int, arg1: int, arg2: int, arg3: int) -> int: ...
    def sampleByteSize(self) -> int: ...
    def samplesCount(self, arg0: int) -> int: ...
    def sequencesCount(self) -> int: ...

class UrxGroupDatastream:
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def append(self, arg0, arg1: float, arg2: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> None: ...
    @overload
    def append(self, arg0: numpy.ndarray, arg1: float, arg2: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> None: ...
    def getGroupData(self) -> GroupData: ...

class UrxImpulseResponse:
    data: VecFloat64 | list[float] | npt.NDArray[numpy.float64]
    sampling_frequency: DoubleNan | float | int
    time_offset: DoubleNan | float | int
    units: str
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: ImpulseResponse) -> None: ...
    @overload
    def __init__(self, arg0: DoubleNan | float | int, arg1: DoubleNan | float | int, arg2: str, arg3: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> None: ...
    def __eq__(self, arg0: ImpulseResponse) -> bool: ...
    def __ne__(self, arg0: ImpulseResponse) -> bool: ...

class UrxProbe:
    description: str
    element_geometries: VecElementGeometryPtr | list[ElementGeometry]
    elements: VecElement | list[Element]
    impulse_responses: VecImpulseResponsePtr | list[ImpulseResponse]
    transform: Transform
    type: ProbeType
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Probe) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: ProbeType, arg2: Transform, arg3: VecElementGeometryPtr | list[ElementGeometry], arg4: VecImpulseResponsePtr | list[ImpulseResponse], arg5: VecElement | list[Element]) -> None: ...
    def __eq__(self, arg0: Probe) -> bool: ...
    def __ne__(self, arg0: Probe) -> bool: ...

class UrxProbeType:
    __members__: ClassVar[dict] = ...  # read-only
    CURVILINEAR: ClassVar[ProbeType] = ...
    LINEAR: ClassVar[ProbeType] = ...
    MATRIX: ClassVar[ProbeType] = ...
    RCA: ClassVar[ProbeType] = ...
    SPARSE: ClassVar[ProbeType] = ...
    UNDEFINED: ClassVar[ProbeType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class UrxRawDataLoadPolicy:
    __members__: ClassVar[dict] = ...  # read-only
    FULL: ClassVar[RawDataLoadPolicy] = ...
    STREAM: ClassVar[RawDataLoadPolicy] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class UrxReaderOptions:
    raw_data_load_policy: RawDataLoadPolicy
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: RawDataLoadPolicy) -> None: ...

class UrxReceiveSetup:
    active_elements: VecVecUInt32 | list[list[int]] | npt.NDArray[numpy.uint32]
    modulation_frequency: DoubleNan | float | int
    number_samples: int
    probe: Probe
    probe_transform: Transform
    sampling_frequency: DoubleNan | float | int
    tgc_profile: VecFloat64 | list[float] | npt.NDArray[numpy.float64]
    tgc_sampling_frequency: DoubleNan | float | int
    time_offset: DoubleNan | float | int
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: ReceiveSetup) -> None: ...
    @overload
    def __init__(self, arg0: Probe, arg1: Transform, arg2: DoubleNan | float | int, arg3: int, arg4: VecVecUInt32 | list[list[int]] | npt.NDArray[numpy.uint32], arg5: VecFloat64 | list[float] | npt.NDArray[numpy.float64], arg6: DoubleNan | float | int, arg7: DoubleNan | float | int, arg8: DoubleNan | float | int) -> None: ...
    def __eq__(self, arg0: ReceiveSetup) -> bool: ...
    def __ne__(self, arg0: ReceiveSetup) -> bool: ...

class UrxSamplingType:
    __members__: ClassVar[dict] = ...  # read-only
    IQ: ClassVar[SamplingType] = ...
    RF: ClassVar[SamplingType] = ...
    UNDEFINED: ClassVar[SamplingType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class UrxStream:
    def __init__(self, arg0: str, arg1: Dataset) -> None: ...
    def createGroupData(self, arg0: Group, arg1: DoubleNan | float | int) -> GroupDatastream: ...
    def loadFromFile(self) -> None: ...
    @overload
    def readRawData(self, arg0: int, arg1, arg2: int, arg3: int, arg4: int) -> None: ...
    @overload
    def readRawData(self, arg0: int, arg1: numpy.ndarray, arg2: int, arg3: int, arg4: int) -> numpy.ndarray: ...
    def readerOptions(self) -> ReaderOptions: ...
    def saveToFile(self) -> None: ...
    def writerOptions(self) -> WriterOptions: ...
    @property
    def dataset(self) -> Dataset: ...

class UrxTransform:
    rotation: Vector3D
    translation: Vector3D
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Transform) -> None: ...
    @overload
    def __init__(self, arg0: Vector3D, arg1: Vector3D) -> None: ...
    def __eq__(self, arg0: Transform) -> bool: ...
    def __ne__(self, arg0: Transform) -> bool: ...

class UrxTransmitSetup:
    active_elements: VecVecUInt32 | list[list[int]] | npt.NDArray[numpy.uint32]
    delays: VecFloat64 | list[float] | npt.NDArray[numpy.float64]
    excitations: VecExcitationPtr | list[Excitation]
    probe: Probe
    probe_transform: Transform
    time_offset: DoubleNan | float | int
    wave: Wave
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: TransmitSetup) -> None: ...
    @overload
    def __init__(self, arg0: Probe, arg1: Wave, arg2: VecVecUInt32 | list[list[int]] | npt.NDArray[numpy.uint32], arg3: VecExcitationPtr | list[Excitation], arg4: VecFloat64 | list[float] | npt.NDArray[numpy.float64], arg5: Transform, arg6: DoubleNan | float | int) -> None: ...
    def __eq__(self, arg0: TransmitSetup) -> bool: ...
    def __ne__(self, arg0: TransmitSetup) -> bool: ...

class UrxVector2D:
    x: float
    y: float
    @overload
    def __init__(self, arg0: float, arg1: float) -> None: ...
    @overload
    def __init__(self, arg0: Vector2D) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: numpy.ndarray[numpy.float64]) -> None: ...
    @overload
    def __init__(self, arg0: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> None: ...
    def __array__(self) -> numpy.ndarray[numpy.float64]: ...
    def __eq__(self, arg0: Vector2D) -> bool: ...
    def __ne__(self, arg0: Vector2D) -> bool: ...

class UrxVector3D:
    x: float
    y: float
    z: float
    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float) -> None: ...
    @overload
    def __init__(self, arg0: Vector3D) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: numpy.ndarray[numpy.float64]) -> None: ...
    @overload
    def __init__(self, arg0: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> None: ...
    def __array__(self) -> numpy.ndarray[numpy.float64]: ...
    def __eq__(self, arg0: Vector3D) -> bool: ...
    def __ne__(self, arg0: Vector3D) -> bool: ...

class UrxVersion:
    major: int
    minor: int
    patch: int
    @overload
    def __init__(self, arg0: int, arg1: int, arg2: int) -> None: ...
    @overload
    def __init__(self, arg0: Version) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def __eq__(self, arg0: Version) -> bool: ...
    def __ne__(self, arg0: Version) -> bool: ...

class UrxWave:
    parameters: VecFloat64 | list[float] | npt.NDArray[numpy.float64]
    time_zero: DoubleNan | float | int
    time_zero_reference_point: Vector3D
    type: WaveType
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Wave) -> None: ...
    @overload
    def __init__(self, arg0: WaveType, arg1: DoubleNan | float | int, arg2: Vector3D, arg3: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> None: ...
    def __eq__(self, arg0: Wave) -> bool: ...
    def __ne__(self, arg0: Wave) -> bool: ...

class UrxWaveType:
    __members__: ClassVar[dict] = ...  # read-only
    CONVERGING_WAVE: ClassVar[WaveType] = ...
    CYLINDRICAL_WAVE: ClassVar[WaveType] = ...
    DIVERGING_WAVE: ClassVar[WaveType] = ...
    PLANE_WAVE: ClassVar[WaveType] = ...
    UNDEFINED: ClassVar[WaveType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class UrxWriterOptions:
    check_data: bool
    chunk_group_data: bool
    clean_unusable_data: bool
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: bool, arg1: bool, arg2: bool) -> None: ...

class VecElement:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecElement | list[Element]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: Element) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: Element) -> int: ...
    @overload
    def extend(self, L: VecElement | list[Element]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: Element) -> None: ...
    @overload
    def pop(self) -> Element: ...
    @overload
    def pop(self, i: int) -> Element: ...
    def remove(self, x: Element) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: Element) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecElement | list[Element]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecElement: ...
    @overload
    def __getitem__(self, arg0: int) -> Element: ...
    def __iter__(self) -> Iterator[Element]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecElement | list[Element]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: Element) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecElement | list[Element]) -> None: ...

class VecElementGeometryPtr:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecElementGeometryPtr | list[ElementGeometry]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: ElementGeometry) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: ElementGeometry) -> int: ...
    @overload
    def extend(self, L: VecElementGeometryPtr | list[ElementGeometry]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: ElementGeometry) -> None: ...
    @overload
    def pop(self) -> ElementGeometry: ...
    @overload
    def pop(self, i: int) -> ElementGeometry: ...
    def remove(self, x: ElementGeometry) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: ElementGeometry) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecElementGeometryPtr | list[ElementGeometry]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecElementGeometryPtr: ...
    @overload
    def __getitem__(self, arg0: int) -> ElementGeometry: ...
    def __iter__(self) -> Iterator[ElementGeometry]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecElementGeometryPtr | list[ElementGeometry]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: ElementGeometry) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecElementGeometryPtr | list[ElementGeometry]) -> None: ...

class VecEvent:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecEvent | list[Event]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: Event) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: Event) -> int: ...
    @overload
    def extend(self, L: VecEvent | list[Event]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: Event) -> None: ...
    @overload
    def pop(self) -> Event: ...
    @overload
    def pop(self, i: int) -> Event: ...
    def remove(self, x: Event) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: Event) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecEvent | list[Event]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecEvent: ...
    @overload
    def __getitem__(self, arg0: int) -> Event: ...
    def __iter__(self) -> Iterator[Event]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecEvent | list[Event]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: Event) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecEvent | list[Event]) -> None: ...

class VecExcitationPtr:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecExcitationPtr | list[Excitation]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: Excitation) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: Excitation) -> int: ...
    @overload
    def extend(self, L: VecExcitationPtr | list[Excitation]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: Excitation) -> None: ...
    @overload
    def pop(self) -> Excitation: ...
    @overload
    def pop(self, i: int) -> Excitation: ...
    def remove(self, x: Excitation) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: Excitation) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecExcitationPtr | list[Excitation]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecExcitationPtr: ...
    @overload
    def __getitem__(self, arg0: int) -> Excitation: ...
    def __iter__(self) -> Iterator[Excitation]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecExcitationPtr | list[Excitation]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: Excitation) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecExcitationPtr | list[Excitation]) -> None: ...

class VecFloat32:
    @overload
    def __init__(self, arg0: Buffer) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecFloat32 | list[float] | npt.NDArray[numpy.float32]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: float) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: float) -> int: ...
    @overload
    def extend(self, L: VecFloat32 | list[float] | npt.NDArray[numpy.float32]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: float) -> None: ...
    @overload
    def pop(self) -> float: ...
    @overload
    def pop(self, i: int) -> float: ...
    def remove(self, x: float) -> None: ...
    def __bool__(self) -> bool: ...
    def __buffer__(self, *args, **kwargs): ...
    def __contains__(self, x: float) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecFloat32 | list[float] | npt.NDArray[numpy.float32]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecFloat32: ...
    @overload
    def __getitem__(self, arg0: int) -> float: ...
    def __iter__(self) -> Iterator[float]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecFloat32 | list[float] | npt.NDArray[numpy.float32]) -> bool: ...
    def __release_buffer__(self, *args, **kwargs): ...
    @overload
    def __setitem__(self, arg0: int, arg1: float) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecFloat32 | list[float] | npt.NDArray[numpy.float32]) -> None: ...

class VecFloat64:
    @overload
    def __init__(self, arg0: Buffer) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: float) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: float) -> int: ...
    @overload
    def extend(self, L: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: float) -> None: ...
    @overload
    def pop(self) -> float: ...
    @overload
    def pop(self, i: int) -> float: ...
    def remove(self, x: float) -> None: ...
    def __bool__(self) -> bool: ...
    def __buffer__(self, *args, **kwargs): ...
    def __contains__(self, x: float) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecFloat64: ...
    @overload
    def __getitem__(self, arg0: int) -> float: ...
    def __iter__(self) -> Iterator[float]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> bool: ...
    def __release_buffer__(self, *args, **kwargs): ...
    @overload
    def __setitem__(self, arg0: int, arg1: float) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> None: ...

class VecGroupData:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecGroupData | list[GroupData]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: GroupData) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: GroupData) -> int: ...
    @overload
    def extend(self, L: VecGroupData | list[GroupData]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: GroupData) -> None: ...
    @overload
    def pop(self) -> GroupData: ...
    @overload
    def pop(self, i: int) -> GroupData: ...
    def remove(self, x: GroupData) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: GroupData) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecGroupData | list[GroupData]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecGroupData: ...
    @overload
    def __getitem__(self, arg0: int) -> GroupData: ...
    def __iter__(self) -> Iterator[GroupData]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecGroupData | list[GroupData]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: GroupData) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecGroupData | list[GroupData]) -> None: ...

class VecGroupPtr:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecGroupPtr | list[Group]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: Group) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: Group) -> int: ...
    @overload
    def extend(self, L: VecGroupPtr | list[Group]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: Group) -> None: ...
    @overload
    def pop(self) -> Group: ...
    @overload
    def pop(self, i: int) -> Group: ...
    def remove(self, x: Group) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: Group) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecGroupPtr | list[Group]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecGroupPtr: ...
    @overload
    def __getitem__(self, arg0: int) -> Group: ...
    def __iter__(self) -> Iterator[Group]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecGroupPtr | list[Group]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: Group) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecGroupPtr | list[Group]) -> None: ...

class VecImpulseResponsePtr:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecImpulseResponsePtr | list[ImpulseResponse]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: ImpulseResponse) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: ImpulseResponse) -> int: ...
    @overload
    def extend(self, L: VecImpulseResponsePtr | list[ImpulseResponse]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: ImpulseResponse) -> None: ...
    @overload
    def pop(self) -> ImpulseResponse: ...
    @overload
    def pop(self, i: int) -> ImpulseResponse: ...
    def remove(self, x: ImpulseResponse) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: ImpulseResponse) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecImpulseResponsePtr | list[ImpulseResponse]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecImpulseResponsePtr: ...
    @overload
    def __getitem__(self, arg0: int) -> ImpulseResponse: ...
    def __iter__(self) -> Iterator[ImpulseResponse]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecImpulseResponsePtr | list[ImpulseResponse]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: ImpulseResponse) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecImpulseResponsePtr | list[ImpulseResponse]) -> None: ...

class VecInt16:
    @overload
    def __init__(self, arg0: Buffer) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecInt16 | list[int] | npt.NDArray[numpy.int16]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: int) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: int) -> int: ...
    @overload
    def extend(self, L: VecInt16 | list[int] | npt.NDArray[numpy.int16]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: int) -> None: ...
    @overload
    def pop(self) -> int: ...
    @overload
    def pop(self, i: int) -> int: ...
    def remove(self, x: int) -> None: ...
    def __bool__(self) -> bool: ...
    def __buffer__(self, *args, **kwargs): ...
    def __contains__(self, x: int) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecInt16 | list[int] | npt.NDArray[numpy.int16]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecInt16: ...
    @overload
    def __getitem__(self, arg0: int) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecInt16 | list[int] | npt.NDArray[numpy.int16]) -> bool: ...
    def __release_buffer__(self, *args, **kwargs): ...
    @overload
    def __setitem__(self, arg0: int, arg1: int) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecInt16 | list[int] | npt.NDArray[numpy.int16]) -> None: ...

class VecInt32:
    @overload
    def __init__(self, arg0: Buffer) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecInt32 | list[int] | npt.NDArray[numpy.int32]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: int) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: int) -> int: ...
    @overload
    def extend(self, L: VecInt32 | list[int] | npt.NDArray[numpy.int32]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: int) -> None: ...
    @overload
    def pop(self) -> int: ...
    @overload
    def pop(self, i: int) -> int: ...
    def remove(self, x: int) -> None: ...
    def __bool__(self) -> bool: ...
    def __buffer__(self, *args, **kwargs): ...
    def __contains__(self, x: int) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecInt32 | list[int] | npt.NDArray[numpy.int32]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecInt32: ...
    @overload
    def __getitem__(self, arg0: int) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecInt32 | list[int] | npt.NDArray[numpy.int32]) -> bool: ...
    def __release_buffer__(self, *args, **kwargs): ...
    @overload
    def __setitem__(self, arg0: int, arg1: int) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecInt32 | list[int] | npt.NDArray[numpy.int32]) -> None: ...

class VecInt64:
    @overload
    def __init__(self, arg0: Buffer) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecInt64 | list[int] | npt.NDArray[numpy.int64]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: int) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: int) -> int: ...
    @overload
    def extend(self, L: VecInt64 | list[int] | npt.NDArray[numpy.int64]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: int) -> None: ...
    @overload
    def pop(self) -> int: ...
    @overload
    def pop(self, i: int) -> int: ...
    def remove(self, x: int) -> None: ...
    def __bool__(self) -> bool: ...
    def __buffer__(self, *args, **kwargs): ...
    def __contains__(self, x: int) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecInt64 | list[int] | npt.NDArray[numpy.int64]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecInt64: ...
    @overload
    def __getitem__(self, arg0: int) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecInt64 | list[int] | npt.NDArray[numpy.int64]) -> bool: ...
    def __release_buffer__(self, *args, **kwargs): ...
    @overload
    def __setitem__(self, arg0: int, arg1: int) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecInt64 | list[int] | npt.NDArray[numpy.int64]) -> None: ...

class VecInt8:
    @overload
    def __init__(self, arg0: Buffer) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecInt8 | list[int] | npt.NDArray[numpy.int8]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: int) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: int) -> int: ...
    @overload
    def extend(self, L: VecInt8 | list[int] | npt.NDArray[numpy.int8]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: int) -> None: ...
    @overload
    def pop(self) -> int: ...
    @overload
    def pop(self, i: int) -> int: ...
    def remove(self, x: int) -> None: ...
    def __bool__(self) -> bool: ...
    def __buffer__(self, *args, **kwargs): ...
    def __contains__(self, x: int) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecInt8 | list[int] | npt.NDArray[numpy.int8]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecInt8: ...
    @overload
    def __getitem__(self, arg0: int) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecInt8 | list[int] | npt.NDArray[numpy.int8]) -> bool: ...
    def __release_buffer__(self, *args, **kwargs): ...
    @overload
    def __setitem__(self, arg0: int, arg1: int) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecInt8 | list[int] | npt.NDArray[numpy.int8]) -> None: ...

class VecProbePtr:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecProbePtr | list[Probe]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: Probe) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: Probe) -> int: ...
    @overload
    def extend(self, L: VecProbePtr | list[Probe]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: Probe) -> None: ...
    @overload
    def pop(self) -> Probe: ...
    @overload
    def pop(self, i: int) -> Probe: ...
    def remove(self, x: Probe) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: Probe) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecProbePtr | list[Probe]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecProbePtr: ...
    @overload
    def __getitem__(self, arg0: int) -> Probe: ...
    def __iter__(self) -> Iterator[Probe]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecProbePtr | list[Probe]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: Probe) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecProbePtr | list[Probe]) -> None: ...

class VecString:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecString | list[str]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: str) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: str) -> int: ...
    @overload
    def extend(self, L: VecString | list[str]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: str) -> None: ...
    @overload
    def pop(self) -> str: ...
    @overload
    def pop(self, i: int) -> str: ...
    def remove(self, x: str) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: str) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecString | list[str]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecString: ...
    @overload
    def __getitem__(self, arg0: int) -> str: ...
    def __iter__(self) -> Iterator[str]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecString | list[str]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: str) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecString | list[str]) -> None: ...

class VecUInt16:
    @overload
    def __init__(self, arg0: Buffer) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecUInt16 | list[int] | npt.NDArray[numpy.uint16]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: int) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: int) -> int: ...
    @overload
    def extend(self, L: VecUInt16 | list[int] | npt.NDArray[numpy.uint16]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: int) -> None: ...
    @overload
    def pop(self) -> int: ...
    @overload
    def pop(self, i: int) -> int: ...
    def remove(self, x: int) -> None: ...
    def __bool__(self) -> bool: ...
    def __buffer__(self, *args, **kwargs): ...
    def __contains__(self, x: int) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecUInt16 | list[int] | npt.NDArray[numpy.uint16]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecUInt16: ...
    @overload
    def __getitem__(self, arg0: int) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecUInt16 | list[int] | npt.NDArray[numpy.uint16]) -> bool: ...
    def __release_buffer__(self, *args, **kwargs): ...
    @overload
    def __setitem__(self, arg0: int, arg1: int) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecUInt16 | list[int] | npt.NDArray[numpy.uint16]) -> None: ...

class VecUInt32:
    @overload
    def __init__(self, arg0: Buffer) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecUInt32 | list[int] | npt.NDArray[numpy.uint32]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: int) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: int) -> int: ...
    @overload
    def extend(self, L: VecUInt32 | list[int] | npt.NDArray[numpy.uint32]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: int) -> None: ...
    @overload
    def pop(self) -> int: ...
    @overload
    def pop(self, i: int) -> int: ...
    def remove(self, x: int) -> None: ...
    def __bool__(self) -> bool: ...
    def __buffer__(self, *args, **kwargs): ...
    def __contains__(self, x: int) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecUInt32 | list[int] | npt.NDArray[numpy.uint32]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecUInt32: ...
    @overload
    def __getitem__(self, arg0: int) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecUInt32 | list[int] | npt.NDArray[numpy.uint32]) -> bool: ...
    def __release_buffer__(self, *args, **kwargs): ...
    @overload
    def __setitem__(self, arg0: int, arg1: int) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecUInt32 | list[int] | npt.NDArray[numpy.uint32]) -> None: ...

class VecUInt64:
    @overload
    def __init__(self, arg0: Buffer) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecUInt64 | list[int] | npt.NDArray[numpy.uint64]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: int) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: int) -> int: ...
    @overload
    def extend(self, L: VecUInt64 | list[int] | npt.NDArray[numpy.uint64]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: int) -> None: ...
    @overload
    def pop(self) -> int: ...
    @overload
    def pop(self, i: int) -> int: ...
    def remove(self, x: int) -> None: ...
    def __bool__(self) -> bool: ...
    def __buffer__(self, *args, **kwargs): ...
    def __contains__(self, x: int) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecUInt64 | list[int] | npt.NDArray[numpy.uint64]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecUInt64: ...
    @overload
    def __getitem__(self, arg0: int) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecUInt64 | list[int] | npt.NDArray[numpy.uint64]) -> bool: ...
    def __release_buffer__(self, *args, **kwargs): ...
    @overload
    def __setitem__(self, arg0: int, arg1: int) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecUInt64 | list[int] | npt.NDArray[numpy.uint64]) -> None: ...

class VecUInt8:
    @overload
    def __init__(self, arg0: Buffer) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecUInt8 | list[int] | npt.NDArray[numpy.uint8]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: int) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: int) -> int: ...
    @overload
    def extend(self, L: VecUInt8 | list[int] | npt.NDArray[numpy.uint8]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: int) -> None: ...
    @overload
    def pop(self) -> int: ...
    @overload
    def pop(self, i: int) -> int: ...
    def remove(self, x: int) -> None: ...
    def __bool__(self) -> bool: ...
    def __buffer__(self, *args, **kwargs): ...
    def __contains__(self, x: int) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecUInt8 | list[int] | npt.NDArray[numpy.uint8]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecUInt8: ...
    @overload
    def __getitem__(self, arg0: int) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecUInt8 | list[int] | npt.NDArray[numpy.uint8]) -> bool: ...
    def __release_buffer__(self, *args, **kwargs): ...
    @overload
    def __setitem__(self, arg0: int, arg1: int) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecUInt8 | list[int] | npt.NDArray[numpy.uint8]) -> None: ...

class VecVecFloat32:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVecFloat32 | list[list[float]] | npt.NDArray[numpy.float32]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: VecFloat32 | list[float] | npt.NDArray[numpy.float32]) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: VecFloat32 | list[float] | npt.NDArray[numpy.float32]) -> int: ...
    @overload
    def extend(self, L: VecVecFloat32 | list[list[float]] | npt.NDArray[numpy.float32]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: VecFloat32 | list[float] | npt.NDArray[numpy.float32]) -> None: ...
    @overload
    def pop(self) -> VecFloat32: ...
    @overload
    def pop(self, i: int) -> VecFloat32: ...
    def remove(self, x: VecFloat32 | list[float] | npt.NDArray[numpy.float32]) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: VecFloat32 | list[float] | npt.NDArray[numpy.float32]) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVecFloat32 | list[list[float]] | npt.NDArray[numpy.float32]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVecFloat32: ...
    @overload
    def __getitem__(self, arg0: int) -> VecFloat32: ...
    def __iter__(self) -> Iterator[VecFloat32]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVecFloat32 | list[list[float]] | npt.NDArray[numpy.float32]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: VecFloat32 | list[float] | npt.NDArray[numpy.float32]) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVecFloat32 | list[list[float]] | npt.NDArray[numpy.float32]) -> None: ...

class VecVecFloat64:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVecFloat64 | list[list[float]] | npt.NDArray[numpy.float64]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> int: ...
    @overload
    def extend(self, L: VecVecFloat64 | list[list[float]] | npt.NDArray[numpy.float64]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> None: ...
    @overload
    def pop(self) -> VecFloat64: ...
    @overload
    def pop(self, i: int) -> VecFloat64: ...
    def remove(self, x: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVecFloat64 | list[list[float]] | npt.NDArray[numpy.float64]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVecFloat64: ...
    @overload
    def __getitem__(self, arg0: int) -> VecFloat64: ...
    def __iter__(self) -> Iterator[VecFloat64]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVecFloat64 | list[list[float]] | npt.NDArray[numpy.float64]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVecFloat64 | list[list[float]] | npt.NDArray[numpy.float64]) -> None: ...

class VecVecInt16:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVecInt16 | list[list[int]] | npt.NDArray[numpy.int16]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: VecInt16 | list[int] | npt.NDArray[numpy.int16]) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: VecInt16 | list[int] | npt.NDArray[numpy.int16]) -> int: ...
    @overload
    def extend(self, L: VecVecInt16 | list[list[int]] | npt.NDArray[numpy.int16]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: VecInt16 | list[int] | npt.NDArray[numpy.int16]) -> None: ...
    @overload
    def pop(self) -> VecInt16: ...
    @overload
    def pop(self, i: int) -> VecInt16: ...
    def remove(self, x: VecInt16 | list[int] | npt.NDArray[numpy.int16]) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: VecInt16 | list[int] | npt.NDArray[numpy.int16]) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVecInt16 | list[list[int]] | npt.NDArray[numpy.int16]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVecInt16: ...
    @overload
    def __getitem__(self, arg0: int) -> VecInt16: ...
    def __iter__(self) -> Iterator[VecInt16]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVecInt16 | list[list[int]] | npt.NDArray[numpy.int16]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: VecInt16 | list[int] | npt.NDArray[numpy.int16]) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVecInt16 | list[list[int]] | npt.NDArray[numpy.int16]) -> None: ...

class VecVecInt32:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVecInt32 | list[list[int]] | npt.NDArray[numpy.int32]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: VecInt32 | list[int] | npt.NDArray[numpy.int32]) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: VecInt32 | list[int] | npt.NDArray[numpy.int32]) -> int: ...
    @overload
    def extend(self, L: VecVecInt32 | list[list[int]] | npt.NDArray[numpy.int32]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: VecInt32 | list[int] | npt.NDArray[numpy.int32]) -> None: ...
    @overload
    def pop(self) -> VecInt32: ...
    @overload
    def pop(self, i: int) -> VecInt32: ...
    def remove(self, x: VecInt32 | list[int] | npt.NDArray[numpy.int32]) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: VecInt32 | list[int] | npt.NDArray[numpy.int32]) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVecInt32 | list[list[int]] | npt.NDArray[numpy.int32]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVecInt32: ...
    @overload
    def __getitem__(self, arg0: int) -> VecInt32: ...
    def __iter__(self) -> Iterator[VecInt32]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVecInt32 | list[list[int]] | npt.NDArray[numpy.int32]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: VecInt32 | list[int] | npt.NDArray[numpy.int32]) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVecInt32 | list[list[int]] | npt.NDArray[numpy.int32]) -> None: ...

class VecVecInt64:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVecInt64 | list[list[int]] | npt.NDArray[numpy.int64]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: VecInt64 | list[int] | npt.NDArray[numpy.int64]) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: VecInt64 | list[int] | npt.NDArray[numpy.int64]) -> int: ...
    @overload
    def extend(self, L: VecVecInt64 | list[list[int]] | npt.NDArray[numpy.int64]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: VecInt64 | list[int] | npt.NDArray[numpy.int64]) -> None: ...
    @overload
    def pop(self) -> VecInt64: ...
    @overload
    def pop(self, i: int) -> VecInt64: ...
    def remove(self, x: VecInt64 | list[int] | npt.NDArray[numpy.int64]) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: VecInt64 | list[int] | npt.NDArray[numpy.int64]) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVecInt64 | list[list[int]] | npt.NDArray[numpy.int64]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVecInt64: ...
    @overload
    def __getitem__(self, arg0: int) -> VecInt64: ...
    def __iter__(self) -> Iterator[VecInt64]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVecInt64 | list[list[int]] | npt.NDArray[numpy.int64]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: VecInt64 | list[int] | npt.NDArray[numpy.int64]) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVecInt64 | list[list[int]] | npt.NDArray[numpy.int64]) -> None: ...

class VecVecInt8:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVecInt8 | list[list[int]] | npt.NDArray[numpy.int8]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: VecInt8 | list[int] | npt.NDArray[numpy.int8]) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: VecInt8 | list[int] | npt.NDArray[numpy.int8]) -> int: ...
    @overload
    def extend(self, L: VecVecInt8 | list[list[int]] | npt.NDArray[numpy.int8]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: VecInt8 | list[int] | npt.NDArray[numpy.int8]) -> None: ...
    @overload
    def pop(self) -> VecInt8: ...
    @overload
    def pop(self, i: int) -> VecInt8: ...
    def remove(self, x: VecInt8 | list[int] | npt.NDArray[numpy.int8]) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: VecInt8 | list[int] | npt.NDArray[numpy.int8]) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVecInt8 | list[list[int]] | npt.NDArray[numpy.int8]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVecInt8: ...
    @overload
    def __getitem__(self, arg0: int) -> VecInt8: ...
    def __iter__(self) -> Iterator[VecInt8]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVecInt8 | list[list[int]] | npt.NDArray[numpy.int8]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: VecInt8 | list[int] | npt.NDArray[numpy.int8]) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVecInt8 | list[list[int]] | npt.NDArray[numpy.int8]) -> None: ...

class VecVecString:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVecString | list[list[str]]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: VecString | list[str]) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: VecString | list[str]) -> int: ...
    @overload
    def extend(self, L: VecVecString | list[list[str]]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: VecString | list[str]) -> None: ...
    @overload
    def pop(self) -> VecString: ...
    @overload
    def pop(self, i: int) -> VecString: ...
    def remove(self, x: VecString | list[str]) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: VecString | list[str]) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVecString | list[list[str]]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVecString: ...
    @overload
    def __getitem__(self, arg0: int) -> VecString: ...
    def __iter__(self) -> Iterator[VecString]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVecString | list[list[str]]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: VecString | list[str]) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVecString | list[list[str]]) -> None: ...

class VecVecUInt16:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVecUInt16 | list[list[int]] | npt.NDArray[numpy.uint16]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: VecUInt16 | list[int] | npt.NDArray[numpy.uint16]) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: VecUInt16 | list[int] | npt.NDArray[numpy.uint16]) -> int: ...
    @overload
    def extend(self, L: VecVecUInt16 | list[list[int]] | npt.NDArray[numpy.uint16]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: VecUInt16 | list[int] | npt.NDArray[numpy.uint16]) -> None: ...
    @overload
    def pop(self) -> VecUInt16: ...
    @overload
    def pop(self, i: int) -> VecUInt16: ...
    def remove(self, x: VecUInt16 | list[int] | npt.NDArray[numpy.uint16]) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: VecUInt16 | list[int] | npt.NDArray[numpy.uint16]) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVecUInt16 | list[list[int]] | npt.NDArray[numpy.uint16]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVecUInt16: ...
    @overload
    def __getitem__(self, arg0: int) -> VecUInt16: ...
    def __iter__(self) -> Iterator[VecUInt16]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVecUInt16 | list[list[int]] | npt.NDArray[numpy.uint16]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: VecUInt16 | list[int] | npt.NDArray[numpy.uint16]) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVecUInt16 | list[list[int]] | npt.NDArray[numpy.uint16]) -> None: ...

class VecVecUInt32:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVecUInt32 | list[list[int]] | npt.NDArray[numpy.uint32]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: VecUInt32 | list[int] | npt.NDArray[numpy.uint32]) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: VecUInt32 | list[int] | npt.NDArray[numpy.uint32]) -> int: ...
    @overload
    def extend(self, L: VecVecUInt32 | list[list[int]] | npt.NDArray[numpy.uint32]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: VecUInt32 | list[int] | npt.NDArray[numpy.uint32]) -> None: ...
    @overload
    def pop(self) -> VecUInt32: ...
    @overload
    def pop(self, i: int) -> VecUInt32: ...
    def remove(self, x: VecUInt32 | list[int] | npt.NDArray[numpy.uint32]) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: VecUInt32 | list[int] | npt.NDArray[numpy.uint32]) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVecUInt32 | list[list[int]] | npt.NDArray[numpy.uint32]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVecUInt32: ...
    @overload
    def __getitem__(self, arg0: int) -> VecUInt32: ...
    def __iter__(self) -> Iterator[VecUInt32]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVecUInt32 | list[list[int]] | npt.NDArray[numpy.uint32]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: VecUInt32 | list[int] | npt.NDArray[numpy.uint32]) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVecUInt32 | list[list[int]] | npt.NDArray[numpy.uint32]) -> None: ...

class VecVecUInt64:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVecUInt64 | list[list[int]] | npt.NDArray[numpy.uint64]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: VecUInt64 | list[int] | npt.NDArray[numpy.uint64]) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: VecUInt64 | list[int] | npt.NDArray[numpy.uint64]) -> int: ...
    @overload
    def extend(self, L: VecVecUInt64 | list[list[int]] | npt.NDArray[numpy.uint64]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: VecUInt64 | list[int] | npt.NDArray[numpy.uint64]) -> None: ...
    @overload
    def pop(self) -> VecUInt64: ...
    @overload
    def pop(self, i: int) -> VecUInt64: ...
    def remove(self, x: VecUInt64 | list[int] | npt.NDArray[numpy.uint64]) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: VecUInt64 | list[int] | npt.NDArray[numpy.uint64]) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVecUInt64 | list[list[int]] | npt.NDArray[numpy.uint64]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVecUInt64: ...
    @overload
    def __getitem__(self, arg0: int) -> VecUInt64: ...
    def __iter__(self) -> Iterator[VecUInt64]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVecUInt64 | list[list[int]] | npt.NDArray[numpy.uint64]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: VecUInt64 | list[int] | npt.NDArray[numpy.uint64]) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVecUInt64 | list[list[int]] | npt.NDArray[numpy.uint64]) -> None: ...

class VecVecUInt8:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVecUInt8 | list[list[int]] | npt.NDArray[numpy.uint8]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: VecUInt8 | list[int] | npt.NDArray[numpy.uint8]) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: VecUInt8 | list[int] | npt.NDArray[numpy.uint8]) -> int: ...
    @overload
    def extend(self, L: VecVecUInt8 | list[list[int]] | npt.NDArray[numpy.uint8]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: VecUInt8 | list[int] | npt.NDArray[numpy.uint8]) -> None: ...
    @overload
    def pop(self) -> VecUInt8: ...
    @overload
    def pop(self, i: int) -> VecUInt8: ...
    def remove(self, x: VecUInt8 | list[int] | npt.NDArray[numpy.uint8]) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: VecUInt8 | list[int] | npt.NDArray[numpy.uint8]) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVecUInt8 | list[list[int]] | npt.NDArray[numpy.uint8]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVecUInt8: ...
    @overload
    def __getitem__(self, arg0: int) -> VecUInt8: ...
    def __iter__(self) -> Iterator[VecUInt8]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVecUInt8 | list[list[int]] | npt.NDArray[numpy.uint8]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: VecUInt8 | list[int] | npt.NDArray[numpy.uint8]) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVecUInt8 | list[list[int]] | npt.NDArray[numpy.uint8]) -> None: ...

class VecVector2D:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVector2D | list[Vector2D]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: Vector2D) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: Vector2D) -> int: ...
    @overload
    def extend(self, L: VecVector2D | list[Vector2D]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: Vector2D) -> None: ...
    @overload
    def pop(self) -> Vector2D: ...
    @overload
    def pop(self, i: int) -> Vector2D: ...
    def remove(self, x: Vector2D) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: Vector2D) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVector2D | list[Vector2D]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVector2D: ...
    @overload
    def __getitem__(self, arg0: int) -> Vector2D: ...
    def __iter__(self) -> Iterator[Vector2D]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVector2D | list[Vector2D]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: Vector2D) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVector2D | list[Vector2D]) -> None: ...

class VecVector3D:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVector3D | list[Vector3D]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: Vector3D) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: Vector3D) -> int: ...
    @overload
    def extend(self, L: VecVector3D | list[Vector3D]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: Vector3D) -> None: ...
    @overload
    def pop(self) -> Vector3D: ...
    @overload
    def pop(self, i: int) -> Vector3D: ...
    def remove(self, x: Vector3D) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: Vector3D) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVector3D | list[Vector3D]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVector3D: ...
    @overload
    def __getitem__(self, arg0: int) -> Vector3D: ...
    def __iter__(self) -> Iterator[Vector3D]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVector3D | list[Vector3D]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: Vector3D) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVector3D | list[Vector3D]) -> None: ...

class Vector2D:
    x: float
    y: float
    @overload
    def __init__(self, arg0: float, arg1: float) -> None: ...
    @overload
    def __init__(self, arg0: Vector2D) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: numpy.ndarray[numpy.float64]) -> None: ...
    @overload
    def __init__(self, arg0: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> None: ...
    def __array__(self) -> numpy.ndarray[numpy.float64]: ...
    def __eq__(self, arg0: Vector2D) -> bool: ...
    def __ne__(self, arg0: Vector2D) -> bool: ...

class Vector3D:
    x: float
    y: float
    z: float
    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float) -> None: ...
    @overload
    def __init__(self, arg0: Vector3D) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: numpy.ndarray[numpy.float64]) -> None: ...
    @overload
    def __init__(self, arg0: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> None: ...
    def __array__(self) -> numpy.ndarray[numpy.float64]: ...
    def __eq__(self, arg0: Vector3D) -> bool: ...
    def __ne__(self, arg0: Vector3D) -> bool: ...

class Version:
    major: int
    minor: int
    patch: int
    @overload
    def __init__(self, arg0: int, arg1: int, arg2: int) -> None: ...
    @overload
    def __init__(self, arg0: Version) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def __eq__(self, arg0: Version) -> bool: ...
    def __ne__(self, arg0: Version) -> bool: ...

class Wave:
    parameters: VecFloat64 | list[float] | npt.NDArray[numpy.float64]
    time_zero: DoubleNan | float | int
    time_zero_reference_point: Vector3D
    type: WaveType
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Wave) -> None: ...
    @overload
    def __init__(self, arg0: WaveType, arg1: DoubleNan | float | int, arg2: Vector3D, arg3: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> None: ...
    def __eq__(self, arg0: Wave) -> bool: ...
    def __ne__(self, arg0: Wave) -> bool: ...

class WaveType:
    __members__: ClassVar[dict] = ...  # read-only
    CONVERGING_WAVE: ClassVar[WaveType] = ...
    CYLINDRICAL_WAVE: ClassVar[WaveType] = ...
    DIVERGING_WAVE: ClassVar[WaveType] = ...
    PLANE_WAVE: ClassVar[WaveType] = ...
    UNDEFINED: ClassVar[WaveType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class WriteFileException(RuntimeError): ...

class WriterOptions:
    check_data: bool
    chunk_group_data: bool
    clean_unusable_data: bool
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: bool, arg1: bool, arg2: bool) -> None: ...

def clone(arg0: Dataset) -> Dataset: ...
def isIso3166(arg0: str) -> bool: ...
def isIso8601(arg0: str) -> bool: ...
def loadFromFile(filename: str, options: ReaderOptions = ...) -> Dataset: ...
def pyGetFormat(arg0: DataType) -> str: ...
def saveToFile(filename: str, dataset: Dataset, options: WriterOptions = ...) -> None: ...
def sizeofDataType(arg0: DataType) -> int: ...
def sizeofSample(arg0: SamplingType, arg1: DataType) -> int: ...
def validate(arg0: Dataset) -> None: ...
