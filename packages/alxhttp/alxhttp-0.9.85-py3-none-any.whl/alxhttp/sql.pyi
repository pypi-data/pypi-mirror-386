"""
This type stub file was generated by pyright.
"""

import asyncpg
from pathlib import Path
from typing import Any, Callable, override
from typing_extensions import TypeVar
from alxhttp.pydantic.basemodel import BaseModel

def get_caller_dir(idx: int = ...) -> Path:
  ...

ListType = TypeVar('ListType')
class SQLValidator[T: BaseModel]:
  def __init__(self, file: str | Path, cls: type[T], stack_offset: int = ...) -> None:
    ...
  
  @override
  def __str__(self) -> str:
    ...
  
  @property
  def query(self) -> str:
    ...
  
  def validate(self) -> None:
    ...
  
  async def fetchrow(self, conn: asyncpg.pool.PoolConnectionProxy, *args: Any) -> T:
    ...
  
  async def fetch(self, conn: asyncpg.pool.PoolConnectionProxy, *args: Any) -> list[T]:
    ...
  
  async def fetchlist[TT](self, list_type: type[TT], conn: asyncpg.pool.PoolConnectionProxy, *args: Any) -> list[TT]:
    ...
  
  async def execute(self, conn: asyncpg.pool.PoolConnectionProxy, *args: Any) -> str:
    ...
  


class SQLArgValidator[T: BaseModel,**P,PT](SQLValidator[T]):
  def __init__(self, file: str | Path, cls: type[T], argorder: Callable[P, PT], stack_offset: int = ...) -> None:
    ...
  
  @override
  async def fetchrow(self, conn: asyncpg.pool.PoolConnectionProxy, *args: P.args, **kwargs: P.kwargs) -> T:
    ...
  
  @override
  async def fetch(self, conn: asyncpg.pool.PoolConnectionProxy, *args: P.args, **kwargs: P.kwargs) -> list[T]:
    ...
  
  @override
  async def fetchlist[TT](self, list_type: type[TT], conn: asyncpg.pool.PoolConnectionProxy, *args: P.args, **kwargs: P.kwargs) -> list[TT]:
    ...
  
  @override
  async def execute(self, conn: asyncpg.pool.PoolConnectionProxy, *args: P.args, **kwargs: P.kwargs) -> str:
    ...
  


def modified_recently(path: Path) -> bool:
  ...

def validate_sql(sql_file: Path) -> str:
  ...

