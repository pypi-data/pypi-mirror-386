"""
This type stub file was generated by pyright.
"""

import asyncio
import logging
from collections.abc import AsyncGenerator, Awaitable, Iterable
from typing import Callable, TypeVar
from aiohttp import web
from aiohttp.typedefs import Middleware
from aiohttp.web_request import Request
from aiohttp.web_response import StreamResponse

class Server:
  app: web.Application
  host: str
  port: int
  shutdown_event: asyncio.Event
  def __init__(self, middlewares: Iterable[Middleware] | None = ..., logger: logging.Logger | None = ...) -> None:
    ...
  
  async def setup_ctx(self, app: web.Application) -> AsyncGenerator[None, None]:
    """
    Base classes should async-with all their stateful things and yield once.
    When the app shuts down it will return to this generator so they can unwind.
    """
    ...
  
  async def run_app(self, log: logging.Logger, host: str = ..., port: int = ...) -> None:
    ...
  


ServerType = TypeVar('ServerType', bound=Server)
ServerHandler = Callable[[ServerType, Request], Awaitable[StreamResponse]]
