"""
This type stub file was generated by pyright.
"""

import types
import typing

TypeType = type | types.UnionType | typing.Annotated[typing.Any, typing.Any]
def extract_type_param(t: TypeType) -> type:
  ...

def extract_class(t: TypeType) -> str:
  ...

def is_generic_type(t: TypeType) -> bool:
  ...

def is_model_type(t: TypeType) -> bool:
  ...

def is_union(t: TypeType) -> bool:
  ...

def is_alias(t: TypeType) -> typing.TypeGuard[typing.TypeAliasType]:
  ...

def is_class_var(t: TypeType) -> bool:
  ...

def is_class_var_or_annotated_class_var(t: TypeType) -> bool:
  ...

def is_optional(t: TypeType) -> bool:
  ...

def is_annotated(t: TypeType) -> bool:
  ...

def is_type_or_alias(t: TypeType, ta: TypeType): # -> TypeGuard[TypeAliasType] | Any | Literal[True]:
  ...

def is_type_or_annotated_type(t: TypeType, ta: TypeType): # -> Any | TypeGuard[TypeAliasType] | Literal[True]:
  ...

def is_literal(t: TypeType) -> bool:
  ...

def get_literal(t: TypeType) -> str | int:
  ...

def get_literals(t: TypeType) -> list[str | int]:
  ...

def is_list(t: TypeType) -> typing.TypeGuard[list[typing.Any]]:
  ...

def is_tuple(t: TypeType) -> typing.TypeGuard[tuple[typing.Any, ...]]:
  ...

def is_dict(t: TypeType) -> typing.TypeGuard[dict[typing.Any, typing.Any]]:
  ...

def is_union_with_none(t: TypeType) -> bool:
  ...

def is_union_of_models(t: TypeType) -> bool:
  ...

def is_safe_primitive_type_or_union(t: TypeType) -> bool:
  ...

def is_union_of_safe_primitive_types(t: TypeType) -> bool:
  ...

def is_union_of_safe_primitive_types_or_none(t: TypeType) -> bool:
  ...

