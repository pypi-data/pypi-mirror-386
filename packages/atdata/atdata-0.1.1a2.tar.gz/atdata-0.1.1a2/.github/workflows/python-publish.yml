# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Build and upload package to PyPI

on:
  release:
    types: [published]

permissions:
  contents: read


jobs:

  # uv-release-build-publish:
  #   # name: python
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v5

  #     - name: "Set up Python"
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version-file: "pyproject.toml"

  #     - name: Install uv
  #       uses: astral-sh/setup-uv@v6

  #     - name: Install the project
  #       run: uv sync --all-extras --dev
  #       # TODO Better to use --locked for author control over versions?
  #       # run: uv sync --locked --all-extras --dev

  #     - name: Build release distributions
  #       run: uv build

  uv-build-release-pypi-publish:
    name: "Build release distribution and publish to PyPI"
    runs-on: ubuntu-latest
    # needs:
    #   - uv-release-build
    environment:
      name: pypi
    
    steps:
      - uses: actions/checkout@v5
      
      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Install uv
        uses: astral-sh/setup-uv@v6
      
      - name: Install the project
        run: uv sync --all-extras --dev
        # TODO Better to use --locked for author control over versions?
        # run: uv sync --locked --all-extras --dev
        
      - name: Build release distributions
        run: uv build
        
      - name: Publish to PyPI
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.UV_PUBLISH_TOKEN }}
        run: uv publish

# TODO Original variant kept for reference
# jobs:
#   release-build:
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v4

#       - uses: actions/setup-python@v5
#         with:
#           python-version: "3.x"

#       - name: Build release distributions
#         run: |
#           # NOTE: put your own distribution build steps here.
#           python -m pip install build
#           python -m build

#       - name: Upload distributions
#         uses: actions/upload-artifact@v4
#         with:
#           name: release-dists
#           path: dist/

#   pypi-publish:
#     runs-on: ubuntu-latest
#     needs:
#       - release-build
#     permissions:
#       # IMPORTANT: this permission is mandatory for trusted publishing
#       id-token: write

#     # Dedicated environments with protections for publishing are strongly recommended.
#     # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
#     environment:
#       name: pypi
#       # OPTIONAL: uncomment and update to include your PyPI project URL in the deployment status:
#       # url: https://pypi.org/p/YOURPROJECT
#       #
#       # ALTERNATIVE: if your GitHub Release name is the PyPI project version string
#       # ALTERNATIVE: exactly, uncomment the following line instead:
#       # url: https://pypi.org/project/YOURPROJECT/${{ github.event.release.name }}

#     steps:
#       - name: Retrieve release distributions
#         uses: actions/download-artifact@v4
#         with:
#           name: release-dists
#           path: dist/

#       - name: Publish release distributions to PyPI
#         uses: pypa/gh-action-pypi-publish@release/v1
#         with:
#           packages-dir: dist/
