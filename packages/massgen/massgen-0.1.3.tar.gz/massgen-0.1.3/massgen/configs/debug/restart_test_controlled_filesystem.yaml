# Two Agent Orchestration Restart Test Configuration with Filesystem
# This configuration demonstrates the orchestration restart feature with MCP filesystem tools
# Uses debug_final_answer to force restart on first attempt for testing file creation tasks
#
# Setup Requirements:
# 1. Set environment variable in .env file:
#    OPENAI_API_KEY="your_openai_key"
# 2. Filesystem MCP servers will be automatically available via npx
#
# Example usage:
# massgen --config @examples/configs/debug/restart_test_controlled_filesystem.yaml "Create three Python files: main.py with a hello() function, utils.py with a helper() function, and tests.py with a test_hello() function."
#
# Expected behavior:
# - Attempt 1: Agents coordinate with planning mode (no file execution during coordination)
# - Final presentation shows debug override claiming only main.py was created
# - Post-evaluation uses MCP tools to verify files and detects missing files
# - Calls restart_orchestration() with specific instructions
# - Restart banner displays
# - Attempt 2: Agents coordinate with restart instructions to create ALL files
# - Post-evaluation verifies all files exist using MCP tools
# - Calls submit() - Inspection menu appears

agents:
  - id: "agent_a"
    backend:
      type: "openai"
      model: "gpt-5-nano"
      # type: "gemini"
      # model: "gemini-2.5-flash"
      # type: "grok"
      # model: "grok-4-fast"
      # type: "claude"
      # model: "claude-sonnet-4-5-20250929"
      # type: "claude_code"
      # model: "claude-sonnet-4-5-20250929"
      cwd: "workspace1"

  # - id: "agent_b"
  #   backend:
  #     type: "openai"
  #     model: "gpt-5-nano"
  #     cwd: "workspace2"

orchestrator:
  snapshot_storage: "snapshots"
  agent_temporary_workspace: "temp_workspaces"

  # Restart configuration
  coordination:
    max_orchestration_restarts: 2  # Allow up to 2 restarts (3 total attempts)

  # DEBUG MODE: Override final answer on attempt 1 to simulate incomplete file creation
  debug_final_answer: |
    I created a hello.txt file.

   #  file with the following content:

   # ```python
   # def hello():
   #     print("Hello, World!")

   # if __name__ == "__main__":
   #     hello()
   # ```

  # The file has been created successfully.

  # Use lenient voting for faster coordination in debug mode
  voting_sensitivity: "lenient"

ui:
  display_type: "rich_terminal"
  logging_enabled: true
