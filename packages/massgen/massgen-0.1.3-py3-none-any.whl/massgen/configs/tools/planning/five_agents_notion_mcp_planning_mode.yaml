# Five Agent Notion MCP Test Configuration with Planning Mode
# This configuration demonstrates planning vs execution mode to prevent duplicate tool calls
# during coordination while allowing full tool execution during final presentation
#
# Setup Requirements:
# 1. Install Notion MCP server: npm install -g @notionhq/notion-mcp-server
# 2. Create Notion integrations and get tokens (see detailed setup in original config)
# 3. Set environment variables in .env file:
#    NOTION_TOKEN_ONE="your_first_notion_integration_token"
#    NOTION_TOKEN_TWO="your_second_notion_integration_token"
#    NOTION_TOKEN_THREE="your_third_notion_integration_token"
#    NOTION_TOKEN_FOUR="your_fourth_notion_integration_token"
#    NOTION_TOKEN_FIVE="your_fifth_notion_integration_token"
#    OPENAI_API_KEY="your_openai_key"
#    GOOGLE_API_KEY="your_gemini_key"
#    ANTHROPIC_API_KEY="your_claude_key"
#    XAI_API_KEY="your_grok_key"
#
# Example usage:
# massgen --config @examples/tools/planning/five_agents_notion_mcp_planning_mode "Create a comprehensive project management system in Notion with tasks, timelines, and progress tracking. Design the database structure, create initial pages, and set up automation workflows."

agents:
  - id: "gemini_notion_agent"
    backend:
      type: "gemini"
      model: "gemini-2.5-flash"
      mcp_servers:
        - name: "notionApi"
          type: "stdio"
          command: "npx"
          args: ["-y", "@notionhq/notion-mcp-server"]
          env:
            NOTION_TOKEN: "${NOTION_TOKEN_ONE}"
          security:
            level: "moderate"
      exclude_tools:
        - post_search  # Exclude problematic tools as noted in original config
    system_message: |
      Available Notion Tools:
      - Notion workspace management via MCP integration
      - Page creation, reading, and updating capabilities
      - Database design and content management
      - Property configuration and relationship setup

  - id: "openai_notion_agent"
    backend:
      type: "openai"
      model: "gpt-4o-mini"
      mcp_servers:
        - name: "notionApi"
          type: "stdio"
          command: "npx"
          args: ["-y", "@notionhq/notion-mcp-server"]
          env:
            NOTION_TOKEN: "${NOTION_TOKEN_TWO}"
          security:
            level: "moderate"
      exclude_tools:
        - post_search
    system_message: |
      Available Notion Tools:
      - Notion workspace management via MCP integration
      - Page creation, reading, and updating capabilities
      - Database design and content management
      - Property configuration and relationship setup

  - id: "claude_code_notion_agent"
    backend:
      type: "claude_code"
      cwd: "claude_code_workspace_notion_mcp"
      permission_mode: "bypassPermissions"
      mcp_servers:
        notionApi:
          type: "stdio"
          command: "npx"
          args: ["-y", "@notionhq/notion-mcp-server"]
          env:
            NOTION_TOKEN: "${NOTION_TOKEN_THREE}"
      exclude_tools:
        - post_search
    system_message: |
      Available Notion Tools:
      - Notion workspace management via MCP integration
      - Page creation, reading, and updating capabilities
      - Database design and content management
      - Property configuration and relationship setup

  - id: "claude_notion_agent"
    backend:
      type: "claude"
      model: "claude-sonnet-4-20250514"
      mcp_servers:
        - name: "notionApi"
          type: "stdio"
          command: "npx"
          args: ["-y", "@notionhq/notion-mcp-server"]
          env:
            NOTION_TOKEN: "${NOTION_TOKEN_FOUR}"
          security:
            level: "moderate"
      exclude_tools:
        - post_search
    system_message: |
      Available Notion Tools:
      - Notion workspace management via MCP integration
      - Page creation, reading, and updating capabilities
      - Database design and content management
      - Property configuration and relationship setup

  - id: "grok_notion_agent"
    backend:
      type: "grok"
      model: "grok-3-mini"
      mcp_servers:
        - name: "notionApi"
          type: "stdio"
          command: "npx"
          args: ["-y", "@notionhq/notion-mcp-server"]
          env:
            NOTION_TOKEN: "${NOTION_TOKEN_FIVE}"
          security:
            level: "moderate"
      exclude_tools:
        - post_search
    system_message: |
      Available Notion Tools:
      - Notion workspace management via MCP integration
      - Page creation, reading, and updating capabilities
      - Database design and content management
      - Property configuration and relationship setup

ui:
  display_type: "rich_terminal"
  logging_enabled: true

# Orchestrator Settings with Coordination Configuration
orchestrator:
  snapshot_storage: "snapshots"  # Directory for workspace snapshots
  agent_temporary_workspace: "temp_workspaces"  # Directory for temporary agent workspaces
  coordination:
    enable_planning_mode: true
    planning_mode_instruction: |
      PLANNING MODE ACTIVE: You are currently in the coordination phase where agents discuss and plan their approach.
      During this phase, you should:
      1. Describe your intended actions and reasoning
      2. Analyze other agents' proposals
      3. Use only the 'vote' or 'new_answer' tools for coordination
      4. Execute read-only actions - DO NOT execute any actions that have side effects (e.g., sending messages, modifying data)
      5. Save actions that have side effects for the final presentation phase when the winning agent will implement the plan

      Focus on planning, analysis, and coordination rather than execution.