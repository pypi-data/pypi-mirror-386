{
  "name": "TrelloSearch",
  "fully_qualified_name": "TrelloApi.TrelloSearch@2.0.0",
  "description": "Search for information within Trello.\n\nUse this tool to find cards, boards, members, and other elements in Trello by searching with specific keywords.",
  "toolkit": {
    "name": "ArcadeTrelloApi",
    "description": null,
    "version": "2.0.0"
  },
  "input": {
    "parameters": [
      {
        "name": "search_query",
        "required": true,
        "description": "The search query string, with a length between 1 and 16384 characters.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "The search query with a length of 1 to 16384 characters"
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "query"
      },
      {
        "name": "board_identifiers",
        "required": false,
        "description": "Specify 'mine' to search all your boards or provide a comma-separated list of Board IDs.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "`mine` or a comma-separated list of Board IDs"
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "idBoards"
      },
      {
        "name": "organization_ids",
        "required": false,
        "description": "A comma-separated list of Trello Organization IDs to filter the search results.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "A comma-separated list of Organization IDs"
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "idOrganizations"
      },
      {
        "name": "card_ids",
        "required": false,
        "description": "Comma-separated list of Trello Card IDs to search within.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "A comma-separated list of Card IDs"
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "idCards"
      },
      {
        "name": "trello_object_types",
        "required": false,
        "description": "Specify types of Trello objects to search, such as 'all', 'actions', 'boards', 'cards', 'members', or 'organizations'. Use a comma-separated list.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "What type or types of Trello objects you want to search. all or a comma-separated list of: `actions`, `boards`, `cards`, `members`, `organizations`"
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "modelTypes"
      },
      {
        "name": "board_fields_selection",
        "required": false,
        "description": "Comma-separated list of board fields to return or 'all' for every field. Options include: closed, dateLastActivity, etc.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "all or a comma-separated list of: `closed`, `dateLastActivity`, `dateLastView`, `desc`, `descData`, `idOrganization`, `invitations`, `invited`, `labelNames`, `memberships`, `name`, `pinned`, `powerUps`, `prefs`, `shortLink`, `shortUrl`, `starred`, `subscribed`, `url`"
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "board_fields"
      },
      {
        "name": "maximum_boards_returned",
        "required": false,
        "description": "The maximum number of boards to return. Must be an integer up to 1000.",
        "value_schema": {
          "val_type": "integer",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "The maximum number of boards returned. Maximum: 1000"
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "boards_limit"
      },
      {
        "name": "card_fields",
        "required": false,
        "description": "Specify 'all' or a comma-separated list of card fields like 'badges', 'desc', 'labels'. Defaults to 'all' if omitted.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "all or a comma-separated list of: `badges`, `checkItemStates`, `closed`, `dateLastActivity`, `desc`, `descData`, `due`, `idAttachmentCover`, `idBoard`, `idChecklists`, `idLabels`, `idList`, `idMembers`, `idMembersVoted`, `idShort`, `labels`, `manualCoverAttachment`, `name`, `pos`, `shortLink`, `shortUrl`, `subscribed`, `url`"
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "card_fields"
      },
      {
        "name": "maximum_cards_to_return",
        "required": false,
        "description": "The maximum number of cards to return. Maximum value is 1000.",
        "value_schema": {
          "val_type": "integer",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "The maximum number of cards to return. Maximum: 1000"
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "cards_limit"
      },
      {
        "name": "cards_page_number",
        "required": false,
        "description": "Specify the page number for card search results. Maximum value is 100.",
        "value_schema": {
          "val_type": "number",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "The page of results for cards. Maximum: 100"
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "cards_page"
      },
      {
        "name": "include_card_attachments",
        "required": false,
        "description": "Specify 'true' to include all attachment objects, 'cover' for only card cover attachments, or 'false' for no attachments.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "Whether to include attachment objects with card results. A boolean value (true or false) or cover for only card cover attachments."
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "card_attachments"
      },
      {
        "name": "organization_fields_to_return",
        "required": false,
        "description": "Specify 'all' or a comma-separated list of organization attributes like 'billableMemberCount', 'desc', 'displayName', etc., to include in the results.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "all or a comma-separated list of billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url, website"
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "organization_fields"
      },
      {
        "name": "max_workspaces_to_return",
        "required": false,
        "description": "The maximum number of Workspaces to return. Accepts an integer up to 1000.",
        "value_schema": {
          "val_type": "integer",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "The maximum number of Workspaces to return. Maximum 1000"
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "organizations_limit"
      },
      {
        "name": "member_fields_selection",
        "required": false,
        "description": "Specify which member fields to return. Options: `all` or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username"
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "member_fields"
      },
      {
        "name": "max_members_returned",
        "required": false,
        "description": "The maximum number of members to return in the search results. Maximum value is 1000.",
        "value_schema": {
          "val_type": "integer",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "The maximum number of members to return. Maximum 1000"
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "members_limit"
      },
      {
        "name": "include_parent_organization_with_board_results",
        "required": false,
        "description": "Include the parent organization in the board results. Set to true to include, false to exclude.",
        "value_schema": {
          "val_type": "boolean",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "Whether to include the parent organization with board results"
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "board_organization"
      },
      {
        "name": "include_parent_board_with_card_results",
        "required": false,
        "description": "Set to true to include parent board details in card results.",
        "value_schema": {
          "val_type": "boolean",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "Whether to include the parent board with card results"
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "card_board"
      },
      {
        "name": "include_card_list",
        "required": false,
        "description": "Include the parent list with card results. A boolean value (true or false).",
        "value_schema": {
          "val_type": "boolean",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "Whether to include the parent list with card results"
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "card_list"
      },
      {
        "name": "include_card_members",
        "required": false,
        "description": "Include member objects with card results if set to true; exclude them if false.",
        "value_schema": {
          "val_type": "boolean",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "Whether to include member objects with card results"
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "card_members"
      },
      {
        "name": "include_card_stickers",
        "required": false,
        "description": "Set to true to include sticker objects with card results. Set to false to exclude them.",
        "value_schema": {
          "val_type": "boolean",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "Whether to include sticker objects with card results"
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "card_stickers"
      },
      {
        "name": "enable_partial_search",
        "required": false,
        "description": "Enable partial search to match content starting with words in your query, allowing for more flexible search results.",
        "value_schema": {
          "val_type": "boolean",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "By default, Trello searches for each word in your query against exactly matching words within Member content. Specifying partial to be true means that we will look for content that starts with any of the words in your query.  If you are looking for a Card titled \"My Development Status Report\", by default you would need to search for \"Development\". If you have partial enabled, you will be able to search for \"dev\" but not \"velopment\"."
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "partial"
      }
    ]
  },
  "output": {
    "description": "Response from the API endpoint 'get-search'.",
    "available_modes": [
      "value",
      "error",
      "null"
    ],
    "value_schema": {
      "val_type": "json",
      "inner_val_type": null,
      "enum": null,
      "properties": null,
      "inner_properties": null,
      "description": null
    }
  },
  "requirements": {
    "authorization": null,
    "secrets": [
      {
        "key": "TRELLO_API_KEY"
      },
      {
        "key": "TRELLO_TOKEN"
      }
    ],
    "metadata": null
  },
  "deprecation_message": null,
  "metadata": {
    "object_type": "api_wrapper_tool",
    "version": "1.1.0",
    "description": "Tools that enable LLMs to interact directly with the trello API."
  },
  "http_endpoint": {
    "metadata": {
      "object_type": "http_endpoint",
      "version": "1.2.0",
      "description": ""
    },
    "url": "https://api.trello.com/1/search",
    "http_method": "GET",
    "headers": {},
    "parameters": [
      {
        "name": "query",
        "tool_parameter_name": "search_query",
        "description": "The search query with a length of 1 to 16384 characters",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "The search query with a length of 1 to 16384 characters"
        },
        "accepted_as": "query",
        "required": true,
        "deprecated": false,
        "default": null,
        "documentation_urls": []
      },
      {
        "name": "idBoards",
        "tool_parameter_name": "board_identifiers",
        "description": "`mine` or a comma-separated list of Board IDs",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "`mine` or a comma-separated list of Board IDs"
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": null,
        "documentation_urls": []
      },
      {
        "name": "idOrganizations",
        "tool_parameter_name": "organization_ids",
        "description": "A comma-separated list of Organization IDs",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "A comma-separated list of Organization IDs"
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": null,
        "documentation_urls": []
      },
      {
        "name": "idCards",
        "tool_parameter_name": "card_ids",
        "description": "A comma-separated list of Card IDs",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "A comma-separated list of Card IDs"
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": null,
        "documentation_urls": []
      },
      {
        "name": "modelTypes",
        "tool_parameter_name": "trello_object_types",
        "description": "What type or types of Trello objects you want to search. all or a comma-separated list of: `actions`, `boards`, `cards`, `members`, `organizations`",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "What type or types of Trello objects you want to search. all or a comma-separated list of: `actions`, `boards`, `cards`, `members`, `organizations`"
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": "all",
        "documentation_urls": []
      },
      {
        "name": "board_fields",
        "tool_parameter_name": "board_fields_selection",
        "description": "all or a comma-separated list of: `closed`, `dateLastActivity`, `dateLastView`, `desc`, `descData`, `idOrganization`, `invitations`, `invited`, `labelNames`, `memberships`, `name`, `pinned`, `powerUps`, `prefs`, `shortLink`, `shortUrl`, `starred`, `subscribed`, `url`",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "all or a comma-separated list of: `closed`, `dateLastActivity`, `dateLastView`, `desc`, `descData`, `idOrganization`, `invitations`, `invited`, `labelNames`, `memberships`, `name`, `pinned`, `powerUps`, `prefs`, `shortLink`, `shortUrl`, `starred`, `subscribed`, `url`"
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": "name,idOrganization",
        "documentation_urls": []
      },
      {
        "name": "boards_limit",
        "tool_parameter_name": "maximum_boards_returned",
        "description": "The maximum number of boards returned. Maximum: 1000",
        "value_schema": {
          "val_type": "integer",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "The maximum number of boards returned. Maximum: 1000"
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": 10,
        "documentation_urls": []
      },
      {
        "name": "board_organization",
        "tool_parameter_name": "include_parent_organization_with_board_results",
        "description": "Whether to include the parent organization with board results",
        "value_schema": {
          "val_type": "boolean",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "Whether to include the parent organization with board results"
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": false,
        "documentation_urls": []
      },
      {
        "name": "card_fields",
        "tool_parameter_name": "card_fields",
        "description": "all or a comma-separated list of: `badges`, `checkItemStates`, `closed`, `dateLastActivity`, `desc`, `descData`, `due`, `idAttachmentCover`, `idBoard`, `idChecklists`, `idLabels`, `idList`, `idMembers`, `idMembersVoted`, `idShort`, `labels`, `manualCoverAttachment`, `name`, `pos`, `shortLink`, `shortUrl`, `subscribed`, `url`",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "all or a comma-separated list of: `badges`, `checkItemStates`, `closed`, `dateLastActivity`, `desc`, `descData`, `due`, `idAttachmentCover`, `idBoard`, `idChecklists`, `idLabels`, `idList`, `idMembers`, `idMembersVoted`, `idShort`, `labels`, `manualCoverAttachment`, `name`, `pos`, `shortLink`, `shortUrl`, `subscribed`, `url`"
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": "all",
        "documentation_urls": []
      },
      {
        "name": "cards_limit",
        "tool_parameter_name": "maximum_cards_to_return",
        "description": "The maximum number of cards to return. Maximum: 1000",
        "value_schema": {
          "val_type": "integer",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "The maximum number of cards to return. Maximum: 1000"
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": 10,
        "documentation_urls": []
      },
      {
        "name": "cards_page",
        "tool_parameter_name": "cards_page_number",
        "description": "The page of results for cards. Maximum: 100",
        "value_schema": {
          "val_type": "number",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "The page of results for cards. Maximum: 100"
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": 0,
        "documentation_urls": []
      },
      {
        "name": "card_board",
        "tool_parameter_name": "include_parent_board_with_card_results",
        "description": "Whether to include the parent board with card results",
        "value_schema": {
          "val_type": "boolean",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "Whether to include the parent board with card results"
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": false,
        "documentation_urls": []
      },
      {
        "name": "card_list",
        "tool_parameter_name": "include_card_list",
        "description": "Whether to include the parent list with card results",
        "value_schema": {
          "val_type": "boolean",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "Whether to include the parent list with card results"
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": false,
        "documentation_urls": []
      },
      {
        "name": "card_members",
        "tool_parameter_name": "include_card_members",
        "description": "Whether to include member objects with card results",
        "value_schema": {
          "val_type": "boolean",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "Whether to include member objects with card results"
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": false,
        "documentation_urls": []
      },
      {
        "name": "card_stickers",
        "tool_parameter_name": "include_card_stickers",
        "description": "Whether to include sticker objects with card results",
        "value_schema": {
          "val_type": "boolean",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "Whether to include sticker objects with card results"
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": false,
        "documentation_urls": []
      },
      {
        "name": "card_attachments",
        "tool_parameter_name": "include_card_attachments",
        "description": "Whether to include attachment objects with card results. A boolean value (true or false) or cover for only card cover attachments.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "Whether to include attachment objects with card results. A boolean value (true or false) or cover for only card cover attachments."
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": "false",
        "documentation_urls": []
      },
      {
        "name": "organization_fields",
        "tool_parameter_name": "organization_fields_to_return",
        "description": "all or a comma-separated list of billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url, website",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "all or a comma-separated list of billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url, website"
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": "name,displayName",
        "documentation_urls": []
      },
      {
        "name": "organizations_limit",
        "tool_parameter_name": "max_workspaces_to_return",
        "description": "The maximum number of Workspaces to return. Maximum 1000",
        "value_schema": {
          "val_type": "integer",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "The maximum number of Workspaces to return. Maximum 1000"
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": "10",
        "documentation_urls": []
      },
      {
        "name": "member_fields",
        "tool_parameter_name": "member_fields_selection",
        "description": "all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username"
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": "avatarHash,fullName,initials,username,confirmed",
        "documentation_urls": []
      },
      {
        "name": "members_limit",
        "tool_parameter_name": "max_members_returned",
        "description": "The maximum number of members to return. Maximum 1000",
        "value_schema": {
          "val_type": "integer",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "The maximum number of members to return. Maximum 1000"
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": "10",
        "documentation_urls": []
      },
      {
        "name": "partial",
        "tool_parameter_name": "enable_partial_search",
        "description": "By default, Trello searches for each word in your query against exactly matching words within Member content. Specifying partial to be true means that we will look for content that starts with any of the words in your query.  If you are looking for a Card titled \"My Development Status Report\", by default you would need to search for \"Development\". If you have partial enabled, you will be able to search for \"dev\" but not \"velopment\".",
        "value_schema": {
          "val_type": "boolean",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "By default, Trello searches for each word in your query against exactly matching words within Member content. Specifying partial to be true means that we will look for content that starts with any of the words in your query.  If you are looking for a Card titled \"My Development Status Report\", by default you would need to search for \"Development\". If you have partial enabled, you will be able to search for \"dev\" but not \"velopment\"."
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": false,
        "documentation_urls": []
      }
    ],
    "documentation_urls": [],
    "secrets": [
      {
        "arcade_key": "TRELLO_API_KEY",
        "parameter_name": "key",
        "accepted_as": "query",
        "formatted_value": null,
        "description": "",
        "is_auth_token": false
      },
      {
        "arcade_key": "TRELLO_TOKEN",
        "parameter_name": "token",
        "accepted_as": "query",
        "formatted_value": null,
        "description": "",
        "is_auth_token": false
      }
    ],
    "request_body_spec": null,
    "use_request_body_schema_mode": false,
    "validate_request_body_schema": false
  }
}
