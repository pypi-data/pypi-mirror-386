[project]
name = "lobby-ai"
version = "1.1.1"
description = "🏢 LOBBY - AI concierge service that multiplies your existing CLI tools"
authors = [
    {name = "Franco", email = "support@lobby.directory"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
keywords = ["ai", "cli", "orchestration", "mcp", "claude", "gemini", "cursor", "concierge"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers", 
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "typer>=0.9.0",
    "rich>=13.0.0",
    "httpx>=0.24.0",
    "pydantic>=2.0.0",
    "cryptography>=41.0.0",
]

[project.optional-dependencies]
mcp = ["mcp>=1.0.0"]
interactive = [
    "InquirerPy>=0.3.4",
    "questionary>=2.0.0",
    "prompt-toolkit>=3.0.0,<4.0.0",
]
billing = [
    "stripe>=5.0.0", 
    "flask>=2.3.0", 
    "flask-cors>=4.0.0"
]
dev = [
    "ruff>=0.5.0",
    "mypy>=1.7.0",
    "pytest>=7.4.0", 
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pre-commit>=3.6.0",
]
all = ["lobby-ai[mcp,billing,interactive]"]

[project.scripts]
lobby = "lobby.cli:main"
lobby-mcp = "lobby.mcp_server:main_entry"

[project.urls]
Homepage = "https://lobby.directory"
Repository = "https://github.com/franco/lobby-ai"
Documentation = "https://lobby.directory/docs"
"Bug Reports" = "https://github.com/franco/lobby-ai/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["lobby", "doorman"]

[tool.ruff]
line-length = 88
target-version = "py39"
exclude = [
  ".git",
  ".venv",
  "venv",
  "doorman/**",
  "lobby/mcp_server_broken.py"
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long - handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "B904",  # raise ... from err
    "W291",  # trailing whitespace (temporarily ignored for speed)
    "W293",  # blank line contains whitespace
    "ARG001", # unused function argument
    "ARG002", # unused method argument
]
[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["S101", "ARG", "PTH"]
"**/__init__.py" = ["F401"]
"lobby/cli.py" = ["E402"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "model_context_protocol.*",
    "textual.*",
    "keyring.*",
    "tiktoken.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "live_api: tests that require live API keys",
    "slow: slow running tests", 
    "integration: integration tests",
    "ui: textual UI tests",
]

[tool.coverage.run]
source = ["lobby", "doorman"]
omit = [
    "*/tests/*",
    "*/test_*",
    "doorman/assets/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
