# coding: utf-8

"""
    FINBOURNE Scheduler API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic.v1 import StrictStr, Field, BaseModel, Field, StrictStr 
from lusid_scheduler.models.resource_id import ResourceId

class StartScheduleResponse(BaseModel):
    """
    Response from a manual run of a schedule  # noqa: E501
    """
    schedule_id: Optional[ResourceId] = Field(None, alias="scheduleId")
    job_id: Optional[ResourceId] = Field(None, alias="jobId")
    run_id:  Optional[StrictStr] = Field(None,alias="runId", description="Unique RunId of the started schedule") 
    status:  Optional[StrictStr] = Field(None,alias="status", description="Status of the started schedule") 
    result:  Optional[StrictStr] = Field(None,alias="result", description="Link to the result of the job run when completed") 
    __properties = ["scheduleId", "jobId", "runId", "status", "result"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StartScheduleResponse:
        """Create an instance of StartScheduleResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of schedule_id
        if self.schedule_id:
            _dict['scheduleId'] = self.schedule_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of job_id
        if self.job_id:
            _dict['jobId'] = self.job_id.to_dict()
        # set to None if run_id (nullable) is None
        # and __fields_set__ contains the field
        if self.run_id is None and "run_id" in self.__fields_set__:
            _dict['runId'] = None

        # set to None if status (nullable) is None
        # and __fields_set__ contains the field
        if self.status is None and "status" in self.__fields_set__:
            _dict['status'] = None

        # set to None if result (nullable) is None
        # and __fields_set__ contains the field
        if self.result is None and "result" in self.__fields_set__:
            _dict['result'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StartScheduleResponse:
        """Create an instance of StartScheduleResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StartScheduleResponse.parse_obj(obj)

        _obj = StartScheduleResponse.parse_obj({
            "schedule_id": ResourceId.from_dict(obj.get("scheduleId")) if obj.get("scheduleId") is not None else None,
            "job_id": ResourceId.from_dict(obj.get("jobId")) if obj.get("jobId") is not None else None,
            "run_id": obj.get("runId"),
            "status": obj.get("status"),
            "result": obj.get("result")
        })
        return _obj
