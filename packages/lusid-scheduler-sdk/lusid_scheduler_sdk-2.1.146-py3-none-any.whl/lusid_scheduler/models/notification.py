# coding: utf-8

"""
    FINBOURNE Scheduler API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic.v1 import StrictStr, Field, BaseModel, Field, StrictStr, conlist 

class Notification(BaseModel):
    """
    Notification type  # noqa: E501
    """
    fire_on:  Optional[StrictStr] = Field(None,alias="fireOn", description="Condition for the notification") 
    transport:  Optional[StrictStr] = Field(None,alias="transport", description="The type of the notification") 
    destination: Optional[conlist(StrictStr)] = Field(None, description="Where the notification should be sent")
    __properties = ["fireOn", "transport", "destination"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Notification:
        """Create an instance of Notification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "fire_on",
                          },
                          exclude_none=True)
        # set to None if fire_on (nullable) is None
        # and __fields_set__ contains the field
        if self.fire_on is None and "fire_on" in self.__fields_set__:
            _dict['fireOn'] = None

        # set to None if transport (nullable) is None
        # and __fields_set__ contains the field
        if self.transport is None and "transport" in self.__fields_set__:
            _dict['transport'] = None

        # set to None if destination (nullable) is None
        # and __fields_set__ contains the field
        if self.destination is None and "destination" in self.__fields_set__:
            _dict['destination'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Notification:
        """Create an instance of Notification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Notification.parse_obj(obj)

        _obj = Notification.parse_obj({
            "fire_on": obj.get("fireOn"),
            "transport": obj.get("transport"),
            "destination": obj.get("destination")
        })
        return _obj
