# coding: utf-8

"""
    FINBOURNE Scheduler API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic.v1 import StrictStr, Field, BaseModel, Field, StrictInt 

class ScanSummary(BaseModel):
    """
      # noqa: E501
    """
    fixable: Optional[StrictInt] = Field(None, description="The number of vulnerabilities that have a known fix")
    total: Optional[StrictInt] = Field(None, description="The total number of vulnerabilities")
    critical: Optional[StrictInt] = Field(None, description="The number of Critical severity vulnerabilities")
    high: Optional[StrictInt] = Field(None, description="The number of High severity vulnerabilities")
    medium: Optional[StrictInt] = Field(None, description="The number of Medium severity vulnerabilities")
    low: Optional[StrictInt] = Field(None, description="The number of Low severity vulnerabilities")
    negligible: Optional[StrictInt] = Field(None, description="The number of Negligible severity vulnerabilities")
    unknown: Optional[StrictInt] = Field(None, description="The number of Unknown severity vulnerabilities")
    __properties = ["fixable", "total", "critical", "high", "medium", "low", "negligible", "unknown"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ScanSummary:
        """Create an instance of ScanSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if fixable (nullable) is None
        # and __fields_set__ contains the field
        if self.fixable is None and "fixable" in self.__fields_set__:
            _dict['fixable'] = None

        # set to None if total (nullable) is None
        # and __fields_set__ contains the field
        if self.total is None and "total" in self.__fields_set__:
            _dict['total'] = None

        # set to None if critical (nullable) is None
        # and __fields_set__ contains the field
        if self.critical is None and "critical" in self.__fields_set__:
            _dict['critical'] = None

        # set to None if high (nullable) is None
        # and __fields_set__ contains the field
        if self.high is None and "high" in self.__fields_set__:
            _dict['high'] = None

        # set to None if medium (nullable) is None
        # and __fields_set__ contains the field
        if self.medium is None and "medium" in self.__fields_set__:
            _dict['medium'] = None

        # set to None if low (nullable) is None
        # and __fields_set__ contains the field
        if self.low is None and "low" in self.__fields_set__:
            _dict['low'] = None

        # set to None if negligible (nullable) is None
        # and __fields_set__ contains the field
        if self.negligible is None and "negligible" in self.__fields_set__:
            _dict['negligible'] = None

        # set to None if unknown (nullable) is None
        # and __fields_set__ contains the field
        if self.unknown is None and "unknown" in self.__fields_set__:
            _dict['unknown'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ScanSummary:
        """Create an instance of ScanSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ScanSummary.parse_obj(obj)

        _obj = ScanSummary.parse_obj({
            "fixable": obj.get("fixable"),
            "total": obj.get("total"),
            "critical": obj.get("critical"),
            "high": obj.get("high"),
            "medium": obj.get("medium"),
            "low": obj.get("low"),
            "negligible": obj.get("negligible"),
            "unknown": obj.get("unknown")
        })
        return _obj
