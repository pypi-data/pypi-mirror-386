# coding: utf-8

"""
    FINBOURNE Scheduler API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic.v1 import StrictStr, Field, BaseModel, Field, StrictStr, conlist 

class Vulnerability(BaseModel):
    """
    Represents the details of an image vulnerability  # noqa: E501
    """
    name:  Optional[StrictStr] = Field(None,alias="name", description="The name of the vulnerability") 
    package:  Optional[StrictStr] = Field(None,alias="package", description="The package that contains the vulnerability") 
    version:  Optional[StrictStr] = Field(None,alias="version", description="The version of the package") 
    fix_version:  Optional[StrictStr] = Field(None,alias="fixVersion", description="The version that has a fix for the vulnerability (if known)") 
    severity:  Optional[StrictStr] = Field(None,alias="severity", description="The severity of the vulnerability") 
    description:  Optional[StrictStr] = Field(None,alias="description", description="The description of the vulnerability") 
    links: Optional[conlist(StrictStr)] = Field(None, description="Relevant links for the vulnerability")
    __properties = ["name", "package", "version", "fixVersion", "severity", "description", "links"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Vulnerability:
        """Create an instance of Vulnerability from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        # set to None if package (nullable) is None
        # and __fields_set__ contains the field
        if self.package is None and "package" in self.__fields_set__:
            _dict['package'] = None

        # set to None if version (nullable) is None
        # and __fields_set__ contains the field
        if self.version is None and "version" in self.__fields_set__:
            _dict['version'] = None

        # set to None if fix_version (nullable) is None
        # and __fields_set__ contains the field
        if self.fix_version is None and "fix_version" in self.__fields_set__:
            _dict['fixVersion'] = None

        # set to None if severity (nullable) is None
        # and __fields_set__ contains the field
        if self.severity is None and "severity" in self.__fields_set__:
            _dict['severity'] = None

        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if links (nullable) is None
        # and __fields_set__ contains the field
        if self.links is None and "links" in self.__fields_set__:
            _dict['links'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Vulnerability:
        """Create an instance of Vulnerability from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Vulnerability.parse_obj(obj)

        _obj = Vulnerability.parse_obj({
            "name": obj.get("name"),
            "package": obj.get("package"),
            "version": obj.get("version"),
            "fix_version": obj.get("fixVersion"),
            "severity": obj.get("severity"),
            "description": obj.get("description"),
            "links": obj.get("links")
        })
        return _obj
