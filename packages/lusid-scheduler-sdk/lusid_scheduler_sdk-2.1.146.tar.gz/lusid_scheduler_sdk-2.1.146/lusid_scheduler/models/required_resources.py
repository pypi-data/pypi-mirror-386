# coding: utf-8

"""
    FINBOURNE Scheduler API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic.v1 import StrictStr, Field, BaseModel, Field, StrictStr, conlist 

class RequiredResources(BaseModel):
    """
    Information related to a jobs required access to resources  # noqa: E501
    """
    lusid_apis: Optional[conlist(StrictStr)] = Field(None, alias="lusidApis", description="List of LUSID APIs the job needs access to")
    lusid_file_system: Optional[conlist(StrictStr)] = Field(None, alias="lusidFileSystem", description="List of S3 bucket or folder names that the job can access")
    external_calls: Optional[conlist(StrictStr)] = Field(None, alias="externalCalls", description="External URLs that the job can call")
    __properties = ["lusidApis", "lusidFileSystem", "externalCalls"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RequiredResources:
        """Create an instance of RequiredResources from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if lusid_apis (nullable) is None
        # and __fields_set__ contains the field
        if self.lusid_apis is None and "lusid_apis" in self.__fields_set__:
            _dict['lusidApis'] = None

        # set to None if lusid_file_system (nullable) is None
        # and __fields_set__ contains the field
        if self.lusid_file_system is None and "lusid_file_system" in self.__fields_set__:
            _dict['lusidFileSystem'] = None

        # set to None if external_calls (nullable) is None
        # and __fields_set__ contains the field
        if self.external_calls is None and "external_calls" in self.__fields_set__:
            _dict['externalCalls'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RequiredResources:
        """Create an instance of RequiredResources from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RequiredResources.parse_obj(obj)

        _obj = RequiredResources.parse_obj({
            "lusid_apis": obj.get("lusidApis"),
            "lusid_file_system": obj.get("lusidFileSystem"),
            "external_calls": obj.get("externalCalls")
        })
        return _obj
