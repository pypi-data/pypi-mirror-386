# coding: utf-8

"""
    FINBOURNE Scheduler API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic.v1 import StrictStr, Field, BaseModel, Field, StrictInt, StrictStr, conlist 
from lusid_scheduler.models.link import Link

class Repository(BaseModel):
    """
    An object representation of a repository  # noqa: E501
    """
    name:  Optional[StrictStr] = Field(None,alias="name", description="The identifier of the repository") 
    creation_time: Optional[datetime] = Field(None, alias="creationTime", description="Date of  repository creation")
    last_update: Optional[datetime] = Field(None, alias="lastUpdate", description="The last update of the repository")
    description:  Optional[StrictStr] = Field(None,alias="description", description="Description of the repository") 
    pull_count: Optional[StrictInt] = Field(None, alias="pullCount", description="Number of times images were pulled from this repository")
    image_count: Optional[StrictInt] = Field(None, alias="imageCount", description="The number of versions of this image")
    images: Optional[Link] = None
    links: Optional[conlist(Link)] = None
    __properties = ["name", "creationTime", "lastUpdate", "description", "pullCount", "imageCount", "images", "links"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Repository:
        """Create an instance of Repository from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of images
        if self.images:
            _dict['images'] = self.images.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item in self.links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['links'] = _items
        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if links (nullable) is None
        # and __fields_set__ contains the field
        if self.links is None and "links" in self.__fields_set__:
            _dict['links'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Repository:
        """Create an instance of Repository from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Repository.parse_obj(obj)

        _obj = Repository.parse_obj({
            "name": obj.get("name"),
            "creation_time": obj.get("creationTime"),
            "last_update": obj.get("lastUpdate"),
            "description": obj.get("description"),
            "pull_count": obj.get("pullCount"),
            "image_count": obj.get("imageCount"),
            "images": Link.from_dict(obj.get("images")) if obj.get("images") is not None else None,
            "links": [Link.from_dict(_item) for _item in obj.get("links")] if obj.get("links") is not None else None
        })
        return _obj
