# coding: utf-8

"""
    FINBOURNE Scheduler API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic.v1 import StrictStr, Field, BaseModel, Field, StrictBool, StrictInt, StrictStr, constr 

class ArgumentDefinition(BaseModel):
    """
    Job argument definition  # noqa: E501
    """
    data_type:  StrictStr = Field(...,alias="dataType", description="Data type of the argument") 
    required: Optional[StrictBool] = Field(None, description="Optionality of the argument")
    description:  StrictStr = Field(...,alias="description", description="Argument description") 
    order: StrictInt = Field(..., description="The order of the argument")
    constraints:  Optional[StrictStr] = Field(None,alias="constraints", description="Constrains of the argument value") 
    passed_as:  StrictStr = Field(...,alias="passedAs", description="Specifies how this argument should be passed in Allowed values are: CommandLine or EnvironmentVariable  Defaults to: CommandLine") 
    default_value:  Optional[StrictStr] = Field(None,alias="defaultValue", description="Specify a default value for this argument if no value is provided The value needs to be convertible to the associated data type") 
    __properties = ["dataType", "required", "description", "order", "constraints", "passedAs", "defaultValue"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ArgumentDefinition:
        """Create an instance of ArgumentDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if constraints (nullable) is None
        # and __fields_set__ contains the field
        if self.constraints is None and "constraints" in self.__fields_set__:
            _dict['constraints'] = None

        # set to None if default_value (nullable) is None
        # and __fields_set__ contains the field
        if self.default_value is None and "default_value" in self.__fields_set__:
            _dict['defaultValue'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ArgumentDefinition:
        """Create an instance of ArgumentDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ArgumentDefinition.parse_obj(obj)

        _obj = ArgumentDefinition.parse_obj({
            "data_type": obj.get("dataType"),
            "required": obj.get("required"),
            "description": obj.get("description"),
            "order": obj.get("order"),
            "constraints": obj.get("constraints"),
            "passed_as": obj.get("passedAs"),
            "default_value": obj.get("defaultValue")
        })
        return _obj
