# coding: utf-8

"""
    Sonatype Lifecycle Public REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.196.0-01
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr
from typing import Optional
from typing_extensions import Annotated
from sonatype_iq_api_client.models.api_dependency_tree_response_dto import ApiDependencyTreeResponseDTO
from sonatype_iq_api_client.models.api_policy_violation_diff_dto import ApiPolicyViolationDiffDTO
from sonatype_iq_api_client.models.api_report_policy_data_dtov2 import ApiReportPolicyDataDTOV2
from sonatype_iq_api_client.models.api_report_raw_data_dtov2 import ApiReportRawDataDTOV2

from sonatype_iq_api_client.api_client import ApiClient, RequestSerialized
from sonatype_iq_api_client.api_response import ApiResponse
from sonatype_iq_api_client.rest import RESTResponseType


class ApplicationReportDataApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_data(
        self,
        application_public_id: Annotated[StrictStr, Field(description="Enter the applicationPublicId for the evaluated application.")],
        scan_id: Annotated[StrictStr, Field(description="Enter the scanId (reportId) of the application report created after the evaluation. ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """get_data

        This is an older version of the endpoint. This call will now be redirected to /api/v2/applications/{applicationPublicId}/reports/{scanId}/raw.

        :param application_public_id: Enter the applicationPublicId for the evaluated application. (required)
        :type application_public_id: str
        :param scan_id: Enter the scanId (reportId) of the application report created after the evaluation.  (required)
        :type scan_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_data_serialize(
            application_public_id=application_public_id,
            scan_id=scan_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '307': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_data_with_http_info(
        self,
        application_public_id: Annotated[StrictStr, Field(description="Enter the applicationPublicId for the evaluated application.")],
        scan_id: Annotated[StrictStr, Field(description="Enter the scanId (reportId) of the application report created after the evaluation. ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """get_data

        This is an older version of the endpoint. This call will now be redirected to /api/v2/applications/{applicationPublicId}/reports/{scanId}/raw.

        :param application_public_id: Enter the applicationPublicId for the evaluated application. (required)
        :type application_public_id: str
        :param scan_id: Enter the scanId (reportId) of the application report created after the evaluation.  (required)
        :type scan_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_data_serialize(
            application_public_id=application_public_id,
            scan_id=scan_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '307': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_data_without_preload_content(
        self,
        application_public_id: Annotated[StrictStr, Field(description="Enter the applicationPublicId for the evaluated application.")],
        scan_id: Annotated[StrictStr, Field(description="Enter the scanId (reportId) of the application report created after the evaluation. ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_data

        This is an older version of the endpoint. This call will now be redirected to /api/v2/applications/{applicationPublicId}/reports/{scanId}/raw.

        :param application_public_id: Enter the applicationPublicId for the evaluated application. (required)
        :type application_public_id: str
        :param scan_id: Enter the scanId (reportId) of the application report created after the evaluation.  (required)
        :type scan_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_data_serialize(
            application_public_id=application_public_id,
            scan_id=scan_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '307': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_data_serialize(
        self,
        application_public_id,
        scan_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_public_id is not None:
            _path_params['applicationPublicId'] = application_public_id
        if scan_id is not None:
            _path_params['scanId'] = scan_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/applications/{applicationPublicId}/reports/{scanId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_dependency_tree(
        self,
        application_public_id: Annotated[StrictStr, Field(description="Enter the applicationPublicId created at the time of creating the application.")],
        scan_id: Annotated[StrictStr, Field(description=" Enter the reportId (scanId) created at the time of evaluating the application.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiDependencyTreeResponseDTO:
        """get_dependency_tree

        Use this method to retrieve the dependencies related to the component identified at the time of application evaluation. This is currently available only for Java (Maven) and NPM applications.  Permissions required: View IQ Elements

        :param application_public_id: Enter the applicationPublicId created at the time of creating the application. (required)
        :type application_public_id: str
        :param scan_id:  Enter the reportId (scanId) created at the time of evaluating the application. (required)
        :type scan_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dependency_tree_serialize(
            application_public_id=application_public_id,
            scan_id=scan_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiDependencyTreeResponseDTO",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_dependency_tree_with_http_info(
        self,
        application_public_id: Annotated[StrictStr, Field(description="Enter the applicationPublicId created at the time of creating the application.")],
        scan_id: Annotated[StrictStr, Field(description=" Enter the reportId (scanId) created at the time of evaluating the application.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ApiDependencyTreeResponseDTO]:
        """get_dependency_tree

        Use this method to retrieve the dependencies related to the component identified at the time of application evaluation. This is currently available only for Java (Maven) and NPM applications.  Permissions required: View IQ Elements

        :param application_public_id: Enter the applicationPublicId created at the time of creating the application. (required)
        :type application_public_id: str
        :param scan_id:  Enter the reportId (scanId) created at the time of evaluating the application. (required)
        :type scan_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dependency_tree_serialize(
            application_public_id=application_public_id,
            scan_id=scan_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiDependencyTreeResponseDTO",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_dependency_tree_without_preload_content(
        self,
        application_public_id: Annotated[StrictStr, Field(description="Enter the applicationPublicId created at the time of creating the application.")],
        scan_id: Annotated[StrictStr, Field(description=" Enter the reportId (scanId) created at the time of evaluating the application.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_dependency_tree

        Use this method to retrieve the dependencies related to the component identified at the time of application evaluation. This is currently available only for Java (Maven) and NPM applications.  Permissions required: View IQ Elements

        :param application_public_id: Enter the applicationPublicId created at the time of creating the application. (required)
        :type application_public_id: str
        :param scan_id:  Enter the reportId (scanId) created at the time of evaluating the application. (required)
        :type scan_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dependency_tree_serialize(
            application_public_id=application_public_id,
            scan_id=scan_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiDependencyTreeResponseDTO",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_dependency_tree_serialize(
        self,
        application_public_id,
        scan_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_public_id is not None:
            _path_params['applicationPublicId'] = application_public_id
        if scan_id is not None:
            _path_params['scanId'] = scan_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/applications/{applicationPublicId}/reports/{scanId}/dependencyTree',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_policy_violation_diff(
        self,
        application_public_id: Annotated[StrictStr, Field(description="Enter the applicationPublicId, created at the time of creating the application")],
        from_commit: Annotated[StrictStr, Field(description="Enter the commit hash linked to the earlier policy evaluation.")],
        to_commit: Annotated[StrictStr, Field(description="Enter the commit hash linked to the other (later) policy evaluation to compare.")],
        from_policy_evaluation_id: Annotated[Optional[StrictStr], Field(description="Enter the policy evaluation Id linked to the earlier policy evaluation to compare")] = None,
        to_policy_evaluation_id: Annotated[Optional[StrictStr], Field(description="Enter the policy evaluation Id linked to the other (later) policy evaluation to compare")] = None,
        include_violation_times: Annotated[Optional[StrictBool], Field(description="Set to true to include policy violation times (open, legacy, waived, fixed) in the response if set.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiPolicyViolationDiffDTO:
        """get_policy_violation_diff

        By configuring Lifecycle with SCM, policy evaluations can be linked to the Git commit hash. Use this method to compare the violations between policy evaluations for 2 commits, by providing the linked commit hashes.  Permissions required: View IQ Elements

        :param application_public_id: Enter the applicationPublicId, created at the time of creating the application (required)
        :type application_public_id: str
        :param from_commit: Enter the commit hash linked to the earlier policy evaluation. (required)
        :type from_commit: str
        :param to_commit: Enter the commit hash linked to the other (later) policy evaluation to compare. (required)
        :type to_commit: str
        :param from_policy_evaluation_id: Enter the policy evaluation Id linked to the earlier policy evaluation to compare
        :type from_policy_evaluation_id: str
        :param to_policy_evaluation_id: Enter the policy evaluation Id linked to the other (later) policy evaluation to compare
        :type to_policy_evaluation_id: str
        :param include_violation_times: Set to true to include policy violation times (open, legacy, waived, fixed) in the response if set.
        :type include_violation_times: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_policy_violation_diff_serialize(
            application_public_id=application_public_id,
            from_commit=from_commit,
            to_commit=to_commit,
            from_policy_evaluation_id=from_policy_evaluation_id,
            to_policy_evaluation_id=to_policy_evaluation_id,
            include_violation_times=include_violation_times,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiPolicyViolationDiffDTO",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_policy_violation_diff_with_http_info(
        self,
        application_public_id: Annotated[StrictStr, Field(description="Enter the applicationPublicId, created at the time of creating the application")],
        from_commit: Annotated[StrictStr, Field(description="Enter the commit hash linked to the earlier policy evaluation.")],
        to_commit: Annotated[StrictStr, Field(description="Enter the commit hash linked to the other (later) policy evaluation to compare.")],
        from_policy_evaluation_id: Annotated[Optional[StrictStr], Field(description="Enter the policy evaluation Id linked to the earlier policy evaluation to compare")] = None,
        to_policy_evaluation_id: Annotated[Optional[StrictStr], Field(description="Enter the policy evaluation Id linked to the other (later) policy evaluation to compare")] = None,
        include_violation_times: Annotated[Optional[StrictBool], Field(description="Set to true to include policy violation times (open, legacy, waived, fixed) in the response if set.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ApiPolicyViolationDiffDTO]:
        """get_policy_violation_diff

        By configuring Lifecycle with SCM, policy evaluations can be linked to the Git commit hash. Use this method to compare the violations between policy evaluations for 2 commits, by providing the linked commit hashes.  Permissions required: View IQ Elements

        :param application_public_id: Enter the applicationPublicId, created at the time of creating the application (required)
        :type application_public_id: str
        :param from_commit: Enter the commit hash linked to the earlier policy evaluation. (required)
        :type from_commit: str
        :param to_commit: Enter the commit hash linked to the other (later) policy evaluation to compare. (required)
        :type to_commit: str
        :param from_policy_evaluation_id: Enter the policy evaluation Id linked to the earlier policy evaluation to compare
        :type from_policy_evaluation_id: str
        :param to_policy_evaluation_id: Enter the policy evaluation Id linked to the other (later) policy evaluation to compare
        :type to_policy_evaluation_id: str
        :param include_violation_times: Set to true to include policy violation times (open, legacy, waived, fixed) in the response if set.
        :type include_violation_times: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_policy_violation_diff_serialize(
            application_public_id=application_public_id,
            from_commit=from_commit,
            to_commit=to_commit,
            from_policy_evaluation_id=from_policy_evaluation_id,
            to_policy_evaluation_id=to_policy_evaluation_id,
            include_violation_times=include_violation_times,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiPolicyViolationDiffDTO",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_policy_violation_diff_without_preload_content(
        self,
        application_public_id: Annotated[StrictStr, Field(description="Enter the applicationPublicId, created at the time of creating the application")],
        from_commit: Annotated[StrictStr, Field(description="Enter the commit hash linked to the earlier policy evaluation.")],
        to_commit: Annotated[StrictStr, Field(description="Enter the commit hash linked to the other (later) policy evaluation to compare.")],
        from_policy_evaluation_id: Annotated[Optional[StrictStr], Field(description="Enter the policy evaluation Id linked to the earlier policy evaluation to compare")] = None,
        to_policy_evaluation_id: Annotated[Optional[StrictStr], Field(description="Enter the policy evaluation Id linked to the other (later) policy evaluation to compare")] = None,
        include_violation_times: Annotated[Optional[StrictBool], Field(description="Set to true to include policy violation times (open, legacy, waived, fixed) in the response if set.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_policy_violation_diff

        By configuring Lifecycle with SCM, policy evaluations can be linked to the Git commit hash. Use this method to compare the violations between policy evaluations for 2 commits, by providing the linked commit hashes.  Permissions required: View IQ Elements

        :param application_public_id: Enter the applicationPublicId, created at the time of creating the application (required)
        :type application_public_id: str
        :param from_commit: Enter the commit hash linked to the earlier policy evaluation. (required)
        :type from_commit: str
        :param to_commit: Enter the commit hash linked to the other (later) policy evaluation to compare. (required)
        :type to_commit: str
        :param from_policy_evaluation_id: Enter the policy evaluation Id linked to the earlier policy evaluation to compare
        :type from_policy_evaluation_id: str
        :param to_policy_evaluation_id: Enter the policy evaluation Id linked to the other (later) policy evaluation to compare
        :type to_policy_evaluation_id: str
        :param include_violation_times: Set to true to include policy violation times (open, legacy, waived, fixed) in the response if set.
        :type include_violation_times: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_policy_violation_diff_serialize(
            application_public_id=application_public_id,
            from_commit=from_commit,
            to_commit=to_commit,
            from_policy_evaluation_id=from_policy_evaluation_id,
            to_policy_evaluation_id=to_policy_evaluation_id,
            include_violation_times=include_violation_times,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiPolicyViolationDiffDTO",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_policy_violation_diff_serialize(
        self,
        application_public_id,
        from_commit,
        to_commit,
        from_policy_evaluation_id,
        to_policy_evaluation_id,
        include_violation_times,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_public_id is not None:
            _path_params['applicationPublicId'] = application_public_id
        # process the query parameters
        if from_commit is not None:
            
            _query_params.append(('fromCommit', from_commit))
            
        if to_commit is not None:
            
            _query_params.append(('toCommit', to_commit))
            
        if from_policy_evaluation_id is not None:
            
            _query_params.append(('fromPolicyEvaluationId', from_policy_evaluation_id))
            
        if to_policy_evaluation_id is not None:
            
            _query_params.append(('toPolicyEvaluationId', to_policy_evaluation_id))
            
        if include_violation_times is not None:
            
            _query_params.append(('includeViolationTimes', include_violation_times))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/applications/{applicationPublicId}/reports/policyViolations/diff',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_policy_violations1(
        self,
        application_public_id: Annotated[StrictStr, Field(description="Enter the applicationPublicId created at the time of creating the application.")],
        scan_id: Annotated[StrictStr, Field(description="Enter the reportId (scanId) created at the time of evaluating the application.")],
        include_violation_times: Annotated[Optional[StrictBool], Field(description="Set to true to include policy violation times (open, legacy, waived, fixed) in the response if set.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiReportPolicyDataDTOV2:
        """get_policy_violations1

        Use this method to retrieve the policy violation data generated as a result of an application evaluation, for each component identified in the application evaluation./n/nPermissions required: View IQ Elements

        :param application_public_id: Enter the applicationPublicId created at the time of creating the application. (required)
        :type application_public_id: str
        :param scan_id: Enter the reportId (scanId) created at the time of evaluating the application. (required)
        :type scan_id: str
        :param include_violation_times: Set to true to include policy violation times (open, legacy, waived, fixed) in the response if set.
        :type include_violation_times: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_policy_violations1_serialize(
            application_public_id=application_public_id,
            scan_id=scan_id,
            include_violation_times=include_violation_times,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiReportPolicyDataDTOV2",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_policy_violations1_with_http_info(
        self,
        application_public_id: Annotated[StrictStr, Field(description="Enter the applicationPublicId created at the time of creating the application.")],
        scan_id: Annotated[StrictStr, Field(description="Enter the reportId (scanId) created at the time of evaluating the application.")],
        include_violation_times: Annotated[Optional[StrictBool], Field(description="Set to true to include policy violation times (open, legacy, waived, fixed) in the response if set.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ApiReportPolicyDataDTOV2]:
        """get_policy_violations1

        Use this method to retrieve the policy violation data generated as a result of an application evaluation, for each component identified in the application evaluation./n/nPermissions required: View IQ Elements

        :param application_public_id: Enter the applicationPublicId created at the time of creating the application. (required)
        :type application_public_id: str
        :param scan_id: Enter the reportId (scanId) created at the time of evaluating the application. (required)
        :type scan_id: str
        :param include_violation_times: Set to true to include policy violation times (open, legacy, waived, fixed) in the response if set.
        :type include_violation_times: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_policy_violations1_serialize(
            application_public_id=application_public_id,
            scan_id=scan_id,
            include_violation_times=include_violation_times,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiReportPolicyDataDTOV2",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_policy_violations1_without_preload_content(
        self,
        application_public_id: Annotated[StrictStr, Field(description="Enter the applicationPublicId created at the time of creating the application.")],
        scan_id: Annotated[StrictStr, Field(description="Enter the reportId (scanId) created at the time of evaluating the application.")],
        include_violation_times: Annotated[Optional[StrictBool], Field(description="Set to true to include policy violation times (open, legacy, waived, fixed) in the response if set.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_policy_violations1

        Use this method to retrieve the policy violation data generated as a result of an application evaluation, for each component identified in the application evaluation./n/nPermissions required: View IQ Elements

        :param application_public_id: Enter the applicationPublicId created at the time of creating the application. (required)
        :type application_public_id: str
        :param scan_id: Enter the reportId (scanId) created at the time of evaluating the application. (required)
        :type scan_id: str
        :param include_violation_times: Set to true to include policy violation times (open, legacy, waived, fixed) in the response if set.
        :type include_violation_times: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_policy_violations1_serialize(
            application_public_id=application_public_id,
            scan_id=scan_id,
            include_violation_times=include_violation_times,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiReportPolicyDataDTOV2",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_policy_violations1_serialize(
        self,
        application_public_id,
        scan_id,
        include_violation_times,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_public_id is not None:
            _path_params['applicationPublicId'] = application_public_id
        if scan_id is not None:
            _path_params['scanId'] = scan_id
        # process the query parameters
        if include_violation_times is not None:
            
            _query_params.append(('includeViolationTimes', include_violation_times))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/applications/{applicationPublicId}/reports/{scanId}/policy',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_raw_data(
        self,
        application_public_id: Annotated[StrictStr, Field(description="Enter the applicationPublicId (assigned at the time of creating a new application.) ")],
        scan_id: Annotated[StrictStr, Field(description="Enter the reportId (scanId) created at the time of evaluating the application. application.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiReportRawDataDTOV2:
        """get_raw_data

        Use this method to retrieve the 'raw' data generated as a result of an application evaluation. 'raw' data includes: the components identified in the application, and the licenses and vulnerabilities associated with the identified components./n/nPermissions required: View IQ Elements

        :param application_public_id: Enter the applicationPublicId (assigned at the time of creating a new application.)  (required)
        :type application_public_id: str
        :param scan_id: Enter the reportId (scanId) created at the time of evaluating the application. application. (required)
        :type scan_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_raw_data_serialize(
            application_public_id=application_public_id,
            scan_id=scan_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiReportRawDataDTOV2",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_raw_data_with_http_info(
        self,
        application_public_id: Annotated[StrictStr, Field(description="Enter the applicationPublicId (assigned at the time of creating a new application.) ")],
        scan_id: Annotated[StrictStr, Field(description="Enter the reportId (scanId) created at the time of evaluating the application. application.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ApiReportRawDataDTOV2]:
        """get_raw_data

        Use this method to retrieve the 'raw' data generated as a result of an application evaluation. 'raw' data includes: the components identified in the application, and the licenses and vulnerabilities associated with the identified components./n/nPermissions required: View IQ Elements

        :param application_public_id: Enter the applicationPublicId (assigned at the time of creating a new application.)  (required)
        :type application_public_id: str
        :param scan_id: Enter the reportId (scanId) created at the time of evaluating the application. application. (required)
        :type scan_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_raw_data_serialize(
            application_public_id=application_public_id,
            scan_id=scan_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiReportRawDataDTOV2",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_raw_data_without_preload_content(
        self,
        application_public_id: Annotated[StrictStr, Field(description="Enter the applicationPublicId (assigned at the time of creating a new application.) ")],
        scan_id: Annotated[StrictStr, Field(description="Enter the reportId (scanId) created at the time of evaluating the application. application.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_raw_data

        Use this method to retrieve the 'raw' data generated as a result of an application evaluation. 'raw' data includes: the components identified in the application, and the licenses and vulnerabilities associated with the identified components./n/nPermissions required: View IQ Elements

        :param application_public_id: Enter the applicationPublicId (assigned at the time of creating a new application.)  (required)
        :type application_public_id: str
        :param scan_id: Enter the reportId (scanId) created at the time of evaluating the application. application. (required)
        :type scan_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_raw_data_serialize(
            application_public_id=application_public_id,
            scan_id=scan_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiReportRawDataDTOV2",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_raw_data_serialize(
        self,
        application_public_id,
        scan_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_public_id is not None:
            _path_params['applicationPublicId'] = application_public_id
        if scan_id is not None:
            _path_params['scanId'] = scan_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/applications/{applicationPublicId}/reports/{scanId}/raw',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


