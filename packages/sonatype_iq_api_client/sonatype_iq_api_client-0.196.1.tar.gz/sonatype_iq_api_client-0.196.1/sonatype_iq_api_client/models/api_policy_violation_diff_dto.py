# coding: utf-8

"""
    Sonatype Lifecycle Public REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.196.0-01
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from sonatype_iq_api_client.models.api_application_dto import ApiApplicationDTO
from sonatype_iq_api_client.models.api_application_evaluation_commit_dto import ApiApplicationEvaluationCommitDTO
from sonatype_iq_api_client.models.api_policy_violation_for_diff_dto import ApiPolicyViolationForDiffDTO
from typing import Optional, Set
from typing_extensions import Self

class ApiPolicyViolationDiffDTO(BaseModel):
    """
    ApiPolicyViolationDiffDTO
    """ # noqa: E501
    added_violations: Optional[List[ApiPolicyViolationForDiffDTO]] = Field(default=None, alias="addedViolations")
    application: Optional[ApiApplicationDTO] = None
    diff_time: Optional[datetime] = Field(default=None, alias="diffTime")
    from_commit: Optional[ApiApplicationEvaluationCommitDTO] = Field(default=None, alias="fromCommit")
    removed_violations: Optional[List[ApiPolicyViolationForDiffDTO]] = Field(default=None, alias="removedViolations")
    same_violations: Optional[List[ApiPolicyViolationForDiffDTO]] = Field(default=None, alias="sameViolations")
    to_commit: Optional[ApiApplicationEvaluationCommitDTO] = Field(default=None, alias="toCommit")
    __properties: ClassVar[List[str]] = ["addedViolations", "application", "diffTime", "fromCommit", "removedViolations", "sameViolations", "toCommit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiPolicyViolationDiffDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in added_violations (list)
        _items = []
        if self.added_violations:
            for _item_added_violations in self.added_violations:
                if _item_added_violations:
                    _items.append(_item_added_violations.to_dict())
            _dict['addedViolations'] = _items
        # override the default output from pydantic by calling `to_dict()` of application
        if self.application:
            _dict['application'] = self.application.to_dict()
        # override the default output from pydantic by calling `to_dict()` of from_commit
        if self.from_commit:
            _dict['fromCommit'] = self.from_commit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in removed_violations (list)
        _items = []
        if self.removed_violations:
            for _item_removed_violations in self.removed_violations:
                if _item_removed_violations:
                    _items.append(_item_removed_violations.to_dict())
            _dict['removedViolations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in same_violations (list)
        _items = []
        if self.same_violations:
            for _item_same_violations in self.same_violations:
                if _item_same_violations:
                    _items.append(_item_same_violations.to_dict())
            _dict['sameViolations'] = _items
        # override the default output from pydantic by calling `to_dict()` of to_commit
        if self.to_commit:
            _dict['toCommit'] = self.to_commit.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiPolicyViolationDiffDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addedViolations": [ApiPolicyViolationForDiffDTO.from_dict(_item) for _item in obj["addedViolations"]] if obj.get("addedViolations") is not None else None,
            "application": ApiApplicationDTO.from_dict(obj["application"]) if obj.get("application") is not None else None,
            "diffTime": obj.get("diffTime"),
            "fromCommit": ApiApplicationEvaluationCommitDTO.from_dict(obj["fromCommit"]) if obj.get("fromCommit") is not None else None,
            "removedViolations": [ApiPolicyViolationForDiffDTO.from_dict(_item) for _item in obj["removedViolations"]] if obj.get("removedViolations") is not None else None,
            "sameViolations": [ApiPolicyViolationForDiffDTO.from_dict(_item) for _item in obj["sameViolations"]] if obj.get("sameViolations") is not None else None,
            "toCommit": ApiApplicationEvaluationCommitDTO.from_dict(obj["toCommit"]) if obj.get("toCommit") is not None else None
        })
        return _obj


