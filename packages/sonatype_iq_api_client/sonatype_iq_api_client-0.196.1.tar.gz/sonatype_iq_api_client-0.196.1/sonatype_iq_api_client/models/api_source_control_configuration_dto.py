# coding: utf-8

"""
    Sonatype Lifecycle Public REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.196.0-01
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ApiSourceControlConfigurationDTO(BaseModel):
    """
    ApiSourceControlConfigurationDTO
    """ # noqa: E501
    clone_directory: Optional[StrictStr] = Field(default=None, alias="cloneDirectory")
    commit_email: Optional[StrictStr] = Field(default=None, alias="commitEmail")
    commit_username: Optional[StrictStr] = Field(default=None, alias="commitUsername")
    default_branch_monitoring_interval_hours: Optional[StrictInt] = Field(default=None, alias="defaultBranchMonitoringIntervalHours")
    default_branch_monitoring_start_time: Optional[StrictStr] = Field(default=None, alias="defaultBranchMonitoringStartTime")
    git_executable: Optional[StrictStr] = Field(default=None, alias="gitExecutable")
    git_implementation: Optional[StrictStr] = Field(default=None, alias="gitImplementation")
    git_timeout_seconds: Optional[StrictInt] = Field(default=None, alias="gitTimeoutSeconds")
    pr_comment_purge_window: Optional[StrictInt] = Field(default=None, alias="prCommentPurgeWindow")
    pr_event_purge_window: Optional[StrictInt] = Field(default=None, alias="prEventPurgeWindow")
    pull_request_monitoring_interval_seconds: Optional[StrictInt] = Field(default=None, alias="pullRequestMonitoringIntervalSeconds")
    use_username_in_repository_clone_url: Optional[StrictBool] = Field(default=None, alias="useUsernameInRepositoryCloneUrl")
    __properties: ClassVar[List[str]] = ["cloneDirectory", "commitEmail", "commitUsername", "defaultBranchMonitoringIntervalHours", "defaultBranchMonitoringStartTime", "gitExecutable", "gitImplementation", "gitTimeoutSeconds", "prCommentPurgeWindow", "prEventPurgeWindow", "pullRequestMonitoringIntervalSeconds", "useUsernameInRepositoryCloneUrl"]

    @field_validator('git_implementation')
    def git_implementation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['native', 'java']):
            raise ValueError("must be one of enum values ('native', 'java')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiSourceControlConfigurationDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiSourceControlConfigurationDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cloneDirectory": obj.get("cloneDirectory"),
            "commitEmail": obj.get("commitEmail"),
            "commitUsername": obj.get("commitUsername"),
            "defaultBranchMonitoringIntervalHours": obj.get("defaultBranchMonitoringIntervalHours"),
            "defaultBranchMonitoringStartTime": obj.get("defaultBranchMonitoringStartTime"),
            "gitExecutable": obj.get("gitExecutable"),
            "gitImplementation": obj.get("gitImplementation"),
            "gitTimeoutSeconds": obj.get("gitTimeoutSeconds"),
            "prCommentPurgeWindow": obj.get("prCommentPurgeWindow"),
            "prEventPurgeWindow": obj.get("prEventPurgeWindow"),
            "pullRequestMonitoringIntervalSeconds": obj.get("pullRequestMonitoringIntervalSeconds"),
            "useUsernameInRepositoryCloneUrl": obj.get("useUsernameInRepositoryCloneUrl")
        })
        return _obj


