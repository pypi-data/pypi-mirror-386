# coding: utf-8

"""
    Sonatype Lifecycle Public REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.196.0-01
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from sonatype_iq_api_client.models.api_firewall_component_dto_result import ApiFirewallComponentDTOResult

class TestApiFirewallComponentDTOResult(unittest.TestCase):
    """ApiFirewallComponentDTOResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApiFirewallComponentDTOResult:
        """Test ApiFirewallComponentDTOResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApiFirewallComponentDTOResult`
        """
        model = ApiFirewallComponentDTOResult()
        if include_optional:
            return ApiFirewallComponentDTOResult(
                page = 56,
                page_count = 56,
                page_size = 56,
                results = [
                    sonatype_iq_api_client.models.api_firewall_component_dto.ApiFirewallComponentDTO(
                        component_identifier = sonatype_iq_api_client.models.component_identifier.ComponentIdentifier(
                            coordinates = {
                                'key' : ''
                                }, 
                            format = '', ), 
                        date_cleared = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        display_name = '', 
                        hash = '', 
                        match_state = '', 
                        pathname = '', 
                        quarantine_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        quarantine_policy_violations = [
                            sonatype_iq_api_client.models.api_policy_violation_dtov2.ApiPolicyViolationDTOV2(
                                constraint_violations = [
                                    sonatype_iq_api_client.models.api_constraint_violation_dto.ApiConstraintViolationDTO(
                                        constraint_id = '', 
                                        constraint_name = '', 
                                        reasons = [
                                            sonatype_iq_api_client.models.api_constraint_violation_reason_dto.ApiConstraintViolationReasonDTO(
                                                reason = '', 
                                                reference = sonatype_iq_api_client.models.trigger_reference.TriggerReference(
                                                    type = 'SECURITY_VULNERABILITY_REFID', 
                                                    value = '', ), )
                                            ], )
                                    ], 
                                fix_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                legacy_violation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                open_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                policy_id = '', 
                                policy_name = '', 
                                policy_violation_id = '', 
                                threat_level = 56, 
                                waive_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], 
                        quarantined = True, 
                        repository = '', 
                        repository_id = '', )
                    ],
                total = 56
            )
        else:
            return ApiFirewallComponentDTOResult(
        )
        """

    def testApiFirewallComponentDTOResult(self):
        """Test ApiFirewallComponentDTOResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
