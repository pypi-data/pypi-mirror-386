# coding: utf-8

"""
    Sonatype Lifecycle Public REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.196.0-01
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from sonatype_iq_api_client.models.api_report_policy_violation_dtov2 import ApiReportPolicyViolationDTOV2

class TestApiReportPolicyViolationDTOV2(unittest.TestCase):
    """ApiReportPolicyViolationDTOV2 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApiReportPolicyViolationDTOV2:
        """Test ApiReportPolicyViolationDTOV2
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApiReportPolicyViolationDTOV2`
        """
        model = ApiReportPolicyViolationDTOV2()
        if include_optional:
            return ApiReportPolicyViolationDTOV2(
                constraints = [
                    sonatype_iq_api_client.models.api_report_constraint_violation_dtov2.ApiReportConstraintViolationDTOV2(
                        conditions = [
                            sonatype_iq_api_client.models.api_report_constraint_condition_dtov2.ApiReportConstraintConditionDTOV2(
                                condition_reason = '', 
                                condition_summary = '', )
                            ], 
                        constraint_id = '', 
                        constraint_name = '', )
                    ],
                fix_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                grandfathered = True,
                legacy_violation = True,
                legacy_violation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                open_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                policy_id = '',
                policy_name = '',
                policy_threat_category = '',
                policy_threat_level = 56,
                policy_violation_id = '',
                waive_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                waived = True,
                waived_with_auto_waiver = True
            )
        else:
            return ApiReportPolicyViolationDTOV2(
        )
        """

    def testApiReportPolicyViolationDTOV2(self):
        """Test ApiReportPolicyViolationDTOV2"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
