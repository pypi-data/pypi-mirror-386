# coding: utf-8

"""
    Sonatype Lifecycle Public REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.196.0-01
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from sonatype_iq_api_client.models.api_component_dtov2 import ApiComponentDTOV2
from sonatype_iq_api_client.models.api_component_details_request_dtov2 import ApiComponentDetailsRequestDTOV2
from sonatype_iq_api_client.models.api_component_details_result_dtov2 import ApiComponentDetailsResultDTOV2
from sonatype_iq_api_client.models.api_component_or_purl_identifier_dtov2 import ApiComponentOrPurlIdentifierDTOV2
from sonatype_iq_api_client.models.get_suggested_remediation_for_component200_response import GetSuggestedRemediationForComponent200Response

from sonatype_iq_api_client.api_client import ApiClient, RequestSerialized
from sonatype_iq_api_client.api_response import ApiResponse
from sonatype_iq_api_client.rest import RESTResponseType


class ComponentsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def delete_component_label(
        self,
        owner_type: Annotated[str, Field(strict=True, description="Possible values: application or organization")],
        internal_owner_id: Annotated[StrictStr, Field(description="Possible values : applicationId or organizationId")],
        component_hash: Annotated[StrictStr, Field(description="Enter the SHA1 hash of the component.")],
        label_name: Annotated[StrictStr, Field(description="Enter the label name to un-assign from this component.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """delete_component_label

        Use this method to un-assign a label from a component.

        :param owner_type: Possible values: application or organization (required)
        :type owner_type: str
        :param internal_owner_id: Possible values : applicationId or organizationId (required)
        :type internal_owner_id: str
        :param component_hash: Enter the SHA1 hash of the component. (required)
        :type component_hash: str
        :param label_name: Enter the label name to un-assign from this component. (required)
        :type label_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_component_label_serialize(
            owner_type=owner_type,
            internal_owner_id=internal_owner_id,
            component_hash=component_hash,
            label_name=label_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_component_label_with_http_info(
        self,
        owner_type: Annotated[str, Field(strict=True, description="Possible values: application or organization")],
        internal_owner_id: Annotated[StrictStr, Field(description="Possible values : applicationId or organizationId")],
        component_hash: Annotated[StrictStr, Field(description="Enter the SHA1 hash of the component.")],
        label_name: Annotated[StrictStr, Field(description="Enter the label name to un-assign from this component.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """delete_component_label

        Use this method to un-assign a label from a component.

        :param owner_type: Possible values: application or organization (required)
        :type owner_type: str
        :param internal_owner_id: Possible values : applicationId or organizationId (required)
        :type internal_owner_id: str
        :param component_hash: Enter the SHA1 hash of the component. (required)
        :type component_hash: str
        :param label_name: Enter the label name to un-assign from this component. (required)
        :type label_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_component_label_serialize(
            owner_type=owner_type,
            internal_owner_id=internal_owner_id,
            component_hash=component_hash,
            label_name=label_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_component_label_without_preload_content(
        self,
        owner_type: Annotated[str, Field(strict=True, description="Possible values: application or organization")],
        internal_owner_id: Annotated[StrictStr, Field(description="Possible values : applicationId or organizationId")],
        component_hash: Annotated[StrictStr, Field(description="Enter the SHA1 hash of the component.")],
        label_name: Annotated[StrictStr, Field(description="Enter the label name to un-assign from this component.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_component_label

        Use this method to un-assign a label from a component.

        :param owner_type: Possible values: application or organization (required)
        :type owner_type: str
        :param internal_owner_id: Possible values : applicationId or organizationId (required)
        :type internal_owner_id: str
        :param component_hash: Enter the SHA1 hash of the component. (required)
        :type component_hash: str
        :param label_name: Enter the label name to un-assign from this component. (required)
        :type label_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_component_label_serialize(
            owner_type=owner_type,
            internal_owner_id=internal_owner_id,
            component_hash=component_hash,
            label_name=label_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_component_label_serialize(
        self,
        owner_type,
        internal_owner_id,
        component_hash,
        label_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_type is not None:
            _path_params['ownerType'] = owner_type
        if internal_owner_id is not None:
            _path_params['internalOwnerId'] = internal_owner_id
        if component_hash is not None:
            _path_params['componentHash'] = component_hash
        if label_name is not None:
            _path_params['labelName'] = label_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/v2/components/{componentHash}/labels/{labelName}/{ownerType}s/{internalOwnerId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_component_details(
        self,
        api_component_details_request_dtov2: Annotated[ApiComponentDetailsRequestDTOV2, Field(description="You can retrieve component data in any one of the 3 ways via: 1. Component identifier 2. Package URL 3. Hash")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiComponentDetailsResultDTOV2:
        """get_component_details

        Use this method to retrieve data related to a component.

        :param api_component_details_request_dtov2: You can retrieve component data in any one of the 3 ways via: 1. Component identifier 2. Package URL 3. Hash (required)
        :type api_component_details_request_dtov2: ApiComponentDetailsRequestDTOV2
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_component_details_serialize(
            api_component_details_request_dtov2=api_component_details_request_dtov2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiComponentDetailsResultDTOV2",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_component_details_with_http_info(
        self,
        api_component_details_request_dtov2: Annotated[ApiComponentDetailsRequestDTOV2, Field(description="You can retrieve component data in any one of the 3 ways via: 1. Component identifier 2. Package URL 3. Hash")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ApiComponentDetailsResultDTOV2]:
        """get_component_details

        Use this method to retrieve data related to a component.

        :param api_component_details_request_dtov2: You can retrieve component data in any one of the 3 ways via: 1. Component identifier 2. Package URL 3. Hash (required)
        :type api_component_details_request_dtov2: ApiComponentDetailsRequestDTOV2
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_component_details_serialize(
            api_component_details_request_dtov2=api_component_details_request_dtov2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiComponentDetailsResultDTOV2",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_component_details_without_preload_content(
        self,
        api_component_details_request_dtov2: Annotated[ApiComponentDetailsRequestDTOV2, Field(description="You can retrieve component data in any one of the 3 ways via: 1. Component identifier 2. Package URL 3. Hash")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_component_details

        Use this method to retrieve data related to a component.

        :param api_component_details_request_dtov2: You can retrieve component data in any one of the 3 ways via: 1. Component identifier 2. Package URL 3. Hash (required)
        :type api_component_details_request_dtov2: ApiComponentDetailsRequestDTOV2
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_component_details_serialize(
            api_component_details_request_dtov2=api_component_details_request_dtov2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiComponentDetailsResultDTOV2",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_component_details_serialize(
        self,
        api_component_details_request_dtov2,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if api_component_details_request_dtov2 is not None:
            _body_params = api_component_details_request_dtov2


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v2/components/details',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_component_versions(
        self,
        api_component_or_purl_identifier_dtov2: Annotated[Optional[ApiComponentOrPurlIdentifierDTOV2], Field(description="Possible values: Component identifier or packageURL (pURL) identifier in the correct format. Use a-name for JavaScript components.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[str]:
        """get_component_versions

        Use this method to retrieve all known versions of a component.

        :param api_component_or_purl_identifier_dtov2: Possible values: Component identifier or packageURL (pURL) identifier in the correct format. Use a-name for JavaScript components.
        :type api_component_or_purl_identifier_dtov2: ApiComponentOrPurlIdentifierDTOV2
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_component_versions_serialize(
            api_component_or_purl_identifier_dtov2=api_component_or_purl_identifier_dtov2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_component_versions_with_http_info(
        self,
        api_component_or_purl_identifier_dtov2: Annotated[Optional[ApiComponentOrPurlIdentifierDTOV2], Field(description="Possible values: Component identifier or packageURL (pURL) identifier in the correct format. Use a-name for JavaScript components.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[str]]:
        """get_component_versions

        Use this method to retrieve all known versions of a component.

        :param api_component_or_purl_identifier_dtov2: Possible values: Component identifier or packageURL (pURL) identifier in the correct format. Use a-name for JavaScript components.
        :type api_component_or_purl_identifier_dtov2: ApiComponentOrPurlIdentifierDTOV2
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_component_versions_serialize(
            api_component_or_purl_identifier_dtov2=api_component_or_purl_identifier_dtov2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_component_versions_without_preload_content(
        self,
        api_component_or_purl_identifier_dtov2: Annotated[Optional[ApiComponentOrPurlIdentifierDTOV2], Field(description="Possible values: Component identifier or packageURL (pURL) identifier in the correct format. Use a-name for JavaScript components.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_component_versions

        Use this method to retrieve all known versions of a component.

        :param api_component_or_purl_identifier_dtov2: Possible values: Component identifier or packageURL (pURL) identifier in the correct format. Use a-name for JavaScript components.
        :type api_component_or_purl_identifier_dtov2: ApiComponentOrPurlIdentifierDTOV2
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_component_versions_serialize(
            api_component_or_purl_identifier_dtov2=api_component_or_purl_identifier_dtov2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_component_versions_serialize(
        self,
        api_component_or_purl_identifier_dtov2,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if api_component_or_purl_identifier_dtov2 is not None:
            _body_params = api_component_or_purl_identifier_dtov2


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v2/components/versions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_suggested_remediation_for_component(
        self,
        owner_type: Annotated[str, Field(strict=True, description="Possible values: application, organization, repository. ")],
        owner_id: Annotated[StrictStr, Field(description="Possible values: applicationId, organizationId or repositoryId.")],
        stage_id: Annotated[Optional[StrictStr], Field(description="Enter the stageId to obtain next-non-failing and next-non-failing-with-dependencies remediation types in the response. Possible values are develop, build, stage-release, release and operate.")] = None,
        identification_source: Annotated[Optional[StrictStr], Field(description="Enter the identification source if you want the remediation result based on third-party scan information (non-Sonatype). The identification source can be obtained from the Component Details Page in the UI.")] = None,
        scan_id: Annotated[Optional[StrictStr], Field(description="Enter the scanId (reportId) if you want the remediation result based on third-party scan information (non-Sonatype).")] = None,
        include_parent_remediation: Annotated[Optional[StrictBool], Field(description="Enter true if you want to include parent remediation for transitive dependency in the response based on your application policy scan.")] = None,
        api_component_dtov2: Optional[ApiComponentDTOV2] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSuggestedRemediationForComponent200Response:
        """get_suggested_remediation_for_component

        Use this method to obtain remediation suggestions for policy violations on a component basis. Remediations obtained from this method are same as those appearing on the Component Details Page in the UI.

        :param owner_type: Possible values: application, organization, repository.  (required)
        :type owner_type: str
        :param owner_id: Possible values: applicationId, organizationId or repositoryId. (required)
        :type owner_id: str
        :param stage_id: Enter the stageId to obtain next-non-failing and next-non-failing-with-dependencies remediation types in the response. Possible values are develop, build, stage-release, release and operate.
        :type stage_id: str
        :param identification_source: Enter the identification source if you want the remediation result based on third-party scan information (non-Sonatype). The identification source can be obtained from the Component Details Page in the UI.
        :type identification_source: str
        :param scan_id: Enter the scanId (reportId) if you want the remediation result based on third-party scan information (non-Sonatype).
        :type scan_id: str
        :param include_parent_remediation: Enter true if you want to include parent remediation for transitive dependency in the response based on your application policy scan.
        :type include_parent_remediation: bool
        :param api_component_dtov2:
        :type api_component_dtov2: ApiComponentDTOV2
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_suggested_remediation_for_component_serialize(
            owner_type=owner_type,
            owner_id=owner_id,
            stage_id=stage_id,
            identification_source=identification_source,
            scan_id=scan_id,
            include_parent_remediation=include_parent_remediation,
            api_component_dtov2=api_component_dtov2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSuggestedRemediationForComponent200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_suggested_remediation_for_component_with_http_info(
        self,
        owner_type: Annotated[str, Field(strict=True, description="Possible values: application, organization, repository. ")],
        owner_id: Annotated[StrictStr, Field(description="Possible values: applicationId, organizationId or repositoryId.")],
        stage_id: Annotated[Optional[StrictStr], Field(description="Enter the stageId to obtain next-non-failing and next-non-failing-with-dependencies remediation types in the response. Possible values are develop, build, stage-release, release and operate.")] = None,
        identification_source: Annotated[Optional[StrictStr], Field(description="Enter the identification source if you want the remediation result based on third-party scan information (non-Sonatype). The identification source can be obtained from the Component Details Page in the UI.")] = None,
        scan_id: Annotated[Optional[StrictStr], Field(description="Enter the scanId (reportId) if you want the remediation result based on third-party scan information (non-Sonatype).")] = None,
        include_parent_remediation: Annotated[Optional[StrictBool], Field(description="Enter true if you want to include parent remediation for transitive dependency in the response based on your application policy scan.")] = None,
        api_component_dtov2: Optional[ApiComponentDTOV2] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSuggestedRemediationForComponent200Response]:
        """get_suggested_remediation_for_component

        Use this method to obtain remediation suggestions for policy violations on a component basis. Remediations obtained from this method are same as those appearing on the Component Details Page in the UI.

        :param owner_type: Possible values: application, organization, repository.  (required)
        :type owner_type: str
        :param owner_id: Possible values: applicationId, organizationId or repositoryId. (required)
        :type owner_id: str
        :param stage_id: Enter the stageId to obtain next-non-failing and next-non-failing-with-dependencies remediation types in the response. Possible values are develop, build, stage-release, release and operate.
        :type stage_id: str
        :param identification_source: Enter the identification source if you want the remediation result based on third-party scan information (non-Sonatype). The identification source can be obtained from the Component Details Page in the UI.
        :type identification_source: str
        :param scan_id: Enter the scanId (reportId) if you want the remediation result based on third-party scan information (non-Sonatype).
        :type scan_id: str
        :param include_parent_remediation: Enter true if you want to include parent remediation for transitive dependency in the response based on your application policy scan.
        :type include_parent_remediation: bool
        :param api_component_dtov2:
        :type api_component_dtov2: ApiComponentDTOV2
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_suggested_remediation_for_component_serialize(
            owner_type=owner_type,
            owner_id=owner_id,
            stage_id=stage_id,
            identification_source=identification_source,
            scan_id=scan_id,
            include_parent_remediation=include_parent_remediation,
            api_component_dtov2=api_component_dtov2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSuggestedRemediationForComponent200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_suggested_remediation_for_component_without_preload_content(
        self,
        owner_type: Annotated[str, Field(strict=True, description="Possible values: application, organization, repository. ")],
        owner_id: Annotated[StrictStr, Field(description="Possible values: applicationId, organizationId or repositoryId.")],
        stage_id: Annotated[Optional[StrictStr], Field(description="Enter the stageId to obtain next-non-failing and next-non-failing-with-dependencies remediation types in the response. Possible values are develop, build, stage-release, release and operate.")] = None,
        identification_source: Annotated[Optional[StrictStr], Field(description="Enter the identification source if you want the remediation result based on third-party scan information (non-Sonatype). The identification source can be obtained from the Component Details Page in the UI.")] = None,
        scan_id: Annotated[Optional[StrictStr], Field(description="Enter the scanId (reportId) if you want the remediation result based on third-party scan information (non-Sonatype).")] = None,
        include_parent_remediation: Annotated[Optional[StrictBool], Field(description="Enter true if you want to include parent remediation for transitive dependency in the response based on your application policy scan.")] = None,
        api_component_dtov2: Optional[ApiComponentDTOV2] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_suggested_remediation_for_component

        Use this method to obtain remediation suggestions for policy violations on a component basis. Remediations obtained from this method are same as those appearing on the Component Details Page in the UI.

        :param owner_type: Possible values: application, organization, repository.  (required)
        :type owner_type: str
        :param owner_id: Possible values: applicationId, organizationId or repositoryId. (required)
        :type owner_id: str
        :param stage_id: Enter the stageId to obtain next-non-failing and next-non-failing-with-dependencies remediation types in the response. Possible values are develop, build, stage-release, release and operate.
        :type stage_id: str
        :param identification_source: Enter the identification source if you want the remediation result based on third-party scan information (non-Sonatype). The identification source can be obtained from the Component Details Page in the UI.
        :type identification_source: str
        :param scan_id: Enter the scanId (reportId) if you want the remediation result based on third-party scan information (non-Sonatype).
        :type scan_id: str
        :param include_parent_remediation: Enter true if you want to include parent remediation for transitive dependency in the response based on your application policy scan.
        :type include_parent_remediation: bool
        :param api_component_dtov2:
        :type api_component_dtov2: ApiComponentDTOV2
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_suggested_remediation_for_component_serialize(
            owner_type=owner_type,
            owner_id=owner_id,
            stage_id=stage_id,
            identification_source=identification_source,
            scan_id=scan_id,
            include_parent_remediation=include_parent_remediation,
            api_component_dtov2=api_component_dtov2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSuggestedRemediationForComponent200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_suggested_remediation_for_component_serialize(
        self,
        owner_type,
        owner_id,
        stage_id,
        identification_source,
        scan_id,
        include_parent_remediation,
        api_component_dtov2,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_type is not None:
            _path_params['ownerType'] = owner_type
        if owner_id is not None:
            _path_params['ownerId'] = owner_id
        # process the query parameters
        if stage_id is not None:
            
            _query_params.append(('stageId', stage_id))
            
        if identification_source is not None:
            
            _query_params.append(('identificationSource', identification_source))
            
        if scan_id is not None:
            
            _query_params.append(('scanId', scan_id))
            
        if include_parent_remediation is not None:
            
            _query_params.append(('includeParentRemediation', include_parent_remediation))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if api_component_dtov2 is not None:
            _body_params = api_component_dtov2


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v2/components/remediation/{ownerType}/{ownerId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def set_component_label(
        self,
        owner_type: Annotated[str, Field(strict=True, description="Possible values: application or organization")],
        internal_owner_id: Annotated[StrictStr, Field(description="Possible values : applicationId or organizationId")],
        component_hash: Annotated[StrictStr, Field(description="Enter the SHA1 hash of the component.")],
        label_name: Annotated[StrictStr, Field(description="Enter the label name to assign to this component.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """set_component_label

        Use this method to assign an existing label to a component.

        :param owner_type: Possible values: application or organization (required)
        :type owner_type: str
        :param internal_owner_id: Possible values : applicationId or organizationId (required)
        :type internal_owner_id: str
        :param component_hash: Enter the SHA1 hash of the component. (required)
        :type component_hash: str
        :param label_name: Enter the label name to assign to this component. (required)
        :type label_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._set_component_label_serialize(
            owner_type=owner_type,
            internal_owner_id=internal_owner_id,
            component_hash=component_hash,
            label_name=label_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def set_component_label_with_http_info(
        self,
        owner_type: Annotated[str, Field(strict=True, description="Possible values: application or organization")],
        internal_owner_id: Annotated[StrictStr, Field(description="Possible values : applicationId or organizationId")],
        component_hash: Annotated[StrictStr, Field(description="Enter the SHA1 hash of the component.")],
        label_name: Annotated[StrictStr, Field(description="Enter the label name to assign to this component.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """set_component_label

        Use this method to assign an existing label to a component.

        :param owner_type: Possible values: application or organization (required)
        :type owner_type: str
        :param internal_owner_id: Possible values : applicationId or organizationId (required)
        :type internal_owner_id: str
        :param component_hash: Enter the SHA1 hash of the component. (required)
        :type component_hash: str
        :param label_name: Enter the label name to assign to this component. (required)
        :type label_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._set_component_label_serialize(
            owner_type=owner_type,
            internal_owner_id=internal_owner_id,
            component_hash=component_hash,
            label_name=label_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def set_component_label_without_preload_content(
        self,
        owner_type: Annotated[str, Field(strict=True, description="Possible values: application or organization")],
        internal_owner_id: Annotated[StrictStr, Field(description="Possible values : applicationId or organizationId")],
        component_hash: Annotated[StrictStr, Field(description="Enter the SHA1 hash of the component.")],
        label_name: Annotated[StrictStr, Field(description="Enter the label name to assign to this component.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """set_component_label

        Use this method to assign an existing label to a component.

        :param owner_type: Possible values: application or organization (required)
        :type owner_type: str
        :param internal_owner_id: Possible values : applicationId or organizationId (required)
        :type internal_owner_id: str
        :param component_hash: Enter the SHA1 hash of the component. (required)
        :type component_hash: str
        :param label_name: Enter the label name to assign to this component. (required)
        :type label_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._set_component_label_serialize(
            owner_type=owner_type,
            internal_owner_id=internal_owner_id,
            component_hash=component_hash,
            label_name=label_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _set_component_label_serialize(
        self,
        owner_type,
        internal_owner_id,
        component_hash,
        label_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_type is not None:
            _path_params['ownerType'] = owner_type
        if internal_owner_id is not None:
            _path_params['internalOwnerId'] = internal_owner_id
        if component_hash is not None:
            _path_params['componentHash'] = component_hash
        if label_name is not None:
            _path_params['labelName'] = label_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v2/components/{componentHash}/labels/{labelName}/{ownerType}s/{internalOwnerId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


