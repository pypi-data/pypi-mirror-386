# coding: utf-8

"""
    Sonatype Lifecycle Public REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.196.0-01
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from sonatype_iq_api_client.models.api_auto_policy_waiver_exclusion_request_dto import ApiAutoPolicyWaiverExclusionRequestDTO
from sonatype_iq_api_client.models.api_auto_policy_waiver_exclusion_response_dto import ApiAutoPolicyWaiverExclusionResponseDTO

from sonatype_iq_api_client.api_client import ApiClient, RequestSerialized
from sonatype_iq_api_client.api_response import ApiResponse
from sonatype_iq_api_client.rest import RESTResponseType


class AutoPolicyWaiverExclusionsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def add_auto_policy_waive_exclusion(
        self,
        owner_type: Annotated[str, Field(strict=True, description="Enter the ownerType to specify which resource type owns the auto waiver you want to apply a exclusion to. Possible values are application, organization.")],
        owner_id: Annotated[StrictStr, Field(description="Enter the corresponding id for the ownerType specified above.")],
        api_auto_policy_waiver_exclusion_request_dto: Annotated[ApiAutoPolicyWaiverExclusionRequestDTO, Field(description="The request JSON can include the fields<ol><li>applicationPublicId</li><li>ownerId - ID of the application or organization which will own the auto waiver exclusion</li><li>policyViolationId - ID of the policy violation which the exclusion will apply to</li><li>autoPolicyWaiverId - ID of the auto waiver you want to apply a exclusion to</li><li>scanId - ID of the scan which the violation being waived appeared in</li><li>matchStrategy (enumeration, required) can have values EXACT_COMPONENT, ALL_VERSIONS, POLICY_VIOLATION. </li></ol>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiAutoPolicyWaiverExclusionResponseDTO:
        """add_auto_policy_waive_exclusion

        Use this method to create an auto policy waiver exclusion for a specified auto policy waiver.  Permissions required: Waive Policy Violations

        :param owner_type: Enter the ownerType to specify which resource type owns the auto waiver you want to apply a exclusion to. Possible values are application, organization. (required)
        :type owner_type: str
        :param owner_id: Enter the corresponding id for the ownerType specified above. (required)
        :type owner_id: str
        :param api_auto_policy_waiver_exclusion_request_dto: The request JSON can include the fields<ol><li>applicationPublicId</li><li>ownerId - ID of the application or organization which will own the auto waiver exclusion</li><li>policyViolationId - ID of the policy violation which the exclusion will apply to</li><li>autoPolicyWaiverId - ID of the auto waiver you want to apply a exclusion to</li><li>scanId - ID of the scan which the violation being waived appeared in</li><li>matchStrategy (enumeration, required) can have values EXACT_COMPONENT, ALL_VERSIONS, POLICY_VIOLATION. </li></ol> (required)
        :type api_auto_policy_waiver_exclusion_request_dto: ApiAutoPolicyWaiverExclusionRequestDTO
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_auto_policy_waive_exclusion_serialize(
            owner_type=owner_type,
            owner_id=owner_id,
            api_auto_policy_waiver_exclusion_request_dto=api_auto_policy_waiver_exclusion_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiAutoPolicyWaiverExclusionResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_auto_policy_waive_exclusion_with_http_info(
        self,
        owner_type: Annotated[str, Field(strict=True, description="Enter the ownerType to specify which resource type owns the auto waiver you want to apply a exclusion to. Possible values are application, organization.")],
        owner_id: Annotated[StrictStr, Field(description="Enter the corresponding id for the ownerType specified above.")],
        api_auto_policy_waiver_exclusion_request_dto: Annotated[ApiAutoPolicyWaiverExclusionRequestDTO, Field(description="The request JSON can include the fields<ol><li>applicationPublicId</li><li>ownerId - ID of the application or organization which will own the auto waiver exclusion</li><li>policyViolationId - ID of the policy violation which the exclusion will apply to</li><li>autoPolicyWaiverId - ID of the auto waiver you want to apply a exclusion to</li><li>scanId - ID of the scan which the violation being waived appeared in</li><li>matchStrategy (enumeration, required) can have values EXACT_COMPONENT, ALL_VERSIONS, POLICY_VIOLATION. </li></ol>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ApiAutoPolicyWaiverExclusionResponseDTO]:
        """add_auto_policy_waive_exclusion

        Use this method to create an auto policy waiver exclusion for a specified auto policy waiver.  Permissions required: Waive Policy Violations

        :param owner_type: Enter the ownerType to specify which resource type owns the auto waiver you want to apply a exclusion to. Possible values are application, organization. (required)
        :type owner_type: str
        :param owner_id: Enter the corresponding id for the ownerType specified above. (required)
        :type owner_id: str
        :param api_auto_policy_waiver_exclusion_request_dto: The request JSON can include the fields<ol><li>applicationPublicId</li><li>ownerId - ID of the application or organization which will own the auto waiver exclusion</li><li>policyViolationId - ID of the policy violation which the exclusion will apply to</li><li>autoPolicyWaiverId - ID of the auto waiver you want to apply a exclusion to</li><li>scanId - ID of the scan which the violation being waived appeared in</li><li>matchStrategy (enumeration, required) can have values EXACT_COMPONENT, ALL_VERSIONS, POLICY_VIOLATION. </li></ol> (required)
        :type api_auto_policy_waiver_exclusion_request_dto: ApiAutoPolicyWaiverExclusionRequestDTO
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_auto_policy_waive_exclusion_serialize(
            owner_type=owner_type,
            owner_id=owner_id,
            api_auto_policy_waiver_exclusion_request_dto=api_auto_policy_waiver_exclusion_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiAutoPolicyWaiverExclusionResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_auto_policy_waive_exclusion_without_preload_content(
        self,
        owner_type: Annotated[str, Field(strict=True, description="Enter the ownerType to specify which resource type owns the auto waiver you want to apply a exclusion to. Possible values are application, organization.")],
        owner_id: Annotated[StrictStr, Field(description="Enter the corresponding id for the ownerType specified above.")],
        api_auto_policy_waiver_exclusion_request_dto: Annotated[ApiAutoPolicyWaiverExclusionRequestDTO, Field(description="The request JSON can include the fields<ol><li>applicationPublicId</li><li>ownerId - ID of the application or organization which will own the auto waiver exclusion</li><li>policyViolationId - ID of the policy violation which the exclusion will apply to</li><li>autoPolicyWaiverId - ID of the auto waiver you want to apply a exclusion to</li><li>scanId - ID of the scan which the violation being waived appeared in</li><li>matchStrategy (enumeration, required) can have values EXACT_COMPONENT, ALL_VERSIONS, POLICY_VIOLATION. </li></ol>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """add_auto_policy_waive_exclusion

        Use this method to create an auto policy waiver exclusion for a specified auto policy waiver.  Permissions required: Waive Policy Violations

        :param owner_type: Enter the ownerType to specify which resource type owns the auto waiver you want to apply a exclusion to. Possible values are application, organization. (required)
        :type owner_type: str
        :param owner_id: Enter the corresponding id for the ownerType specified above. (required)
        :type owner_id: str
        :param api_auto_policy_waiver_exclusion_request_dto: The request JSON can include the fields<ol><li>applicationPublicId</li><li>ownerId - ID of the application or organization which will own the auto waiver exclusion</li><li>policyViolationId - ID of the policy violation which the exclusion will apply to</li><li>autoPolicyWaiverId - ID of the auto waiver you want to apply a exclusion to</li><li>scanId - ID of the scan which the violation being waived appeared in</li><li>matchStrategy (enumeration, required) can have values EXACT_COMPONENT, ALL_VERSIONS, POLICY_VIOLATION. </li></ol> (required)
        :type api_auto_policy_waiver_exclusion_request_dto: ApiAutoPolicyWaiverExclusionRequestDTO
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_auto_policy_waive_exclusion_serialize(
            owner_type=owner_type,
            owner_id=owner_id,
            api_auto_policy_waiver_exclusion_request_dto=api_auto_policy_waiver_exclusion_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiAutoPolicyWaiverExclusionResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_auto_policy_waive_exclusion_serialize(
        self,
        owner_type,
        owner_id,
        api_auto_policy_waiver_exclusion_request_dto,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_type is not None:
            _path_params['ownerType'] = owner_type
        if owner_id is not None:
            _path_params['ownerId'] = owner_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if api_auto_policy_waiver_exclusion_request_dto is not None:
            _body_params = api_auto_policy_waiver_exclusion_request_dto


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v2/autoPolicyWaiverExclusions/{ownerType}/{ownerId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_auto_policy_waiver_exclusion(
        self,
        owner_type: Annotated[str, Field(strict=True, description="Enter the ownerType to specify the scope. A waiver exclusion corresponding to the autoPolicyWaiverExclusionId provided and within the scope specified will be deleted.")],
        owner_id: Annotated[StrictStr, Field(description="Enter the corresponding id for the ownerType specified above.")],
        auto_policy_waiver_id: Annotated[StrictStr, Field(description="Enter the relevant Auto Policy Waiver ID.")],
        auto_policy_waiver_exclusion_id: Annotated[StrictStr, Field(description="Enter the autoPolicyWaiverId to be deleted")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """delete_auto_policy_waiver_exclusion

        Use this method to delete an auto policy waiver exclusion, specified by the autoPolicyWaiverExclusionId.  Permissions required: Waive Policy Violations

        :param owner_type: Enter the ownerType to specify the scope. A waiver exclusion corresponding to the autoPolicyWaiverExclusionId provided and within the scope specified will be deleted. (required)
        :type owner_type: str
        :param owner_id: Enter the corresponding id for the ownerType specified above. (required)
        :type owner_id: str
        :param auto_policy_waiver_id: Enter the relevant Auto Policy Waiver ID. (required)
        :type auto_policy_waiver_id: str
        :param auto_policy_waiver_exclusion_id: Enter the autoPolicyWaiverId to be deleted (required)
        :type auto_policy_waiver_exclusion_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_auto_policy_waiver_exclusion_serialize(
            owner_type=owner_type,
            owner_id=owner_id,
            auto_policy_waiver_id=auto_policy_waiver_id,
            auto_policy_waiver_exclusion_id=auto_policy_waiver_exclusion_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_auto_policy_waiver_exclusion_with_http_info(
        self,
        owner_type: Annotated[str, Field(strict=True, description="Enter the ownerType to specify the scope. A waiver exclusion corresponding to the autoPolicyWaiverExclusionId provided and within the scope specified will be deleted.")],
        owner_id: Annotated[StrictStr, Field(description="Enter the corresponding id for the ownerType specified above.")],
        auto_policy_waiver_id: Annotated[StrictStr, Field(description="Enter the relevant Auto Policy Waiver ID.")],
        auto_policy_waiver_exclusion_id: Annotated[StrictStr, Field(description="Enter the autoPolicyWaiverId to be deleted")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """delete_auto_policy_waiver_exclusion

        Use this method to delete an auto policy waiver exclusion, specified by the autoPolicyWaiverExclusionId.  Permissions required: Waive Policy Violations

        :param owner_type: Enter the ownerType to specify the scope. A waiver exclusion corresponding to the autoPolicyWaiverExclusionId provided and within the scope specified will be deleted. (required)
        :type owner_type: str
        :param owner_id: Enter the corresponding id for the ownerType specified above. (required)
        :type owner_id: str
        :param auto_policy_waiver_id: Enter the relevant Auto Policy Waiver ID. (required)
        :type auto_policy_waiver_id: str
        :param auto_policy_waiver_exclusion_id: Enter the autoPolicyWaiverId to be deleted (required)
        :type auto_policy_waiver_exclusion_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_auto_policy_waiver_exclusion_serialize(
            owner_type=owner_type,
            owner_id=owner_id,
            auto_policy_waiver_id=auto_policy_waiver_id,
            auto_policy_waiver_exclusion_id=auto_policy_waiver_exclusion_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_auto_policy_waiver_exclusion_without_preload_content(
        self,
        owner_type: Annotated[str, Field(strict=True, description="Enter the ownerType to specify the scope. A waiver exclusion corresponding to the autoPolicyWaiverExclusionId provided and within the scope specified will be deleted.")],
        owner_id: Annotated[StrictStr, Field(description="Enter the corresponding id for the ownerType specified above.")],
        auto_policy_waiver_id: Annotated[StrictStr, Field(description="Enter the relevant Auto Policy Waiver ID.")],
        auto_policy_waiver_exclusion_id: Annotated[StrictStr, Field(description="Enter the autoPolicyWaiverId to be deleted")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_auto_policy_waiver_exclusion

        Use this method to delete an auto policy waiver exclusion, specified by the autoPolicyWaiverExclusionId.  Permissions required: Waive Policy Violations

        :param owner_type: Enter the ownerType to specify the scope. A waiver exclusion corresponding to the autoPolicyWaiverExclusionId provided and within the scope specified will be deleted. (required)
        :type owner_type: str
        :param owner_id: Enter the corresponding id for the ownerType specified above. (required)
        :type owner_id: str
        :param auto_policy_waiver_id: Enter the relevant Auto Policy Waiver ID. (required)
        :type auto_policy_waiver_id: str
        :param auto_policy_waiver_exclusion_id: Enter the autoPolicyWaiverId to be deleted (required)
        :type auto_policy_waiver_exclusion_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_auto_policy_waiver_exclusion_serialize(
            owner_type=owner_type,
            owner_id=owner_id,
            auto_policy_waiver_id=auto_policy_waiver_id,
            auto_policy_waiver_exclusion_id=auto_policy_waiver_exclusion_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_auto_policy_waiver_exclusion_serialize(
        self,
        owner_type,
        owner_id,
        auto_policy_waiver_id,
        auto_policy_waiver_exclusion_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_type is not None:
            _path_params['ownerType'] = owner_type
        if owner_id is not None:
            _path_params['ownerId'] = owner_id
        if auto_policy_waiver_id is not None:
            _path_params['autoPolicyWaiverId'] = auto_policy_waiver_id
        if auto_policy_waiver_exclusion_id is not None:
            _path_params['autoPolicyWaiverExclusionId'] = auto_policy_waiver_exclusion_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/v2/autoPolicyWaiverExclusions/{ownerType}/{ownerId}/{autoPolicyWaiverId}/{autoPolicyWaiverExclusionId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_auto_policy_waiver_exclusions(
        self,
        owner_type: Annotated[str, Field(strict=True, description="Enter the owner type.")],
        owner_id: Annotated[StrictStr, Field(description="Enter the owner id.")],
        auto_policy_waiver_id: Annotated[StrictStr, Field(description="Enter the id of the automatic policy waiver.")],
        page: Annotated[Optional[StrictInt], Field(description="Enter the page.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Enter the page size.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ApiAutoPolicyWaiverExclusionResponseDTO]:
        """get_auto_policy_waiver_exclusions

        Use this method to retrieve auto policy waiver exclusions for the given owner and policy waiver.  Permissions required: View IQ Elements

        :param owner_type: Enter the owner type. (required)
        :type owner_type: str
        :param owner_id: Enter the owner id. (required)
        :type owner_id: str
        :param auto_policy_waiver_id: Enter the id of the automatic policy waiver. (required)
        :type auto_policy_waiver_id: str
        :param page: Enter the page.
        :type page: int
        :param page_size: Enter the page size.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_auto_policy_waiver_exclusions_serialize(
            owner_type=owner_type,
            owner_id=owner_id,
            auto_policy_waiver_id=auto_policy_waiver_id,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ApiAutoPolicyWaiverExclusionResponseDTO]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_auto_policy_waiver_exclusions_with_http_info(
        self,
        owner_type: Annotated[str, Field(strict=True, description="Enter the owner type.")],
        owner_id: Annotated[StrictStr, Field(description="Enter the owner id.")],
        auto_policy_waiver_id: Annotated[StrictStr, Field(description="Enter the id of the automatic policy waiver.")],
        page: Annotated[Optional[StrictInt], Field(description="Enter the page.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Enter the page size.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ApiAutoPolicyWaiverExclusionResponseDTO]]:
        """get_auto_policy_waiver_exclusions

        Use this method to retrieve auto policy waiver exclusions for the given owner and policy waiver.  Permissions required: View IQ Elements

        :param owner_type: Enter the owner type. (required)
        :type owner_type: str
        :param owner_id: Enter the owner id. (required)
        :type owner_id: str
        :param auto_policy_waiver_id: Enter the id of the automatic policy waiver. (required)
        :type auto_policy_waiver_id: str
        :param page: Enter the page.
        :type page: int
        :param page_size: Enter the page size.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_auto_policy_waiver_exclusions_serialize(
            owner_type=owner_type,
            owner_id=owner_id,
            auto_policy_waiver_id=auto_policy_waiver_id,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ApiAutoPolicyWaiverExclusionResponseDTO]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_auto_policy_waiver_exclusions_without_preload_content(
        self,
        owner_type: Annotated[str, Field(strict=True, description="Enter the owner type.")],
        owner_id: Annotated[StrictStr, Field(description="Enter the owner id.")],
        auto_policy_waiver_id: Annotated[StrictStr, Field(description="Enter the id of the automatic policy waiver.")],
        page: Annotated[Optional[StrictInt], Field(description="Enter the page.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Enter the page size.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_auto_policy_waiver_exclusions

        Use this method to retrieve auto policy waiver exclusions for the given owner and policy waiver.  Permissions required: View IQ Elements

        :param owner_type: Enter the owner type. (required)
        :type owner_type: str
        :param owner_id: Enter the owner id. (required)
        :type owner_id: str
        :param auto_policy_waiver_id: Enter the id of the automatic policy waiver. (required)
        :type auto_policy_waiver_id: str
        :param page: Enter the page.
        :type page: int
        :param page_size: Enter the page size.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_auto_policy_waiver_exclusions_serialize(
            owner_type=owner_type,
            owner_id=owner_id,
            auto_policy_waiver_id=auto_policy_waiver_id,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ApiAutoPolicyWaiverExclusionResponseDTO]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_auto_policy_waiver_exclusions_serialize(
        self,
        owner_type,
        owner_id,
        auto_policy_waiver_id,
        page,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_type is not None:
            _path_params['ownerType'] = owner_type
        if owner_id is not None:
            _path_params['ownerId'] = owner_id
        if auto_policy_waiver_id is not None:
            _path_params['autoPolicyWaiverId'] = auto_policy_waiver_id
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/autoPolicyWaiverExclusions/{ownerType}/{ownerId}/{autoPolicyWaiverId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


