# coding: utf-8

"""
    Sonatype Lifecycle Public REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.196.0-01
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sonatype_iq_api_client.models.api_constraint_fact_dto import ApiConstraintFactDTO
from sonatype_iq_api_client.models.api_stale_evaluations_dto import ApiStaleEvaluationsDTO
from typing import Optional, Set
from typing_extensions import Self

class ApiStaleWaiverDTO(BaseModel):
    """
    ApiStaleWaiverDTO
    """ # noqa: E501
    comment: Optional[StrictStr] = None
    constraint_facts: Optional[List[ApiConstraintFactDTO]] = Field(default=None, alias="constraintFacts")
    create_time: Optional[datetime] = Field(default=None, alias="createTime")
    creator_id: Optional[StrictStr] = Field(default=None, alias="creatorId")
    creator_name: Optional[StrictStr] = Field(default=None, alias="creatorName")
    expiry_time: Optional[datetime] = Field(default=None, alias="expiryTime")
    policy_id: Optional[StrictStr] = Field(default=None, alias="policyId")
    policy_name: Optional[StrictStr] = Field(default=None, alias="policyName")
    policy_waiver_reason_id: Optional[StrictStr] = Field(default=None, alias="policyWaiverReasonId")
    reason_text: Optional[StrictStr] = Field(default=None, alias="reasonText")
    scope_owner_id: Optional[StrictStr] = Field(default=None, alias="scopeOwnerId")
    scope_owner_name: Optional[StrictStr] = Field(default=None, alias="scopeOwnerName")
    scope_owner_type: Optional[StrictStr] = Field(default=None, alias="scopeOwnerType")
    stale_evaluations: Optional[ApiStaleEvaluationsDTO] = Field(default=None, alias="staleEvaluations")
    waiver_id: Optional[StrictStr] = Field(default=None, alias="waiverId")
    __properties: ClassVar[List[str]] = ["comment", "constraintFacts", "createTime", "creatorId", "creatorName", "expiryTime", "policyId", "policyName", "policyWaiverReasonId", "reasonText", "scopeOwnerId", "scopeOwnerName", "scopeOwnerType", "staleEvaluations", "waiverId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiStaleWaiverDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in constraint_facts (list)
        _items = []
        if self.constraint_facts:
            for _item_constraint_facts in self.constraint_facts:
                if _item_constraint_facts:
                    _items.append(_item_constraint_facts.to_dict())
            _dict['constraintFacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of stale_evaluations
        if self.stale_evaluations:
            _dict['staleEvaluations'] = self.stale_evaluations.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiStaleWaiverDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comment": obj.get("comment"),
            "constraintFacts": [ApiConstraintFactDTO.from_dict(_item) for _item in obj["constraintFacts"]] if obj.get("constraintFacts") is not None else None,
            "createTime": obj.get("createTime"),
            "creatorId": obj.get("creatorId"),
            "creatorName": obj.get("creatorName"),
            "expiryTime": obj.get("expiryTime"),
            "policyId": obj.get("policyId"),
            "policyName": obj.get("policyName"),
            "policyWaiverReasonId": obj.get("policyWaiverReasonId"),
            "reasonText": obj.get("reasonText"),
            "scopeOwnerId": obj.get("scopeOwnerId"),
            "scopeOwnerName": obj.get("scopeOwnerName"),
            "scopeOwnerType": obj.get("scopeOwnerType"),
            "staleEvaluations": ApiStaleEvaluationsDTO.from_dict(obj["staleEvaluations"]) if obj.get("staleEvaluations") is not None else None,
            "waiverId": obj.get("waiverId")
        })
        return _obj


