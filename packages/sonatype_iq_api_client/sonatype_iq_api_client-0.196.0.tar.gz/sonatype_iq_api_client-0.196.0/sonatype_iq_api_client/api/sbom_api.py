# coding: utf-8

"""
    Sonatype Lifecycle Public REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.196.0-01
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictBytes, StrictInt, StrictStr, field_validator
from typing import List, Optional, Tuple, Union
from typing_extensions import Annotated
from sonatype_iq_api_client.models.api_third_party_scan_ticket_dto import ApiThirdPartyScanTicketDTO
from sonatype_iq_api_client.models.component_locator import ComponentLocator
from sonatype_iq_api_client.models.sbom_vulnerability_analysis_request import SbomVulnerabilityAnalysisRequest

from sonatype_iq_api_client.api_client import ApiClient, RequestSerialized
from sonatype_iq_api_client.api_response import ApiResponse
from sonatype_iq_api_client.rest import RESTResponseType


class SBOMApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def delete_sbom_version(
        self,
        application_id: Annotated[StrictStr, Field(description="The internal id of the application")],
        version: Annotated[StrictStr, Field(description="URL Encoded version value of the sbom to be deleted")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete sbom version

        Deletes a specific sbom version including it's original contents and updates

        :param application_id: The internal id of the application (required)
        :type application_id: str
        :param version: URL Encoded version value of the sbom to be deleted (required)
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_sbom_version_serialize(
            application_id=application_id,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_sbom_version_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The internal id of the application")],
        version: Annotated[StrictStr, Field(description="URL Encoded version value of the sbom to be deleted")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete sbom version

        Deletes a specific sbom version including it's original contents and updates

        :param application_id: The internal id of the application (required)
        :type application_id: str
        :param version: URL Encoded version value of the sbom to be deleted (required)
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_sbom_version_serialize(
            application_id=application_id,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_sbom_version_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The internal id of the application")],
        version: Annotated[StrictStr, Field(description="URL Encoded version value of the sbom to be deleted")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete sbom version

        Deletes a specific sbom version including it's original contents and updates

        :param application_id: The internal id of the application (required)
        :type application_id: str
        :param version: URL Encoded version value of the sbom to be deleted (required)
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_sbom_version_serialize(
            application_id=application_id,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_sbom_version_serialize(
        self,
        application_id,
        version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['applicationId'] = application_id
        if version is not None:
            _path_params['version'] = version
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/v2/sbom/applications/{applicationId}/versions/{version}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_vulnerability_analysis(
        self,
        application_id: Annotated[StrictStr, Field(description="The internal id of the application")],
        version: Annotated[StrictStr, Field(description="The version for a specific SBOM where the vulnerability is present")],
        ref_id: Annotated[StrictStr, Field(description="The vulnerability id of a vulnerability")],
        component_locator: Annotated[ComponentLocator, Field(description="Hash or packageUrl to identify the component")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Deletes a Vulnerability analysis for a given component.

        Deletes a Vulnerability analysis for a given component.

        :param application_id: The internal id of the application (required)
        :type application_id: str
        :param version: The version for a specific SBOM where the vulnerability is present (required)
        :type version: str
        :param ref_id: The vulnerability id of a vulnerability (required)
        :type ref_id: str
        :param component_locator: Hash or packageUrl to identify the component (required)
        :type component_locator: ComponentLocator
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_vulnerability_analysis_serialize(
            application_id=application_id,
            version=version,
            ref_id=ref_id,
            component_locator=component_locator,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_vulnerability_analysis_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The internal id of the application")],
        version: Annotated[StrictStr, Field(description="The version for a specific SBOM where the vulnerability is present")],
        ref_id: Annotated[StrictStr, Field(description="The vulnerability id of a vulnerability")],
        component_locator: Annotated[ComponentLocator, Field(description="Hash or packageUrl to identify the component")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Deletes a Vulnerability analysis for a given component.

        Deletes a Vulnerability analysis for a given component.

        :param application_id: The internal id of the application (required)
        :type application_id: str
        :param version: The version for a specific SBOM where the vulnerability is present (required)
        :type version: str
        :param ref_id: The vulnerability id of a vulnerability (required)
        :type ref_id: str
        :param component_locator: Hash or packageUrl to identify the component (required)
        :type component_locator: ComponentLocator
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_vulnerability_analysis_serialize(
            application_id=application_id,
            version=version,
            ref_id=ref_id,
            component_locator=component_locator,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_vulnerability_analysis_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The internal id of the application")],
        version: Annotated[StrictStr, Field(description="The version for a specific SBOM where the vulnerability is present")],
        ref_id: Annotated[StrictStr, Field(description="The vulnerability id of a vulnerability")],
        component_locator: Annotated[ComponentLocator, Field(description="Hash or packageUrl to identify the component")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Deletes a Vulnerability analysis for a given component.

        Deletes a Vulnerability analysis for a given component.

        :param application_id: The internal id of the application (required)
        :type application_id: str
        :param version: The version for a specific SBOM where the vulnerability is present (required)
        :type version: str
        :param ref_id: The vulnerability id of a vulnerability (required)
        :type ref_id: str
        :param component_locator: Hash or packageUrl to identify the component (required)
        :type component_locator: ComponentLocator
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_vulnerability_analysis_serialize(
            application_id=application_id,
            version=version,
            ref_id=ref_id,
            component_locator=component_locator,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_vulnerability_analysis_serialize(
        self,
        application_id,
        version,
        ref_id,
        component_locator,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['applicationId'] = application_id
        if version is not None:
            _path_params['version'] = version
        if ref_id is not None:
            _path_params['refId'] = ref_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if component_locator is not None:
            _body_params = component_locator



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/v2/sbom/applications/{applicationId}/versions/{version}/vulnerability/{refId}/analysis',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_active_sbom_version_list_by_application(
        self,
        application_id: Annotated[StrictStr, Field(description="The internal id of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Gets a list of active sbom versions by application id

        Gets a list of active sbom versions by application id

        :param application_id: The internal id of the application (required)
        :type application_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_active_sbom_version_list_by_application_serialize(
            application_id=application_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_active_sbom_version_list_by_application_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The internal id of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Gets a list of active sbom versions by application id

        Gets a list of active sbom versions by application id

        :param application_id: The internal id of the application (required)
        :type application_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_active_sbom_version_list_by_application_serialize(
            application_id=application_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_active_sbom_version_list_by_application_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The internal id of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets a list of active sbom versions by application id

        Gets a list of active sbom versions by application id

        :param application_id: The internal id of the application (required)
        :type application_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_active_sbom_version_list_by_application_serialize(
            application_id=application_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_active_sbom_version_list_by_application_serialize(
        self,
        application_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['applicationId'] = application_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/sbom/applications/{applicationId}/versions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_import_status(
        self,
        application_id: Annotated[StrictStr, Field(description="The internal id of the application")],
        import_request_id: Annotated[StrictStr, Field(description="The id of the import request")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Get sbom import status

        Gets status of a sbom import.

        :param application_id: The internal id of the application (required)
        :type application_id: str
        :param import_request_id: The id of the import request (required)
        :type import_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_import_status_serialize(
            application_id=application_id,
            import_request_id=import_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_import_status_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The internal id of the application")],
        import_request_id: Annotated[StrictStr, Field(description="The id of the import request")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Get sbom import status

        Gets status of a sbom import.

        :param application_id: The internal id of the application (required)
        :type application_id: str
        :param import_request_id: The id of the import request (required)
        :type import_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_import_status_serialize(
            application_id=application_id,
            import_request_id=import_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_import_status_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The internal id of the application")],
        import_request_id: Annotated[StrictStr, Field(description="The id of the import request")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get sbom import status

        Gets status of a sbom import.

        :param application_id: The internal id of the application (required)
        :type application_id: str
        :param import_request_id: The id of the import request (required)
        :type import_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_import_status_serialize(
            application_id=application_id,
            import_request_id=import_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_import_status_serialize(
        self,
        application_id,
        import_request_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['applicationId'] = application_id
        if import_request_id is not None:
            _path_params['importRequestId'] = import_request_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/sbom/applications/{applicationId}/status/{importRequestId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_sbom_components(
        self,
        application_id: Annotated[StrictStr, Field(description="The internal id of the application")],
        version: Annotated[StrictStr, Field(description="URL Encoded version value of the sbom to query its components")],
        vulnerability_threat_levels: Annotated[Optional[List[StrictStr]], Field(description="If provided, filter components by the given threat level on their vulnerabilities")] = None,
        dependency_types: Annotated[Optional[List[StrictStr]], Field(description="If provided, filter components by the given dependency types")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="If provided, filter components by the given search criteria")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Criteria to sort the results. default = VULNERABILITIES")] = None,
        asc: Annotated[Optional[StrictBool], Field(description="Order mode ASC=true or DESC=false. default = false")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Current page number. default = 1")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of items to return by page. default = 50")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Gets the components found in a specific sbom version

        Lists the components in a specific sbom version with data about vulnerabilities and licenses

        :param application_id: The internal id of the application (required)
        :type application_id: str
        :param version: URL Encoded version value of the sbom to query its components (required)
        :type version: str
        :param vulnerability_threat_levels: If provided, filter components by the given threat level on their vulnerabilities
        :type vulnerability_threat_levels: List[str]
        :param dependency_types: If provided, filter components by the given dependency types
        :type dependency_types: List[str]
        :param filter: If provided, filter components by the given search criteria
        :type filter: str
        :param sort_by: Criteria to sort the results. default = VULNERABILITIES
        :type sort_by: str
        :param asc: Order mode ASC=true or DESC=false. default = false
        :type asc: bool
        :param page: Current page number. default = 1
        :type page: int
        :param page_size: Number of items to return by page. default = 50
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sbom_components_serialize(
            application_id=application_id,
            version=version,
            vulnerability_threat_levels=vulnerability_threat_levels,
            dependency_types=dependency_types,
            filter=filter,
            sort_by=sort_by,
            asc=asc,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_sbom_components_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The internal id of the application")],
        version: Annotated[StrictStr, Field(description="URL Encoded version value of the sbom to query its components")],
        vulnerability_threat_levels: Annotated[Optional[List[StrictStr]], Field(description="If provided, filter components by the given threat level on their vulnerabilities")] = None,
        dependency_types: Annotated[Optional[List[StrictStr]], Field(description="If provided, filter components by the given dependency types")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="If provided, filter components by the given search criteria")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Criteria to sort the results. default = VULNERABILITIES")] = None,
        asc: Annotated[Optional[StrictBool], Field(description="Order mode ASC=true or DESC=false. default = false")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Current page number. default = 1")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of items to return by page. default = 50")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Gets the components found in a specific sbom version

        Lists the components in a specific sbom version with data about vulnerabilities and licenses

        :param application_id: The internal id of the application (required)
        :type application_id: str
        :param version: URL Encoded version value of the sbom to query its components (required)
        :type version: str
        :param vulnerability_threat_levels: If provided, filter components by the given threat level on their vulnerabilities
        :type vulnerability_threat_levels: List[str]
        :param dependency_types: If provided, filter components by the given dependency types
        :type dependency_types: List[str]
        :param filter: If provided, filter components by the given search criteria
        :type filter: str
        :param sort_by: Criteria to sort the results. default = VULNERABILITIES
        :type sort_by: str
        :param asc: Order mode ASC=true or DESC=false. default = false
        :type asc: bool
        :param page: Current page number. default = 1
        :type page: int
        :param page_size: Number of items to return by page. default = 50
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sbom_components_serialize(
            application_id=application_id,
            version=version,
            vulnerability_threat_levels=vulnerability_threat_levels,
            dependency_types=dependency_types,
            filter=filter,
            sort_by=sort_by,
            asc=asc,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_sbom_components_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The internal id of the application")],
        version: Annotated[StrictStr, Field(description="URL Encoded version value of the sbom to query its components")],
        vulnerability_threat_levels: Annotated[Optional[List[StrictStr]], Field(description="If provided, filter components by the given threat level on their vulnerabilities")] = None,
        dependency_types: Annotated[Optional[List[StrictStr]], Field(description="If provided, filter components by the given dependency types")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="If provided, filter components by the given search criteria")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Criteria to sort the results. default = VULNERABILITIES")] = None,
        asc: Annotated[Optional[StrictBool], Field(description="Order mode ASC=true or DESC=false. default = false")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Current page number. default = 1")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of items to return by page. default = 50")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets the components found in a specific sbom version

        Lists the components in a specific sbom version with data about vulnerabilities and licenses

        :param application_id: The internal id of the application (required)
        :type application_id: str
        :param version: URL Encoded version value of the sbom to query its components (required)
        :type version: str
        :param vulnerability_threat_levels: If provided, filter components by the given threat level on their vulnerabilities
        :type vulnerability_threat_levels: List[str]
        :param dependency_types: If provided, filter components by the given dependency types
        :type dependency_types: List[str]
        :param filter: If provided, filter components by the given search criteria
        :type filter: str
        :param sort_by: Criteria to sort the results. default = VULNERABILITIES
        :type sort_by: str
        :param asc: Order mode ASC=true or DESC=false. default = false
        :type asc: bool
        :param page: Current page number. default = 1
        :type page: int
        :param page_size: Number of items to return by page. default = 50
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sbom_components_serialize(
            application_id=application_id,
            version=version,
            vulnerability_threat_levels=vulnerability_threat_levels,
            dependency_types=dependency_types,
            filter=filter,
            sort_by=sort_by,
            asc=asc,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_sbom_components_serialize(
        self,
        application_id,
        version,
        vulnerability_threat_levels,
        dependency_types,
        filter,
        sort_by,
        asc,
        page,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'vulnerabilityThreatLevels': 'multi',
            'dependencyTypes': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['applicationId'] = application_id
        if version is not None:
            _path_params['version'] = version
        # process the query parameters
        if vulnerability_threat_levels is not None:
            
            _query_params.append(('vulnerabilityThreatLevels', vulnerability_threat_levels))
            
        if dependency_types is not None:
            
            _query_params.append(('dependencyTypes', dependency_types))
            
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if sort_by is not None:
            
            _query_params.append(('sortBy', sort_by))
            
        if asc is not None:
            
            _query_params.append(('asc', asc))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/sbom/applications/{applicationId}/versions/{version}/components',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_sbom_metadata_summary_for_application(
        self,
        application_id: Annotated[StrictStr, Field(description="The internal id of the application")],
        sort_by_date: Annotated[Optional[StrictStr], Field(description="Deprecated, use sortBy and asc instead. Sort results by import date. Allowed values [asc|desc]. default = asc")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of items to return by page. default = 10")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Current page number. default = 1")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Criteria to sort the results. default = IMPORT_DATE, when used sortByDate is ignored")] = None,
        asc: Annotated[Optional[StrictBool], Field(description="Order mode ASC=true or DESC=false. default = true")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Gets a paginated list of SBOMs for an application

        Gets a paginated list of SBOMs for an application

        :param application_id: The internal id of the application (required)
        :type application_id: str
        :param sort_by_date: Deprecated, use sortBy and asc instead. Sort results by import date. Allowed values [asc|desc]. default = asc
        :type sort_by_date: str
        :param page_size: Number of items to return by page. default = 10
        :type page_size: int
        :param page: Current page number. default = 1
        :type page: int
        :param sort_by: Criteria to sort the results. default = IMPORT_DATE, when used sortByDate is ignored
        :type sort_by: str
        :param asc: Order mode ASC=true or DESC=false. default = true
        :type asc: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sbom_metadata_summary_for_application_serialize(
            application_id=application_id,
            sort_by_date=sort_by_date,
            page_size=page_size,
            page=page,
            sort_by=sort_by,
            asc=asc,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_sbom_metadata_summary_for_application_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The internal id of the application")],
        sort_by_date: Annotated[Optional[StrictStr], Field(description="Deprecated, use sortBy and asc instead. Sort results by import date. Allowed values [asc|desc]. default = asc")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of items to return by page. default = 10")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Current page number. default = 1")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Criteria to sort the results. default = IMPORT_DATE, when used sortByDate is ignored")] = None,
        asc: Annotated[Optional[StrictBool], Field(description="Order mode ASC=true or DESC=false. default = true")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Gets a paginated list of SBOMs for an application

        Gets a paginated list of SBOMs for an application

        :param application_id: The internal id of the application (required)
        :type application_id: str
        :param sort_by_date: Deprecated, use sortBy and asc instead. Sort results by import date. Allowed values [asc|desc]. default = asc
        :type sort_by_date: str
        :param page_size: Number of items to return by page. default = 10
        :type page_size: int
        :param page: Current page number. default = 1
        :type page: int
        :param sort_by: Criteria to sort the results. default = IMPORT_DATE, when used sortByDate is ignored
        :type sort_by: str
        :param asc: Order mode ASC=true or DESC=false. default = true
        :type asc: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sbom_metadata_summary_for_application_serialize(
            application_id=application_id,
            sort_by_date=sort_by_date,
            page_size=page_size,
            page=page,
            sort_by=sort_by,
            asc=asc,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_sbom_metadata_summary_for_application_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The internal id of the application")],
        sort_by_date: Annotated[Optional[StrictStr], Field(description="Deprecated, use sortBy and asc instead. Sort results by import date. Allowed values [asc|desc]. default = asc")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of items to return by page. default = 10")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Current page number. default = 1")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Criteria to sort the results. default = IMPORT_DATE, when used sortByDate is ignored")] = None,
        asc: Annotated[Optional[StrictBool], Field(description="Order mode ASC=true or DESC=false. default = true")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets a paginated list of SBOMs for an application

        Gets a paginated list of SBOMs for an application

        :param application_id: The internal id of the application (required)
        :type application_id: str
        :param sort_by_date: Deprecated, use sortBy and asc instead. Sort results by import date. Allowed values [asc|desc]. default = asc
        :type sort_by_date: str
        :param page_size: Number of items to return by page. default = 10
        :type page_size: int
        :param page: Current page number. default = 1
        :type page: int
        :param sort_by: Criteria to sort the results. default = IMPORT_DATE, when used sortByDate is ignored
        :type sort_by: str
        :param asc: Order mode ASC=true or DESC=false. default = true
        :type asc: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sbom_metadata_summary_for_application_serialize(
            application_id=application_id,
            sort_by_date=sort_by_date,
            page_size=page_size,
            page=page,
            sort_by=sort_by,
            asc=asc,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_sbom_metadata_summary_for_application_serialize(
        self,
        application_id,
        sort_by_date,
        page_size,
        page,
        sort_by,
        asc,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['applicationId'] = application_id
        # process the query parameters
        if sort_by_date is not None:
            
            _query_params.append(('sortByDate', sort_by_date))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if sort_by is not None:
            
            _query_params.append(('sortBy', sort_by))
            
        if asc is not None:
            
            _query_params.append(('asc', asc))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/sbom/applications/{applicationId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_sbom_version(
        self,
        application_id: Annotated[StrictStr, Field(description="The internal id of the application")],
        version: Annotated[StrictStr, Field(description="URL Encoded version value of the sbom")],
        state: Annotated[Optional[StrictStr], Field(description="The state of the sbom version. Allowed values [original|current]. default = current")] = None,
        specification: Annotated[Optional[StrictStr], Field(description="Target specification of the sbom. Allowed values [cyclonedx1.6|cyclonedx1.5|spdx2.2|spdx2.3]. default = cyclonedx1.6")] = None,
        accept: Annotated[Optional[StrictStr], Field(description="Output format(json/xml) of the sbom. Changing the output format only applicable when downloading the current form of the SBOM. The original sbom will always return in the original form that it was ingested. When requesting `current` form and if this header value is not present the sbom will be returned in its original ingested format. Allowed values {'application/json'|'application/xml'}. default = null")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Gets a sbom version

        Downloads a specific sbom version in its original or current form

        :param application_id: The internal id of the application (required)
        :type application_id: str
        :param version: URL Encoded version value of the sbom (required)
        :type version: str
        :param state: The state of the sbom version. Allowed values [original|current]. default = current
        :type state: str
        :param specification: Target specification of the sbom. Allowed values [cyclonedx1.6|cyclonedx1.5|spdx2.2|spdx2.3]. default = cyclonedx1.6
        :type specification: str
        :param accept: Output format(json/xml) of the sbom. Changing the output format only applicable when downloading the current form of the SBOM. The original sbom will always return in the original form that it was ingested. When requesting `current` form and if this header value is not present the sbom will be returned in its original ingested format. Allowed values {'application/json'|'application/xml'}. default = null
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sbom_version_serialize(
            application_id=application_id,
            version=version,
            state=state,
            specification=specification,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_sbom_version_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The internal id of the application")],
        version: Annotated[StrictStr, Field(description="URL Encoded version value of the sbom")],
        state: Annotated[Optional[StrictStr], Field(description="The state of the sbom version. Allowed values [original|current]. default = current")] = None,
        specification: Annotated[Optional[StrictStr], Field(description="Target specification of the sbom. Allowed values [cyclonedx1.6|cyclonedx1.5|spdx2.2|spdx2.3]. default = cyclonedx1.6")] = None,
        accept: Annotated[Optional[StrictStr], Field(description="Output format(json/xml) of the sbom. Changing the output format only applicable when downloading the current form of the SBOM. The original sbom will always return in the original form that it was ingested. When requesting `current` form and if this header value is not present the sbom will be returned in its original ingested format. Allowed values {'application/json'|'application/xml'}. default = null")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Gets a sbom version

        Downloads a specific sbom version in its original or current form

        :param application_id: The internal id of the application (required)
        :type application_id: str
        :param version: URL Encoded version value of the sbom (required)
        :type version: str
        :param state: The state of the sbom version. Allowed values [original|current]. default = current
        :type state: str
        :param specification: Target specification of the sbom. Allowed values [cyclonedx1.6|cyclonedx1.5|spdx2.2|spdx2.3]. default = cyclonedx1.6
        :type specification: str
        :param accept: Output format(json/xml) of the sbom. Changing the output format only applicable when downloading the current form of the SBOM. The original sbom will always return in the original form that it was ingested. When requesting `current` form and if this header value is not present the sbom will be returned in its original ingested format. Allowed values {'application/json'|'application/xml'}. default = null
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sbom_version_serialize(
            application_id=application_id,
            version=version,
            state=state,
            specification=specification,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_sbom_version_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The internal id of the application")],
        version: Annotated[StrictStr, Field(description="URL Encoded version value of the sbom")],
        state: Annotated[Optional[StrictStr], Field(description="The state of the sbom version. Allowed values [original|current]. default = current")] = None,
        specification: Annotated[Optional[StrictStr], Field(description="Target specification of the sbom. Allowed values [cyclonedx1.6|cyclonedx1.5|spdx2.2|spdx2.3]. default = cyclonedx1.6")] = None,
        accept: Annotated[Optional[StrictStr], Field(description="Output format(json/xml) of the sbom. Changing the output format only applicable when downloading the current form of the SBOM. The original sbom will always return in the original form that it was ingested. When requesting `current` form and if this header value is not present the sbom will be returned in its original ingested format. Allowed values {'application/json'|'application/xml'}. default = null")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets a sbom version

        Downloads a specific sbom version in its original or current form

        :param application_id: The internal id of the application (required)
        :type application_id: str
        :param version: URL Encoded version value of the sbom (required)
        :type version: str
        :param state: The state of the sbom version. Allowed values [original|current]. default = current
        :type state: str
        :param specification: Target specification of the sbom. Allowed values [cyclonedx1.6|cyclonedx1.5|spdx2.2|spdx2.3]. default = cyclonedx1.6
        :type specification: str
        :param accept: Output format(json/xml) of the sbom. Changing the output format only applicable when downloading the current form of the SBOM. The original sbom will always return in the original form that it was ingested. When requesting `current` form and if this header value is not present the sbom will be returned in its original ingested format. Allowed values {'application/json'|'application/xml'}. default = null
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sbom_version_serialize(
            application_id=application_id,
            version=version,
            state=state,
            specification=specification,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_sbom_version_serialize(
        self,
        application_id,
        version,
        state,
        specification,
        accept,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['applicationId'] = application_id
        if version is not None:
            _path_params['version'] = version
        # process the query parameters
        if state is not None:
            
            _query_params.append(('state', state))
            
        if specification is not None:
            
            _query_params.append(('specification', specification))
            
        # process the header parameters
        if accept is not None:
            _header_params['Accept'] = accept
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/sbom/applications/{applicationId}/versions/{version}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_vulnerability_details(
        self,
        application_id: Annotated[StrictStr, Field(description="The internal id of the application")],
        version: Annotated[StrictStr, Field(description="The version for a specific SBOM where the vulnerability is present")],
        ref_id: Annotated[StrictStr, Field(description="The vulnerability id of a vulnerability")],
        package_url: Annotated[Optional[StrictStr], Field(description="(One of packageUrl or componentHash is required) Enter the packageUrl of the component with the vulnerability")] = None,
        component_hash: Annotated[Optional[StrictStr], Field(description="(One of packageUrl or componentHash is required) Enter the componentHash of the component with the vulnerability")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """get_vulnerability_details

        Use this method to retrieve details for a vulnerability belongs to a specific sbom version 

        :param application_id: The internal id of the application (required)
        :type application_id: str
        :param version: The version for a specific SBOM where the vulnerability is present (required)
        :type version: str
        :param ref_id: The vulnerability id of a vulnerability (required)
        :type ref_id: str
        :param package_url: (One of packageUrl or componentHash is required) Enter the packageUrl of the component with the vulnerability
        :type package_url: str
        :param component_hash: (One of packageUrl or componentHash is required) Enter the componentHash of the component with the vulnerability
        :type component_hash: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_vulnerability_details_serialize(
            application_id=application_id,
            version=version,
            ref_id=ref_id,
            package_url=package_url,
            component_hash=component_hash,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_vulnerability_details_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The internal id of the application")],
        version: Annotated[StrictStr, Field(description="The version for a specific SBOM where the vulnerability is present")],
        ref_id: Annotated[StrictStr, Field(description="The vulnerability id of a vulnerability")],
        package_url: Annotated[Optional[StrictStr], Field(description="(One of packageUrl or componentHash is required) Enter the packageUrl of the component with the vulnerability")] = None,
        component_hash: Annotated[Optional[StrictStr], Field(description="(One of packageUrl or componentHash is required) Enter the componentHash of the component with the vulnerability")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """get_vulnerability_details

        Use this method to retrieve details for a vulnerability belongs to a specific sbom version 

        :param application_id: The internal id of the application (required)
        :type application_id: str
        :param version: The version for a specific SBOM where the vulnerability is present (required)
        :type version: str
        :param ref_id: The vulnerability id of a vulnerability (required)
        :type ref_id: str
        :param package_url: (One of packageUrl or componentHash is required) Enter the packageUrl of the component with the vulnerability
        :type package_url: str
        :param component_hash: (One of packageUrl or componentHash is required) Enter the componentHash of the component with the vulnerability
        :type component_hash: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_vulnerability_details_serialize(
            application_id=application_id,
            version=version,
            ref_id=ref_id,
            package_url=package_url,
            component_hash=component_hash,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_vulnerability_details_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The internal id of the application")],
        version: Annotated[StrictStr, Field(description="The version for a specific SBOM where the vulnerability is present")],
        ref_id: Annotated[StrictStr, Field(description="The vulnerability id of a vulnerability")],
        package_url: Annotated[Optional[StrictStr], Field(description="(One of packageUrl or componentHash is required) Enter the packageUrl of the component with the vulnerability")] = None,
        component_hash: Annotated[Optional[StrictStr], Field(description="(One of packageUrl or componentHash is required) Enter the componentHash of the component with the vulnerability")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_vulnerability_details

        Use this method to retrieve details for a vulnerability belongs to a specific sbom version 

        :param application_id: The internal id of the application (required)
        :type application_id: str
        :param version: The version for a specific SBOM where the vulnerability is present (required)
        :type version: str
        :param ref_id: The vulnerability id of a vulnerability (required)
        :type ref_id: str
        :param package_url: (One of packageUrl or componentHash is required) Enter the packageUrl of the component with the vulnerability
        :type package_url: str
        :param component_hash: (One of packageUrl or componentHash is required) Enter the componentHash of the component with the vulnerability
        :type component_hash: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_vulnerability_details_serialize(
            application_id=application_id,
            version=version,
            ref_id=ref_id,
            package_url=package_url,
            component_hash=component_hash,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_vulnerability_details_serialize(
        self,
        application_id,
        version,
        ref_id,
        package_url,
        component_hash,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['applicationId'] = application_id
        if version is not None:
            _path_params['version'] = version
        if ref_id is not None:
            _path_params['refId'] = ref_id
        # process the query parameters
        if package_url is not None:
            
            _query_params.append(('packageUrl', package_url))
            
        if component_hash is not None:
            
            _query_params.append(('componentHash', component_hash))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/sbom/applications/{applicationId}/versions/{version}/vulnerability/{refId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def import_sbom(
        self,
        application_id: Annotated[StrictStr, Field(description="The internal id of the application.")],
        file: Annotated[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]], Field(description="Your SBOM.")],
        enable_binary_import: Annotated[Optional[StrictBool], Field(description="Enable importing as a binary file.")] = None,
        ignore_validation_error: Annotated[Optional[StrictBool], Field(description="Skip the SBOM validation if an error occurs.")] = None,
        application_version: Annotated[Optional[StrictStr], Field(description="The SBOM version.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiThirdPartyScanTicketDTO:
        """Import a new sbom version

        Imports a new sbom version to an existing application

        :param application_id: The internal id of the application. (required)
        :type application_id: str
        :param file: Your SBOM. (required)
        :type file: bytearray
        :param enable_binary_import: Enable importing as a binary file.
        :type enable_binary_import: bool
        :param ignore_validation_error: Skip the SBOM validation if an error occurs.
        :type ignore_validation_error: bool
        :param application_version: The SBOM version.
        :type application_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._import_sbom_serialize(
            application_id=application_id,
            file=file,
            enable_binary_import=enable_binary_import,
            ignore_validation_error=ignore_validation_error,
            application_version=application_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "ApiThirdPartyScanTicketDTO",
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def import_sbom_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The internal id of the application.")],
        file: Annotated[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]], Field(description="Your SBOM.")],
        enable_binary_import: Annotated[Optional[StrictBool], Field(description="Enable importing as a binary file.")] = None,
        ignore_validation_error: Annotated[Optional[StrictBool], Field(description="Skip the SBOM validation if an error occurs.")] = None,
        application_version: Annotated[Optional[StrictStr], Field(description="The SBOM version.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ApiThirdPartyScanTicketDTO]:
        """Import a new sbom version

        Imports a new sbom version to an existing application

        :param application_id: The internal id of the application. (required)
        :type application_id: str
        :param file: Your SBOM. (required)
        :type file: bytearray
        :param enable_binary_import: Enable importing as a binary file.
        :type enable_binary_import: bool
        :param ignore_validation_error: Skip the SBOM validation if an error occurs.
        :type ignore_validation_error: bool
        :param application_version: The SBOM version.
        :type application_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._import_sbom_serialize(
            application_id=application_id,
            file=file,
            enable_binary_import=enable_binary_import,
            ignore_validation_error=ignore_validation_error,
            application_version=application_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "ApiThirdPartyScanTicketDTO",
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def import_sbom_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The internal id of the application.")],
        file: Annotated[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]], Field(description="Your SBOM.")],
        enable_binary_import: Annotated[Optional[StrictBool], Field(description="Enable importing as a binary file.")] = None,
        ignore_validation_error: Annotated[Optional[StrictBool], Field(description="Skip the SBOM validation if an error occurs.")] = None,
        application_version: Annotated[Optional[StrictStr], Field(description="The SBOM version.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Import a new sbom version

        Imports a new sbom version to an existing application

        :param application_id: The internal id of the application. (required)
        :type application_id: str
        :param file: Your SBOM. (required)
        :type file: bytearray
        :param enable_binary_import: Enable importing as a binary file.
        :type enable_binary_import: bool
        :param ignore_validation_error: Skip the SBOM validation if an error occurs.
        :type ignore_validation_error: bool
        :param application_version: The SBOM version.
        :type application_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._import_sbom_serialize(
            application_id=application_id,
            file=file,
            enable_binary_import=enable_binary_import,
            ignore_validation_error=ignore_validation_error,
            application_version=application_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "ApiThirdPartyScanTicketDTO",
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _import_sbom_serialize(
        self,
        application_id,
        file,
        enable_binary_import,
        ignore_validation_error,
        application_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if enable_binary_import is not None:
            
            _query_params.append(('enableBinaryImport', enable_binary_import))
            
        if ignore_validation_error is not None:
            
            _query_params.append(('ignoreValidationError', ignore_validation_error))
            
        # process the header parameters
        # process the form parameters
        if application_id is not None:
            _form_params.append(('applicationId', application_id))
        if application_version is not None:
            _form_params.append(('applicationVersion', application_version))
        if file is not None:
            _files['file'] = file
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v2/sbom/import',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def save_vulnerability_analysis(
        self,
        application_id: Annotated[StrictStr, Field(description="The internal id of the application")],
        version: Annotated[StrictStr, Field(description="The version for a specific SBOM where the vulnerability is present")],
        ref_id: Annotated[StrictStr, Field(description="The vulnerability id of a vulnerability")],
        sbom_vulnerability_analysis_request: Annotated[SbomVulnerabilityAnalysisRequest, Field(description="Vulnerability analysis details with component information")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Updates a vulnerability analysis annotation for a specific SBOM vulnerability

        Updates a vulnerability analysis annotation for a specific SBOM vulnerability

        :param application_id: The internal id of the application (required)
        :type application_id: str
        :param version: The version for a specific SBOM where the vulnerability is present (required)
        :type version: str
        :param ref_id: The vulnerability id of a vulnerability (required)
        :type ref_id: str
        :param sbom_vulnerability_analysis_request: Vulnerability analysis details with component information (required)
        :type sbom_vulnerability_analysis_request: SbomVulnerabilityAnalysisRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._save_vulnerability_analysis_serialize(
            application_id=application_id,
            version=version,
            ref_id=ref_id,
            sbom_vulnerability_analysis_request=sbom_vulnerability_analysis_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def save_vulnerability_analysis_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The internal id of the application")],
        version: Annotated[StrictStr, Field(description="The version for a specific SBOM where the vulnerability is present")],
        ref_id: Annotated[StrictStr, Field(description="The vulnerability id of a vulnerability")],
        sbom_vulnerability_analysis_request: Annotated[SbomVulnerabilityAnalysisRequest, Field(description="Vulnerability analysis details with component information")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Updates a vulnerability analysis annotation for a specific SBOM vulnerability

        Updates a vulnerability analysis annotation for a specific SBOM vulnerability

        :param application_id: The internal id of the application (required)
        :type application_id: str
        :param version: The version for a specific SBOM where the vulnerability is present (required)
        :type version: str
        :param ref_id: The vulnerability id of a vulnerability (required)
        :type ref_id: str
        :param sbom_vulnerability_analysis_request: Vulnerability analysis details with component information (required)
        :type sbom_vulnerability_analysis_request: SbomVulnerabilityAnalysisRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._save_vulnerability_analysis_serialize(
            application_id=application_id,
            version=version,
            ref_id=ref_id,
            sbom_vulnerability_analysis_request=sbom_vulnerability_analysis_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def save_vulnerability_analysis_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The internal id of the application")],
        version: Annotated[StrictStr, Field(description="The version for a specific SBOM where the vulnerability is present")],
        ref_id: Annotated[StrictStr, Field(description="The vulnerability id of a vulnerability")],
        sbom_vulnerability_analysis_request: Annotated[SbomVulnerabilityAnalysisRequest, Field(description="Vulnerability analysis details with component information")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Updates a vulnerability analysis annotation for a specific SBOM vulnerability

        Updates a vulnerability analysis annotation for a specific SBOM vulnerability

        :param application_id: The internal id of the application (required)
        :type application_id: str
        :param version: The version for a specific SBOM where the vulnerability is present (required)
        :type version: str
        :param ref_id: The vulnerability id of a vulnerability (required)
        :type ref_id: str
        :param sbom_vulnerability_analysis_request: Vulnerability analysis details with component information (required)
        :type sbom_vulnerability_analysis_request: SbomVulnerabilityAnalysisRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._save_vulnerability_analysis_serialize(
            application_id=application_id,
            version=version,
            ref_id=ref_id,
            sbom_vulnerability_analysis_request=sbom_vulnerability_analysis_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _save_vulnerability_analysis_serialize(
        self,
        application_id,
        version,
        ref_id,
        sbom_vulnerability_analysis_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['applicationId'] = application_id
        if version is not None:
            _path_params['version'] = version
        if ref_id is not None:
            _path_params['refId'] = ref_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if sbom_vulnerability_analysis_request is not None:
            _body_params = sbom_vulnerability_analysis_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/api/v2/sbom/applications/{applicationId}/versions/{version}/vulnerability/{refId}/analysis',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


