# coding: utf-8

"""
    Sonatype Lifecycle Public REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.196.0-01
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ApiZScalerConfigurationDTO(BaseModel):
    """
    ApiZScalerConfigurationDTO
    """ # noqa: E501
    api_key: Optional[StrictStr] = Field(default=None, alias="apiKey")
    eula_agreed: Optional[StrictBool] = Field(default=None, alias="eulaAgreed")
    hostname: Optional[StrictStr] = None
    maven_format_enabled: Optional[StrictBool] = Field(default=None, alias="mavenFormatEnabled")
    npm_format_enabled: Optional[StrictBool] = Field(default=None, alias="npmFormatEnabled")
    nuget_format_enabled: Optional[StrictBool] = Field(default=None, alias="nugetFormatEnabled")
    password: Optional[StrictStr] = None
    pypi_format_enabled: Optional[StrictBool] = Field(default=None, alias="pypiFormatEnabled")
    username: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["apiKey", "eulaAgreed", "hostname", "mavenFormatEnabled", "npmFormatEnabled", "nugetFormatEnabled", "password", "pypiFormatEnabled", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiZScalerConfigurationDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiZScalerConfigurationDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiKey": obj.get("apiKey"),
            "eulaAgreed": obj.get("eulaAgreed"),
            "hostname": obj.get("hostname"),
            "mavenFormatEnabled": obj.get("mavenFormatEnabled"),
            "npmFormatEnabled": obj.get("npmFormatEnabled"),
            "nugetFormatEnabled": obj.get("nugetFormatEnabled"),
            "password": obj.get("password"),
            "pypiFormatEnabled": obj.get("pypiFormatEnabled"),
            "username": obj.get("username")
        })
        return _obj


