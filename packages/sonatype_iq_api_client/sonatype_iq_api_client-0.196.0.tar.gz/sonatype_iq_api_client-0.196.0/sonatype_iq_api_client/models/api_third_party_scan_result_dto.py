# coding: utf-8

"""
    Sonatype Lifecycle Public REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.196.0-01
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sonatype_iq_api_client.models.api_evaluation_result_counter_dto import ApiEvaluationResultCounterDTO
from typing import Optional, Set
from typing_extensions import Self

class ApiThirdPartyScanResultDTO(BaseModel):
    """
    ApiThirdPartyScanResultDTO
    """ # noqa: E501
    components_affected: Optional[ApiEvaluationResultCounterDTO] = Field(default=None, alias="componentsAffected")
    embeddable_report_html_url: Optional[StrictStr] = Field(default=None, alias="embeddableReportHtmlUrl")
    error_message: Optional[StrictStr] = Field(default=None, alias="errorMessage")
    grandfathered_policy_violations: Optional[StrictInt] = Field(default=None, alias="grandfatheredPolicyViolations")
    is_error: Optional[StrictBool] = Field(default=None, alias="isError")
    legacy_violations: Optional[StrictInt] = Field(default=None, alias="legacyViolations")
    open_policy_violations: Optional[ApiEvaluationResultCounterDTO] = Field(default=None, alias="openPolicyViolations")
    policy_action: Optional[StrictStr] = Field(default=None, alias="policyAction")
    report_data_url: Optional[StrictStr] = Field(default=None, alias="reportDataUrl")
    report_html_url: Optional[StrictStr] = Field(default=None, alias="reportHtmlUrl")
    report_pdf_url: Optional[StrictStr] = Field(default=None, alias="reportPdfUrl")
    __properties: ClassVar[List[str]] = ["componentsAffected", "embeddableReportHtmlUrl", "errorMessage", "grandfatheredPolicyViolations", "isError", "legacyViolations", "openPolicyViolations", "policyAction", "reportDataUrl", "reportHtmlUrl", "reportPdfUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiThirdPartyScanResultDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of components_affected
        if self.components_affected:
            _dict['componentsAffected'] = self.components_affected.to_dict()
        # override the default output from pydantic by calling `to_dict()` of open_policy_violations
        if self.open_policy_violations:
            _dict['openPolicyViolations'] = self.open_policy_violations.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiThirdPartyScanResultDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "componentsAffected": ApiEvaluationResultCounterDTO.from_dict(obj["componentsAffected"]) if obj.get("componentsAffected") is not None else None,
            "embeddableReportHtmlUrl": obj.get("embeddableReportHtmlUrl"),
            "errorMessage": obj.get("errorMessage"),
            "grandfatheredPolicyViolations": obj.get("grandfatheredPolicyViolations"),
            "isError": obj.get("isError"),
            "legacyViolations": obj.get("legacyViolations"),
            "openPolicyViolations": ApiEvaluationResultCounterDTO.from_dict(obj["openPolicyViolations"]) if obj.get("openPolicyViolations") is not None else None,
            "policyAction": obj.get("policyAction"),
            "reportDataUrl": obj.get("reportDataUrl"),
            "reportHtmlUrl": obj.get("reportHtmlUrl"),
            "reportPdfUrl": obj.get("reportPdfUrl")
        })
        return _obj


