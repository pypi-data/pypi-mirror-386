# coding: utf-8

"""
    Sonatype Lifecycle Public REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.196.0-01
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sonatype_iq_api_client.models.api_constraint_violation_dto import ApiConstraintViolationDTO
from sonatype_iq_api_client.models.api_policy_waiver_dto import ApiPolicyWaiverDTO
from typing import Optional, Set
from typing_extensions import Self

class ApiWaivedPolicyViolationDTO(BaseModel):
    """
    ApiWaivedPolicyViolationDTO
    """ # noqa: E501
    constraint_violations: Optional[List[ApiConstraintViolationDTO]] = Field(default=None, alias="constraintViolations")
    fix_time: Optional[datetime] = Field(default=None, alias="fixTime")
    legacy_violation_time: Optional[datetime] = Field(default=None, alias="legacyViolationTime")
    open_time: Optional[datetime] = Field(default=None, alias="openTime")
    policy_id: Optional[StrictStr] = Field(default=None, alias="policyId")
    policy_name: Optional[StrictStr] = Field(default=None, alias="policyName")
    policy_violation_id: Optional[StrictStr] = Field(default=None, alias="policyViolationId")
    policy_waiver: Optional[ApiPolicyWaiverDTO] = Field(default=None, alias="policyWaiver")
    threat_level: Optional[StrictInt] = Field(default=None, alias="threatLevel")
    waive_time: Optional[datetime] = Field(default=None, alias="waiveTime")
    __properties: ClassVar[List[str]] = ["constraintViolations", "fixTime", "legacyViolationTime", "openTime", "policyId", "policyName", "policyViolationId", "policyWaiver", "threatLevel", "waiveTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiWaivedPolicyViolationDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in constraint_violations (list)
        _items = []
        if self.constraint_violations:
            for _item_constraint_violations in self.constraint_violations:
                if _item_constraint_violations:
                    _items.append(_item_constraint_violations.to_dict())
            _dict['constraintViolations'] = _items
        # override the default output from pydantic by calling `to_dict()` of policy_waiver
        if self.policy_waiver:
            _dict['policyWaiver'] = self.policy_waiver.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiWaivedPolicyViolationDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "constraintViolations": [ApiConstraintViolationDTO.from_dict(_item) for _item in obj["constraintViolations"]] if obj.get("constraintViolations") is not None else None,
            "fixTime": obj.get("fixTime"),
            "legacyViolationTime": obj.get("legacyViolationTime"),
            "openTime": obj.get("openTime"),
            "policyId": obj.get("policyId"),
            "policyName": obj.get("policyName"),
            "policyViolationId": obj.get("policyViolationId"),
            "policyWaiver": ApiPolicyWaiverDTO.from_dict(obj["policyWaiver"]) if obj.get("policyWaiver") is not None else None,
            "threatLevel": obj.get("threatLevel"),
            "waiveTime": obj.get("waiveTime")
        })
        return _obj


