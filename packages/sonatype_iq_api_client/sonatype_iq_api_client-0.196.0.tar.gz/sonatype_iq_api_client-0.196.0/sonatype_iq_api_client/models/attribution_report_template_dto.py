# coding: utf-8

"""
    Sonatype Lifecycle Public REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.196.0-01
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AttributionReportTemplateDTO(BaseModel):
    """
    AttributionReportTemplateDTO
    """ # noqa: E501
    document_title: Optional[StrictStr] = Field(default=None, alias="documentTitle")
    footer: Optional[StrictStr] = None
    header: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    include_appendix: Optional[StrictBool] = Field(default=None, alias="includeAppendix")
    include_inner_source: Optional[StrictBool] = Field(default=None, alias="includeInnerSource")
    include_sonatype_special_licenses: Optional[StrictBool] = Field(default=None, alias="includeSonatypeSpecialLicenses")
    include_standard_license_texts: Optional[StrictBool] = Field(default=None, alias="includeStandardLicenseTexts")
    include_table_of_contents: Optional[StrictBool] = Field(default=None, alias="includeTableOfContents")
    last_updated_at: Optional[datetime] = Field(default=None, alias="lastUpdatedAt")
    template_name: Optional[StrictStr] = Field(default=None, alias="templateName")
    __properties: ClassVar[List[str]] = ["documentTitle", "footer", "header", "id", "includeAppendix", "includeInnerSource", "includeSonatypeSpecialLicenses", "includeStandardLicenseTexts", "includeTableOfContents", "lastUpdatedAt", "templateName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AttributionReportTemplateDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AttributionReportTemplateDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "documentTitle": obj.get("documentTitle"),
            "footer": obj.get("footer"),
            "header": obj.get("header"),
            "id": obj.get("id"),
            "includeAppendix": obj.get("includeAppendix"),
            "includeInnerSource": obj.get("includeInnerSource"),
            "includeSonatypeSpecialLicenses": obj.get("includeSonatypeSpecialLicenses"),
            "includeStandardLicenseTexts": obj.get("includeStandardLicenseTexts"),
            "includeTableOfContents": obj.get("includeTableOfContents"),
            "lastUpdatedAt": obj.get("lastUpdatedAt"),
            "templateName": obj.get("templateName")
        })
        return _obj


