# coding: utf-8

"""
    Sonatype Lifecycle Public REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.196.0-01
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from sonatype_iq_api_client.models.policy_evaluation_result import PolicyEvaluationResult

class TestPolicyEvaluationResult(unittest.TestCase):
    """PolicyEvaluationResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PolicyEvaluationResult:
        """Test PolicyEvaluationResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PolicyEvaluationResult`
        """
        model = PolicyEvaluationResult()
        if include_optional:
            return PolicyEvaluationResult(
                affected_component_count = 56,
                alerts = [
                    sonatype_iq_api_client.models.policy_alert.PolicyAlert(
                        actions = [
                            sonatype_iq_api_client.models.action.Action(
                                action_type_id = '', 
                                target = '', 
                                target_type = '', )
                            ], 
                        trigger = sonatype_iq_api_client.models.policy_fact.PolicyFact(
                            component_facts = [
                                sonatype_iq_api_client.models.component_fact.ComponentFact(
                                    component_identifier = sonatype_iq_api_client.models.component_identifier.ComponentIdentifier(
                                        coordinates = {
                                            'key' : ''
                                            }, 
                                        format = '', ), 
                                    constraint_facts = [
                                        sonatype_iq_api_client.models.constraint_fact.ConstraintFact(
                                            condition_facts = [
                                                sonatype_iq_api_client.models.condition_fact.ConditionFact(
                                                    condition_index = 56, 
                                                    condition_type_id = '', 
                                                    reason = '', 
                                                    reference = sonatype_iq_api_client.models.trigger_reference.TriggerReference(
                                                        type = 'SECURITY_VULNERABILITY_REFID', 
                                                        value = '', ), 
                                                    summary = '', 
                                                    trigger_json = '', )
                                                ], 
                                            constraint_id = '', 
                                            constraint_name = '', 
                                            operator_name = '', )
                                        ], 
                                    display_name = sonatype_iq_api_client.models.component_display_name.ComponentDisplayName(
                                        name = '', 
                                        parts = [
                                            sonatype_iq_api_client.models.component_display_name_part.ComponentDisplayNamePart(
                                                field = '', 
                                                value = '', )
                                            ], ), 
                                    hash = '', 
                                    pathnames = [
                                        ''
                                        ], )
                                ], 
                            policy_id = '', 
                            policy_name = '', 
                            policy_violation_id = '', 
                            threat_level = 56, ), )
                    ],
                critical_component_count = 56,
                critical_policy_violation_count = 56,
                critical_sast_policy_violation_count = 56,
                grandfathered_policy_violation_count = 56,
                legacy_violation_count = 56,
                moderate_component_count = 56,
                moderate_policy_violation_count = 56,
                moderate_sast_policy_violation_count = 56,
                sast_alerts = [
                    sonatype_iq_api_client.models.policy_alert.PolicyAlert(
                        actions = [
                            sonatype_iq_api_client.models.action.Action(
                                action_type_id = '', 
                                target = '', 
                                target_type = '', )
                            ], 
                        trigger = sonatype_iq_api_client.models.policy_fact.PolicyFact(
                            component_facts = [
                                sonatype_iq_api_client.models.component_fact.ComponentFact(
                                    component_identifier = sonatype_iq_api_client.models.component_identifier.ComponentIdentifier(
                                        coordinates = {
                                            'key' : ''
                                            }, 
                                        format = '', ), 
                                    constraint_facts = [
                                        sonatype_iq_api_client.models.constraint_fact.ConstraintFact(
                                            condition_facts = [
                                                sonatype_iq_api_client.models.condition_fact.ConditionFact(
                                                    condition_index = 56, 
                                                    condition_type_id = '', 
                                                    reason = '', 
                                                    reference = sonatype_iq_api_client.models.trigger_reference.TriggerReference(
                                                        type = 'SECURITY_VULNERABILITY_REFID', 
                                                        value = '', ), 
                                                    summary = '', 
                                                    trigger_json = '', )
                                                ], 
                                            constraint_id = '', 
                                            constraint_name = '', 
                                            operator_name = '', )
                                        ], 
                                    display_name = sonatype_iq_api_client.models.component_display_name.ComponentDisplayName(
                                        name = '', 
                                        parts = [
                                            sonatype_iq_api_client.models.component_display_name_part.ComponentDisplayNamePart(
                                                field = '', 
                                                value = '', )
                                            ], ), 
                                    hash = '', 
                                    pathnames = [
                                        ''
                                        ], )
                                ], 
                            policy_id = '', 
                            policy_name = '', 
                            policy_violation_id = '', 
                            threat_level = 56, ), )
                    ],
                severe_component_count = 56,
                severe_policy_violation_count = 56,
                severe_sast_policy_violation_count = 56,
                total_component_count = 56,
                total_sast_finding_count = 56
            )
        else:
            return PolicyEvaluationResult(
        )
        """

    def testPolicyEvaluationResult(self):
        """Test PolicyEvaluationResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
