# coding: utf-8

"""
    Sonatype Lifecycle Public REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.196.0-01
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from sonatype_iq_api_client.models.development_prioritization_results import DevelopmentPrioritizationResults

from sonatype_iq_api_client.api_client import ApiClient, RequestSerialized
from sonatype_iq_api_client.api_response import ApiResponse
from sonatype_iq_api_client.rest import RESTResponseType


class DeveloperPrioritiesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_priorities(
        self,
        application_id: Annotated[StrictStr, Field(description="Enter the applicationId.")],
        scan_id: Annotated[StrictStr, Field(description="Enter the scanId.")],
        include_remediation: Annotated[Optional[StrictBool], Field(description="Whether to include remediation type and version for the component or not")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Current page number.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Enter the no. of results that should be visible per page.")] = None,
        component_name_filter: Annotated[Optional[StrictStr], Field(description="Component name to filter by")] = None,
        filter_on_policy_actions: Annotated[Optional[StrictBool], Field(description="Whether to enable Fail/Warn policy action filter or not")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DevelopmentPrioritizationResults:
        """get_priorities

        Use this method to retrieve all priorities by providing the application ID and scan ID.  Permissions required: View IQ Elements

        :param application_id: Enter the applicationId. (required)
        :type application_id: str
        :param scan_id: Enter the scanId. (required)
        :type scan_id: str
        :param include_remediation: Whether to include remediation type and version for the component or not
        :type include_remediation: bool
        :param page: Current page number.
        :type page: int
        :param page_size: Enter the no. of results that should be visible per page.
        :type page_size: int
        :param component_name_filter: Component name to filter by
        :type component_name_filter: str
        :param filter_on_policy_actions: Whether to enable Fail/Warn policy action filter or not
        :type filter_on_policy_actions: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_priorities_serialize(
            application_id=application_id,
            scan_id=scan_id,
            include_remediation=include_remediation,
            page=page,
            page_size=page_size,
            component_name_filter=component_name_filter,
            filter_on_policy_actions=filter_on_policy_actions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DevelopmentPrioritizationResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_priorities_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="Enter the applicationId.")],
        scan_id: Annotated[StrictStr, Field(description="Enter the scanId.")],
        include_remediation: Annotated[Optional[StrictBool], Field(description="Whether to include remediation type and version for the component or not")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Current page number.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Enter the no. of results that should be visible per page.")] = None,
        component_name_filter: Annotated[Optional[StrictStr], Field(description="Component name to filter by")] = None,
        filter_on_policy_actions: Annotated[Optional[StrictBool], Field(description="Whether to enable Fail/Warn policy action filter or not")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DevelopmentPrioritizationResults]:
        """get_priorities

        Use this method to retrieve all priorities by providing the application ID and scan ID.  Permissions required: View IQ Elements

        :param application_id: Enter the applicationId. (required)
        :type application_id: str
        :param scan_id: Enter the scanId. (required)
        :type scan_id: str
        :param include_remediation: Whether to include remediation type and version for the component or not
        :type include_remediation: bool
        :param page: Current page number.
        :type page: int
        :param page_size: Enter the no. of results that should be visible per page.
        :type page_size: int
        :param component_name_filter: Component name to filter by
        :type component_name_filter: str
        :param filter_on_policy_actions: Whether to enable Fail/Warn policy action filter or not
        :type filter_on_policy_actions: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_priorities_serialize(
            application_id=application_id,
            scan_id=scan_id,
            include_remediation=include_remediation,
            page=page,
            page_size=page_size,
            component_name_filter=component_name_filter,
            filter_on_policy_actions=filter_on_policy_actions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DevelopmentPrioritizationResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_priorities_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="Enter the applicationId.")],
        scan_id: Annotated[StrictStr, Field(description="Enter the scanId.")],
        include_remediation: Annotated[Optional[StrictBool], Field(description="Whether to include remediation type and version for the component or not")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Current page number.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Enter the no. of results that should be visible per page.")] = None,
        component_name_filter: Annotated[Optional[StrictStr], Field(description="Component name to filter by")] = None,
        filter_on_policy_actions: Annotated[Optional[StrictBool], Field(description="Whether to enable Fail/Warn policy action filter or not")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_priorities

        Use this method to retrieve all priorities by providing the application ID and scan ID.  Permissions required: View IQ Elements

        :param application_id: Enter the applicationId. (required)
        :type application_id: str
        :param scan_id: Enter the scanId. (required)
        :type scan_id: str
        :param include_remediation: Whether to include remediation type and version for the component or not
        :type include_remediation: bool
        :param page: Current page number.
        :type page: int
        :param page_size: Enter the no. of results that should be visible per page.
        :type page_size: int
        :param component_name_filter: Component name to filter by
        :type component_name_filter: str
        :param filter_on_policy_actions: Whether to enable Fail/Warn policy action filter or not
        :type filter_on_policy_actions: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_priorities_serialize(
            application_id=application_id,
            scan_id=scan_id,
            include_remediation=include_remediation,
            page=page,
            page_size=page_size,
            component_name_filter=component_name_filter,
            filter_on_policy_actions=filter_on_policy_actions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DevelopmentPrioritizationResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_priorities_serialize(
        self,
        application_id,
        scan_id,
        include_remediation,
        page,
        page_size,
        component_name_filter,
        filter_on_policy_actions,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['applicationId'] = application_id
        if scan_id is not None:
            _path_params['scanId'] = scan_id
        # process the query parameters
        if include_remediation is not None:
            
            _query_params.append(('includeRemediation', include_remediation))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if component_name_filter is not None:
            
            _query_params.append(('componentNameFilter', component_name_filter))
            
        if filter_on_policy_actions is not None:
            
            _query_params.append(('filterOnPolicyActions', filter_on_policy_actions))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/developer/priorities/{applicationId}/{scanId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_priorities_export(
        self,
        application_id: Annotated[StrictStr, Field(description="Enter the applicationId.")],
        scan_id: Annotated[StrictStr, Field(description="Enter the scanId.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """get_priorities_export

        Use this method to retrieve the priorities, by providing the applicationId and scanId.  Permissions required: View IQ Elements

        :param application_id: Enter the applicationId. (required)
        :type application_id: str
        :param scan_id: Enter the scanId. (required)
        :type scan_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_priorities_export_serialize(
            application_id=application_id,
            scan_id=scan_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_priorities_export_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="Enter the applicationId.")],
        scan_id: Annotated[StrictStr, Field(description="Enter the scanId.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """get_priorities_export

        Use this method to retrieve the priorities, by providing the applicationId and scanId.  Permissions required: View IQ Elements

        :param application_id: Enter the applicationId. (required)
        :type application_id: str
        :param scan_id: Enter the scanId. (required)
        :type scan_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_priorities_export_serialize(
            application_id=application_id,
            scan_id=scan_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_priorities_export_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="Enter the applicationId.")],
        scan_id: Annotated[StrictStr, Field(description="Enter the scanId.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_priorities_export

        Use this method to retrieve the priorities, by providing the applicationId and scanId.  Permissions required: View IQ Elements

        :param application_id: Enter the applicationId. (required)
        :type application_id: str
        :param scan_id: Enter the scanId. (required)
        :type scan_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_priorities_export_serialize(
            application_id=application_id,
            scan_id=scan_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_priorities_export_serialize(
        self,
        application_id,
        scan_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['applicationId'] = application_id
        if scan_id is not None:
            _path_params['scanId'] = scan_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/developer/priorities/{applicationId}/{scanId}/export',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


