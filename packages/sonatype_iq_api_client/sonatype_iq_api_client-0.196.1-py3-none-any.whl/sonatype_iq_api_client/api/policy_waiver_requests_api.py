# coding: utf-8

"""
    Sonatype Lifecycle Public REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.196.0-01
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing_extensions import Annotated
from sonatype_iq_api_client.models.api_policy_waiver_request_dto import ApiPolicyWaiverRequestDTO
from sonatype_iq_api_client.models.api_policy_waiver_request_options_dto import ApiPolicyWaiverRequestOptionsDTO
from sonatype_iq_api_client.models.api_policy_waiver_request_review_dto import ApiPolicyWaiverRequestReviewDTO

from sonatype_iq_api_client.api_client import ApiClient, RequestSerialized
from sonatype_iq_api_client.api_response import ApiResponse
from sonatype_iq_api_client.rest import RESTResponseType


class PolicyWaiverRequestsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def add_policy_waiver_request_by_policy_violation_id(
        self,
        owner_type: Annotated[str, Field(strict=True, description="The scope of the policy waiver request. Possible values are application, organization, repository, repository_manager, repository_container.")],
        owner_id: Annotated[StrictStr, Field(description="The id for the ownerType provided above. E.g. applicationId if the ownerType is application.")],
        policy_violation_id: Annotated[StrictStr, Field(description="The policyViolationId for the policy violation on which you want to create a policy waiver request. Use the Policy Violation REST API or Reports REST API to obtain the policyViolationId.")],
        api_policy_waiver_request_options_dto: Annotated[ApiPolicyWaiverRequestOptionsDTO, Field(description="The request JSON can include the fields<ol><li>comment (optional, to indicate the reason of the waiver) default value is null</li><li>matcherStrategy (enumeration, required) can have values DEFAULT, EXACT_COMPONENT, ALL_COMPONENTS, ALL_VERSIONS. DEFAULT will match all components if no hash is provided.</li><li>expiryTime (default null) to set the datetime when the waiver expires.</li><li>expireWhenRemediationAvailable (default false) to expire the waiver when a remediation is available.</li><li>noteToReviewer (optional) to add a note to the reviewer</li></ol>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiPolicyWaiverRequestDTO:
        """add_policy_waiver_request_by_policy_violation_id

        Use this method to create a policy waiver request.  Permissions required: View IQ Elements

        :param owner_type: The scope of the policy waiver request. Possible values are application, organization, repository, repository_manager, repository_container. (required)
        :type owner_type: str
        :param owner_id: The id for the ownerType provided above. E.g. applicationId if the ownerType is application. (required)
        :type owner_id: str
        :param policy_violation_id: The policyViolationId for the policy violation on which you want to create a policy waiver request. Use the Policy Violation REST API or Reports REST API to obtain the policyViolationId. (required)
        :type policy_violation_id: str
        :param api_policy_waiver_request_options_dto: The request JSON can include the fields<ol><li>comment (optional, to indicate the reason of the waiver) default value is null</li><li>matcherStrategy (enumeration, required) can have values DEFAULT, EXACT_COMPONENT, ALL_COMPONENTS, ALL_VERSIONS. DEFAULT will match all components if no hash is provided.</li><li>expiryTime (default null) to set the datetime when the waiver expires.</li><li>expireWhenRemediationAvailable (default false) to expire the waiver when a remediation is available.</li><li>noteToReviewer (optional) to add a note to the reviewer</li></ol> (required)
        :type api_policy_waiver_request_options_dto: ApiPolicyWaiverRequestOptionsDTO
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_policy_waiver_request_by_policy_violation_id_serialize(
            owner_type=owner_type,
            owner_id=owner_id,
            policy_violation_id=policy_violation_id,
            api_policy_waiver_request_options_dto=api_policy_waiver_request_options_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiPolicyWaiverRequestDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_policy_waiver_request_by_policy_violation_id_with_http_info(
        self,
        owner_type: Annotated[str, Field(strict=True, description="The scope of the policy waiver request. Possible values are application, organization, repository, repository_manager, repository_container.")],
        owner_id: Annotated[StrictStr, Field(description="The id for the ownerType provided above. E.g. applicationId if the ownerType is application.")],
        policy_violation_id: Annotated[StrictStr, Field(description="The policyViolationId for the policy violation on which you want to create a policy waiver request. Use the Policy Violation REST API or Reports REST API to obtain the policyViolationId.")],
        api_policy_waiver_request_options_dto: Annotated[ApiPolicyWaiverRequestOptionsDTO, Field(description="The request JSON can include the fields<ol><li>comment (optional, to indicate the reason of the waiver) default value is null</li><li>matcherStrategy (enumeration, required) can have values DEFAULT, EXACT_COMPONENT, ALL_COMPONENTS, ALL_VERSIONS. DEFAULT will match all components if no hash is provided.</li><li>expiryTime (default null) to set the datetime when the waiver expires.</li><li>expireWhenRemediationAvailable (default false) to expire the waiver when a remediation is available.</li><li>noteToReviewer (optional) to add a note to the reviewer</li></ol>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ApiPolicyWaiverRequestDTO]:
        """add_policy_waiver_request_by_policy_violation_id

        Use this method to create a policy waiver request.  Permissions required: View IQ Elements

        :param owner_type: The scope of the policy waiver request. Possible values are application, organization, repository, repository_manager, repository_container. (required)
        :type owner_type: str
        :param owner_id: The id for the ownerType provided above. E.g. applicationId if the ownerType is application. (required)
        :type owner_id: str
        :param policy_violation_id: The policyViolationId for the policy violation on which you want to create a policy waiver request. Use the Policy Violation REST API or Reports REST API to obtain the policyViolationId. (required)
        :type policy_violation_id: str
        :param api_policy_waiver_request_options_dto: The request JSON can include the fields<ol><li>comment (optional, to indicate the reason of the waiver) default value is null</li><li>matcherStrategy (enumeration, required) can have values DEFAULT, EXACT_COMPONENT, ALL_COMPONENTS, ALL_VERSIONS. DEFAULT will match all components if no hash is provided.</li><li>expiryTime (default null) to set the datetime when the waiver expires.</li><li>expireWhenRemediationAvailable (default false) to expire the waiver when a remediation is available.</li><li>noteToReviewer (optional) to add a note to the reviewer</li></ol> (required)
        :type api_policy_waiver_request_options_dto: ApiPolicyWaiverRequestOptionsDTO
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_policy_waiver_request_by_policy_violation_id_serialize(
            owner_type=owner_type,
            owner_id=owner_id,
            policy_violation_id=policy_violation_id,
            api_policy_waiver_request_options_dto=api_policy_waiver_request_options_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiPolicyWaiverRequestDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_policy_waiver_request_by_policy_violation_id_without_preload_content(
        self,
        owner_type: Annotated[str, Field(strict=True, description="The scope of the policy waiver request. Possible values are application, organization, repository, repository_manager, repository_container.")],
        owner_id: Annotated[StrictStr, Field(description="The id for the ownerType provided above. E.g. applicationId if the ownerType is application.")],
        policy_violation_id: Annotated[StrictStr, Field(description="The policyViolationId for the policy violation on which you want to create a policy waiver request. Use the Policy Violation REST API or Reports REST API to obtain the policyViolationId.")],
        api_policy_waiver_request_options_dto: Annotated[ApiPolicyWaiverRequestOptionsDTO, Field(description="The request JSON can include the fields<ol><li>comment (optional, to indicate the reason of the waiver) default value is null</li><li>matcherStrategy (enumeration, required) can have values DEFAULT, EXACT_COMPONENT, ALL_COMPONENTS, ALL_VERSIONS. DEFAULT will match all components if no hash is provided.</li><li>expiryTime (default null) to set the datetime when the waiver expires.</li><li>expireWhenRemediationAvailable (default false) to expire the waiver when a remediation is available.</li><li>noteToReviewer (optional) to add a note to the reviewer</li></ol>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """add_policy_waiver_request_by_policy_violation_id

        Use this method to create a policy waiver request.  Permissions required: View IQ Elements

        :param owner_type: The scope of the policy waiver request. Possible values are application, organization, repository, repository_manager, repository_container. (required)
        :type owner_type: str
        :param owner_id: The id for the ownerType provided above. E.g. applicationId if the ownerType is application. (required)
        :type owner_id: str
        :param policy_violation_id: The policyViolationId for the policy violation on which you want to create a policy waiver request. Use the Policy Violation REST API or Reports REST API to obtain the policyViolationId. (required)
        :type policy_violation_id: str
        :param api_policy_waiver_request_options_dto: The request JSON can include the fields<ol><li>comment (optional, to indicate the reason of the waiver) default value is null</li><li>matcherStrategy (enumeration, required) can have values DEFAULT, EXACT_COMPONENT, ALL_COMPONENTS, ALL_VERSIONS. DEFAULT will match all components if no hash is provided.</li><li>expiryTime (default null) to set the datetime when the waiver expires.</li><li>expireWhenRemediationAvailable (default false) to expire the waiver when a remediation is available.</li><li>noteToReviewer (optional) to add a note to the reviewer</li></ol> (required)
        :type api_policy_waiver_request_options_dto: ApiPolicyWaiverRequestOptionsDTO
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_policy_waiver_request_by_policy_violation_id_serialize(
            owner_type=owner_type,
            owner_id=owner_id,
            policy_violation_id=policy_violation_id,
            api_policy_waiver_request_options_dto=api_policy_waiver_request_options_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiPolicyWaiverRequestDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_policy_waiver_request_by_policy_violation_id_serialize(
        self,
        owner_type,
        owner_id,
        policy_violation_id,
        api_policy_waiver_request_options_dto,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_type is not None:
            _path_params['ownerType'] = owner_type
        if owner_id is not None:
            _path_params['ownerId'] = owner_id
        if policy_violation_id is not None:
            _path_params['policyViolationId'] = policy_violation_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if api_policy_waiver_request_options_dto is not None:
            _body_params = api_policy_waiver_request_options_dto


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v2/policyWaiverRequests/{ownerType}/{ownerId}/policyViolation/{policyViolationId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_policy_waiver_request(
        self,
        owner_type: Annotated[str, Field(strict=True, description="The scope of the policy waiver request. Possible values are application, organization, repository, repository_manager, repository_container.")],
        owner_id: Annotated[StrictStr, Field(description="The id for the ownerType provided above.")],
        policy_waiver_request_id: Annotated[StrictStr, Field(description="The policyWaiverRequestId for which you want to retrieve the details.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiPolicyWaiverRequestDTO:
        """get_policy_waiver_request

        Use this method to retrieve policy waiver request details for the policyWaiverRequestId specified.  Permissions required: View IQ Elements

        :param owner_type: The scope of the policy waiver request. Possible values are application, organization, repository, repository_manager, repository_container. (required)
        :type owner_type: str
        :param owner_id: The id for the ownerType provided above. (required)
        :type owner_id: str
        :param policy_waiver_request_id: The policyWaiverRequestId for which you want to retrieve the details. (required)
        :type policy_waiver_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_policy_waiver_request_serialize(
            owner_type=owner_type,
            owner_id=owner_id,
            policy_waiver_request_id=policy_waiver_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiPolicyWaiverRequestDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_policy_waiver_request_with_http_info(
        self,
        owner_type: Annotated[str, Field(strict=True, description="The scope of the policy waiver request. Possible values are application, organization, repository, repository_manager, repository_container.")],
        owner_id: Annotated[StrictStr, Field(description="The id for the ownerType provided above.")],
        policy_waiver_request_id: Annotated[StrictStr, Field(description="The policyWaiverRequestId for which you want to retrieve the details.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ApiPolicyWaiverRequestDTO]:
        """get_policy_waiver_request

        Use this method to retrieve policy waiver request details for the policyWaiverRequestId specified.  Permissions required: View IQ Elements

        :param owner_type: The scope of the policy waiver request. Possible values are application, organization, repository, repository_manager, repository_container. (required)
        :type owner_type: str
        :param owner_id: The id for the ownerType provided above. (required)
        :type owner_id: str
        :param policy_waiver_request_id: The policyWaiverRequestId for which you want to retrieve the details. (required)
        :type policy_waiver_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_policy_waiver_request_serialize(
            owner_type=owner_type,
            owner_id=owner_id,
            policy_waiver_request_id=policy_waiver_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiPolicyWaiverRequestDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_policy_waiver_request_without_preload_content(
        self,
        owner_type: Annotated[str, Field(strict=True, description="The scope of the policy waiver request. Possible values are application, organization, repository, repository_manager, repository_container.")],
        owner_id: Annotated[StrictStr, Field(description="The id for the ownerType provided above.")],
        policy_waiver_request_id: Annotated[StrictStr, Field(description="The policyWaiverRequestId for which you want to retrieve the details.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_policy_waiver_request

        Use this method to retrieve policy waiver request details for the policyWaiverRequestId specified.  Permissions required: View IQ Elements

        :param owner_type: The scope of the policy waiver request. Possible values are application, organization, repository, repository_manager, repository_container. (required)
        :type owner_type: str
        :param owner_id: The id for the ownerType provided above. (required)
        :type owner_id: str
        :param policy_waiver_request_id: The policyWaiverRequestId for which you want to retrieve the details. (required)
        :type policy_waiver_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_policy_waiver_request_serialize(
            owner_type=owner_type,
            owner_id=owner_id,
            policy_waiver_request_id=policy_waiver_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiPolicyWaiverRequestDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_policy_waiver_request_serialize(
        self,
        owner_type,
        owner_id,
        policy_waiver_request_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_type is not None:
            _path_params['ownerType'] = owner_type
        if owner_id is not None:
            _path_params['ownerId'] = owner_id
        if policy_waiver_request_id is not None:
            _path_params['policyWaiverRequestId'] = policy_waiver_request_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/policyWaiverRequests/{ownerType}/{ownerId}/{policyWaiverRequestId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def review_policy_waiver_request(
        self,
        owner_type: Annotated[str, Field(strict=True, description="The scope of the policy waiver request. Possible values are application, organization, repository, repository_manager, repository_container.")],
        owner_id: Annotated[StrictStr, Field(description="The id for the ownerType provided above. E.g. applicationId if the ownerType is application.")],
        policy_waiver_request_id: Annotated[StrictStr, Field(description="The policyWaiverRequestId for the policy waiver request to be approved or rejected.")],
        api_policy_waiver_request_review_dto: Annotated[ApiPolicyWaiverRequestReviewDTO, Field(description="The request JSON can include the fields<ol><li>status. Can be APPROVED or REJECTED</li><li>rejectionReason (optional). A text explaining the reason for the rejection., <li>comment (optional, to indicate the reason of the waiver) default value is null</li><li>matcherStrategy (enumeration, required) can have values DEFAULT, EXACT_COMPONENT, ALL_COMPONENTS, ALL_VERSIONS. DEFAULT will match all components if no hash is provided.</li><li>expiryTime (default null) to set the datetime when the waiver expires.</li></ol><li>expireWhenRemediationAvailable (default false) to expire the waiver when a remediation is available.</li>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiPolicyWaiverRequestDTO:
        """review_policy_waiver_request

        Use this method to approve or reject a policy waiver request.  Permissions required: Waive Policy Violations

        :param owner_type: The scope of the policy waiver request. Possible values are application, organization, repository, repository_manager, repository_container. (required)
        :type owner_type: str
        :param owner_id: The id for the ownerType provided above. E.g. applicationId if the ownerType is application. (required)
        :type owner_id: str
        :param policy_waiver_request_id: The policyWaiverRequestId for the policy waiver request to be approved or rejected. (required)
        :type policy_waiver_request_id: str
        :param api_policy_waiver_request_review_dto: The request JSON can include the fields<ol><li>status. Can be APPROVED or REJECTED</li><li>rejectionReason (optional). A text explaining the reason for the rejection., <li>comment (optional, to indicate the reason of the waiver) default value is null</li><li>matcherStrategy (enumeration, required) can have values DEFAULT, EXACT_COMPONENT, ALL_COMPONENTS, ALL_VERSIONS. DEFAULT will match all components if no hash is provided.</li><li>expiryTime (default null) to set the datetime when the waiver expires.</li></ol><li>expireWhenRemediationAvailable (default false) to expire the waiver when a remediation is available.</li> (required)
        :type api_policy_waiver_request_review_dto: ApiPolicyWaiverRequestReviewDTO
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._review_policy_waiver_request_serialize(
            owner_type=owner_type,
            owner_id=owner_id,
            policy_waiver_request_id=policy_waiver_request_id,
            api_policy_waiver_request_review_dto=api_policy_waiver_request_review_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiPolicyWaiverRequestDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def review_policy_waiver_request_with_http_info(
        self,
        owner_type: Annotated[str, Field(strict=True, description="The scope of the policy waiver request. Possible values are application, organization, repository, repository_manager, repository_container.")],
        owner_id: Annotated[StrictStr, Field(description="The id for the ownerType provided above. E.g. applicationId if the ownerType is application.")],
        policy_waiver_request_id: Annotated[StrictStr, Field(description="The policyWaiverRequestId for the policy waiver request to be approved or rejected.")],
        api_policy_waiver_request_review_dto: Annotated[ApiPolicyWaiverRequestReviewDTO, Field(description="The request JSON can include the fields<ol><li>status. Can be APPROVED or REJECTED</li><li>rejectionReason (optional). A text explaining the reason for the rejection., <li>comment (optional, to indicate the reason of the waiver) default value is null</li><li>matcherStrategy (enumeration, required) can have values DEFAULT, EXACT_COMPONENT, ALL_COMPONENTS, ALL_VERSIONS. DEFAULT will match all components if no hash is provided.</li><li>expiryTime (default null) to set the datetime when the waiver expires.</li></ol><li>expireWhenRemediationAvailable (default false) to expire the waiver when a remediation is available.</li>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ApiPolicyWaiverRequestDTO]:
        """review_policy_waiver_request

        Use this method to approve or reject a policy waiver request.  Permissions required: Waive Policy Violations

        :param owner_type: The scope of the policy waiver request. Possible values are application, organization, repository, repository_manager, repository_container. (required)
        :type owner_type: str
        :param owner_id: The id for the ownerType provided above. E.g. applicationId if the ownerType is application. (required)
        :type owner_id: str
        :param policy_waiver_request_id: The policyWaiverRequestId for the policy waiver request to be approved or rejected. (required)
        :type policy_waiver_request_id: str
        :param api_policy_waiver_request_review_dto: The request JSON can include the fields<ol><li>status. Can be APPROVED or REJECTED</li><li>rejectionReason (optional). A text explaining the reason for the rejection., <li>comment (optional, to indicate the reason of the waiver) default value is null</li><li>matcherStrategy (enumeration, required) can have values DEFAULT, EXACT_COMPONENT, ALL_COMPONENTS, ALL_VERSIONS. DEFAULT will match all components if no hash is provided.</li><li>expiryTime (default null) to set the datetime when the waiver expires.</li></ol><li>expireWhenRemediationAvailable (default false) to expire the waiver when a remediation is available.</li> (required)
        :type api_policy_waiver_request_review_dto: ApiPolicyWaiverRequestReviewDTO
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._review_policy_waiver_request_serialize(
            owner_type=owner_type,
            owner_id=owner_id,
            policy_waiver_request_id=policy_waiver_request_id,
            api_policy_waiver_request_review_dto=api_policy_waiver_request_review_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiPolicyWaiverRequestDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def review_policy_waiver_request_without_preload_content(
        self,
        owner_type: Annotated[str, Field(strict=True, description="The scope of the policy waiver request. Possible values are application, organization, repository, repository_manager, repository_container.")],
        owner_id: Annotated[StrictStr, Field(description="The id for the ownerType provided above. E.g. applicationId if the ownerType is application.")],
        policy_waiver_request_id: Annotated[StrictStr, Field(description="The policyWaiverRequestId for the policy waiver request to be approved or rejected.")],
        api_policy_waiver_request_review_dto: Annotated[ApiPolicyWaiverRequestReviewDTO, Field(description="The request JSON can include the fields<ol><li>status. Can be APPROVED or REJECTED</li><li>rejectionReason (optional). A text explaining the reason for the rejection., <li>comment (optional, to indicate the reason of the waiver) default value is null</li><li>matcherStrategy (enumeration, required) can have values DEFAULT, EXACT_COMPONENT, ALL_COMPONENTS, ALL_VERSIONS. DEFAULT will match all components if no hash is provided.</li><li>expiryTime (default null) to set the datetime when the waiver expires.</li></ol><li>expireWhenRemediationAvailable (default false) to expire the waiver when a remediation is available.</li>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """review_policy_waiver_request

        Use this method to approve or reject a policy waiver request.  Permissions required: Waive Policy Violations

        :param owner_type: The scope of the policy waiver request. Possible values are application, organization, repository, repository_manager, repository_container. (required)
        :type owner_type: str
        :param owner_id: The id for the ownerType provided above. E.g. applicationId if the ownerType is application. (required)
        :type owner_id: str
        :param policy_waiver_request_id: The policyWaiverRequestId for the policy waiver request to be approved or rejected. (required)
        :type policy_waiver_request_id: str
        :param api_policy_waiver_request_review_dto: The request JSON can include the fields<ol><li>status. Can be APPROVED or REJECTED</li><li>rejectionReason (optional). A text explaining the reason for the rejection., <li>comment (optional, to indicate the reason of the waiver) default value is null</li><li>matcherStrategy (enumeration, required) can have values DEFAULT, EXACT_COMPONENT, ALL_COMPONENTS, ALL_VERSIONS. DEFAULT will match all components if no hash is provided.</li><li>expiryTime (default null) to set the datetime when the waiver expires.</li></ol><li>expireWhenRemediationAvailable (default false) to expire the waiver when a remediation is available.</li> (required)
        :type api_policy_waiver_request_review_dto: ApiPolicyWaiverRequestReviewDTO
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._review_policy_waiver_request_serialize(
            owner_type=owner_type,
            owner_id=owner_id,
            policy_waiver_request_id=policy_waiver_request_id,
            api_policy_waiver_request_review_dto=api_policy_waiver_request_review_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiPolicyWaiverRequestDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _review_policy_waiver_request_serialize(
        self,
        owner_type,
        owner_id,
        policy_waiver_request_id,
        api_policy_waiver_request_review_dto,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_type is not None:
            _path_params['ownerType'] = owner_type
        if owner_id is not None:
            _path_params['ownerId'] = owner_id
        if policy_waiver_request_id is not None:
            _path_params['policyWaiverRequestId'] = policy_waiver_request_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if api_policy_waiver_request_review_dto is not None:
            _body_params = api_policy_waiver_request_review_dto


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v2/policyWaiverRequests/{ownerType}/{ownerId}/review/{policyWaiverRequestId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_policy_waiver_request(
        self,
        owner_type: Annotated[str, Field(strict=True, description="The scope of the policy waiver request. Possible values are application, organization, repository, repository_manager, repository_container.")],
        owner_id: Annotated[StrictStr, Field(description="The id for the ownerType provided above. E.g. applicationId if the ownerType is application.")],
        policy_waiver_request_id: Annotated[StrictStr, Field(description="The id of the policy waiver request to be updated.")],
        api_policy_waiver_request_options_dto: Annotated[ApiPolicyWaiverRequestOptionsDTO, Field(description="The request JSON can include the fields<ol><li>comment (optional, to indicate the reason of the waiver) default value is null</li><li>matcherStrategy (enumeration, required) can have values DEFAULT, EXACT_COMPONENT, ALL_COMPONENTS, ALL_VERSIONS. DEFAULT will match all components if no hash is provided.</li><li>expiryTime (default null) to set the datetime when the waiver expires.</li><li>expireWhenRemediationAvailable (default false) to expire the waiver when a remediation is available.</li><li>noteToReviewer (optional) to add a note to the reviewer</li></ol>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiPolicyWaiverRequestDTO:
        """update_policy_waiver_request

        Use this method to update a policy waiver request.  Permissions required: View IQ Elements

        :param owner_type: The scope of the policy waiver request. Possible values are application, organization, repository, repository_manager, repository_container. (required)
        :type owner_type: str
        :param owner_id: The id for the ownerType provided above. E.g. applicationId if the ownerType is application. (required)
        :type owner_id: str
        :param policy_waiver_request_id: The id of the policy waiver request to be updated. (required)
        :type policy_waiver_request_id: str
        :param api_policy_waiver_request_options_dto: The request JSON can include the fields<ol><li>comment (optional, to indicate the reason of the waiver) default value is null</li><li>matcherStrategy (enumeration, required) can have values DEFAULT, EXACT_COMPONENT, ALL_COMPONENTS, ALL_VERSIONS. DEFAULT will match all components if no hash is provided.</li><li>expiryTime (default null) to set the datetime when the waiver expires.</li><li>expireWhenRemediationAvailable (default false) to expire the waiver when a remediation is available.</li><li>noteToReviewer (optional) to add a note to the reviewer</li></ol> (required)
        :type api_policy_waiver_request_options_dto: ApiPolicyWaiverRequestOptionsDTO
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_policy_waiver_request_serialize(
            owner_type=owner_type,
            owner_id=owner_id,
            policy_waiver_request_id=policy_waiver_request_id,
            api_policy_waiver_request_options_dto=api_policy_waiver_request_options_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiPolicyWaiverRequestDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_policy_waiver_request_with_http_info(
        self,
        owner_type: Annotated[str, Field(strict=True, description="The scope of the policy waiver request. Possible values are application, organization, repository, repository_manager, repository_container.")],
        owner_id: Annotated[StrictStr, Field(description="The id for the ownerType provided above. E.g. applicationId if the ownerType is application.")],
        policy_waiver_request_id: Annotated[StrictStr, Field(description="The id of the policy waiver request to be updated.")],
        api_policy_waiver_request_options_dto: Annotated[ApiPolicyWaiverRequestOptionsDTO, Field(description="The request JSON can include the fields<ol><li>comment (optional, to indicate the reason of the waiver) default value is null</li><li>matcherStrategy (enumeration, required) can have values DEFAULT, EXACT_COMPONENT, ALL_COMPONENTS, ALL_VERSIONS. DEFAULT will match all components if no hash is provided.</li><li>expiryTime (default null) to set the datetime when the waiver expires.</li><li>expireWhenRemediationAvailable (default false) to expire the waiver when a remediation is available.</li><li>noteToReviewer (optional) to add a note to the reviewer</li></ol>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ApiPolicyWaiverRequestDTO]:
        """update_policy_waiver_request

        Use this method to update a policy waiver request.  Permissions required: View IQ Elements

        :param owner_type: The scope of the policy waiver request. Possible values are application, organization, repository, repository_manager, repository_container. (required)
        :type owner_type: str
        :param owner_id: The id for the ownerType provided above. E.g. applicationId if the ownerType is application. (required)
        :type owner_id: str
        :param policy_waiver_request_id: The id of the policy waiver request to be updated. (required)
        :type policy_waiver_request_id: str
        :param api_policy_waiver_request_options_dto: The request JSON can include the fields<ol><li>comment (optional, to indicate the reason of the waiver) default value is null</li><li>matcherStrategy (enumeration, required) can have values DEFAULT, EXACT_COMPONENT, ALL_COMPONENTS, ALL_VERSIONS. DEFAULT will match all components if no hash is provided.</li><li>expiryTime (default null) to set the datetime when the waiver expires.</li><li>expireWhenRemediationAvailable (default false) to expire the waiver when a remediation is available.</li><li>noteToReviewer (optional) to add a note to the reviewer</li></ol> (required)
        :type api_policy_waiver_request_options_dto: ApiPolicyWaiverRequestOptionsDTO
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_policy_waiver_request_serialize(
            owner_type=owner_type,
            owner_id=owner_id,
            policy_waiver_request_id=policy_waiver_request_id,
            api_policy_waiver_request_options_dto=api_policy_waiver_request_options_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiPolicyWaiverRequestDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_policy_waiver_request_without_preload_content(
        self,
        owner_type: Annotated[str, Field(strict=True, description="The scope of the policy waiver request. Possible values are application, organization, repository, repository_manager, repository_container.")],
        owner_id: Annotated[StrictStr, Field(description="The id for the ownerType provided above. E.g. applicationId if the ownerType is application.")],
        policy_waiver_request_id: Annotated[StrictStr, Field(description="The id of the policy waiver request to be updated.")],
        api_policy_waiver_request_options_dto: Annotated[ApiPolicyWaiverRequestOptionsDTO, Field(description="The request JSON can include the fields<ol><li>comment (optional, to indicate the reason of the waiver) default value is null</li><li>matcherStrategy (enumeration, required) can have values DEFAULT, EXACT_COMPONENT, ALL_COMPONENTS, ALL_VERSIONS. DEFAULT will match all components if no hash is provided.</li><li>expiryTime (default null) to set the datetime when the waiver expires.</li><li>expireWhenRemediationAvailable (default false) to expire the waiver when a remediation is available.</li><li>noteToReviewer (optional) to add a note to the reviewer</li></ol>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_policy_waiver_request

        Use this method to update a policy waiver request.  Permissions required: View IQ Elements

        :param owner_type: The scope of the policy waiver request. Possible values are application, organization, repository, repository_manager, repository_container. (required)
        :type owner_type: str
        :param owner_id: The id for the ownerType provided above. E.g. applicationId if the ownerType is application. (required)
        :type owner_id: str
        :param policy_waiver_request_id: The id of the policy waiver request to be updated. (required)
        :type policy_waiver_request_id: str
        :param api_policy_waiver_request_options_dto: The request JSON can include the fields<ol><li>comment (optional, to indicate the reason of the waiver) default value is null</li><li>matcherStrategy (enumeration, required) can have values DEFAULT, EXACT_COMPONENT, ALL_COMPONENTS, ALL_VERSIONS. DEFAULT will match all components if no hash is provided.</li><li>expiryTime (default null) to set the datetime when the waiver expires.</li><li>expireWhenRemediationAvailable (default false) to expire the waiver when a remediation is available.</li><li>noteToReviewer (optional) to add a note to the reviewer</li></ol> (required)
        :type api_policy_waiver_request_options_dto: ApiPolicyWaiverRequestOptionsDTO
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_policy_waiver_request_serialize(
            owner_type=owner_type,
            owner_id=owner_id,
            policy_waiver_request_id=policy_waiver_request_id,
            api_policy_waiver_request_options_dto=api_policy_waiver_request_options_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiPolicyWaiverRequestDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_policy_waiver_request_serialize(
        self,
        owner_type,
        owner_id,
        policy_waiver_request_id,
        api_policy_waiver_request_options_dto,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_type is not None:
            _path_params['ownerType'] = owner_type
        if owner_id is not None:
            _path_params['ownerId'] = owner_id
        if policy_waiver_request_id is not None:
            _path_params['policyWaiverRequestId'] = policy_waiver_request_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if api_policy_waiver_request_options_dto is not None:
            _body_params = api_policy_waiver_request_options_dto


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/api/v2/policyWaiverRequests/{ownerType}/{ownerId}/{policyWaiverRequestId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


