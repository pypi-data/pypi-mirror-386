# coding: utf-8

"""
    Sonatype Lifecycle Public REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.196.0-01
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from sonatype_iq_api_client.models.component_identifier import ComponentIdentifier
from sonatype_iq_api_client.models.constraint_fact import ConstraintFact
from typing import Optional, Set
from typing_extensions import Self

class ApiAutoPolicyWaiverExclusionResponseDTO(BaseModel):
    """
    ApiAutoPolicyWaiverExclusionResponseDTO
    """ # noqa: E501
    auto_policy_waiver_exclusion_id: Optional[StrictStr] = Field(default=None, alias="autoPolicyWaiverExclusionId")
    auto_policy_waiver_id: Optional[StrictStr] = Field(default=None, alias="autoPolicyWaiverId")
    component_display_name: Optional[StrictStr] = Field(default=None, alias="componentDisplayName")
    component_identifier: Optional[ComponentIdentifier] = Field(default=None, alias="componentIdentifier")
    component_match_strategy: Optional[StrictStr] = Field(default=None, alias="componentMatchStrategy")
    constraint_facts: Optional[List[ConstraintFact]] = Field(default=None, alias="constraintFacts")
    create_time: Optional[datetime] = Field(default=None, alias="createTime")
    creator_id: Optional[StrictStr] = Field(default=None, alias="creatorId")
    creator_name: Optional[StrictStr] = Field(default=None, alias="creatorName")
    hash: Optional[StrictStr] = None
    owner_id: Optional[StrictStr] = Field(default=None, alias="ownerId")
    owner_name: Optional[StrictStr] = Field(default=None, alias="ownerName")
    owner_public_id: Optional[StrictStr] = Field(default=None, alias="ownerPublicId")
    owner_type: Optional[StrictStr] = Field(default=None, alias="ownerType")
    policy_id: Optional[StrictStr] = Field(default=None, alias="policyId")
    policy_name: Optional[StrictStr] = Field(default=None, alias="policyName")
    policy_violation_id: Optional[StrictStr] = Field(default=None, alias="policyViolationId")
    scan_id: Optional[StrictStr] = Field(default=None, alias="scanId")
    threat_level: Optional[StrictInt] = Field(default=None, alias="threatLevel")
    vulnerability_identifiers: Optional[StrictStr] = Field(default=None, alias="vulnerabilityIdentifiers")
    __properties: ClassVar[List[str]] = ["autoPolicyWaiverExclusionId", "autoPolicyWaiverId", "componentDisplayName", "componentIdentifier", "componentMatchStrategy", "constraintFacts", "createTime", "creatorId", "creatorName", "hash", "ownerId", "ownerName", "ownerPublicId", "ownerType", "policyId", "policyName", "policyViolationId", "scanId", "threatLevel", "vulnerabilityIdentifiers"]

    @field_validator('component_match_strategy')
    def component_match_strategy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXACT_COMPONENT', 'ALL_VERSIONS', 'POLICY_VIOLATION']):
            raise ValueError("must be one of enum values ('EXACT_COMPONENT', 'ALL_VERSIONS', 'POLICY_VIOLATION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiAutoPolicyWaiverExclusionResponseDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of component_identifier
        if self.component_identifier:
            _dict['componentIdentifier'] = self.component_identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in constraint_facts (list)
        _items = []
        if self.constraint_facts:
            for _item_constraint_facts in self.constraint_facts:
                if _item_constraint_facts:
                    _items.append(_item_constraint_facts.to_dict())
            _dict['constraintFacts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiAutoPolicyWaiverExclusionResponseDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoPolicyWaiverExclusionId": obj.get("autoPolicyWaiverExclusionId"),
            "autoPolicyWaiverId": obj.get("autoPolicyWaiverId"),
            "componentDisplayName": obj.get("componentDisplayName"),
            "componentIdentifier": ComponentIdentifier.from_dict(obj["componentIdentifier"]) if obj.get("componentIdentifier") is not None else None,
            "componentMatchStrategy": obj.get("componentMatchStrategy"),
            "constraintFacts": [ConstraintFact.from_dict(_item) for _item in obj["constraintFacts"]] if obj.get("constraintFacts") is not None else None,
            "createTime": obj.get("createTime"),
            "creatorId": obj.get("creatorId"),
            "creatorName": obj.get("creatorName"),
            "hash": obj.get("hash"),
            "ownerId": obj.get("ownerId"),
            "ownerName": obj.get("ownerName"),
            "ownerPublicId": obj.get("ownerPublicId"),
            "ownerType": obj.get("ownerType"),
            "policyId": obj.get("policyId"),
            "policyName": obj.get("policyName"),
            "policyViolationId": obj.get("policyViolationId"),
            "scanId": obj.get("scanId"),
            "threatLevel": obj.get("threatLevel"),
            "vulnerabilityIdentifiers": obj.get("vulnerabilityIdentifiers")
        })
        return _obj


