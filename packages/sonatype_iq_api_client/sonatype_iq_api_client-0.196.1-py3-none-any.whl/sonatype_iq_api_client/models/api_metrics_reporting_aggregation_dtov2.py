# coding: utf-8

"""
    Sonatype Lifecycle Public REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.196.0-01
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ApiMetricsReportingAggregationDTOV2(BaseModel):
    """
    ApiMetricsReportingAggregationDTOV2
    """ # noqa: E501
    discovered_counts: Optional[Dict[str, Dict[str, StrictInt]]] = Field(default=None, alias="discoveredCounts")
    evaluation_count: Optional[StrictInt] = Field(default=None, alias="evaluationCount")
    fixed_counts: Optional[Dict[str, Dict[str, StrictInt]]] = Field(default=None, alias="fixedCounts")
    mttr_critical_threat: Optional[StrictInt] = Field(default=None, alias="mttrCriticalThreat")
    mttr_low_threat: Optional[StrictInt] = Field(default=None, alias="mttrLowThreat")
    mttr_moderate_threat: Optional[StrictInt] = Field(default=None, alias="mttrModerateThreat")
    mttr_severe_threat: Optional[StrictInt] = Field(default=None, alias="mttrSevereThreat")
    open_counts_at_time_period_end: Optional[Dict[str, Dict[str, StrictInt]]] = Field(default=None, alias="openCountsAtTimePeriodEnd")
    time_period_start: Optional[StrictStr] = Field(default=None, alias="timePeriodStart")
    waived_counts: Optional[Dict[str, Dict[str, StrictInt]]] = Field(default=None, alias="waivedCounts")
    __properties: ClassVar[List[str]] = ["discoveredCounts", "evaluationCount", "fixedCounts", "mttrCriticalThreat", "mttrLowThreat", "mttrModerateThreat", "mttrSevereThreat", "openCountsAtTimePeriodEnd", "timePeriodStart", "waivedCounts"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiMetricsReportingAggregationDTOV2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiMetricsReportingAggregationDTOV2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "discoveredCounts": obj.get("discoveredCounts"),
            "evaluationCount": obj.get("evaluationCount"),
            "fixedCounts": obj.get("fixedCounts"),
            "mttrCriticalThreat": obj.get("mttrCriticalThreat"),
            "mttrLowThreat": obj.get("mttrLowThreat"),
            "mttrModerateThreat": obj.get("mttrModerateThreat"),
            "mttrSevereThreat": obj.get("mttrSevereThreat"),
            "openCountsAtTimePeriodEnd": obj.get("openCountsAtTimePeriodEnd"),
            "timePeriodStart": obj.get("timePeriodStart"),
            "waivedCounts": obj.get("waivedCounts")
        })
        return _obj


