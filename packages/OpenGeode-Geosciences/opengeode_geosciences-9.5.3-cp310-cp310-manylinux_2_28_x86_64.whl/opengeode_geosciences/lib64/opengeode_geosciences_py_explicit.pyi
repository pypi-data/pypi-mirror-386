"""
OpenGeode-Geosciences Python binding for explicit library
"""
from __future__ import annotations
import opengeode.lib64.opengeode_py_basic
import opengeode.lib64.opengeode_py_mesh
import opengeode.lib64.opengeode_py_model
import typing
__all__: list[str] = ['AdditionalFileCrossSection', 'AdditionalFileStructuralModel', 'AdditionalFilesCrossSection', 'AdditionalFilesStructuralModel', 'CrossSection', 'CrossSectionBuilder', 'CrossSectionInputFactory', 'CrossSectionOutputFactory', 'Fault2D', 'Fault3D', 'FaultBlock2D', 'FaultBlock3D', 'FaultBlocks2D', 'FaultBlocks3D', 'FaultBlocksBuilder2D', 'FaultBlocksBuilder3D', 'Faults2D', 'Faults3D', 'FaultsBuilder2D', 'FaultsBuilder3D', 'GeographicCoordinateSystem2D', 'GeographicCoordinateSystem3D', 'GeographicCoordinateSystemInfo2D', 'GeographicCoordinateSystemInfo3D', 'GeosciencesExplicitLibrary', 'Horizon2D', 'Horizon3D', 'Horizons2D', 'Horizons3D', 'HorizonsBuilder2D', 'HorizonsBuilder3D', 'StratigraphicUnit2D', 'StratigraphicUnit3D', 'StratigraphicUnits2D', 'StratigraphicUnits3D', 'StratigraphicUnitsBuilder2D', 'StratigraphicUnitsBuilder3D', 'StructuralModel', 'StructuralModelBuilder', 'StructuralModelInputFactory', 'StructuralModelOutputFactory', 'assign_brep_geographic_coordinate_system_info', 'assign_edged_curve_geographic_coordinate_system_info2D', 'assign_edged_curve_geographic_coordinate_system_info3D', 'assign_point_set_geographic_coordinate_system_info2D', 'assign_point_set_geographic_coordinate_system_info3D', 'assign_section_geographic_coordinate_system_info', 'assign_solid_mesh_geographic_coordinate_system_info3D', 'assign_surface_mesh_geographic_coordinate_system_info2D', 'assign_surface_mesh_geographic_coordinate_system_info3D', 'convert_brep_coordinate_reference_system', 'convert_edged_curve_coordinate_reference_system2D', 'convert_edged_curve_coordinate_reference_system3D', 'convert_point_set_coordinate_reference_system2D', 'convert_point_set_coordinate_reference_system3D', 'convert_section_coordinate_reference_system', 'convert_solid_mesh_coordinate_reference_system3D', 'convert_surface_mesh_coordinate_reference_system2D', 'convert_surface_mesh_coordinate_reference_system3D', 'cross_section_additional_files', 'cross_section_object_priority', 'is_cross_section_loadable', 'is_cross_section_saveable', 'is_structural_model_loadable', 'is_structural_model_saveable', 'load_cross_section', 'load_structural_model', 'save_cross_section', 'save_structural_model', 'structural_model_additional_files', 'structural_model_object_priority']
class AdditionalFileCrossSection:
    filename: str
    is_missing: bool
class AdditionalFileStructuralModel:
    filename: str
    is_missing: bool
class AdditionalFilesCrossSection:
    mandatory_files: list[AdditionalFileCrossSection]
    optional_files: list[AdditionalFileCrossSection]
    def has_additional_files(self) -> bool:
        ...
class AdditionalFilesStructuralModel:
    mandatory_files: list[AdditionalFileStructuralModel]
    optional_files: list[AdditionalFileStructuralModel]
    def has_additional_files(self) -> bool:
        ...
class CrossSection(opengeode.lib64.opengeode_py_model.Section, Faults2D, Horizons2D, FaultBlocks2D, StratigraphicUnits2D):
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: opengeode.lib64.opengeode_py_model.Section) -> None:
        ...
    def cross_section_component(self, arg0: opengeode.lib64.opengeode_py_basic.uuid) -> opengeode.lib64.opengeode_py_model.Component2D:
        ...
    def fault_block_items(self, arg0: FaultBlock2D) -> list[opengeode.lib64.opengeode_py_model.Surface2D]:
        ...
    def fault_items(self, arg0: Fault2D) -> list[opengeode.lib64.opengeode_py_model.Line2D]:
        ...
    def horizon_items(self, arg0: Horizon2D) -> list[opengeode.lib64.opengeode_py_model.Line2D]:
        ...
    def native_extension(self) -> str:
        ...
    def stratigraphic_unit_items(self, arg0: StratigraphicUnit2D) -> list[opengeode.lib64.opengeode_py_model.Surface2D]:
        ...
class CrossSectionBuilder(opengeode.lib64.opengeode_py_model.SectionBuilder, FaultsBuilder2D, HorizonsBuilder2D, FaultBlocksBuilder2D, StratigraphicUnitsBuilder2D):
    def __init__(self, arg0: CrossSection) -> None:
        ...
    def add_fault(self) -> opengeode.lib64.opengeode_py_basic.uuid:
        ...
    def add_fault_block(self) -> opengeode.lib64.opengeode_py_basic.uuid:
        ...
    def add_horizon(self) -> opengeode.lib64.opengeode_py_basic.uuid:
        ...
    def add_line_in_fault(self, arg0: opengeode.lib64.opengeode_py_model.Line2D, arg1: Fault2D) -> int:
        ...
    def add_line_in_horizon(self, arg0: opengeode.lib64.opengeode_py_model.Line2D, arg1: Horizon2D) -> int:
        ...
    def add_stratigraphic_unit(self) -> opengeode.lib64.opengeode_py_basic.uuid:
        ...
    def add_surface_in_fault_block(self, arg0: opengeode.lib64.opengeode_py_model.Surface2D, arg1: FaultBlock2D) -> int:
        ...
    def add_surface_in_stratigraphic_unit(self, arg0: opengeode.lib64.opengeode_py_model.Surface2D, arg1: StratigraphicUnit2D) -> int:
        ...
    def copy(self, arg0: CrossSection) -> None:
        ...
    def remove_fault(self, arg0: Fault2D) -> None:
        ...
    def remove_fault_block(self, arg0: FaultBlock2D) -> None:
        ...
    def remove_horizon(self, arg0: Horizon2D) -> None:
        ...
    def remove_stratigraphic_unit(self, arg0: StratigraphicUnit2D) -> None:
        ...
class CrossSectionInputFactory:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class CrossSectionOutputFactory:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class Fault2D(opengeode.lib64.opengeode_py_model.Component2D):
    class FAULT_TYPE:
        """
        Members:
        
          NO_TYPE
        
          NORMAL
        
          REVERSE
        
          STRIKE_SLIP
        
          LISTRIC
        
          DECOLLEMENT
        """
        DECOLLEMENT: typing.ClassVar[Fault2D.FAULT_TYPE]  # value = <FAULT_TYPE.DECOLLEMENT: 5>
        LISTRIC: typing.ClassVar[Fault2D.FAULT_TYPE]  # value = <FAULT_TYPE.LISTRIC: 4>
        NORMAL: typing.ClassVar[Fault2D.FAULT_TYPE]  # value = <FAULT_TYPE.NORMAL: 1>
        NO_TYPE: typing.ClassVar[Fault2D.FAULT_TYPE]  # value = <FAULT_TYPE.NO_TYPE: 0>
        REVERSE: typing.ClassVar[Fault2D.FAULT_TYPE]  # value = <FAULT_TYPE.REVERSE: 2>
        STRIKE_SLIP: typing.ClassVar[Fault2D.FAULT_TYPE]  # value = <FAULT_TYPE.STRIKE_SLIP: 3>
        __members__: typing.ClassVar[dict[str, Fault2D.FAULT_TYPE]]  # value = {'NO_TYPE': <FAULT_TYPE.NO_TYPE: 0>, 'NORMAL': <FAULT_TYPE.NORMAL: 1>, 'REVERSE': <FAULT_TYPE.REVERSE: 2>, 'STRIKE_SLIP': <FAULT_TYPE.STRIKE_SLIP: 3>, 'LISTRIC': <FAULT_TYPE.LISTRIC: 4>, 'DECOLLEMENT': <FAULT_TYPE.DECOLLEMENT: 5>}
        def __eq__(self, other: typing.Any) -> bool:
            ...
        def __getstate__(self) -> int:
            ...
        def __hash__(self) -> int:
            ...
        def __index__(self) -> int:
            ...
        def __init__(self, value: int) -> None:
            ...
        def __int__(self) -> int:
            ...
        def __ne__(self, other: typing.Any) -> bool:
            ...
        def __repr__(self) -> str:
            ...
        def __setstate__(self, state: int) -> None:
            ...
        def __str__(self) -> str:
            ...
        @property
        def name(self) -> str:
            ...
        @property
        def value(self) -> int:
            ...
    def component_id(self) -> opengeode.lib64.opengeode_py_model.ComponentID:
        ...
    def has_type(self) -> bool:
        ...
    def type(self) -> Fault2D.FAULT_TYPE:
        ...
class Fault3D(opengeode.lib64.opengeode_py_model.Component3D):
    class FAULT_TYPE:
        """
        Members:
        
          NO_TYPE
        
          NORMAL
        
          REVERSE
        
          STRIKE_SLIP
        
          LISTRIC
        
          DECOLLEMENT
        """
        DECOLLEMENT: typing.ClassVar[Fault3D.FAULT_TYPE]  # value = <FAULT_TYPE.DECOLLEMENT: 5>
        LISTRIC: typing.ClassVar[Fault3D.FAULT_TYPE]  # value = <FAULT_TYPE.LISTRIC: 4>
        NORMAL: typing.ClassVar[Fault3D.FAULT_TYPE]  # value = <FAULT_TYPE.NORMAL: 1>
        NO_TYPE: typing.ClassVar[Fault3D.FAULT_TYPE]  # value = <FAULT_TYPE.NO_TYPE: 0>
        REVERSE: typing.ClassVar[Fault3D.FAULT_TYPE]  # value = <FAULT_TYPE.REVERSE: 2>
        STRIKE_SLIP: typing.ClassVar[Fault3D.FAULT_TYPE]  # value = <FAULT_TYPE.STRIKE_SLIP: 3>
        __members__: typing.ClassVar[dict[str, Fault3D.FAULT_TYPE]]  # value = {'NO_TYPE': <FAULT_TYPE.NO_TYPE: 0>, 'NORMAL': <FAULT_TYPE.NORMAL: 1>, 'REVERSE': <FAULT_TYPE.REVERSE: 2>, 'STRIKE_SLIP': <FAULT_TYPE.STRIKE_SLIP: 3>, 'LISTRIC': <FAULT_TYPE.LISTRIC: 4>, 'DECOLLEMENT': <FAULT_TYPE.DECOLLEMENT: 5>}
        def __eq__(self, other: typing.Any) -> bool:
            ...
        def __getstate__(self) -> int:
            ...
        def __hash__(self) -> int:
            ...
        def __index__(self) -> int:
            ...
        def __init__(self, value: int) -> None:
            ...
        def __int__(self) -> int:
            ...
        def __ne__(self, other: typing.Any) -> bool:
            ...
        def __repr__(self) -> str:
            ...
        def __setstate__(self, state: int) -> None:
            ...
        def __str__(self) -> str:
            ...
        @property
        def name(self) -> str:
            ...
        @property
        def value(self) -> int:
            ...
    def component_id(self) -> opengeode.lib64.opengeode_py_model.ComponentID:
        ...
    def has_type(self) -> bool:
        ...
    def type(self) -> Fault3D.FAULT_TYPE:
        ...
class FaultBlock2D(opengeode.lib64.opengeode_py_model.Component2D):
    def component_id(self) -> opengeode.lib64.opengeode_py_model.ComponentID:
        ...
class FaultBlock3D(opengeode.lib64.opengeode_py_model.Component3D):
    def component_id(self) -> opengeode.lib64.opengeode_py_model.ComponentID:
        ...
class FaultBlocks2D:
    def fault_block(self, arg0: opengeode.lib64.opengeode_py_basic.uuid) -> FaultBlock2D:
        ...
    def fault_blocks(self) -> list[FaultBlock2D]:
        ...
    def nb_fault_blocks(self) -> int:
        ...
class FaultBlocks3D:
    def fault_block(self, arg0: opengeode.lib64.opengeode_py_basic.uuid) -> FaultBlock3D:
        ...
    def fault_blocks(self) -> list[FaultBlock3D]:
        ...
    def nb_fault_blocks(self) -> int:
        ...
class FaultBlocksBuilder2D:
    def set_fault_block_name(self, arg0: opengeode.lib64.opengeode_py_basic.uuid, arg1: str) -> None:
        ...
class FaultBlocksBuilder3D:
    def set_fault_block_name(self, arg0: opengeode.lib64.opengeode_py_basic.uuid, arg1: str) -> None:
        ...
class Faults2D:
    def fault(self, arg0: opengeode.lib64.opengeode_py_basic.uuid) -> Fault2D:
        ...
    def faults(self) -> list[Fault2D]:
        ...
    def nb_faults(self) -> int:
        ...
class Faults3D:
    def fault(self, arg0: opengeode.lib64.opengeode_py_basic.uuid) -> Fault3D:
        ...
    def faults(self) -> list[Fault3D]:
        ...
    def nb_faults(self) -> int:
        ...
class FaultsBuilder2D:
    def set_fault_name(self, arg0: opengeode.lib64.opengeode_py_basic.uuid, arg1: str) -> None:
        ...
    def set_fault_type(self, arg0: opengeode.lib64.opengeode_py_basic.uuid, arg1: Fault2D.FAULT_TYPE) -> None:
        ...
class FaultsBuilder3D:
    def set_fault_name(self, arg0: opengeode.lib64.opengeode_py_basic.uuid, arg1: str) -> None:
        ...
    def set_fault_type(self, arg0: opengeode.lib64.opengeode_py_basic.uuid, arg1: Fault3D.FAULT_TYPE) -> None:
        ...
class GeographicCoordinateSystem2D(opengeode.lib64.opengeode_py_mesh.CoordinateReferenceSystem2D):
    @staticmethod
    def geographic_coordinate_systems() -> list[GeographicCoordinateSystemInfo2D]:
        ...
    @staticmethod
    def type_name_static() -> opengeode.lib64.opengeode_py_mesh.CRSType:
        ...
    def __init__(self, arg0: opengeode.lib64.opengeode_py_basic.AttributeManager, arg1: GeographicCoordinateSystemInfo2D) -> None:
        ...
    def import_coordinates(self, arg0: GeographicCoordinateSystem2D) -> None:
        ...
    def info(self) -> GeographicCoordinateSystemInfo2D:
        ...
class GeographicCoordinateSystem3D(opengeode.lib64.opengeode_py_mesh.CoordinateReferenceSystem3D):
    @staticmethod
    def geographic_coordinate_systems() -> list[GeographicCoordinateSystemInfo3D]:
        ...
    @staticmethod
    def type_name_static() -> opengeode.lib64.opengeode_py_mesh.CRSType:
        ...
    def __init__(self, arg0: opengeode.lib64.opengeode_py_basic.AttributeManager, arg1: GeographicCoordinateSystemInfo3D) -> None:
        ...
    def import_coordinates(self, arg0: GeographicCoordinateSystem3D) -> None:
        ...
    def info(self) -> GeographicCoordinateSystemInfo3D:
        ...
class GeographicCoordinateSystemInfo2D:
    authority: str
    code: str
    name: str
    def __init__(self, arg0: str, arg1: str, arg2: str) -> None:
        ...
    def authority_code(self) -> str:
        ...
    def string(self) -> str:
        ...
class GeographicCoordinateSystemInfo3D:
    authority: str
    code: str
    name: str
    def __init__(self, arg0: str, arg1: str, arg2: str) -> None:
        ...
    def authority_code(self) -> str:
        ...
    def string(self) -> str:
        ...
class GeosciencesExplicitLibrary:
    @staticmethod
    def initialize() -> None:
        ...
class Horizon2D(opengeode.lib64.opengeode_py_model.Component2D):
    class CONTACT_TYPE:
        """
        Members:
        
          CONFORMAL
        
          EROSION
        
          BASELAP
        
          DISCONTINUITY
        
          TOPOGRAPHY
        
          INTRUSION
        """
        BASELAP: typing.ClassVar[Horizon2D.CONTACT_TYPE]  # value = <CONTACT_TYPE.BASELAP: 2>
        CONFORMAL: typing.ClassVar[Horizon2D.CONTACT_TYPE]  # value = <CONTACT_TYPE.CONFORMAL: 0>
        DISCONTINUITY: typing.ClassVar[Horizon2D.CONTACT_TYPE]  # value = <CONTACT_TYPE.DISCONTINUITY: 3>
        EROSION: typing.ClassVar[Horizon2D.CONTACT_TYPE]  # value = <CONTACT_TYPE.EROSION: 1>
        INTRUSION: typing.ClassVar[Horizon2D.CONTACT_TYPE]  # value = <CONTACT_TYPE.INTRUSION: 5>
        TOPOGRAPHY: typing.ClassVar[Horizon2D.CONTACT_TYPE]  # value = <CONTACT_TYPE.TOPOGRAPHY: 4>
        __members__: typing.ClassVar[dict[str, Horizon2D.CONTACT_TYPE]]  # value = {'CONFORMAL': <CONTACT_TYPE.CONFORMAL: 0>, 'EROSION': <CONTACT_TYPE.EROSION: 1>, 'BASELAP': <CONTACT_TYPE.BASELAP: 2>, 'DISCONTINUITY': <CONTACT_TYPE.DISCONTINUITY: 3>, 'TOPOGRAPHY': <CONTACT_TYPE.TOPOGRAPHY: 4>, 'INTRUSION': <CONTACT_TYPE.INTRUSION: 5>}
        def __eq__(self, other: typing.Any) -> bool:
            ...
        def __getstate__(self) -> int:
            ...
        def __hash__(self) -> int:
            ...
        def __index__(self) -> int:
            ...
        def __init__(self, value: int) -> None:
            ...
        def __int__(self) -> int:
            ...
        def __ne__(self, other: typing.Any) -> bool:
            ...
        def __repr__(self) -> str:
            ...
        def __setstate__(self, state: int) -> None:
            ...
        def __str__(self) -> str:
            ...
        @property
        def name(self) -> str:
            ...
        @property
        def value(self) -> int:
            ...
    def component_id(self) -> opengeode.lib64.opengeode_py_model.ComponentID:
        ...
    def contact_type(self) -> Horizon2D.CONTACT_TYPE:
        ...
class Horizon3D(opengeode.lib64.opengeode_py_model.Component3D):
    class CONTACT_TYPE:
        """
        Members:
        
          CONFORMAL
        
          EROSION
        
          BASELAP
        
          DISCONTINUITY
        
          TOPOGRAPHY
        
          INTRUSION
        """
        BASELAP: typing.ClassVar[Horizon3D.CONTACT_TYPE]  # value = <CONTACT_TYPE.BASELAP: 2>
        CONFORMAL: typing.ClassVar[Horizon3D.CONTACT_TYPE]  # value = <CONTACT_TYPE.CONFORMAL: 0>
        DISCONTINUITY: typing.ClassVar[Horizon3D.CONTACT_TYPE]  # value = <CONTACT_TYPE.DISCONTINUITY: 3>
        EROSION: typing.ClassVar[Horizon3D.CONTACT_TYPE]  # value = <CONTACT_TYPE.EROSION: 1>
        INTRUSION: typing.ClassVar[Horizon3D.CONTACT_TYPE]  # value = <CONTACT_TYPE.INTRUSION: 5>
        TOPOGRAPHY: typing.ClassVar[Horizon3D.CONTACT_TYPE]  # value = <CONTACT_TYPE.TOPOGRAPHY: 4>
        __members__: typing.ClassVar[dict[str, Horizon3D.CONTACT_TYPE]]  # value = {'CONFORMAL': <CONTACT_TYPE.CONFORMAL: 0>, 'EROSION': <CONTACT_TYPE.EROSION: 1>, 'BASELAP': <CONTACT_TYPE.BASELAP: 2>, 'DISCONTINUITY': <CONTACT_TYPE.DISCONTINUITY: 3>, 'TOPOGRAPHY': <CONTACT_TYPE.TOPOGRAPHY: 4>, 'INTRUSION': <CONTACT_TYPE.INTRUSION: 5>}
        def __eq__(self, other: typing.Any) -> bool:
            ...
        def __getstate__(self) -> int:
            ...
        def __hash__(self) -> int:
            ...
        def __index__(self) -> int:
            ...
        def __init__(self, value: int) -> None:
            ...
        def __int__(self) -> int:
            ...
        def __ne__(self, other: typing.Any) -> bool:
            ...
        def __repr__(self) -> str:
            ...
        def __setstate__(self, state: int) -> None:
            ...
        def __str__(self) -> str:
            ...
        @property
        def name(self) -> str:
            ...
        @property
        def value(self) -> int:
            ...
    def component_id(self) -> opengeode.lib64.opengeode_py_model.ComponentID:
        ...
    def contact_type(self) -> Horizon3D.CONTACT_TYPE:
        ...
class Horizons2D:
    def horizon(self, arg0: opengeode.lib64.opengeode_py_basic.uuid) -> Horizon2D:
        ...
    def horizons(self) -> list[Horizon2D]:
        ...
    def nb_horizons(self) -> int:
        ...
class Horizons3D:
    def horizon(self, arg0: opengeode.lib64.opengeode_py_basic.uuid) -> Horizon3D:
        ...
    def horizons(self) -> list[Horizon3D]:
        ...
    def nb_horizons(self) -> int:
        ...
class HorizonsBuilder2D:
    def set_horizon_contact_type(self, arg0: opengeode.lib64.opengeode_py_basic.uuid, arg1: Horizon2D.CONTACT_TYPE) -> None:
        ...
    def set_horizon_name(self, arg0: opengeode.lib64.opengeode_py_basic.uuid, arg1: str) -> None:
        ...
class HorizonsBuilder3D:
    def set_horizon_contact_type(self, arg0: opengeode.lib64.opengeode_py_basic.uuid, arg1: Horizon3D.CONTACT_TYPE) -> None:
        ...
    def set_horizon_name(self, arg0: opengeode.lib64.opengeode_py_basic.uuid, arg1: str) -> None:
        ...
class StratigraphicUnit2D(opengeode.lib64.opengeode_py_model.Component2D):
    def component_id(self) -> opengeode.lib64.opengeode_py_model.ComponentID:
        ...
class StratigraphicUnit3D(opengeode.lib64.opengeode_py_model.Component3D):
    def component_id(self) -> opengeode.lib64.opengeode_py_model.ComponentID:
        ...
class StratigraphicUnits2D:
    def nb_stratigraphic_units(self) -> int:
        ...
    def stratigraphic_unit(self, arg0: opengeode.lib64.opengeode_py_basic.uuid) -> StratigraphicUnit2D:
        ...
    def stratigraphic_units(self) -> list[StratigraphicUnit2D]:
        ...
class StratigraphicUnits3D:
    def nb_stratigraphic_units(self) -> int:
        ...
    def stratigraphic_unit(self, arg0: opengeode.lib64.opengeode_py_basic.uuid) -> StratigraphicUnit3D:
        ...
    def stratigraphic_units(self) -> list[StratigraphicUnit3D]:
        ...
class StratigraphicUnitsBuilder2D:
    def set_stratigraphic_unit_name(self, arg0: opengeode.lib64.opengeode_py_basic.uuid, arg1: str) -> None:
        ...
class StratigraphicUnitsBuilder3D:
    def set_stratigraphic_unit_name(self, arg0: opengeode.lib64.opengeode_py_basic.uuid, arg1: str) -> None:
        ...
class StructuralModel(opengeode.lib64.opengeode_py_model.BRep, Faults3D, Horizons3D, FaultBlocks3D, StratigraphicUnits3D):
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: opengeode.lib64.opengeode_py_model.BRep) -> None:
        ...
    def fault_block_items(self, arg0: FaultBlock3D) -> list[opengeode.lib64.opengeode_py_model.Block3D]:
        ...
    def fault_items(self, arg0: Fault3D) -> list[opengeode.lib64.opengeode_py_model.Surface3D]:
        ...
    def horizon_items(self, arg0: Horizon3D) -> list[opengeode.lib64.opengeode_py_model.Surface3D]:
        ...
    def native_extension(self) -> str:
        ...
    def stratigraphic_unit_items(self, arg0: StratigraphicUnit3D) -> list[opengeode.lib64.opengeode_py_model.Block3D]:
        ...
    def structural_model_component(self, arg0: opengeode.lib64.opengeode_py_basic.uuid) -> opengeode.lib64.opengeode_py_model.Component3D:
        ...
class StructuralModelBuilder(opengeode.lib64.opengeode_py_model.BRepBuilder, FaultsBuilder3D, HorizonsBuilder3D, FaultBlocksBuilder3D, StratigraphicUnitsBuilder3D):
    def __init__(self, arg0: StructuralModel) -> None:
        ...
    def add_block_in_fault_block(self, arg0: opengeode.lib64.opengeode_py_model.Block3D, arg1: FaultBlock3D) -> int:
        ...
    def add_block_in_stratigraphic_unit(self, arg0: opengeode.lib64.opengeode_py_model.Block3D, arg1: StratigraphicUnit3D) -> int:
        ...
    def add_fault(self) -> opengeode.lib64.opengeode_py_basic.uuid:
        ...
    def add_fault_block(self) -> opengeode.lib64.opengeode_py_basic.uuid:
        ...
    def add_horizon(self) -> opengeode.lib64.opengeode_py_basic.uuid:
        ...
    def add_stratigraphic_unit(self) -> opengeode.lib64.opengeode_py_basic.uuid:
        ...
    def add_surface_in_fault(self, arg0: opengeode.lib64.opengeode_py_model.Surface3D, arg1: Fault3D) -> int:
        ...
    def add_surface_in_horizon(self, arg0: opengeode.lib64.opengeode_py_model.Surface3D, arg1: Horizon3D) -> int:
        ...
    def copy(self, arg0: StructuralModel) -> None:
        ...
    def remove_fault(self, arg0: Fault3D) -> None:
        ...
    def remove_fault_block(self, arg0: FaultBlock3D) -> None:
        ...
    def remove_horizon(self, arg0: Horizon3D) -> None:
        ...
    def remove_stratigraphic_unit(self, arg0: StratigraphicUnit3D) -> None:
        ...
class StructuralModelInputFactory:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class StructuralModelOutputFactory:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
def assign_brep_geographic_coordinate_system_info(arg0: opengeode.lib64.opengeode_py_model.BRep, arg1: opengeode.lib64.opengeode_py_model.BRepBuilder, arg2: str, arg3: GeographicCoordinateSystemInfo3D) -> None:
    ...
def assign_edged_curve_geographic_coordinate_system_info2D(arg0: opengeode.lib64.opengeode_py_mesh.EdgedCurve2D, arg1: opengeode.lib64.opengeode_py_mesh.EdgedCurveBuilder2D, arg2: str, arg3: GeographicCoordinateSystemInfo2D) -> None:
    ...
def assign_edged_curve_geographic_coordinate_system_info3D(arg0: opengeode.lib64.opengeode_py_mesh.EdgedCurve3D, arg1: opengeode.lib64.opengeode_py_mesh.EdgedCurveBuilder3D, arg2: str, arg3: GeographicCoordinateSystemInfo3D) -> None:
    ...
def assign_point_set_geographic_coordinate_system_info2D(arg0: opengeode.lib64.opengeode_py_mesh.PointSet2D, arg1: opengeode.lib64.opengeode_py_mesh.PointSetBuilder2D, arg2: str, arg3: GeographicCoordinateSystemInfo2D) -> None:
    ...
def assign_point_set_geographic_coordinate_system_info3D(arg0: opengeode.lib64.opengeode_py_mesh.PointSet3D, arg1: opengeode.lib64.opengeode_py_mesh.PointSetBuilder3D, arg2: str, arg3: GeographicCoordinateSystemInfo3D) -> None:
    ...
def assign_section_geographic_coordinate_system_info(arg0: opengeode.lib64.opengeode_py_model.Section, arg1: opengeode.lib64.opengeode_py_model.SectionBuilder, arg2: str, arg3: GeographicCoordinateSystemInfo2D) -> None:
    ...
def assign_solid_mesh_geographic_coordinate_system_info3D(arg0: opengeode.lib64.opengeode_py_mesh.SolidMesh3D, arg1: opengeode.lib64.opengeode_py_mesh.SolidMeshBuilder3D, arg2: str, arg3: GeographicCoordinateSystemInfo3D) -> None:
    ...
def assign_surface_mesh_geographic_coordinate_system_info2D(arg0: opengeode.lib64.opengeode_py_mesh.SurfaceMesh2D, arg1: opengeode.lib64.opengeode_py_mesh.SurfaceMeshBuilder2D, arg2: str, arg3: GeographicCoordinateSystemInfo2D) -> None:
    ...
def assign_surface_mesh_geographic_coordinate_system_info3D(arg0: opengeode.lib64.opengeode_py_mesh.SurfaceMesh3D, arg1: opengeode.lib64.opengeode_py_mesh.SurfaceMeshBuilder3D, arg2: str, arg3: GeographicCoordinateSystemInfo3D) -> None:
    ...
def convert_brep_coordinate_reference_system(arg0: opengeode.lib64.opengeode_py_model.BRep, arg1: opengeode.lib64.opengeode_py_model.BRepBuilder, arg2: str, arg3: GeographicCoordinateSystemInfo3D) -> None:
    ...
def convert_edged_curve_coordinate_reference_system2D(arg0: opengeode.lib64.opengeode_py_mesh.EdgedCurve2D, arg1: opengeode.lib64.opengeode_py_mesh.EdgedCurveBuilder2D, arg2: str, arg3: GeographicCoordinateSystemInfo2D) -> None:
    ...
def convert_edged_curve_coordinate_reference_system3D(arg0: opengeode.lib64.opengeode_py_mesh.EdgedCurve3D, arg1: opengeode.lib64.opengeode_py_mesh.EdgedCurveBuilder3D, arg2: str, arg3: GeographicCoordinateSystemInfo3D) -> None:
    ...
def convert_point_set_coordinate_reference_system2D(arg0: opengeode.lib64.opengeode_py_mesh.PointSet2D, arg1: opengeode.lib64.opengeode_py_mesh.PointSetBuilder2D, arg2: str, arg3: GeographicCoordinateSystemInfo2D) -> None:
    ...
def convert_point_set_coordinate_reference_system3D(arg0: opengeode.lib64.opengeode_py_mesh.PointSet3D, arg1: opengeode.lib64.opengeode_py_mesh.PointSetBuilder3D, arg2: str, arg3: GeographicCoordinateSystemInfo3D) -> None:
    ...
def convert_section_coordinate_reference_system(arg0: opengeode.lib64.opengeode_py_model.Section, arg1: opengeode.lib64.opengeode_py_model.SectionBuilder, arg2: str, arg3: GeographicCoordinateSystemInfo2D) -> None:
    ...
def convert_solid_mesh_coordinate_reference_system3D(arg0: opengeode.lib64.opengeode_py_mesh.SolidMesh3D, arg1: opengeode.lib64.opengeode_py_mesh.SolidMeshBuilder3D, arg2: str, arg3: GeographicCoordinateSystemInfo3D) -> None:
    ...
def convert_surface_mesh_coordinate_reference_system2D(arg0: opengeode.lib64.opengeode_py_mesh.SurfaceMesh2D, arg1: opengeode.lib64.opengeode_py_mesh.SurfaceMeshBuilder2D, arg2: str, arg3: GeographicCoordinateSystemInfo2D) -> None:
    ...
def convert_surface_mesh_coordinate_reference_system3D(arg0: opengeode.lib64.opengeode_py_mesh.SurfaceMesh3D, arg1: opengeode.lib64.opengeode_py_mesh.SurfaceMeshBuilder3D, arg2: str, arg3: GeographicCoordinateSystemInfo3D) -> None:
    ...
def cross_section_additional_files(arg0: str) -> AdditionalFilesCrossSection:
    ...
def cross_section_object_priority(arg0: str) -> int:
    ...
def is_cross_section_loadable(arg0: str) -> opengeode.lib64.opengeode_py_basic.Percentage:
    ...
def is_cross_section_saveable(arg0: CrossSection, arg1: str) -> bool:
    ...
def is_structural_model_loadable(arg0: str) -> opengeode.lib64.opengeode_py_basic.Percentage:
    ...
def is_structural_model_saveable(arg0: StructuralModel, arg1: str) -> bool:
    ...
def load_cross_section(arg0: str) -> CrossSection:
    ...
def load_structural_model(arg0: str) -> StructuralModel:
    ...
def save_cross_section(arg0: CrossSection, arg1: str) -> list[str]:
    ...
def save_structural_model(arg0: StructuralModel, arg1: str) -> list[str]:
    ...
def structural_model_additional_files(arg0: str) -> AdditionalFilesStructuralModel:
    ...
def structural_model_object_priority(arg0: str) -> int:
    ...
