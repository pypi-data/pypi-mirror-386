$schema: "http://json-schema.org/draft-07/schema#"
title: "quackpipe Configuration Schema"
description: "A schema for validating quackpipe config.yml files."
type: object
properties:
  sources:
    type: object
    description: "A dictionary of data sources to configure."
    additionalProperties:
      $ref: "#/definitions/source"
  before_all_statements:
    type: array
    items:
      type: string
    description: "A list of custom SQL commands to run once before any sources are initialized."
  after_all_statements:
    type: array
    items:
      type: string
    description: "A list of custom SQL commands to run once after all sources are initialized."
$defs:
  port:
    anyOf:
      - type: integer
      - type: string
        pattern: '^[0-9]+$'
definitions:
  source:
    type: object
    required:
      - type
    properties:
      type:
        type: string
        enum:
          - postgres
          - mysql
          - s3
          - azure
          - sqlite
          - ducklake
      before_source_statements:
        type: array
        items:
          type: string
        description: "A list of custom SQL commands to run right before this source is initialized."
      after_source_statements:
        type: array
        items:
          type: string
        description: "A list of custom SQL commands to run right after this source is initialized."
    oneOf:
      - $ref: "#/definitions/postgres"
      - $ref: "#/definitions/mysql"
      - $ref: "#/definitions/s3"
      - $ref: "#/definitions/azure"
      - $ref: "#/definitions/sqlite"
      - $ref: "#/definitions/ducklake"

  postgres:
    type: object
    properties:
      type: { const: "postgres" }
      secret_name: { type: string }
      host: { type: string }
      port:
        $ref: "#/$defs/port"
      database: { type: string }
      user: { type: string }
      password: { type: string }
      read_only: { type: boolean }
      tables:
        type: array
        items: { type: string }
    required:
      - secret_name
    additionalProperties: true

  s3:
    type: object
    properties:
      type: { const: "s3" }
      secret_name: { type: string }
      access_key_id: { type: string }
      secret_access_key: { type: string }
      region: { type: string }
      session_token: { type: string }
      endpoint: { type: string }
      path: { type: string }
      url_style: { type: string, enum: ["path", "virtual"] }
      use_ssl: { type: boolean }
    required:
      - secret_name
    additionalProperties: true

  azure:
    type: object
    oneOf:
      - type: object
        properties:
          type: { const: "azure" }
          provider: { const: "connection_string" }
          secret_name: { type: string }
        required:
          - type
          - provider
          - secret_name
        additionalProperties: true
      - type: object
        properties:
          type: { const: "azure" }
          provider: { const: "service_principal" }
          secret_name: { type: string }
          account_name: { type: string }
          tenant_id: { type: string }
          client_id: { type: string }
          client_secret: { type: string }
        required:
          - type
          - provider
          - secret_name
        additionalProperties: true
      - type: object
        properties:
          type: { const: "azure" }
          provider: { const: "managed_identity" }
          secret_name: { type: string }
          account_name: { type: string }
        required:
          - type
          - provider
        additionalProperties: true

  sqlite:
    type: object
    properties:
      type: { const: "sqlite" }
      path: { type: string }
      read_only: { type: boolean }
    required:
      - path
    additionalProperties: true

  ducklake:
    type: object
    properties:
      type: { const: "ducklake" }
      catalog:
        type: object
        properties:
          type:
            type: string
            enum: [ "postgres", "sqlite" ]
        oneOf:
          - $ref: "#/definitions/postgres"
          - $ref: "#/definitions/sqlite"
        required:
          - type
      storage:
        type: object
        properties:
          type:
            type: string
            enum: [ "s3", "local" ]
          path: { type: string }
        oneOf:
          - $ref: "#/definitions/s3"
          - type: object
            properties:
              type: { const: "local" }
              path: { type: string }
            required: [ type, path ]
            additionalProperties: true
        required:
          - type
          - path
    required:
      - catalog
      - storage
    additionalProperties: true

  mysql:
    type: object
    properties:
      type: { const: "mysql" }
      secret_name: { type: string }
      host: { type: string }
      port:
        $ref: "#/$defs/port"
      database: { type: string }
      user: { type: string }
      password: { type: string }
      read_only: { type: boolean }
      tables:
        type: array
        items: { type: string }
    required:
      - secret_name
    additionalProperties: true
