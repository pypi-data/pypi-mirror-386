"""
Classes to represent the different artifacts (DATA_VIEW, FUNCTION_HEADER, OPERATIONCONFIG, etc) generated by APL for modelling.
They encapsulate the info about the table/view names and definitions (column specification).
"""
import copy
import logging

from hdbcli import dbapi
from hana_ml.ml_base import (
    Table,
    execute_logged,
    sql_for_drop_table,
    sql_for_insert_values,
    quotename
)
logger = logging.getLogger(__name__) #pylint: disable=invalid-name

class APLArtifactTable(Table):
    """
    Class used to represent APL artifact tables (model, input and output tables).
    """
    # --- Artifact Table type name
    FUNCTION_HEADER = 'FUNCTION_HEADER'
    OPERATION_CONFIG_EXTENDED = 'OPERATION_CONFIG_EXTENDED'
    VARIABLE_DESC_OID = 'VARIABLE_DESC_OID'
    VARIABLE_ROLES_WITH_COMPOSITES_OID = 'VARIABLE_ROLES_WITH_COMPOSITES_OID'
    MODEL_BIN_OID = 'MODEL_BIN_OID'
    OPERATION_LOG = 'OPERATION_LOG'
    SUMMARY = 'SUMMARY'
    INDICATORS = 'INDICATORS'
    TABLE_TYPE = 'TABLE_TYPE'
    PING_OUTPUT = 'PING_OUTPUT'
    TS_DEFAULT_APPLYOUT = 'TS_DEFAULT_APPLYOUT'
    PROFITCURVES = 'PROFITCURVES'
    DEBRIEF_METRIC = 'DEBRIEF_METRIC'
    DEBRIEF_PROPERTY = 'DEBRIEF_PROPERTY'
    RESULT = 'RESULT'

    # Default artifact Table Definitions
    _tbl_def_map = {
        'FUNCTION_HEADER': '(KEY NVARCHAR(50), VALUE NVARCHAR(255))',
        'OPERATION_CONFIG_EXTENDED': ('(KEY NVARCHAR(1000), VALUE NCLOB, '
                                      'CONTEXT NVARCHAR(100))'),
        'VARIABLE_DESC_OID': ('(RANK INT, NAME NVARCHAR(127), STORAGE NVARCHAR(10), '
                              'VALUETYPE NVARCHAR(10), KEYLEVEL INT, ORDERLEVEL INT, '
                              'MISSINGSTRING NVARCHAR(255), GROUPNAME NVARCHAR(255), '
                              'DESCRIPTION NVARCHAR(255), OID NVARCHAR(50))'),
        'VARIABLE_ROLES_WITH_COMPOSITES_OID': ('( NAME NVARCHAR(127), ROLE NVARCHAR(10), '
                                               'COMPOSITION_TYPE NVARCHAR(10), '
                                               'COMPONENT_NAME NVARCHAR(127), OID NVARCHAR(50))'),
        'MODEL_BIN_OID': '(OID NVARCHAR(50), FORMAT NVARCHAR(50), LOB CLOB)',
        'OPERATION_LOG': ('(OID NVARCHAR(50), TIMESTAMP LONGDATE, LEVEL INT, ORIGIN NVARCHAR(50), '
                          'MESSAGE NCLOB)'),
        'SUMMARY': '(OID NVARCHAR(50), KEY NVARCHAR(100), VALUE NVARCHAR(200))',
        'INDICATORS': ('(OID NVARCHAR(50), VARIABLE NVARCHAR(127), TARGET NVARCHAR(127), '
                       'KEY NVARCHAR(127), VALUE NCLOB, '
                       'DETAIL NCLOB)'),
        'TABLE_TYPE': ('(OID NVARCHAR(50), POSITION INT, NAME NVARCHAR(127), KIND NVARCHAR(50), '
                       'PRECISION INT, SCALE INT, MAXIMUM_LENGTH INT)'),
        'PING_OUTPUT': '("name" NVARCHAR(128), "value" NCLOB)',
        'PROFITCURVES':
            '(OID VARCHAR(50), TYPE VARCHAR(100), VARIABLE VARCHAR(255), TARGET VARCHAR(255), '
            '"Label" VARCHAR(255), "Frequency" VARCHAR(100), "Random" VARCHAR(100), '
            '"Wizard" VARCHAR(100), "Estimation" VARCHAR(100), "Validation" VARCHAR(100),'
            ' "Test" VARCHAR(100), "ApplyIn" VARCHAR(100))',
        'DEBRIEF_METRIC': ('(OID NVARCHAR(512), OWNER_ID INT, DATASET_ID INT, '
                           'OWNER_TYPE NVARCHAR(255), NAME NVARCHAR(255), VALUE DOUBLE)'),
        'DEBRIEF_PROPERTY': ('(OID NVARCHAR(512), OWNER_ID INT, OWNER_TYPE NVARCHAR(255), '
                             'NAME NVARCHAR(255), VALUE NVARCHAR(512), LONG_VALUE NCLOB, '
                             'D_VALUE DOUBLE, I_VALUE INTEGER)'),
        'RESULT': '(OID NVARCHAR(50), KEY NVARCHAR(100), VALUE NCLOB)'
    }

    def __init__(self, name, type_name, apl_version, data=None):
        """
        Parameters
        ---------
        name:  str
            The new table name
        apl_version: int
            The current version number of SAP HANA APL.
            This parameter is meant to serve in the futur when the table definitions vary with
            the version.
        type_name: str
            The type name. It is defined by APL. Use class variable, for example,
            APLArtifactTable.FUNCTION_HEADER.
        data: List of tuples
            The table content presented by a list of tuples.
            Each tuple is made of the different values of a row.
        """
        super(APLArtifactTable, self).__init__(name, None)
        self.apl_version = apl_version
        self.type_name = type_name
        self.spec = None
        self.data = [] if data is None else data
        self._artifact_tables = []

    @staticmethod
    def get_tbl_def_for_ping():
        """
        Returns
        -------
        The table definition of PING_OUT: str
        """
        return APLArtifactTable._tbl_def_map[APLArtifactTable.PING_OUTPUT]

    def get_table_definition(self):
        """
        Returns
        -------
        The table definition: str. For example, '(KEY NVARCHAR(50), VALUE NVARCHAR(255))'
        """
        # For the moment, the apl version does not matter
        return self._tbl_def_map[self.type_name]  # default value

    def create_table_with_hana_type(self, conn, force=True, as_permanent=False):
        """
        Creates a temporary table for APL artifact.
        The creation is based on a predefined APL type.

        Arguments:
        ---------
        conn_context :  ConnectionContext
            The database connection object
        force: boolean
            If True, the table with the same name will be dropped when it exists.
        as_permanent: boolean
            If True, a permanent table will be created, 'LOCAL TEMPORARY' otherwise
        """
        with conn.connection.cursor() as cur:
            if force:
                try:
                    execute_logged(cur, sql_for_drop_table(self.name))
                except dbapi.Error:
                    pass
            table_spec = self.get_table_definition()
            sql_create_table = (
                "CREATE {} COLUMN TABLE {} {}".format(
                    '' if as_permanent else 'LOCAL TEMPORARY',
                    quotename(self.name),
                    table_spec)
                )
            execute_logged(cur, sql_create_table)
            if self.data:
                # non-None, non-empty
                statement = sql_for_insert_values(self.name, self.data)
                logger.info("Prepare SQL: %s", statement)
                for row in self.data:
                    logger.info("Executing SQL: INSERT INTO %s values %s",
                                quotename(self.name),
                                str(row))
                cur.executemany(statement, self.data)

    def replicate_as_permanent_table(self, connection, prefix_name='HANAML_TMP_'):
        """
        Replicate the current temp table to permanent table
        Parameters:
        ----------
        - connection: hana_ml.dataframe.ConnectionContext
        - prefix_name: str
          Prefix of the name of the new table

        """
        new_name = prefix_name + self.name[1:]  # Remove the leading # from the name
        new_table = copy.copy(self)  # copy APLArtifactTable object
        new_table.name = new_name
        # Create table
        with connection.connection.cursor() as cur:
            sql = 'CREATE COLUMN TABLE "{}" AS (select * from {})'.format(new_name, self.name)
            execute_logged(cur, sql)
        return new_table


class APLArtifactApplyOutTable(APLArtifactTable):
    """
    Special casse of APL Artifact Table where the table definition is not predefined.
    """
    def __init__(self, name, table_definition, apl_version, data=None):
        """
        Parameters
        ---------
        name:  str
            The new table name
        apl_version: int
            The current version number of SAP HANA APL.
            This parameter is meant to serve in the futur when the table definitions vary with
            the version.
        table_definition: str
            The table column definition.
            For instance: '(col_1 varchar(30), col_2 int)'
        data: List of tuples
            The table content presented by a list of tuples.
            Each tuple is made of the different values of a row.
        """
        super(APLArtifactApplyOutTable, self).__init__(
            name=name, type_name=None, apl_version=apl_version, data=data
        )
        self.table_definition = table_definition

    def get_table_definition(self):
        """
        Overrides parent method.
        Returns
        -------
        The table definition: str. For example, '(KEY NVARCHAR(50), VALUE NVARCHAR(255))'
        """
        return self.table_definition

class APLArtifactView: #pylint: disable=too-few-public-methods
    """
    Class used to represent a Hana view of the input dataset.
    """
    def __init__(self, name, select_clause):
        self.name = name  # the view name
        # The view specification (a select statement).
        # For example, 'SELECT c1, c2, .. from SOURCE_TABLE'
        self.select_clause = select_clause
