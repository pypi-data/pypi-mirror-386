[build-system]
requires = ["maturin>=1.0,<2.0"]
build-backend = "maturin"

[project]
name = "astrora"
version = "0.1.1"
description = "Astrora - Rust-backed astrodynamics library for Python"
readme = "README.md"
requires-python = ">=3.8"
license = { text = "MIT" }
authors = [
    { name = "Cache McClure", email = "cache.mcclure@gmail.com" }
]
keywords = ["astrodynamics", "orbital-mechanics", "aerospace", "space", "orbit", "kepler"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Rust",
    "Topic :: Scientific/Engineering :: Astronomy",
    "Topic :: Scientific/Engineering :: Physics",
]
dependencies = [
    "numpy>=1.20",
    "astropy>=5.0",
    "scipy>=1.7",
    "matplotlib>=3.5",
    "plotly>=5.0",
    "jplephem>=2.18",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-xdist>=3.0",
    "pytest-benchmark>=4.0",
    "black>=23.0",
    "ruff>=0.1",
    "mypy>=1.0",
    "maturin>=1.0",
]
docs = [
    "sphinx>=5.0",
    "sphinx-rtd-theme>=1.0",
    "sphinx-autodoc-typehints>=1.19",
    "numpydoc>=1.5",
]
test = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-xdist>=3.0",
]

[project.urls]
Homepage = "https://github.com/cachemcclure/astrora"
Documentation = "https://github.com/cachemcclure/astrora#readme"
Repository = "https://github.com/cachemcclure/astrora"
"Bug Tracker" = "https://github.com/cachemcclure/astrora/issues"

[tool.maturin]
python-source = "python"
module-name = "astrora._core"
features = ["pyo3/extension-module"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = """
    -ra
    -q
    --strict-markers
    --strict-config
    --cov=astrora
    --cov-report=term-missing
    --cov-report=html
    --tb=short
"""
testpaths = ["tests"]
python_files = ["test_*.py", "benchmark_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*", "bench_*"]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    # Test type markers
    "unit: marks tests as unit tests (fast, isolated, no external dependencies)",
    "integration: marks tests as integration tests (may involve multiple components)",
    "validation: marks tests as validation tests (compare against reference implementations)",
    "regression: marks tests for specific bug fixes (ensure bugs don't return)",

    # Performance markers
    "benchmark: marks tests as performance benchmarks (use with pytest-benchmark)",
    "slow: marks tests as slow running (typically > 1 second)",
    "very_slow: marks tests as very slow (typically > 10 seconds)",

    # Domain-specific markers
    "propagation: marks tests related to orbit propagation",
    "coordinates: marks tests related to coordinate transformations",
    "maneuvers: marks tests related to orbital maneuvers",
    "perturbations: marks tests related to perturbation models",
    "satellite: marks tests related to satellite operations (SGP4, TLE, etc)",
    "plotting: marks tests related to visualization",

    # Accuracy level markers
    "high_precision: marks tests requiring high numerical precision",
    "numerical: marks tests involving numerical computations with tolerances",

    # External dependencies
    "requires_ephemerides: marks tests requiring JPL ephemerides data",
    "requires_internet: marks tests requiring internet connectivity",
]

[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py38"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "F541", # f-string without placeholders (often used for consistency)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*.py" = ["B017"]  # Allow pytest.raises(Exception) for testing
"examples/*.py" = ["F841"]  # Allow unused variables in examples
"notebooks/*.ipynb" = ["F841", "B018"]  # Allow unused vars and bare expressions in notebooks

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "numpy.*",
    "scipy.*",
    "matplotlib.*",
    "plotly.*",
    "jplephem.*",
]
ignore_missing_imports = true

[tool.coverage.run]
branch = true
source = ["astrora"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
]
