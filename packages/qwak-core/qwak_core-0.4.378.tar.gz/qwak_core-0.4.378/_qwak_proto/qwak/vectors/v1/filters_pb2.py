# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: qwak/vectors/v1/filters.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.protobuf import timestamp_pb2 as google_dot_protobuf_dot_timestamp__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x1dqwak/vectors/v1/filters.proto\x12\x1cqwak.vector.store.serving.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\xbb\x01\n\rAtomicLiteral\x12\x18\n\x0estring_literal\x18\x01 \x01(\tH\x00\x12\x15\n\x0bint_literal\x18\x02 \x01(\x03H\x00\x12\x16\n\x0c\x62ool_literal\x18\x03 \x01(\x08H\x00\x12\x18\n\x0e\x64ouble_literal\x18\x04 \x01(\x01H\x00\x12\x37\n\x11timestamp_literal\x18\x05 \x01(\x0b\x32\x1a.google.protobuf.TimestampH\x00\x42\x0e\n\x0cliteral_type\"\xf9\x04\n\x06\x46ilter\x12.\n\x02or\x18\x01 \x01(\x0b\x32 .qwak.vector.store.serving.v1.OrH\x00\x12\x30\n\x03\x61nd\x18\x02 \x01(\x0b\x32!.qwak.vector.store.serving.v1.AndH\x00\x12\x31\n\x02\x65q\x18\x03 \x01(\x0b\x32#.qwak.vector.store.serving.v1.EqualH\x00\x12\x34\n\x02ne\x18\x04 \x01(\x0b\x32&.qwak.vector.store.serving.v1.NotEqualH\x00\x12\x37\n\x02gt\x18\x05 \x01(\x0b\x32).qwak.vector.store.serving.v1.GreaterThanH\x00\x12=\n\x03gte\x18\x06 \x01(\x0b\x32..qwak.vector.store.serving.v1.GreaterThanEqualH\x00\x12\x34\n\x02lt\x18\x07 \x01(\x0b\x32&.qwak.vector.store.serving.v1.LessThanH\x00\x12:\n\x03lte\x18\x08 \x01(\x0b\x32+.qwak.vector.store.serving.v1.LessThanEqualH\x00\x12\x32\n\x04like\x18\t \x01(\x0b\x32\".qwak.vector.store.serving.v1.LikeH\x00\x12\x37\n\x07is_null\x18\n \x01(\x0b\x32$.qwak.vector.store.serving.v1.IsNullH\x00\x12>\n\x0bis_not_null\x18\x0b \x01(\x0b\x32\'.qwak.vector.store.serving.v1.IsNotNullH\x00\x42\r\n\x0b\x66ilter_case\"m\n\x02Or\x12\x32\n\x04left\x18\x01 \x01(\x0b\x32$.qwak.vector.store.serving.v1.Filter\x12\x33\n\x05right\x18\x02 \x01(\x0b\x32$.qwak.vector.store.serving.v1.Filter\"n\n\x03\x41nd\x12\x32\n\x04left\x18\x01 \x01(\x0b\x32$.qwak.vector.store.serving.v1.Filter\x12\x33\n\x05right\x18\x02 \x01(\x0b\x32$.qwak.vector.store.serving.v1.Filter\"U\n\x05\x45qual\x12\x10\n\x08property\x18\x01 \x01(\t\x12:\n\x05value\x18\x02 \x01(\x0b\x32+.qwak.vector.store.serving.v1.AtomicLiteral\"X\n\x08NotEqual\x12\x10\n\x08property\x18\x01 \x01(\t\x12:\n\x05value\x18\x02 \x01(\x0b\x32+.qwak.vector.store.serving.v1.AtomicLiteral\"[\n\x0bGreaterThan\x12\x10\n\x08property\x18\x01 \x01(\t\x12:\n\x05value\x18\x02 \x01(\x0b\x32+.qwak.vector.store.serving.v1.AtomicLiteral\"`\n\x10GreaterThanEqual\x12\x10\n\x08property\x18\x01 \x01(\t\x12:\n\x05value\x18\x02 \x01(\x0b\x32+.qwak.vector.store.serving.v1.AtomicLiteral\"X\n\x08LessThan\x12\x10\n\x08property\x18\x01 \x01(\t\x12:\n\x05value\x18\x02 \x01(\x0b\x32+.qwak.vector.store.serving.v1.AtomicLiteral\"]\n\rLessThanEqual\x12\x10\n\x08property\x18\x01 \x01(\t\x12:\n\x05value\x18\x02 \x01(\x0b\x32+.qwak.vector.store.serving.v1.AtomicLiteral\")\n\x04Like\x12\x10\n\x08property\x18\x01 \x01(\t\x12\x0f\n\x07pattern\x18\x02 \x01(\t\"\x1a\n\x06IsNull\x12\x10\n\x08property\x18\x01 \x01(\t\"\x1d\n\tIsNotNull\x12\x10\n\x08property\x18\x01 \x01(\tB\x1e\n\x1a\x63om.qwak.ai.vectors.api.v1P\x01\x62\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'qwak.vectors.v1.filters_pb2', _globals)
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\n\032com.qwak.ai.vectors.api.v1P\001'
  _globals['_ATOMICLITERAL']._serialized_start=97
  _globals['_ATOMICLITERAL']._serialized_end=284
  _globals['_FILTER']._serialized_start=287
  _globals['_FILTER']._serialized_end=920
  _globals['_OR']._serialized_start=922
  _globals['_OR']._serialized_end=1031
  _globals['_AND']._serialized_start=1033
  _globals['_AND']._serialized_end=1143
  _globals['_EQUAL']._serialized_start=1145
  _globals['_EQUAL']._serialized_end=1230
  _globals['_NOTEQUAL']._serialized_start=1232
  _globals['_NOTEQUAL']._serialized_end=1320
  _globals['_GREATERTHAN']._serialized_start=1322
  _globals['_GREATERTHAN']._serialized_end=1413
  _globals['_GREATERTHANEQUAL']._serialized_start=1415
  _globals['_GREATERTHANEQUAL']._serialized_end=1511
  _globals['_LESSTHAN']._serialized_start=1513
  _globals['_LESSTHAN']._serialized_end=1601
  _globals['_LESSTHANEQUAL']._serialized_start=1603
  _globals['_LESSTHANEQUAL']._serialized_end=1696
  _globals['_LIKE']._serialized_start=1698
  _globals['_LIKE']._serialized_end=1739
  _globals['_ISNULL']._serialized_start=1741
  _globals['_ISNULL']._serialized_end=1767
  _globals['_ISNOTNULL']._serialized_start=1769
  _globals['_ISNOTNULL']._serialized_end=1798
# @@protoc_insertion_point(module_scope)
