# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from _qwak_proto.qwak.vectors.v1 import vector_service_pb2 as qwak_dot_vectors_dot_v1_dot_vector__service__pb2


class VectorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SearchSimilarVectors = channel.unary_unary(
                '/qwak.vector.store.serving.v1.VectorService/SearchSimilarVectors',
                request_serializer=qwak_dot_vectors_dot_v1_dot_vector__service__pb2.SearchSimilarVectorsRequest.SerializeToString,
                response_deserializer=qwak_dot_vectors_dot_v1_dot_vector__service__pb2.SearchSimilarVectorsResponse.FromString,
                )
        self.GetVectorSample = channel.unary_unary(
                '/qwak.vector.store.serving.v1.VectorService/GetVectorSample',
                request_serializer=qwak_dot_vectors_dot_v1_dot_vector__service__pb2.GetVectorSampleRequest.SerializeToString,
                response_deserializer=qwak_dot_vectors_dot_v1_dot_vector__service__pb2.GetVectorSampleResponse.FromString,
                )
        self.FetchVector = channel.unary_unary(
                '/qwak.vector.store.serving.v1.VectorService/FetchVector',
                request_serializer=qwak_dot_vectors_dot_v1_dot_vector__service__pb2.FetchVectorRequest.SerializeToString,
                response_deserializer=qwak_dot_vectors_dot_v1_dot_vector__service__pb2.FetchVectorResponse.FromString,
                )
        self.UpsertVectors = channel.unary_unary(
                '/qwak.vector.store.serving.v1.VectorService/UpsertVectors',
                request_serializer=qwak_dot_vectors_dot_v1_dot_vector__service__pb2.UpsertVectorsRequest.SerializeToString,
                response_deserializer=qwak_dot_vectors_dot_v1_dot_vector__service__pb2.UpsertVectorsResponse.FromString,
                )
        self.DeleteVectors = channel.unary_unary(
                '/qwak.vector.store.serving.v1.VectorService/DeleteVectors',
                request_serializer=qwak_dot_vectors_dot_v1_dot_vector__service__pb2.DeleteVectorsRequest.SerializeToString,
                response_deserializer=qwak_dot_vectors_dot_v1_dot_vector__service__pb2.DeleteVectorsResponse.FromString,
                )


class VectorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SearchSimilarVectors(self, request, context):
        """Search for similar vectors
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVectorSample(self, request, context):
        """Get vector samples
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchVector(self, request, context):
        """Fetch a specific vector by ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpsertVectors(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteVectors(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VectorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SearchSimilarVectors': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchSimilarVectors,
                    request_deserializer=qwak_dot_vectors_dot_v1_dot_vector__service__pb2.SearchSimilarVectorsRequest.FromString,
                    response_serializer=qwak_dot_vectors_dot_v1_dot_vector__service__pb2.SearchSimilarVectorsResponse.SerializeToString,
            ),
            'GetVectorSample': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVectorSample,
                    request_deserializer=qwak_dot_vectors_dot_v1_dot_vector__service__pb2.GetVectorSampleRequest.FromString,
                    response_serializer=qwak_dot_vectors_dot_v1_dot_vector__service__pb2.GetVectorSampleResponse.SerializeToString,
            ),
            'FetchVector': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchVector,
                    request_deserializer=qwak_dot_vectors_dot_v1_dot_vector__service__pb2.FetchVectorRequest.FromString,
                    response_serializer=qwak_dot_vectors_dot_v1_dot_vector__service__pb2.FetchVectorResponse.SerializeToString,
            ),
            'UpsertVectors': grpc.unary_unary_rpc_method_handler(
                    servicer.UpsertVectors,
                    request_deserializer=qwak_dot_vectors_dot_v1_dot_vector__service__pb2.UpsertVectorsRequest.FromString,
                    response_serializer=qwak_dot_vectors_dot_v1_dot_vector__service__pb2.UpsertVectorsResponse.SerializeToString,
            ),
            'DeleteVectors': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteVectors,
                    request_deserializer=qwak_dot_vectors_dot_v1_dot_vector__service__pb2.DeleteVectorsRequest.FromString,
                    response_serializer=qwak_dot_vectors_dot_v1_dot_vector__service__pb2.DeleteVectorsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'qwak.vector.store.serving.v1.VectorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VectorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SearchSimilarVectors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qwak.vector.store.serving.v1.VectorService/SearchSimilarVectors',
            qwak_dot_vectors_dot_v1_dot_vector__service__pb2.SearchSimilarVectorsRequest.SerializeToString,
            qwak_dot_vectors_dot_v1_dot_vector__service__pb2.SearchSimilarVectorsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVectorSample(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qwak.vector.store.serving.v1.VectorService/GetVectorSample',
            qwak_dot_vectors_dot_v1_dot_vector__service__pb2.GetVectorSampleRequest.SerializeToString,
            qwak_dot_vectors_dot_v1_dot_vector__service__pb2.GetVectorSampleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchVector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qwak.vector.store.serving.v1.VectorService/FetchVector',
            qwak_dot_vectors_dot_v1_dot_vector__service__pb2.FetchVectorRequest.SerializeToString,
            qwak_dot_vectors_dot_v1_dot_vector__service__pb2.FetchVectorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpsertVectors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qwak.vector.store.serving.v1.VectorService/UpsertVectors',
            qwak_dot_vectors_dot_v1_dot_vector__service__pb2.UpsertVectorsRequest.SerializeToString,
            qwak_dot_vectors_dot_v1_dot_vector__service__pb2.UpsertVectorsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteVectors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qwak.vector.store.serving.v1.VectorService/DeleteVectors',
            qwak_dot_vectors_dot_v1_dot_vector__service__pb2.DeleteVectorsRequest.SerializeToString,
            qwak_dot_vectors_dot_v1_dot_vector__service__pb2.DeleteVectorsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
