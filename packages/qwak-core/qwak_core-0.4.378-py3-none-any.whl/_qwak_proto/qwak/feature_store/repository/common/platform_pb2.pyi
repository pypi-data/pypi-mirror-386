"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class PlatformSettings(google.protobuf.message.Message):
    """Container for all (JFrog) platform setting"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    REPOSITORY_SETTING_FIELD_NUMBER: builtins.int
    PROJECT_SETTING_FIELD_NUMBER: builtins.int
    @property
    def repository_setting(self) -> global___RepositorySetting:
        """Repo related setting"""
    @property
    def project_setting(self) -> global___ProjectSetting:
        """Project related setting"""
    def __init__(
        self,
        *,
        repository_setting: global___RepositorySetting | None = ...,
        project_setting: global___ProjectSetting | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["project_setting", b"project_setting", "repository_setting", b"repository_setting"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["project_setting", b"project_setting", "repository_setting", b"repository_setting"]) -> None: ...

global___PlatformSettings = PlatformSettings

class RepositorySetting(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    REPOSITORY_KEY_FIELD_NUMBER: builtins.int
    repository_key: builtins.str
    def __init__(
        self,
        *,
        repository_key: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["repository_key", b"repository_key"]) -> None: ...

global___RepositorySetting = RepositorySetting

class ProjectSetting(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PROJECT_KEY_FIELD_NUMBER: builtins.int
    project_key: builtins.str
    """JFrog project key"""
    def __init__(
        self,
        *,
        project_key: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["project_identifier", b"project_identifier", "project_key", b"project_key"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["project_identifier", b"project_identifier", "project_key", b"project_key"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["project_identifier", b"project_identifier"]) -> typing_extensions.Literal["project_key"] | None: ...

global___ProjectSetting = ProjectSetting
