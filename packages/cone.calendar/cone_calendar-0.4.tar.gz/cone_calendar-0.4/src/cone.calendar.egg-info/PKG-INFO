Metadata-Version: 2.4
Name: cone.calendar
Version: 0.4
Summary: jQuery Fullcalendar integration for cone.app
Home-page: http://github.com/conestack/cone.calendar
Author: Cone Contributors
Author-email: dev@conestack.org
License: Simplified BSD
Keywords: node pyramid cone web
Classifier: Environment :: Web Environment
Classifier: Programming Language :: Python
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
License-File: LICENSE.rst
Requires-Dist: setuptools
Requires-Dist: cone.app<1.1.0
Requires-Dist: yafowil.widget.cron<2.0.0
Provides-Extra: test
Requires-Dist: zope.testrunner; extra == "test"
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: home-page
Dynamic: keywords
Dynamic: license
Dynamic: license-file
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: summary

.. image:: https://img.shields.io/pypi/v/cone.calendar.svg
    :target: https://pypi.python.org/pypi/cone.calendar
    :alt: Latest PyPI version

.. image:: https://img.shields.io/pypi/dm/cone.calendar.svg
    :target: https://pypi.python.org/pypi/cone.calendar
    :alt: Number of PyPI downloads

.. image:: https://travis-ci.org/bluedynamics/cone.calendar.svg?branch=master
    :target: https://travis-ci.org/bluedynamics/cone.calendar

.. image:: https://coveralls.io/repos/github/bluedynamics/cone.calendar/badge.svg?branch=master
    :target: https://coveralls.io/github/bluedynamics/cone.calendar?branch=master


This package provides a calendar integration in to cone.app.
It utilizes jQuery Fullcalendar
(https://github.com/fullcalendar/fullcalendar).

Currently, tag 3.1.0 is included. See
(https://github.com/fullcalendar/fullcalendar/releases).


Calendar Widget
---------------

The calendar widget integration is done via
``cone.calendar.browser.CalendarTile`` which is registered by name ``calendar``.

The overall calendar configuration is done via model properties.

.. code-block:: python

    from cone.app.model import BaseNode
    from cone.app.model import Properties

    class MyCalendar(BaseNode):

        @property
        def properties(self):
            props = Properties()
            props.default_content_tile = 'calendar'
            props.calendar_header = {
                'left': 'month,agendaWeek,agendaDay',
                'center': 'title',
                'right': 'today prev,next'
            }
            return props

For a full list of available calendar options read
``cone.calendar.browser.CalendarTile`` documentation.


Calendar Events
---------------

In order to display events in the calendar, one or more event data sources
must be provided.

Concrete event data implementation must derive from
``cone.calendar.browser.CalendarEvents`` and provide ``events`` function.

The default event data source is expected as JSON view registered by name
``calendar_events`` for a dedictaed model context.

.. code-block:: python

    from cone.calendar.browser import CalendarEvents
    from datetime import datetime
    from pyramid.view import view_config
    import uuid

    @view_config(
        name='calendar_events',
        context=MyCalendar,
        accept='application/json',
        renderer='json',
        permission='view')
    class MyEvents(CalendarEvents):

        def events(self, start, end):
            events = [{
                'id': uuid.uuid4(),
                'title': 'Title',
                'start': datetime(2020, 4, 29, 17, 40),
                'end': datetime(2020, 4, 29, 18, 0),
            }]
            return events

For a full list of available event options read
``cone.calendar.browser.CalendarEvents`` documentation.

Multiple event data sources are defined via model properties.

.. code-block:: python

    class MyCalendar(BaseNode):

        @property
        def properties(self):
            props = Properties()
            props.calendar_sources = [{
                'events': 'event_data_1',
                'color': 'green'
            }, {
                'events': 'event_data_2',
                'color': 'red'
            }]
            return props

For a full list of available event source options read
``cone.calendar.browser.CalendarTile`` documentation.


Locales
-------

The calendar locale can be set via ``calendar_locale`` on model properties.

.. code-block:: python

    class MyCalendar(BaseNode):

        @property
        def properties(self):
            props = Properties()
            props.calendar_locale = 'de'
            return props

Default calendar locale is ``en``. The desired locales must be delivered to
the browser in order to work correctly. Locales to deliver are defined in the
application ini config as comma separated list of locale names.

.. code-block:: ini

    cone.calendar.locales = de,fr

For a complete list of available locales see ``browser/static/fullcalendar/locales``
folder of this package.


Contributors
============

- Robert Niederreiter
- Johannes Raggam


Changes
=======

0.4 (2025-10-25)
----------------

- Pin upper versions of dependencies.
  [rnix]


0.3 (2022-10-06)
----------------

- Modernize JavaScript.
  [rnix]


0.2 (2020-07-09)
----------------

- Add ``show_contextmenu`` to ``CalendarTile``. Defaults to ``False``.
  [rnix]

- Also check for action length when handling actions dropdown in JS.
  [rnix]


0.1 (2020-05-30)
----------------

- Initial.
  [rnix, thet]


License
=======

Copyright (c) 2017-2021, BlueDynamics Alliance, Austria
Copyright (c) 2021, Cone Contributors
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice, this
  list of conditions and the following disclaimer in the documentation and/or
  other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
