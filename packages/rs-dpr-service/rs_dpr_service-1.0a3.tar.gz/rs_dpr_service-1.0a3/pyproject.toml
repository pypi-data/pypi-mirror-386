# Copyright 2025 CS Group
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[project]
name = "rs-dpr-service"
dynamic = ["version"] # see: https://github.com/mtkennerly/poetry-dynamic-versioning

[tool.poetry]
name = "rs-dpr-service"
version = "1.0a3"
description = "Copernicus Sentinel rs-server, DPR as a service."
license = "Apache-2.0"
authors = ["ESA under contract with Airbus and CS <ops_coprs@airbus.com>"]
readme = "README.md"
homepage = "https://home.rs-python.eu/"
repository = "https://github.com/RS-PYTHON/rs-dpr-service"
documentation = "https://home.rs-python.eu/rs-documentation/rs-server/docs/doc/"
keywords = ["stac", "copernicus", "sentinel", "processing"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Framework :: FastAPI",
    "Framework :: OpenTelemetry",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: GIS",
    "Topic :: Scientific/Engineering :: Image Processing"
]

packages = [
    { include = "rs_dpr_service", from = "."},
]

# Add configuration files to the .whl package
include = [
    { path = "config", format = ["wheel"] }
]

[tool.poetry.dependencies]
python = "^3.11"
pygeoapi = "^0.21"
flask = "^3.1.1" # for pygeoapi
uvicorn = ">=0.35.0"
fastapi = ">=0.116.2,<0.120.0"
geoalchemy2 = ">=0.17.1,<0.18.0"
SQLAlchemy = "^2.0.37"
jsonpatch = "^1.33"
dask-gateway = "2024.1.0"
# same dask version as in the cluster i.e. same as eopf
dask = {extras = ["distributed"], version = "2024.5.2"}
openapi-core = "^0.19.5"
bandit = "^1.8.3"
mypy = "^1.15.0"
pylint = "^3.3.6"
flake8-pyproject = "^1.2.3"
httpx = "^0.28.1"
psycopg2 = "^2.9.11"
opentelemetry-distro = "^0.59b0" # then run 'poetry run opentelemetry-bootstrap -a install'
opentelemetry-instrumentation-aws-lambda = "^0.59b0"
opentelemetry-test-utils = "^0.59b0"
opentelemetry-exporter-otlp = "^1.38.0"
tornado = "^6.5" # fix trivy vulnerability
python-logging-loki = "^0.3.1" # to avoid otl error: No module named 'logging_loki'
s3fs = "^2025.7.0"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
python = "^3.11"
#pygeoapi = { git = "https://github.com/geopython/pygeoapi.git", branch = "master" }
pre-commit = ">=3.7.1,<5.0.0"
pylint = "^3.3.2"
pytest = "^8.4.2"
pytest-asyncio = "^1.2.0"
pytest-cov = "^7.0.0"
pytest-docker = "^3.2.3"
pytest-error-for-skips = "^2.0.2"
pytest-mock = "^3.15.1"
responses = "^0.25.3"
safety = "^3.5.1"

[tool.black]
line-length = 120

[tool.pytest.ini_options]
markers = [
    "unit", # mark a test as unittest
    "integration", # mark a test as integration test
]
asyncio_mode = "auto"

[tool.mypy]
warn_redundant_casts = true
# Force analyze of partially annotate function signatures
check_untyped_defs = true
ignore_missing_imports = true

[tool.flake8]
max-line-length = 120
# per-file-ignores = [
#     '__init__.py:F401',
# ]

[tool.pylint]
max-line-length = 120
disable = [
    "logging-fstring-interpolation",  # Logging f-string interpolation
    "R0917",  # Too many positional arguments
    "E0401", # import-error
    "R0902", # too-many-instance-attributes
    "R0913", # too-many-arguments
    "too-many-statements",
    "not-context-manager",
    "too-many-branches",
]
ignore-paths = '^docs/.*$'

# Only add notes as comments that are not checked for errors.
notes = ["XXX"]  # No errors on TODO and FIXME

min-similarity-lines = 10  # Minimum lines number of a similarity

[tool.bandit.assert_used]
skips = ['*/*.py']

[tool.bandit]
skips = ['B603', 'B607', 'B404']


[tool.poetry.requires-plugins]
poetry-dynamic-versioning = { version = ">=1.0.0,<2.0.0", extras = ["plugin"] }

[tool.poetry-dynamic-versioning]
enable = false
metadata = false

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"
