// q3dtheme.sip generated by MetaSIP
//
// This file is part of the QtDataVisualization Python extension module.
//
// Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6-DataVisualization.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class Q3DTheme : public QObject
{
%TypeHeaderCode
#include <q3dtheme.h>
%End

%ConvertToSubClassCode
    static struct class_graph {
        const char *name;
        sipTypeDef **type;
        int yes, no;
    } graph[] = {
        {sipName_QAbstract3DGraph, &sipType_QAbstract3DGraph, 10, 1},
        {sipName_Q3DObject, &sipType_Q3DObject, 13, 2},
        {sipName_QAbstract3DInputHandler, &sipType_QAbstract3DInputHandler, 15, 3},
        {sipName_Q3DScene, &sipType_Q3DScene, -1, 4},
        {sipName_Q3DTheme, &sipType_Q3DTheme, -1, 5},
        {sipName_QAbstract3DAxis, &sipType_QAbstract3DAxis, 17, 6},
        {sipName_QAbstract3DSeries, &sipType_QAbstract3DSeries, 19, 7},
        {sipName_QAbstractDataProxy, &sipType_QAbstractDataProxy, 22, 8},
        {sipName_QCustom3DItem, &sipType_QCustom3DItem, 29, 9},
        {sipName_QValue3DAxisFormatter, &sipType_QValue3DAxisFormatter, 31, -1},
        {sipName_Q3DBars, &sipType_Q3DBars, -1, 11},
        {sipName_Q3DScatter, &sipType_Q3DScatter, -1, 12},
        {sipName_Q3DSurface, &sipType_Q3DSurface, -1, -1},
        {sipName_Q3DCamera, &sipType_Q3DCamera, -1, 14},
        {sipName_Q3DLight, &sipType_Q3DLight, -1, -1},
        {sipName_Q3DInputHandler, &sipType_Q3DInputHandler, 16, -1},
        {sipName_QTouch3DInputHandler, &sipType_QTouch3DInputHandler, -1, -1},
        {sipName_QCategory3DAxis, &sipType_QCategory3DAxis, -1, 18},
        {sipName_QValue3DAxis, &sipType_QValue3DAxis, -1, -1},
        {sipName_QBar3DSeries, &sipType_QBar3DSeries, -1, 20},
        {sipName_QScatter3DSeries, &sipType_QScatter3DSeries, -1, 21},
        {sipName_QSurface3DSeries, &sipType_QSurface3DSeries, -1, -1},
        {sipName_QBarDataProxy, &sipType_QBarDataProxy, 25, 23},
        {sipName_QSurfaceDataProxy, &sipType_QSurfaceDataProxy, 26, 24},
        {sipName_QScatterDataProxy, &sipType_QScatterDataProxy, 28, -1},
        {sipName_QItemModelBarDataProxy, &sipType_QItemModelBarDataProxy, -1, -1},
        {sipName_QHeightMapSurfaceDataProxy, &sipType_QHeightMapSurfaceDataProxy, -1, 27},
        {sipName_QItemModelSurfaceDataProxy, &sipType_QItemModelSurfaceDataProxy, -1, -1},
        {sipName_QItemModelScatterDataProxy, &sipType_QItemModelScatterDataProxy, -1, -1},
        {sipName_QCustom3DLabel, &sipType_QCustom3DLabel, -1, 30},
        {sipName_QCustom3DVolume, &sipType_QCustom3DVolume, -1, -1},
        {sipName_QLogValue3DAxisFormatter, &sipType_QLogValue3DAxisFormatter, -1, -1},
    };
    
    int i = 0;
    
    sipType = NULL;
    
    do
    {
        struct class_graph *cg = &graph[i];
    
        if (cg->name != NULL && sipCpp->inherits(cg->name))
        {
            sipType = *cg->type;
            i = cg->yes;
        }
        else
            i = cg->no;
    }
    while (i >= 0);
%End

public:
    enum ColorStyle
    {
        ColorStyleUniform,
        ColorStyleObjectGradient,
        ColorStyleRangeGradient,
    };

    enum Theme
    {
        ThemeQt,
        ThemePrimaryColors,
        ThemeDigia,
        ThemeStoneMoss,
        ThemeArmyBlue,
        ThemeRetro,
        ThemeEbony,
        ThemeIsabelle,
        ThemeUserDefined,
    };

    explicit Q3DTheme(QObject *parent /TransferThis/ = 0);
    Q3DTheme(Q3DTheme::Theme themeType, QObject *parent /TransferThis/ = 0);
    virtual ~Q3DTheme();
    void setType(Q3DTheme::Theme themeType);
    Q3DTheme::Theme type() const;
    void setBaseColors(const QList<QColor> &colors);
    QList<QColor> baseColors() const;
    void setBackgroundColor(const QColor &color);
    QColor backgroundColor() const;
    void setWindowColor(const QColor &color);
    QColor windowColor() const;
    void setLabelTextColor(const QColor &color);
    QColor labelTextColor() const;
    void setLabelBackgroundColor(const QColor &color);
    QColor labelBackgroundColor() const;
    void setGridLineColor(const QColor &color);
    QColor gridLineColor() const;
    void setSingleHighlightColor(const QColor &color);
    QColor singleHighlightColor() const;
    void setMultiHighlightColor(const QColor &color);
    QColor multiHighlightColor() const;
    void setLightColor(const QColor &color);
    QColor lightColor() const;
    void setBaseGradients(const QList<QLinearGradient> &gradients);
    QList<QLinearGradient> baseGradients() const;
    void setSingleHighlightGradient(const QLinearGradient &gradient);
    QLinearGradient singleHighlightGradient() const;
    void setMultiHighlightGradient(const QLinearGradient &gradient);
    QLinearGradient multiHighlightGradient() const;
    void setLightStrength(float strength);
    float lightStrength() const;
    void setAmbientLightStrength(float strength);
    float ambientLightStrength() const;
    void setHighlightLightStrength(float strength);
    float highlightLightStrength() const;
    void setLabelBorderEnabled(bool enabled);
    bool isLabelBorderEnabled() const;
    void setFont(const QFont &font);
    QFont font() const;
    void setBackgroundEnabled(bool enabled);
    bool isBackgroundEnabled() const;
    void setGridEnabled(bool enabled);
    bool isGridEnabled() const;
    void setLabelBackgroundEnabled(bool enabled);
    bool isLabelBackgroundEnabled() const;
    void setColorStyle(Q3DTheme::ColorStyle style);
    Q3DTheme::ColorStyle colorStyle() const;

signals:
    void typeChanged(Q3DTheme::Theme themeType);
    void baseColorsChanged(const QList<QColor> &colors);
    void backgroundColorChanged(const QColor &color);
    void windowColorChanged(const QColor &color);
    void labelTextColorChanged(const QColor &color);
    void labelBackgroundColorChanged(const QColor &color);
    void gridLineColorChanged(const QColor &color);
    void singleHighlightColorChanged(const QColor &color);
    void multiHighlightColorChanged(const QColor &color);
    void lightColorChanged(const QColor &color);
    void baseGradientsChanged(const QList<QLinearGradient> &gradients);
    void singleHighlightGradientChanged(const QLinearGradient &gradient);
    void multiHighlightGradientChanged(const QLinearGradient &gradient);
    void lightStrengthChanged(float strength);
    void ambientLightStrengthChanged(float strength);
    void highlightLightStrengthChanged(float strength);
    void labelBorderEnabledChanged(bool enabled);
    void fontChanged(const QFont &font);
    void backgroundEnabledChanged(bool enabled);
    void gridEnabledChanged(bool enabled);
    void labelBackgroundEnabledChanged(bool enabled);
    void colorStyleChanged(Q3DTheme::ColorStyle style);
};
