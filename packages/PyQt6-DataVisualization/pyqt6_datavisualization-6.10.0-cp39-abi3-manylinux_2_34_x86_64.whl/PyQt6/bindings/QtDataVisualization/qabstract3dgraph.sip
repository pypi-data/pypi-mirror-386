// qabstract3dgraph.sip generated by MetaSIP
//
// This file is part of the QtDataVisualization Python extension module.
//
// Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6-DataVisualization.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QAbstract3DGraph : QWindow /NoDefaultCtors/
{
%TypeHeaderCode
#include <qabstract3dgraph.h>
%End

public:
    enum SelectionFlag /BaseType=Flag/
    {
        SelectionNone,
        SelectionItem,
        SelectionRow,
        SelectionItemAndRow,
        SelectionColumn,
        SelectionItemAndColumn,
        SelectionRowAndColumn,
        SelectionItemRowAndColumn,
        SelectionSlice,
        SelectionMultiSeries,
    };

    typedef QFlags<QAbstract3DGraph::SelectionFlag> SelectionFlags;

    enum ShadowQuality
    {
        ShadowQualityNone,
        ShadowQualityLow,
        ShadowQualityMedium,
        ShadowQualityHigh,
        ShadowQualitySoftLow,
        ShadowQualitySoftMedium,
        ShadowQualitySoftHigh,
    };

    virtual ~QAbstract3DGraph();
    void addInputHandler(QAbstract3DInputHandler *inputHandler /Transfer/);
    void releaseInputHandler(QAbstract3DInputHandler *inputHandler /TransferBack/);
    void setActiveInputHandler(QAbstract3DInputHandler *inputHandler /Transfer/);
    QList<QAbstract3DInputHandler *> inputHandlers() const;
    void addTheme(Q3DTheme *theme /Transfer/);
    void releaseTheme(Q3DTheme *theme /TransferBack/);
    void setActiveTheme(Q3DTheme *theme /Transfer/);
    Q3DTheme *activeTheme() const;
    QList<Q3DTheme *> themes() const;
    void setSelectionMode(QAbstract3DGraph::SelectionFlags mode);
    QAbstract3DGraph::SelectionFlags selectionMode() const;
    void setShadowQuality(QAbstract3DGraph::ShadowQuality quality);
    QAbstract3DGraph::ShadowQuality shadowQuality() const;
    Q3DScene *scene() const;
    void clearSelection();
    QAbstract3DInputHandler *activeInputHandler() const;
    virtual bool shadowsSupported() const;

signals:
    void activeInputHandlerChanged(QAbstract3DInputHandler *inputHandler);
    void activeThemeChanged(Q3DTheme *theme);
    void selectionModeChanged(QAbstract3DGraph::SelectionFlags mode);
    void shadowQualityChanged(QAbstract3DGraph::ShadowQuality quality);

protected:
    virtual bool event(QEvent *event);
    virtual void resizeEvent(QResizeEvent *event);
    virtual void exposeEvent(QExposeEvent *event);
    virtual void mouseDoubleClickEvent(QMouseEvent *event);
    virtual void touchEvent(QTouchEvent *event);
    virtual void mousePressEvent(QMouseEvent *event);
    virtual void mouseReleaseEvent(QMouseEvent *event);
    virtual void mouseMoveEvent(QMouseEvent *event);
    virtual void wheelEvent(QWheelEvent *event);

public:
    enum ElementType
    {
        ElementNone,
        ElementSeries,
        ElementAxisXLabel,
        ElementAxisYLabel,
        ElementAxisZLabel,
        ElementCustomItem,
    };

    enum OptimizationHint /BaseType=Flag/
    {
        OptimizationDefault,
        OptimizationStatic,
    };

    typedef QFlags<QAbstract3DGraph::OptimizationHint> OptimizationHints;
    int addCustomItem(QCustom3DItem *item /Transfer/);
    void removeCustomItems();
    void removeCustomItem(QCustom3DItem *item);
    void removeCustomItemAt(const QVector3D &position);
    void releaseCustomItem(QCustom3DItem *item /TransferBack/);
    int selectedLabelIndex() const;
    QAbstract3DAxis *selectedAxis() const;
    int selectedCustomItemIndex() const;
    QCustom3DItem *selectedCustomItem() const;
    QImage renderToImage(int msaaSamples = 0, const QSize &imageSize = QSize());
    void setMeasureFps(bool enable);
    bool measureFps() const;
    qreal currentFps() const;
    void setOrthoProjection(bool enable);
    bool isOrthoProjection() const;
    QAbstract3DGraph::ElementType selectedElement() const;
    void setAspectRatio(qreal ratio);
    qreal aspectRatio() const;
    void setOptimizationHints(QAbstract3DGraph::OptimizationHints hints);
    QAbstract3DGraph::OptimizationHints optimizationHints() const;

signals:
    void selectedElementChanged(QAbstract3DGraph::ElementType type);
    void measureFpsChanged(bool enabled);
    void currentFpsChanged(qreal fps);
    void orthoProjectionChanged(bool enabled);
    void aspectRatioChanged(qreal ratio);
    void optimizationHintsChanged(QAbstract3DGraph::OptimizationHints hints);

public:
    QList<QCustom3DItem *> customItems() const;
    void setPolar(bool enable);
    bool isPolar() const;
    void setRadialLabelOffset(float offset);
    float radialLabelOffset() const;
    void setHorizontalAspectRatio(qreal ratio);
    qreal horizontalAspectRatio() const;
    void setReflection(bool enable);
    bool isReflection() const;
    void setReflectivity(qreal reflectivity);
    qreal reflectivity() const;
    void setLocale(const QLocale &locale);
    QLocale locale() const;
    QVector3D queriedGraphPosition() const;
    void setMargin(qreal margin);
    qreal margin() const;

signals:
    void polarChanged(bool enabled);
    void radialLabelOffsetChanged(float offset);
    void horizontalAspectRatioChanged(qreal ratio);
    void reflectionChanged(bool enabled);
    void reflectivityChanged(qreal reflectivity);
    void localeChanged(const QLocale &locale);
    void queriedGraphPositionChanged(const QVector3D &data);
    void marginChanged(qreal margin);

public:
    bool hasContext() const;
%If (QtDataVisualization_6_3_0 -)
    bool hasSeries(QAbstract3DSeries *series) const;
%End
};
