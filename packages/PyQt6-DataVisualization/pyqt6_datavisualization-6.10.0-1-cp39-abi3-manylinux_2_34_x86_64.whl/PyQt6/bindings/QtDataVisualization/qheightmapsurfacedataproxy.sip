// qheightmapsurfacedataproxy.sip generated by MetaSIP
//
// This file is part of the QtDataVisualization Python extension module.
//
// Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6-DataVisualization.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QHeightMapSurfaceDataProxy : public QSurfaceDataProxy
{
%TypeHeaderCode
#include <qheightmapsurfacedataproxy.h>
%End

public:
    explicit QHeightMapSurfaceDataProxy(QObject *parent /TransferThis/ = 0);
    QHeightMapSurfaceDataProxy(const QImage &image, QObject *parent /TransferThis/ = 0);
    QHeightMapSurfaceDataProxy(const QString &filename, QObject *parent /TransferThis/ = 0);
    virtual ~QHeightMapSurfaceDataProxy();
    void setHeightMap(const QImage &image);
    QImage heightMap() const;
    void setHeightMapFile(const QString &filename);
    QString heightMapFile() const;
    void setValueRanges(float minX, float maxX, float minZ, float maxZ);
    void setMinXValue(float min);
    float minXValue() const;
    void setMaxXValue(float max);
    float maxXValue() const;
    void setMinZValue(float min);
    float minZValue() const;
    void setMaxZValue(float max);
    float maxZValue() const;

signals:
    void heightMapChanged(const QImage &image);
    void heightMapFileChanged(const QString &filename);
    void minXValueChanged(float value);
    void maxXValueChanged(float value);
    void minZValueChanged(float value);
    void maxZValueChanged(float value);

public:
%If (QtDataVisualization_6_3_0 -)
    void setMinYValue(float min);
%End
%If (QtDataVisualization_6_3_0 -)
    float minYValue() const;
%End
%If (QtDataVisualization_6_3_0 -)
    void setMaxYValue(float max);
%End
%If (QtDataVisualization_6_3_0 -)
    float maxYValue() const;
%End
%If (QtDataVisualization_6_3_0 -)
    void setAutoScaleY(bool enabled);
%End
%If (QtDataVisualization_6_3_0 -)
    bool autoScaleY() const;
%End

signals:
%If (QtDataVisualization_6_3_0 -)
    void minYValueChanged(float value);
%End
%If (QtDataVisualization_6_3_0 -)
    void maxYValueChanged(float value);
%End
%If (QtDataVisualization_6_3_0 -)
    void autoScaleYChanged(bool enabled);
%End
};
