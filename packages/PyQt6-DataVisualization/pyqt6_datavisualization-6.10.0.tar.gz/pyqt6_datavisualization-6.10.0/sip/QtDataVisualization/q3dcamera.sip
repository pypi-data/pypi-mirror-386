// q3dcamera.sip generated by MetaSIP
//
// This file is part of the QtDataVisualization Python extension module.
//
// Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6-DataVisualization.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class Q3DCamera : public Q3DObject
{
%TypeHeaderCode
#include <q3dcamera.h>
%End

public:
    enum CameraPreset
    {
        CameraPresetNone,
        CameraPresetFrontLow,
        CameraPresetFront,
        CameraPresetFrontHigh,
        CameraPresetLeftLow,
        CameraPresetLeft,
        CameraPresetLeftHigh,
        CameraPresetRightLow,
        CameraPresetRight,
        CameraPresetRightHigh,
        CameraPresetBehindLow,
        CameraPresetBehind,
        CameraPresetBehindHigh,
        CameraPresetIsometricLeft,
        CameraPresetIsometricLeftHigh,
        CameraPresetIsometricRight,
        CameraPresetIsometricRightHigh,
        CameraPresetDirectlyAbove,
        CameraPresetDirectlyAboveCW45,
        CameraPresetDirectlyAboveCCW45,
        CameraPresetFrontBelow,
        CameraPresetLeftBelow,
        CameraPresetRightBelow,
        CameraPresetBehindBelow,
        CameraPresetDirectlyBelow,
    };

    explicit Q3DCamera(QObject *parent /TransferThis/ = 0);
    virtual ~Q3DCamera();
    float xRotation() const;
    void setXRotation(float rotation);
    float yRotation() const;
    void setYRotation(float rotation);
    bool wrapXRotation() const;
    void setWrapXRotation(bool isEnabled);
    bool wrapYRotation() const;
    void setWrapYRotation(bool isEnabled);
    virtual void copyValuesFrom(const Q3DObject &source);
    Q3DCamera::CameraPreset cameraPreset() const;
    void setCameraPreset(Q3DCamera::CameraPreset preset);
    void setCameraPosition(float horizontal, float vertical, float zoom = 100.F);
    float zoomLevel() const;
    void setZoomLevel(float zoomLevel);

signals:
    void xRotationChanged(float rotation);
    void yRotationChanged(float rotation);
    void zoomLevelChanged(float zoomLevel);
    void cameraPresetChanged(Q3DCamera::CameraPreset preset);
    void wrapXRotationChanged(bool isEnabled);
    void wrapYRotationChanged(bool isEnabled);

public:
    float minZoomLevel() const;
    void setMinZoomLevel(float zoomLevel);
    float maxZoomLevel() const;
    void setMaxZoomLevel(float zoomLevel);
    QVector3D target() const;
    void setTarget(const QVector3D &target);

signals:
    void minZoomLevelChanged(float zoomLevel);
    void maxZoomLevelChanged(float zoomLevel);
    void targetChanged(const QVector3D &target);
};
