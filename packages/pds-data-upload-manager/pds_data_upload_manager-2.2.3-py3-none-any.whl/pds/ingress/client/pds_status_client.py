#!/usr/bin/env python3
"""
=================
pds_status_client
=================

Client side script used to interact with the DUM Ingress Status service in AWS.
"""
import argparse
import json
import os
from http import HTTPStatus

import requests
from pds.ingress import __version__
from pds.ingress.util.auth_util import AuthUtil
from pds.ingress.util.config_util import ConfigUtil
from pds.ingress.util.hash_util import md5_for_path
from pds.ingress.util.log_util import get_log_level
from pds.ingress.util.log_util import get_logger
from pds.ingress.util.node_util import NodeUtil


def setup_argparser():
    """
    Helper function to perform setup of the ArgumentParser for Status client
    script.

    Returns
    -------
    parser : argparse.ArgumentParser
        The command-line argument parser for use with the pds-status-client
        script.

    """
    parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument(
        "-c",
        "--config-path",
        type=str,
        default=ConfigUtil.default_config_path(),
        help="Path to the INI config for use with this client. "
        "If not provided, the default config "
        "%(default)s is used.",
    )
    parser.add_argument(
        "-e",
        "--email",
        required=True,
        help="Return email address to send status report to.",
    )
    parser.add_argument(
        "-n",
        "--node",
        type=str.lower,
        required=True,
        choices=NodeUtil.permissible_node_ids(),
        help="PDS node identifier of the status requestor. "
        "This value is used by the status service to derive "
        "S3 upload locations. Argument is case-insensitive.",
    )
    parser.add_argument(
        "--log-level",
        "-l",
        type=str,
        default=None,
        choices=["warn", "warning", "info", "debug"],
        help="Sets the Logging level for logged messages. If not "
        "provided, the logging level set in the INI config "
        "is used instead.",
    )
    parser.add_argument(
        "--version",
        action="version",
        version=f"Data Upload Manager v{__version__}",
        help="Print the Data Upload Manager release version and exit.",
    )
    parser.add_argument(
        "manifest_path",
        type=str,
        help="Path to a DUM manifiest JSON file which will determine the set of "
        "files included in the returned status report.\nThis manifest should "
        "be generated by the pds-ingress-client via the --manifest-path argument.",
    )

    return parser


def main(args):
    """
    Main entry point for the pds-status-client script.

    Parameters
    ----------
    args : argparse.Namespace
        The parsed command-line arguments.

    """
    # Note: this should always get called first to ensure the Config singleton is
    #       fully initialized before used in any calls to get_logger
    config = ConfigUtil.get_config(args.config_path)

    logger = get_logger("main", log_level=get_log_level(args.log_level), cloudwatch=False, file=False)

    logger.info("Starting PDS Data Upload Manager Status Client v%s", __version__)

    if not os.path.exists(args.manifest_path):
        raise ValueError(f'Manifest path "{args.manifest_path}" does not exist')

    cognito_config = config["COGNITO"]

    if not cognito_config["username"] and cognito_config["password"]:
        raise ValueError("Username and Password must be specified in the COGNITO portion of the INI config")

    authentication_result = AuthUtil.perform_cognito_authentication(cognito_config)

    bearer_token = AuthUtil.create_bearer_token(authentication_result)

    api_gateway_config = config["API_GATEWAY"]
    api_gateway_template = api_gateway_config["url_template"]
    api_gateway_id = api_gateway_config["id"]
    api_gateway_region = api_gateway_config["region"]
    api_gateway_stage = api_gateway_config["stage"]

    # Submit the request to stage the manifest file to S3
    request = [
        {
            "ingress_path": args.manifest_path,
            "trimmed_path": os.path.join("manifests", os.path.basename(args.manifest_path)),
            "md5": md5_for_path(args.manifest_path).hexdigest(),
            "size": os.stat(args.manifest_path).st_size,
            "last_modified": os.path.getmtime(args.manifest_path),
        }
    ]

    api_gateway_resource = "request"

    api_gateway_url = api_gateway_template.format(
        id=api_gateway_id, region=api_gateway_region, stage=api_gateway_stage, resource=api_gateway_resource
    )

    params = {"node": args.node, "node_name": NodeUtil.node_id_to_long_name[args.node]}
    headers = {
        "Authorization": bearer_token,
        "UserGroup": NodeUtil.node_id_to_group_name(args.node),
        "ForceOverwrite": "1",  # Likely we'll repeat requests using same manifest file names, so always overwrite
        "ClientVersion": __version__,
        "content-type": "application/json",
        "x-amz-docs-region": api_gateway_region,
    }

    logger.info("Submitting S3 upload request for Manifest file...")
    response = requests.post(api_gateway_url, params=params, data=json.dumps(request), headers=headers, timeout=600)

    if response.status_code == HTTPStatus.OK:
        ingress_response = response.json()[0]  # Should only ever be one item in the response
    else:
        response.raise_for_status()

    bucket = ingress_response.get("bucket")
    key = ingress_response.get("key")
    s3_ingress_url = ingress_response.get("s3_url")

    if any(value is None for value in [bucket, key, s3_ingress_url]):
        raise RuntimeError("Invalid response from S3 ingress request, missing bucket, key, or s3_url")

    headers = {"Content-MD5": ingress_response.get("base64_md5")}

    logger.info("Uploading Manifest file to S3...")
    with open(os.path.abspath(args.manifest_path), "r") as infile:
        response = requests.put(s3_ingress_url, data=infile, headers=headers)
        response.raise_for_status()

    # Submit the request to the status service, informing it of the S3 location of the manifest file
    api_gateway_resource = "status"

    api_gateway_url = api_gateway_template.format(
        id=api_gateway_id, region=api_gateway_region, stage=api_gateway_stage, resource=api_gateway_resource
    )

    manifest_s3_location = f"s3://{bucket}/{key}"
    payload = {"Message": manifest_s3_location, "Email": args.email, "Node": args.node}

    headers = {
        "Authorization": bearer_token,
        "UserGroup": NodeUtil.node_id_to_group_name(args.node),
        "ClientVersion": __version__,
        "content-type": "application/json",
        "x-amz-docs-region": api_gateway_region,
    }

    logger.info("Submitting request to Status Service...")
    response = requests.post(api_gateway_url, data=json.dumps(payload), headers=headers, timeout=600)

    if response.status_code == HTTPStatus.OK:
        logger.info("Status request successfully submitted, report will be emailed to %s", args.email)
    else:
        response.raise_for_status()


def console_main():
    """No argument entrypoint for use with setuptools"""
    parser = setup_argparser()
    args = parser.parse_args()
    main(args)


if __name__ == "__main__":
    console_main()
