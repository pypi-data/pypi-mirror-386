"""
abort_multipart_uploads.py

Utility script to abort unclosed multipart uploads in an S3 bucket.
Partially generated by GitHub Copilot.
"""
import json
import subprocess
import sys


def list_multipart_uploads(bucket):
    """
    List unclosed multipart uploads in an S3 bucket.

    Parameters
    ----------
    bucket : str
        Name of the S3 bucket.

    Returns
    -------
    upload_list : list
        List of dictionaries containing information about unclosed multipart uploads.

    """
    cmd = ["aws", "s3api", "list-multipart-uploads", "--bucket", bucket, "--output", "json"]
    result = subprocess.run(cmd, capture_output=True, text=True, check=True)
    upload_ids = json.loads(result.stdout)
    print("Found %d unclosed multipart uploads in bucket '%s'." % (len(upload_ids.get("Uploads", [])), bucket))
    return upload_ids["Uploads"]


def abort_multipart_upload(bucket, key, upload_id):
    """
    Abort a specific multipart upload in an S3 bucket.

    Parameters
    ----------
    bucket : str
        Name of the S3 bucket.
    key : str
        S3 key for the object being multipart uploaded.
    upload_id : dict
        Dictionary containing the upload ID and other metadata.

    """
    cmd = ["aws", "s3api", "abort-multipart-upload", "--bucket", bucket, "--key", key, "--upload-id", upload_id]
    subprocess.run(cmd, check=True)
    print(f"Aborted multipart upload: {key=} {upload_id=}")


def main():
    """Main function to abort multipart uploads in an S3 bucket."""
    if len(sys.argv) != 2:
        print("Usage: python abort_multipart_uploads.py <bucket>")
        sys.exit(1)

    bucket = sys.argv[1]

    try:
        upload_ids = list_multipart_uploads(bucket)
        if not upload_ids:
            print("No multipart uploads found for the specified bucket.")
            return
        for upload_id in upload_ids:
            abort_multipart_upload(bucket, upload_id["Key"], upload_id["UploadId"])
    except subprocess.CalledProcessError as e:
        print("Error:", e.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
