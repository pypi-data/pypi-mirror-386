# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata


class UpsertTraitRequestBody(UniversalBaseModel):
    incr: typing.Optional[int] = pydantic.Field(default=None)
    """
    Amount to increment the trait by (positive or negative)
    """

    keys: typing.Dict[str, str] = pydantic.Field()
    """
    Key/value pairs to identify a company or user
    """

    set_: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="set")] = pydantic.Field(default=None)
    """
    Value to set the trait to
    """

    trait: str = pydantic.Field()
    """
    Name of the trait to update
    """

    update_only: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Unless this is set, the company or user will be created if it does not already exist
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
