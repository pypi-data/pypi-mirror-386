# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .search_billing_prices_response_params_tiers_mode import SearchBillingPricesResponseParamsTiersMode
from .search_billing_prices_response_params_usage_type import SearchBillingPricesResponseParamsUsageType


class SearchBillingPricesParams(UniversalBaseModel):
    """
    Input parameters
    """

    for_initial_plan: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Filter for prices valid for initial plans (free prices only)
    """

    for_trial_expiry_plan: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Filter for prices valid for trial expiry plans (free prices only)
    """

    ids: typing.Optional[typing.List[str]] = None
    interval: typing.Optional[str] = None
    limit: typing.Optional[int] = pydantic.Field(default=None)
    """
    Page limit (default 100)
    """

    offset: typing.Optional[int] = pydantic.Field(default=None)
    """
    Page offset (default 0)
    """

    price: typing.Optional[int] = None
    product_id: typing.Optional[str] = None
    q: typing.Optional[str] = None
    requires_payment_method: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Filter for prices that require a payment method (inverse of ForInitialPlan)
    """

    tiers_mode: typing.Optional[SearchBillingPricesResponseParamsTiersMode] = None
    usage_type: typing.Optional[SearchBillingPricesResponseParamsUsageType] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
