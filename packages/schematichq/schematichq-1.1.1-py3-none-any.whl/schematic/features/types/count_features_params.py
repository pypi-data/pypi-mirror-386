# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class CountFeaturesParams(UniversalBaseModel):
    """
    Input parameters
    """

    boolean_require_event: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Only return boolean features if there is an associated event. Automatically includes boolean in the feature types filter.
    """

    feature_type: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    Filter by one or more feature types (boolean, event, trait)
    """

    ids: typing.Optional[typing.List[str]] = None
    limit: typing.Optional[int] = pydantic.Field(default=None)
    """
    Page limit (default 100)
    """

    offset: typing.Optional[int] = pydantic.Field(default=None)
    """
    Page offset (default 0)
    """

    q: typing.Optional[str] = pydantic.Field(default=None)
    """
    Search by feature name or ID
    """

    without_company_override_for: typing.Optional[str] = pydantic.Field(default=None)
    """
    Filter out features that already have a company override for the specified company ID
    """

    without_plan_entitlement_for: typing.Optional[str] = pydantic.Field(default=None)
    """
    Filter out features that already have a plan entitlement for the specified plan ID
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
