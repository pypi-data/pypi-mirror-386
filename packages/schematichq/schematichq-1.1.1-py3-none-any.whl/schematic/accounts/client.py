# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawAccountsClient, RawAccountsClient
from .types.count_api_keys_response import CountApiKeysResponse
from .types.count_api_requests_response import CountApiRequestsResponse
from .types.create_api_key_response import CreateApiKeyResponse
from .types.create_environment_request_body_environment_type import CreateEnvironmentRequestBodyEnvironmentType
from .types.create_environment_response import CreateEnvironmentResponse
from .types.delete_api_key_response import DeleteApiKeyResponse
from .types.delete_environment_response import DeleteEnvironmentResponse
from .types.get_api_key_response import GetApiKeyResponse
from .types.get_api_request_response import GetApiRequestResponse
from .types.get_environment_response import GetEnvironmentResponse
from .types.list_api_keys_response import ListApiKeysResponse
from .types.list_api_requests_response import ListApiRequestsResponse
from .types.list_environments_response import ListEnvironmentsResponse
from .types.quickstart_response import QuickstartResponse
from .types.update_api_key_response import UpdateApiKeyResponse
from .types.update_environment_request_body_environment_type import UpdateEnvironmentRequestBodyEnvironmentType
from .types.update_environment_response import UpdateEnvironmentResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AccountsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawAccountsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawAccountsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawAccountsClient
        """
        return self._raw_client

    def list_api_keys(
        self,
        *,
        require_environment: bool,
        environment_id: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListApiKeysResponse:
        """
        Parameters
        ----------
        require_environment : bool

        environment_id : typing.Optional[str]

        limit : typing.Optional[int]
            Page limit (default 100)

        offset : typing.Optional[int]
            Page offset (default 0)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListApiKeysResponse
            OK

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.accounts.list_api_keys(
            environment_id="environment_id",
            require_environment=True,
            limit=1,
            offset=1,
        )
        """
        _response = self._raw_client.list_api_keys(
            require_environment=require_environment,
            environment_id=environment_id,
            limit=limit,
            offset=offset,
            request_options=request_options,
        )
        return _response.data

    def create_api_key(
        self,
        *,
        name: str,
        description: typing.Optional[str] = OMIT,
        environment_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateApiKeyResponse:
        """
        Parameters
        ----------
        name : str

        description : typing.Optional[str]

        environment_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateApiKeyResponse
            Created

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.accounts.create_api_key(
            name="name",
        )
        """
        _response = self._raw_client.create_api_key(
            name=name, description=description, environment_id=environment_id, request_options=request_options
        )
        return _response.data

    def get_api_key(
        self, api_key_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetApiKeyResponse:
        """
        Parameters
        ----------
        api_key_id : str
            api_key_id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetApiKeyResponse
            OK

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.accounts.get_api_key(
            api_key_id="api_key_id",
        )
        """
        _response = self._raw_client.get_api_key(api_key_id, request_options=request_options)
        return _response.data

    def update_api_key(
        self,
        api_key_id: str,
        *,
        description: typing.Optional[str] = OMIT,
        name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateApiKeyResponse:
        """
        Parameters
        ----------
        api_key_id : str
            api_key_id

        description : typing.Optional[str]

        name : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateApiKeyResponse
            OK

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.accounts.update_api_key(
            api_key_id="api_key_id",
        )
        """
        _response = self._raw_client.update_api_key(
            api_key_id, description=description, name=name, request_options=request_options
        )
        return _response.data

    def delete_api_key(
        self, api_key_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteApiKeyResponse:
        """
        Parameters
        ----------
        api_key_id : str
            api_key_id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteApiKeyResponse
            OK

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.accounts.delete_api_key(
            api_key_id="api_key_id",
        )
        """
        _response = self._raw_client.delete_api_key(api_key_id, request_options=request_options)
        return _response.data

    def count_api_keys(
        self,
        *,
        require_environment: bool,
        environment_id: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CountApiKeysResponse:
        """
        Parameters
        ----------
        require_environment : bool

        environment_id : typing.Optional[str]

        limit : typing.Optional[int]
            Page limit (default 100)

        offset : typing.Optional[int]
            Page offset (default 0)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CountApiKeysResponse
            OK

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.accounts.count_api_keys(
            environment_id="environment_id",
            require_environment=True,
            limit=1,
            offset=1,
        )
        """
        _response = self._raw_client.count_api_keys(
            require_environment=require_environment,
            environment_id=environment_id,
            limit=limit,
            offset=offset,
            request_options=request_options,
        )
        return _response.data

    def list_api_requests(
        self,
        *,
        q: typing.Optional[str] = None,
        request_type: typing.Optional[str] = None,
        environment_id: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListApiRequestsResponse:
        """
        Parameters
        ----------
        q : typing.Optional[str]

        request_type : typing.Optional[str]

        environment_id : typing.Optional[str]

        limit : typing.Optional[int]
            Page limit (default 100)

        offset : typing.Optional[int]
            Page offset (default 0)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListApiRequestsResponse
            OK

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.accounts.list_api_requests(
            q="q",
            request_type="request_type",
            environment_id="environment_id",
            limit=1,
            offset=1,
        )
        """
        _response = self._raw_client.list_api_requests(
            q=q,
            request_type=request_type,
            environment_id=environment_id,
            limit=limit,
            offset=offset,
            request_options=request_options,
        )
        return _response.data

    def get_api_request(
        self, api_request_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetApiRequestResponse:
        """
        Parameters
        ----------
        api_request_id : str
            api_request_id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetApiRequestResponse
            OK

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.accounts.get_api_request(
            api_request_id="api_request_id",
        )
        """
        _response = self._raw_client.get_api_request(api_request_id, request_options=request_options)
        return _response.data

    def count_api_requests(
        self,
        *,
        q: typing.Optional[str] = None,
        request_type: typing.Optional[str] = None,
        environment_id: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CountApiRequestsResponse:
        """
        Parameters
        ----------
        q : typing.Optional[str]

        request_type : typing.Optional[str]

        environment_id : typing.Optional[str]

        limit : typing.Optional[int]
            Page limit (default 100)

        offset : typing.Optional[int]
            Page offset (default 0)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CountApiRequestsResponse
            OK

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.accounts.count_api_requests(
            q="q",
            request_type="request_type",
            environment_id="environment_id",
            limit=1,
            offset=1,
        )
        """
        _response = self._raw_client.count_api_requests(
            q=q,
            request_type=request_type,
            environment_id=environment_id,
            limit=limit,
            offset=offset,
            request_options=request_options,
        )
        return _response.data

    def list_environments(
        self,
        *,
        ids: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListEnvironmentsResponse:
        """
        Parameters
        ----------
        ids : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        limit : typing.Optional[int]
            Page limit (default 100)

        offset : typing.Optional[int]
            Page offset (default 0)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListEnvironmentsResponse
            OK

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.accounts.list_environments(
            limit=1,
            offset=1,
        )
        """
        _response = self._raw_client.list_environments(
            ids=ids, limit=limit, offset=offset, request_options=request_options
        )
        return _response.data

    def create_environment(
        self,
        *,
        environment_type: CreateEnvironmentRequestBodyEnvironmentType,
        name: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateEnvironmentResponse:
        """
        Parameters
        ----------
        environment_type : CreateEnvironmentRequestBodyEnvironmentType

        name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateEnvironmentResponse
            Created

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.accounts.create_environment(
            environment_type="development",
            name="name",
        )
        """
        _response = self._raw_client.create_environment(
            environment_type=environment_type, name=name, request_options=request_options
        )
        return _response.data

    def get_environment(
        self, environment_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetEnvironmentResponse:
        """
        Parameters
        ----------
        environment_id : str
            environment_id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetEnvironmentResponse
            OK

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.accounts.get_environment(
            environment_id="environment_id",
        )
        """
        _response = self._raw_client.get_environment(environment_id, request_options=request_options)
        return _response.data

    def update_environment(
        self,
        environment_id: str,
        *,
        environment_type: typing.Optional[UpdateEnvironmentRequestBodyEnvironmentType] = OMIT,
        name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateEnvironmentResponse:
        """
        Parameters
        ----------
        environment_id : str
            environment_id

        environment_type : typing.Optional[UpdateEnvironmentRequestBodyEnvironmentType]

        name : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateEnvironmentResponse
            OK

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.accounts.update_environment(
            environment_id="environment_id",
        )
        """
        _response = self._raw_client.update_environment(
            environment_id, environment_type=environment_type, name=name, request_options=request_options
        )
        return _response.data

    def delete_environment(
        self, environment_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteEnvironmentResponse:
        """
        Parameters
        ----------
        environment_id : str
            environment_id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteEnvironmentResponse
            OK

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.accounts.delete_environment(
            environment_id="environment_id",
        )
        """
        _response = self._raw_client.delete_environment(environment_id, request_options=request_options)
        return _response.data

    def quickstart(self, *, request_options: typing.Optional[RequestOptions] = None) -> QuickstartResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        QuickstartResponse
            Created

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.accounts.quickstart()
        """
        _response = self._raw_client.quickstart(request_options=request_options)
        return _response.data


class AsyncAccountsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawAccountsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawAccountsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawAccountsClient
        """
        return self._raw_client

    async def list_api_keys(
        self,
        *,
        require_environment: bool,
        environment_id: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListApiKeysResponse:
        """
        Parameters
        ----------
        require_environment : bool

        environment_id : typing.Optional[str]

        limit : typing.Optional[int]
            Page limit (default 100)

        offset : typing.Optional[int]
            Page offset (default 0)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListApiKeysResponse
            OK

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.accounts.list_api_keys(
                environment_id="environment_id",
                require_environment=True,
                limit=1,
                offset=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_api_keys(
            require_environment=require_environment,
            environment_id=environment_id,
            limit=limit,
            offset=offset,
            request_options=request_options,
        )
        return _response.data

    async def create_api_key(
        self,
        *,
        name: str,
        description: typing.Optional[str] = OMIT,
        environment_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateApiKeyResponse:
        """
        Parameters
        ----------
        name : str

        description : typing.Optional[str]

        environment_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateApiKeyResponse
            Created

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.accounts.create_api_key(
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_api_key(
            name=name, description=description, environment_id=environment_id, request_options=request_options
        )
        return _response.data

    async def get_api_key(
        self, api_key_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetApiKeyResponse:
        """
        Parameters
        ----------
        api_key_id : str
            api_key_id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetApiKeyResponse
            OK

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.accounts.get_api_key(
                api_key_id="api_key_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_api_key(api_key_id, request_options=request_options)
        return _response.data

    async def update_api_key(
        self,
        api_key_id: str,
        *,
        description: typing.Optional[str] = OMIT,
        name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateApiKeyResponse:
        """
        Parameters
        ----------
        api_key_id : str
            api_key_id

        description : typing.Optional[str]

        name : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateApiKeyResponse
            OK

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.accounts.update_api_key(
                api_key_id="api_key_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update_api_key(
            api_key_id, description=description, name=name, request_options=request_options
        )
        return _response.data

    async def delete_api_key(
        self, api_key_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteApiKeyResponse:
        """
        Parameters
        ----------
        api_key_id : str
            api_key_id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteApiKeyResponse
            OK

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.accounts.delete_api_key(
                api_key_id="api_key_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_api_key(api_key_id, request_options=request_options)
        return _response.data

    async def count_api_keys(
        self,
        *,
        require_environment: bool,
        environment_id: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CountApiKeysResponse:
        """
        Parameters
        ----------
        require_environment : bool

        environment_id : typing.Optional[str]

        limit : typing.Optional[int]
            Page limit (default 100)

        offset : typing.Optional[int]
            Page offset (default 0)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CountApiKeysResponse
            OK

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.accounts.count_api_keys(
                environment_id="environment_id",
                require_environment=True,
                limit=1,
                offset=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.count_api_keys(
            require_environment=require_environment,
            environment_id=environment_id,
            limit=limit,
            offset=offset,
            request_options=request_options,
        )
        return _response.data

    async def list_api_requests(
        self,
        *,
        q: typing.Optional[str] = None,
        request_type: typing.Optional[str] = None,
        environment_id: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListApiRequestsResponse:
        """
        Parameters
        ----------
        q : typing.Optional[str]

        request_type : typing.Optional[str]

        environment_id : typing.Optional[str]

        limit : typing.Optional[int]
            Page limit (default 100)

        offset : typing.Optional[int]
            Page offset (default 0)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListApiRequestsResponse
            OK

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.accounts.list_api_requests(
                q="q",
                request_type="request_type",
                environment_id="environment_id",
                limit=1,
                offset=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_api_requests(
            q=q,
            request_type=request_type,
            environment_id=environment_id,
            limit=limit,
            offset=offset,
            request_options=request_options,
        )
        return _response.data

    async def get_api_request(
        self, api_request_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetApiRequestResponse:
        """
        Parameters
        ----------
        api_request_id : str
            api_request_id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetApiRequestResponse
            OK

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.accounts.get_api_request(
                api_request_id="api_request_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_api_request(api_request_id, request_options=request_options)
        return _response.data

    async def count_api_requests(
        self,
        *,
        q: typing.Optional[str] = None,
        request_type: typing.Optional[str] = None,
        environment_id: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CountApiRequestsResponse:
        """
        Parameters
        ----------
        q : typing.Optional[str]

        request_type : typing.Optional[str]

        environment_id : typing.Optional[str]

        limit : typing.Optional[int]
            Page limit (default 100)

        offset : typing.Optional[int]
            Page offset (default 0)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CountApiRequestsResponse
            OK

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.accounts.count_api_requests(
                q="q",
                request_type="request_type",
                environment_id="environment_id",
                limit=1,
                offset=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.count_api_requests(
            q=q,
            request_type=request_type,
            environment_id=environment_id,
            limit=limit,
            offset=offset,
            request_options=request_options,
        )
        return _response.data

    async def list_environments(
        self,
        *,
        ids: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListEnvironmentsResponse:
        """
        Parameters
        ----------
        ids : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        limit : typing.Optional[int]
            Page limit (default 100)

        offset : typing.Optional[int]
            Page offset (default 0)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListEnvironmentsResponse
            OK

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.accounts.list_environments(
                limit=1,
                offset=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_environments(
            ids=ids, limit=limit, offset=offset, request_options=request_options
        )
        return _response.data

    async def create_environment(
        self,
        *,
        environment_type: CreateEnvironmentRequestBodyEnvironmentType,
        name: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateEnvironmentResponse:
        """
        Parameters
        ----------
        environment_type : CreateEnvironmentRequestBodyEnvironmentType

        name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateEnvironmentResponse
            Created

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.accounts.create_environment(
                environment_type="development",
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_environment(
            environment_type=environment_type, name=name, request_options=request_options
        )
        return _response.data

    async def get_environment(
        self, environment_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetEnvironmentResponse:
        """
        Parameters
        ----------
        environment_id : str
            environment_id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetEnvironmentResponse
            OK

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.accounts.get_environment(
                environment_id="environment_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_environment(environment_id, request_options=request_options)
        return _response.data

    async def update_environment(
        self,
        environment_id: str,
        *,
        environment_type: typing.Optional[UpdateEnvironmentRequestBodyEnvironmentType] = OMIT,
        name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateEnvironmentResponse:
        """
        Parameters
        ----------
        environment_id : str
            environment_id

        environment_type : typing.Optional[UpdateEnvironmentRequestBodyEnvironmentType]

        name : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateEnvironmentResponse
            OK

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.accounts.update_environment(
                environment_id="environment_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update_environment(
            environment_id, environment_type=environment_type, name=name, request_options=request_options
        )
        return _response.data

    async def delete_environment(
        self, environment_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteEnvironmentResponse:
        """
        Parameters
        ----------
        environment_id : str
            environment_id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteEnvironmentResponse
            OK

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.accounts.delete_environment(
                environment_id="environment_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_environment(environment_id, request_options=request_options)
        return _response.data

    async def quickstart(self, *, request_options: typing.Optional[RequestOptions] = None) -> QuickstartResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        QuickstartResponse
            Created

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.accounts.quickstart()


        asyncio.run(main())
        """
        _response = await self._raw_client.quickstart(request_options=request_options)
        return _response.data
