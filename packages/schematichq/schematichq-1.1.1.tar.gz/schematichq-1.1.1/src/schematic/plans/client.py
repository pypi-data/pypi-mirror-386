# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.create_or_update_condition_group_request_body import CreateOrUpdateConditionGroupRequestBody
from ..types.create_or_update_condition_request_body import CreateOrUpdateConditionRequestBody
from .raw_client import AsyncRawPlansClient, RawPlansClient
from .types.count_plans_request_plan_type import CountPlansRequestPlanType
from .types.count_plans_response import CountPlansResponse
from .types.create_plan_request_body_plan_type import CreatePlanRequestBodyPlanType
from .types.create_plan_response import CreatePlanResponse
from .types.delete_audience_response import DeleteAudienceResponse
from .types.delete_plan_response import DeletePlanResponse
from .types.get_audience_response import GetAudienceResponse
from .types.get_plan_response import GetPlanResponse
from .types.list_plan_issues_response import ListPlanIssuesResponse
from .types.list_plans_request_plan_type import ListPlansRequestPlanType
from .types.list_plans_response import ListPlansResponse
from .types.update_audience_response import UpdateAudienceResponse
from .types.update_company_plans_response import UpdateCompanyPlansResponse
from .types.update_plan_response import UpdatePlanResponse
from .types.upsert_billing_product_plan_response import UpsertBillingProductPlanResponse
from .types.upsert_billing_product_request_body_charge_type import UpsertBillingProductRequestBodyChargeType

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PlansClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawPlansClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawPlansClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawPlansClient
        """
        return self._raw_client

    def update_company_plans(
        self,
        company_plan_id: str,
        *,
        add_on_ids: typing.Sequence[str],
        base_plan_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateCompanyPlansResponse:
        """
        Parameters
        ----------
        company_plan_id : str
            company_plan_id

        add_on_ids : typing.Sequence[str]

        base_plan_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateCompanyPlansResponse
            OK

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.plans.update_company_plans(
            company_plan_id="company_plan_id",
            add_on_ids=["add_on_ids"],
        )
        """
        _response = self._raw_client.update_company_plans(
            company_plan_id, add_on_ids=add_on_ids, base_plan_id=base_plan_id, request_options=request_options
        )
        return _response.data

    def get_audience(
        self, plan_audience_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetAudienceResponse:
        """
        Parameters
        ----------
        plan_audience_id : str
            plan_audience_id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAudienceResponse
            OK

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.plans.get_audience(
            plan_audience_id="plan_audience_id",
        )
        """
        _response = self._raw_client.get_audience(plan_audience_id, request_options=request_options)
        return _response.data

    def update_audience(
        self,
        plan_audience_id: str,
        *,
        condition_groups: typing.Sequence[CreateOrUpdateConditionGroupRequestBody],
        conditions: typing.Sequence[CreateOrUpdateConditionRequestBody],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateAudienceResponse:
        """
        Parameters
        ----------
        plan_audience_id : str
            plan_audience_id

        condition_groups : typing.Sequence[CreateOrUpdateConditionGroupRequestBody]

        conditions : typing.Sequence[CreateOrUpdateConditionRequestBody]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateAudienceResponse
            OK

        Examples
        --------
        from schematic import (
            CreateOrUpdateConditionGroupRequestBody,
            CreateOrUpdateConditionRequestBody,
            Schematic,
        )

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.plans.update_audience(
            plan_audience_id="plan_audience_id",
            condition_groups=[
                CreateOrUpdateConditionGroupRequestBody(
                    conditions=[
                        CreateOrUpdateConditionRequestBody(
                            condition_type="company",
                            operator="eq",
                            resource_ids=["resource_ids"],
                        )
                    ],
                )
            ],
            conditions=[
                CreateOrUpdateConditionRequestBody(
                    condition_type="company",
                    operator="eq",
                    resource_ids=["resource_ids"],
                )
            ],
        )
        """
        _response = self._raw_client.update_audience(
            plan_audience_id, condition_groups=condition_groups, conditions=conditions, request_options=request_options
        )
        return _response.data

    def delete_audience(
        self, plan_audience_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteAudienceResponse:
        """
        Parameters
        ----------
        plan_audience_id : str
            plan_audience_id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteAudienceResponse
            OK

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.plans.delete_audience(
            plan_audience_id="plan_audience_id",
        )
        """
        _response = self._raw_client.delete_audience(plan_audience_id, request_options=request_options)
        return _response.data

    def list_plans(
        self,
        *,
        company_id: typing.Optional[str] = None,
        for_fallback_plan: typing.Optional[bool] = None,
        for_initial_plan: typing.Optional[bool] = None,
        for_trial_expiry_plan: typing.Optional[bool] = None,
        has_product_id: typing.Optional[bool] = None,
        ids: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        plan_type: typing.Optional[ListPlansRequestPlanType] = None,
        q: typing.Optional[str] = None,
        requires_payment_method: typing.Optional[bool] = None,
        without_entitlement_for: typing.Optional[str] = None,
        without_product_id: typing.Optional[bool] = None,
        without_paid_product_id: typing.Optional[bool] = None,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListPlansResponse:
        """
        Parameters
        ----------
        company_id : typing.Optional[str]

        for_fallback_plan : typing.Optional[bool]
            Filter for plans valid as fallback plans (not linked to billing)

        for_initial_plan : typing.Optional[bool]
            Filter for plans valid as initial plans (not linked to billing, free, or auto-cancelling trial)

        for_trial_expiry_plan : typing.Optional[bool]
            Filter for plans valid as trial expiry plans (not linked to billing or free)

        has_product_id : typing.Optional[bool]
            Filter out plans that do not have a billing product ID

        ids : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        plan_type : typing.Optional[ListPlansRequestPlanType]
            Filter by plan type

        q : typing.Optional[str]

        requires_payment_method : typing.Optional[bool]
            Filter for plans that require a payment method (inverse of ForInitialPlan)

        without_entitlement_for : typing.Optional[str]
            Filter out plans that already have a plan entitlement for the specified feature ID

        without_product_id : typing.Optional[bool]
            Filter out plans that have a billing product ID

        without_paid_product_id : typing.Optional[bool]
            Filter out plans that have a paid billing product ID

        limit : typing.Optional[int]
            Page limit (default 100)

        offset : typing.Optional[int]
            Page offset (default 0)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListPlansResponse
            OK

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.plans.list_plans(
            company_id="company_id",
            for_fallback_plan=True,
            for_initial_plan=True,
            for_trial_expiry_plan=True,
            has_product_id=True,
            plan_type="plan",
            q="q",
            requires_payment_method=True,
            without_entitlement_for="without_entitlement_for",
            without_product_id=True,
            without_paid_product_id=True,
            limit=1,
            offset=1,
        )
        """
        _response = self._raw_client.list_plans(
            company_id=company_id,
            for_fallback_plan=for_fallback_plan,
            for_initial_plan=for_initial_plan,
            for_trial_expiry_plan=for_trial_expiry_plan,
            has_product_id=has_product_id,
            ids=ids,
            plan_type=plan_type,
            q=q,
            requires_payment_method=requires_payment_method,
            without_entitlement_for=without_entitlement_for,
            without_product_id=without_product_id,
            without_paid_product_id=without_paid_product_id,
            limit=limit,
            offset=offset,
            request_options=request_options,
        )
        return _response.data

    def create_plan(
        self,
        *,
        description: str,
        name: str,
        plan_type: CreatePlanRequestBodyPlanType,
        icon: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreatePlanResponse:
        """
        Parameters
        ----------
        description : str

        name : str

        plan_type : CreatePlanRequestBodyPlanType

        icon : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreatePlanResponse
            Created

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.plans.create_plan(
            description="description",
            name="name",
            plan_type="plan",
        )
        """
        _response = self._raw_client.create_plan(
            description=description, name=name, plan_type=plan_type, icon=icon, request_options=request_options
        )
        return _response.data

    def get_plan(self, plan_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> GetPlanResponse:
        """
        Parameters
        ----------
        plan_id : str
            plan_id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetPlanResponse
            OK

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.plans.get_plan(
            plan_id="plan_id",
        )
        """
        _response = self._raw_client.get_plan(plan_id, request_options=request_options)
        return _response.data

    def update_plan(
        self,
        plan_id: str,
        *,
        name: str,
        description: typing.Optional[str] = OMIT,
        icon: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdatePlanResponse:
        """
        Parameters
        ----------
        plan_id : str
            plan_id

        name : str

        description : typing.Optional[str]

        icon : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdatePlanResponse
            OK

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.plans.update_plan(
            plan_id="plan_id",
            name="name",
        )
        """
        _response = self._raw_client.update_plan(
            plan_id, name=name, description=description, icon=icon, request_options=request_options
        )
        return _response.data

    def delete_plan(
        self, plan_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeletePlanResponse:
        """
        Parameters
        ----------
        plan_id : str
            plan_id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeletePlanResponse
            OK

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.plans.delete_plan(
            plan_id="plan_id",
        )
        """
        _response = self._raw_client.delete_plan(plan_id, request_options=request_options)
        return _response.data

    def upsert_billing_product_plan(
        self,
        plan_id: str,
        *,
        charge_type: UpsertBillingProductRequestBodyChargeType,
        is_trialable: bool,
        billing_product_id: typing.Optional[str] = OMIT,
        currency: typing.Optional[str] = OMIT,
        monthly_price: typing.Optional[int] = OMIT,
        monthly_price_id: typing.Optional[str] = OMIT,
        one_time_price: typing.Optional[int] = OMIT,
        one_time_price_id: typing.Optional[str] = OMIT,
        trial_days: typing.Optional[int] = OMIT,
        yearly_price: typing.Optional[int] = OMIT,
        yearly_price_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpsertBillingProductPlanResponse:
        """
        Parameters
        ----------
        plan_id : str
            plan_id

        charge_type : UpsertBillingProductRequestBodyChargeType

        is_trialable : bool

        billing_product_id : typing.Optional[str]

        currency : typing.Optional[str]

        monthly_price : typing.Optional[int]

        monthly_price_id : typing.Optional[str]

        one_time_price : typing.Optional[int]

        one_time_price_id : typing.Optional[str]

        trial_days : typing.Optional[int]

        yearly_price : typing.Optional[int]

        yearly_price_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpsertBillingProductPlanResponse
            OK

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.plans.upsert_billing_product_plan(
            plan_id="plan_id",
            charge_type="one_time",
            is_trialable=True,
        )
        """
        _response = self._raw_client.upsert_billing_product_plan(
            plan_id,
            charge_type=charge_type,
            is_trialable=is_trialable,
            billing_product_id=billing_product_id,
            currency=currency,
            monthly_price=monthly_price,
            monthly_price_id=monthly_price_id,
            one_time_price=one_time_price,
            one_time_price_id=one_time_price_id,
            trial_days=trial_days,
            yearly_price=yearly_price,
            yearly_price_id=yearly_price_id,
            request_options=request_options,
        )
        return _response.data

    def count_plans(
        self,
        *,
        company_id: typing.Optional[str] = None,
        for_fallback_plan: typing.Optional[bool] = None,
        for_initial_plan: typing.Optional[bool] = None,
        for_trial_expiry_plan: typing.Optional[bool] = None,
        has_product_id: typing.Optional[bool] = None,
        ids: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        plan_type: typing.Optional[CountPlansRequestPlanType] = None,
        q: typing.Optional[str] = None,
        requires_payment_method: typing.Optional[bool] = None,
        without_entitlement_for: typing.Optional[str] = None,
        without_product_id: typing.Optional[bool] = None,
        without_paid_product_id: typing.Optional[bool] = None,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CountPlansResponse:
        """
        Parameters
        ----------
        company_id : typing.Optional[str]

        for_fallback_plan : typing.Optional[bool]
            Filter for plans valid as fallback plans (not linked to billing)

        for_initial_plan : typing.Optional[bool]
            Filter for plans valid as initial plans (not linked to billing, free, or auto-cancelling trial)

        for_trial_expiry_plan : typing.Optional[bool]
            Filter for plans valid as trial expiry plans (not linked to billing or free)

        has_product_id : typing.Optional[bool]
            Filter out plans that do not have a billing product ID

        ids : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        plan_type : typing.Optional[CountPlansRequestPlanType]
            Filter by plan type

        q : typing.Optional[str]

        requires_payment_method : typing.Optional[bool]
            Filter for plans that require a payment method (inverse of ForInitialPlan)

        without_entitlement_for : typing.Optional[str]
            Filter out plans that already have a plan entitlement for the specified feature ID

        without_product_id : typing.Optional[bool]
            Filter out plans that have a billing product ID

        without_paid_product_id : typing.Optional[bool]
            Filter out plans that have a paid billing product ID

        limit : typing.Optional[int]
            Page limit (default 100)

        offset : typing.Optional[int]
            Page offset (default 0)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CountPlansResponse
            OK

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.plans.count_plans(
            company_id="company_id",
            for_fallback_plan=True,
            for_initial_plan=True,
            for_trial_expiry_plan=True,
            has_product_id=True,
            plan_type="plan",
            q="q",
            requires_payment_method=True,
            without_entitlement_for="without_entitlement_for",
            without_product_id=True,
            without_paid_product_id=True,
            limit=1,
            offset=1,
        )
        """
        _response = self._raw_client.count_plans(
            company_id=company_id,
            for_fallback_plan=for_fallback_plan,
            for_initial_plan=for_initial_plan,
            for_trial_expiry_plan=for_trial_expiry_plan,
            has_product_id=has_product_id,
            ids=ids,
            plan_type=plan_type,
            q=q,
            requires_payment_method=requires_payment_method,
            without_entitlement_for=without_entitlement_for,
            without_product_id=without_product_id,
            without_paid_product_id=without_paid_product_id,
            limit=limit,
            offset=offset,
            request_options=request_options,
        )
        return _response.data

    def list_plan_issues(
        self, *, plan_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> ListPlanIssuesResponse:
        """
        Parameters
        ----------
        plan_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListPlanIssuesResponse
            OK

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.plans.list_plan_issues(
            plan_id="plan_id",
        )
        """
        _response = self._raw_client.list_plan_issues(plan_id=plan_id, request_options=request_options)
        return _response.data


class AsyncPlansClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawPlansClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawPlansClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawPlansClient
        """
        return self._raw_client

    async def update_company_plans(
        self,
        company_plan_id: str,
        *,
        add_on_ids: typing.Sequence[str],
        base_plan_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateCompanyPlansResponse:
        """
        Parameters
        ----------
        company_plan_id : str
            company_plan_id

        add_on_ids : typing.Sequence[str]

        base_plan_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateCompanyPlansResponse
            OK

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.plans.update_company_plans(
                company_plan_id="company_plan_id",
                add_on_ids=["add_on_ids"],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update_company_plans(
            company_plan_id, add_on_ids=add_on_ids, base_plan_id=base_plan_id, request_options=request_options
        )
        return _response.data

    async def get_audience(
        self, plan_audience_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetAudienceResponse:
        """
        Parameters
        ----------
        plan_audience_id : str
            plan_audience_id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAudienceResponse
            OK

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.plans.get_audience(
                plan_audience_id="plan_audience_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_audience(plan_audience_id, request_options=request_options)
        return _response.data

    async def update_audience(
        self,
        plan_audience_id: str,
        *,
        condition_groups: typing.Sequence[CreateOrUpdateConditionGroupRequestBody],
        conditions: typing.Sequence[CreateOrUpdateConditionRequestBody],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateAudienceResponse:
        """
        Parameters
        ----------
        plan_audience_id : str
            plan_audience_id

        condition_groups : typing.Sequence[CreateOrUpdateConditionGroupRequestBody]

        conditions : typing.Sequence[CreateOrUpdateConditionRequestBody]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateAudienceResponse
            OK

        Examples
        --------
        import asyncio

        from schematic import (
            AsyncSchematic,
            CreateOrUpdateConditionGroupRequestBody,
            CreateOrUpdateConditionRequestBody,
        )

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.plans.update_audience(
                plan_audience_id="plan_audience_id",
                condition_groups=[
                    CreateOrUpdateConditionGroupRequestBody(
                        conditions=[
                            CreateOrUpdateConditionRequestBody(
                                condition_type="company",
                                operator="eq",
                                resource_ids=["resource_ids"],
                            )
                        ],
                    )
                ],
                conditions=[
                    CreateOrUpdateConditionRequestBody(
                        condition_type="company",
                        operator="eq",
                        resource_ids=["resource_ids"],
                    )
                ],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update_audience(
            plan_audience_id, condition_groups=condition_groups, conditions=conditions, request_options=request_options
        )
        return _response.data

    async def delete_audience(
        self, plan_audience_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteAudienceResponse:
        """
        Parameters
        ----------
        plan_audience_id : str
            plan_audience_id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteAudienceResponse
            OK

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.plans.delete_audience(
                plan_audience_id="plan_audience_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_audience(plan_audience_id, request_options=request_options)
        return _response.data

    async def list_plans(
        self,
        *,
        company_id: typing.Optional[str] = None,
        for_fallback_plan: typing.Optional[bool] = None,
        for_initial_plan: typing.Optional[bool] = None,
        for_trial_expiry_plan: typing.Optional[bool] = None,
        has_product_id: typing.Optional[bool] = None,
        ids: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        plan_type: typing.Optional[ListPlansRequestPlanType] = None,
        q: typing.Optional[str] = None,
        requires_payment_method: typing.Optional[bool] = None,
        without_entitlement_for: typing.Optional[str] = None,
        without_product_id: typing.Optional[bool] = None,
        without_paid_product_id: typing.Optional[bool] = None,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListPlansResponse:
        """
        Parameters
        ----------
        company_id : typing.Optional[str]

        for_fallback_plan : typing.Optional[bool]
            Filter for plans valid as fallback plans (not linked to billing)

        for_initial_plan : typing.Optional[bool]
            Filter for plans valid as initial plans (not linked to billing, free, or auto-cancelling trial)

        for_trial_expiry_plan : typing.Optional[bool]
            Filter for plans valid as trial expiry plans (not linked to billing or free)

        has_product_id : typing.Optional[bool]
            Filter out plans that do not have a billing product ID

        ids : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        plan_type : typing.Optional[ListPlansRequestPlanType]
            Filter by plan type

        q : typing.Optional[str]

        requires_payment_method : typing.Optional[bool]
            Filter for plans that require a payment method (inverse of ForInitialPlan)

        without_entitlement_for : typing.Optional[str]
            Filter out plans that already have a plan entitlement for the specified feature ID

        without_product_id : typing.Optional[bool]
            Filter out plans that have a billing product ID

        without_paid_product_id : typing.Optional[bool]
            Filter out plans that have a paid billing product ID

        limit : typing.Optional[int]
            Page limit (default 100)

        offset : typing.Optional[int]
            Page offset (default 0)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListPlansResponse
            OK

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.plans.list_plans(
                company_id="company_id",
                for_fallback_plan=True,
                for_initial_plan=True,
                for_trial_expiry_plan=True,
                has_product_id=True,
                plan_type="plan",
                q="q",
                requires_payment_method=True,
                without_entitlement_for="without_entitlement_for",
                without_product_id=True,
                without_paid_product_id=True,
                limit=1,
                offset=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_plans(
            company_id=company_id,
            for_fallback_plan=for_fallback_plan,
            for_initial_plan=for_initial_plan,
            for_trial_expiry_plan=for_trial_expiry_plan,
            has_product_id=has_product_id,
            ids=ids,
            plan_type=plan_type,
            q=q,
            requires_payment_method=requires_payment_method,
            without_entitlement_for=without_entitlement_for,
            without_product_id=without_product_id,
            without_paid_product_id=without_paid_product_id,
            limit=limit,
            offset=offset,
            request_options=request_options,
        )
        return _response.data

    async def create_plan(
        self,
        *,
        description: str,
        name: str,
        plan_type: CreatePlanRequestBodyPlanType,
        icon: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreatePlanResponse:
        """
        Parameters
        ----------
        description : str

        name : str

        plan_type : CreatePlanRequestBodyPlanType

        icon : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreatePlanResponse
            Created

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.plans.create_plan(
                description="description",
                name="name",
                plan_type="plan",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_plan(
            description=description, name=name, plan_type=plan_type, icon=icon, request_options=request_options
        )
        return _response.data

    async def get_plan(
        self, plan_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetPlanResponse:
        """
        Parameters
        ----------
        plan_id : str
            plan_id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetPlanResponse
            OK

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.plans.get_plan(
                plan_id="plan_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_plan(plan_id, request_options=request_options)
        return _response.data

    async def update_plan(
        self,
        plan_id: str,
        *,
        name: str,
        description: typing.Optional[str] = OMIT,
        icon: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdatePlanResponse:
        """
        Parameters
        ----------
        plan_id : str
            plan_id

        name : str

        description : typing.Optional[str]

        icon : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdatePlanResponse
            OK

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.plans.update_plan(
                plan_id="plan_id",
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update_plan(
            plan_id, name=name, description=description, icon=icon, request_options=request_options
        )
        return _response.data

    async def delete_plan(
        self, plan_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeletePlanResponse:
        """
        Parameters
        ----------
        plan_id : str
            plan_id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeletePlanResponse
            OK

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.plans.delete_plan(
                plan_id="plan_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_plan(plan_id, request_options=request_options)
        return _response.data

    async def upsert_billing_product_plan(
        self,
        plan_id: str,
        *,
        charge_type: UpsertBillingProductRequestBodyChargeType,
        is_trialable: bool,
        billing_product_id: typing.Optional[str] = OMIT,
        currency: typing.Optional[str] = OMIT,
        monthly_price: typing.Optional[int] = OMIT,
        monthly_price_id: typing.Optional[str] = OMIT,
        one_time_price: typing.Optional[int] = OMIT,
        one_time_price_id: typing.Optional[str] = OMIT,
        trial_days: typing.Optional[int] = OMIT,
        yearly_price: typing.Optional[int] = OMIT,
        yearly_price_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpsertBillingProductPlanResponse:
        """
        Parameters
        ----------
        plan_id : str
            plan_id

        charge_type : UpsertBillingProductRequestBodyChargeType

        is_trialable : bool

        billing_product_id : typing.Optional[str]

        currency : typing.Optional[str]

        monthly_price : typing.Optional[int]

        monthly_price_id : typing.Optional[str]

        one_time_price : typing.Optional[int]

        one_time_price_id : typing.Optional[str]

        trial_days : typing.Optional[int]

        yearly_price : typing.Optional[int]

        yearly_price_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpsertBillingProductPlanResponse
            OK

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.plans.upsert_billing_product_plan(
                plan_id="plan_id",
                charge_type="one_time",
                is_trialable=True,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.upsert_billing_product_plan(
            plan_id,
            charge_type=charge_type,
            is_trialable=is_trialable,
            billing_product_id=billing_product_id,
            currency=currency,
            monthly_price=monthly_price,
            monthly_price_id=monthly_price_id,
            one_time_price=one_time_price,
            one_time_price_id=one_time_price_id,
            trial_days=trial_days,
            yearly_price=yearly_price,
            yearly_price_id=yearly_price_id,
            request_options=request_options,
        )
        return _response.data

    async def count_plans(
        self,
        *,
        company_id: typing.Optional[str] = None,
        for_fallback_plan: typing.Optional[bool] = None,
        for_initial_plan: typing.Optional[bool] = None,
        for_trial_expiry_plan: typing.Optional[bool] = None,
        has_product_id: typing.Optional[bool] = None,
        ids: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        plan_type: typing.Optional[CountPlansRequestPlanType] = None,
        q: typing.Optional[str] = None,
        requires_payment_method: typing.Optional[bool] = None,
        without_entitlement_for: typing.Optional[str] = None,
        without_product_id: typing.Optional[bool] = None,
        without_paid_product_id: typing.Optional[bool] = None,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CountPlansResponse:
        """
        Parameters
        ----------
        company_id : typing.Optional[str]

        for_fallback_plan : typing.Optional[bool]
            Filter for plans valid as fallback plans (not linked to billing)

        for_initial_plan : typing.Optional[bool]
            Filter for plans valid as initial plans (not linked to billing, free, or auto-cancelling trial)

        for_trial_expiry_plan : typing.Optional[bool]
            Filter for plans valid as trial expiry plans (not linked to billing or free)

        has_product_id : typing.Optional[bool]
            Filter out plans that do not have a billing product ID

        ids : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        plan_type : typing.Optional[CountPlansRequestPlanType]
            Filter by plan type

        q : typing.Optional[str]

        requires_payment_method : typing.Optional[bool]
            Filter for plans that require a payment method (inverse of ForInitialPlan)

        without_entitlement_for : typing.Optional[str]
            Filter out plans that already have a plan entitlement for the specified feature ID

        without_product_id : typing.Optional[bool]
            Filter out plans that have a billing product ID

        without_paid_product_id : typing.Optional[bool]
            Filter out plans that have a paid billing product ID

        limit : typing.Optional[int]
            Page limit (default 100)

        offset : typing.Optional[int]
            Page offset (default 0)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CountPlansResponse
            OK

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.plans.count_plans(
                company_id="company_id",
                for_fallback_plan=True,
                for_initial_plan=True,
                for_trial_expiry_plan=True,
                has_product_id=True,
                plan_type="plan",
                q="q",
                requires_payment_method=True,
                without_entitlement_for="without_entitlement_for",
                without_product_id=True,
                without_paid_product_id=True,
                limit=1,
                offset=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.count_plans(
            company_id=company_id,
            for_fallback_plan=for_fallback_plan,
            for_initial_plan=for_initial_plan,
            for_trial_expiry_plan=for_trial_expiry_plan,
            has_product_id=has_product_id,
            ids=ids,
            plan_type=plan_type,
            q=q,
            requires_payment_method=requires_payment_method,
            without_entitlement_for=without_entitlement_for,
            without_product_id=without_product_id,
            without_paid_product_id=without_paid_product_id,
            limit=limit,
            offset=offset,
            request_options=request_options,
        )
        return _response.data

    async def list_plan_issues(
        self, *, plan_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> ListPlanIssuesResponse:
        """
        Parameters
        ----------
        plan_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListPlanIssuesResponse
            OK

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.plans.list_plan_issues(
                plan_id="plan_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_plan_issues(plan_id=plan_id, request_options=request_options)
        return _response.data
