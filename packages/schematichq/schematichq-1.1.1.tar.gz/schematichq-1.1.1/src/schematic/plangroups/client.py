# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.compatible_plans import CompatiblePlans
from ..types.custom_plan_config import CustomPlanConfig
from ..types.ordered_plans_in_group import OrderedPlansInGroup
from ..types.plan_group_bundle_order import PlanGroupBundleOrder
from .raw_client import AsyncRawPlangroupsClient, RawPlangroupsClient
from .types.create_plan_group_response import CreatePlanGroupResponse
from .types.get_plan_group_response import GetPlanGroupResponse
from .types.update_plan_group_response import UpdatePlanGroupResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PlangroupsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawPlangroupsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawPlangroupsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawPlangroupsClient
        """
        return self._raw_client

    def get_plan_group(self, *, request_options: typing.Optional[RequestOptions] = None) -> GetPlanGroupResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetPlanGroupResponse
            OK

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.plangroups.get_plan_group()
        """
        _response = self._raw_client.get_plan_group(request_options=request_options)
        return _response.data

    def create_plan_group(
        self,
        *,
        add_on_ids: typing.Sequence[str],
        checkout_collect_address: bool,
        checkout_collect_email: bool,
        checkout_collect_phone: bool,
        enable_tax_collection: bool,
        ordered_add_ons: typing.Sequence[OrderedPlansInGroup],
        ordered_bundle_list: typing.Sequence[PlanGroupBundleOrder],
        ordered_plans: typing.Sequence[OrderedPlansInGroup],
        prevent_downgrades_when_over_limit: bool,
        show_credits: bool,
        show_period_toggle: bool,
        show_zero_price_as_free: bool,
        sync_customer_billing_details_for_tax: bool,
        add_on_compatibilities: typing.Optional[typing.Sequence[CompatiblePlans]] = OMIT,
        custom_plan_config: typing.Optional[CustomPlanConfig] = OMIT,
        custom_plan_id: typing.Optional[str] = OMIT,
        default_plan_id: typing.Optional[str] = OMIT,
        fallback_plan_id: typing.Optional[str] = OMIT,
        initial_plan_id: typing.Optional[str] = OMIT,
        initial_plan_price_id: typing.Optional[str] = OMIT,
        trial_days: typing.Optional[int] = OMIT,
        trial_expiry_plan_id: typing.Optional[str] = OMIT,
        trial_expiry_plan_price_id: typing.Optional[str] = OMIT,
        trial_payment_method_required: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreatePlanGroupResponse:
        """
        Parameters
        ----------
        add_on_ids : typing.Sequence[str]
            Use OrderedAddOns instead

        checkout_collect_address : bool

        checkout_collect_email : bool

        checkout_collect_phone : bool

        enable_tax_collection : bool

        ordered_add_ons : typing.Sequence[OrderedPlansInGroup]

        ordered_bundle_list : typing.Sequence[PlanGroupBundleOrder]

        ordered_plans : typing.Sequence[OrderedPlansInGroup]

        prevent_downgrades_when_over_limit : bool

        show_credits : bool

        show_period_toggle : bool

        show_zero_price_as_free : bool

        sync_customer_billing_details_for_tax : bool

        add_on_compatibilities : typing.Optional[typing.Sequence[CompatiblePlans]]

        custom_plan_config : typing.Optional[CustomPlanConfig]

        custom_plan_id : typing.Optional[str]

        default_plan_id : typing.Optional[str]

        fallback_plan_id : typing.Optional[str]

        initial_plan_id : typing.Optional[str]

        initial_plan_price_id : typing.Optional[str]

        trial_days : typing.Optional[int]

        trial_expiry_plan_id : typing.Optional[str]

        trial_expiry_plan_price_id : typing.Optional[str]

        trial_payment_method_required : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreatePlanGroupResponse
            Created

        Examples
        --------
        from schematic import OrderedPlansInGroup, PlanGroupBundleOrder, Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.plangroups.create_plan_group(
            add_on_ids=["add_on_ids"],
            checkout_collect_address=True,
            checkout_collect_email=True,
            checkout_collect_phone=True,
            enable_tax_collection=True,
            ordered_add_ons=[
                OrderedPlansInGroup(
                    plan_id="plan_id",
                )
            ],
            ordered_bundle_list=[
                PlanGroupBundleOrder(
                    bundle_id="bundleId",
                )
            ],
            ordered_plans=[
                OrderedPlansInGroup(
                    plan_id="plan_id",
                )
            ],
            prevent_downgrades_when_over_limit=True,
            show_credits=True,
            show_period_toggle=True,
            show_zero_price_as_free=True,
            sync_customer_billing_details_for_tax=True,
        )
        """
        _response = self._raw_client.create_plan_group(
            add_on_ids=add_on_ids,
            checkout_collect_address=checkout_collect_address,
            checkout_collect_email=checkout_collect_email,
            checkout_collect_phone=checkout_collect_phone,
            enable_tax_collection=enable_tax_collection,
            ordered_add_ons=ordered_add_ons,
            ordered_bundle_list=ordered_bundle_list,
            ordered_plans=ordered_plans,
            prevent_downgrades_when_over_limit=prevent_downgrades_when_over_limit,
            show_credits=show_credits,
            show_period_toggle=show_period_toggle,
            show_zero_price_as_free=show_zero_price_as_free,
            sync_customer_billing_details_for_tax=sync_customer_billing_details_for_tax,
            add_on_compatibilities=add_on_compatibilities,
            custom_plan_config=custom_plan_config,
            custom_plan_id=custom_plan_id,
            default_plan_id=default_plan_id,
            fallback_plan_id=fallback_plan_id,
            initial_plan_id=initial_plan_id,
            initial_plan_price_id=initial_plan_price_id,
            trial_days=trial_days,
            trial_expiry_plan_id=trial_expiry_plan_id,
            trial_expiry_plan_price_id=trial_expiry_plan_price_id,
            trial_payment_method_required=trial_payment_method_required,
            request_options=request_options,
        )
        return _response.data

    def update_plan_group(
        self,
        plan_group_id: str,
        *,
        add_on_ids: typing.Sequence[str],
        checkout_collect_address: bool,
        checkout_collect_email: bool,
        checkout_collect_phone: bool,
        enable_tax_collection: bool,
        ordered_add_ons: typing.Sequence[OrderedPlansInGroup],
        ordered_bundle_list: typing.Sequence[PlanGroupBundleOrder],
        ordered_plans: typing.Sequence[OrderedPlansInGroup],
        prevent_downgrades_when_over_limit: bool,
        show_credits: bool,
        show_period_toggle: bool,
        show_zero_price_as_free: bool,
        sync_customer_billing_details_for_tax: bool,
        add_on_compatibilities: typing.Optional[typing.Sequence[CompatiblePlans]] = OMIT,
        custom_plan_config: typing.Optional[CustomPlanConfig] = OMIT,
        custom_plan_id: typing.Optional[str] = OMIT,
        default_plan_id: typing.Optional[str] = OMIT,
        fallback_plan_id: typing.Optional[str] = OMIT,
        initial_plan_id: typing.Optional[str] = OMIT,
        initial_plan_price_id: typing.Optional[str] = OMIT,
        trial_days: typing.Optional[int] = OMIT,
        trial_expiry_plan_id: typing.Optional[str] = OMIT,
        trial_expiry_plan_price_id: typing.Optional[str] = OMIT,
        trial_payment_method_required: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdatePlanGroupResponse:
        """
        Parameters
        ----------
        plan_group_id : str
            plan_group_id

        add_on_ids : typing.Sequence[str]
            Use OrderedAddOns instead

        checkout_collect_address : bool

        checkout_collect_email : bool

        checkout_collect_phone : bool

        enable_tax_collection : bool

        ordered_add_ons : typing.Sequence[OrderedPlansInGroup]

        ordered_bundle_list : typing.Sequence[PlanGroupBundleOrder]

        ordered_plans : typing.Sequence[OrderedPlansInGroup]

        prevent_downgrades_when_over_limit : bool

        show_credits : bool

        show_period_toggle : bool

        show_zero_price_as_free : bool

        sync_customer_billing_details_for_tax : bool

        add_on_compatibilities : typing.Optional[typing.Sequence[CompatiblePlans]]

        custom_plan_config : typing.Optional[CustomPlanConfig]

        custom_plan_id : typing.Optional[str]

        default_plan_id : typing.Optional[str]

        fallback_plan_id : typing.Optional[str]

        initial_plan_id : typing.Optional[str]

        initial_plan_price_id : typing.Optional[str]

        trial_days : typing.Optional[int]

        trial_expiry_plan_id : typing.Optional[str]

        trial_expiry_plan_price_id : typing.Optional[str]

        trial_payment_method_required : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdatePlanGroupResponse
            OK

        Examples
        --------
        from schematic import OrderedPlansInGroup, PlanGroupBundleOrder, Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.plangroups.update_plan_group(
            plan_group_id="plan_group_id",
            add_on_ids=["add_on_ids"],
            checkout_collect_address=True,
            checkout_collect_email=True,
            checkout_collect_phone=True,
            enable_tax_collection=True,
            ordered_add_ons=[
                OrderedPlansInGroup(
                    plan_id="plan_id",
                )
            ],
            ordered_bundle_list=[
                PlanGroupBundleOrder(
                    bundle_id="bundleId",
                )
            ],
            ordered_plans=[
                OrderedPlansInGroup(
                    plan_id="plan_id",
                )
            ],
            prevent_downgrades_when_over_limit=True,
            show_credits=True,
            show_period_toggle=True,
            show_zero_price_as_free=True,
            sync_customer_billing_details_for_tax=True,
        )
        """
        _response = self._raw_client.update_plan_group(
            plan_group_id,
            add_on_ids=add_on_ids,
            checkout_collect_address=checkout_collect_address,
            checkout_collect_email=checkout_collect_email,
            checkout_collect_phone=checkout_collect_phone,
            enable_tax_collection=enable_tax_collection,
            ordered_add_ons=ordered_add_ons,
            ordered_bundle_list=ordered_bundle_list,
            ordered_plans=ordered_plans,
            prevent_downgrades_when_over_limit=prevent_downgrades_when_over_limit,
            show_credits=show_credits,
            show_period_toggle=show_period_toggle,
            show_zero_price_as_free=show_zero_price_as_free,
            sync_customer_billing_details_for_tax=sync_customer_billing_details_for_tax,
            add_on_compatibilities=add_on_compatibilities,
            custom_plan_config=custom_plan_config,
            custom_plan_id=custom_plan_id,
            default_plan_id=default_plan_id,
            fallback_plan_id=fallback_plan_id,
            initial_plan_id=initial_plan_id,
            initial_plan_price_id=initial_plan_price_id,
            trial_days=trial_days,
            trial_expiry_plan_id=trial_expiry_plan_id,
            trial_expiry_plan_price_id=trial_expiry_plan_price_id,
            trial_payment_method_required=trial_payment_method_required,
            request_options=request_options,
        )
        return _response.data


class AsyncPlangroupsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawPlangroupsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawPlangroupsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawPlangroupsClient
        """
        return self._raw_client

    async def get_plan_group(self, *, request_options: typing.Optional[RequestOptions] = None) -> GetPlanGroupResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetPlanGroupResponse
            OK

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.plangroups.get_plan_group()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_plan_group(request_options=request_options)
        return _response.data

    async def create_plan_group(
        self,
        *,
        add_on_ids: typing.Sequence[str],
        checkout_collect_address: bool,
        checkout_collect_email: bool,
        checkout_collect_phone: bool,
        enable_tax_collection: bool,
        ordered_add_ons: typing.Sequence[OrderedPlansInGroup],
        ordered_bundle_list: typing.Sequence[PlanGroupBundleOrder],
        ordered_plans: typing.Sequence[OrderedPlansInGroup],
        prevent_downgrades_when_over_limit: bool,
        show_credits: bool,
        show_period_toggle: bool,
        show_zero_price_as_free: bool,
        sync_customer_billing_details_for_tax: bool,
        add_on_compatibilities: typing.Optional[typing.Sequence[CompatiblePlans]] = OMIT,
        custom_plan_config: typing.Optional[CustomPlanConfig] = OMIT,
        custom_plan_id: typing.Optional[str] = OMIT,
        default_plan_id: typing.Optional[str] = OMIT,
        fallback_plan_id: typing.Optional[str] = OMIT,
        initial_plan_id: typing.Optional[str] = OMIT,
        initial_plan_price_id: typing.Optional[str] = OMIT,
        trial_days: typing.Optional[int] = OMIT,
        trial_expiry_plan_id: typing.Optional[str] = OMIT,
        trial_expiry_plan_price_id: typing.Optional[str] = OMIT,
        trial_payment_method_required: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreatePlanGroupResponse:
        """
        Parameters
        ----------
        add_on_ids : typing.Sequence[str]
            Use OrderedAddOns instead

        checkout_collect_address : bool

        checkout_collect_email : bool

        checkout_collect_phone : bool

        enable_tax_collection : bool

        ordered_add_ons : typing.Sequence[OrderedPlansInGroup]

        ordered_bundle_list : typing.Sequence[PlanGroupBundleOrder]

        ordered_plans : typing.Sequence[OrderedPlansInGroup]

        prevent_downgrades_when_over_limit : bool

        show_credits : bool

        show_period_toggle : bool

        show_zero_price_as_free : bool

        sync_customer_billing_details_for_tax : bool

        add_on_compatibilities : typing.Optional[typing.Sequence[CompatiblePlans]]

        custom_plan_config : typing.Optional[CustomPlanConfig]

        custom_plan_id : typing.Optional[str]

        default_plan_id : typing.Optional[str]

        fallback_plan_id : typing.Optional[str]

        initial_plan_id : typing.Optional[str]

        initial_plan_price_id : typing.Optional[str]

        trial_days : typing.Optional[int]

        trial_expiry_plan_id : typing.Optional[str]

        trial_expiry_plan_price_id : typing.Optional[str]

        trial_payment_method_required : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreatePlanGroupResponse
            Created

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic, OrderedPlansInGroup, PlanGroupBundleOrder

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.plangroups.create_plan_group(
                add_on_ids=["add_on_ids"],
                checkout_collect_address=True,
                checkout_collect_email=True,
                checkout_collect_phone=True,
                enable_tax_collection=True,
                ordered_add_ons=[
                    OrderedPlansInGroup(
                        plan_id="plan_id",
                    )
                ],
                ordered_bundle_list=[
                    PlanGroupBundleOrder(
                        bundle_id="bundleId",
                    )
                ],
                ordered_plans=[
                    OrderedPlansInGroup(
                        plan_id="plan_id",
                    )
                ],
                prevent_downgrades_when_over_limit=True,
                show_credits=True,
                show_period_toggle=True,
                show_zero_price_as_free=True,
                sync_customer_billing_details_for_tax=True,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_plan_group(
            add_on_ids=add_on_ids,
            checkout_collect_address=checkout_collect_address,
            checkout_collect_email=checkout_collect_email,
            checkout_collect_phone=checkout_collect_phone,
            enable_tax_collection=enable_tax_collection,
            ordered_add_ons=ordered_add_ons,
            ordered_bundle_list=ordered_bundle_list,
            ordered_plans=ordered_plans,
            prevent_downgrades_when_over_limit=prevent_downgrades_when_over_limit,
            show_credits=show_credits,
            show_period_toggle=show_period_toggle,
            show_zero_price_as_free=show_zero_price_as_free,
            sync_customer_billing_details_for_tax=sync_customer_billing_details_for_tax,
            add_on_compatibilities=add_on_compatibilities,
            custom_plan_config=custom_plan_config,
            custom_plan_id=custom_plan_id,
            default_plan_id=default_plan_id,
            fallback_plan_id=fallback_plan_id,
            initial_plan_id=initial_plan_id,
            initial_plan_price_id=initial_plan_price_id,
            trial_days=trial_days,
            trial_expiry_plan_id=trial_expiry_plan_id,
            trial_expiry_plan_price_id=trial_expiry_plan_price_id,
            trial_payment_method_required=trial_payment_method_required,
            request_options=request_options,
        )
        return _response.data

    async def update_plan_group(
        self,
        plan_group_id: str,
        *,
        add_on_ids: typing.Sequence[str],
        checkout_collect_address: bool,
        checkout_collect_email: bool,
        checkout_collect_phone: bool,
        enable_tax_collection: bool,
        ordered_add_ons: typing.Sequence[OrderedPlansInGroup],
        ordered_bundle_list: typing.Sequence[PlanGroupBundleOrder],
        ordered_plans: typing.Sequence[OrderedPlansInGroup],
        prevent_downgrades_when_over_limit: bool,
        show_credits: bool,
        show_period_toggle: bool,
        show_zero_price_as_free: bool,
        sync_customer_billing_details_for_tax: bool,
        add_on_compatibilities: typing.Optional[typing.Sequence[CompatiblePlans]] = OMIT,
        custom_plan_config: typing.Optional[CustomPlanConfig] = OMIT,
        custom_plan_id: typing.Optional[str] = OMIT,
        default_plan_id: typing.Optional[str] = OMIT,
        fallback_plan_id: typing.Optional[str] = OMIT,
        initial_plan_id: typing.Optional[str] = OMIT,
        initial_plan_price_id: typing.Optional[str] = OMIT,
        trial_days: typing.Optional[int] = OMIT,
        trial_expiry_plan_id: typing.Optional[str] = OMIT,
        trial_expiry_plan_price_id: typing.Optional[str] = OMIT,
        trial_payment_method_required: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdatePlanGroupResponse:
        """
        Parameters
        ----------
        plan_group_id : str
            plan_group_id

        add_on_ids : typing.Sequence[str]
            Use OrderedAddOns instead

        checkout_collect_address : bool

        checkout_collect_email : bool

        checkout_collect_phone : bool

        enable_tax_collection : bool

        ordered_add_ons : typing.Sequence[OrderedPlansInGroup]

        ordered_bundle_list : typing.Sequence[PlanGroupBundleOrder]

        ordered_plans : typing.Sequence[OrderedPlansInGroup]

        prevent_downgrades_when_over_limit : bool

        show_credits : bool

        show_period_toggle : bool

        show_zero_price_as_free : bool

        sync_customer_billing_details_for_tax : bool

        add_on_compatibilities : typing.Optional[typing.Sequence[CompatiblePlans]]

        custom_plan_config : typing.Optional[CustomPlanConfig]

        custom_plan_id : typing.Optional[str]

        default_plan_id : typing.Optional[str]

        fallback_plan_id : typing.Optional[str]

        initial_plan_id : typing.Optional[str]

        initial_plan_price_id : typing.Optional[str]

        trial_days : typing.Optional[int]

        trial_expiry_plan_id : typing.Optional[str]

        trial_expiry_plan_price_id : typing.Optional[str]

        trial_payment_method_required : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdatePlanGroupResponse
            OK

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic, OrderedPlansInGroup, PlanGroupBundleOrder

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.plangroups.update_plan_group(
                plan_group_id="plan_group_id",
                add_on_ids=["add_on_ids"],
                checkout_collect_address=True,
                checkout_collect_email=True,
                checkout_collect_phone=True,
                enable_tax_collection=True,
                ordered_add_ons=[
                    OrderedPlansInGroup(
                        plan_id="plan_id",
                    )
                ],
                ordered_bundle_list=[
                    PlanGroupBundleOrder(
                        bundle_id="bundleId",
                    )
                ],
                ordered_plans=[
                    OrderedPlansInGroup(
                        plan_id="plan_id",
                    )
                ],
                prevent_downgrades_when_over_limit=True,
                show_credits=True,
                show_period_toggle=True,
                show_zero_price_as_free=True,
                sync_customer_billing_details_for_tax=True,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update_plan_group(
            plan_group_id,
            add_on_ids=add_on_ids,
            checkout_collect_address=checkout_collect_address,
            checkout_collect_email=checkout_collect_email,
            checkout_collect_phone=checkout_collect_phone,
            enable_tax_collection=enable_tax_collection,
            ordered_add_ons=ordered_add_ons,
            ordered_bundle_list=ordered_bundle_list,
            ordered_plans=ordered_plans,
            prevent_downgrades_when_over_limit=prevent_downgrades_when_over_limit,
            show_credits=show_credits,
            show_period_toggle=show_period_toggle,
            show_zero_price_as_free=show_zero_price_as_free,
            sync_customer_billing_details_for_tax=sync_customer_billing_details_for_tax,
            add_on_compatibilities=add_on_compatibilities,
            custom_plan_config=custom_plan_config,
            custom_plan_id=custom_plan_id,
            default_plan_id=default_plan_id,
            fallback_plan_id=fallback_plan_id,
            initial_plan_id=initial_plan_id,
            initial_plan_price_id=initial_plan_price_id,
            trial_days=trial_days,
            trial_expiry_plan_id=trial_expiry_plan_id,
            trial_expiry_plan_price_id=trial_expiry_plan_price_id,
            trial_payment_method_required=trial_payment_method_required,
            request_options=request_options,
        )
        return _response.data
