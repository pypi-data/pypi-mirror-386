# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class CountUsersParams(UniversalBaseModel):
    """
    Input parameters
    """

    company_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Filter users by company ID (starts with comp_)
    """

    ids: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    Filter users by multiple user IDs (starts with user_)
    """

    limit: typing.Optional[int] = pydantic.Field(default=None)
    """
    Page limit (default 100)
    """

    offset: typing.Optional[int] = pydantic.Field(default=None)
    """
    Page offset (default 0)
    """

    plan_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Filter users by plan ID (starts with plan_)
    """

    q: typing.Optional[str] = pydantic.Field(default=None)
    """
    Search for users by name, keys or string traits
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
