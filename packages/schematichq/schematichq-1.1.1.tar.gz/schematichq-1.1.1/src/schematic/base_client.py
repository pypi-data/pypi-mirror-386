# This file was auto-generated by Fern from our API Definition.

import typing

import httpx
from .accesstokens.client import AccesstokensClient, AsyncAccesstokensClient
from .accounts.client import AccountsClient, AsyncAccountsClient
from .billing.client import AsyncBillingClient, BillingClient
from .checkout.client import AsyncCheckoutClient, CheckoutClient
from .companies.client import AsyncCompaniesClient, CompaniesClient
from .components.client import AsyncComponentsClient, ComponentsClient
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .core.request_options import RequestOptions
from .credits.client import AsyncCreditsClient, CreditsClient
from .crm.client import AsyncCrmClient, CrmClient
from .dataexports.client import AsyncDataexportsClient, DataexportsClient
from .entitlements.client import AsyncEntitlementsClient, EntitlementsClient
from .environment import SchematicEnvironment
from .events.client import AsyncEventsClient, EventsClient
from .features.client import AsyncFeaturesClient, FeaturesClient
from .plangroups.client import AsyncPlangroupsClient, PlangroupsClient
from .plans.client import AsyncPlansClient, PlansClient
from .raw_base_client import AsyncRawBaseSchematic, RawBaseSchematic
from .webhooks.client import AsyncWebhooksClient, WebhooksClient


class BaseSchematic:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : SchematicEnvironment
        The environment to use for requests from the client. from .environment import SchematicEnvironment



        Defaults to SchematicEnvironment.DEFAULT



    api_key : str
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from schematic import Schematic

    client = Schematic(
        api_key="YOUR_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: SchematicEnvironment = SchematicEnvironment.DEFAULT,
        api_key: str,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            api_key=api_key,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._raw_client = RawBaseSchematic(client_wrapper=self._client_wrapper)
        self.accounts = AccountsClient(client_wrapper=self._client_wrapper)
        self.features = FeaturesClient(client_wrapper=self._client_wrapper)
        self.billing = BillingClient(client_wrapper=self._client_wrapper)
        self.credits = CreditsClient(client_wrapper=self._client_wrapper)
        self.checkout = CheckoutClient(client_wrapper=self._client_wrapper)
        self.companies = CompaniesClient(client_wrapper=self._client_wrapper)
        self.entitlements = EntitlementsClient(client_wrapper=self._client_wrapper)
        self.plans = PlansClient(client_wrapper=self._client_wrapper)
        self.components = ComponentsClient(client_wrapper=self._client_wrapper)
        self.crm = CrmClient(client_wrapper=self._client_wrapper)
        self.dataexports = DataexportsClient(client_wrapper=self._client_wrapper)
        self.events = EventsClient(client_wrapper=self._client_wrapper)
        self.plangroups = PlangroupsClient(client_wrapper=self._client_wrapper)
        self.accesstokens = AccesstokensClient(client_wrapper=self._client_wrapper)
        self.webhooks = WebhooksClient(client_wrapper=self._client_wrapper)

    @property
    def with_raw_response(self) -> RawBaseSchematic:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawBaseSchematic
        """
        return self._raw_client

    def get_credit(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.get_credit()
        """
        _response = self._raw_client.get_credit(request_options=request_options)
        return _response.data

    def update_credit(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.update_credit()
        """
        _response = self._raw_client.update_credit(request_options=request_options)
        return _response.data

    def delete_credit(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.delete_credit()
        """
        _response = self._raw_client.delete_credit(request_options=request_options)
        return _response.data

    def get_credit_bundle(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.get_credit_bundle()
        """
        _response = self._raw_client.get_credit_bundle(request_options=request_options)
        return _response.data

    def purchase_credit_bundle(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.purchase_credit_bundle()
        """
        _response = self._raw_client.purchase_credit_bundle(request_options=request_options)
        return _response.data

    def update_credit_bundle(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.update_credit_bundle()
        """
        _response = self._raw_client.update_credit_bundle(request_options=request_options)
        return _response.data

    def zero_out_credit_grant(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.zero_out_credit_grant()
        """
        _response = self._raw_client.zero_out_credit_grant(request_options=request_options)
        return _response.data

    def delete_plan_credit_grant(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.delete_plan_credit_grant()
        """
        _response = self._raw_client.delete_plan_credit_grant(request_options=request_options)
        return _response.data


class AsyncBaseSchematic:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : SchematicEnvironment
        The environment to use for requests from the client. from .environment import SchematicEnvironment



        Defaults to SchematicEnvironment.DEFAULT



    api_key : str
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from schematic import AsyncSchematic

    client = AsyncSchematic(
        api_key="YOUR_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: SchematicEnvironment = SchematicEnvironment.DEFAULT,
        api_key: str,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            api_key=api_key,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._raw_client = AsyncRawBaseSchematic(client_wrapper=self._client_wrapper)
        self.accounts = AsyncAccountsClient(client_wrapper=self._client_wrapper)
        self.features = AsyncFeaturesClient(client_wrapper=self._client_wrapper)
        self.billing = AsyncBillingClient(client_wrapper=self._client_wrapper)
        self.credits = AsyncCreditsClient(client_wrapper=self._client_wrapper)
        self.checkout = AsyncCheckoutClient(client_wrapper=self._client_wrapper)
        self.companies = AsyncCompaniesClient(client_wrapper=self._client_wrapper)
        self.entitlements = AsyncEntitlementsClient(client_wrapper=self._client_wrapper)
        self.plans = AsyncPlansClient(client_wrapper=self._client_wrapper)
        self.components = AsyncComponentsClient(client_wrapper=self._client_wrapper)
        self.crm = AsyncCrmClient(client_wrapper=self._client_wrapper)
        self.dataexports = AsyncDataexportsClient(client_wrapper=self._client_wrapper)
        self.events = AsyncEventsClient(client_wrapper=self._client_wrapper)
        self.plangroups = AsyncPlangroupsClient(client_wrapper=self._client_wrapper)
        self.accesstokens = AsyncAccesstokensClient(client_wrapper=self._client_wrapper)
        self.webhooks = AsyncWebhooksClient(client_wrapper=self._client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawBaseSchematic:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawBaseSchematic
        """
        return self._raw_client

    async def get_credit(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_credit()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_credit(request_options=request_options)
        return _response.data

    async def update_credit(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.update_credit()


        asyncio.run(main())
        """
        _response = await self._raw_client.update_credit(request_options=request_options)
        return _response.data

    async def delete_credit(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.delete_credit()


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_credit(request_options=request_options)
        return _response.data

    async def get_credit_bundle(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_credit_bundle()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_credit_bundle(request_options=request_options)
        return _response.data

    async def purchase_credit_bundle(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.purchase_credit_bundle()


        asyncio.run(main())
        """
        _response = await self._raw_client.purchase_credit_bundle(request_options=request_options)
        return _response.data

    async def update_credit_bundle(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.update_credit_bundle()


        asyncio.run(main())
        """
        _response = await self._raw_client.update_credit_bundle(request_options=request_options)
        return _response.data

    async def zero_out_credit_grant(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.zero_out_credit_grant()


        asyncio.run(main())
        """
        _response = await self._raw_client.zero_out_credit_grant(request_options=request_options)
        return _response.data

    async def delete_plan_credit_grant(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.delete_plan_credit_grant()


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_plan_credit_grant(request_options=request_options)
        return _response.data


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: SchematicEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
