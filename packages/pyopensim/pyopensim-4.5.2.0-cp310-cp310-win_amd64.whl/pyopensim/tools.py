# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tools
else:
    import _tools

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tools.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _tools.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _tools.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _tools.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _tools.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _tools.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _tools.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _tools.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _tools.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _tools.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _tools.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _tools.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _tools.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _tools.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _tools.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _tools.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _tools.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _tools:
_tools.SwigPyIterator_swigregister(SwigPyIterator)
import opensim.analyses
import opensim.actuators
import opensim.simulation
import opensim.common
import opensim.simbody
class IKTask(opensim.common.OpenSimObject):
    r"""Author: Eran Guendelman, Ayman Habib"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> IKTask

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.IKTask_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(IKTask self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.IKTask_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _tools.IKTask_getClassName()

    def clone(self):
        r"""clone(IKTask self) -> IKTask"""
        return _tools.IKTask_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(IKTask self) -> std::string const &"""
        return _tools.IKTask_getConcreteClassName(self)

    def getApply(self):
        r"""getApply(IKTask self) -> bool"""
        return _tools.IKTask_getApply(self)

    def setApply(self, aApply):
        r"""
        setApply(IKTask self, bool aApply)

        Parameters
        ----------
        aApply: bool

        """
        return _tools.IKTask_setApply(self, aApply)

    def getWeight(self):
        r"""getWeight(IKTask self) -> double"""
        return _tools.IKTask_getWeight(self)

    def setWeight(self, weight):
        r"""
        setWeight(IKTask self, double weight)

        Parameters
        ----------
        weight: double

        """
        return _tools.IKTask_setWeight(self, weight)
    __swig_destroy__ = _tools.delete_IKTask

# Register IKTask in _tools:
_tools.IKTask_swigregister(IKTask)
class SetIKTasks(opensim.common.OpenSimObject):
    r"""
    A class for holding a set of pointers to objects.  It is derived from
    base class C and is implemented as a wrapper around template class
    ArrayPtrs<T>.

    See also: ArrayPtrs
    Author: Frank C. Anderson
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> SetIKTasks

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.SetIKTasks_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(SetIKTasks self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.SetIKTasks_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _tools.SetIKTasks_getClassName()

    def clone(self):
        r"""clone(SetIKTasks self) -> SetIKTasks"""
        return _tools.SetIKTasks_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(SetIKTasks self) -> std::string const &"""
        return _tools.SetIKTasks_getConcreteClassName(self)
    __swig_destroy__ = _tools.delete_SetIKTasks

    def __init__(self, *args):
        r"""
        *Overload 1:*

        Default constructor.

        |

        *Overload 2:*

        Construct from file.

        :type aFileName: string
        :param aFileName:             Name of the file.
        :type aUpdateFromXMLNode: boolean, optional
        :param aUpdateFromXMLNode:    Whether to update from XML.

        |

        *Overload 3:*

        Construct from file.

        :type aFileName: string
        :param aFileName:             Name of the file.
        :param aUpdateFromXMLNode:    Whether to update from XML.

        |

        *Overload 4:*

        Copy constructor.

        :type aSet: OpenSim::Set< OpenSim::IKTask,OpenSim::Object >
        :param aSet: Set to be copied.
        """
        _tools.SetIKTasks_swiginit(self, _tools.new_SetIKTasks(*args))

    def setupGroups(self):
        r"""Setup groups (match group member names to set members)."""
        return _tools.SetIKTasks_setupGroups(self)

    def setMemoryOwner(self, aTrueFalse):
        r"""
        Assign this set to another set.
        This operator makes a complete copy of the specified set; all member
        variables and objects in the set are copied.  Because all objects are
        copied, this set takes ownership of the newly allocated objects (i.e.,
        _memoryOwner is set to true. So, the result is two independent,
        identical sets, with the possible exception of the _memoryOwner flag.

        :param set: The Set to be copied.
        :rtype: void
        :return: Reference to this set.

        %Set whether or not this Set owns the memory pointed to by the pointers
        it holds.

        :type aTrueFalse: boolean
        :param aTrueFalse: If true, all the memory associated with each of the
            pointers in this array are deleted upon the array's destruction.  If
            false, deletes are not issued for each of the pointers.
        """
        return _tools.SetIKTasks_setMemoryOwner(self, aTrueFalse)

    def setSize(self, aSize):
        r"""
        %Set the size of the array.  This method can be used only to decrease
        the size of the array.  If the size of an array is decreased, all objects
        in the array that become invalid as a result of the decrease are
        deleted.

        Note that the size of an array is different than its capacity.  The size
        indicates how many valid elements are stored in an array.  The capacity
        indicates how much the size of the array can be increased without
        allocated more memory.  At all times size <= capacity.

        :type aSize: int
        :param aSize: Desired size of the array.  The size must be greater than
            or equal to zero and less than or equal to the current size of the
            array.
        :rtype: boolean
        :return: True if the requested size change was carried out, false
            otherwise.
        """
        return _tools.SetIKTasks_setSize(self, aSize)

    def getSize(self):
        r"""
        Get the size of the array.

        :rtype: int
        :return: Size of the array.
        """
        return _tools.SetIKTasks_getSize(self)

    def getIndex(self, *args):
        r"""
        *Overload 1:*

        Get the index of an object.

        :type aObject: :py:class:`IKTask`
        :param aObject: Address of the object whose index is sought.
        :type aStartIndex: int, optional
        :param aStartIndex: Index at which to start searching.  If the object is
            not found at or following aStartIndex, the array is searched from
            its beginning.
        :rtype: int
        :return: Index of the object with the address aObject.  If no such object
            exists in the array, -1 is returned.

        |

        *Overload 2:*

        Get the index of an object by specifying its name.

        :type aName: string
        :param aName: Name of the object whose index is sought.
        :type aStartIndex: int, optional
        :param aStartIndex: Index at which to start searching.  If the object is
            not found at or following aStartIndex, the array is searched from
            its beginning.
        :rtype: int
        :return: Index of the object named aName.  If no such object exists in
            the array, -1 is returned.

        |

        *Overload 3:*

        Get the index of an object by specifying its name.

        :type aName: string
        :param aName: Name of the object whose index is sought.
        :param aStartIndex: Index at which to start searching.  If the object is
            not found at or following aStartIndex, the array is searched from
            its beginning.
        :rtype: int
        :return: Index of the object named aName.  If no such object exists in
            the array, -1 is returned.
        """
        return _tools.SetIKTasks_getIndex(self, *args)

    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        r"""Get names of groups containing a given object"""
        return _tools.SetIKTasks_getGroupNamesContaining(self, aObjectName, rGroupNames)

    def adoptAndAppend(self, aObject):
        r"""
        Append to the array, and adopt passed in pointer.  A copy is NOT made of the specified object.  If
        getMemoryOwner() is true, this Set takes over ownership of the object and
        deletes it when the Set itself is deleted.

        :type aObject: :py:class:`IKTask`
        :param aObject: Object to be appended.
        :rtype: boolean
        :return: True if the append was successful, false otherwise.
        """
        return _tools.SetIKTasks_adoptAndAppend(self, aObject)

    def cloneAndAppend(self, aObject):
        r"""
        cloneAndAppend creates a clone of the passed in object and appends the clone to the array.
        The original object is unaffected and is not associated with the Set. The clone is created
        using the method clone() available to OpenSim::Object

        :type aObject: :py:class:`IKTask`
        :param aObject: Object whose clone is to be appended.
        :rtype: boolean
        :return: True if the append was successful, false otherwise.
        """
        return _tools.SetIKTasks_cloneAndAppend(self, aObject)

    def insert(self, aIndex, aObject):
        r"""
        Insert an object into the array at a specified index.  A copy of the
        specified object is NOT made.  If getMemoryOwner() is true, this Set takes
        over ownership of the object and deletes it when the Set itself is deleted.

        This method is relatively computationally costly since many of the array
        elements may need to be shifted.

        :type aObject: :py:class:`IKTask`
        :param aObject: Object to be inserted.
        :type aIndex: int
        :param aIndex: Index at which to insert the new object.  All current elements
            from aIndex to the end of the array are shifted one place in the direction
            of the end of the array.  The specified index must be less than or
            equal to the size of the array.  Note that if aIndex is equal to the
            size of the array, the insertion is equivalent to an append.
        :rtype: boolean
        :return: True if the insertion was successful, false otherwise.
        """
        return _tools.SetIKTasks_insert(self, aIndex, aObject)

    def remove(self, *args):
        r"""
        *Overload 1:*

        Remove an object from the array at a specified index.
        If this set is set as the memory owner, the object is deleted when it
        is removed.

        This method is relatively computationally costly since many of the array
        elements may need to be shifted.

        :type aIndex: int
        :param aIndex: Index of the value to remove.  All elements from aIndex to
            the end of the array are shifted one place toward the beginning of
            the array.  If aIndex is less than 0 or greater than or equal to the
            current size of the array, no element is removed.
        :rtype: boolean
        :return: True if the removal was successful, false otherwise.

        |

        *Overload 2:*

        Remove an object from the array by specifying its address.
        The object is deleted when it is removed.

        This method is relatively computationally costly since many of the array
        elements may need to be shifted.

        :type aObject: :py:class:`IKTask`
        :param aObject: Pointer to the object to be removed.  If an object with the
            specified address is not found, no action is taken.
        :rtype: boolean
        :return: True if the removal was successful, false otherwise.
        """
        return _tools.SetIKTasks_remove(self, *args)

    def clearAndDestroy(self):
        r"""clearAndDestroy(SetIKTasks self)"""
        return _tools.SetIKTasks_clearAndDestroy(self)

    def set(self, aIndex, aObject, preserveGroups=False):
        r"""
        %Set the object at a specified index.  A copy of the object is NOT made.
        If getMemoryOwner() is true, this Set takes over ownership of the object and
        deletes it when the Set itself is deleted.

        :type aIndex: int
        :param aIndex: Index of the array element to be set.  aIndex must be
            greater than zero and less than or equal to the size of the array.  Note
            that if aIndex is equal to the size of the array, the set is equivalent
            to an append.
        :type aObject: :py:class:`IKTask`
        :param aObject: Object to be set.
        :type preserveGroups: boolean, optional
        :param preserveGroups: If true, the new object will be added to the groups
            that the object it replaces belonged to
        :rtype: boolean
        :return: True if the set was successful, false otherwise.
        """
        return _tools.SetIKTasks_set(self, aIndex, aObject, preserveGroups)

    def get(self, *args):
        r"""
        *Overload 1:*

        Get the value at a specified array index.

        If the index is negative or passed the end of the array, an exception
        is thrown.

        For faster execution, the array elements can be accessed through the
        overloaded operator[], which does no bounds checking.

        :type aIndex: int
        :param aIndex: Index of the desired array element.
        :rtype: :py:class:`IKTask`
        :return: Reference to the array element.
        :raises: Exception if (aIndex<0)||(aIndex>=_size) or if the pointer
            at aIndex is NULL.
        See also: operator[].

        |

        *Overload 2:*

        Get the first object that has a specified name.

        If the array doesn't contain an object of the specified name, an
        exception is thrown.

        :type aName: string
        :param aName: Name of the desired object.
        :rtype: :py:class:`IKTask`
        :return: Pointer to the object.
        :raises: Exception if no such object exists.
        See also: getIndex()
        """
        return _tools.SetIKTasks_get(self, *args)

    def contains(self, aName):
        r"""
        Get whether this Set contains any object with the specified name.

        :type aName: string
        :param aName: Name of the desired object.
        :rtype: boolean
        :return: true if the object exists
        """
        return _tools.SetIKTasks_contains(self, aName)

    def getNames(self, rNames):
        r"""
        Get names of objects in the set.

        :type rNames: OpenSim::Array< std::string >
        :param rNames: Array of names.  The names are appended to rNames, so it
            is permissible to send in an non-empty array; the names in the set
            will simply be appended to the array sent in.
        """
        return _tools.SetIKTasks_getNames(self, rNames)

    def getNumGroups(self):
        r"""Get the number of groups."""
        return _tools.SetIKTasks_getNumGroups(self)

    def addGroup(self, aGroupName):
        r"""Add an empty group to the set."""
        return _tools.SetIKTasks_addGroup(self, aGroupName)

    def removeGroup(self, aGroupName):
        r"""Remove a group from the set. Elements are not removed."""
        return _tools.SetIKTasks_removeGroup(self, aGroupName)

    def renameGroup(self, oldGroupName, newGroupName):
        r"""Rename a group."""
        return _tools.SetIKTasks_renameGroup(self, oldGroupName, newGroupName)

    def addObjectToGroup(self, aGroupName, aObjectName):
        r"""Add an object to a group."""
        return _tools.SetIKTasks_addObjectToGroup(self, aGroupName, aObjectName)

    def getGroupNames(self, rGroupNames):
        r"""Get names of all groups"""
        return _tools.SetIKTasks_getGroupNames(self, rGroupNames)

    def getGroup(self, *args):
        r"""
        *Overload 1:*

        Get a group by name.

        |

        *Overload 2:*

        Get a group by index.
        """
        return _tools.SetIKTasks_getGroup(self, *args)

    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1


# Register SetIKTasks in _tools:
_tools.SetIKTasks_swigregister(SetIKTasks)
class IKMarkerTask(IKTask):
    r"""
    Authors: Eran Guendelman, Ayman Habib
    Version: 1.0
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> IKMarkerTask

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.IKMarkerTask_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(IKMarkerTask self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.IKMarkerTask_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _tools.IKMarkerTask_getClassName()

    def clone(self):
        r"""clone(IKMarkerTask self) -> IKMarkerTask"""
        return _tools.IKMarkerTask_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(IKMarkerTask self) -> std::string const &"""
        return _tools.IKMarkerTask_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(IKMarkerTask self) -> IKMarkerTask
        __init__(IKMarkerTask self, IKMarkerTask arg2) -> IKMarkerTask

        Parameters
        ----------
        arg2: OpenSim::IKMarkerTask const &

        __init__(IKMarkerTask self, IKMarkerTask arg2) -> IKMarkerTask

        Parameters
        ----------
        arg2: OpenSim::IKMarkerTask &&

        """
        _tools.IKMarkerTask_swiginit(self, _tools.new_IKMarkerTask(*args))
    __swig_destroy__ = _tools.delete_IKMarkerTask

# Register IKMarkerTask in _tools:
_tools.IKMarkerTask_swigregister(IKMarkerTask)
class IKCoordinateTask(IKTask):
    r"""
    Authors: Eran Guendelman
    Version: 1.0
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> IKCoordinateTask

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.IKCoordinateTask_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(IKCoordinateTask self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.IKCoordinateTask_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _tools.IKCoordinateTask_getClassName()

    def clone(self):
        r"""clone(IKCoordinateTask self) -> IKCoordinateTask"""
        return _tools.IKCoordinateTask_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(IKCoordinateTask self) -> std::string const &"""
        return _tools.IKCoordinateTask_getConcreteClassName(self)
    DefaultValue = _tools.IKCoordinateTask_DefaultValue
    
    ManualValue = _tools.IKCoordinateTask_ManualValue
    
    FromFile = _tools.IKCoordinateTask_FromFile
    

    def __init__(self, *args):
        r"""
        __init__(IKCoordinateTask self) -> IKCoordinateTask
        __init__(IKCoordinateTask self, IKCoordinateTask aIKCoordinateTask) -> IKCoordinateTask

        Parameters
        ----------
        aIKCoordinateTask: OpenSim::IKCoordinateTask const &

        """
        _tools.IKCoordinateTask_swiginit(self, _tools.new_IKCoordinateTask(*args))

    def setValueType(self, type):
        r"""
        setValueType(IKCoordinateTask self, OpenSim::IKCoordinateTask::ValueType type)

        Parameters
        ----------
        type: enum OpenSim::IKCoordinateTask::ValueType

        """
        return _tools.IKCoordinateTask_setValueType(self, type)

    def getValueType(self):
        r"""getValueType(IKCoordinateTask self) -> OpenSim::IKCoordinateTask::ValueType"""
        return _tools.IKCoordinateTask_getValueType(self)

    def getValue(self):
        r"""getValue(IKCoordinateTask self) -> double"""
        return _tools.IKCoordinateTask_getValue(self)

    def setValue(self, value):
        r"""
        setValue(IKCoordinateTask self, double value)

        Parameters
        ----------
        value: double

        """
        return _tools.IKCoordinateTask_setValue(self, value)

    @staticmethod
    def ValueTypeToString(type):
        r"""
        ValueTypeToString(OpenSim::IKCoordinateTask::ValueType type) -> std::string

        Parameters
        ----------
        type: enum OpenSim::IKCoordinateTask::ValueType

        """
        return _tools.IKCoordinateTask_ValueTypeToString(type)

    @staticmethod
    def StringToValueType(str):
        r"""
        StringToValueType(std::string const & str) -> OpenSim::IKCoordinateTask::ValueType

        Parameters
        ----------
        str: std::string const &

        """
        return _tools.IKCoordinateTask_StringToValueType(str)
    __swig_destroy__ = _tools.delete_IKCoordinateTask

# Register IKCoordinateTask in _tools:
_tools.IKCoordinateTask_swigregister(IKCoordinateTask)
class IKTaskSet(SetIKTasks):
    r"""
    Authors: Eran Guendelman
    Version: 1.0
    - Added constructor from a file for use in GUI. -Ayman 02/20/07
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> IKTaskSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.IKTaskSet_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(IKTaskSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.IKTaskSet_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _tools.IKTaskSet_getClassName()

    def clone(self):
        r"""clone(IKTaskSet self) -> IKTaskSet"""
        return _tools.IKTaskSet_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(IKTaskSet self) -> std::string const &"""
        return _tools.IKTaskSet_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(IKTaskSet self) -> IKTaskSet
        __init__(IKTaskSet self, IKTaskSet aIKTaskSet) -> IKTaskSet

        Parameters
        ----------
        aIKTaskSet: OpenSim::IKTaskSet const &

        __init__(IKTaskSet self, std::string const & aFileName) -> IKTaskSet

        Parameters
        ----------
        aFileName: std::string const &

        """
        _tools.IKTaskSet_swiginit(self, _tools.new_IKTaskSet(*args))

    def createMarkerWeightSet(self, aWeights):
        r"""
        createMarkerWeightSet(IKTaskSet self, SetMarkerWeights aWeights)

        Parameters
        ----------
        aWeights: OpenSim::Set< OpenSim::MarkerWeight > &

        """
        return _tools.IKTaskSet_createMarkerWeightSet(self, aWeights)

    def adoptAndAppend(self, aIKTask):
        aIKTask._markAdopted()
        return super(IKTaskSet, self).adoptAndAppend(aIKTask)

    __swig_destroy__ = _tools.delete_IKTaskSet

# Register IKTaskSet in _tools:
_tools.IKTaskSet_swigregister(IKTaskSet)
class MarkerPair(opensim.common.OpenSimObject):
    r"""
    A class for holding the names of a pair of markers (for making
    measurements on a model).

    Author: Peter Loan
    Version: 1.0
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MarkerPair

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.MarkerPair_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MarkerPair self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.MarkerPair_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _tools.MarkerPair_getClassName()

    def clone(self):
        r"""clone(MarkerPair self) -> MarkerPair"""
        return _tools.MarkerPair_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MarkerPair self) -> std::string const &"""
        return _tools.MarkerPair_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(MarkerPair self) -> MarkerPair
        __init__(MarkerPair self, MarkerPair aMarkerPair) -> MarkerPair

        Parameters
        ----------
        aMarkerPair: OpenSim::MarkerPair const &

        __init__(MarkerPair self, std::string const & aName1, std::string const & aName2) -> MarkerPair

        Parameters
        ----------
        aName1: std::string const &
        aName2: std::string const &

        """
        _tools.MarkerPair_swiginit(self, _tools.new_MarkerPair(*args))
    __swig_destroy__ = _tools.delete_MarkerPair

    def copyData(self, aMarkerPair):
        r"""
        copyData(MarkerPair self, MarkerPair aMarkerPair)

        Parameters
        ----------
        aMarkerPair: OpenSim::MarkerPair const &

        """
        return _tools.MarkerPair_copyData(self, aMarkerPair)

    def getMarkerNames(self, aName1, aName2):
        r"""
        getMarkerNames(MarkerPair self, std::string & aName1, std::string & aName2)

        Parameters
        ----------
        aName1: std::string &
        aName2: std::string &

        """
        return _tools.MarkerPair_getMarkerNames(self, aName1, aName2)

    def getMarkerName(self, i):
        r"""
        getMarkerName(MarkerPair self, int i) -> std::string const &

        Parameters
        ----------
        i: int

        """
        return _tools.MarkerPair_getMarkerName(self, i)

    def setMarkerName(self, i, aName):
        r"""
        setMarkerName(MarkerPair self, int i, std::string const & aName)

        Parameters
        ----------
        i: int
        aName: std::string const &

        """
        return _tools.MarkerPair_setMarkerName(self, i, aName)

# Register MarkerPair in _tools:
_tools.MarkerPair_swigregister(MarkerPair)
class SetMarkerPairs(opensim.common.OpenSimObject):
    r"""
    A class for holding a set of pointers to objects.  It is derived from
    base class C and is implemented as a wrapper around template class
    ArrayPtrs<T>.

    See also: ArrayPtrs
    Author: Frank C. Anderson
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> SetMarkerPairs

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.SetMarkerPairs_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(SetMarkerPairs self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.SetMarkerPairs_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _tools.SetMarkerPairs_getClassName()

    def clone(self):
        r"""clone(SetMarkerPairs self) -> SetMarkerPairs"""
        return _tools.SetMarkerPairs_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(SetMarkerPairs self) -> std::string const &"""
        return _tools.SetMarkerPairs_getConcreteClassName(self)
    __swig_destroy__ = _tools.delete_SetMarkerPairs

    def __init__(self, *args):
        r"""
        *Overload 1:*

        Default constructor.

        |

        *Overload 2:*

        Construct from file.

        :type aFileName: string
        :param aFileName:             Name of the file.
        :type aUpdateFromXMLNode: boolean, optional
        :param aUpdateFromXMLNode:    Whether to update from XML.

        |

        *Overload 3:*

        Construct from file.

        :type aFileName: string
        :param aFileName:             Name of the file.
        :param aUpdateFromXMLNode:    Whether to update from XML.

        |

        *Overload 4:*

        Copy constructor.

        :type aSet: OpenSim::Set< OpenSim::MarkerPair,OpenSim::Object >
        :param aSet: Set to be copied.
        """
        _tools.SetMarkerPairs_swiginit(self, _tools.new_SetMarkerPairs(*args))

    def setupGroups(self):
        r"""Setup groups (match group member names to set members)."""
        return _tools.SetMarkerPairs_setupGroups(self)

    def setMemoryOwner(self, aTrueFalse):
        r"""
        Assign this set to another set.
        This operator makes a complete copy of the specified set; all member
        variables and objects in the set are copied.  Because all objects are
        copied, this set takes ownership of the newly allocated objects (i.e.,
        _memoryOwner is set to true. So, the result is two independent,
        identical sets, with the possible exception of the _memoryOwner flag.

        :param set: The Set to be copied.
        :rtype: void
        :return: Reference to this set.

        %Set whether or not this Set owns the memory pointed to by the pointers
        it holds.

        :type aTrueFalse: boolean
        :param aTrueFalse: If true, all the memory associated with each of the
            pointers in this array are deleted upon the array's destruction.  If
            false, deletes are not issued for each of the pointers.
        """
        return _tools.SetMarkerPairs_setMemoryOwner(self, aTrueFalse)

    def setSize(self, aSize):
        r"""
        %Set the size of the array.  This method can be used only to decrease
        the size of the array.  If the size of an array is decreased, all objects
        in the array that become invalid as a result of the decrease are
        deleted.

        Note that the size of an array is different than its capacity.  The size
        indicates how many valid elements are stored in an array.  The capacity
        indicates how much the size of the array can be increased without
        allocated more memory.  At all times size <= capacity.

        :type aSize: int
        :param aSize: Desired size of the array.  The size must be greater than
            or equal to zero and less than or equal to the current size of the
            array.
        :rtype: boolean
        :return: True if the requested size change was carried out, false
            otherwise.
        """
        return _tools.SetMarkerPairs_setSize(self, aSize)

    def getSize(self):
        r"""
        Get the size of the array.

        :rtype: int
        :return: Size of the array.
        """
        return _tools.SetMarkerPairs_getSize(self)

    def getIndex(self, *args):
        r"""
        *Overload 1:*

        Get the index of an object.

        :type aObject: :py:class:`MarkerPair`
        :param aObject: Address of the object whose index is sought.
        :type aStartIndex: int, optional
        :param aStartIndex: Index at which to start searching.  If the object is
            not found at or following aStartIndex, the array is searched from
            its beginning.
        :rtype: int
        :return: Index of the object with the address aObject.  If no such object
            exists in the array, -1 is returned.

        |

        *Overload 2:*

        Get the index of an object by specifying its name.

        :type aName: string
        :param aName: Name of the object whose index is sought.
        :type aStartIndex: int, optional
        :param aStartIndex: Index at which to start searching.  If the object is
            not found at or following aStartIndex, the array is searched from
            its beginning.
        :rtype: int
        :return: Index of the object named aName.  If no such object exists in
            the array, -1 is returned.

        |

        *Overload 3:*

        Get the index of an object by specifying its name.

        :type aName: string
        :param aName: Name of the object whose index is sought.
        :param aStartIndex: Index at which to start searching.  If the object is
            not found at or following aStartIndex, the array is searched from
            its beginning.
        :rtype: int
        :return: Index of the object named aName.  If no such object exists in
            the array, -1 is returned.
        """
        return _tools.SetMarkerPairs_getIndex(self, *args)

    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        r"""Get names of groups containing a given object"""
        return _tools.SetMarkerPairs_getGroupNamesContaining(self, aObjectName, rGroupNames)

    def adoptAndAppend(self, aObject):
        r"""
        Append to the array, and adopt passed in pointer.  A copy is NOT made of the specified object.  If
        getMemoryOwner() is true, this Set takes over ownership of the object and
        deletes it when the Set itself is deleted.

        :type aObject: :py:class:`MarkerPair`
        :param aObject: Object to be appended.
        :rtype: boolean
        :return: True if the append was successful, false otherwise.
        """
        return _tools.SetMarkerPairs_adoptAndAppend(self, aObject)

    def cloneAndAppend(self, aObject):
        r"""
        cloneAndAppend creates a clone of the passed in object and appends the clone to the array.
        The original object is unaffected and is not associated with the Set. The clone is created
        using the method clone() available to OpenSim::Object

        :type aObject: :py:class:`MarkerPair`
        :param aObject: Object whose clone is to be appended.
        :rtype: boolean
        :return: True if the append was successful, false otherwise.
        """
        return _tools.SetMarkerPairs_cloneAndAppend(self, aObject)

    def insert(self, aIndex, aObject):
        r"""
        Insert an object into the array at a specified index.  A copy of the
        specified object is NOT made.  If getMemoryOwner() is true, this Set takes
        over ownership of the object and deletes it when the Set itself is deleted.

        This method is relatively computationally costly since many of the array
        elements may need to be shifted.

        :type aObject: :py:class:`MarkerPair`
        :param aObject: Object to be inserted.
        :type aIndex: int
        :param aIndex: Index at which to insert the new object.  All current elements
            from aIndex to the end of the array are shifted one place in the direction
            of the end of the array.  The specified index must be less than or
            equal to the size of the array.  Note that if aIndex is equal to the
            size of the array, the insertion is equivalent to an append.
        :rtype: boolean
        :return: True if the insertion was successful, false otherwise.
        """
        return _tools.SetMarkerPairs_insert(self, aIndex, aObject)

    def remove(self, *args):
        r"""
        *Overload 1:*

        Remove an object from the array at a specified index.
        If this set is set as the memory owner, the object is deleted when it
        is removed.

        This method is relatively computationally costly since many of the array
        elements may need to be shifted.

        :type aIndex: int
        :param aIndex: Index of the value to remove.  All elements from aIndex to
            the end of the array are shifted one place toward the beginning of
            the array.  If aIndex is less than 0 or greater than or equal to the
            current size of the array, no element is removed.
        :rtype: boolean
        :return: True if the removal was successful, false otherwise.

        |

        *Overload 2:*

        Remove an object from the array by specifying its address.
        The object is deleted when it is removed.

        This method is relatively computationally costly since many of the array
        elements may need to be shifted.

        :type aObject: :py:class:`MarkerPair`
        :param aObject: Pointer to the object to be removed.  If an object with the
            specified address is not found, no action is taken.
        :rtype: boolean
        :return: True if the removal was successful, false otherwise.
        """
        return _tools.SetMarkerPairs_remove(self, *args)

    def clearAndDestroy(self):
        r"""clearAndDestroy(SetMarkerPairs self)"""
        return _tools.SetMarkerPairs_clearAndDestroy(self)

    def set(self, aIndex, aObject, preserveGroups=False):
        r"""
        %Set the object at a specified index.  A copy of the object is NOT made.
        If getMemoryOwner() is true, this Set takes over ownership of the object and
        deletes it when the Set itself is deleted.

        :type aIndex: int
        :param aIndex: Index of the array element to be set.  aIndex must be
            greater than zero and less than or equal to the size of the array.  Note
            that if aIndex is equal to the size of the array, the set is equivalent
            to an append.
        :type aObject: :py:class:`MarkerPair`
        :param aObject: Object to be set.
        :type preserveGroups: boolean, optional
        :param preserveGroups: If true, the new object will be added to the groups
            that the object it replaces belonged to
        :rtype: boolean
        :return: True if the set was successful, false otherwise.
        """
        return _tools.SetMarkerPairs_set(self, aIndex, aObject, preserveGroups)

    def get(self, *args):
        r"""
        *Overload 1:*

        Get the value at a specified array index.

        If the index is negative or passed the end of the array, an exception
        is thrown.

        For faster execution, the array elements can be accessed through the
        overloaded operator[], which does no bounds checking.

        :type aIndex: int
        :param aIndex: Index of the desired array element.
        :rtype: :py:class:`MarkerPair`
        :return: Reference to the array element.
        :raises: Exception if (aIndex<0)||(aIndex>=_size) or if the pointer
            at aIndex is NULL.
        See also: operator[].

        |

        *Overload 2:*

        Get the first object that has a specified name.

        If the array doesn't contain an object of the specified name, an
        exception is thrown.

        :type aName: string
        :param aName: Name of the desired object.
        :rtype: :py:class:`MarkerPair`
        :return: Pointer to the object.
        :raises: Exception if no such object exists.
        See also: getIndex()
        """
        return _tools.SetMarkerPairs_get(self, *args)

    def contains(self, aName):
        r"""
        Get whether this Set contains any object with the specified name.

        :type aName: string
        :param aName: Name of the desired object.
        :rtype: boolean
        :return: true if the object exists
        """
        return _tools.SetMarkerPairs_contains(self, aName)

    def getNames(self, rNames):
        r"""
        Get names of objects in the set.

        :type rNames: OpenSim::Array< std::string >
        :param rNames: Array of names.  The names are appended to rNames, so it
            is permissible to send in an non-empty array; the names in the set
            will simply be appended to the array sent in.
        """
        return _tools.SetMarkerPairs_getNames(self, rNames)

    def getNumGroups(self):
        r"""Get the number of groups."""
        return _tools.SetMarkerPairs_getNumGroups(self)

    def addGroup(self, aGroupName):
        r"""Add an empty group to the set."""
        return _tools.SetMarkerPairs_addGroup(self, aGroupName)

    def removeGroup(self, aGroupName):
        r"""Remove a group from the set. Elements are not removed."""
        return _tools.SetMarkerPairs_removeGroup(self, aGroupName)

    def renameGroup(self, oldGroupName, newGroupName):
        r"""Rename a group."""
        return _tools.SetMarkerPairs_renameGroup(self, oldGroupName, newGroupName)

    def addObjectToGroup(self, aGroupName, aObjectName):
        r"""Add an object to a group."""
        return _tools.SetMarkerPairs_addObjectToGroup(self, aGroupName, aObjectName)

    def getGroupNames(self, rGroupNames):
        r"""Get names of all groups"""
        return _tools.SetMarkerPairs_getGroupNames(self, rGroupNames)

    def getGroup(self, *args):
        r"""
        *Overload 1:*

        Get a group by name.

        |

        *Overload 2:*

        Get a group by index.
        """
        return _tools.SetMarkerPairs_getGroup(self, *args)

    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1


# Register SetMarkerPairs in _tools:
_tools.SetMarkerPairs_swigregister(SetMarkerPairs)
class MarkerPairSet(SetMarkerPairs):
    r"""
    A class for holding a set of SimmMarkerPairs.

    Authors: Peter Loan
    Version: 1.0
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MarkerPairSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.MarkerPairSet_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MarkerPairSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.MarkerPairSet_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _tools.MarkerPairSet_getClassName()

    def clone(self):
        r"""clone(MarkerPairSet self) -> MarkerPairSet"""
        return _tools.MarkerPairSet_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MarkerPairSet self) -> std::string const &"""
        return _tools.MarkerPairSet_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(MarkerPairSet self) -> MarkerPairSet
        __init__(MarkerPairSet self, MarkerPairSet aSimmMarkerPairSet) -> MarkerPairSet

        Parameters
        ----------
        aSimmMarkerPairSet: OpenSim::MarkerPairSet const &

        """
        _tools.MarkerPairSet_swiginit(self, _tools.new_MarkerPairSet(*args))
    __swig_destroy__ = _tools.delete_MarkerPairSet

    def adoptAndAppend(self, aMarkerPair):
        aMarkerPair._markAdopted()
        return super(MarkerPairSet, self).adoptAndAppend(aMarkerPair)


# Register MarkerPairSet in _tools:
_tools.MarkerPairSet_swigregister(MarkerPairSet)
class Measurement(opensim.common.OpenSimObject):
    r"""
    A class implementing a measurement (the distance between one or more pairs
    of markers, used to scale a model).

    Author: Peter Loan
    Version: 1.0
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> Measurement

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.Measurement_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(Measurement self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.Measurement_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _tools.Measurement_getClassName()

    def clone(self):
        r"""clone(Measurement self) -> Measurement"""
        return _tools.Measurement_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(Measurement self) -> std::string const &"""
        return _tools.Measurement_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(Measurement self) -> Measurement
        __init__(Measurement self, Measurement aMeasurement) -> Measurement

        Parameters
        ----------
        aMeasurement: OpenSim::Measurement const &

        """
        _tools.Measurement_swiginit(self, _tools.new_Measurement(*args))
    __swig_destroy__ = _tools.delete_Measurement

    def copyData(self, aMeasurement):
        r"""
        copyData(Measurement self, Measurement aMeasurement)

        Parameters
        ----------
        aMeasurement: OpenSim::Measurement const &

        """
        return _tools.Measurement_copyData(self, aMeasurement)

    def getBodyScaleSet(self):
        r"""getBodyScaleSet(Measurement self) -> BodyScaleSet"""
        return _tools.Measurement_getBodyScaleSet(self)

    def getMarkerPairSet(self):
        r"""getMarkerPairSet(Measurement self) -> MarkerPairSet"""
        return _tools.Measurement_getMarkerPairSet(self)

    def getNumMarkerPairs(self):
        r"""getNumMarkerPairs(Measurement self) -> int"""
        return _tools.Measurement_getNumMarkerPairs(self)

    def getMarkerPair(self, aIndex):
        r"""
        getMarkerPair(Measurement self, int aIndex) -> MarkerPair

        Parameters
        ----------
        aIndex: int

        """
        return _tools.Measurement_getMarkerPair(self, aIndex)

    def getApply(self):
        r"""getApply(Measurement self) -> bool"""
        return _tools.Measurement_getApply(self)

    def setApply(self, aApply):
        r"""
        setApply(Measurement self, bool aApply)

        Parameters
        ----------
        aApply: bool

        """
        return _tools.Measurement_setApply(self, aApply)

    def applyScaleFactor(self, aFactor, aScaleSet):
        r"""
        applyScaleFactor(Measurement self, double aFactor, ScaleSet aScaleSet)

        Parameters
        ----------
        aFactor: double
        aScaleSet: OpenSim::ScaleSet &

        """
        return _tools.Measurement_applyScaleFactor(self, aFactor, aScaleSet)

    @staticmethod
    def registerTypes():
        r"""registerTypes()"""
        return _tools.Measurement_registerTypes()

# Register Measurement in _tools:
_tools.Measurement_swigregister(Measurement)
class SetMeasurements(opensim.common.OpenSimObject):
    r"""
    A class for holding a set of pointers to objects.  It is derived from
    base class C and is implemented as a wrapper around template class
    ArrayPtrs<T>.

    See also: ArrayPtrs
    Author: Frank C. Anderson
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> SetMeasurements

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.SetMeasurements_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(SetMeasurements self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.SetMeasurements_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _tools.SetMeasurements_getClassName()

    def clone(self):
        r"""clone(SetMeasurements self) -> SetMeasurements"""
        return _tools.SetMeasurements_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(SetMeasurements self) -> std::string const &"""
        return _tools.SetMeasurements_getConcreteClassName(self)
    __swig_destroy__ = _tools.delete_SetMeasurements

    def __init__(self, *args):
        r"""
        *Overload 1:*

        Default constructor.

        |

        *Overload 2:*

        Construct from file.

        :type aFileName: string
        :param aFileName:             Name of the file.
        :type aUpdateFromXMLNode: boolean, optional
        :param aUpdateFromXMLNode:    Whether to update from XML.

        |

        *Overload 3:*

        Construct from file.

        :type aFileName: string
        :param aFileName:             Name of the file.
        :param aUpdateFromXMLNode:    Whether to update from XML.

        |

        *Overload 4:*

        Copy constructor.

        :type aSet: OpenSim::Set< OpenSim::Measurement,OpenSim::Object >
        :param aSet: Set to be copied.
        """
        _tools.SetMeasurements_swiginit(self, _tools.new_SetMeasurements(*args))

    def setupGroups(self):
        r"""Setup groups (match group member names to set members)."""
        return _tools.SetMeasurements_setupGroups(self)

    def setMemoryOwner(self, aTrueFalse):
        r"""
        Assign this set to another set.
        This operator makes a complete copy of the specified set; all member
        variables and objects in the set are copied.  Because all objects are
        copied, this set takes ownership of the newly allocated objects (i.e.,
        _memoryOwner is set to true. So, the result is two independent,
        identical sets, with the possible exception of the _memoryOwner flag.

        :param set: The Set to be copied.
        :rtype: void
        :return: Reference to this set.

        %Set whether or not this Set owns the memory pointed to by the pointers
        it holds.

        :type aTrueFalse: boolean
        :param aTrueFalse: If true, all the memory associated with each of the
            pointers in this array are deleted upon the array's destruction.  If
            false, deletes are not issued for each of the pointers.
        """
        return _tools.SetMeasurements_setMemoryOwner(self, aTrueFalse)

    def setSize(self, aSize):
        r"""
        %Set the size of the array.  This method can be used only to decrease
        the size of the array.  If the size of an array is decreased, all objects
        in the array that become invalid as a result of the decrease are
        deleted.

        Note that the size of an array is different than its capacity.  The size
        indicates how many valid elements are stored in an array.  The capacity
        indicates how much the size of the array can be increased without
        allocated more memory.  At all times size <= capacity.

        :type aSize: int
        :param aSize: Desired size of the array.  The size must be greater than
            or equal to zero and less than or equal to the current size of the
            array.
        :rtype: boolean
        :return: True if the requested size change was carried out, false
            otherwise.
        """
        return _tools.SetMeasurements_setSize(self, aSize)

    def getSize(self):
        r"""
        Get the size of the array.

        :rtype: int
        :return: Size of the array.
        """
        return _tools.SetMeasurements_getSize(self)

    def getIndex(self, *args):
        r"""
        *Overload 1:*

        Get the index of an object.

        :type aObject: :py:class:`Measurement`
        :param aObject: Address of the object whose index is sought.
        :type aStartIndex: int, optional
        :param aStartIndex: Index at which to start searching.  If the object is
            not found at or following aStartIndex, the array is searched from
            its beginning.
        :rtype: int
        :return: Index of the object with the address aObject.  If no such object
            exists in the array, -1 is returned.

        |

        *Overload 2:*

        Get the index of an object by specifying its name.

        :type aName: string
        :param aName: Name of the object whose index is sought.
        :type aStartIndex: int, optional
        :param aStartIndex: Index at which to start searching.  If the object is
            not found at or following aStartIndex, the array is searched from
            its beginning.
        :rtype: int
        :return: Index of the object named aName.  If no such object exists in
            the array, -1 is returned.

        |

        *Overload 3:*

        Get the index of an object by specifying its name.

        :type aName: string
        :param aName: Name of the object whose index is sought.
        :param aStartIndex: Index at which to start searching.  If the object is
            not found at or following aStartIndex, the array is searched from
            its beginning.
        :rtype: int
        :return: Index of the object named aName.  If no such object exists in
            the array, -1 is returned.
        """
        return _tools.SetMeasurements_getIndex(self, *args)

    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        r"""Get names of groups containing a given object"""
        return _tools.SetMeasurements_getGroupNamesContaining(self, aObjectName, rGroupNames)

    def adoptAndAppend(self, aObject):
        r"""
        Append to the array, and adopt passed in pointer.  A copy is NOT made of the specified object.  If
        getMemoryOwner() is true, this Set takes over ownership of the object and
        deletes it when the Set itself is deleted.

        :type aObject: :py:class:`Measurement`
        :param aObject: Object to be appended.
        :rtype: boolean
        :return: True if the append was successful, false otherwise.
        """
        return _tools.SetMeasurements_adoptAndAppend(self, aObject)

    def cloneAndAppend(self, aObject):
        r"""
        cloneAndAppend creates a clone of the passed in object and appends the clone to the array.
        The original object is unaffected and is not associated with the Set. The clone is created
        using the method clone() available to OpenSim::Object

        :type aObject: :py:class:`Measurement`
        :param aObject: Object whose clone is to be appended.
        :rtype: boolean
        :return: True if the append was successful, false otherwise.
        """
        return _tools.SetMeasurements_cloneAndAppend(self, aObject)

    def insert(self, aIndex, aObject):
        r"""
        Insert an object into the array at a specified index.  A copy of the
        specified object is NOT made.  If getMemoryOwner() is true, this Set takes
        over ownership of the object and deletes it when the Set itself is deleted.

        This method is relatively computationally costly since many of the array
        elements may need to be shifted.

        :type aObject: :py:class:`Measurement`
        :param aObject: Object to be inserted.
        :type aIndex: int
        :param aIndex: Index at which to insert the new object.  All current elements
            from aIndex to the end of the array are shifted one place in the direction
            of the end of the array.  The specified index must be less than or
            equal to the size of the array.  Note that if aIndex is equal to the
            size of the array, the insertion is equivalent to an append.
        :rtype: boolean
        :return: True if the insertion was successful, false otherwise.
        """
        return _tools.SetMeasurements_insert(self, aIndex, aObject)

    def remove(self, *args):
        r"""
        *Overload 1:*

        Remove an object from the array at a specified index.
        If this set is set as the memory owner, the object is deleted when it
        is removed.

        This method is relatively computationally costly since many of the array
        elements may need to be shifted.

        :type aIndex: int
        :param aIndex: Index of the value to remove.  All elements from aIndex to
            the end of the array are shifted one place toward the beginning of
            the array.  If aIndex is less than 0 or greater than or equal to the
            current size of the array, no element is removed.
        :rtype: boolean
        :return: True if the removal was successful, false otherwise.

        |

        *Overload 2:*

        Remove an object from the array by specifying its address.
        The object is deleted when it is removed.

        This method is relatively computationally costly since many of the array
        elements may need to be shifted.

        :type aObject: :py:class:`Measurement`
        :param aObject: Pointer to the object to be removed.  If an object with the
            specified address is not found, no action is taken.
        :rtype: boolean
        :return: True if the removal was successful, false otherwise.
        """
        return _tools.SetMeasurements_remove(self, *args)

    def clearAndDestroy(self):
        r"""clearAndDestroy(SetMeasurements self)"""
        return _tools.SetMeasurements_clearAndDestroy(self)

    def set(self, aIndex, aObject, preserveGroups=False):
        r"""
        %Set the object at a specified index.  A copy of the object is NOT made.
        If getMemoryOwner() is true, this Set takes over ownership of the object and
        deletes it when the Set itself is deleted.

        :type aIndex: int
        :param aIndex: Index of the array element to be set.  aIndex must be
            greater than zero and less than or equal to the size of the array.  Note
            that if aIndex is equal to the size of the array, the set is equivalent
            to an append.
        :type aObject: :py:class:`Measurement`
        :param aObject: Object to be set.
        :type preserveGroups: boolean, optional
        :param preserveGroups: If true, the new object will be added to the groups
            that the object it replaces belonged to
        :rtype: boolean
        :return: True if the set was successful, false otherwise.
        """
        return _tools.SetMeasurements_set(self, aIndex, aObject, preserveGroups)

    def get(self, *args):
        r"""
        *Overload 1:*

        Get the value at a specified array index.

        If the index is negative or passed the end of the array, an exception
        is thrown.

        For faster execution, the array elements can be accessed through the
        overloaded operator[], which does no bounds checking.

        :type aIndex: int
        :param aIndex: Index of the desired array element.
        :rtype: :py:class:`Measurement`
        :return: Reference to the array element.
        :raises: Exception if (aIndex<0)||(aIndex>=_size) or if the pointer
            at aIndex is NULL.
        See also: operator[].

        |

        *Overload 2:*

        Get the first object that has a specified name.

        If the array doesn't contain an object of the specified name, an
        exception is thrown.

        :type aName: string
        :param aName: Name of the desired object.
        :rtype: :py:class:`Measurement`
        :return: Pointer to the object.
        :raises: Exception if no such object exists.
        See also: getIndex()
        """
        return _tools.SetMeasurements_get(self, *args)

    def contains(self, aName):
        r"""
        Get whether this Set contains any object with the specified name.

        :type aName: string
        :param aName: Name of the desired object.
        :rtype: boolean
        :return: true if the object exists
        """
        return _tools.SetMeasurements_contains(self, aName)

    def getNames(self, rNames):
        r"""
        Get names of objects in the set.

        :type rNames: OpenSim::Array< std::string >
        :param rNames: Array of names.  The names are appended to rNames, so it
            is permissible to send in an non-empty array; the names in the set
            will simply be appended to the array sent in.
        """
        return _tools.SetMeasurements_getNames(self, rNames)

    def getNumGroups(self):
        r"""Get the number of groups."""
        return _tools.SetMeasurements_getNumGroups(self)

    def addGroup(self, aGroupName):
        r"""Add an empty group to the set."""
        return _tools.SetMeasurements_addGroup(self, aGroupName)

    def removeGroup(self, aGroupName):
        r"""Remove a group from the set. Elements are not removed."""
        return _tools.SetMeasurements_removeGroup(self, aGroupName)

    def renameGroup(self, oldGroupName, newGroupName):
        r"""Rename a group."""
        return _tools.SetMeasurements_renameGroup(self, oldGroupName, newGroupName)

    def addObjectToGroup(self, aGroupName, aObjectName):
        r"""Add an object to a group."""
        return _tools.SetMeasurements_addObjectToGroup(self, aGroupName, aObjectName)

    def getGroupNames(self, rGroupNames):
        r"""Get names of all groups"""
        return _tools.SetMeasurements_getGroupNames(self, rGroupNames)

    def getGroup(self, *args):
        r"""
        *Overload 1:*

        Get a group by name.

        |

        *Overload 2:*

        Get a group by index.
        """
        return _tools.SetMeasurements_getGroup(self, *args)

    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1


# Register SetMeasurements in _tools:
_tools.SetMeasurements_swigregister(SetMeasurements)
class MeasurementSet(SetMeasurements):
    r"""
    A class for holding a set of measurements.

    Authors: Peter Loan
    Version: 1.0
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MeasurementSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.MeasurementSet_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MeasurementSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.MeasurementSet_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _tools.MeasurementSet_getClassName()

    def clone(self):
        r"""clone(MeasurementSet self) -> MeasurementSet"""
        return _tools.MeasurementSet_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MeasurementSet self) -> std::string const &"""
        return _tools.MeasurementSet_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(MeasurementSet self) -> MeasurementSet
        __init__(MeasurementSet self, MeasurementSet aSimmMeasurementSet) -> MeasurementSet

        Parameters
        ----------
        aSimmMeasurementSet: OpenSim::MeasurementSet const &

        """
        _tools.MeasurementSet_swiginit(self, _tools.new_MeasurementSet(*args))
    __swig_destroy__ = _tools.delete_MeasurementSet

    def adoptAndAppend(self, aMeasurement):
        aMeasurement._markAdopted()
        return super(MeasurementSet, self).adoptAndAppend(aMeasurement)


# Register MeasurementSet in _tools:
_tools.MeasurementSet_swigregister(MeasurementSet)
class GenericModelMaker(opensim.common.OpenSimObject):
    r"""
    A class implementing a set of parameters describing
    a generic musculoskeletal model.

    Author: Peter Loan
    Version: 1.0
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> GenericModelMaker

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.GenericModelMaker_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(GenericModelMaker self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.GenericModelMaker_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _tools.GenericModelMaker_getClassName()

    def clone(self):
        r"""clone(GenericModelMaker self) -> GenericModelMaker"""
        return _tools.GenericModelMaker_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(GenericModelMaker self) -> std::string const &"""
        return _tools.GenericModelMaker_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(GenericModelMaker self) -> GenericModelMaker
        __init__(GenericModelMaker self, GenericModelMaker aGenericModelMaker) -> GenericModelMaker

        Parameters
        ----------
        aGenericModelMaker: OpenSim::GenericModelMaker const &

        """
        _tools.GenericModelMaker_swiginit(self, _tools.new_GenericModelMaker(*args))
    __swig_destroy__ = _tools.delete_GenericModelMaker

    def copyData(self, aGenericModelMaker):
        r"""
        copyData(GenericModelMaker self, GenericModelMaker aGenericModelMaker)

        Parameters
        ----------
        aGenericModelMaker: OpenSim::GenericModelMaker const &

        """
        return _tools.GenericModelMaker_copyData(self, aGenericModelMaker)

    def processModel(self, *args):
        r"""
        processModel(GenericModelMaker self, std::string const & aPathToSubject="") -> Model

        Parameters
        ----------
        aPathToSubject: std::string const &

        """
        return _tools.GenericModelMaker_processModel(self, *args)

    @staticmethod
    def registerTypes():
        r"""registerTypes()"""
        return _tools.GenericModelMaker_registerTypes()

    def getModelFileName(self):
        r"""Get file name for generic model"""
        return _tools.GenericModelMaker_getModelFileName(self)

    def setModelFileName(self, aFileName):
        r"""
        setModelFileName(GenericModelMaker self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.GenericModelMaker_setModelFileName(self, aFileName)

    def getMarkerSetFileName(self):
        r"""getMarkerSetFileName(GenericModelMaker self) -> std::string const &"""
        return _tools.GenericModelMaker_getMarkerSetFileName(self)

    def setMarkerSetFileName(self, aFileName):
        r"""
        setMarkerSetFileName(GenericModelMaker self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.GenericModelMaker_setMarkerSetFileName(self, aFileName)

# Register GenericModelMaker in _tools:
_tools.GenericModelMaker_swigregister(GenericModelMaker)
class ModelScaler(opensim.common.OpenSimObject):
    r"""
    A class for scaling a model. The default method of scaling involves
    measuring distances between pairs of markers on the model and in a
    static pose to determine scale factors.

    Author: Peter Loan
    Version: 1.0
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ModelScaler

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.ModelScaler_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ModelScaler self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.ModelScaler_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _tools.ModelScaler_getClassName()

    def clone(self):
        r"""clone(ModelScaler self) -> ModelScaler"""
        return _tools.ModelScaler_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ModelScaler self) -> std::string const &"""
        return _tools.ModelScaler_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(ModelScaler self) -> ModelScaler
        __init__(ModelScaler self, ModelScaler aModelScaler) -> ModelScaler

        Parameters
        ----------
        aModelScaler: OpenSim::ModelScaler const &

        """
        _tools.ModelScaler_swiginit(self, _tools.new_ModelScaler(*args))
    __swig_destroy__ = _tools.delete_ModelScaler

    def copyData(self, aModelScaler):
        r"""
        copyData(ModelScaler self, ModelScaler aModelScaler)

        Parameters
        ----------
        aModelScaler: OpenSim::ModelScaler const &

        """
        return _tools.ModelScaler_copyData(self, aModelScaler)

    def processModel(self, *args):
        r"""
        processModel(ModelScaler self, Model aModel, std::string const & aPathToSubject="", double aFinalMass=-1.0) -> bool

        Parameters
        ----------
        aModel: OpenSim::Model *
        aPathToSubject: std::string const &
        aFinalMass: double

        """
        return _tools.ModelScaler_processModel(self, *args)

    @staticmethod
    def registerTypes():
        r"""registerTypes()"""
        return _tools.ModelScaler_registerTypes()

    def addMeasurement(self, aMeasurement):
        r"""add a measurement"""
        val = _tools.ModelScaler_addMeasurement(self, aMeasurement)

        aMeasurement._markAdopted()


        return val


    def addScale(self, aScale):
        r"""add a scale factor to current scaleSet"""
        val = _tools.ModelScaler_addScale(self, aScale)

        aScale._markAdopted()


        return val


    def getApply(self):
        r"""getApply(ModelScaler self) -> bool"""
        return _tools.ModelScaler_getApply(self)

    def setApply(self, aApply):
        r"""
        setApply(ModelScaler self, bool aApply)

        Parameters
        ----------
        aApply: bool

        """
        return _tools.ModelScaler_setApply(self, aApply)

    def getMeasurementSet(self):
        r"""getMeasurementSet(ModelScaler self) -> MeasurementSet"""
        return _tools.ModelScaler_getMeasurementSet(self)

    def setMeasurementSet(self, measurementSet):
        r"""
        setMeasurementSet(ModelScaler self, MeasurementSet measurementSet)

        Parameters
        ----------
        measurementSet: OpenSim::MeasurementSet &

        """
        return _tools.ModelScaler_setMeasurementSet(self, measurementSet)

    def getScaleSet(self):
        r"""getScaleSet(ModelScaler self) -> ScaleSet"""
        return _tools.ModelScaler_getScaleSet(self)

    def setScaleSetFile(self, aScaleSetFilename):
        r"""
        setScaleSetFile(ModelScaler self, std::string const & aScaleSetFilename)

        Parameters
        ----------
        aScaleSetFilename: std::string const &

        """
        return _tools.ModelScaler_setScaleSetFile(self, aScaleSetFilename)

    def getTimeRange(self):
        r"""getTimeRange(ModelScaler self) -> ArrayDouble"""
        return _tools.ModelScaler_getTimeRange(self)

    def setTimeRange(self, timeRange):
        r"""
        setTimeRange(ModelScaler self, ArrayDouble timeRange)

        Parameters
        ----------
        timeRange: OpenSim::Array< double >

        """
        return _tools.ModelScaler_setTimeRange(self, timeRange)

    def getPreserveMassDist(self):
        r"""getPreserveMassDist(ModelScaler self) -> bool"""
        return _tools.ModelScaler_getPreserveMassDist(self)

    def setPreserveMassDist(self, preserveMassDist):
        r"""
        setPreserveMassDist(ModelScaler self, bool preserveMassDist)

        Parameters
        ----------
        preserveMassDist: bool

        """
        return _tools.ModelScaler_setPreserveMassDist(self, preserveMassDist)

    def getScalingOrder(self):
        r"""getScalingOrder(ModelScaler self) -> ArrayStr"""
        return _tools.ModelScaler_getScalingOrder(self)

    def setScalingOrder(self, scalingOrder):
        r"""
        setScalingOrder(ModelScaler self, ArrayStr scalingOrder)

        Parameters
        ----------
        scalingOrder: OpenSim::Array< std::string > &

        """
        return _tools.ModelScaler_setScalingOrder(self, scalingOrder)

    def getMarkerFileName(self):
        r"""getMarkerFileName(ModelScaler self) -> std::string const &"""
        return _tools.ModelScaler_getMarkerFileName(self)

    def setMarkerFileName(self, aMarkerFileName):
        r"""
        setMarkerFileName(ModelScaler self, std::string const & aMarkerFileName)

        Parameters
        ----------
        aMarkerFileName: std::string const &

        """
        return _tools.ModelScaler_setMarkerFileName(self, aMarkerFileName)

    def getOutputModelFileName(self):
        r"""getOutputModelFileName(ModelScaler self) -> std::string const &"""
        return _tools.ModelScaler_getOutputModelFileName(self)

    def setOutputModelFileName(self, aOutputModelFileName):
        r"""
        setOutputModelFileName(ModelScaler self, std::string const & aOutputModelFileName)

        Parameters
        ----------
        aOutputModelFileName: std::string const &

        """
        return _tools.ModelScaler_setOutputModelFileName(self, aOutputModelFileName)

    def getOutputScaleFileName(self):
        r"""getOutputScaleFileName(ModelScaler self) -> std::string const &"""
        return _tools.ModelScaler_getOutputScaleFileName(self)

    def setOutputScaleFileName(self, aOutputScaleFileName):
        r"""
        setOutputScaleFileName(ModelScaler self, std::string const & aOutputScaleFileName)

        Parameters
        ----------
        aOutputScaleFileName: std::string const &

        """
        return _tools.ModelScaler_setOutputScaleFileName(self, aOutputScaleFileName)

    def setPrintResultFiles(self, aToWrite):
        r"""
        setPrintResultFiles(ModelScaler self, bool aToWrite)

        Parameters
        ----------
        aToWrite: bool

        """
        return _tools.ModelScaler_setPrintResultFiles(self, aToWrite)

    def computeMeasurementScaleFactor(self, s, aModel, aMarkerData, aMeasurement):
        r"""
        computeMeasurementScaleFactor(ModelScaler self, State s, Model aModel, MarkerData aMarkerData, Measurement aMeasurement) -> double

        Parameters
        ----------
        s: SimTK::State const &
        aModel: OpenSim::Model const &
        aMarkerData: OpenSim::MarkerData const &
        aMeasurement: OpenSim::Measurement const &

        """
        return _tools.ModelScaler_computeMeasurementScaleFactor(self, s, aModel, aMarkerData, aMeasurement)

# Register ModelScaler in _tools:
_tools.ModelScaler_swigregister(ModelScaler)
class MarkerPlacer(opensim.common.OpenSimObject):
    r"""
    A class implementing a set of parameters describing how to place markers
    on a model (presumably after it has been scaled to fit a subject).

    MarkerPlacer is bundled with ModelScaler and GenericModelMaker to
    form the ScaleTool

    Author: Peter Loan
    Version: 1.0
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MarkerPlacer

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.MarkerPlacer_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MarkerPlacer self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.MarkerPlacer_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _tools.MarkerPlacer_getClassName()

    def clone(self):
        r"""clone(MarkerPlacer self) -> MarkerPlacer"""
        return _tools.MarkerPlacer_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MarkerPlacer self) -> std::string const &"""
        return _tools.MarkerPlacer_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(MarkerPlacer self) -> MarkerPlacer
        __init__(MarkerPlacer self, MarkerPlacer aMarkerPlacementParams) -> MarkerPlacer

        Parameters
        ----------
        aMarkerPlacementParams: OpenSim::MarkerPlacer const &

        """
        _tools.MarkerPlacer_swiginit(self, _tools.new_MarkerPlacer(*args))
    __swig_destroy__ = _tools.delete_MarkerPlacer

    def copyData(self, aMarkerPlacementParams):
        r"""
        copyData(MarkerPlacer self, MarkerPlacer aMarkerPlacementParams)

        Parameters
        ----------
        aMarkerPlacementParams: OpenSim::MarkerPlacer const &

        """
        return _tools.MarkerPlacer_copyData(self, aMarkerPlacementParams)

    def processModel(self, *args):
        r"""
        processModel(MarkerPlacer self, Model aModel, std::string const & aPathToSubject="") -> bool

        Parameters
        ----------
        aModel: OpenSim::Model *
        aPathToSubject: std::string const &

        """
        return _tools.MarkerPlacer_processModel(self, *args)

    def getApply(self):
        r"""getApply(MarkerPlacer self) -> bool"""
        return _tools.MarkerPlacer_getApply(self)

    def setApply(self, aApply):
        r"""
        setApply(MarkerPlacer self, bool aApply)

        Parameters
        ----------
        aApply: bool

        """
        return _tools.MarkerPlacer_setApply(self, aApply)

    def getStaticPoseFileName(self):
        r"""getStaticPoseFileName(MarkerPlacer self) -> std::string const &"""
        return _tools.MarkerPlacer_getStaticPoseFileName(self)

    def setStaticPoseFileName(self, aFileName):
        r"""
        setStaticPoseFileName(MarkerPlacer self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.MarkerPlacer_setStaticPoseFileName(self, aFileName)

    def getTimeRange(self):
        r"""getTimeRange(MarkerPlacer self) -> ArrayDouble"""
        return _tools.MarkerPlacer_getTimeRange(self)

    def setTimeRange(self, timeRange):
        r"""
        setTimeRange(MarkerPlacer self, ArrayDouble timeRange)

        Parameters
        ----------
        timeRange: OpenSim::Array< double > const &

        """
        return _tools.MarkerPlacer_setTimeRange(self, timeRange)

    def getIKTaskSet(self):
        r"""getIKTaskSet(MarkerPlacer self) -> IKTaskSet"""
        return _tools.MarkerPlacer_getIKTaskSet(self)

    def getCoordinateFileName(self):
        r"""getCoordinateFileName(MarkerPlacer self) -> std::string const &"""
        return _tools.MarkerPlacer_getCoordinateFileName(self)

    def setCoordinateFileName(self, aCoordinateFileName):
        r"""
        setCoordinateFileName(MarkerPlacer self, std::string const & aCoordinateFileName)

        Parameters
        ----------
        aCoordinateFileName: std::string const &

        """
        return _tools.MarkerPlacer_setCoordinateFileName(self, aCoordinateFileName)

    def getMarkerFileName(self):
        r"""getMarkerFileName(MarkerPlacer self) -> std::string const &"""
        return _tools.MarkerPlacer_getMarkerFileName(self)

    def setMarkerFileName(self, aMarkerFileName):
        r"""
        setMarkerFileName(MarkerPlacer self, std::string const & aMarkerFileName)

        Parameters
        ----------
        aMarkerFileName: std::string const &

        """
        return _tools.MarkerPlacer_setMarkerFileName(self, aMarkerFileName)

    def getMaxMarkerMovement(self):
        r"""getMaxMarkerMovement(MarkerPlacer self) -> double"""
        return _tools.MarkerPlacer_getMaxMarkerMovement(self)

    def setMaxMarkerMovement(self, aMaxMarkerMovement):
        r"""
        setMaxMarkerMovement(MarkerPlacer self, double aMaxMarkerMovement)

        Parameters
        ----------
        aMaxMarkerMovement: double

        """
        return _tools.MarkerPlacer_setMaxMarkerMovement(self, aMaxMarkerMovement)

    def getOutputModelFileName(self):
        r"""getOutputModelFileName(MarkerPlacer self) -> std::string const &"""
        return _tools.MarkerPlacer_getOutputModelFileName(self)

    def setOutputModelFileName(self, aOutputModelFileName):
        r"""
        setOutputModelFileName(MarkerPlacer self, std::string const & aOutputModelFileName)

        Parameters
        ----------
        aOutputModelFileName: std::string const &

        """
        return _tools.MarkerPlacer_setOutputModelFileName(self, aOutputModelFileName)

    def getOutputMarkerFileName(self):
        r"""getOutputMarkerFileName(MarkerPlacer self) -> std::string const &"""
        return _tools.MarkerPlacer_getOutputMarkerFileName(self)

    def setOutputMarkerFileName(self, outputMarkerFileName):
        r"""
        setOutputMarkerFileName(MarkerPlacer self, std::string const & outputMarkerFileName)

        Parameters
        ----------
        outputMarkerFileName: std::string const &

        """
        return _tools.MarkerPlacer_setOutputMarkerFileName(self, outputMarkerFileName)

    def getOutputMotionFileName(self):
        r"""getOutputMotionFileName(MarkerPlacer self) -> std::string const &"""
        return _tools.MarkerPlacer_getOutputMotionFileName(self)

    def setOutputMotionFileName(self, outputMotionFileName):
        r"""
        setOutputMotionFileName(MarkerPlacer self, std::string const & outputMotionFileName)

        Parameters
        ----------
        outputMotionFileName: std::string const &

        """
        return _tools.MarkerPlacer_setOutputMotionFileName(self, outputMotionFileName)

    def setPrintResultFiles(self, aToWrite):
        r"""
        setPrintResultFiles(MarkerPlacer self, bool aToWrite)

        Parameters
        ----------
        aToWrite: bool

        """
        return _tools.MarkerPlacer_setPrintResultFiles(self, aToWrite)

    def getMoveModelMarkers(self):
        r"""getMoveModelMarkers(MarkerPlacer self) -> bool"""
        return _tools.MarkerPlacer_getMoveModelMarkers(self)

    def setMoveModelMarkers(self, aMove):
        r"""
        setMoveModelMarkers(MarkerPlacer self, bool aMove)

        Parameters
        ----------
        aMove: bool

        """
        return _tools.MarkerPlacer_setMoveModelMarkers(self, aMove)

    def getOutputStorage(self):
        r"""getOutputStorage(MarkerPlacer self) -> Storage"""
        return _tools.MarkerPlacer_getOutputStorage(self)

# Register MarkerPlacer in _tools:
_tools.MarkerPlacer_swigregister(MarkerPlacer)
class ScaleTool(opensim.common.OpenSimObject):
    r"""
    A class implementing a set of parameters describing how to scale a model
    to fit a subject, place markers on it, and do IK on one or more motion
    trials.

    Author: Peter Loan
    Version: 1.0
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ScaleTool

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.ScaleTool_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ScaleTool self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.ScaleTool_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _tools.ScaleTool_getClassName()

    def clone(self):
        r"""clone(ScaleTool self) -> ScaleTool"""
        return _tools.ScaleTool_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ScaleTool self) -> std::string const &"""
        return _tools.ScaleTool_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(ScaleTool self) -> ScaleTool
        __init__(ScaleTool self, std::string const & aFileName) -> ScaleTool

        Parameters
        ----------
        aFileName: std::string const &

        __init__(ScaleTool self, ScaleTool aSubject) -> ScaleTool

        Parameters
        ----------
        aSubject: OpenSim::ScaleTool const &

        """
        _tools.ScaleTool_swiginit(self, _tools.new_ScaleTool(*args))
    __swig_destroy__ = _tools.delete_ScaleTool

    def copyData(self, aSubject):
        r"""
        copyData(ScaleTool self, ScaleTool aSubject)

        Parameters
        ----------
        aSubject: OpenSim::ScaleTool const &

        """
        return _tools.ScaleTool_copyData(self, aSubject)

    def createModel(self):
        r"""createModel(ScaleTool self) -> Model"""
        return _tools.ScaleTool_createModel(self)

    def getGenericModelMaker(self):
        r"""getGenericModelMaker(ScaleTool self) -> GenericModelMaker"""
        return _tools.ScaleTool_getGenericModelMaker(self)

    def getModelScaler(self):
        r"""getModelScaler(ScaleTool self) -> ModelScaler"""
        return _tools.ScaleTool_getModelScaler(self)

    def getMarkerPlacer(self):
        r"""getMarkerPlacer(ScaleTool self) -> MarkerPlacer"""
        return _tools.ScaleTool_getMarkerPlacer(self)

    def run(self):
        r"""
         Run the scale tool. This first runs the ModelScaler, then runs the
        MarkerPlacer. This is the method called by the command line `scale`
        executable.
        :rtype: boolean
        :return: whether or not the scale procedure was successful.
        """
        return _tools.ScaleTool_run(self)

    def isDefaultGenericModelMaker(self):
        r"""isDefaultGenericModelMaker(ScaleTool self) -> bool"""
        return _tools.ScaleTool_isDefaultGenericModelMaker(self)

    def isDefaultModelScaler(self):
        r"""isDefaultModelScaler(ScaleTool self) -> bool"""
        return _tools.ScaleTool_isDefaultModelScaler(self)

    def isDefaultMarkerPlacer(self):
        r"""isDefaultMarkerPlacer(ScaleTool self) -> bool"""
        return _tools.ScaleTool_isDefaultMarkerPlacer(self)

    @staticmethod
    def registerTypes():
        r"""registerTypes()"""
        return _tools.ScaleTool_registerTypes()

    def getSubjectMass(self):
        r""" Accessor methods to obtain model attributes"""
        return _tools.ScaleTool_getSubjectMass(self)

    def getSubjectAge(self):
        r"""getSubjectAge(ScaleTool self) -> double"""
        return _tools.ScaleTool_getSubjectAge(self)

    def getSubjectHeight(self):
        r"""getSubjectHeight(ScaleTool self) -> double"""
        return _tools.ScaleTool_getSubjectHeight(self)

    def setSubjectMass(self, mass):
        r"""
        setSubjectMass(ScaleTool self, double mass)

        Parameters
        ----------
        mass: double

        """
        return _tools.ScaleTool_setSubjectMass(self, mass)

    def setSubjectAge(self, age):
        r"""
        setSubjectAge(ScaleTool self, double age)

        Parameters
        ----------
        age: double

        """
        return _tools.ScaleTool_setSubjectAge(self, age)

    def setSubjectHeight(self, height):
        r"""
        setSubjectHeight(ScaleTool self, double height)

        Parameters
        ----------
        height: double

        """
        return _tools.ScaleTool_setSubjectHeight(self, height)

    def getPathToSubject(self):
        r"""
        Accessor methods to set and get path to Subject. This is needed
        since all file names referred to in the subject file are relative
        to the subject file.
        """
        return _tools.ScaleTool_getPathToSubject(self)

    def setPathToSubject(self, aPath):
        r"""
        setPathToSubject(ScaleTool self, std::string const & aPath)

        Parameters
        ----------
        aPath: std::string const &

        """
        return _tools.ScaleTool_setPathToSubject(self, aPath)

    def setPrintResultFiles(self, aToWrite):
        r"""
        setPrintResultFiles(ScaleTool self, bool aToWrite)

        Parameters
        ----------
        aToWrite: bool

        """
        return _tools.ScaleTool_setPrintResultFiles(self, aToWrite)

# Register ScaleTool in _tools:
_tools.ScaleTool_swigregister(ScaleTool)
class Tool(opensim.common.OpenSimObject):
    r"""
    A Tool is an OpenSim abstraction that encapsulates an analysis or series of
    modeling and analysis steps. Its primary duty is to provide an interface
    for use by the GUI or as a standalone command line executable. It includes
    common methods for invoking the tool and performing routine I/O.


    Author: Ajay Seth
    Version: 1.0
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> Tool

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.Tool_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(Tool self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.Tool_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _tools.Tool_getClassName()

    def clone(self):
        r"""clone(Tool self) -> Tool"""
        return _tools.Tool_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(Tool self) -> std::string const &"""
        return _tools.Tool_getConcreteClassName(self)

    def copyProperty_results_directory(self, source):
        r"""
        copyProperty_results_directory(Tool self, Tool source)

        Parameters
        ----------
        source: OpenSim::Tool::Self const &

        """
        return _tools.Tool_copyProperty_results_directory(self, source)

    def append_results_directory(self, value):
        r"""
        append_results_directory(Tool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _tools.Tool_append_results_directory(self, value)

    def constructProperty_results_directory(self, initValue):
        r"""
        constructProperty_results_directory(Tool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _tools.Tool_constructProperty_results_directory(self, initValue)

    def get_results_directory(self, *args):
        r"""
        get_results_directory(Tool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_results_directory(Tool self) -> std::string const &
        """
        return _tools.Tool_get_results_directory(self, *args)

    def upd_results_directory(self, *args):
        r"""
        upd_results_directory(Tool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_results_directory(Tool self) -> std::string &
        """
        return _tools.Tool_upd_results_directory(self, *args)

    def set_results_directory(self, *args):
        r"""
        set_results_directory(Tool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_results_directory(Tool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _tools.Tool_set_results_directory(self, *args)
    __swig_destroy__ = _tools.delete_Tool

    def run(self):
        r"""
        The run() method of a Tool embodies what would be the main() routine
               for a standalone program.  Therefore, any OpenSim main program can
               become a Tool executable from the GUI by making it a run() method for
               a new Tool.

               It is expected that the run() method be composed of a sequence of calls
               to underlying computational and reporting objects and should
        """
        return _tools.Tool_run(self)

    def getResultsDir(self):
        r"""Get/set Results Directory, will replace with Property accessors eventually"""
        return _tools.Tool_getResultsDir(self)

    def setResultsDir(self, aString):
        r"""
        setResultsDir(Tool self, std::string const & aString)

        Parameters
        ----------
        aString: std::string const &

        """
        return _tools.Tool_setResultsDir(self, aString)

# Register Tool in _tools:
_tools.Tool_swigregister(Tool)
class DynamicsTool(Tool):
    r"""
    An abstract Tool for defining tools for performing a dynamics analysis
    with a given model. For example, InverseDynamics and ForwardDynamics Tools
    derive from DynamicsTool, which provides convenient method for performing
    and dynamics analysis over or to produce a trajectory in time.

    Author: Ajay Seth
    Version: 1.0
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> DynamicsTool

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.DynamicsTool_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(DynamicsTool self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.DynamicsTool_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _tools.DynamicsTool_getClassName()

    def clone(self):
        r"""clone(DynamicsTool self) -> DynamicsTool"""
        return _tools.DynamicsTool_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(DynamicsTool self) -> std::string const &"""
        return _tools.DynamicsTool_getConcreteClassName(self)
    __swig_destroy__ = _tools.delete_DynamicsTool

    def disableModelForces(self, model, s, forcesByNameOrGroup):
        r""" Modify model to exclude specified forces by disabling those identified by name or group"""
        return _tools.DynamicsTool_disableModelForces(self, model, s, forcesByNameOrGroup)

    def getExternalLoads(self):
        r"""getExternalLoads(DynamicsTool self) -> ExternalLoads"""
        return _tools.DynamicsTool_getExternalLoads(self)

    def updExternalLoads(self):
        r"""updExternalLoads(DynamicsTool self) -> ExternalLoads"""
        return _tools.DynamicsTool_updExternalLoads(self)

    def getExternalLoadsFileName(self):
        r"""getExternalLoadsFileName(DynamicsTool self) -> std::string const &"""
        return _tools.DynamicsTool_getExternalLoadsFileName(self)

    def setExternalLoadsFileName(self, aFileName):
        r"""
        setExternalLoadsFileName(DynamicsTool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.DynamicsTool_setExternalLoadsFileName(self, aFileName)

    def setModelFileName(self, aFileName):
        r"""
        setModelFileName(DynamicsTool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.DynamicsTool_setModelFileName(self, aFileName)

    def getModelFileName(self):
        r"""getModelFileName(DynamicsTool self) -> std::string"""
        return _tools.DynamicsTool_getModelFileName(self)

    def setStartTime(self, d):
        r"""
        setStartTime(DynamicsTool self, double d)

        Parameters
        ----------
        d: double

        """
        return _tools.DynamicsTool_setStartTime(self, d)

    def getStartTime(self):
        r"""getStartTime(DynamicsTool self) -> double"""
        return _tools.DynamicsTool_getStartTime(self)

    def setEndTime(self, d):
        r"""
        setEndTime(DynamicsTool self, double d)

        Parameters
        ----------
        d: double

        """
        return _tools.DynamicsTool_setEndTime(self, d)

    def getEndTime(self):
        r"""getEndTime(DynamicsTool self) -> double"""
        return _tools.DynamicsTool_getEndTime(self)

    def setModel(self, aModel):
        r"""
        setModel(DynamicsTool self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _tools.DynamicsTool_setModel(self, aModel)

    def setExcludedForces(self, aExcluded):
        r"""
        setExcludedForces(DynamicsTool self, ArrayStr aExcluded)

        Parameters
        ----------
        aExcluded: OpenSim::Array< std::string > const &

        """
        return _tools.DynamicsTool_setExcludedForces(self, aExcluded)

    def createExternalLoads(self, externalLoadsFileName, model):
        r"""
        createExternalLoads(DynamicsTool self, std::string const & externalLoadsFileName, Model model) -> bool

        Parameters
        ----------
        externalLoadsFileName: std::string const &
        model: OpenSim::Model &

        """
        return _tools.DynamicsTool_createExternalLoads(self, externalLoadsFileName, model)

    def modelHasExternalLoads(self):
        r"""modelHasExternalLoads(DynamicsTool self) -> bool"""
        return _tools.DynamicsTool_modelHasExternalLoads(self)

    def removeExternalLoadsFromModel(self):
        r"""removeExternalLoadsFromModel(DynamicsTool self)"""
        return _tools.DynamicsTool_removeExternalLoadsFromModel(self)

    def run(self):
        r"""run(DynamicsTool self) -> bool"""
        return _tools.DynamicsTool_run(self)

# Register DynamicsTool in _tools:
_tools.DynamicsTool_swigregister(DynamicsTool)
class InverseDynamicsTool(DynamicsTool):
    r"""
    A Tool that performs an Inverse Dynamics analysis with a given model.
    Inverse Dynamics is the solution for the generalized-coordinate forces that
    generate given generalized-coordinate accelerations at a given state.
    This Tool determines the state from provided coordinate trajectories as
    functions as that are twice differentiable to estimate velocities and
    accelerations.

    As an additional service, the InverseDynamicsTool can provide an equivalent
    body force (torque and force) applied to the joint frame. Since generalized
    forces include scaling (due to units conversion as well as coupling between
    translations and rotations, for example) they are not necessarily joint torques
    or forces.  OpenSim employs a pseudo inverse to find the smallest applied
    torque and/or force that will generate the equivalent generalized force.

    Author: Ajay Seth
    Version: 1.0
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> InverseDynamicsTool

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.InverseDynamicsTool_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(InverseDynamicsTool self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.InverseDynamicsTool_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _tools.InverseDynamicsTool_getClassName()

    def clone(self):
        r"""clone(InverseDynamicsTool self) -> InverseDynamicsTool"""
        return _tools.InverseDynamicsTool_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(InverseDynamicsTool self) -> std::string const &"""
        return _tools.InverseDynamicsTool_getConcreteClassName(self)
    __swig_destroy__ = _tools.delete_InverseDynamicsTool

    def __init__(self, *args):
        r"""
        __init__(InverseDynamicsTool self) -> InverseDynamicsTool
        __init__(InverseDynamicsTool self, std::string const & aFileName, bool aLoadModel=True) -> InverseDynamicsTool

        Parameters
        ----------
        aFileName: std::string const &
        aLoadModel: bool

        __init__(InverseDynamicsTool self, InverseDynamicsTool aObject) -> InverseDynamicsTool

        Parameters
        ----------
        aObject: OpenSim::InverseDynamicsTool const &

        """
        _tools.InverseDynamicsTool_swiginit(self, _tools.new_InverseDynamicsTool(*args))

    @staticmethod
    def registerTypes():
        r"""registerTypes()"""
        return _tools.InverseDynamicsTool_registerTypes()

    def updateFromXMLNode(self, aNode, versionNumber=-1):
        r"""
        updateFromXMLNode(InverseDynamicsTool self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &
        versionNumber: int

        """
        return _tools.InverseDynamicsTool_updateFromXMLNode(self, aNode, versionNumber)

    def setCoordinateValues(self, aStorage):
        r"""
        setCoordinateValues(InverseDynamicsTool self, Storage aStorage)

        Parameters
        ----------
        aStorage: OpenSim::Storage const &

        """
        return _tools.InverseDynamicsTool_setCoordinateValues(self, aStorage)

    def getOutputGenForceFileName(self):
        r"""get/set the name of the file to be used as output from the tool"""
        return _tools.InverseDynamicsTool_getOutputGenForceFileName(self)

    def setOutputGenForceFileName(self, desiredOutputFileName):
        r"""
        setOutputGenForceFileName(InverseDynamicsTool self, std::string const & desiredOutputFileName)

        Parameters
        ----------
        desiredOutputFileName: std::string const &

        """
        return _tools.InverseDynamicsTool_setOutputGenForceFileName(self, desiredOutputFileName)

    def getCoordinatesFileName(self):
        r"""get/set the name of the file containing coordinates"""
        return _tools.InverseDynamicsTool_getCoordinatesFileName(self)

    def setCoordinatesFileName(self, aCoordinateFile):
        r"""
        %Set the name of the coordinatesFile to be used. This call resets
            _coordinateValues as well.
        """
        return _tools.InverseDynamicsTool_setCoordinatesFileName(self, aCoordinateFile)

    def getLowpassCutoffFrequency(self):
        r"""getLowpassCutoffFrequency(InverseDynamicsTool self) -> double"""
        return _tools.InverseDynamicsTool_getLowpassCutoffFrequency(self)

    def setLowpassCutoffFrequency(self, aFrequency):
        r"""
        setLowpassCutoffFrequency(InverseDynamicsTool self, double aFrequency)

        Parameters
        ----------
        aFrequency: double

        """
        return _tools.InverseDynamicsTool_setLowpassCutoffFrequency(self, aFrequency)

    def run(self):
        r"""run(InverseDynamicsTool self) -> bool"""
        return _tools.InverseDynamicsTool_run(self)

# Register InverseDynamicsTool in _tools:
_tools.InverseDynamicsTool_swigregister(InverseDynamicsTool)
class ForwardTool(opensim.simulation.AbstractTool):
    r"""
    A concrete tool for performing forward dynamics simulations

    Author: Frank C. Anderson
    Version: 1.0
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ForwardTool

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.ForwardTool_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ForwardTool self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.ForwardTool_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _tools.ForwardTool_getClassName()

    def clone(self):
        r"""clone(ForwardTool self) -> ForwardTool"""
        return _tools.ForwardTool_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ForwardTool self) -> std::string const &"""
        return _tools.ForwardTool_getConcreteClassName(self)
    __swig_destroy__ = _tools.delete_ForwardTool

    def __init__(self, *args):
        r"""
        __init__(ForwardTool self) -> ForwardTool
        __init__(ForwardTool self, std::string const & aFileName, bool aUpdateFromXMLNode=True, bool aLoadModel=True) -> ForwardTool

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool
        aLoadModel: bool

        __init__(ForwardTool self, ForwardTool aObject) -> ForwardTool

        Parameters
        ----------
        aObject: OpenSim::ForwardTool const &

        """
        _tools.ForwardTool_swiginit(self, _tools.new_ForwardTool(*args))

    def updateFromXMLNode(self, aNode, versionNumber=-1):
        r"""
        updateFromXMLNode(ForwardTool self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &
        versionNumber: int

        """
        return _tools.ForwardTool_updateFromXMLNode(self, aNode, versionNumber)

    def setManager(self, m):
        r"""
        setManager(ForwardTool self, Manager m)

        Parameters
        ----------
        m: OpenSim::Manager &

        """
        return _tools.ForwardTool_setManager(self, m)

    def getManager(self):
        r"""getManager(ForwardTool self) -> Manager"""
        return _tools.ForwardTool_getManager(self)

    def getStatesFileName(self):
        r"""getStatesFileName(ForwardTool self) -> std::string const &"""
        return _tools.ForwardTool_getStatesFileName(self)

    def setStatesFileName(self, aFileName):
        r"""
        setStatesFileName(ForwardTool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.ForwardTool_setStatesFileName(self, aFileName)

    def getUseSpecifiedDt(self):
        r"""getUseSpecifiedDt(ForwardTool self) -> bool"""
        return _tools.ForwardTool_getUseSpecifiedDt(self)

    def setUseSpecifiedDt(self, aUseSpecifiedDt):
        r"""
        setUseSpecifiedDt(ForwardTool self, bool aUseSpecifiedDt)

        Parameters
        ----------
        aUseSpecifiedDt: bool

        """
        return _tools.ForwardTool_setUseSpecifiedDt(self, aUseSpecifiedDt)

    def setPrintResultFiles(self, aToWrite):
        r"""
        setPrintResultFiles(ForwardTool self, bool aToWrite)

        Parameters
        ----------
        aToWrite: bool

        """
        return _tools.ForwardTool_setPrintResultFiles(self, aToWrite)

    def run(self):
        r"""run(ForwardTool self) -> bool"""
        return _tools.ForwardTool_run(self)

    def printResults(self):
        r""" **(Deprecated)** Use setPrintResultFiles(true) and run() instead."""
        return _tools.ForwardTool_printResults(self)

    @staticmethod
    def Step(t, t0, t1):
        r"""
        Step(double t, double t0, double t1) -> double

        Parameters
        ----------
        t: double
        t0: double
        t1: double

        """
        return _tools.ForwardTool_Step(t, t0, t1)

    @staticmethod
    def SigmaUp(tau, to, t):
        r"""
        SigmaUp(double tau, double to, double t) -> double

        Parameters
        ----------
        tau: double
        to: double
        t: double

        """
        return _tools.ForwardTool_SigmaUp(tau, to, t)

    @staticmethod
    def SigmaDn(tau, to, t):
        r"""
        SigmaDn(double tau, double to, double t) -> double

        Parameters
        ----------
        tau: double
        to: double
        t: double

        """
        return _tools.ForwardTool_SigmaDn(tau, to, t)

    def loadStatesStorage(self, statesFileName, rYStore):
        r"""
        loadStatesStorage(ForwardTool self, std::string & statesFileName, OpenSim::Storage *& rYStore)

        Parameters
        ----------
        statesFileName: std::string &
        rYStore: OpenSim::Storage *&

        """
        return _tools.ForwardTool_loadStatesStorage(self, statesFileName, rYStore)

    def getParsingLog(self):
        r"""getParsingLog(ForwardTool self) -> std::string const &"""
        return _tools.ForwardTool_getParsingLog(self)

# Register ForwardTool in _tools:
_tools.ForwardTool_swigregister(ForwardTool)
class TrackingTask(opensim.common.OpenSimObject):
    r"""
    An abstract base class for specifying a target for a tracking problem.

    Author: Ayman Habib & Ajay Seth
    Version: 1.0
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> TrackingTask

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.TrackingTask_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(TrackingTask self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.TrackingTask_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _tools.TrackingTask_getClassName()

    def clone(self):
        r"""clone(TrackingTask self) -> TrackingTask"""
        return _tools.TrackingTask_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(TrackingTask self) -> std::string const &"""
        return _tools.TrackingTask_getConcreteClassName(self)
    __swig_destroy__ = _tools.delete_TrackingTask

    def setModel(self, aModel):
        r"""
        setModel(TrackingTask self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _tools.TrackingTask_setModel(self, aModel)

    def getModel(self):
        r"""getModel(TrackingTask self) -> Model"""
        return _tools.TrackingTask_getModel(self)

    def setOn(self, aTrueFalse):
        r"""
        setOn(TrackingTask self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _tools.TrackingTask_setOn(self, aTrueFalse)

    def getOn(self):
        r"""getOn(TrackingTask self) -> bool"""
        return _tools.TrackingTask_getOn(self)

    def setWeight(self, aW0, aW1=0.0, aW2=0.0):
        r"""
        setWeight(TrackingTask self, double aW0, double aW1=0.0, double aW2=0.0)

        Parameters
        ----------
        aW0: double
        aW1: double
        aW2: double

        """
        return _tools.TrackingTask_setWeight(self, aW0, aW1, aW2)

    def setWeights(self, aWeights):
        r"""
        setWeights(TrackingTask self, ArrayDouble aWeights)

        Parameters
        ----------
        aWeights: OpenSim::Array< double > const &

        """
        return _tools.TrackingTask_setWeights(self, aWeights)

    def getWeight(self, aWhich):
        r"""
        getWeight(TrackingTask self, int aWhich) -> double

        Parameters
        ----------
        aWhich: int

        """
        return _tools.TrackingTask_getWeight(self, aWhich)

    def getWeights(self):
        r"""getWeights(TrackingTask self) -> ArrayDouble"""
        return _tools.TrackingTask_getWeights(self)

    def getNumTaskFunctions(self):
        r"""getNumTaskFunctions(TrackingTask self) -> int"""
        return _tools.TrackingTask_getNumTaskFunctions(self)

    def setTaskFunctions(self, aF0, aF1=None, aF2=None):
        r"""
        setTaskFunctions(TrackingTask self, Function aF0, Function aF1=None, Function aF2=None)

        Parameters
        ----------
        aF0: OpenSim::Function *
        aF1: OpenSim::Function *
        aF2: OpenSim::Function *

        """
        return _tools.TrackingTask_setTaskFunctions(self, aF0, aF1, aF2)

# Register TrackingTask in _tools:
_tools.TrackingTask_swigregister(TrackingTask)
class CMC_Task(TrackingTask):
    r"""
    An abstract base class for specifying a task objective for
    a dynamic simulation.  This class supports joint, point, and orientation
    task objectives.  Specific implementations for these kinds of control
    tasks should inherit from this class.

    Author: Frank C. Anderson
    Version: 1.0
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> CMC_Task

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.CMC_Task_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(CMC_Task self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.CMC_Task_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _tools.CMC_Task_getClassName()

    def clone(self):
        r"""clone(CMC_Task self) -> CMC_Task"""
        return _tools.CMC_Task_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(CMC_Task self) -> std::string const &"""
        return _tools.CMC_Task_getConcreteClassName(self)
    __swig_destroy__ = _tools.delete_CMC_Task

    def setWRTBodyName(self, aBodyName):
        r"""
        setWRTBodyName(CMC_Task self, std::string aBodyName)

        Parameters
        ----------
        aBodyName: std::string

        """
        return _tools.CMC_Task_setWRTBodyName(self, aBodyName)

    def getWRTBodyName(self):
        r"""getWRTBodyName(CMC_Task self) -> std::string"""
        return _tools.CMC_Task_getWRTBodyName(self)

    def setExpressBodyName(self, aBodyName):
        r"""
        setExpressBodyName(CMC_Task self, std::string aBodyName)

        Parameters
        ----------
        aBodyName: std::string

        """
        return _tools.CMC_Task_setExpressBodyName(self, aBodyName)

    def getExpressBodyName(self):
        r"""getExpressBodyName(CMC_Task self) -> std::string"""
        return _tools.CMC_Task_getExpressBodyName(self)

    def setActive(self, a0, a1=False, a2=False):
        r"""
        setActive(CMC_Task self, bool a0, bool a1=False, bool a2=False)

        Parameters
        ----------
        a0: bool
        a1: bool
        a2: bool

        """
        return _tools.CMC_Task_setActive(self, a0, a1, a2)

    def getActive(self, aWhich):
        r"""
        getActive(CMC_Task self, int aWhich) -> bool

        Parameters
        ----------
        aWhich: int

        """
        return _tools.CMC_Task_getActive(self, aWhich)

    def setWeight(self, aW0, aW1=0.0, aW2=0.0):
        r"""
        setWeight(CMC_Task self, double aW0, double aW1=0.0, double aW2=0.0)

        Parameters
        ----------
        aW0: double
        aW1: double
        aW2: double

        """
        return _tools.CMC_Task_setWeight(self, aW0, aW1, aW2)

    def getWeight(self, aWhich):
        r"""
        getWeight(CMC_Task self, int aWhich) -> double

        Parameters
        ----------
        aWhich: int

        """
        return _tools.CMC_Task_getWeight(self, aWhich)

    def setKP(self, aK0, aK1=0.0, aK2=0.0):
        r"""
        setKP(CMC_Task self, double aK0, double aK1=0.0, double aK2=0.0)

        Parameters
        ----------
        aK0: double
        aK1: double
        aK2: double

        """
        return _tools.CMC_Task_setKP(self, aK0, aK1, aK2)

    def getKP(self, aWhich):
        r"""
        getKP(CMC_Task self, int aWhich) -> double

        Parameters
        ----------
        aWhich: int

        """
        return _tools.CMC_Task_getKP(self, aWhich)

    def setKV(self, aK0, aK1=0.0, aK2=0.0):
        r"""
        setKV(CMC_Task self, double aK0, double aK1=0.0, double aK2=0.0)

        Parameters
        ----------
        aK0: double
        aK1: double
        aK2: double

        """
        return _tools.CMC_Task_setKV(self, aK0, aK1, aK2)

    def getKV(self, aWhich):
        r"""
        getKV(CMC_Task self, int aWhich) -> double

        Parameters
        ----------
        aWhich: int

        """
        return _tools.CMC_Task_getKV(self, aWhich)

    def setKA(self, aK0, aK1=0.0, aK2=0.0):
        r"""
        setKA(CMC_Task self, double aK0, double aK1=0.0, double aK2=0.0)

        Parameters
        ----------
        aK0: double
        aK1: double
        aK2: double

        """
        return _tools.CMC_Task_setKA(self, aK0, aK1, aK2)

    def getKA(self, aWhich):
        r"""
        getKA(CMC_Task self, int aWhich) -> double

        Parameters
        ----------
        aWhich: int

        """
        return _tools.CMC_Task_getKA(self, aWhich)

    def setDirection_0(self, aR):
        r"""
        setDirection_0(CMC_Task self, Vec3 aR)

        Parameters
        ----------
        aR: SimTK::Vec3 const &

        """
        return _tools.CMC_Task_setDirection_0(self, aR)

    def getDirection_0(self, rR):
        r"""
        getDirection_0(CMC_Task self, Vec3 rR)

        Parameters
        ----------
        rR: SimTK::Vec3 &

        """
        return _tools.CMC_Task_getDirection_0(self, rR)

    def setDirection_1(self, aR):
        r"""
        setDirection_1(CMC_Task self, Vec3 aR)

        Parameters
        ----------
        aR: SimTK::Vec3 const &

        """
        return _tools.CMC_Task_setDirection_1(self, aR)

    def getDirection_1(self, rR):
        r"""
        getDirection_1(CMC_Task self, Vec3 rR)

        Parameters
        ----------
        rR: SimTK::Vec3 &

        """
        return _tools.CMC_Task_getDirection_1(self, rR)

    def setDirection_2(self, aR):
        r"""
        setDirection_2(CMC_Task self, Vec3 aR)

        Parameters
        ----------
        aR: SimTK::Vec3 const &

        """
        return _tools.CMC_Task_setDirection_2(self, aR)

    def getDirection_2(self, rR):
        r"""
        getDirection_2(CMC_Task self, Vec3 rR)

        Parameters
        ----------
        rR: SimTK::Vec3 &

        """
        return _tools.CMC_Task_getDirection_2(self, rR)

    def getTaskFunction(self, aWhich):
        r"""
        getTaskFunction(CMC_Task self, int aWhich) -> Function

        Parameters
        ----------
        aWhich: int

        """
        return _tools.CMC_Task_getTaskFunction(self, aWhich)

    def setTaskFunctionsForVelocity(self, aF0, aF1=None, aF2=None):
        r"""
        setTaskFunctionsForVelocity(CMC_Task self, Function aF0, Function aF1=None, Function aF2=None)

        Parameters
        ----------
        aF0: OpenSim::Function *
        aF1: OpenSim::Function *
        aF2: OpenSim::Function *

        """
        return _tools.CMC_Task_setTaskFunctionsForVelocity(self, aF0, aF1, aF2)

    def getTaskFunctionForVelocity(self, aWhich):
        r"""
        getTaskFunctionForVelocity(CMC_Task self, int aWhich) -> Function

        Parameters
        ----------
        aWhich: int

        """
        return _tools.CMC_Task_getTaskFunctionForVelocity(self, aWhich)

    def setTaskFunctionsForAcceleration(self, aF0, aF1=None, aF2=None):
        r"""
        setTaskFunctionsForAcceleration(CMC_Task self, Function aF0, Function aF1=None, Function aF2=None)

        Parameters
        ----------
        aF0: OpenSim::Function *
        aF1: OpenSim::Function *
        aF2: OpenSim::Function *

        """
        return _tools.CMC_Task_setTaskFunctionsForAcceleration(self, aF0, aF1, aF2)

    def getTaskFunctionForAcceleration(self, aWhich):
        r"""
        getTaskFunctionForAcceleration(CMC_Task self, int aWhich) -> Function

        Parameters
        ----------
        aWhich: int

        """
        return _tools.CMC_Task_getTaskFunctionForAcceleration(self, aWhich)

    def getTaskPosition(self, aWhich, aT):
        r"""
        getTaskPosition(CMC_Task self, int aWhich, double aT) -> double

        Parameters
        ----------
        aWhich: int
        aT: double

        """
        return _tools.CMC_Task_getTaskPosition(self, aWhich, aT)

    def getTaskVelocity(self, aWhich, aT):
        r"""
        getTaskVelocity(CMC_Task self, int aWhich, double aT) -> double

        Parameters
        ----------
        aWhich: int
        aT: double

        """
        return _tools.CMC_Task_getTaskVelocity(self, aWhich, aT)

    def getTaskAcceleration(self, aWhich, aT):
        r"""
        getTaskAcceleration(CMC_Task self, int aWhich, double aT) -> double

        Parameters
        ----------
        aWhich: int
        aT: double

        """
        return _tools.CMC_Task_getTaskAcceleration(self, aWhich, aT)

    def setPositionErrorLast(self, aE0, aE1=0.0, aE2=0.0):
        r"""
        setPositionErrorLast(CMC_Task self, double aE0, double aE1=0.0, double aE2=0.0)

        Parameters
        ----------
        aE0: double
        aE1: double
        aE2: double

        """
        return _tools.CMC_Task_setPositionErrorLast(self, aE0, aE1, aE2)

    def getPositionErrorLast(self, aWhich):
        r"""
        getPositionErrorLast(CMC_Task self, int aWhich) -> double

        Parameters
        ----------
        aWhich: int

        """
        return _tools.CMC_Task_getPositionErrorLast(self, aWhich)

    def setVelocityErrorLast(self, aE0, aE1=0.0, aE2=0.0):
        r"""
        setVelocityErrorLast(CMC_Task self, double aE0, double aE1=0.0, double aE2=0.0)

        Parameters
        ----------
        aE0: double
        aE1: double
        aE2: double

        """
        return _tools.CMC_Task_setVelocityErrorLast(self, aE0, aE1, aE2)

    def getVelocityErrorLast(self, aWhich):
        r"""
        getVelocityErrorLast(CMC_Task self, int aWhich) -> double

        Parameters
        ----------
        aWhich: int

        """
        return _tools.CMC_Task_getVelocityErrorLast(self, aWhich)

    def getPositionError(self, aWhich):
        r"""
        getPositionError(CMC_Task self, int aWhich) -> double

        Parameters
        ----------
        aWhich: int

        """
        return _tools.CMC_Task_getPositionError(self, aWhich)

    def getVelocityError(self, aWhich):
        r"""
        getVelocityError(CMC_Task self, int aWhich) -> double

        Parameters
        ----------
        aWhich: int

        """
        return _tools.CMC_Task_getVelocityError(self, aWhich)

    def getDesiredAcceleration(self, aWhich):
        r"""
        getDesiredAcceleration(CMC_Task self, int aWhich) -> double

        Parameters
        ----------
        aWhich: int

        """
        return _tools.CMC_Task_getDesiredAcceleration(self, aWhich)

    def getAcceleration(self, aWhich):
        r"""
        getAcceleration(CMC_Task self, int aWhich) -> double

        Parameters
        ----------
        aWhich: int

        """
        return _tools.CMC_Task_getAcceleration(self, aWhich)

    def computeErrors(self, s, aT):
        r"""
        computeErrors(CMC_Task self, State s, double aT)

        Parameters
        ----------
        s: SimTK::State const &
        aT: double

        """
        return _tools.CMC_Task_computeErrors(self, s, aT)

    def computeDesiredAccelerations(self, *args):
        r"""
        computeDesiredAccelerations(CMC_Task self, State s, double aT)

        Parameters
        ----------
        s: SimTK::State const &
        aT: double

        computeDesiredAccelerations(CMC_Task self, State s, double aTI, double aTF)

        Parameters
        ----------
        s: SimTK::State const &
        aTI: double
        aTF: double

        """
        return _tools.CMC_Task_computeDesiredAccelerations(self, *args)

    def computeAccelerations(self, s):
        r"""
        computeAccelerations(CMC_Task self, State s)

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _tools.CMC_Task_computeAccelerations(self, s)

    def computeJacobian(self):
        r"""computeJacobian(CMC_Task self)"""
        return _tools.CMC_Task_computeJacobian(self)

    def computeEffectiveMassMatrix(self):
        r"""computeEffectiveMassMatrix(CMC_Task self)"""
        return _tools.CMC_Task_computeEffectiveMassMatrix(self)

# Register CMC_Task in _tools:
_tools.CMC_Task_swigregister(CMC_Task)
class CMC_Joint(CMC_Task):
    r"""
    A class for specifying the tracking task for a joint.

    Author: Frank C. Anderson
    Version: 1.0
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> CMC_Joint

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.CMC_Joint_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(CMC_Joint self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.CMC_Joint_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _tools.CMC_Joint_getClassName()

    def clone(self):
        r"""clone(CMC_Joint self) -> CMC_Joint"""
        return _tools.CMC_Joint_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(CMC_Joint self) -> std::string const &"""
        return _tools.CMC_Joint_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(CMC_Joint self, std::string const & aCoordinateName="") -> CMC_Joint

        Parameters
        ----------
        aCoordinateName: std::string const &

        __init__(CMC_Joint self, CMC_Joint aTask) -> CMC_Joint

        Parameters
        ----------
        aTask: OpenSim::CMC_Joint const &

        """
        _tools.CMC_Joint_swiginit(self, _tools.new_CMC_Joint(*args))
    __swig_destroy__ = _tools.delete_CMC_Joint

    def setModel(self, aModel):
        r"""
        setModel(CMC_Joint self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _tools.CMC_Joint_setModel(self, aModel)

    def setCoordinateName(self, aName):
        r"""
        setCoordinateName(CMC_Joint self, std::string const & aName)

        Parameters
        ----------
        aName: std::string const &

        """
        return _tools.CMC_Joint_setCoordinateName(self, aName)

    def getCoordinateName(self):
        r"""getCoordinateName(CMC_Joint self) -> std::string"""
        return _tools.CMC_Joint_getCoordinateName(self)

    def getLimit(self):
        r"""getLimit(CMC_Joint self) -> double"""
        return _tools.CMC_Joint_getLimit(self)

    def computeErrors(self, s, aT):
        r"""
        computeErrors(CMC_Joint self, State s, double aT)

        Parameters
        ----------
        s: SimTK::State const &
        aT: double

        """
        return _tools.CMC_Joint_computeErrors(self, s, aT)

    def computeDesiredAccelerations(self, *args):
        r"""
        computeDesiredAccelerations(CMC_Joint self, State s, double aT)

        Parameters
        ----------
        s: SimTK::State const &
        aT: double

        computeDesiredAccelerations(CMC_Joint self, State s, double aTI, double aTF)

        Parameters
        ----------
        s: SimTK::State const &
        aTI: double
        aTF: double

        """
        return _tools.CMC_Joint_computeDesiredAccelerations(self, *args)

    def computeAccelerations(self, s):
        r"""
        computeAccelerations(CMC_Joint self, State s)

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _tools.CMC_Joint_computeAccelerations(self, s)

    def updateFromXMLNode(self, aNode, versionNumber=-1):
        r"""
        updateFromXMLNode(CMC_Joint self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &
        versionNumber: int

        """
        return _tools.CMC_Joint_updateFromXMLNode(self, aNode, versionNumber)

# Register CMC_Joint in _tools:
_tools.CMC_Joint_swigregister(CMC_Joint)
class CMC_Point(CMC_Task):
    r"""
    A class for specifying and computing parameters for tracking a point.

    Author: Frank C. Anderson
    Version: 1.0
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> CMC_Point

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.CMC_Point_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(CMC_Point self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.CMC_Point_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _tools.CMC_Point_getClassName()

    def clone(self):
        r"""clone(CMC_Point self) -> CMC_Point"""
        return _tools.CMC_Point_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(CMC_Point self) -> std::string const &"""
        return _tools.CMC_Point_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(CMC_Point self, Vec3 aPoint=SimTK::Vec3(0)) -> CMC_Point

        Parameters
        ----------
        aPoint: SimTK::Vec3 const &

        __init__(CMC_Point self, CMC_Point aTask) -> CMC_Point

        Parameters
        ----------
        aTask: OpenSim::CMC_Point const &

        """
        _tools.CMC_Point_swiginit(self, _tools.new_CMC_Point(*args))
    __swig_destroy__ = _tools.delete_CMC_Point

    def setModel(self, aModel):
        r"""
        setModel(CMC_Point self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _tools.CMC_Point_setModel(self, aModel)

    def setPoint(self, aPoint):
        r"""
        setPoint(CMC_Point self, Vec3 aPoint)

        Parameters
        ----------
        aPoint: SimTK::Vec3 const &

        """
        return _tools.CMC_Point_setPoint(self, aPoint)

    def getPoint(self):
        r"""getPoint(CMC_Point self) -> Vec3"""
        return _tools.CMC_Point_getPoint(self)

    def computeErrors(self, s, aT):
        r"""
        computeErrors(CMC_Point self, State s, double aT)

        Parameters
        ----------
        s: SimTK::State const &
        aT: double

        """
        return _tools.CMC_Point_computeErrors(self, s, aT)

    def computeDesiredAccelerations(self, *args):
        r"""
        computeDesiredAccelerations(CMC_Point self, State s, double aT)

        Parameters
        ----------
        s: SimTK::State const &
        aT: double

        computeDesiredAccelerations(CMC_Point self, State s, double aTI, double aTF)

        Parameters
        ----------
        s: SimTK::State const &
        aTI: double
        aTF: double

        """
        return _tools.CMC_Point_computeDesiredAccelerations(self, *args)

    def computeAccelerations(self, s):
        r"""
        computeAccelerations(CMC_Point self, State s)

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _tools.CMC_Point_computeAccelerations(self, s)

    def updateFromXMLNode(self, aNode, versionNumber=-1):
        r"""
        updateFromXMLNode(CMC_Point self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &
        versionNumber: int

        """
        return _tools.CMC_Point_updateFromXMLNode(self, aNode, versionNumber)

# Register CMC_Point in _tools:
_tools.CMC_Point_swigregister(CMC_Point)
class SetTrackingTasks(opensim.common.OpenSimObject):
    r"""
    A class for holding a set of pointers to objects.  It is derived from
    base class C and is implemented as a wrapper around template class
    ArrayPtrs<T>.

    See also: ArrayPtrs
    Author: Frank C. Anderson
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> SetTrackingTasks

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.SetTrackingTasks_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(SetTrackingTasks self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.SetTrackingTasks_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _tools.SetTrackingTasks_getClassName()

    def clone(self):
        r"""clone(SetTrackingTasks self) -> SetTrackingTasks"""
        return _tools.SetTrackingTasks_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(SetTrackingTasks self) -> std::string const &"""
        return _tools.SetTrackingTasks_getConcreteClassName(self)
    __swig_destroy__ = _tools.delete_SetTrackingTasks

    def __init__(self, *args):
        r"""
        *Overload 1:*

        Default constructor.

        |

        *Overload 2:*

        Construct from file.

        :type aFileName: string
        :param aFileName:             Name of the file.
        :type aUpdateFromXMLNode: boolean, optional
        :param aUpdateFromXMLNode:    Whether to update from XML.

        |

        *Overload 3:*

        Construct from file.

        :type aFileName: string
        :param aFileName:             Name of the file.
        :param aUpdateFromXMLNode:    Whether to update from XML.

        |

        *Overload 4:*

        Copy constructor.

        :type aSet: OpenSim::Set< OpenSim::TrackingTask,OpenSim::Object >
        :param aSet: Set to be copied.
        """
        _tools.SetTrackingTasks_swiginit(self, _tools.new_SetTrackingTasks(*args))

    def setupGroups(self):
        r"""Setup groups (match group member names to set members)."""
        return _tools.SetTrackingTasks_setupGroups(self)

    def setMemoryOwner(self, aTrueFalse):
        r"""
        Assign this set to another set.
        This operator makes a complete copy of the specified set; all member
        variables and objects in the set are copied.  Because all objects are
        copied, this set takes ownership of the newly allocated objects (i.e.,
        _memoryOwner is set to true. So, the result is two independent,
        identical sets, with the possible exception of the _memoryOwner flag.

        :param set: The Set to be copied.
        :rtype: void
        :return: Reference to this set.

        %Set whether or not this Set owns the memory pointed to by the pointers
        it holds.

        :type aTrueFalse: boolean
        :param aTrueFalse: If true, all the memory associated with each of the
            pointers in this array are deleted upon the array's destruction.  If
            false, deletes are not issued for each of the pointers.
        """
        return _tools.SetTrackingTasks_setMemoryOwner(self, aTrueFalse)

    def setSize(self, aSize):
        r"""
        %Set the size of the array.  This method can be used only to decrease
        the size of the array.  If the size of an array is decreased, all objects
        in the array that become invalid as a result of the decrease are
        deleted.

        Note that the size of an array is different than its capacity.  The size
        indicates how many valid elements are stored in an array.  The capacity
        indicates how much the size of the array can be increased without
        allocated more memory.  At all times size <= capacity.

        :type aSize: int
        :param aSize: Desired size of the array.  The size must be greater than
            or equal to zero and less than or equal to the current size of the
            array.
        :rtype: boolean
        :return: True if the requested size change was carried out, false
            otherwise.
        """
        return _tools.SetTrackingTasks_setSize(self, aSize)

    def getSize(self):
        r"""
        Get the size of the array.

        :rtype: int
        :return: Size of the array.
        """
        return _tools.SetTrackingTasks_getSize(self)

    def getIndex(self, *args):
        r"""
        *Overload 1:*

        Get the index of an object.

        :type aObject: :py:class:`TrackingTask`
        :param aObject: Address of the object whose index is sought.
        :type aStartIndex: int, optional
        :param aStartIndex: Index at which to start searching.  If the object is
            not found at or following aStartIndex, the array is searched from
            its beginning.
        :rtype: int
        :return: Index of the object with the address aObject.  If no such object
            exists in the array, -1 is returned.

        |

        *Overload 2:*

        Get the index of an object by specifying its name.

        :type aName: string
        :param aName: Name of the object whose index is sought.
        :type aStartIndex: int, optional
        :param aStartIndex: Index at which to start searching.  If the object is
            not found at or following aStartIndex, the array is searched from
            its beginning.
        :rtype: int
        :return: Index of the object named aName.  If no such object exists in
            the array, -1 is returned.

        |

        *Overload 3:*

        Get the index of an object by specifying its name.

        :type aName: string
        :param aName: Name of the object whose index is sought.
        :param aStartIndex: Index at which to start searching.  If the object is
            not found at or following aStartIndex, the array is searched from
            its beginning.
        :rtype: int
        :return: Index of the object named aName.  If no such object exists in
            the array, -1 is returned.
        """
        return _tools.SetTrackingTasks_getIndex(self, *args)

    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        r"""Get names of groups containing a given object"""
        return _tools.SetTrackingTasks_getGroupNamesContaining(self, aObjectName, rGroupNames)

    def adoptAndAppend(self, aObject):
        r"""
        Append to the array, and adopt passed in pointer.  A copy is NOT made of the specified object.  If
        getMemoryOwner() is true, this Set takes over ownership of the object and
        deletes it when the Set itself is deleted.

        :type aObject: :py:class:`TrackingTask`
        :param aObject: Object to be appended.
        :rtype: boolean
        :return: True if the append was successful, false otherwise.
        """
        return _tools.SetTrackingTasks_adoptAndAppend(self, aObject)

    def cloneAndAppend(self, aObject):
        r"""
        cloneAndAppend creates a clone of the passed in object and appends the clone to the array.
        The original object is unaffected and is not associated with the Set. The clone is created
        using the method clone() available to OpenSim::Object

        :type aObject: :py:class:`TrackingTask`
        :param aObject: Object whose clone is to be appended.
        :rtype: boolean
        :return: True if the append was successful, false otherwise.
        """
        return _tools.SetTrackingTasks_cloneAndAppend(self, aObject)

    def insert(self, aIndex, aObject):
        r"""
        Insert an object into the array at a specified index.  A copy of the
        specified object is NOT made.  If getMemoryOwner() is true, this Set takes
        over ownership of the object and deletes it when the Set itself is deleted.

        This method is relatively computationally costly since many of the array
        elements may need to be shifted.

        :type aObject: :py:class:`TrackingTask`
        :param aObject: Object to be inserted.
        :type aIndex: int
        :param aIndex: Index at which to insert the new object.  All current elements
            from aIndex to the end of the array are shifted one place in the direction
            of the end of the array.  The specified index must be less than or
            equal to the size of the array.  Note that if aIndex is equal to the
            size of the array, the insertion is equivalent to an append.
        :rtype: boolean
        :return: True if the insertion was successful, false otherwise.
        """
        return _tools.SetTrackingTasks_insert(self, aIndex, aObject)

    def remove(self, *args):
        r"""
        *Overload 1:*

        Remove an object from the array at a specified index.
        If this set is set as the memory owner, the object is deleted when it
        is removed.

        This method is relatively computationally costly since many of the array
        elements may need to be shifted.

        :type aIndex: int
        :param aIndex: Index of the value to remove.  All elements from aIndex to
            the end of the array are shifted one place toward the beginning of
            the array.  If aIndex is less than 0 or greater than or equal to the
            current size of the array, no element is removed.
        :rtype: boolean
        :return: True if the removal was successful, false otherwise.

        |

        *Overload 2:*

        Remove an object from the array by specifying its address.
        The object is deleted when it is removed.

        This method is relatively computationally costly since many of the array
        elements may need to be shifted.

        :type aObject: :py:class:`TrackingTask`
        :param aObject: Pointer to the object to be removed.  If an object with the
            specified address is not found, no action is taken.
        :rtype: boolean
        :return: True if the removal was successful, false otherwise.
        """
        return _tools.SetTrackingTasks_remove(self, *args)

    def clearAndDestroy(self):
        r"""clearAndDestroy(SetTrackingTasks self)"""
        return _tools.SetTrackingTasks_clearAndDestroy(self)

    def set(self, aIndex, aObject, preserveGroups=False):
        r"""
        %Set the object at a specified index.  A copy of the object is NOT made.
        If getMemoryOwner() is true, this Set takes over ownership of the object and
        deletes it when the Set itself is deleted.

        :type aIndex: int
        :param aIndex: Index of the array element to be set.  aIndex must be
            greater than zero and less than or equal to the size of the array.  Note
            that if aIndex is equal to the size of the array, the set is equivalent
            to an append.
        :type aObject: :py:class:`TrackingTask`
        :param aObject: Object to be set.
        :type preserveGroups: boolean, optional
        :param preserveGroups: If true, the new object will be added to the groups
            that the object it replaces belonged to
        :rtype: boolean
        :return: True if the set was successful, false otherwise.
        """
        return _tools.SetTrackingTasks_set(self, aIndex, aObject, preserveGroups)

    def get(self, *args):
        r"""
        *Overload 1:*

        Get the value at a specified array index.

        If the index is negative or passed the end of the array, an exception
        is thrown.

        For faster execution, the array elements can be accessed through the
        overloaded operator[], which does no bounds checking.

        :type aIndex: int
        :param aIndex: Index of the desired array element.
        :rtype: :py:class:`TrackingTask`
        :return: Reference to the array element.
        :raises: Exception if (aIndex<0)||(aIndex>=_size) or if the pointer
            at aIndex is NULL.
        See also: operator[].

        |

        *Overload 2:*

        Get the first object that has a specified name.

        If the array doesn't contain an object of the specified name, an
        exception is thrown.

        :type aName: string
        :param aName: Name of the desired object.
        :rtype: :py:class:`TrackingTask`
        :return: Pointer to the object.
        :raises: Exception if no such object exists.
        See also: getIndex()
        """
        return _tools.SetTrackingTasks_get(self, *args)

    def contains(self, aName):
        r"""
        Get whether this Set contains any object with the specified name.

        :type aName: string
        :param aName: Name of the desired object.
        :rtype: boolean
        :return: true if the object exists
        """
        return _tools.SetTrackingTasks_contains(self, aName)

    def getNames(self, rNames):
        r"""
        Get names of objects in the set.

        :type rNames: OpenSim::Array< std::string >
        :param rNames: Array of names.  The names are appended to rNames, so it
            is permissible to send in an non-empty array; the names in the set
            will simply be appended to the array sent in.
        """
        return _tools.SetTrackingTasks_getNames(self, rNames)

    def getNumGroups(self):
        r"""Get the number of groups."""
        return _tools.SetTrackingTasks_getNumGroups(self)

    def addGroup(self, aGroupName):
        r"""Add an empty group to the set."""
        return _tools.SetTrackingTasks_addGroup(self, aGroupName)

    def removeGroup(self, aGroupName):
        r"""Remove a group from the set. Elements are not removed."""
        return _tools.SetTrackingTasks_removeGroup(self, aGroupName)

    def renameGroup(self, oldGroupName, newGroupName):
        r"""Rename a group."""
        return _tools.SetTrackingTasks_renameGroup(self, oldGroupName, newGroupName)

    def addObjectToGroup(self, aGroupName, aObjectName):
        r"""Add an object to a group."""
        return _tools.SetTrackingTasks_addObjectToGroup(self, aGroupName, aObjectName)

    def getGroupNames(self, rGroupNames):
        r"""Get names of all groups"""
        return _tools.SetTrackingTasks_getGroupNames(self, rGroupNames)

    def getGroup(self, *args):
        r"""
        *Overload 1:*

        Get a group by name.

        |

        *Overload 2:*

        Get a group by index.
        """
        return _tools.SetTrackingTasks_getGroup(self, *args)

    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1


# Register SetTrackingTasks in _tools:
_tools.SetTrackingTasks_swigregister(SetTrackingTasks)
class CMC_TaskSet(SetTrackingTasks):
    r"""
    An class for holding and managing a set of tasks.

    Author: Frank C. Anderson
    Version: 1.0
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> CMC_TaskSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.CMC_TaskSet_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(CMC_TaskSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.CMC_TaskSet_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _tools.CMC_TaskSet_getClassName()

    def clone(self):
        r"""clone(CMC_TaskSet self) -> CMC_TaskSet"""
        return _tools.CMC_TaskSet_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(CMC_TaskSet self) -> std::string const &"""
        return _tools.CMC_TaskSet_getConcreteClassName(self)
    __swig_destroy__ = _tools.delete_CMC_TaskSet

    def __init__(self, *args):
        r"""
        __init__(CMC_TaskSet self) -> CMC_TaskSet
        __init__(CMC_TaskSet self, std::string const & aFileName) -> CMC_TaskSet

        Parameters
        ----------
        aFileName: std::string const &

        __init__(CMC_TaskSet self, CMC_TaskSet aCMCTaskSet) -> CMC_TaskSet

        Parameters
        ----------
        aCMCTaskSet: OpenSim::CMC_TaskSet const &

        """
        _tools.CMC_TaskSet_swiginit(self, _tools.new_CMC_TaskSet(*args))

    def setModel(self, aModel):
        r"""
        setModel(CMC_TaskSet self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _tools.CMC_TaskSet_setModel(self, aModel)

    def getModel(self):
        r"""getModel(CMC_TaskSet self) -> Model"""
        return _tools.CMC_TaskSet_getModel(self)

    def getDataFileName(self):
        r"""getDataFileName(CMC_TaskSet self) -> std::string const &"""
        return _tools.CMC_TaskSet_getDataFileName(self)

    def setFunctions(self, aFuncSet):
        r"""
        setFunctions(CMC_TaskSet self, FunctionSet aFuncSet)

        Parameters
        ----------
        aFuncSet: OpenSim::FunctionSet &

        """
        return _tools.CMC_TaskSet_setFunctions(self, aFuncSet)

    def setFunctionsForVelocity(self, aFuncSet):
        r"""
        setFunctionsForVelocity(CMC_TaskSet self, FunctionSet aFuncSet)

        Parameters
        ----------
        aFuncSet: OpenSim::FunctionSet &

        """
        return _tools.CMC_TaskSet_setFunctionsForVelocity(self, aFuncSet)

    def setFunctionsForAcceleration(self, aFuncSet):
        r"""
        setFunctionsForAcceleration(CMC_TaskSet self, FunctionSet aFuncSet)

        Parameters
        ----------
        aFuncSet: OpenSim::FunctionSet &

        """
        return _tools.CMC_TaskSet_setFunctionsForAcceleration(self, aFuncSet)

    def getNumActiveTaskFunctions(self):
        r"""getNumActiveTaskFunctions(CMC_TaskSet self) -> int"""
        return _tools.CMC_TaskSet_getNumActiveTaskFunctions(self)

    def getTaskPositions(self, aT):
        r"""
        getTaskPositions(CMC_TaskSet self, double aT) -> ArrayDouble

        Parameters
        ----------
        aT: double

        """
        return _tools.CMC_TaskSet_getTaskPositions(self, aT)

    def getTaskVelocities(self, aT):
        r"""
        getTaskVelocities(CMC_TaskSet self, double aT) -> ArrayDouble

        Parameters
        ----------
        aT: double

        """
        return _tools.CMC_TaskSet_getTaskVelocities(self, aT)

    def getTaskAccelerations(self, aT):
        r"""
        getTaskAccelerations(CMC_TaskSet self, double aT) -> ArrayDouble

        Parameters
        ----------
        aT: double

        """
        return _tools.CMC_TaskSet_getTaskAccelerations(self, aT)

    def getPositionGains(self):
        r"""getPositionGains(CMC_TaskSet self) -> ArrayDouble"""
        return _tools.CMC_TaskSet_getPositionGains(self)

    def getVelocityGains(self):
        r"""getVelocityGains(CMC_TaskSet self) -> ArrayDouble"""
        return _tools.CMC_TaskSet_getVelocityGains(self)

    def getAccelerationGains(self):
        r"""getAccelerationGains(CMC_TaskSet self) -> ArrayDouble"""
        return _tools.CMC_TaskSet_getAccelerationGains(self)

    def getPositionErrorsLast(self):
        r"""getPositionErrorsLast(CMC_TaskSet self) -> ArrayDouble"""
        return _tools.CMC_TaskSet_getPositionErrorsLast(self)

    def getPositionErrors(self):
        r"""getPositionErrors(CMC_TaskSet self) -> ArrayDouble"""
        return _tools.CMC_TaskSet_getPositionErrors(self)

    def getVelocityErrorsLast(self):
        r"""getVelocityErrorsLast(CMC_TaskSet self) -> ArrayDouble"""
        return _tools.CMC_TaskSet_getVelocityErrorsLast(self)

    def getVelocityErrors(self):
        r"""getVelocityErrors(CMC_TaskSet self) -> ArrayDouble"""
        return _tools.CMC_TaskSet_getVelocityErrors(self)

    def getWeights(self):
        r"""getWeights(CMC_TaskSet self) -> ArrayDouble"""
        return _tools.CMC_TaskSet_getWeights(self)

    def getDesiredAccelerations(self):
        r"""getDesiredAccelerations(CMC_TaskSet self) -> ArrayDouble"""
        return _tools.CMC_TaskSet_getDesiredAccelerations(self)

    def getAccelerations(self):
        r"""getAccelerations(CMC_TaskSet self) -> ArrayDouble"""
        return _tools.CMC_TaskSet_getAccelerations(self)

    def recordErrorsAsLastErrors(self):
        r"""recordErrorsAsLastErrors(CMC_TaskSet self)"""
        return _tools.CMC_TaskSet_recordErrorsAsLastErrors(self)

    def computeErrors(self, s, aT):
        r"""
        computeErrors(CMC_TaskSet self, State s, double aT)

        Parameters
        ----------
        s: SimTK::State const &
        aT: double

        """
        return _tools.CMC_TaskSet_computeErrors(self, s, aT)

    def computeDesiredAccelerations(self, *args):
        r"""
        computeDesiredAccelerations(CMC_TaskSet self, State s, double aT)

        Parameters
        ----------
        s: SimTK::State const &
        aT: double

        computeDesiredAccelerations(CMC_TaskSet self, State s, double aTCurrent, double aTFuture)

        Parameters
        ----------
        s: SimTK::State const &
        aTCurrent: double
        aTFuture: double

        """
        return _tools.CMC_TaskSet_computeDesiredAccelerations(self, *args)

    def computeAccelerations(self, s):
        r"""
        computeAccelerations(CMC_TaskSet self, State s)

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _tools.CMC_TaskSet_computeAccelerations(self, s)

# Register CMC_TaskSet in _tools:
_tools.CMC_TaskSet_swigregister(CMC_TaskSet)
class CMCTool(opensim.simulation.AbstractTool):
    r"""
    An abstract class for specifying the interface for an investigation.

    Author: Frank C. Anderson
    Version: 1.0
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> CMCTool

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.CMCTool_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(CMCTool self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.CMCTool_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _tools.CMCTool_getClassName()

    def clone(self):
        r"""clone(CMCTool self) -> CMCTool"""
        return _tools.CMCTool_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(CMCTool self) -> std::string const &"""
        return _tools.CMCTool_getConcreteClassName(self)
    __swig_destroy__ = _tools.delete_CMCTool

    def __init__(self, *args):
        r"""
        __init__(CMCTool self) -> CMCTool
        __init__(CMCTool self, std::string const & aFileName, bool aLoadModel=True) -> CMCTool

        Parameters
        ----------
        aFileName: std::string const &
        aLoadModel: bool

        __init__(CMCTool self, CMCTool aObject) -> CMCTool

        Parameters
        ----------
        aObject: OpenSim::CMCTool const &

        """
        _tools.CMCTool_swiginit(self, _tools.new_CMCTool(*args))

    def getExcludedActuators(self):
        r"""getExcludedActuators(CMCTool self) -> ArrayStr"""
        return _tools.CMCTool_getExcludedActuators(self)

    def setExcludedActuators(self, excludedActs):
        r"""
        setExcludedActuators(CMCTool self, ArrayStr excludedActs)

        Parameters
        ----------
        excludedActs: OpenSim::Array< std::string > const &

        """
        return _tools.CMCTool_setExcludedActuators(self, excludedActs)

    def getDesiredPointsFileName(self):
        r"""getDesiredPointsFileName(CMCTool self) -> std::string const &"""
        return _tools.CMCTool_getDesiredPointsFileName(self)

    def setDesiredPointsFileName(self, aFileName):
        r"""
        setDesiredPointsFileName(CMCTool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.CMCTool_setDesiredPointsFileName(self, aFileName)

    def getDesiredKinematicsFileName(self):
        r"""getDesiredKinematicsFileName(CMCTool self) -> std::string const &"""
        return _tools.CMCTool_getDesiredKinematicsFileName(self)

    def setDesiredKinematicsFileName(self, aFileName):
        r"""
        setDesiredKinematicsFileName(CMCTool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.CMCTool_setDesiredKinematicsFileName(self, aFileName)

    def getConstraintsFileName(self):
        r"""getConstraintsFileName(CMCTool self) -> std::string const &"""
        return _tools.CMCTool_getConstraintsFileName(self)

    def setConstraintsFileName(self, aFileName):
        r"""
        setConstraintsFileName(CMCTool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.CMCTool_setConstraintsFileName(self, aFileName)

    def getTaskSetFileName(self):
        r"""getTaskSetFileName(CMCTool self) -> std::string const &"""
        return _tools.CMCTool_getTaskSetFileName(self)

    def setTaskSetFileName(self, aFileName):
        r"""
        setTaskSetFileName(CMCTool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.CMCTool_setTaskSetFileName(self, aFileName)

    def getRRAControlsFileName(self):
        r"""getRRAControlsFileName(CMCTool self) -> std::string const &"""
        return _tools.CMCTool_getRRAControlsFileName(self)

    def setRRAControlsFileName(self, aFileName):
        r"""
        setRRAControlsFileName(CMCTool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.CMCTool_setRRAControlsFileName(self, aFileName)

    def getLowpassCutoffFrequency(self):
        r"""getLowpassCutoffFrequency(CMCTool self) -> double"""
        return _tools.CMCTool_getLowpassCutoffFrequency(self)

    def setLowpassCutoffFrequency(self, aLowpassCutoffFrequency):
        r"""
        setLowpassCutoffFrequency(CMCTool self, double aLowpassCutoffFrequency)

        Parameters
        ----------
        aLowpassCutoffFrequency: double

        """
        return _tools.CMCTool_setLowpassCutoffFrequency(self, aLowpassCutoffFrequency)

    def getTimeWindow(self):
        r"""getTimeWindow(CMCTool self) -> double"""
        return _tools.CMCTool_getTimeWindow(self)

    def setTimeWindow(self, aTargetDT):
        r"""
        setTimeWindow(CMCTool self, double aTargetDT)

        Parameters
        ----------
        aTargetDT: double

        """
        return _tools.CMCTool_setTimeWindow(self, aTargetDT)

    def getExternalLoadsFileName(self):
        r"""getExternalLoadsFileName(CMCTool self) -> std::string const &"""
        return _tools.CMCTool_getExternalLoadsFileName(self)

    def setExternalLoadsFileName(self, aFileName):
        r"""
        setExternalLoadsFileName(CMCTool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.CMCTool_setExternalLoadsFileName(self, aFileName)

    def getUseFastTarget(self):
        r"""getUseFastTarget(CMCTool self) -> bool"""
        return _tools.CMCTool_getUseFastTarget(self)

    def setUseFastTarget(self, useFastTarget):
        r"""
        setUseFastTarget(CMCTool self, bool useFastTarget)

        Parameters
        ----------
        useFastTarget: bool

        """
        return _tools.CMCTool_setUseFastTarget(self, useFastTarget)

    def getUseVerbosePrinting(self):
        r"""getUseVerbosePrinting(CMCTool self) -> bool"""
        return _tools.CMCTool_getUseVerbosePrinting(self)

    def setUseVerbosePrinting(self, verbose):
        r"""
        setUseVerbosePrinting(CMCTool self, bool verbose)

        Parameters
        ----------
        verbose: bool

        """
        return _tools.CMCTool_setUseVerbosePrinting(self, verbose)

    def run(self):
        r"""run(CMCTool self) -> bool"""
        return _tools.CMCTool_run(self)

    def getForceStorage(self):
        r"""getForceStorage(CMCTool self) -> Storage"""
        return _tools.CMCTool_getForceStorage(self)

    def setOriginalForceSet(self, aForceSet):
        r"""
        setOriginalForceSet(CMCTool self, ForceSet aForceSet)

        Parameters
        ----------
        aForceSet: OpenSim::ForceSet const &

        """
        return _tools.CMCTool_setOriginalForceSet(self, aForceSet)

# Register CMCTool in _tools:
_tools.CMCTool_swigregister(CMCTool)
class RRATool(opensim.simulation.AbstractTool):
    r"""
    An abstract class for specifying the interface for an investigation.

    Author: Frank C. Anderson
    Version: 1.0
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> RRATool

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.RRATool_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(RRATool self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.RRATool_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _tools.RRATool_getClassName()

    def clone(self):
        r"""clone(RRATool self) -> RRATool"""
        return _tools.RRATool_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(RRATool self) -> std::string const &"""
        return _tools.RRATool_getConcreteClassName(self)
    __swig_destroy__ = _tools.delete_RRATool

    def __init__(self, *args):
        r"""
        __init__(RRATool self) -> RRATool
        __init__(RRATool self, std::string const & aFileName, bool aLoadModel=True) -> RRATool

        Parameters
        ----------
        aFileName: std::string const &
        aLoadModel: bool

        __init__(RRATool self, RRATool aObject) -> RRATool

        Parameters
        ----------
        aObject: OpenSim::RRATool const &

        """
        _tools.RRATool_swiginit(self, _tools.new_RRATool(*args))

    def getDesiredPointsFileName(self):
        r"""getDesiredPointsFileName(RRATool self) -> std::string const &"""
        return _tools.RRATool_getDesiredPointsFileName(self)

    def setDesiredPointsFileName(self, aFileName):
        r"""
        setDesiredPointsFileName(RRATool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.RRATool_setDesiredPointsFileName(self, aFileName)

    def getDesiredKinematicsFileName(self):
        r"""getDesiredKinematicsFileName(RRATool self) -> std::string const &"""
        return _tools.RRATool_getDesiredKinematicsFileName(self)

    def setDesiredKinematicsFileName(self, aFileName):
        r"""
        setDesiredKinematicsFileName(RRATool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.RRATool_setDesiredKinematicsFileName(self, aFileName)

    def getConstraintsFileName(self):
        r"""getConstraintsFileName(RRATool self) -> std::string const &"""
        return _tools.RRATool_getConstraintsFileName(self)

    def setConstraintsFileName(self, aFileName):
        r"""
        setConstraintsFileName(RRATool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.RRATool_setConstraintsFileName(self, aFileName)

    def getTaskSetFileName(self):
        r"""getTaskSetFileName(RRATool self) -> std::string const &"""
        return _tools.RRATool_getTaskSetFileName(self)

    def setTaskSetFileName(self, aFileName):
        r"""
        setTaskSetFileName(RRATool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.RRATool_setTaskSetFileName(self, aFileName)

    def getOutputModelFileName(self):
        r"""getOutputModelFileName(RRATool self) -> std::string const &"""
        return _tools.RRATool_getOutputModelFileName(self)

    def setOutputModelFileName(self, aFileName):
        r"""
        setOutputModelFileName(RRATool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.RRATool_setOutputModelFileName(self, aFileName)

    def getAdjustCOMToReduceResiduals(self):
        r"""getAdjustCOMToReduceResiduals(RRATool self) -> bool"""
        return _tools.RRATool_getAdjustCOMToReduceResiduals(self)

    def setAdjustCOMToReduceResiduals(self, aAdjust):
        r"""
        setAdjustCOMToReduceResiduals(RRATool self, bool aAdjust)

        Parameters
        ----------
        aAdjust: bool

        """
        return _tools.RRATool_setAdjustCOMToReduceResiduals(self, aAdjust)

    def getAdjustedCOMBody(self):
        r"""getAdjustedCOMBody(RRATool self) -> std::string const &"""
        return _tools.RRATool_getAdjustedCOMBody(self)

    def setAdjustedCOMBody(self, aBody):
        r"""
        setAdjustedCOMBody(RRATool self, std::string const & aBody)

        Parameters
        ----------
        aBody: std::string const &

        """
        return _tools.RRATool_setAdjustedCOMBody(self, aBody)

    def getLowpassCutoffFrequency(self):
        r"""getLowpassCutoffFrequency(RRATool self) -> double"""
        return _tools.RRATool_getLowpassCutoffFrequency(self)

    def setLowpassCutoffFrequency(self, aLowpassCutoffFrequency):
        r"""
        setLowpassCutoffFrequency(RRATool self, double aLowpassCutoffFrequency)

        Parameters
        ----------
        aLowpassCutoffFrequency: double

        """
        return _tools.RRATool_setLowpassCutoffFrequency(self, aLowpassCutoffFrequency)

    def getExternalLoadsFileName(self):
        r"""getExternalLoadsFileName(RRATool self) -> std::string const &"""
        return _tools.RRATool_getExternalLoadsFileName(self)

    def setExternalLoadsFileName(self, aFileName):
        r"""
        setExternalLoadsFileName(RRATool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.RRATool_setExternalLoadsFileName(self, aFileName)

    def run(self):
        r"""run(RRATool self) -> bool"""
        return _tools.RRATool_run(self)

    def getForceStorage(self):
        r"""getForceStorage(RRATool self) -> Storage"""
        return _tools.RRATool_getForceStorage(self)

    def setOriginalForceSet(self, aForceSet):
        r"""
        setOriginalForceSet(RRATool self, ForceSet aForceSet)

        Parameters
        ----------
        aForceSet: OpenSim::ForceSet const &

        """
        return _tools.RRATool_setOriginalForceSet(self, aForceSet)

    def updateFromXMLNode(self, aNode, versionNumber=-1):
        r"""
        updateFromXMLNode(RRATool self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &
        versionNumber: int

        """
        return _tools.RRATool_updateFromXMLNode(self, aNode, versionNumber)

# Register RRATool in _tools:
_tools.RRATool_swigregister(RRATool)
class AnalyzeTool(opensim.simulation.AbstractTool):
    r"""
    An abstract class for specifying the interface for an investigation.

    Author: Frank C. Anderson
    Version: 1.0
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> AnalyzeTool

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.AnalyzeTool_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(AnalyzeTool self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.AnalyzeTool_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _tools.AnalyzeTool_getClassName()

    def clone(self):
        r"""clone(AnalyzeTool self) -> AnalyzeTool"""
        return _tools.AnalyzeTool_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(AnalyzeTool self) -> std::string const &"""
        return _tools.AnalyzeTool_getConcreteClassName(self)
    __swig_destroy__ = _tools.delete_AnalyzeTool

    def __init__(self, *args):
        r"""
        __init__(AnalyzeTool self) -> AnalyzeTool
        __init__(AnalyzeTool self, std::string const & aFileName, bool aLoadModelAndInput=True) -> AnalyzeTool

        Parameters
        ----------
        aFileName: std::string const &
        aLoadModelAndInput: bool

        __init__(AnalyzeTool self, AnalyzeTool aObject) -> AnalyzeTool

        Parameters
        ----------
        aObject: OpenSim::AnalyzeTool const &

        __init__(AnalyzeTool self, Model aModel) -> AnalyzeTool

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        _tools.AnalyzeTool_swiginit(self, _tools.new_AnalyzeTool(*args))

    def setStatesStorage(self, aStore):
        r"""
        setStatesStorage(AnalyzeTool self, Storage aStore)

        Parameters
        ----------
        aStore: OpenSim::Storage &

        """
        return _tools.AnalyzeTool_setStatesStorage(self, aStore)

    @staticmethod
    def createStatesStorageFromCoordinatesAndSpeeds(aModel, aQStore, aUStore):
        r"""
        createStatesStorageFromCoordinatesAndSpeeds(Model aModel, Storage aQStore, Storage aUStore) -> Storage

        Parameters
        ----------
        aModel: OpenSim::Model const &
        aQStore: OpenSim::Storage const &
        aUStore: OpenSim::Storage const &

        """
        return _tools.AnalyzeTool_createStatesStorageFromCoordinatesAndSpeeds(aModel, aQStore, aUStore)

    def getStatesStorage(self):
        r"""getStatesStorage(AnalyzeTool self) -> Storage"""
        return _tools.AnalyzeTool_getStatesStorage(self)

    def getStatesFileName(self):
        r"""getStatesFileName(AnalyzeTool self) -> std::string const &"""
        return _tools.AnalyzeTool_getStatesFileName(self)

    def setStatesFileName(self, aFileName):
        r"""
        setStatesFileName(AnalyzeTool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.AnalyzeTool_setStatesFileName(self, aFileName)

    def getCoordinatesFileName(self):
        r"""getCoordinatesFileName(AnalyzeTool self) -> std::string const &"""
        return _tools.AnalyzeTool_getCoordinatesFileName(self)

    def setCoordinatesFileName(self, aFileName):
        r"""
        setCoordinatesFileName(AnalyzeTool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.AnalyzeTool_setCoordinatesFileName(self, aFileName)

    def getSpeedsFileName(self):
        r"""getSpeedsFileName(AnalyzeTool self) -> std::string const &"""
        return _tools.AnalyzeTool_getSpeedsFileName(self)

    def setSpeedsFileName(self, aFileName):
        r"""
        setSpeedsFileName(AnalyzeTool self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _tools.AnalyzeTool_setSpeedsFileName(self, aFileName)

    def getLowpassCutoffFrequency(self):
        r"""getLowpassCutoffFrequency(AnalyzeTool self) -> double"""
        return _tools.AnalyzeTool_getLowpassCutoffFrequency(self)

    def setLowpassCutoffFrequency(self, aLowpassCutoffFrequency):
        r"""
        setLowpassCutoffFrequency(AnalyzeTool self, double aLowpassCutoffFrequency)

        Parameters
        ----------
        aLowpassCutoffFrequency: double

        """
        return _tools.AnalyzeTool_setLowpassCutoffFrequency(self, aLowpassCutoffFrequency)

    def getLoadModelAndInput(self):
        r"""getLoadModelAndInput(AnalyzeTool self) -> bool"""
        return _tools.AnalyzeTool_getLoadModelAndInput(self)

    def setLoadModelAndInput(self, b):
        r"""
        setLoadModelAndInput(AnalyzeTool self, bool b)

        Parameters
        ----------
        b: bool

        """
        return _tools.AnalyzeTool_setLoadModelAndInput(self, b)

    def setStatesFromMotion(self, s, aMotion, aInDegrees):
        r"""
        setStatesFromMotion(AnalyzeTool self, State s, Storage aMotion, bool aInDegrees)

        Parameters
        ----------
        s: SimTK::State const &
        aMotion: OpenSim::Storage const &
        aInDegrees: bool

        """
        return _tools.AnalyzeTool_setStatesFromMotion(self, s, aMotion, aInDegrees)

    def loadStatesFromFile(self, s):
        r"""
        loadStatesFromFile(AnalyzeTool self, State s)

        Parameters
        ----------
        s: SimTK::State &

        """
        return _tools.AnalyzeTool_loadStatesFromFile(self, s)

    def verifyControlsStates(self):
        r"""verifyControlsStates(AnalyzeTool self)"""
        return _tools.AnalyzeTool_verifyControlsStates(self)

    def setPrintResultFiles(self, aToWrite):
        r"""
        setPrintResultFiles(AnalyzeTool self, bool aToWrite)

        Parameters
        ----------
        aToWrite: bool

        """
        return _tools.AnalyzeTool_setPrintResultFiles(self, aToWrite)

    def disableIntegrationOnlyProbes(self):
        r"""disableIntegrationOnlyProbes(AnalyzeTool self)"""
        return _tools.AnalyzeTool_disableIntegrationOnlyProbes(self)

    def run(self, *args):
        r"""
        run(AnalyzeTool self) -> bool
        run(AnalyzeTool self, bool plotting) -> bool

        Parameters
        ----------
        plotting: bool

        """
        return _tools.AnalyzeTool_run(self, *args)

# Register AnalyzeTool in _tools:
_tools.AnalyzeTool_swigregister(AnalyzeTool)
class InverseKinematicsToolBase(Tool):
    r"""
    A Tool that performs an Inverse Kinematics analysis with a given model.
    Inverse kinematics is the solution of internal coordinates that poses
    the model such that the landmark locations (markers), or orientations of
    Sensor (IMUs) affixed to the model, minimize the weighted least-squares
    error with observations of markers in spatial coordinates, or Sensor
    (IMU) orientations.

    Author: Ayman Habib
    Version: 1.0
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> InverseKinematicsToolBase

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.InverseKinematicsToolBase_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(InverseKinematicsToolBase self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.InverseKinematicsToolBase_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _tools.InverseKinematicsToolBase_getClassName()

    def clone(self):
        r"""clone(InverseKinematicsToolBase self) -> InverseKinematicsToolBase"""
        return _tools.InverseKinematicsToolBase_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(InverseKinematicsToolBase self) -> std::string const &"""
        return _tools.InverseKinematicsToolBase_getConcreteClassName(self)

    def copyProperty_model_file(self, source):
        r"""
        copyProperty_model_file(InverseKinematicsToolBase self, InverseKinematicsToolBase source)

        Parameters
        ----------
        source: OpenSim::InverseKinematicsToolBase::Self const &

        """
        return _tools.InverseKinematicsToolBase_copyProperty_model_file(self, source)

    def append_model_file(self, value):
        r"""
        append_model_file(InverseKinematicsToolBase self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _tools.InverseKinematicsToolBase_append_model_file(self, value)

    def constructProperty_model_file(self, initValue):
        r"""
        constructProperty_model_file(InverseKinematicsToolBase self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _tools.InverseKinematicsToolBase_constructProperty_model_file(self, initValue)

    def get_model_file(self, *args):
        r"""
        get_model_file(InverseKinematicsToolBase self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_model_file(InverseKinematicsToolBase self) -> std::string const &
        """
        return _tools.InverseKinematicsToolBase_get_model_file(self, *args)

    def upd_model_file(self, *args):
        r"""
        upd_model_file(InverseKinematicsToolBase self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_model_file(InverseKinematicsToolBase self) -> std::string &
        """
        return _tools.InverseKinematicsToolBase_upd_model_file(self, *args)

    def set_model_file(self, *args):
        r"""
        set_model_file(InverseKinematicsToolBase self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_model_file(InverseKinematicsToolBase self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _tools.InverseKinematicsToolBase_set_model_file(self, *args)

    def copyProperty_constraint_weight(self, source):
        r"""
        copyProperty_constraint_weight(InverseKinematicsToolBase self, InverseKinematicsToolBase source)

        Parameters
        ----------
        source: OpenSim::InverseKinematicsToolBase::Self const &

        """
        return _tools.InverseKinematicsToolBase_copyProperty_constraint_weight(self, source)

    def append_constraint_weight(self, value):
        r"""
        append_constraint_weight(InverseKinematicsToolBase self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _tools.InverseKinematicsToolBase_append_constraint_weight(self, value)

    def constructProperty_constraint_weight(self, initValue):
        r"""
        constructProperty_constraint_weight(InverseKinematicsToolBase self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _tools.InverseKinematicsToolBase_constructProperty_constraint_weight(self, initValue)

    def get_constraint_weight(self, *args):
        r"""
        get_constraint_weight(InverseKinematicsToolBase self, int i) -> double const

        Parameters
        ----------
        i: int

        get_constraint_weight(InverseKinematicsToolBase self) -> double const &
        """
        return _tools.InverseKinematicsToolBase_get_constraint_weight(self, *args)

    def upd_constraint_weight(self, *args):
        r"""
        upd_constraint_weight(InverseKinematicsToolBase self, int i) -> double

        Parameters
        ----------
        i: int

        upd_constraint_weight(InverseKinematicsToolBase self) -> double &
        """
        return _tools.InverseKinematicsToolBase_upd_constraint_weight(self, *args)

    def set_constraint_weight(self, *args):
        r"""
        set_constraint_weight(InverseKinematicsToolBase self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_constraint_weight(InverseKinematicsToolBase self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _tools.InverseKinematicsToolBase_set_constraint_weight(self, *args)

    def copyProperty_accuracy(self, source):
        r"""
        copyProperty_accuracy(InverseKinematicsToolBase self, InverseKinematicsToolBase source)

        Parameters
        ----------
        source: OpenSim::InverseKinematicsToolBase::Self const &

        """
        return _tools.InverseKinematicsToolBase_copyProperty_accuracy(self, source)

    def append_accuracy(self, value):
        r"""
        append_accuracy(InverseKinematicsToolBase self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _tools.InverseKinematicsToolBase_append_accuracy(self, value)

    def constructProperty_accuracy(self, initValue):
        r"""
        constructProperty_accuracy(InverseKinematicsToolBase self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _tools.InverseKinematicsToolBase_constructProperty_accuracy(self, initValue)

    def get_accuracy(self, *args):
        r"""
        get_accuracy(InverseKinematicsToolBase self, int i) -> double const

        Parameters
        ----------
        i: int

        get_accuracy(InverseKinematicsToolBase self) -> double const &
        """
        return _tools.InverseKinematicsToolBase_get_accuracy(self, *args)

    def upd_accuracy(self, *args):
        r"""
        upd_accuracy(InverseKinematicsToolBase self, int i) -> double

        Parameters
        ----------
        i: int

        upd_accuracy(InverseKinematicsToolBase self) -> double &
        """
        return _tools.InverseKinematicsToolBase_upd_accuracy(self, *args)

    def set_accuracy(self, *args):
        r"""
        set_accuracy(InverseKinematicsToolBase self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_accuracy(InverseKinematicsToolBase self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _tools.InverseKinematicsToolBase_set_accuracy(self, *args)

    def copyProperty_time_range(self, source):
        r"""
        copyProperty_time_range(InverseKinematicsToolBase self, InverseKinematicsToolBase source)

        Parameters
        ----------
        source: OpenSim::InverseKinematicsToolBase::Self const &

        """
        return _tools.InverseKinematicsToolBase_copyProperty_time_range(self, source)

    def get_time_range(self, i):
        r"""
        get_time_range(InverseKinematicsToolBase self, int i) -> double const &

        Parameters
        ----------
        i: int

        """
        return _tools.InverseKinematicsToolBase_get_time_range(self, i)

    def upd_time_range(self, i):
        r"""
        upd_time_range(InverseKinematicsToolBase self, int i) -> double &

        Parameters
        ----------
        i: int

        """
        return _tools.InverseKinematicsToolBase_upd_time_range(self, i)

    def set_time_range(self, i, value):
        r"""
        set_time_range(InverseKinematicsToolBase self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        """
        return _tools.InverseKinematicsToolBase_set_time_range(self, i, value)

    def append_time_range(self, value):
        r"""
        append_time_range(InverseKinematicsToolBase self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _tools.InverseKinematicsToolBase_append_time_range(self, value)

    def copyProperty_report_errors(self, source):
        r"""
        copyProperty_report_errors(InverseKinematicsToolBase self, InverseKinematicsToolBase source)

        Parameters
        ----------
        source: OpenSim::InverseKinematicsToolBase::Self const &

        """
        return _tools.InverseKinematicsToolBase_copyProperty_report_errors(self, source)

    def append_report_errors(self, value):
        r"""
        append_report_errors(InverseKinematicsToolBase self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _tools.InverseKinematicsToolBase_append_report_errors(self, value)

    def constructProperty_report_errors(self, initValue):
        r"""
        constructProperty_report_errors(InverseKinematicsToolBase self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _tools.InverseKinematicsToolBase_constructProperty_report_errors(self, initValue)

    def get_report_errors(self, *args):
        r"""
        get_report_errors(InverseKinematicsToolBase self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_report_errors(InverseKinematicsToolBase self) -> bool const &
        """
        return _tools.InverseKinematicsToolBase_get_report_errors(self, *args)

    def upd_report_errors(self, *args):
        r"""
        upd_report_errors(InverseKinematicsToolBase self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_report_errors(InverseKinematicsToolBase self) -> bool &
        """
        return _tools.InverseKinematicsToolBase_upd_report_errors(self, *args)

    def set_report_errors(self, *args):
        r"""
        set_report_errors(InverseKinematicsToolBase self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_report_errors(InverseKinematicsToolBase self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _tools.InverseKinematicsToolBase_set_report_errors(self, *args)

    def copyProperty_output_motion_file(self, source):
        r"""
        copyProperty_output_motion_file(InverseKinematicsToolBase self, InverseKinematicsToolBase source)

        Parameters
        ----------
        source: OpenSim::InverseKinematicsToolBase::Self const &

        """
        return _tools.InverseKinematicsToolBase_copyProperty_output_motion_file(self, source)

    def append_output_motion_file(self, value):
        r"""
        append_output_motion_file(InverseKinematicsToolBase self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _tools.InverseKinematicsToolBase_append_output_motion_file(self, value)

    def constructProperty_output_motion_file(self, initValue):
        r"""
        constructProperty_output_motion_file(InverseKinematicsToolBase self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _tools.InverseKinematicsToolBase_constructProperty_output_motion_file(self, initValue)

    def get_output_motion_file(self, *args):
        r"""
        get_output_motion_file(InverseKinematicsToolBase self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_output_motion_file(InverseKinematicsToolBase self) -> std::string const &
        """
        return _tools.InverseKinematicsToolBase_get_output_motion_file(self, *args)

    def upd_output_motion_file(self, *args):
        r"""
        upd_output_motion_file(InverseKinematicsToolBase self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_output_motion_file(InverseKinematicsToolBase self) -> std::string &
        """
        return _tools.InverseKinematicsToolBase_upd_output_motion_file(self, *args)

    def set_output_motion_file(self, *args):
        r"""
        set_output_motion_file(InverseKinematicsToolBase self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_output_motion_file(InverseKinematicsToolBase self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _tools.InverseKinematicsToolBase_set_output_motion_file(self, *args)
    __swig_destroy__ = _tools.delete_InverseKinematicsToolBase

    def setModel(self, aModel):
        r"""
        setModel(InverseKinematicsToolBase self, Model aModel)

        Parameters
        ----------
        aModel: OpenSim::Model &

        """
        return _tools.InverseKinematicsToolBase_setModel(self, aModel)

    def setStartTime(self, d):
        r"""
        setStartTime(InverseKinematicsToolBase self, double d)

        Parameters
        ----------
        d: double

        """
        return _tools.InverseKinematicsToolBase_setStartTime(self, d)

    def getStartTime(self):
        r"""getStartTime(InverseKinematicsToolBase self) -> double"""
        return _tools.InverseKinematicsToolBase_getStartTime(self)

    def setEndTime(self, d):
        r"""
        setEndTime(InverseKinematicsToolBase self, double d)

        Parameters
        ----------
        d: double

        """
        return _tools.InverseKinematicsToolBase_setEndTime(self, d)

    def getEndTime(self):
        r"""getEndTime(InverseKinematicsToolBase self) -> double"""
        return _tools.InverseKinematicsToolBase_getEndTime(self)

    def setOutputMotionFileName(self, aOutputMotionFileName):
        r"""
        setOutputMotionFileName(InverseKinematicsToolBase self, std::string const aOutputMotionFileName)

        Parameters
        ----------
        aOutputMotionFileName: std::string const

        """
        return _tools.InverseKinematicsToolBase_setOutputMotionFileName(self, aOutputMotionFileName)

    def getOutputMotionFileName(self):
        r"""getOutputMotionFileName(InverseKinematicsToolBase self) -> std::string"""
        return _tools.InverseKinematicsToolBase_getOutputMotionFileName(self)

# Register InverseKinematicsToolBase in _tools:
_tools.InverseKinematicsToolBase_swigregister(InverseKinematicsToolBase)
class InverseKinematicsTool(InverseKinematicsToolBase):
    r"""
    A Tool that performs an Inverse Kinematics analysis with a given model.
    Inverse kinematics is the solution of internal coordinates that poses
    the model such that the landmark locations (markers), affixed to the model,
    minimize the weighted least-squares error with observations of markers
    in spatial coordinates. Observations of coordinates can also be included.

    Author: Ajay Seth
    Version: 1.0
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> InverseKinematicsTool

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.InverseKinematicsTool_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(InverseKinematicsTool self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.InverseKinematicsTool_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _tools.InverseKinematicsTool_getClassName()

    def clone(self):
        r"""clone(InverseKinematicsTool self) -> InverseKinematicsTool"""
        return _tools.InverseKinematicsTool_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(InverseKinematicsTool self) -> std::string const &"""
        return _tools.InverseKinematicsTool_getConcreteClassName(self)

    def copyProperty_IKTaskSet(self, source):
        r"""
        copyProperty_IKTaskSet(InverseKinematicsTool self, InverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::InverseKinematicsTool::Self const &

        """
        return _tools.InverseKinematicsTool_copyProperty_IKTaskSet(self, source)

    def append_IKTaskSet(self, value):
        r"""
        append_IKTaskSet(InverseKinematicsTool self, IKTaskSet value) -> int

        Parameters
        ----------
        value: OpenSim::IKTaskSet const &

        """
        return _tools.InverseKinematicsTool_append_IKTaskSet(self, value)

    def constructProperty_IKTaskSet(self, initValue):
        r"""
        constructProperty_IKTaskSet(InverseKinematicsTool self, IKTaskSet initValue)

        Parameters
        ----------
        initValue: OpenSim::IKTaskSet const &

        """
        return _tools.InverseKinematicsTool_constructProperty_IKTaskSet(self, initValue)

    def get_IKTaskSet(self, *args):
        r"""
        get_IKTaskSet(InverseKinematicsTool self, int i) -> IKTaskSet

        Parameters
        ----------
        i: int

        get_IKTaskSet(InverseKinematicsTool self) -> IKTaskSet
        """
        return _tools.InverseKinematicsTool_get_IKTaskSet(self, *args)

    def upd_IKTaskSet(self, *args):
        r"""
        upd_IKTaskSet(InverseKinematicsTool self, int i) -> IKTaskSet

        Parameters
        ----------
        i: int

        upd_IKTaskSet(InverseKinematicsTool self) -> IKTaskSet
        """
        return _tools.InverseKinematicsTool_upd_IKTaskSet(self, *args)

    def set_IKTaskSet(self, *args):
        r"""
        set_IKTaskSet(InverseKinematicsTool self, int i, IKTaskSet value)

        Parameters
        ----------
        i: int
        value: OpenSim::IKTaskSet const &

        set_IKTaskSet(InverseKinematicsTool self, IKTaskSet value)

        Parameters
        ----------
        value: OpenSim::IKTaskSet const &

        """
        return _tools.InverseKinematicsTool_set_IKTaskSet(self, *args)

    def copyProperty_marker_file(self, source):
        r"""
        copyProperty_marker_file(InverseKinematicsTool self, InverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::InverseKinematicsTool::Self const &

        """
        return _tools.InverseKinematicsTool_copyProperty_marker_file(self, source)

    def append_marker_file(self, value):
        r"""
        append_marker_file(InverseKinematicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _tools.InverseKinematicsTool_append_marker_file(self, value)

    def constructProperty_marker_file(self, initValue):
        r"""
        constructProperty_marker_file(InverseKinematicsTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _tools.InverseKinematicsTool_constructProperty_marker_file(self, initValue)

    def get_marker_file(self, *args):
        r"""
        get_marker_file(InverseKinematicsTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_marker_file(InverseKinematicsTool self) -> std::string const &
        """
        return _tools.InverseKinematicsTool_get_marker_file(self, *args)

    def upd_marker_file(self, *args):
        r"""
        upd_marker_file(InverseKinematicsTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_marker_file(InverseKinematicsTool self) -> std::string &
        """
        return _tools.InverseKinematicsTool_upd_marker_file(self, *args)

    def set_marker_file(self, *args):
        r"""
        set_marker_file(InverseKinematicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_marker_file(InverseKinematicsTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _tools.InverseKinematicsTool_set_marker_file(self, *args)

    def copyProperty_coordinate_file(self, source):
        r"""
        copyProperty_coordinate_file(InverseKinematicsTool self, InverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::InverseKinematicsTool::Self const &

        """
        return _tools.InverseKinematicsTool_copyProperty_coordinate_file(self, source)

    def append_coordinate_file(self, value):
        r"""
        append_coordinate_file(InverseKinematicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _tools.InverseKinematicsTool_append_coordinate_file(self, value)

    def constructProperty_coordinate_file(self, initValue):
        r"""
        constructProperty_coordinate_file(InverseKinematicsTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _tools.InverseKinematicsTool_constructProperty_coordinate_file(self, initValue)

    def get_coordinate_file(self, *args):
        r"""
        get_coordinate_file(InverseKinematicsTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_coordinate_file(InverseKinematicsTool self) -> std::string const &
        """
        return _tools.InverseKinematicsTool_get_coordinate_file(self, *args)

    def upd_coordinate_file(self, *args):
        r"""
        upd_coordinate_file(InverseKinematicsTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_coordinate_file(InverseKinematicsTool self) -> std::string &
        """
        return _tools.InverseKinematicsTool_upd_coordinate_file(self, *args)

    def set_coordinate_file(self, *args):
        r"""
        set_coordinate_file(InverseKinematicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_coordinate_file(InverseKinematicsTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _tools.InverseKinematicsTool_set_coordinate_file(self, *args)

    def copyProperty_report_marker_locations(self, source):
        r"""
        copyProperty_report_marker_locations(InverseKinematicsTool self, InverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::InverseKinematicsTool::Self const &

        """
        return _tools.InverseKinematicsTool_copyProperty_report_marker_locations(self, source)

    def append_report_marker_locations(self, value):
        r"""
        append_report_marker_locations(InverseKinematicsTool self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _tools.InverseKinematicsTool_append_report_marker_locations(self, value)

    def constructProperty_report_marker_locations(self, initValue):
        r"""
        constructProperty_report_marker_locations(InverseKinematicsTool self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _tools.InverseKinematicsTool_constructProperty_report_marker_locations(self, initValue)

    def get_report_marker_locations(self, *args):
        r"""
        get_report_marker_locations(InverseKinematicsTool self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_report_marker_locations(InverseKinematicsTool self) -> bool const &
        """
        return _tools.InverseKinematicsTool_get_report_marker_locations(self, *args)

    def upd_report_marker_locations(self, *args):
        r"""
        upd_report_marker_locations(InverseKinematicsTool self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_report_marker_locations(InverseKinematicsTool self) -> bool &
        """
        return _tools.InverseKinematicsTool_upd_report_marker_locations(self, *args)

    def set_report_marker_locations(self, *args):
        r"""
        set_report_marker_locations(InverseKinematicsTool self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_report_marker_locations(InverseKinematicsTool self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _tools.InverseKinematicsTool_set_report_marker_locations(self, *args)
    __swig_destroy__ = _tools.delete_InverseKinematicsTool

    def __init__(self, *args):
        r"""
        __init__(InverseKinematicsTool self) -> InverseKinematicsTool
        __init__(InverseKinematicsTool self, std::string const & aFileName, bool aLoadModel=True) -> InverseKinematicsTool

        Parameters
        ----------
        aFileName: std::string const &
        aLoadModel: bool

        """
        _tools.InverseKinematicsTool_swiginit(self, _tools.new_InverseKinematicsTool(*args))

    def updateFromXMLNode(self, aNode, versionNumber=-1):
        r"""
        updateFromXMLNode(InverseKinematicsTool self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &
        versionNumber: int

        """
        return _tools.InverseKinematicsTool_updateFromXMLNode(self, aNode, versionNumber)

    def setMarkerDataFileName(self, markerDataFileName):
        r"""
        setMarkerDataFileName(InverseKinematicsTool self, std::string const & markerDataFileName)

        Parameters
        ----------
        markerDataFileName: std::string const &

        """
        return _tools.InverseKinematicsTool_setMarkerDataFileName(self, markerDataFileName)

    def getMarkerDataFileName(self):
        r"""getMarkerDataFileName(InverseKinematicsTool self) -> std::string const &"""
        return _tools.InverseKinematicsTool_getMarkerDataFileName(self)

    def setCoordinateFileName(self, coordDataFileName):
        r"""
        setCoordinateFileName(InverseKinematicsTool self, std::string const & coordDataFileName)

        Parameters
        ----------
        coordDataFileName: std::string const &

        """
        return _tools.InverseKinematicsTool_setCoordinateFileName(self, coordDataFileName)

    def getCoordinateFileName(self):
        r"""getCoordinateFileName(InverseKinematicsTool self) -> std::string const &"""
        return _tools.InverseKinematicsTool_getCoordinateFileName(self)

    def getIKTaskSet(self):
        r"""getIKTaskSet(InverseKinematicsTool self) -> IKTaskSet"""
        return _tools.InverseKinematicsTool_getIKTaskSet(self)

    def run(self):
        r"""run(InverseKinematicsTool self) -> bool"""
        return _tools.InverseKinematicsTool_run(self)

    def populateReferences(self, markersReference, coordinateReferences):
        r"""
        populateReferences(InverseKinematicsTool self, MarkersReference markersReference, SimTKArrayCoordinateReference coordinateReferences)

        Parameters
        ----------
        markersReference: OpenSim::MarkersReference &
        coordinateReferences: SimTK::Array_< OpenSim::CoordinateReference,unsigned int > &

        """
        return _tools.InverseKinematicsTool_populateReferences(self, markersReference, coordinateReferences)

# Register InverseKinematicsTool in _tools:
_tools.InverseKinematicsTool_swigregister(InverseKinematicsTool)
class OrientationWeightSet(opensim.simulation.SetOientationWeights):
    r"""Proxy of C++ OpenSim::OrientationWeightSet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> OrientationWeightSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.OrientationWeightSet_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(OrientationWeightSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.OrientationWeightSet_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _tools.OrientationWeightSet_getClassName()

    def clone(self):
        r"""clone(OrientationWeightSet self) -> OrientationWeightSet"""
        return _tools.OrientationWeightSet_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(OrientationWeightSet self) -> std::string const &"""
        return _tools.OrientationWeightSet_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(OrientationWeightSet self) -> OrientationWeightSet
        __init__(OrientationWeightSet self, OrientationWeightSet arg2) -> OrientationWeightSet

        Parameters
        ----------
        arg2: OpenSim::OrientationWeightSet const &

        __init__(OrientationWeightSet self, OrientationWeightSet arg2) -> OrientationWeightSet

        Parameters
        ----------
        arg2: OpenSim::OrientationWeightSet &&

        """
        _tools.OrientationWeightSet_swiginit(self, _tools.new_OrientationWeightSet(*args))
    __swig_destroy__ = _tools.delete_OrientationWeightSet

# Register OrientationWeightSet in _tools:
_tools.OrientationWeightSet_swigregister(OrientationWeightSet)
class IMUInverseKinematicsTool(InverseKinematicsToolBase):
    r"""
    A Study that performs an Inverse Kinematics analysis with a given model.
    Inverse kinematics is the solution of internal coordinates that poses
    the model such that the body rotations (as measured by IMUs) affixed to the
    model minimize the weighted least-squares error with observations of IMU
    orientations in their spatial coordinates.

    Author: Ajay Seth
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> IMUInverseKinematicsTool

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _tools.IMUInverseKinematicsTool_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(IMUInverseKinematicsTool self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _tools.IMUInverseKinematicsTool_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _tools.IMUInverseKinematicsTool_getClassName()

    def clone(self):
        r"""clone(IMUInverseKinematicsTool self) -> IMUInverseKinematicsTool"""
        return _tools.IMUInverseKinematicsTool_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(IMUInverseKinematicsTool self) -> std::string const &"""
        return _tools.IMUInverseKinematicsTool_getConcreteClassName(self)

    def copyProperty_orientations_file(self, source):
        r"""
        copyProperty_orientations_file(IMUInverseKinematicsTool self, IMUInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::IMUInverseKinematicsTool::Self const &

        """
        return _tools.IMUInverseKinematicsTool_copyProperty_orientations_file(self, source)

    def append_orientations_file(self, value):
        r"""
        append_orientations_file(IMUInverseKinematicsTool self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _tools.IMUInverseKinematicsTool_append_orientations_file(self, value)

    def constructProperty_orientations_file(self, initValue):
        r"""
        constructProperty_orientations_file(IMUInverseKinematicsTool self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _tools.IMUInverseKinematicsTool_constructProperty_orientations_file(self, initValue)

    def get_orientations_file(self, *args):
        r"""
        get_orientations_file(IMUInverseKinematicsTool self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_orientations_file(IMUInverseKinematicsTool self) -> std::string const &
        """
        return _tools.IMUInverseKinematicsTool_get_orientations_file(self, *args)

    def upd_orientations_file(self, *args):
        r"""
        upd_orientations_file(IMUInverseKinematicsTool self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_orientations_file(IMUInverseKinematicsTool self) -> std::string &
        """
        return _tools.IMUInverseKinematicsTool_upd_orientations_file(self, *args)

    def set_orientations_file(self, *args):
        r"""
        set_orientations_file(IMUInverseKinematicsTool self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_orientations_file(IMUInverseKinematicsTool self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _tools.IMUInverseKinematicsTool_set_orientations_file(self, *args)

    def copyProperty_sensor_to_opensim_rotations(self, source):
        r"""
        copyProperty_sensor_to_opensim_rotations(IMUInverseKinematicsTool self, IMUInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::IMUInverseKinematicsTool::Self const &

        """
        return _tools.IMUInverseKinematicsTool_copyProperty_sensor_to_opensim_rotations(self, source)

    def append_sensor_to_opensim_rotations(self, value):
        r"""
        append_sensor_to_opensim_rotations(IMUInverseKinematicsTool self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _tools.IMUInverseKinematicsTool_append_sensor_to_opensim_rotations(self, value)

    def constructProperty_sensor_to_opensim_rotations(self, initValue):
        r"""
        constructProperty_sensor_to_opensim_rotations(IMUInverseKinematicsTool self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _tools.IMUInverseKinematicsTool_constructProperty_sensor_to_opensim_rotations(self, initValue)

    def get_sensor_to_opensim_rotations(self, *args):
        r"""
        get_sensor_to_opensim_rotations(IMUInverseKinematicsTool self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_sensor_to_opensim_rotations(IMUInverseKinematicsTool self) -> Vec3
        """
        return _tools.IMUInverseKinematicsTool_get_sensor_to_opensim_rotations(self, *args)

    def upd_sensor_to_opensim_rotations(self, *args):
        r"""
        upd_sensor_to_opensim_rotations(IMUInverseKinematicsTool self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_sensor_to_opensim_rotations(IMUInverseKinematicsTool self) -> Vec3
        """
        return _tools.IMUInverseKinematicsTool_upd_sensor_to_opensim_rotations(self, *args)

    def set_sensor_to_opensim_rotations(self, *args):
        r"""
        set_sensor_to_opensim_rotations(IMUInverseKinematicsTool self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_sensor_to_opensim_rotations(IMUInverseKinematicsTool self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _tools.IMUInverseKinematicsTool_set_sensor_to_opensim_rotations(self, *args)

    def copyProperty_orientation_weights(self, source):
        r"""
        copyProperty_orientation_weights(IMUInverseKinematicsTool self, IMUInverseKinematicsTool source)

        Parameters
        ----------
        source: OpenSim::IMUInverseKinematicsTool::Self const &

        """
        return _tools.IMUInverseKinematicsTool_copyProperty_orientation_weights(self, source)

    def append_orientation_weights(self, value):
        r"""
        append_orientation_weights(IMUInverseKinematicsTool self, OrientationWeightSet value) -> int

        Parameters
        ----------
        value: OpenSim::OrientationWeightSet const &

        """
        return _tools.IMUInverseKinematicsTool_append_orientation_weights(self, value)

    def constructProperty_orientation_weights(self, initValue):
        r"""
        constructProperty_orientation_weights(IMUInverseKinematicsTool self, OrientationWeightSet initValue)

        Parameters
        ----------
        initValue: OpenSim::OrientationWeightSet const &

        """
        return _tools.IMUInverseKinematicsTool_constructProperty_orientation_weights(self, initValue)

    def get_orientation_weights(self, *args):
        r"""
        get_orientation_weights(IMUInverseKinematicsTool self, int i) -> OrientationWeightSet

        Parameters
        ----------
        i: int

        get_orientation_weights(IMUInverseKinematicsTool self) -> OrientationWeightSet
        """
        return _tools.IMUInverseKinematicsTool_get_orientation_weights(self, *args)

    def upd_orientation_weights(self, *args):
        r"""
        upd_orientation_weights(IMUInverseKinematicsTool self, int i) -> OrientationWeightSet

        Parameters
        ----------
        i: int

        upd_orientation_weights(IMUInverseKinematicsTool self) -> OrientationWeightSet
        """
        return _tools.IMUInverseKinematicsTool_upd_orientation_weights(self, *args)

    def set_orientation_weights(self, *args):
        r"""
        set_orientation_weights(IMUInverseKinematicsTool self, int i, OrientationWeightSet value)

        Parameters
        ----------
        i: int
        value: OpenSim::OrientationWeightSet const &

        set_orientation_weights(IMUInverseKinematicsTool self, OrientationWeightSet value)

        Parameters
        ----------
        value: OpenSim::OrientationWeightSet const &

        """
        return _tools.IMUInverseKinematicsTool_set_orientation_weights(self, *args)
    __swig_destroy__ = _tools.delete_IMUInverseKinematicsTool

    def __init__(self, *args):
        r"""
        __init__(IMUInverseKinematicsTool self) -> IMUInverseKinematicsTool
        __init__(IMUInverseKinematicsTool self, std::string const & setupFile) -> IMUInverseKinematicsTool

        Parameters
        ----------
        setupFile: std::string const &

        """
        _tools.IMUInverseKinematicsTool_swiginit(self, _tools.new_IMUInverseKinematicsTool(*args))

    def run(self, *args):
        r"""
        run(IMUInverseKinematicsTool self, bool visualizeResults) -> bool

        Parameters
        ----------
        visualizeResults: bool

        run(IMUInverseKinematicsTool self) -> bool
        """
        return _tools.IMUInverseKinematicsTool_run(self, *args)

    @staticmethod
    def loadMarkersFile(markerFile):
        r"""
        loadMarkersFile(std::string const & markerFile) -> TimeSeriesTableVec3

        Parameters
        ----------
        markerFile: std::string const &

        """
        return _tools.IMUInverseKinematicsTool_loadMarkersFile(markerFile)

    def runInverseKinematicsWithOrientationsFromFile(self, model, quaternionStoFileName, visualizeResults=False):
        r"""
        runInverseKinematicsWithOrientationsFromFile(IMUInverseKinematicsTool self, Model model, std::string const & quaternionStoFileName, bool visualizeResults=False)

        Parameters
        ----------
        model: OpenSim::Model &
        quaternionStoFileName: std::string const &
        visualizeResults: bool

        """
        return _tools.IMUInverseKinematicsTool_runInverseKinematicsWithOrientationsFromFile(self, model, quaternionStoFileName, visualizeResults)

# Register IMUInverseKinematicsTool in _tools:
_tools.IMUInverseKinematicsTool_swigregister(IMUInverseKinematicsTool)

