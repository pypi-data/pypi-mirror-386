from logging.config import fileConfig
import sys
from pathlib import Path

from sqlalchemy import engine_from_config
from sqlalchemy import pool

from alembic import context

# Add project root to path to allow imports
project_root = Path(__file__).parent.parent
if str(project_root) not in sys.path:
    sys.path.insert(0, str(project_root))

# Discover and load beans
from vega.di import get_container
from vega.discovery import discover_beans

# Auto-discover beans from the project
# Determine base package name from project structure
base_package = None
for potential_name in ['app', 'src', project_root.name]:
    potential_path = project_root / potential_name
    if potential_path.exists() and potential_path.is_dir():
        if any(potential_path.glob("*.py")):
            base_package = potential_name
            break

if base_package is None:
    base_package = project_root.name.replace('-', '_').replace(' ', '_')

# Discover beans to load DatabaseManager and models
try:
    discover_beans(base_package)
except Exception as e:
    print(f"Warning: Failed to discover beans: {e}")

# Get Base metadata from DatabaseManager
container = get_container()
Base = None
database_url = None

# Search for DatabaseManager in registered beans
for interface, implementation in container._services.items():
    if 'DatabaseManager' in implementation.__name__:
        try:
            # Get the Base class from the module
            import importlib
            import inspect

            # Get the module where DatabaseManager is defined
            module = inspect.getmodule(implementation)
            if module:
                # Look for Base class in the same module
                for name, obj in inspect.getmembers(module):
                    if inspect.isclass(obj) and name == 'Base':
                        Base = obj
                        break

                # Try to get database_url from DatabaseManager instance
                try:
                    db_manager = container.resolve(interface)
                    if hasattr(db_manager, 'engine') and hasattr(db_manager.engine, 'url'):
                        database_url = str(db_manager.engine.url)
                except Exception:
                    pass

            if Base is not None:
                break
        except Exception as e:
            print(f"Warning: Failed to get Base from {implementation.__name__}: {e}")

# Fallback: try to import from common locations
if Base is None:
    try:
        from infrastructure.database_manager import Base
    except ImportError:
        try:
            from domain.database_manager import Base
        except ImportError:
            try:
                from application.database_manager import Base
            except ImportError:
                raise ImportError(
                    "Could not find Base class. Make sure your DatabaseManager "
                    "is decorated with @bean and located in a discoverable package."
                )

# Try to get database URL from settings if not found in DatabaseManager
if database_url is None:
    try:
        from settings import settings
        database_url = settings.database_url
    except ImportError:
        # If settings not found, use environment variable or default
        import os
        database_url = os.getenv('DATABASE_URL', 'sqlite+aiosqlite:///./db.sqlite')

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# add your model's MetaData object here
# for 'autogenerate' support
target_metadata = Base.metadata

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.


def get_url():
    """Get database URL, converting async drivers to sync for Alembic"""
    url = database_url
    # Convert async SQLite driver to sync for Alembic
    url = url.replace("sqlite+aiosqlite:", "sqlite:")
    # Convert async PostgreSQL driver to sync for Alembic
    url = url.replace("postgresql+asyncpg:", "postgresql:")
    # Convert async MySQL driver to sync for Alembic
    url = url.replace("mysql+aiomysql:", "mysql:")
    return url


def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = get_url()
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online() -> None:
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """
    configuration = config.get_section(config.config_ini_section)
    configuration["sqlalchemy.url"] = get_url()

    connectable = engine_from_config(
        configuration,
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection, target_metadata=target_metadata
        )

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
