"""{{ class_name }} middleware for Vega Web application"""
from typing import Optional

from vega.web import MiddlewarePhase, Request, Response, RouteMiddleware


class {{ class_name }}Middleware(RouteMiddleware):
    """
    {{ class_name }} middleware.

    This middleware runs in the Vega route middleware pipeline.

    Usage:
        from vega.web import middleware
        from presentation.web.middleware.{{ file_name }} import {{ class_name }}Middleware

        @router.post("/example")
        @middleware({{ class_name }}Middleware())
        async def example_endpoint():
            return {"message": "ok"}
    """

    def __init__(self):
        super().__init__(phase=MiddlewarePhase.BOTH)
        # Add any initialization logic here
        # Example: self.audit_header = "X-Audit-ID"

    async def before(self, request: Request) -> Optional[Response]:
        """
        Execute code before the route handler.

        Return a Response to short-circuit the pipeline, or None to continue.
        """
        # Example: validate header and stop request
        # from vega.web import JSONResponse, status
        # if not request.headers.get("x-custom"):
        #     return JSONResponse(
        #         {"detail": "Missing X-Custom header"},
        #         status_code=status.HTTP_400_BAD_REQUEST,
        #     )

        # Example: store data on request state for later middleware/handler
        # request.state.audit_id = generate_request_id()
        return None

    async def after(self, request: Request, response: Response) -> Response:
        """
        Execute code after the route handler.

        Always return the (modified) response object.
        """
        # Example: add header using previously stored state
        # if hasattr(request.state, "audit_id") and hasattr(response, "headers"):
        #     response.headers[self.audit_header] = request.state.audit_id

        return response
