"""Dependency Injection configuration for {{ project_name }}"""
import logging
import sys

from vega.di import Container, set_container
from vega.discovery import discover_beans

# Configure logging for bean discovery debugging
logger = logging.getLogger(__name__)

# Domain interfaces (Abstract)
# Example:
# from {{ project_name }}.domain.repositories.user_repository import UserRepository

# Infrastructure implementations (Concrete)
# Example:
# from {{ project_name }}.infrastructure.repositories.memory_user_repository import MemoryUserRepository

# Uncomment and configure database manager if using SQLAlchemy

# from settings import settings
# from infrastructure.database_manager import DatabaseManager
# db_manager = DatabaseManager(url=settings.database_url)

# DI Registry: Manual registration (optional - for instances or explicit mappings)
SERVICES = {
    # Example - Manual registration:
    # UserRepository: MemoryUserRepository,
    # DatabaseManager: lambda: db_manager,

    # Note: Classes decorated with @bean are auto-discovered and don't need manual registration
}

# Create and set container
container = Container(SERVICES)
set_container(container)

# Auto-discover @bean decorated classes
# This scans domain/, application/, and infrastructure/ packages
# for classes decorated with @bean and registers them automatically
try:
    logger.debug(f"Starting bean auto-discovery for package: {{ project_name }}")
    logger.debug(f"Current sys.path: {sys.path}")
    discovered = discover_beans("{{ project_name }}")
    logger.info(f"Successfully discovered {discovered} bean(s) for {{ project_name }}")
except Exception as e:
    # Fallback to manual registration if auto-discovery fails
    # This ensures backward compatibility with older project structures
    logger.warning(
        f"Bean auto-discovery failed for {{ project_name }}: {type(e).__name__}: {e}\n"
        f"Current working directory: {__import__('pathlib').Path.cwd()}\n"
        f"sys.path: {sys.path}\n"
        f"Falling back to manual bean registration in SERVICES dict"
    )

# To customize auto-discovery packages:
# discover_beans("{{ project_name }}", subpackages=["repositories", "services"])

# To disable auto-discovery, comment out the discover_beans() call above
# and use manual registration in SERVICES dict instead
