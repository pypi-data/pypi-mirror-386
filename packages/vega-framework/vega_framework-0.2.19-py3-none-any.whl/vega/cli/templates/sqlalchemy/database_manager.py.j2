"""Database manager for SQLAlchemy"""
from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker, AsyncSession
from sqlalchemy.orm import DeclarativeBase
from contextlib import asynccontextmanager

from vega.di import bean


class Base(DeclarativeBase):
    """Base class for all SQLAlchemy models"""
    pass


@bean
class DatabaseManager:
    """Manages database connections and sessions"""

    def __init__(self, url: str):
        self.engine = create_async_engine(url, echo=False)
        self.SessionLocal = async_sessionmaker(
            self.engine,
            class_=AsyncSession,
            expire_on_commit=False
        )

    @asynccontextmanager
    async def get_session(self):
        """Provide a transactional scope for database operations"""
        async with self.SessionLocal() as session:
            try:
                yield session
                await session.commit()
            except Exception:
                await session.rollback()
                raise

    async def create_tables(self):
        """Create all tables defined in Base metadata"""
        async with self.engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)

    async def drop_tables(self):
        """Drop all tables defined in Base metadata"""
        async with self.engine.begin() as conn:
            await conn.run_sync(Base.metadata.drop_all)
