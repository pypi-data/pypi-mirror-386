# {{ project_name }}

Vega Framework application with Clean Architecture.

## Structure

```
{{ project_name }}/
â”œâ”€â”€ domain/              # ðŸ”µ Business logic (framework-independent)
â”‚   â”œâ”€â”€ entities/        # Business entities
â”‚   â””â”€â”€ repositories/    # Repository interfaces
â”‚
â”œâ”€â”€ application/         # ðŸŸ¢ Use cases & workflows
â”‚   â”œâ”€â”€ interactors/     # Use cases (business operations)
â”‚   â”œâ”€â”€ services/        # Service interfaces (outbound ports)
â”‚   â””â”€â”€ mediators/       # Complex workflows
â”‚
â”œâ”€â”€ infrastructure/      # ðŸŸ¡ Concrete implementations
â”‚   â”œâ”€â”€ repositories/    # Repository implementations
â”‚   â””â”€â”€ services/        # Service implementations
â”‚
â”œâ”€â”€ presentation/        # Delivery mechanisms
â”‚   â”œâ”€â”€ web/            # Vega Web interface (if added)
â”‚   â”‚   â”œâ”€â”€ routes/     # HTTP endpoints
â”‚   â”‚   â”œâ”€â”€ app.py      # Vega app factory
â”‚   â”‚   â””â”€â”€ main.py     # ASGI entrypoint
â”‚   â””â”€â”€ cli/            # CLI commands
â”‚
â”œâ”€â”€ config.py            # Dependency injection setup
â”œâ”€â”€ settings.py          # Application configuration
â””â”€â”€ main.py              # Application entry point
```

## Getting Started

```bash
# Install dependencies
poetry install

# Setup environment
cp .env.example .env
# Edit .env with your configuration

# Run CLI commands
python main.py hello
python main.py greet --name John

# If using web template, run the web server
vega web run
vega web run --reload  # With auto-reload
# Visit http://localhost:8000/api/health/status

# Run tests
poetry run pytest
```

## Development with Vega CLI

### Generate Components

Generate Clean Architecture components quickly:

```bash
# Domain layer
vega generate entity Product
vega generate repository ProductRepository --impl memory

# Application layer
vega generate interactor CreateProduct
vega generate service EmailService
vega generate mediator CheckoutFlow

# Presentation layer (web)
vega generate router Product
vega generate middleware Logging

# Presentation layer (CLI)
vega generate command CreateUser
vega generate command ListUsers --impl sync
```

### Add Features

Add Vega Web support to your project:

```bash
vega add web
```

### Add Database Support

Add SQLAlchemy and Alembic for database management:

```bash
vega add sqlalchemy  # or: vega add db
```

Then manage your database:

```bash
# Initialize database
vega migrate init

# Create migrations
vega migrate create -m "Add users table"

# Apply migrations
vega migrate upgrade

# Rollback migrations
vega migrate downgrade
```

### Generate Database Models

After adding SQLAlchemy support:

```bash
vega generate model User
vega generate model Product
```

## Using Async Commands

Vega Framework supports async/await in CLI commands, allowing you to execute interactors seamlessly:

```python
import click
from vega.cli.utils import async_command

@click.command()
@click.option('--name', required=True)
@async_command
async def create_user(name: str):
    """Create a user using an interactor"""
    import config  # Initialize DI container
    from application.interactors.create_user import CreateUser

    user = await CreateUser(name=name)
    click.echo(f"Created: {user.name}")
```

This allows the same async business logic to work in both CLI and web contexts (Vega Web).

## Project Commands Quick Reference

```bash
# Component generation
vega generate entity <Name>
vega generate repository <Name> [--impl memory|sql]
vega generate interactor <Name>
vega generate mediator <Name>
vega generate command <Name> [--impl sync]

# Feature management
vega add web
vega add sqlalchemy

# Database management (requires SQLAlchemy)
vega migrate init
vega migrate create -m "message"
vega migrate upgrade
vega migrate downgrade

# Project validation
vega doctor

# Framework updates
vega update
vega update --check
```

## Vega Framework

This project uses [Vega Framework](https://github.com/robertosixty1/vega-framework) for Clean Architecture:

- âœ… Automatic Dependency Injection
- âœ… Clean Architecture patterns (4 layers: Domain, Application, Infrastructure, Presentation)
- âœ… Type-safe with Python type hints
- âœ… Async/await support for CLI and web
- âœ… Easy to test and maintain
- âœ… Framework-agnostic business logic

## Documentation

- [Vega Framework Docs](https://vega-framework.readthedocs.io/)
- [Clean Architecture](https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html)
- [Vega CLI Reference](https://github.com/robertosixty1/vega-framework#cli-commands)
