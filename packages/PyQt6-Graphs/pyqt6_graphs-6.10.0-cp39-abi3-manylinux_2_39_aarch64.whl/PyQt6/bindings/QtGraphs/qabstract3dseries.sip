// qabstract3dseries.sip generated by MetaSIP
//
// This file is part of the QtGraphs Python extension module.
//
// Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6-Graphs.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QAbstract3DSeries : public QObject /NoDefaultCtors/
{
%TypeHeaderCode
#include <qabstract3dseries.h>
%End

public:
    enum class SeriesType
    {
        None,
        Bar,
        Scatter,
        Surface,
    };

    enum class Mesh
    {
        UserDefined,
        Bar,
        Cube,
        Pyramid,
        Cone,
        Cylinder,
        BevelBar,
        BevelCube,
        Sphere,
        Minimal,
        Arrow,
        Point,
    };

    virtual ~QAbstract3DSeries();
    QAbstract3DSeries::SeriesType type() const;
    void setItemLabelFormat(const QString &format);
    QString itemLabelFormat() const;
    void setVisible(bool visible);
    bool isVisible() const;
    void setMesh(QAbstract3DSeries::Mesh mesh);
    QAbstract3DSeries::Mesh mesh() const;
    void setMeshSmooth(bool enable);
    bool isMeshSmooth() const;
    void setMeshRotation(const QQuaternion &rotation);
    QQuaternion meshRotation() const;
    void setMeshAxisAndAngle(QVector3D axis, float angle);
    void setUserDefinedMesh(const QString &fileName);
    QString userDefinedMesh() const;
    void setColorStyle(QGraphsTheme::ColorStyle style);
    QGraphsTheme::ColorStyle colorStyle() const;
    void setBaseColor(QColor color);
    QColor baseColor() const;
    void setBaseGradient(const QLinearGradient &gradient);
    QLinearGradient baseGradient() const;
    void setSingleHighlightColor(QColor color);
    QColor singleHighlightColor() const;
    void setSingleHighlightGradient(const QLinearGradient &gradient);
    QLinearGradient singleHighlightGradient() const;
    void setMultiHighlightColor(QColor color);
    QColor multiHighlightColor() const;
    void setMultiHighlightGradient(const QLinearGradient &gradient);
    QLinearGradient multiHighlightGradient() const;
    void setName(const QString &name);
    QString name() const;
    QString itemLabel();
    void setItemLabelVisible(bool visible);
    bool isItemLabelVisible() const;

signals:
    void itemLabelFormatChanged(const QString &format);
    void visibleChanged(bool visible);
    void meshChanged(QAbstract3DSeries::Mesh mesh);
    void meshSmoothChanged(bool enabled);
    void meshRotationChanged(const QQuaternion &rotation);
    void userDefinedMeshChanged(const QString &fileName);
    void colorStyleChanged(QGraphsTheme::ColorStyle style);
    void baseColorChanged(QColor color);
    void baseGradientChanged(const QLinearGradient &gradient);
    void singleHighlightColorChanged(QColor color);
    void singleHighlightGradientChanged(const QLinearGradient &gradient);
    void multiHighlightColorChanged(QColor color);
    void multiHighlightGradientChanged(const QLinearGradient &gradient);
    void nameChanged(const QString &name);
    void itemLabelChanged(const QString &label);
    void itemLabelVisibleChanged(bool visible);

public:
%If (QtGraphs_6_10_0 -)

    enum class LightingMode : bool
    {
        Shaded,
        Unshaded,
    };

%End
%If (QtGraphs_6_10_0 -)
    QAbstract3DSeries::LightingMode lightingMode() const;
%End
%If (QtGraphs_6_10_0 -)
    void setLightingMode(QAbstract3DSeries::LightingMode lightingMode);
%End

signals:
%If (QtGraphs_6_10_0 -)
    void lightingModeChanged(QAbstract3DSeries::LightingMode lightingMode);
%End
};
