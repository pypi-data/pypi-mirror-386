// qabstractseries.sip generated by MetaSIP
//
// This file is part of the QtGraphs Python extension module.
//
// Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6-Graphs.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


struct QLegendData
{
%TypeHeaderCode
#include <qabstractseries.h>
%End

    QColor color;
    QColor borderColor;
    QString label;
};

class QAbstractSeries : public QObject, public QQmlParserStatus /NoDefaultCtors/
{
%TypeHeaderCode
#include <qabstractseries.h>
%End

public:
    enum class SeriesType
    {
        Line,
        Area,
        Bar,
        Pie,
        Scatter,
        Spline,
    };

protected:
    virtual void classBegin();
    virtual void componentComplete();

public:
    virtual ~QAbstractSeries();
    virtual QAbstractSeries::SeriesType type() const = 0;
    QString name() const;
    void setName(const QString &name);
    bool isVisible() const;
    void setVisible(bool visible = true);
    bool isSelectable() const;
    void setSelectable(bool selectable);
    qreal opacity() const;
    void setOpacity(qreal opacity);
    qreal valuesMultiplier() const;
    void setValuesMultiplier(qreal valuesMultiplier);
    const QList<QLegendData> legendData() const;
    void show();
    void hide();
    bool isHoverable() const;
    void setHoverable(bool newHoverable);

signals:
    void nameChanged();
    void visibleChanged();
    void selectableChanged();
    void hoverableChanged();
    void opacityChanged();
    void valuesMultiplierChanged();
    void legendDataChanged();
    void hoverEnter(const QString &seriesName, QPointF position, QPointF value);
    void hoverExit(const QString &seriesName, QPointF position);
    void hover(const QString &seriesName, QPointF position, QPointF value);

public:
%If (QtGraphs_6_10_0 -)
    bool isHovered() const;
%End
%If (QtGraphs_6_10_0 -)
    void setHovered(bool enabled);
%End
%If (QtGraphs_6_10_0 -)
    QAbstractAxis *axisX() const;
%End
%If (QtGraphs_6_10_0 -)
    void setAxisX(QAbstractAxis *newAxisX);
%End
%If (QtGraphs_6_10_0 -)
    QAbstractAxis *axisY() const;
%End
%If (QtGraphs_6_10_0 -)
    void setAxisY(QAbstractAxis *newAxisY);
%End
%If (QtGraphs_6_10_0 -)
    int zValue() const;
%End
%If (QtGraphs_6_10_0 -)
    void setZValue(int newDrawOrder);
%End

signals:
%If (QtGraphs_6_10_0 -)
    void hoveredChanged(bool hovered);
%End
%If (QtGraphs_6_10_0 -)
    void axisXChanged(QAbstractAxis *newAxis);
%End
%If (QtGraphs_6_10_0 -)
    void axisYChanged(QAbstractAxis *newAxis);
%End
%If (QtGraphs_6_10_0 -)
    void zValueChanged(int z);
%End
};
