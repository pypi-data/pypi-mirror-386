// qbarset.sip generated by MetaSIP
//
// This file is part of the QtGraphs Python extension module.
//
// Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6-Graphs.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QBarSet : public QObject
{
%TypeHeaderCode
#include <qbarset.h>
%End

public:
    explicit QBarSet(QObject *parent /TransferThis/ = 0);
    QBarSet(const QString &label, QObject *parent /TransferThis/ = 0);
    virtual ~QBarSet();
    void setLabel(const QString &label);
    QString label() const;
    void append(qreal value);
    void append(const QList<qreal> &values);
    void insert(qsizetype index, qreal value);
    void remove(qsizetype index, qsizetype count = 1);
    void replace(qsizetype index, qreal value);
    qreal at(qsizetype index) const;
    qsizetype count() const /__len__/;
    qreal sum() const;
    void clear();
    qreal operator[](qsizetype index) const;
%MethodCode
        Py_ssize_t idx = sipConvertFromSequenceIndex(a0, sipCpp->count());
        
        if (idx < 0)
            sipIsErr = 1;
        else
            sipRes = sipCpp->operator[]((int)idx);
%End

    QBarSet &operator<<(qreal value);
    QColor color() const;
    void setColor(QColor color);
    QColor borderColor() const;
    void setBorderColor(QColor color);
    QColor labelColor() const;
    void setLabelColor(QColor color);
    QColor selectedColor() const;
    void setSelectedColor(QColor color);
    QVariantList values() const;
    void setValues(const QVariantList &values);
    qreal borderWidth() const;
    void setBorderWidth(qreal borderWidth);
    bool isBarSelected(qsizetype index) const;
    void selectBar(qsizetype index);
    void deselectBar(qsizetype index);
    void setBarSelected(qsizetype index, bool selected);
    void selectAllBars();
    void deselectAllBars();
    void selectBars(const QList<qsizetype> &indexes);
    void deselectBars(const QList<qsizetype> &indexes);
    void toggleSelection(const QList<qsizetype> &indexes);
    QList<qsizetype> selectedBars() const;

signals:
    void update();
    void labelChanged();
    void colorChanged(QColor color);
    void borderColorChanged(QColor color);
    void labelColorChanged(QColor color);
    void valuesChanged();
    void selectedColorChanged(QColor color);
    void countChanged();
    void borderWidthChanged(qreal width);
    void valuesAdded(qsizetype index, qsizetype count);
    void valuesRemoved(qsizetype index, qsizetype count);
    void valueChanged(qsizetype index);
    void updatedBars();
    void valueAdded(qsizetype index, qsizetype count);
    void valueRemoved(qsizetype index, qsizetype count);
    void selectedBarsChanged(const QList<long long> &indexes);
};
