// q3dgraphswidgetitem.sip generated by MetaSIP
//
// This file is part of the QtGraphsWidgets Python extension module.
//
// Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6-Graphs.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class Q3DGraphsWidgetItem : public QObject /NoDefaultCtors/
{
%TypeHeaderCode
#include <q3dgraphswidgetitem.h>
%End

%ConvertToSubClassCode
    static struct class_graph {
        const char *name;
        sipTypeDef **type;
        int yes, no;
    } graph[] = {
        {sipName_Q3DGraphsWidgetItem, &sipType_Q3DGraphsWidgetItem, 1, -1},
        {sipName_Q3DBarsWidgetItem, &sipType_Q3DBarsWidgetItem, -1, 2},
        {sipName_Q3DScatterWidgetItem, &sipType_Q3DScatterWidgetItem, -1, 3},
        {sipName_Q3DSurfaceWidgetItem, &sipType_Q3DSurfaceWidgetItem, -1, -1},
    };
    
    int i = 0;
    
    sipType = NULL;
    
    do
    {
        struct class_graph *cg = &graph[i];
    
        if (cg->name != NULL && sipCpp->inherits(cg->name))
        {
            sipType = *cg->type;
            i = cg->yes;
        }
        else
            i = cg->no;
    }
    while (i >= 0);
%End

public:
    virtual ~Q3DGraphsWidgetItem();
    void addTheme(QGraphsTheme *theme /Transfer/);
    void releaseTheme(QGraphsTheme *theme /TransferBack/);
    QGraphsTheme *activeTheme() const;
    void setActiveTheme(QGraphsTheme *activeTheme);
    QList<QGraphsTheme *> themes() const;
    QtGraphs3D::ShadowQuality shadowQuality() const;
    void setShadowQuality(const QtGraphs3D::ShadowQuality &shadowQuality);
    QtGraphs3D::SelectionFlags selectionMode() const;
    void setSelectionMode(const QtGraphs3D::SelectionFlags &selectionMode);
    Q3DScene *scene() const;
    void setMeasureFps(bool enable);
    bool measureFps() const;
    int currentFps() const;
    void setOrthoProjection(bool enable);
    bool isOrthoProjection() const;
    QtGraphs3D::ElementType selectedElement() const;
    void setAspectRatio(qreal ratio);
    qreal aspectRatio() const;
    void setOptimizationHint(QtGraphs3D::OptimizationHint hint);
    QtGraphs3D::OptimizationHint optimizationHint() const;
    void setPolar(bool enable);
    bool isPolar() const;
    void setLabelMargin(float margin);
    float labelMargin() const;
    void setRadialLabelOffset(float offset);
    float radialLabelOffset() const;
    void setHorizontalAspectRatio(qreal ratio);
    qreal horizontalAspectRatio() const;
    void setLocale(const QLocale &locale);
    QLocale locale() const;
    QVector3D queriedGraphPosition() const;
    void setMargin(qreal margin);
    qreal margin() const;
    void clearSelection();
    bool hasSeries(QAbstract3DSeries *series) const;
    qsizetype addCustomItem(QCustom3DItem *item /Transfer/);
    void removeCustomItems();
    void removeCustomItem(QCustom3DItem *item);
    void removeCustomItemAt(QVector3D position);
    void releaseCustomItem(QCustom3DItem *item /TransferBack/);
    QList<QCustom3DItem *> customItems() const;
    int selectedLabelIndex() const;
    QAbstract3DAxis *selectedAxis() const;
    qsizetype selectedCustomItemIndex() const;
    QCustom3DItem *selectedCustomItem() const;
    QQuickItemGrabResult *renderToImage(QSize imageSize = QSize()) const /Factory/;
%MethodCode
        QSharedPointer<QQuickItemGrabResult> *grab;
        
        Py_BEGIN_ALLOW_THREADS
        // This will leak but there seems to be no way to detach the object.
        grab = new QSharedPointer<QQuickItemGrabResult>(sipCpp->renderToImage(*a0));
        Py_END_ALLOW_THREADS
        
        sipRes = grab->data();
%End

    QtGraphs3D::CameraPreset cameraPreset() const;
    void setCameraPreset(QtGraphs3D::CameraPreset preset);
    float cameraXRotation() const;
    void setCameraXRotation(float rotation);
    float cameraYRotation() const;
    void setCameraYRotation(float rotation);
    float minCameraXRotation() const;
    void setMinCameraXRotation(float rotation);
    float maxCameraXRotation() const;
    void setMaxCameraXRotation(float rotation);
    float minCameraYRotation() const;
    void setMinCameraYRotation(float rotation);
    float maxCameraYRotation() const;
    void setMaxCameraYRotation(float rotation);
    void setZoomAtTargetEnabled(bool enable);
    bool isZoomAtTargetEnabled() const;
    void setZoomEnabled(bool enable);
    bool isZoomEnabled() const;
    void setSelectionEnabled(bool enable);
    bool isSelectionEnabled() const;
    void setRotationEnabled(bool enable);
    bool isRotationEnabled() const;
    float cameraZoomLevel() const;
    void setCameraZoomLevel(float level);
    float minCameraZoomLevel() const;
    void setMinCameraZoomLevel(float level);
    float maxCameraZoomLevel() const;
    void setMaxCameraZoomLevel(float level);
    QVector3D cameraTargetPosition() const;
    void setCameraTargetPosition(QVector3D target);
    bool wrapCameraXRotation() const;
    void setWrapCameraXRotation(bool wrap);
    bool wrapCameraYRotation() const;
    void setWrapCameraYRotation(bool wrap);
    void setCameraPosition(float horizontal, float vertical, float zoom = 100.F);
    int msaaSamples() const;
    void setMsaaSamples(int samples);
    float ambientLightStrength() const;
    void setAmbientLightStrength(float newAmbientLightStrength);
    float lightStrength() const;
    void setLightStrength(float newLightStrength);
    float shadowStrength() const;
    void setShadowStrength(float newShadowStrength);
    QColor lightColor() const;
    void setLightColor(QColor newLightColor);
    QtGraphs3D::GridLineType gridLineType() const;
    void setGridLineType(const QtGraphs3D::GridLineType &gridLineType);
    void setWidget(QQuickWidget *widget);
    QQuickWidget *widget() const;

protected:
    virtual bool event(QEvent *event);
    virtual bool eventFilter(QObject *obj, QEvent *event);

signals:
    void activeThemeChanged(QGraphsTheme *activeTheme);
    void shadowQualityChanged(QtGraphs3D::ShadowQuality quality);
    void selectionModeChanged(const QtGraphs3D::SelectionFlags selectionMode);
    void selectedElementChanged(QtGraphs3D::ElementType type);
    void measureFpsChanged(bool enabled);
    void currentFpsChanged(int fps);
    void orthoProjectionChanged(bool enabled);
    void aspectRatioChanged(qreal ratio);
    void optimizationHintChanged(QtGraphs3D::OptimizationHint hint);
    void polarChanged(bool enabled);
    void labelMarginChanged(float margin);
    void radialLabelOffsetChanged(float offset);
    void horizontalAspectRatioChanged(qreal ratio);
    void localeChanged(const QLocale &locale);
    void queriedGraphPositionChanged(QVector3D data);
    void marginChanged(qreal margin);
    void cameraPresetChanged(QtGraphs3D::CameraPreset preset);
    void cameraXRotationChanged(float rotation);
    void cameraYRotationChanged(float rotation);
    void cameraZoomLevelChanged(float zoomLevel);
    void cameraTargetPositionChanged(QVector3D target);
    void minCameraZoomLevelChanged(float zoomLevel);
    void maxCameraZoomLevelChanged(float zoomLevel);
    void minCameraXRotationChanged(float rotation);
    void minCameraYRotationChanged(float rotation);
    void maxCameraXRotationChanged(float rotation);
    void maxCameraYRotationChanged(float rotation);
    void wrapCameraXRotationChanged(bool wrap);
    void wrapCameraYRotationChanged(bool wrap);
    void msaaSamplesChanged(int samples);
    void zoomEnabledChanged(bool enable);
    void zoomAtTargetEnabledChanged(bool enable);
    void rotationEnabledChanged(bool enable);
    void selectionEnabledChanged(bool enable);
    void ambientLightStrengthChanged();
    void lightStrengthChanged();
    void shadowStrengthChanged();
    void lightColorChanged();
    void gridLineTypeChanged();

public:
%If (QtGraphs_6_9_0 -)
    void doRayPicking(QVector3D origin, QVector3D direction);
%End
%If (QtGraphs_6_9_0 -)
    void setTransparencyTechnique(QtGraphs3D::TransparencyTechnique technique);
%End
%If (QtGraphs_6_9_0 -)
    QtGraphs3D::TransparencyTechnique transparencyTechnique() const;
%End

signals:
%If (QtGraphs_6_9_0 -)
    void transparencyTechniqueChanged(QtGraphs3D::TransparencyTechnique technique);
%End
};
