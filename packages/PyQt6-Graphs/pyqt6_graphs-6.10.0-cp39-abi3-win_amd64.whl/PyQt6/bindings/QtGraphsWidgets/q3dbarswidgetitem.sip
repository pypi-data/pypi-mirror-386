// q3dbarswidgetitem.sip generated by MetaSIP
//
// This file is part of the QtGraphsWidgets Python extension module.
//
// Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6-Graphs.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class Q3DBarsWidgetItem : public Q3DGraphsWidgetItem
{
%TypeHeaderCode
#include <q3dbarswidgetitem.h>
%End

public:
    explicit Q3DBarsWidgetItem(QObject *parent /TransferThis/ = 0);
    virtual ~Q3DBarsWidgetItem();
    void setPrimarySeries(QBar3DSeries *series /AllowNone/);
    QBar3DSeries *primarySeries() const;
    void addSeries(QBar3DSeries *series);
    void removeSeries(QBar3DSeries *series);
    void insertSeries(int index, QBar3DSeries *series);
    QList<QBar3DSeries *> seriesList() const;
    void setMultiSeriesUniform(bool uniform);
    bool isMultiSeriesUniform() const;
    void setBarThickness(float thicknessRatio);
    float barThickness() const;
    void setBarSpacing(QSizeF spacing);
    QSizeF barSpacing() const;
    void setBarSpacingRelative(bool relative);
    bool isBarSpacingRelative() const;
    void setBarSeriesMargin(QSizeF margin);
    QSizeF barSeriesMargin() const;
    void setRowAxis(QCategory3DAxis *axis /AllowNone,Transfer/);
    QCategory3DAxis *rowAxis() const;
    void setColumnAxis(QCategory3DAxis *axis /AllowNone,Transfer/);
    QCategory3DAxis *columnAxis() const;
    void setValueAxis(QValue3DAxis *axis /AllowNone,Transfer/);
    QValue3DAxis *valueAxis() const;
    void addAxis(QAbstract3DAxis *axis /Transfer/);
    void releaseAxis(QAbstract3DAxis *axis /TransferBack/);
    QList<QAbstract3DAxis *> axes() const;
    QBar3DSeries *selectedSeries() const;
    void setFloorLevel(float level);
    float floorLevel() const;

protected:
    virtual bool event(QEvent *event);

signals:
    void multiSeriesUniformChanged(bool uniform);
    void barThicknessChanged(float thicknessRatio);
    void barSpacingChanged(QSizeF spacing);
    void barSpacingRelativeChanged(bool relative);
    void barSeriesMarginChanged(QSizeF margin);
    void rowAxisChanged(QCategory3DAxis *axis);
    void columnAxisChanged(QCategory3DAxis *axis);
    void valueAxisChanged(QValue3DAxis *axis);
    void primarySeriesChanged(QBar3DSeries *series);
    void selectedSeriesChanged(QBar3DSeries *series);
    void floorLevelChanged(float level);

public:
%If (QtGraphs_6_10_0 -)
    void renderSliceToImage(int requestedIndex, QtGraphs3D::SliceCaptureType sliceType);
%End

signals:
%If (QtGraphs_6_10_0 -)
    void sliceImageChanged(const QImage &image);
%End
};
