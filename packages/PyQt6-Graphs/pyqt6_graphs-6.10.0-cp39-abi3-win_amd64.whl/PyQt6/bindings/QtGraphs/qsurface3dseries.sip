// qsurface3dseries.sip generated by MetaSIP
//
// This file is part of the QtGraphs Python extension module.
//
// Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6-Graphs.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QSurface3DSeries : public QAbstract3DSeries
{
%TypeHeaderCode
#include <qsurface3dseries.h>
%End

public:
    enum DrawFlag /BaseType=Flag/
    {
        DrawWireframe,
        DrawSurface,
        DrawSurfaceAndWireframe,
%If (QtGraphs_6_10_0 -)
        DrawFilledSurface,
%End
    };

    typedef QFlags<QSurface3DSeries::DrawFlag> DrawFlags;

    enum class Shading
    {
        Smooth,
        Flat,
    };

    explicit QSurface3DSeries(QObject *parent /TransferThis/ = 0);
    QSurface3DSeries(QSurfaceDataProxy *dataProxy /Transfer/, QObject *parent /TransferThis/ = 0);
    virtual ~QSurface3DSeries();
    void setDataProxy(QSurfaceDataProxy *proxy /Transfer/);
    QSurfaceDataProxy *dataProxy() const;
    void setSelectedPoint(QPoint position);
    QPoint selectedPoint() const;
    static QPoint invalidSelectionPosition();
    void setShading(const QSurface3DSeries::Shading shading);
    QSurface3DSeries::Shading shading() const;
    void setDrawMode(QSurface3DSeries::DrawFlags mode);
    QSurface3DSeries::DrawFlags drawMode() const;
    bool isFlatShadingSupported() const;
    void setTexture(const QImage &texture);
    QImage texture() const;
    void setTextureFile(const QString &filename);
    QString textureFile() const;
    void setWireframeColor(QColor color);
    QColor wireframeColor() const;
    void setDataArray(const QSurfaceDataArray &newDataArray);
    void clearRow(qsizetype rowIndex);
    void clearArray();
    QSurfaceDataArray dataArray();

signals:
    void dataProxyChanged(QSurfaceDataProxy *proxy);
    void selectedPointChanged(QPoint position);
    void flatShadingSupportedChanged(bool enabled);
    void drawModeChanged(QSurface3DSeries::DrawFlags mode);
    void textureChanged(const QImage &image);
    void textureFileChanged(const QString &filename);
    void wireframeColorChanged(QColor color);
    void dataArrayChanged(const QSurfaceDataArray &array);
    void shadingChanged(const QSurface3DSeries::Shading shading);
};
