// qxyseries.sip generated by MetaSIP
//
// This file is part of the QtGraphs Python extension module.
//
// Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6-Graphs.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QXYSeries : public QAbstractSeries /NoDefaultCtors/
{
%TypeHeaderCode
#include <qxyseries.h>
%End

public:
    virtual ~QXYSeries();
    void append(qreal x, qreal y);
    void append(QPointF point);
    void append(const QList<QPointF> &points);
    void replace(qreal oldX, qreal oldY, qreal newX, qreal newY);
    void replace(QPointF oldPoint, QPointF newPoint);
    void replace(qsizetype index, qreal newX, qreal newY);
    void replace(qsizetype index, QPointF newPoint);
    void replace(const QList<QPointF> &points);
    void remove(qreal x, qreal y);
    void remove(QPointF point);
    void remove(qsizetype index);
    void insert(qsizetype index, QPointF point);
    void clear();
    QPointF at(qsizetype index) const;
    qsizetype find(QPointF point) const;
    void removeMultiple(qsizetype index, qsizetype count);
    bool take(QPointF point);
    QList<QPointF> points() const;
    void setColor(QColor newColor);
    QColor color() const;
    void setSelectedColor(QColor color);
    QColor selectedColor() const;
    qsizetype count() const /__len__/;
    bool isPointSelected(qsizetype index) const;
    void selectPoint(qsizetype index);
    void deselectPoint(qsizetype index);
    void setPointSelected(qsizetype index, bool selected);
    void selectAllPoints();
    void deselectAllPoints();
    void selectPoints(const QList<qsizetype> &indexes);
    void deselectPoints(const QList<qsizetype> &indexes);
    void toggleSelection(const QList<qsizetype> &indexes);
    QList<qsizetype> selectedPoints() const;
    QQmlComponent *pointDelegate() const;
    void setPointDelegate(QQmlComponent *newPointDelegate);
    bool isDraggable() const;
    void setDraggable(bool newDraggable);

signals:
    void pointReplaced(qsizetype index);
    void colorChanged(QColor color);
    void selectedColorChanged(QColor color);
    void pointsReplaced();
    void selectedPointsChanged();
    void pointDelegateChanged();
    void draggableChanged();
    void countChanged();
%If (QtGraphs_6_9_0 -)
    void pointsAdded(qsizetype start, qsizetype end);
%End
%If (QtGraphs_6_9_0 -)
    void clicked(QPoint point);
%End
%If (QtGraphs_6_9_0 -)
    void doubleClicked(QPoint point);
%End
%If (QtGraphs_6_9_0 -)
    void pressed(QPoint point);
%End
%If (QtGraphs_6_9_0 -)
    void released(QPoint point);
%End
};
