// qscatterdataproxy.sip generated by MetaSIP
//
// This file is part of the QtGraphs Python extension module.
//
// Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6-Graphs.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


typedef QList<QScatterDataItem> QScatterDataArray;

class QScatterDataProxy : public QAbstractDataProxy
{
%TypeHeaderCode
#include <qscatterdataproxy.h>
%End

public:
    explicit QScatterDataProxy(QObject *parent /TransferThis/ = 0);
    virtual ~QScatterDataProxy();
    QScatter3DSeries *series() const;
    qsizetype itemCount() const;
    const QScatterDataItem &itemAt(qsizetype index) const;
    void resetArray();
    void resetArray(QScatterDataArray newArray);
    void setItem(qsizetype index, QScatterDataItem item);
    void setItems(qsizetype index, QScatterDataArray items);
    qsizetype addItem(QScatterDataItem item);
    qsizetype addItems(QScatterDataArray items);
    void insertItem(qsizetype index, QScatterDataItem item);
    void insertItems(qsizetype index, QScatterDataArray items);
    void removeItems(qsizetype index, qsizetype removeCount);

signals:
    void arrayReset();
    void itemsAdded(qsizetype startIndex, qsizetype count);
    void itemsChanged(qsizetype startIndex, qsizetype count);
    void itemsRemoved(qsizetype startIndex, qsizetype count);
    void itemsInserted(qsizetype startIndex, qsizetype count);
    void itemCountChanged(qsizetype count);
    void seriesChanged(QScatter3DSeries *series);

public:
%If (QtGraphs_6_10_0 -)
    QVector3D scaleAt(qsizetype index) const;
%End
%If (QtGraphs_6_10_0 -)
    void resetScaleArray(QList<QVector3D> newArray);
%End

signals:
%If (QtGraphs_6_10_0 -)
    void scaleArrayReset();
%End
};
