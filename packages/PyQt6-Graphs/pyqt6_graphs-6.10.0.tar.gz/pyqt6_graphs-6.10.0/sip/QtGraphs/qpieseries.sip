// qpieseries.sip generated by MetaSIP
//
// This file is part of the QtGraphs Python extension module.
//
// Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6-Graphs.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QPieSeries : public QAbstractSeries
{
%TypeHeaderCode
#include <qpieseries.h>
%End

public:
    explicit QPieSeries(QObject *parent /TransferThis/ = 0);
    virtual ~QPieSeries();
    virtual QAbstractSeries::SeriesType type() const;
    bool append(QPieSlice *slice /Transfer/);
    bool append(const QList<QPieSlice *> &slices /Transfer/);
    bool insert(qsizetype index, QPieSlice *slice /Transfer/);
    bool remove(QPieSlice *slice);
    void clear();
    QPieSlice *append(const QString &label, qreal value);
    QPieSlice *at(qsizetype index);
    QPieSlice *find(const QString &label);
    void removeMultiple(qsizetype index, int count);
    bool remove(qsizetype index);
    bool replace(qsizetype index, QPieSlice *slice /Transfer/);
    bool replace(QPieSlice *oldSlice, QPieSlice *newSlice /Transfer/);
    bool replace(const QList<QPieSlice *> &slices /Transfer/);
    bool take(QPieSlice *slice /TransferBack/);
    QPieSeries &operator<<(QPieSlice *slice /Transfer/);
    QList<QPieSlice *> slices() const;
    qsizetype count() const /__len__/;
    bool isEmpty() const;
    qreal sum() const;
    void setHorizontalPosition(qreal relativePosition);
    qreal horizontalPosition() const;
    void setVerticalPosition(qreal relativePosition);
    qreal verticalPosition() const;
    void setPieSize(qreal relativeSize);
    qreal pieSize() const;
    void setStartAngle(qreal startAngle);
    qreal startAngle() const;
    void setEndAngle(qreal endAngle);
    qreal endAngle() const;
    void setHoleSize(qreal holeSize);
    qreal holeSize() const;
    void setLabelsVisible(bool visible);
    void setLabelsPosition(QPieSlice::LabelPosition position);

protected:
    virtual void componentComplete();

signals:
    void added(const QList<QPieSlice *> &slices);
    void removed(const QList<QPieSlice *> &slices);
    void replaced(const QList<QPieSlice *> &slices);
    void countChanged();
    void sumChanged();
    void pieSizeChanged();
    void startAngleChanged();
    void endAngleChanged();
    void horizontalPositionChanged();
    void verticalPositionChanged();
    void holeSizeChanged();
%If (QtGraphs_6_9_0 -)
    void clicked(QPieSlice *slice);
%End
%If (QtGraphs_6_9_0 -)
    void doubleClicked(QPieSlice *slice);
%End
%If (QtGraphs_6_9_0 -)
    void pressed(QPieSlice *slice);
%End
%If (QtGraphs_6_9_0 -)
    void released(QPieSlice *slice);
%End

public:
%If (QtGraphs_6_10_0 -)

    enum class LabelVisibility
    {
        None,
        First,
        Even,
        Odd,
    };

%End
%If (QtGraphs_6_10_0 -)
    qreal angleSpanVisibleLimit() const;
%End
%If (QtGraphs_6_10_0 -)
    void setAngleSpanVisibleLimit(qreal newAngleSpanVisibleLimit);
%End
%If (QtGraphs_6_10_0 -)
    QPieSeries::LabelVisibility angleSpanLabelVisibility() const;
%End
%If (QtGraphs_6_10_0 -)
    void setAngleSpanLabelVisibility(QPieSeries::LabelVisibility newAngleSpanVisibleMode);
%End

signals:
%If (QtGraphs_6_10_0 -)
    void angleSpanVisibleLimitChanged(qreal limit);
%End
%If (QtGraphs_6_10_0 -)
    void angleSpanLabelVisibilityChanged(QPieSeries::LabelVisibility visibility);
%End
};
