// qbarseries.sip generated by MetaSIP
//
// This file is part of the QtGraphs Python extension module.
//
// Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6-Graphs.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QBarSeries : public QAbstractSeries
{
%TypeHeaderCode
#include <qbarseries.h>
%End

public:
    enum class LabelsPosition
    {
        Center,
        InsideEnd,
        InsideBase,
        OutsideEnd,
    };

    enum class BarsType
    {
        Groups,
        Stacked,
        StackedPercent,
    };

    explicit QBarSeries(QObject *parent /TransferThis/ = 0);
    virtual ~QBarSeries();
    virtual QAbstractSeries::SeriesType type() const;
    QList<QColor> seriesColors() const;
    void setSeriesColors(const QList<QColor> &newSeriesColors);
    QList<QColor> borderColors() const;
    void setBorderColors(const QList<QColor> &newBorderColors);
    void setBarsType(QBarSeries::BarsType type);
    QBarSeries::BarsType barsType() const;
    void setBarWidth(qreal width);
    qreal barWidth() const;
    bool append(QBarSet *set /Transfer/);
    bool append(const QList<QBarSet *> &sets /Transfer/);
    bool take(QBarSet *set);
    qsizetype count() const /__len__/;
    bool remove(qsizetype index);
    bool remove(QBarSet *set);
    void removeMultiple(qsizetype index, qsizetype count);
    bool insert(qsizetype index, QBarSet *set /Transfer/);
    void replace(qsizetype index, QBarSet *set /Transfer/);
    bool replace(QBarSet *oldValue, QBarSet *newValue /Transfer/);
    bool replace(const QList<QBarSet *> &sets /Transfer/);
    QBarSet *at(qsizetype index);
    qsizetype find(QBarSet *set) const;
    void clear();
    QList<QBarSet *> barSets() const;
    void setLabelsVisible(bool visible = true);
    bool labelsVisible() const;
    void setLabelsFormat(const QString &format);
    QString labelsFormat() const;
    void setLabelsMargin(qreal margin);
    qreal labelsMargin() const;
    void setLabelsAngle(qreal angle);
    qreal labelsAngle() const;
    void setLabelsPosition(QBarSeries::LabelsPosition position);
    QBarSeries::LabelsPosition labelsPosition() const;
    void setLabelsPrecision(int precision);
    int labelsPrecision() const;
    QQmlComponent *barDelegate() const;
    void setBarDelegate(QQmlComponent *newBarDelegate);

protected:
    virtual void componentComplete();

signals:
    void updatedBars();
    void seriesColorsChanged();
    void borderColorsChanged();
    void countChanged();
    void barWidthChanged();
    void labelsVisibleChanged(bool visible);
    void labelsFormatChanged(const QString &format);
    void labelsPositionChanged(QBarSeries::LabelsPosition position);
    void barsTypeChanged(QBarSeries::BarsType type);
    void labelsMarginChanged(qreal margin);
    void labelsAngleChanged(qreal angle);
    void labelsPrecisionChanged(int precision);
    void barDelegateChanged();
    void barsetsAdded(const QList<QBarSet *> &sets);
    void barsetsReplaced(const QList<QBarSet *> &sets);
    void barsetsRemoved(const QList<QBarSet *> &sets);
    void setValueChanged(qsizetype index, QBarSet *barset);
    void setValueAdded(qsizetype index, qsizetype count, QBarSet *barset);
    void setValueRemoved(qsizetype index, qsizetype count, QBarSet *barset);
    void barSetsChanged();
%If (QtGraphs_6_9_0 -)
    void clicked(qsizetype index, QBarSet *barset);
%End
%If (QtGraphs_6_9_0 -)
    void doubleClicked(qsizetype index, QBarSet *barset);
%End
%If (QtGraphs_6_9_0 -)
    void pressed(qsizetype index, QBarSet *barset);
%End
%If (QtGraphs_6_9_0 -)
    void released(qsizetype index, QBarSet *barset);
%End
};
