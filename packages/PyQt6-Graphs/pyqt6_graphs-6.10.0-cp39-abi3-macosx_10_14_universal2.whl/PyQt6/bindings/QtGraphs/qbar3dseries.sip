// qbar3dseries.sip generated by MetaSIP
//
// This file is part of the QtGraphs Python extension module.
//
// Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6-Graphs.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QBar3DSeries : public QAbstract3DSeries
{
%TypeHeaderCode
#include <qbar3dseries.h>
%End

public:
    QBar3DSeries(QBarDataProxy *dataProxy /Transfer/, QObject *parent /TransferThis/ = 0);
    explicit QBar3DSeries(QObject *parent /TransferThis/ = 0);
    virtual ~QBar3DSeries();
    void setDataProxy(QBarDataProxy *proxy /Transfer/);
    QBarDataProxy *dataProxy() const;
    void setSelectedBar(QPoint position);
    QPoint selectedBar() const;
    static QPoint invalidSelectionPosition();
    void setMeshAngle(float angle);
    float meshAngle() const;
    QList<QColor> rowColors() const;
    void setRowColors(const QList<QColor> &colors);
    void setDataArray(const QBarDataArray &newDataArray);
    void clearRow(qsizetype rowIndex);
    void clearArray();
    QBarDataArray dataArray();
    QStringList rowLabels() const;
    void setRowLabels(const QStringList &labels);
    QStringList columnLabels() const;
    void setColumnLabels(const QStringList &labels);

signals:
    void dataProxyChanged(QBarDataProxy *proxy);
    void selectedBarChanged(QPoint position);
    void meshAngleChanged(float angle);
    void rowColorsChanged(const QList<QColor> &rowcolors);
    void rowLabelsChanged();
    void columnLabelsChanged();
    void dataArrayChanged(const QBarDataArray &array);

public:
%If (QtGraphs_6_9_0 -)
    bool isValueColoringEnabled() const;
%End
%If (QtGraphs_6_9_0 -)
    void setValueColoringEnabled(bool enabled);
%End

signals:
%If (QtGraphs_6_9_0 -)
    void valueColoringEnabledChanged(bool enabled);
%End
};
