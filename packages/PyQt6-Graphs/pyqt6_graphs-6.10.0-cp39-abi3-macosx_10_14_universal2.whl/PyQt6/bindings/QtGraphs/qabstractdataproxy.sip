// qabstractdataproxy.sip generated by MetaSIP
//
// This file is part of the QtGraphs Python extension module.
//
// Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6-Graphs.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QAbstractDataProxy : public QObject /NoDefaultCtors/
{
%TypeHeaderCode
#include <qabstractdataproxy.h>
%End

%ConvertToSubClassCode
    static struct class_graph {
        const char *name;
        sipTypeDef **type;
        int yes, no;
    } graph[] = {
        {sipName_Q3DScene, &sipType_Q3DScene, -1, 1},
        {sipName_QAbstract3DAxis, &sipType_QAbstract3DAxis, 14, 2},
        {sipName_QAbstract3DSeries, &sipType_QAbstract3DSeries, 16, 3},
        {sipName_QAbstractAxis, &sipType_QAbstractAxis, 20, 4},
        {sipName_QAbstractDataProxy, &sipType_QAbstractDataProxy, 23, 5},
        {sipName_QAbstractSeries, &sipType_QAbstractSeries, 30, 6},
        {sipName_QBarModelMapper, &sipType_QBarModelMapper, -1, 7},
        {sipName_QBarSet, &sipType_QBarSet, -1, 8},
        {sipName_QCustom3DItem, &sipType_QCustom3DItem, 37, 9},
        {sipName_QGraphsTheme, &sipType_QGraphsTheme, -1, 10},
        {sipName_QValue3DAxisFormatter, &sipType_QValue3DAxisFormatter, 39, 11},
        {sipName_QPieModelMapper, &sipType_QPieModelMapper, -1, 12},
        {sipName_QPieSlice, &sipType_QPieSlice, -1, 13},
        {sipName_QXYModelMapper, &sipType_QXYModelMapper, -1, -1},
        {sipName_QCategory3DAxis, &sipType_QCategory3DAxis, -1, 15},
        {sipName_QValue3DAxis, &sipType_QValue3DAxis, -1, -1},
        {sipName_QBar3DSeries, &sipType_QBar3DSeries, -1, 17},
        {sipName_QScatter3DSeries, &sipType_QScatter3DSeries, 19, 18},
        {sipName_QSurface3DSeries, &sipType_QSurface3DSeries, -1, -1},
    #if QT_VERSION >= 0x060900
        {sipName_QSpline3DSeries, &sipType_QSpline3DSeries, -1, -1},
    #else
        {0, 0, -1, -1},
    #endif
        {sipName_QBarCategoryAxis, &sipType_QBarCategoryAxis, -1, 21},
        {sipName_QDateTimeAxis, &sipType_QDateTimeAxis, -1, 22},
        {sipName_QValueAxis, &sipType_QValueAxis, -1, -1},
        {sipName_QBarDataProxy, &sipType_QBarDataProxy, 26, 24},
        {sipName_QSurfaceDataProxy, &sipType_QSurfaceDataProxy, 27, 25},
        {sipName_QScatterDataProxy, &sipType_QScatterDataProxy, 29, -1},
        {sipName_QItemModelBarDataProxy, &sipType_QItemModelBarDataProxy, -1, -1},
        {sipName_QHeightMapSurfaceDataProxy, &sipType_QHeightMapSurfaceDataProxy, -1, 28},
        {sipName_QItemModelSurfaceDataProxy, &sipType_QItemModelSurfaceDataProxy, -1, -1},
        {sipName_QItemModelScatterDataProxy, &sipType_QItemModelScatterDataProxy, -1, -1},
        {sipName_QAreaSeries, &sipType_QAreaSeries, -1, 31},
        {sipName_QBarSeries, &sipType_QBarSeries, -1, 32},
        {sipName_QXYSeries, &sipType_QXYSeries, 34, 33},
        {sipName_QPieSeries, &sipType_QPieSeries, -1, -1},
        {sipName_QLineSeries, &sipType_QLineSeries, -1, 35},
        {sipName_QScatterSeries, &sipType_QScatterSeries, -1, 36},
        {sipName_QSplineSeries, &sipType_QSplineSeries, -1, -1},
        {sipName_QCustom3DLabel, &sipType_QCustom3DLabel, -1, 38},
        {sipName_QCustom3DVolume, &sipType_QCustom3DVolume, -1, -1},
        {sipName_QLogValue3DAxisFormatter, &sipType_QLogValue3DAxisFormatter, -1, -1},
    };
    
    int i = 0;
    
    sipType = NULL;
    
    do
    {
        struct class_graph *cg = &graph[i];
    
        if (cg->name != NULL && sipCpp->inherits(cg->name))
        {
            sipType = *cg->type;
            i = cg->yes;
        }
        else
            i = cg->no;
    }
    while (i >= 0);
%End

public:
    enum class DataType
    {
        None,
        Bar,
        Scatter,
        Surface,
    };

    virtual ~QAbstractDataProxy();
    QAbstractDataProxy::DataType type() const;
};
