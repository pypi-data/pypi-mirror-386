// qgraphstheme.sip generated by MetaSIP
//
// This file is part of the QtGraphs Python extension module.
//
// Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6-Graphs.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QGraphsLine
{
%TypeHeaderCode
#include <qgraphstheme.h>
%End

public:
    QGraphsLine();
    QGraphsLine(const QGraphsLine &other);
    ~QGraphsLine();
    void swap(QGraphsLine &other);
    QColor mainColor() const;
    void setMainColor(QColor newColor);
    QColor subColor() const;
    void setSubColor(QColor newColor);
    qreal mainWidth() const;
    void setMainWidth(qreal newWidth);
    qreal subWidth() const;
    void setSubWidth(qreal newWidth);
    QColor labelTextColor() const;
    void setLabelTextColor(QColor newColor);
    operator QVariant() const;
};

bool operator!=(const QGraphsLine &lhs, const QGraphsLine &rhs);
bool operator==(const QGraphsLine &lhs, const QGraphsLine &rhs);

class QGraphsTheme : public QObject, public QQmlParserStatus
{
%TypeHeaderCode
#include <qgraphstheme.h>
%End

public:
    enum class Theme
    {
        QtGreen,
        QtGreenNeon,
        MixSeries,
        OrangeSeries,
        YellowSeries,
        BlueSeries,
        PurpleSeries,
        GreySeries,
        UserDefined,
    };

    enum class ColorStyle
    {
        Uniform,
        ObjectGradient,
        RangeGradient,
    };

    enum class ColorScheme
    {
        Automatic,
        Light,
        Dark,
    };

    explicit QGraphsTheme(QObject *parent /TransferThis/ = 0);
    virtual ~QGraphsTheme();
    QGraphsTheme::ColorScheme colorScheme() const;
    void setColorScheme(QGraphsTheme::ColorScheme newColorScheme);
    QGraphsTheme::Theme theme() const;
    void setTheme(QGraphsTheme::Theme newTheme, bool force = false);
%MethodCode
        sipCpp->setTheme(a0, a1 ? QGraphsTheme::ForceTheme::Yes : QGraphsTheme::ForceTheme::No);
%End

    QGraphsTheme::ColorStyle colorStyle() const;
    void setColorStyle(QGraphsTheme::ColorStyle newColorStyle);
    QColor backgroundColor() const;
    void setBackgroundColor(QColor newBackgroundColor);
    bool isBackgroundVisible() const;
    void setBackgroundVisible(bool newBackgroundVisible);
    QColor plotAreaBackgroundColor() const;
    void setPlotAreaBackgroundColor(QColor newBackgroundColor);
    bool isPlotAreaBackgroundVisible() const;
    void setPlotAreaBackgroundVisible(bool newBackgroundVisibility);
    bool isGridVisible() const;
    void setGridVisible(bool newGridVisibility);
    bool labelsVisible() const;
    void setLabelsVisible(bool newLabelsVisibility);
    QColor labelBackgroundColor() const;
    void setLabelBackgroundColor(QColor newLabelBackgroundColor);
    QColor labelTextColor() const;
    void setLabelTextColor(QColor newLabelTextColor);
    QColor singleHighlightColor() const;
    void setSingleHighlightColor(QColor newSingleHighlightColor);
    QColor multiHighlightColor() const;
    void setMultiHighlightColor(QColor newMultiHighlightColor);
    void setSingleHighlightGradient(const QLinearGradient &gradient);
    QLinearGradient singleHighlightGradient() const;
    void setMultiHighlightGradient(const QLinearGradient &gradient);
    QLinearGradient multiHighlightGradient() const;
    QFont labelFont() const;
    void setLabelFont(const QFont &newFont);
    QList<QColor> seriesColors() const;
    void setSeriesColors(const QList<QColor> &newSeriesColors);
    QList<QColor> borderColors() const;
    void setBorderColors(const QList<QColor> &newBorderColors);
    QList<QLinearGradient> seriesGradients() const;
    void setSeriesGradients(const QList<QLinearGradient> &newSeriesGradients);
    bool isLabelBackgroundVisible() const;
    void setLabelBackgroundVisible(bool newLabelBackgroundVisibility);
    bool isLabelBorderVisible() const;
    void setLabelBorderVisible(bool newLabelBorderVisibility);
    qreal borderWidth() const;
    void setBorderWidth(qreal newBorderWidth);
    QFont axisXLabelFont() const;
    void setAxisXLabelFont(const QFont &newAxisXLabelFont);
    QFont axisYLabelFont() const;
    void setAxisYLabelFont(const QFont &newAxisYLabelFont);
    QFont axisZLabelFont() const;
    void setAxisZLabelFont(const QFont &newAxisZLabelFont);
    QGraphsLine grid() const;
    void setGrid(const QGraphsLine &newGrid);
    QGraphsLine axisX() const;
    void setAxisX(const QGraphsLine &newAxisX);
    QGraphsLine axisY() const;
    void setAxisY(const QGraphsLine &newAxisY);
    QGraphsLine axisZ() const;
    void setAxisZ(const QGraphsLine &newAxisZ);

signals:
    void colorSchemeChanged();
    void themeChanged(QGraphsTheme::Theme theme);
    void colorStyleChanged(QGraphsTheme::ColorStyle type);
    void backgroundColorChanged();
    void backgroundVisibleChanged();
    void plotAreaBackgroundColorChanged();
    void plotAreaBackgroundVisibleChanged();
    void gridVisibleChanged();
    void labelsVisibleChanged();
    void labelBackgroundColorChanged();
    void labelTextColorChanged();
    void singleHighlightColorChanged(QColor color);
    void multiHighlightColorChanged(QColor color);
    void singleHighlightGradientChanged(const QLinearGradient &gradient);
    void multiHighlightGradientChanged(const QLinearGradient &gradient);
    void labelFontChanged();
    void labelBackgroundVisibleChanged();
    void labelBorderVisibleChanged();
    void seriesColorsChanged(const QList<QColor> &list);
    void seriesGradientsChanged(const QList<QLinearGradient> &list);
    void borderColorsChanged();
    void borderWidthChanged();
    void singleHighlightGradientQMLChanged();
    void multiHighlightGradientQMLChanged();
    void axisXLabelFontChanged();
    void axisYLabelFontChanged();
    void axisZLabelFontChanged();
    void gridChanged();
    void axisXChanged();
    void axisYChanged();
    void axisZChanged();

protected:
    virtual void classBegin();
    virtual void componentComplete();
};
