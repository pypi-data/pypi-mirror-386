// qgraphs3dnamespace.sip generated by MetaSIP
//
// This file is part of the QtGraphs Python extension module.
//
// Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6-Graphs.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace QtGraphs3D
{
%TypeHeaderCode
#include <qgraphs3dnamespace.h>
%End

    enum class SelectionFlag
    {
        None,
        Item,
        Row,
        ItemAndRow,
        Column,
        ItemAndColumn,
        RowAndColumn,
        ItemRowAndColumn,
        Slice,
        MultiSeries,
    };

    typedef QFlags<QtGraphs3D::SelectionFlag> SelectionFlags;

    enum class ShadowQuality
    {
        None,
        Low,
        Medium,
        High,
        SoftLow,
        SoftMedium,
        SoftHigh,
    };

    enum class ElementType
    {
        None,
        Series,
        AxisXLabel,
        AxisYLabel,
        AxisZLabel,
        CustomItem,
    };

    enum class OptimizationHint
    {
        Default,
        Legacy,
    };

    enum class RenderingMode
    {
        DirectToBackground,
        Indirect,
    };

    enum class CameraPreset
    {
        NoPreset,
        FrontLow,
        Front,
        FrontHigh,
        LeftLow,
        Left,
        LeftHigh,
        RightLow,
        Right,
        RightHigh,
        BehindLow,
        Behind,
        BehindHigh,
        IsometricLeft,
        IsometricLeftHigh,
        IsometricRight,
        IsometricRightHigh,
        DirectlyAbove,
        DirectlyAboveCW45,
        DirectlyAboveCCW45,
        FrontBelow,
        LeftBelow,
        RightBelow,
        BehindBelow,
        DirectlyBelow,
    };

    enum class GridLineType
    {
        Shader,
        Geometry,
    };

%If (QtGraphs_6_9_0 -)

    enum class TransparencyTechnique
    {
        Default,
        Approximate,
        Accurate,
    };

%End
%If (QtGraphs_6_10_0 -)

    enum class SliceCaptureType
    {
        NoImage,
        RowImage,
        ColumnImage,
    };

%End
};
