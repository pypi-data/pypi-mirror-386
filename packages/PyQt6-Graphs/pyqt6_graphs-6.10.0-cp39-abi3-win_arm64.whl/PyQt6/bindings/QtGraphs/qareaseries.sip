// qareaseries.sip generated by MetaSIP
//
// This file is part of the QtGraphs Python extension module.
//
// Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6-Graphs.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QAreaSeries : public QAbstractSeries
{
%TypeHeaderCode
#include <qareaseries.h>
%End

public:
    explicit QAreaSeries(QObject *parent /TransferThis/ = 0);
    virtual ~QAreaSeries();
    virtual QAbstractSeries::SeriesType type() const;
    QColor color() const;
    void setColor(QColor newColor);
    QColor selectedColor() const;
    void setSelectedColor(QColor newColor);
    QColor borderColor() const;
    void setBorderColor(QColor newBorderColor);
    QColor selectedBorderColor() const;
    void setSelectedBorderColor(QColor newSelectedBorderColor);
    qreal borderWidth() const;
    void setBorderWidth(qreal newBorderWidth);
    bool isSelected() const;
    void setSelected(bool newSelected);
    QXYSeries *upperSeries() const;
    void setUpperSeries(QXYSeries *newUpperSeries);
    QXYSeries *lowerSeries() const;
    void setLowerSeries(QXYSeries *newLowerSeries);

signals:
    void colorChanged(QColor newColor);
    void selectedColorChanged(QColor newSelectedColor);
    void borderColorChanged(QColor newBorderColor);
    void selectedBorderColorChanged(QColor newSelectedBorderColor);
    void borderWidthChanged();
    void selectedChanged();
    void upperSeriesChanged();
    void lowerSeriesChanged();
%If (QtGraphs_6_9_0 -)
    void clicked(QPoint point);
%End
%If (QtGraphs_6_9_0 -)
    void doubleClicked(QPoint point);
%End
%If (QtGraphs_6_9_0 -)
    void pressed(QPoint point);
%End
%If (QtGraphs_6_9_0 -)
    void released(QPoint point);
%End
};
