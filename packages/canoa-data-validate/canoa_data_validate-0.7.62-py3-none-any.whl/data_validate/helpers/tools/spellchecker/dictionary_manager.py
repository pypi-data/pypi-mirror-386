#  Copyright (c) 2025 Mário Carvalho (https://github.com/MarioCarvalhoBr).
import os
from pathlib import Path
from typing import List

from enchant import Broker, Dict


class DictionaryManager:
    """Enchant dictionary manager for spell checking operations.

    Manages dictionary initialization, word loading, and cleanup of temporary files
    generated by Enchant when adding custom words to dictionaries.

    Attributes:
        lang_dict_spell: Language code for the spell check dictionary
        dictionary: Enchant dictionary instance
        broker: Enchant broker instance
        path_dictionary: Path to dictionaries folder
    """

    def __init__(self, lang_dict_spell: str):
        """Initialize dictionary manager with specified language.

        Args:
            lang_dict_spell: Language code (e.g., 'pt_BR', 'en_US')
        """
        self.lang_dict_spell = lang_dict_spell
        self.dictionary = None
        self.broker = None
        self._errors = []
        self.path_dictionary: Path = Path(__file__).resolve().parents[3] / "static" / "dictionaries"

        self._setup_paths()

    def _setup_paths(self) -> None:
        """Configure Enchant dictionary paths and environment variables."""
        enchant_config_dir = self.path_dictionary

        # Define o diretório de configuração do Enchant
        os.environ["ENCHANT_CONFIG_DIR"] = str(enchant_config_dir)

    def validate_dictionary(self) -> List[str]:
        """Check if the specified dictionary exists.

        Returns:
            List of validation error messages, empty if valid
        """
        try:
            self.broker = Broker()
            if not self.broker.dict_exists(self.lang_dict_spell):
                self._errors.append(f"Dicionário {self.lang_dict_spell} não encontrado")
        except Exception as e:
            self._errors.append(f"Erro ao verificar dicionário: {e}")

        return self._errors

    def initialize_dictionary(self, list_words_user) -> Dict | None:
        """Initialize Enchant dictionary and load custom words.

        Loads extra words from extra-words.dic file and adds user-provided words.

        Args:
            list_words_user: List of custom words to add to dictionary

        Returns:
            Enchant dictionary instance or None if initialization failed
        """
        try:
            if not self.broker:
                self.broker = Broker()

            self.dictionary = self.broker.request_dict(self.lang_dict_spell)

            # Adiciona palavras extras do arquivo extra-words.dic
            self._load_extra_words()

            # Adiciona palavras do usuário
            for word in list_words_user:
                if word and not word.startswith("#"):
                    self.dictionary.add(word)

            return self.dictionary
        except Exception as e:
            self._errors.append(f"Erro ao inicializar dicionário {self.lang_dict_spell}: {e}")

    def _load_extra_words(self) -> None:
        """Load additional words from extra-words.dic file.

        Reads the extra-words.dic file and adds each non-comment line
        to the dictionary. Ignores lines starting with '#'.
        """
        try:
            extra_words_path = self.path_dictionary / "extra-words.dic"

            if extra_words_path.exists():
                with open(extra_words_path, "r", encoding="utf-8") as file:
                    for line in file:
                        word = line.strip()
                        if word and not word.startswith("#"):  # Ignora linhas vazias e comentários
                            self.dictionary.add(word)
            else:
                self._errors.append("Arquivo extra-words.dic não encontrado. Reporte o erro ao administrador do sistema.")

        except Exception as e:
            # Log do erro mas não interrompe a execução
            self._errors.append(f"Aviso: Não foi possível carregar palavras extras: {e}")

    def __del__(self):
        """Cleanup temporary files when object is destroyed."""
        try:
            self.clean_temporary_files()
        except Exception:
            # Ignore errors during cleanup in destructor
            pass

    def clean_temporary_files(self):
        """Remove temporary files created by Enchant.

        Cleans up .dic and .exc files generated when adding custom words
        to the dictionary. These files contain concatenated custom words
        and should be removed after spell checking operations.
        """

        # First, properly cleanup the broker and dictionary
        try:
            if self.dictionary:
                # Free the dictionary resource
                self.dictionary = None

            if self.broker:
                # Cleanup broker resources
                self.broker = None

        except Exception as e:
            self._errors.append(f"Warning: Could not cleanup Enchant resources: {e}")

        # Remove temporary dictionary files
        temp_files_to_remove = [
            self.path_dictionary / f"{self.lang_dict_spell}.dic",
            self.path_dictionary / f"{self.lang_dict_spell}.exc",
        ]

        for temp_file in temp_files_to_remove:
            try:
                if temp_file.exists():
                    temp_file.unlink()
            except Exception as e:
                self._errors.append(f"Warning: Could not remove temporary file {temp_file}: {e}")
