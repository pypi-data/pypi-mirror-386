# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import server_pb2 as server__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in server_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ServerServiceStub(object):
    """ServerService is a service that provides information about a Gitaly server.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ServerInfo = channel.unary_unary(
                '/gitaly.ServerService/ServerInfo',
                request_serializer=server__pb2.ServerInfoRequest.SerializeToString,
                response_deserializer=server__pb2.ServerInfoResponse.FromString,
                _registered_method=True)
        self.DiskStatistics = channel.unary_unary(
                '/gitaly.ServerService/DiskStatistics',
                request_serializer=server__pb2.DiskStatisticsRequest.SerializeToString,
                response_deserializer=server__pb2.DiskStatisticsResponse.FromString,
                _registered_method=True)
        self.ReadinessCheck = channel.unary_unary(
                '/gitaly.ServerService/ReadinessCheck',
                request_serializer=server__pb2.ReadinessCheckRequest.SerializeToString,
                response_deserializer=server__pb2.ReadinessCheckResponse.FromString,
                _registered_method=True)
        self.ServerSignature = channel.unary_unary(
                '/gitaly.ServerService/ServerSignature',
                request_serializer=server__pb2.ServerSignatureRequest.SerializeToString,
                response_deserializer=server__pb2.ServerSignatureResponse.FromString,
                _registered_method=True)


class ServerServiceServicer(object):
    """ServerService is a service that provides information about a Gitaly server.
    """

    def ServerInfo(self, request, context):
        """ServerInfo ...
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DiskStatistics(self, request, context):
        """DiskStatistics ...
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadinessCheck(self, request, context):
        """ReadinessCheck runs the set of the checks to make sure service is in operational state.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ServerSignature(self, request, context):
        """ServerSignature returns the contents of the public key used to sign
        commits made through the GitLab UI or Web IDE.
        See https://docs.gitlab.com/user/project/repository/signed_commits/#verify-commits-made-in-the-web-ui
        for more information.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ServerInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.ServerInfo,
                    request_deserializer=server__pb2.ServerInfoRequest.FromString,
                    response_serializer=server__pb2.ServerInfoResponse.SerializeToString,
            ),
            'DiskStatistics': grpc.unary_unary_rpc_method_handler(
                    servicer.DiskStatistics,
                    request_deserializer=server__pb2.DiskStatisticsRequest.FromString,
                    response_serializer=server__pb2.DiskStatisticsResponse.SerializeToString,
            ),
            'ReadinessCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadinessCheck,
                    request_deserializer=server__pb2.ReadinessCheckRequest.FromString,
                    response_serializer=server__pb2.ReadinessCheckResponse.SerializeToString,
            ),
            'ServerSignature': grpc.unary_unary_rpc_method_handler(
                    servicer.ServerSignature,
                    request_deserializer=server__pb2.ServerSignatureRequest.FromString,
                    response_serializer=server__pb2.ServerSignatureResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gitaly.ServerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('gitaly.ServerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ServerService(object):
    """ServerService is a service that provides information about a Gitaly server.
    """

    @staticmethod
    def ServerInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gitaly.ServerService/ServerInfo',
            server__pb2.ServerInfoRequest.SerializeToString,
            server__pb2.ServerInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DiskStatistics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gitaly.ServerService/DiskStatistics',
            server__pb2.DiskStatisticsRequest.SerializeToString,
            server__pb2.DiskStatisticsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadinessCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gitaly.ServerService/ReadinessCheck',
            server__pb2.ReadinessCheckRequest.SerializeToString,
            server__pb2.ReadinessCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ServerSignature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gitaly.ServerService/ServerSignature',
            server__pb2.ServerSignatureRequest.SerializeToString,
            server__pb2.ServerSignatureResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
