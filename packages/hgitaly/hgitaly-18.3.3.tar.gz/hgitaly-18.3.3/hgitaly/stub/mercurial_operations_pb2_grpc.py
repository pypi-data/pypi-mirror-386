# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import mercurial_operations_pb2 as mercurial__operations__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in mercurial_operations_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MercurialOperationsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.MergeAnalysis = channel.unary_unary(
                '/hgitaly.MercurialOperationsService/MergeAnalysis',
                request_serializer=mercurial__operations__pb2.MergeAnalysisRequest.SerializeToString,
                response_deserializer=mercurial__operations__pb2.MergeAnalysisResponse.FromString,
                _registered_method=True)
        self.InvalidateMergeAnalysis = channel.unary_unary(
                '/hgitaly.MercurialOperationsService/InvalidateMergeAnalysis',
                request_serializer=mercurial__operations__pb2.InvalidateMergeAnalysisRequest.SerializeToString,
                response_deserializer=mercurial__operations__pb2.InvalidateMergeAnalysisResponse.FromString,
                _registered_method=True)
        self.PublishChangeset = channel.unary_unary(
                '/hgitaly.MercurialOperationsService/PublishChangeset',
                request_serializer=mercurial__operations__pb2.PublishChangesetRequest.SerializeToString,
                response_deserializer=mercurial__operations__pb2.PublishChangesetResponse.FromString,
                _registered_method=True)
        self.Censor = channel.unary_unary(
                '/hgitaly.MercurialOperationsService/Censor',
                request_serializer=mercurial__operations__pb2.CensorRequest.SerializeToString,
                response_deserializer=mercurial__operations__pb2.CensorResponse.FromString,
                _registered_method=True)
        self.MergeBranch = channel.unary_unary(
                '/hgitaly.MercurialOperationsService/MergeBranch',
                request_serializer=mercurial__operations__pb2.MergeBranchRequest.SerializeToString,
                response_deserializer=mercurial__operations__pb2.MergeBranchResponse.FromString,
                _registered_method=True)
        self.GetWorkingDirectory = channel.unary_unary(
                '/hgitaly.MercurialOperationsService/GetWorkingDirectory',
                request_serializer=mercurial__operations__pb2.GetWorkingDirectoryRequest.SerializeToString,
                response_deserializer=mercurial__operations__pb2.GetWorkingDirectoryResponse.FromString,
                _registered_method=True)
        self.ReleaseWorkingDirectory = channel.unary_unary(
                '/hgitaly.MercurialOperationsService/ReleaseWorkingDirectory',
                request_serializer=mercurial__operations__pb2.ReleaseWorkingDirectoryRequest.SerializeToString,
                response_deserializer=mercurial__operations__pb2.ReleaseWorkingDirectoryResponse.FromString,
                _registered_method=True)


class MercurialOperationsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def MergeAnalysis(self, request, context):
        """Provide all information for a possible merge

        Will be used in mergeability checks and last-minute checks if needed.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InvalidateMergeAnalysis(self, request, context):
        """Invalidate cache for MergeAnalysis

        Will be used in mergeability checks and last-minute checks if needed.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishChangeset(self, request, context):
        """Publish a changeset

        As any publication in Mercurial, it also publishes all ancestors that
        were not already public.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Censor(self, request, context):
        """Censor a changeset

        Equivalent of `hg censor`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MergeBranch(self, request, context):
        """MergeBranch plays the same role as OperationService.UsermergeBranch with the following differences:

        - It is not a 2-phase operation, hence not streaming
        - The Request message has a slighly different set of options
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWorkingDirectory(self, request, context):
        """GetWorkingDirectory hands over a working directory, checked out to
        the wished changeset.

        The server manages a pool of working directories for efficient update.
        The client has exclusivity over the working directory it has been handed,
        and is expected to release it.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReleaseWorkingDirectory(self, request, context):
        """ReleaseWorkingDirectory allows the server to put a working directoy back
        in the pool for later reuse.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MercurialOperationsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'MergeAnalysis': grpc.unary_unary_rpc_method_handler(
                    servicer.MergeAnalysis,
                    request_deserializer=mercurial__operations__pb2.MergeAnalysisRequest.FromString,
                    response_serializer=mercurial__operations__pb2.MergeAnalysisResponse.SerializeToString,
            ),
            'InvalidateMergeAnalysis': grpc.unary_unary_rpc_method_handler(
                    servicer.InvalidateMergeAnalysis,
                    request_deserializer=mercurial__operations__pb2.InvalidateMergeAnalysisRequest.FromString,
                    response_serializer=mercurial__operations__pb2.InvalidateMergeAnalysisResponse.SerializeToString,
            ),
            'PublishChangeset': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishChangeset,
                    request_deserializer=mercurial__operations__pb2.PublishChangesetRequest.FromString,
                    response_serializer=mercurial__operations__pb2.PublishChangesetResponse.SerializeToString,
            ),
            'Censor': grpc.unary_unary_rpc_method_handler(
                    servicer.Censor,
                    request_deserializer=mercurial__operations__pb2.CensorRequest.FromString,
                    response_serializer=mercurial__operations__pb2.CensorResponse.SerializeToString,
            ),
            'MergeBranch': grpc.unary_unary_rpc_method_handler(
                    servicer.MergeBranch,
                    request_deserializer=mercurial__operations__pb2.MergeBranchRequest.FromString,
                    response_serializer=mercurial__operations__pb2.MergeBranchResponse.SerializeToString,
            ),
            'GetWorkingDirectory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWorkingDirectory,
                    request_deserializer=mercurial__operations__pb2.GetWorkingDirectoryRequest.FromString,
                    response_serializer=mercurial__operations__pb2.GetWorkingDirectoryResponse.SerializeToString,
            ),
            'ReleaseWorkingDirectory': grpc.unary_unary_rpc_method_handler(
                    servicer.ReleaseWorkingDirectory,
                    request_deserializer=mercurial__operations__pb2.ReleaseWorkingDirectoryRequest.FromString,
                    response_serializer=mercurial__operations__pb2.ReleaseWorkingDirectoryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'hgitaly.MercurialOperationsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('hgitaly.MercurialOperationsService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MercurialOperationsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def MergeAnalysis(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hgitaly.MercurialOperationsService/MergeAnalysis',
            mercurial__operations__pb2.MergeAnalysisRequest.SerializeToString,
            mercurial__operations__pb2.MergeAnalysisResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InvalidateMergeAnalysis(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hgitaly.MercurialOperationsService/InvalidateMergeAnalysis',
            mercurial__operations__pb2.InvalidateMergeAnalysisRequest.SerializeToString,
            mercurial__operations__pb2.InvalidateMergeAnalysisResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PublishChangeset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hgitaly.MercurialOperationsService/PublishChangeset',
            mercurial__operations__pb2.PublishChangesetRequest.SerializeToString,
            mercurial__operations__pb2.PublishChangesetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Censor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hgitaly.MercurialOperationsService/Censor',
            mercurial__operations__pb2.CensorRequest.SerializeToString,
            mercurial__operations__pb2.CensorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MergeBranch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hgitaly.MercurialOperationsService/MergeBranch',
            mercurial__operations__pb2.MergeBranchRequest.SerializeToString,
            mercurial__operations__pb2.MergeBranchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetWorkingDirectory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hgitaly.MercurialOperationsService/GetWorkingDirectory',
            mercurial__operations__pb2.GetWorkingDirectoryRequest.SerializeToString,
            mercurial__operations__pb2.GetWorkingDirectoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReleaseWorkingDirectory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hgitaly.MercurialOperationsService/ReleaseWorkingDirectory',
            mercurial__operations__pb2.ReleaseWorkingDirectoryRequest.SerializeToString,
            mercurial__operations__pb2.ReleaseWorkingDirectoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
