# coding: utf-8

"""
    Pulp 3 API

    Fetch, Upload, Organize, and Distribute Software Packages

    The version of the OpenAPI document: v3
    Contact: pulp-list@redhat.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from pulpcore.client.pulp_python.models.python_python_package_content_response import PythonPythonPackageContentResponse

class TestPythonPythonPackageContentResponse(unittest.TestCase):
    """PythonPythonPackageContentResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PythonPythonPackageContentResponse:
        """Test PythonPythonPackageContentResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PythonPythonPackageContentResponse`
        """
        model = PythonPythonPackageContentResponse()
        if include_optional:
            return PythonPythonPackageContentResponse(
                pulp_href = '',
                prn = '',
                pulp_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                pulp_last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                pulp_labels = {
                    'key' : ''
                    },
                vuln_report = '',
                artifact = '',
                author = '',
                author_email = '',
                description = '',
                home_page = '',
                keywords = '',
                license = '',
                metadata_version = '',
                name = '',
                platform = '',
                summary = '',
                version = '',
                classifiers = None,
                download_url = '',
                supported_platform = '',
                maintainer = '',
                maintainer_email = '',
                obsoletes_dist = None,
                project_url = '',
                project_urls = None,
                provides_dist = None,
                requires_external = None,
                requires_dist = None,
                requires_python = '',
                description_content_type = '',
                provides_extras = None,
                dynamic = None,
                license_expression = '',
                license_file = None,
                filename = '',
                packagetype = '',
                python_version = '',
                sha256 = ''
            )
        else:
            return PythonPythonPackageContentResponse(
        )
        """

    def testPythonPythonPackageContentResponse(self):
        """Test PythonPythonPackageContentResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
