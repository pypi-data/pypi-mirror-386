name: Build and Publish

on:
  push:
    branches: [master]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  CARGO_TERM_COLOR: always

jobs:
  check-tag:
    runs-on: ubuntu-latest
    outputs:
      is_tagged: ${{ steps.check.outputs.is_tagged }}
      tag: ${{ steps.check.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for tag detection

      - name: Check if this is a tagged release
        id: check
        run: |
          if git describe --exact-match --tags HEAD 2>/dev/null; then
            echo "is_tagged=true" >> $GITHUB_OUTPUT
            echo "tag=$(git describe --exact-match --tags HEAD)" >> $GITHUB_OUTPUT
          else
            echo "is_tagged=false" >> $GITHUB_OUTPUT
          fi

  build-wheels:
    needs: check-tag
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu]
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        include:
          - target: x86_64-unknown-linux-gnu
            platform: linux-x86_64
          - target: aarch64-unknown-linux-gnu
            platform: linux-aarch64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Cache maturin
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/maturin
          key: ${{ runner.os }}-maturin-1.9.5
          restore-keys: |
            ${{ runner.os }}-maturin-

      - name: Install cross-compilation dependencies (ARM)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          rustup target add aarch64-unknown-linux-gnu

      - name: Install maturin
        run: |
          # Check if maturin is already cached
          if command -v maturin &> /dev/null; then
            echo "maturin already installed, skipping installation"
            maturin --version
          else
            echo "Installing maturin..."
            # Use a specific version and add timeout to avoid cancellation
            timeout 600 cargo install maturin --version 1.9.5 --locked --force
          fi

      - name: Update version from tag
        if: needs.check-tag.outputs.is_tagged == 'true'
        run: |
          TAG_VERSION=${{ needs.check-tag.outputs.tag }}
          echo "Original tag: $TAG_VERSION"
          # Remove 'v' prefix if present
          TAG_VERSION=${TAG_VERSION#v}
          echo "Cleaned version: $TAG_VERSION"

          # Show current versions before update
          echo "Current pyproject.toml version:"
          grep "version = " pyproject.toml
          echo "Current Cargo.toml version:"
          grep "version = " Cargo.toml

          # Update pyproject.toml
          sed -i "s/^version = \".*\"/version = \"$TAG_VERSION\"/" pyproject.toml

          # Update Cargo.toml
          sed -i "s/^version = \".*\"/version = \"$TAG_VERSION\"/" Cargo.toml

          # Show updated versions
          echo "Updated pyproject.toml version:"
          grep "version = " pyproject.toml
          echo "Updated Cargo.toml version:"
          grep "version = " Cargo.toml

          echo "Updated version to $TAG_VERSION"

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Build wheel
        env:
          TARGET: ${{ matrix.target }}
        run: |
          if [ "$TARGET" = "x86_64-unknown-linux-gnu" ]; then
            # Create a virtual environment with uv for the specific Python version
            uv venv --python ${{ matrix.python-version }}
            source .venv/bin/activate
            
            # Build wheel for x86_64
            maturin build --release --target $TARGET --out dist
          else
            # For ARM64, we need to set the linker and use uv's Python
            export CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
            export CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++
            export AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar
            export RANLIB_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ranlib
            
            # Create a virtual environment with uv and activate it
            uv venv --python ${{ matrix.python-version }}
            source .venv/bin/activate
            
            # Get the Python interpreter path from the venv
            PYTHON_PATH=$(which python)
            echo "Using Python at: $PYTHON_PATH"
            python --version
            
            # Create a symlink with the expected name for maturin
            sudo ln -sf "$PYTHON_PATH" /usr/local/bin/python${{ matrix.python-version }}
            
            # Set up cargo config for cross-compilation
            mkdir -p .cargo
            echo '[target.aarch64-unknown-linux-gnu]' > .cargo/config.toml
            echo 'linker = "aarch64-linux-gnu-gcc"' >> .cargo/config.toml
            echo 'ar = "aarch64-linux-gnu-ar"' >> .cargo/config.toml
            
            # Build with the interpreter name maturin expects for cross-compilation
            maturin build --release --target $TARGET --out dist -i python${{ matrix.python-version }}
          fi

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.platform }}-py${{ matrix.python-version }}
          path: dist/*.whl

  publish:
    needs: [check-tag, build-wheels]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && needs.check-tag.outputs.is_tagged == 'true'
    environment: pypi

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: wheel-*
          merge-multiple: true

      - name: Update version from tag
        if: needs.check-tag.outputs.is_tagged == 'true'
        run: |
          TAG_VERSION=${{ needs.check-tag.outputs.tag }}
          echo "Original tag: $TAG_VERSION"
          # Remove 'v' prefix if present
          TAG_VERSION=${TAG_VERSION#v}
          echo "Cleaned version: $TAG_VERSION"

          # Show current versions before update
          echo "Current pyproject.toml version:"
          grep "version = " pyproject.toml
          echo "Current Cargo.toml version:"
          grep "version = " Cargo.toml

          # Update pyproject.toml
          sed -i "s/^version = \".*\"/version = \"$TAG_VERSION\"/" pyproject.toml

          # Update Cargo.toml
          sed -i "s/^version = \".*\"/version = \"$TAG_VERSION\"/" Cargo.toml

          # Show updated versions
          echo "Updated pyproject.toml version:"
          grep "version = " pyproject.toml
          echo "Updated Cargo.toml version:"
          grep "version = " Cargo.toml

          echo "Updated version to $TAG_VERSION"

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Build source distribution
        run: uv build --sdist

      - name: List files to be published
        run: |
          echo "Files in dist directory:"
          ls -la dist/
          echo "Wheel files:"
          find dist/ -name "*.whl" -exec ls -la {} \;
          echo "Source distribution:"
          find dist/ -name "*.tar.gz" -exec ls -la {} \;

      - name: Publish to PyPI
        run: |
          # Upload all wheels and source distribution using OIDC
          uv publish dist/*

  test-build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-test-
            ${{ runner.os }}-cargo-

      - name: Cache maturin
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/maturin
          key: ${{ runner.os }}-maturin-1.9.5
          restore-keys: |
            ${{ runner.os }}-maturin-

      - name: Install maturin
        run: |
          # Check if maturin is already cached
          if command -v maturin &> /dev/null; then
            echo "maturin already installed, skipping installation"
            maturin --version
          else
            echo "Installing maturin..."
            # Use a specific version and add timeout to avoid cancellation
            timeout 600 cargo install maturin --version 1.9.5 --locked --force
          fi

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Install Python dependencies
        run: uv sync --dev

      - name: Build in development mode
        run: |
          # Activate the virtual environment created by uv
          source .venv/bin/activate
          maturin develop --release

      - name: Run tests
        run: uv run pytest tests/ -v

      - name: Test import
        run: |
          uv run python -c "from spot_planner import get_cheapest_periods; print('Import successful')"
