Metadata-Version: 2.4
Name: nv-ingest-client
Version: 2025.10.24.dev20251024
Summary: Python client for the nv-ingest service
Author-email: Jeremy Dyer <jdyer@nvidia.com>
License:                                  Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              editorial revisions, annotations, elaborations, or other modifications
              represent, as a whole, an original work of authorship. For the purposes
              of this License, Derivative Works shall not include works that remain
              separable from, or merely link (or bind by name) to the interfaces of,
              the Work and Derivative Works thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean Licensor and any individual or Legal Entity
              on behalf of whom a Contribution has been received by Licensor and
              subsequently incorporated within the Work.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensable
              by such Contributor that are necessarily infringed by their
              Contribution(s) alone or by combination of their Contribution(s)
              with the Work to which such Contribution(s) was submitted. If You
              institute patent litigation against any entity (including a
              cross-claim or counterclaim in a lawsuit) alleging that the Work
              or a Contribution incorporated within the Work constitutes direct
              or contributory patent infringement, then any patent licenses
              granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You must give any other recipients of the Work or
                  Derivative Works a copy of this License; and
        
              (b) You must cause any modified files to carry prominent notices
                  stating that You changed the files; and
        
              (c) You must retain, in the Source form of any Derivative Works
                  that You distribute, all copyright, patent, trademark, and
                  attribution notices from the Source form of the Work,
                  excluding those notices that do not pertain to any part of
                  the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and
                  do not modify the License. You may add Your own attribution
                  notices within Derivative Works that You distribute, alongside
                  or as an addendum to the NOTICE text from the Work, provided
                  that such additional attribution notices cannot be construed
                  as modifying the License.
        
              You may add Your own copyright statement to Your modifications and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your modifications, or
              for any such Derivative Works as a whole, provided Your use,
              reproduction, and distribution of the Work otherwise complies with
              the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary use in describing the
              origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this
              License. However, in accepting such obligations, You may act only
              on Your own behalf and on Your sole responsibility, not on behalf
              of any other Contributor, and only if You agree to indemnify,
              defend, and hold each Contributor harmless for any liability
              incurred by, or claims asserted against, such Contributor by reason
              of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
        
           APPENDIX: How to apply the Apache License to your work.
        
              To apply the Apache License to your work, attach the following
              boilerplate notice, with the fields enclosed by brackets "[]"
              replaced with your own identifying information. (Don't include
              the brackets!)  The text should be enclosed in the appropriate
              comment syntax for the file format. We also recommend that a
              file or class name and description of purpose be included on the
              same "printed page" as the copyright notice for easier
              identification within third-party archives.
        
           Copyright [yyyy] [name of copyright owner]
        
           Licensed under the Apache License, Version 2.0 (the "License");
           you may not use this file except in compliance with the License.
           You may obtain a copy of the License at
        
               http://www.apache.org/licenses/LICENSE-2.0
        
           Unless required by applicable law or agreed to in writing, software
           distributed under the License is distributed on an "AS IS" BASIS,
           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           See the License for the specific language governing permissions and
           limitations under the License.
        
Project-URL: homepage, https://github.com/NVIDIA/nv-ingest
Project-URL: repository, https://github.com/NVIDIA/nv-ingest
Project-URL: documentation, https://docs.nvidia.com/nv-ingest
Classifier: Programming Language :: Python :: 3.11
Classifier: Operating System :: OS Independent
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: build>=1.2.2
Requires-Dist: charset-normalizer>=3.4.1
Requires-Dist: click>=8.1.8
Requires-Dist: fsspec>=2025.2.0
Requires-Dist: httpx>=0.28.1
Requires-Dist: pydantic>2.0.0
Requires-Dist: pydantic-settings>2.0.0
Requires-Dist: requests>=2.28.2
Requires-Dist: setuptools>=78.1.1
Requires-Dist: tqdm>=4.67.1
Provides-Extra: milvus
Requires-Dist: pymilvus==2.5.10; extra == "milvus"
Requires-Dist: pymilvus[bulk_writer,model]; extra == "milvus"
Provides-Extra: minio
Requires-Dist: minio>=7.2.15; extra == "minio"
Dynamic: license-file

<!--
SPDX-FileCopyrightText: Copyright (c) 2024, NVIDIA CORPORATION & AFFILIATES.
All rights reserved.
SPDX-License-Identifier: Apache-2.0
-->

# NV-Ingest-Client

NV-Ingest-Client is a tool designed for efficient ingestion and processing of large datasets. It provides both a Python API and a command-line interface to cater to various ingestion needs.

> [!Note]
> NV-Ingest is also known as NVIDIA Ingest and NeMo Retriever extraction.


## Table of Contents

1. [Installation](#installation)
2. [Usage](#usage)
   - [CLI Tool](#cli-tool)
   - [API Libraries](#api-libraries)
3. [Command Line Interface (CLI)](#command-line-interface-cli)
   - [Command Overview](#command-overview)
   - [Options](#options)
4. [Examples](#examples)

## Installation

To install NV-Ingest-Client, run the following command in your terminal:

```bash
pip install [REPO_ROOT]/client
```

This command installs both the API libraries and the `nv-ingest-cli` tool which can subsequently be called from the
command line.

## API Libraries

### nv_ingest_client.primitives.jobs

#### JobSpec

Specification for creating a job for submission to the nv-ingest microservice.

- **Parameters**:

  - `payload` (Dict): The payload data for the job.
  - `tasks` (Optional[List], optional): A list of tasks to be added to the job. Defaults to None.
  - `source_id` (Optional[str], optional): An identifier for the source of the job. Defaults to None.
  - `source_name` (Optional[str], optional): A name for the source of the job. Defaults to None.
  - `document_type` (Optional[str], optional): Type of the document. Defaults to 'txt'.
  - `job_id` (Optional[Union[UUID, str]], optional): A unique identifier for the job. Defaults to a new UUID.
  - `extended_options` (Optional[Dict], optional): Additional options for job processing. Defaults to None.

- **Attributes**:

  - `_payload` (Dict): Storage for the payload data.
  - `_tasks` (List): Storage for the list of tasks.
  - `_source_id` (str): Storage for the source identifier.
  - `_job_id` (UUID): Storage for the job's unique identifier.
  - `_extended_options` (Dict): Storage for the additional options.

- **Methods**:

  - **to_dict() -> Dict**:
    - **Description**: Converts the job specification to a dictionary for JSON serialization.
    - **Returns**: `Dict`: Dictionary representation of the job specification.
  - **add_task(task)**:
    - **Description**: Adds a task to the job specification.
    - **Parameters**:
      - `task`: The task to be added. Assumes the task has a `to_dict()` method.
    - **Raises**:
      - `ValueError`: If the task does not have a `to_dict()` method or is not an instance of `Task`.

- **Properties**:

  - `payload`: Getter/Setter for the payload data.
  - `job_id`: Getter/Setter for the job's unique identifier.
  - `source_id`: Getter/Setter for the source identifier.
  - `source_name`: Getter/Setter for the source name.

- **Example Usage**:
  ```python
  job_spec = JobSpec(
      payload={"data": "Example data"},
      tasks=[extract_task, split_task],
      source_id="12345",
      job_id="abcd-efgh-ijkl-mnop",
      extended_options={"tracing_options": {"trace": True}}
  )
  print(job_spec.to_dict())
  ```

### nv_ingest_client.primitives.tasks

#### Task Factory

- **Function**: `task_factory(task_type, **kwargs)`

  - **Description**: Factory method for creating task objects based on the provided task type. It dynamically selects
    the appropriate task class from a mapping and initializes it with any additional keyword arguments.
  - **Parameters**:
    - `task_type` (TaskType or str): The type of the task to create. Can be an enum member of `TaskType` or a string
      representing a valid task type.
    - `**kwargs` (dict): Additional keyword arguments to pass to the task's constructor.
  - **Returns**:
    - `Task`: An instance of the task corresponding to the given task type.
  - **Raises**:
    - `ValueError`: If an invalid task type is provided, or if any unexpected keyword arguments are passed that do
      not match the task constructor's parameters.

- **Example**:
  ```python
  # Assuming TaskType has 'Extract' and 'Split' as valid members and corresponding classes are defined.
  extract_task = task_factory('extract', document_type='PDF', extract_text=True)
  split_task = task_factory('split', split_by='sentence', split_length=100)
  ```

#### ExtractTask

Object for document extraction tasks, extending the `Task` class.

- **Method**: `__init__(document_type, extract_method='pdfium', extract_text=False, extract_images=False,
extract_tables=False)`

  - **Parameters**:
    - `document_type`: Type of document.
    - `extract_method`: Method used for extraction. Default is 'pdfium'.
    - `extract_text`: Boolean indicating if text should be extracted. Default is False.
    - `extract_images`: Boolean indicating if images should be extracted. Default is False.
    - `extract_tables`: Boolean indicating if tables should be extracted. Default is False.
    - `extract_page_as_image`: Boolean indicating if each page should be rendered as an image for embedding. Default is False.
  - **Description**: Sets up configuration for the extraction task.

- **Method: `to_dict()`**
  - **Description**: Converts task details to a dictionary for submission to message client. Includes handling for
    specific
    methods and document types.
  - **Returns**: `Dict`: Dictionary containing task type and properties.

- **Example**:
  ```python
  extract_task = ExtractTask(
    document_type=file_type,
    extract_text=True,
    extract_images=True,
    extract_tables=True
  )
  ```

#### SplitTask

Object for document splitting tasks, extending the `Task` class.

- **Method**: `__init__(split_by=None, split_length=None, split_overlap=None, max_character_length=None,
sentence_window_size=None)`
  - **Parameters**:
    - `split_by`: Criterion for splitting, e.g., 'word', 'sentence', 'passage'.
    - `split_length`: The length of each split segment.
    - `split_overlap`: Overlap length between segments.
    - `max_character_length`: Maximum character length for a split.
    - `sentence_window_size`: Window size for sentence-based splits.
  - **Description**: Sets up configuration for the splitting task.
- **Method: `to_dict()`**
  - **Description**: Converts task details to a dictionary for submission to message client.
  - **Returns**: `Dict`: Dictionary containing task type and properties.

- **Example**:
  ```python
  split_task = SplitTask(
      split_by="word",
      split_length=300,
      split_overlap=10,
      max_character_length=5000,
      sentence_window_size=0,
  )
  ```

### nv_ingest_client.client.client

The `NvIngestClient` class provides a comprehensive suite of methods to handle job submission and retrieval processes
efficiently. Below are the public methods available:

### Initialization

- **`__init__`**:
  Initializes the NvIngestClient with customizable client allocator and Redis configuration.
  - **Parameters**:
    - `message_client_allocator`: A callable that returns an instance of the client used for communication.
    - `message_client_hostname`: Hostname of the message client server. Defaults to "localhost".
    - `message_client_port`: Port number of the message client server. Defaults to 7670.
    - `message_client_kwargs`: Additional keyword arguments for the message client.
    - `msg_counter_id`: Redis key for tracking message counts. Defaults to "nv-ingest-message-id".
    - `worker_pool_size`: Number of worker processes in the pool. Defaults to 1.

- **Example**:
  ```python
  client = NvIngestClient(
    message_client_hostname="localhost", # Host where nv-ingest-ms-runtime is running
    message_client_port=7670 # REST port, defaults to 7670
  )
  ```

## Submission Methods

### submit_job

Submits a job to a specified job queue. This method can optionally wait for a response if blocking is set to True.

- **Parameters**:
  - `job_id`: The unique identifier of the job to be submitted.
  - `job_queue_id`: The ID of the job queue where the job will be submitted.
- **Returns**:
  - Optional[Dict]: The job result if blocking is True and a result is available before the timeout, otherwise None.
- **Raises**:
  - Exception: If submitting the job fails.

- **Example**:
  ```python
  client.submit_job(job_id, "ingest_task_queue")
  ```

### submit_jobs

Submits multiple jobs to a specified job queue. This method does not wait for any of the jobs to complete.

- **Parameters**:
  - `job_ids`: A list of job IDs to be submitted.
  - `job_queue_id`: The ID of the job queue where the jobs will be submitted.
- **Returns**:
  - List[Union[Dict, None]]: A list of job results if blocking is True and results are available before the timeout,
    otherwise None.

- **Example**:
  ```python
  client.submit_jobs([job_id0, job_id1], "ingest_task_queue")
  ```

### submit_job_async

Asynchronously submits one or more jobs to a specified job queue using a thread pool. This method handles both single
job ID or a list of job IDs.

- **Parameters**:
  - `job_ids`: A single job ID or a list of job IDs to be submitted.
  - `job_queue_id`: The ID of the job queue where the jobs will be submitted.
- **Returns**:
  - Dict[Future, str]: A dictionary mapping futures to their respective job IDs for later retrieval of outcomes.
- **Notes**:
  - This method queues the jobs for asynchronous submission and returns a mapping of futures to job IDs.
  - It does not wait for any of the jobs to complete.
  - Ensure that each job is in the proper state before submission.

- **Example**:
  ```python
  client.submit_job_async(job_id, "ingest_task_queue")
  ```

## Job Retrieval

### fetch_job_result

- **Description**: Fetches the job result from a message client, handling potential errors and state changes.
- **Method**: `fetch_job_result(job_id, timeout=10, data_only=True)`
- **Parameters**:
  - `job_id` (str): The identifier of the job.
  - `timeout` (float, optional): Timeout for the fetch operation in seconds. Defaults to 10.
  - `data_only` (bool, optional): If true, only returns the data part of the job result.
- **Returns**:
  - Tuple[Dict, str]: The job result and the job ID.
- **Raises**:
  - `ValueError`: If there is an error in decoding the job result.
  - `TimeoutError`: If the fetch operation times out.
  - `Exception`: For all other unexpected issues.

- **Example**:
  ```python
  job_id = client.add_job(job_spec)
  client.submit_job(job_id, TASK_QUEUE)
  generated_metadata = client.fetch_job_result(
      job_id, timeout=DEFAULT_JOB_TIMEOUT
  )
  ```

### fetch_job_result_async

- **Description**: Fetches job results for a list or a single job ID asynchronously and returns a mapping of futures to
  job IDs.
- **Method**: `fetch_job_result_async(job_ids, timeout=10, data_only=True)`
- **Parameters**:
  - `job_ids` (Union[str, List[str]]): A single job ID or a list of job IDs.
  - `timeout` (float, optional): Timeout for fetching each job result, in seconds. Defaults to 10.
  - `data_only` (bool, optional): Whether to return only the data part of the job result.
- **Returns**:
  - Dict[Future, str]: A dictionary mapping each future to its corresponding job ID.
- **Raises**:
  - No explicit exceptions raised but leverages the exceptions from `fetch_job_result`.

- **Example**:
  ```python
  job_id = client.add_job(job_spec)
  client.submit_job(job_id, TASK_QUEUE)
  generated_metadata = client.fetch_job_result_async(
      job_id, timeout=DEFAULT_JOB_TIMEOUT
  )
  ```

## Job and Task Management

### job_count

- **Description**: Returns the number of jobs currently tracked by the client.
- **Method**: `job_count()`
- **Returns**: Integer representing the total number of jobs.

- **Example**:
  ```python
  client.job_count()
  ```

### add_job

- **Description**: Adds a job specification to the job tracking system.
- **Method**: `add_job(job_spec)`
- **Parameters**:
  - `job_spec` (JobSpec, optional): The job specification to add. If not provided, a new job ID will be generated.
- **Returns**: String representing the job ID of the added job.
- **Raises**:
  - `ValueError`: If a job with the specified job ID already exists.

- **Example**:
  ```python
  extract_task = ExtractTask(
    document_type=file_type,
    extract_text=True,
    extract_images=True,
    extract_tables=True,
    text_depth="document",
    extract_tables_method="yolox",
  )
  job_spec.add_task(extract_task)
  job_id = client.add_job(job_spec)
  ```

### create_job

- **Description**: Creates a new job with specified parameters and adds it to the job tracking dictionary.
- **Method**: `create_job(payload, source_id, source_name, document_type, tasks, job_id, extended_options)`
- **Parameters**:
  - `payload` (str): The payload associated with the job.
  - `source_id` (str): The source identifier for the job.
  - `source_name` (str): The unique name of the job's source data.
  - `document_type` (str, optional): The type of document to be processed.
  - `tasks` (list, optional): A list of tasks to be associated with the job.
  - `job_id` (uuid.UUID | str, optional): The unique identifier for the job.
  - `extended_options` (dict, optional): Additional options for job creation.
- **Returns**: String representing the job ID.
- **Raises**:
  - `ValueError`: If a job with the specified job ID already exists.

### add_task

- **Description**: Adds a task to an existing job.
- **Method**: `add_task(job_id, task)`
- **Parameters**:
  - `job_id` (str): The job ID to which the task will be added.
  - `task` (Task): The task to add.
- **Raises**:
  - `ValueError`: If the job does not exist or is not in the correct state.

- **Example**:
  ```python
  job_spec = JobSpec(
      document_type=file_type,
      payload=file_content,
      source_id=SAMPLE_PDF,
      source_name=SAMPLE_PDF,
      extended_options={
          "tracing_options": {
              "trace": True,
              "ts_send": time.time_ns(),
          }
      },
  )
  extract_task = ExtractTask(
      document_type=file_type,
      extract_text=True,
      extract_images=True,
      extract_tables=True,
      text_depth="document",
      extract_tables_method="yolox",
  )
  job_spec.add_task(extract_task)
  ```

### create_task

- **Description**: Creates a task with specified parameters and adds it to an existing job.
- **Method**: `create_task(job_id, task_type, task_params)`
- **Parameters**:
  - `job_id` (uuid.UUID | str): The unique identifier of the job.
  - `task_type` (TaskType): The type of the task.
  - `task_params` (dict, optional): Parameters for the task.
- **Raises**:
  - `ValueError`: If the job does not exist or if an attempt is made to modify a job after its submission.

- **Example**:
  ```python
  job_id = client.add_job(job_spec)
  client.create_task(job_id, DedupTask, {content_type: "image", filter: True})
  ```

## CLI Tool

After installation, you can use the `nv-ingest-cli` tool from the command line to manage and process datasets.

### CLI Options

Here are the options provided by the CLI, explained:

- `--batch_size`: Specifies the number of documents to process in a single batch. Default is 10. Must be 1 or more.
- `--doc`: Adds a new document to be processed. Supports multiple entries. Files must exist.
- `--dataset`: Specifies the path to a dataset definition file.
- `--client`: Sets the client type with choices including REST, Redis, Kafka. Default is Redis.
- `--client_host`: Specifies the DNS name or URL for the endpoint.
- `--client_port`: Sets the port number for the client endpoint.
- `--client_kwargs`: Provides additional arguments to pass to the client. Default is `{}`.
- `--concurrency_n`: Defines the number of inflight jobs to maintain at one time. Default is 1.
- `--dry_run`: Enables a dry run without executing actions.
- `--output_directory`: Specifies the output directory for results.
- `--log_level`: Sets the log level. Choices are DEBUG, INFO, WARNING, ERROR, CRITICAL. Default is INFO.
- `--shuffle_dataset`: Shuffles the dataset before processing if enabled. Default is true.
- `--task`: Allows for specification of tasks in JSON format. Supports multiple tasks.
- `--collect_profiling_traces`: Collect the tracing profile for the run after processing.
- `--zipkin_host`: Host used to connect to Zipkin to gather tracing profiles.
- `--zipkin_port`: Port used to connect to Zipkin to gether tracing profiles.

## Examples

You can find a notebook with examples that use the CLI client in [the client examples folder](client/client_examples/examples/).
