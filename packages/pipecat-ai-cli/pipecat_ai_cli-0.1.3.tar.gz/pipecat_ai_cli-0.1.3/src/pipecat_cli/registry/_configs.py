"""
AUTO-GENERATED SERVICE CONFIGURATIONS

⚠️  DO NOT EDIT THIS FILE DIRECTLY ⚠️

This file is automatically generated from service_metadata.py.
To make changes, edit service_metadata.py and run:
  uv run scripts/configs/update_configs.py

Source: scripts/configs/config_generator.py
"""

SERVICE_CONFIGS = {
    # STT Services
    "assemblyai_stt": 'AssemblyAISTTService(api_key=os.getenv("ASSEMBLYAI_API_KEY"))',
    "aws_transcribe_stt": (
        "AWSTranscribeSTTService(\n"
        '        aws_access_key_id=os.getenv("AWS_ACCESS_KEY_ID"),\n'
        '        aws_session_token=os.getenv("AWS_AWS_SESSION_TOKEN"),\n'
        '        region=os.getenv("AWS_REGION")\n'
        "    )\n"
    ),
    "azure_stt": (
        "AzureSTTService(\n"
        '        api_key=os.getenv("AZURE_SPEECH_API_KEY"),\n'
        '        region=os.getenv("AZURE_SPEECH_REGION")\n'
        "    )\n"
    ),
    "cartesia_stt": 'CartesiaSTTService(api_key=os.getenv("CARTESIA_API_KEY"))',
    "deepgram_stt": 'DeepgramSTTService(api_key=os.getenv("DEEPGRAM_API_KEY"))',
    "deepgram_flux_stt": 'DeepgramFluxSTTService(api_key=os.getenv("DEEPGRAM_API_KEY"))',
    "elevenlabs_stt": (
        "ElevenLabsSTTService(\n"
        '        api_key=os.getenv("ELEVENLABS_API_KEY"),\n'
        "        aiohttp_session=session\n"
        "    )\n"
    ),
    "fal_stt": 'FalSTTService(api_key=os.getenv("FAL_API_KEY"))',
    "gladia_stt": (
        "GladiaSTTService(\n"
        '        api_key=os.getenv("GLADIA_API_KEY"),\n'
        '        region=os.getenv("GLADIA_REGION")\n'
        "    )\n"
    ),
    "google_stt": (
        "GoogleSTTService(\n"
        '        credentials=os.getenv("GOOGLE_APPLICATION_CREDENTIALS"),\n'
        '        location=os.getenv("GOOGLE_LOCATION")\n'
        "    )\n"
    ),
    "groq_stt": 'GroqSTTService(api_key=os.getenv("GROQ_API_KEY"))',
    "nvidia_riva_stt": 'RivaSTTService(api_key=os.getenv("NVIDIA_API_KEY"))',
    "openai_stt": 'OpenAISTTService(api_key=os.getenv("OPENAI_API_KEY"))',
    "sambanova_stt": (
        "SambaNovaSTTService(\n"
        '        model=os.getenv("SAMBANOVA_MODEL"),\n'
        '        api_key=os.getenv("SAMBANOVA_API_KEY")\n'
        "    )\n"
    ),
    "soniox_stt": 'SonioxSTTService(api_key=os.getenv("SONIOX_API_KEY"))',
    "speechmatics_stt": 'SpeechmaticsSTTService(api_key=os.getenv("SPEECHMATICS_API_KEY"))',
    "ultravox_stt": (
        "UltravoxSTTService(\n"
        '        model_name=os.getenv("ULTRAVOX_MODEL_NAME"),\n'
        '        hf_token=os.getenv("HF_TOKEN"),\n'
        '        region=os.getenv("ULTRAVOX_REGION")\n'
        "    )\n"
    ),
    "whisper_stt": 'WhisperSTTService(model=os.getenv("OPENAI_MODEL"))',
    # LLM Services
    "anthropic_llm": (
        "AnthropicLLMService(\n"
        '        api_key=os.getenv("ANTHROPIC_API_KEY"),\n'
        '        model=os.getenv("ANTHROPIC_MODEL")\n'
        "    )\n"
    ),
    "aws_bedrock_llm": (
        "AWSBedrockLLMService(\n"
        '        aws_region=os.getenv("AWS_REGION"),\n'
        '        model=os.getenv("AWS_BEDROCK_MODEL"),\n'
        "        params=AWSBedrockLLMService.InputParams(temperature=0.8)\n"
        "    )\n"
    ),
    "azure_llm": (
        "AzureLLMService(\n"
        '        model=os.getenv("AZURE_CHATGPT_MODEL"),\n'
        '        api_key=os.getenv("AZURE_CHATGPT_API_KEY"),\n'
        '        endpoint=os.getenv("AZURE_CHATGPT_ENDPOINT")\n'
        "    )\n"
    ),
    "cerebras_llm": (
        "CerebrasLLMService(\n"
        '        model=os.getenv("CEREBRAS_MODEL"),\n'
        '        api_key=os.getenv("CEREBRAS_API_KEY")\n'
        "    )\n"
    ),
    "deepseek_llm": (
        "DeepSeekLLMService(\n"
        '        model=os.getenv("DEEPSEEK_MODEL"),\n'
        '        api_key=os.getenv("DEEPSEEK_API_KEY")\n'
        "    )\n"
    ),
    "fireworks_llm": (
        "FireworksLLMService(\n"
        '        model=os.getenv("FIREWORKS_MODEL"),\n'
        '        api_key=os.getenv("FIREWORKS_API_KEY")\n'
        "    )\n"
    ),
    "google_gemini_llm": (
        "GoogleLLMService(\n"
        '        api_key=os.getenv("GOOGLE_API_KEY"),\n'
        '        model=os.getenv("GOOGLE_MODEL")\n'
        "    )\n"
    ),
    "google_vertex_llm": (
        "GoogleVertexLLMService(\n"
        '        credentials=os.getenv("GOOGLE_APPLICATION_CREDENTIALS"),\n'
        '        location=os.getenv("GOOGLE_LOCATION"),\n'
        '        project_id=os.getenv("GOOGLE_PROJECT_ID")\n'
        "    )\n"
    ),
    "grok_llm": (
        "GrokLLMService(\n"
        '        model=os.getenv("GROK_MODEL"),\n'
        '        api_key=os.getenv("GROK_API_KEY")\n'
        "    )\n"
    ),
    "groq_llm": (
        "GroqLLMService(\n"
        '        model=os.getenv("GROQ_MODEL"),\n'
        '        api_key=os.getenv("GROQ_API_KEY")\n'
        "    )\n"
    ),
    "mistral_llm": (
        "MistralLLMService(\n"
        '        model=os.getenv("MISTRAL_MODEL"),\n'
        '        api_key=os.getenv("MISTRAL_API_KEY")\n'
        "    )\n"
    ),
    "nvidia_nim_llm": (
        "NimLLMService(\n"
        '        model=os.getenv("NVIDIA_MODEL"),\n'
        '        api_key=os.getenv("NVIDIA_API_KEY")\n'
        "    )\n"
    ),
    "ollama_llm": 'OLLamaLLMService(model=os.getenv("OLLAMA_MODEL"))',
    "openai_llm": (
        "OpenAILLMService(\n"
        '        model=os.getenv("OPENAI_MODEL"),\n'
        '        api_key=os.getenv("OPENAI_API_KEY")\n'
        "    )\n"
    ),
    "openpipe_llm": (
        "OpenPipeLLMService(\n"
        '        api_key=os.getenv("OPENPIPE_API_KEY"),\n'
        '        openpipe_api_key=os.getenv("OPENPIPE_OPENPIPE_API_KEY")\n'
        "    )\n"
    ),
    "openrouter_llm": (
        "OpenRouterLLMService(\n"
        '        model=os.getenv("OPENROUTER_MODEL"),\n'
        '        api_key=os.getenv("OPENROUTER_API_KEY")\n'
        "    )\n"
    ),
    "perplexity_llm": (
        "PerplexityLLMService(\n"
        '        model=os.getenv("PERPLEXITY_MODEL"),\n'
        '        api_key=os.getenv("PERPLEXITY_API_KEY")\n'
        "    )\n"
    ),
    "qwen_llm": (
        "QwenLLMService(\n"
        '        model=os.getenv("QWEN_MODEL"),\n'
        '        api_key=os.getenv("QWEN_API_KEY")\n'
        "    )\n"
    ),
    "sambanova_llm": (
        "SambaNovaLLMService(\n"
        '        model=os.getenv("SAMBANOVA_MODEL"),\n'
        '        api_key=os.getenv("SAMBANOVA_API_KEY")\n'
        "    )\n"
    ),
    "together_llm": (
        "TogetherLLMService(\n"
        '        model=os.getenv("TOGETHER_MODEL"),\n'
        '        api_key=os.getenv("TOGETHER_API_KEY")\n'
        "    )\n"
    ),
    # TTS Services
    "asyncai_tts": (
        "AsyncAITTSService(\n"
        '        api_key=os.getenv("ASYNCAI_API_KEY"),\n'
        '        voice_id=os.getenv("ASYNCAI_VOICE_ID")\n'
        "    )\n"
    ),
    "aws_polly_tts": (
        "AWSPollyTTSService(\n"
        '        region=os.getenv("AWS_REGION"),\n'
        '        voice_id=os.getenv("AWS_VOICE_ID"),\n'
        '        params=AWSPollyTTSService.InputParams(engine="generative"),\n'
        "    )\n"
    ),
    "azure_tts": (
        "AzureTTSService(\n"
        '        api_key=os.getenv("AZURE_SPEECH_API_KEY"),\n'
        '        region=os.getenv("AZURE_SPEECH_REGION"),\n'
        '        voice=os.getenv("AZURE_SPEECH_VOICE_ID")\n'
        "    )\n"
    ),
    "cartesia_tts": (
        "CartesiaTTSService(\n"
        '        api_key=os.getenv("CARTESIA_API_KEY"),\n'
        '        voice_id=os.getenv("CARTESIA_VOICE_ID")\n'
        "    )\n"
    ),
    "deepgram_tts": (
        "DeepgramTTSService(\n"
        '        api_key=os.getenv("DEEPGRAM_API_KEY"),\n'
        '        voice=os.getenv("DEEPGRAM_VOICE_ID")\n'
        "    )\n"
    ),
    "elevenlabs_tts": (
        "ElevenLabsTTSService(\n"
        '        api_key=os.getenv("ELEVENLABS_API_KEY"),\n'
        '        voice_id=os.getenv("ELEVENLABS_VOICE_ID")\n'
        "    )\n"
    ),
    "fish_tts": (
        "FishAudioTTSService(\n"
        '        api_key=os.getenv("FISH_API_KEY"),\n'
        '        model=os.getenv("FISH_MODEL")\n'
        "    )\n"
    ),
    "google_tts": (
        "GoogleTTSService(\n"
        '        credentials=os.getenv("GOOGLE_APPLICATION_CREDENTIALS"),\n'
        '        voice_id=os.getenv("GOOGLE_VOICE_ID")\n'
        "    )\n"
    ),
    "groq_tts": (
        "GroqTTSService(\n"
        '        api_key=os.getenv("GROQ_API_KEY"),\n'
        '        voice_id=os.getenv("GROQ_VOICE_ID")\n'
        "    )\n"
    ),
    "hume_tts": (
        "HumeTTSService(\n"
        '        api_key=os.getenv("HUME_API_KEY"),\n'
        '        voice_id=os.getenv("HUME_VOICE_ID")\n'
        "    )\n"
    ),
    "inworld_tts": (
        "InworldTTSService(\n"
        '        api_key=os.getenv("INWORLD_API_KEY"),\n'
        "        aiohttp_session=session,\n"
        '        voice_id=os.getenv("INWORLD_VOICE_ID")\n'
        "    )\n"
    ),
    "lmnt_tts": (
        "LmntTTSService(\n"
        '        api_key=os.getenv("LMNT_API_KEY"),\n'
        '        voice_id=os.getenv("LMNT_VOICE_ID")\n'
        "    )\n"
    ),
    "minimax_tts": (
        "MiniMaxHttpTTSService(\n"
        '        api_key=os.getenv("MINIMAX_API_KEY"),\n'
        '        group_id=os.getenv("MINIMAX_GROUP_ID"),\n'
        '        voice_id=os.getenv("MINIMAX_VOICE_ID"),\n'
        "        aiohttp_session=session\n"
        "    )\n"
    ),
    "neuphonic_tts": (
        "NeuphonicTTSService(\n"
        '        api_key=os.getenv("NEUPHONIC_API_KEY"),\n'
        '        voice_id=os.getenv("NEUPHONIC_VOICE_ID")\n'
        "    )\n"
    ),
    "nvidia_riva_tts": (
        "RivaTTSService(\n"
        '        api_key=os.getenv("NVIDIA_API_KEY"),\n'
        '        voice_id=os.getenv("NVIDIA_VOICE_ID")\n'
        "    )\n"
    ),
    "openai_tts": (
        "OpenAITTSService(\n"
        '        api_key=os.getenv("OPENAI_API_KEY"),\n'
        '        voice=os.getenv("OPENAI_VOICE_ID")\n'
        "    )\n"
    ),
    "piper_tts": (
        "PiperTTSService(\n"
        '        base_url=os.getenv("PIPER_BASE_URL"),\n'
        "        aiohttp_session=session\n"
        "    )\n"
    ),
    "rime_tts": (
        "RimeTTSService(\n"
        '        api_key=os.getenv("RIME_API_KEY"),\n'
        '        voice_id=os.getenv("RIME_VOICE_ID")\n'
        "    )\n"
    ),
    "sarvam_tts": (
        "SarvamTTSService(\n"
        '        api_key=os.getenv("SARVAM_API_KEY"),\n'
        '        model=os.getenv("SARVAM_MODEL"),\n'
        '        voice_id=os.getenv("SARVAM_VOICE_ID"),\n'
        "        aiohttp_session=session\n"
        "    )\n"
    ),
    "xtts_tts": (
        "XTTSService(\n"
        '        voice_id=os.getenv("XTTS_VOICE_ID"),\n'
        '        base_url=os.getenv("XTTS_BASE_URL"),\n'
        "        aiohttp_session=session\n"
        "    )\n"
    ),
    # Realtime Services
    "aws_nova_realtime": (
        "llm = AWSNovaSonicLLMService(\n"
        '        secret_access_key=os.getenv("AWS_SECRET_ACCESS_KEY"),\n'
        '        access_key_id=os.getenv("AWS_ACCESS_KEY_ID"),\n'
        '        region=os.getenv("AWS_REGION"),\n'
        '        session_token=os.getenv("AWS_SESSION_TOKEN"),\n'
        '        voice_id=os.getenv("AWS_VOICE_ID"),\n'
        "    )\n"
    ),
    "azure_realtime": (
        "session_properties = SessionProperties(\n"
        '        input_audio_transcription=InputAudioTranscription(model="whisper-1"),\n'
        '        instructions=os.getenv("AZURE_INSTRUCTIONS"),\n'
        "    )\n"
        "    llm = AzureRealtimeLLMService(\n"
        '        api_key=os.getenv("AZURE_REALTIME_API_KEY"),\n'
        '        base_url=os.getenv("AZURE_REALTIME_BASE_URL"),\n'
        "        session_properties=session_properties,\n"
        "        start_audio_paused=False,\n"
        "    )\n"
    ),
    "gemini_live_realtime": (
        "llm = GeminiLiveLLMService(\n"
        '        api_key=os.getenv("GOOGLE_API_KEY"),\n'
        '        model=os.getenv("GOOGLE_MODEL"),\n'
        '        voice_id=os.getenv("GOOGLE_VOICE_ID"),\n'
        '        system_instruction=os.getenv("GOOGLE_SYSTEM_INSTRUCTION"),\n'
        "    )\n"
    ),
    "gemini_vertex_live_realtime": (
        "llm = GeminiLiveVertexLLMService(\n"
        '        credentials=os.getenv("GOOGLE_APPLICATION_CREDENTIALS"),\n'
        '        project_id=os.getenv("GOOGLE_PROJECT_ID"),\n'
        '        location=os.getenv("GOOGLE_LOCATION"),\n'
        '        voice_id=os.getenv("GOOGLE_VOICE_ID"),\n'
        '        system_instruction=os.getenv("GOOGLE_SYSTEM_INSTRUCTION"),\n'
        "    )\n"
    ),
    "openai_realtime": (
        "session_properties = SessionProperties(\n"
        "        audio=AudioConfiguration(\n"
        "            input=AudioInput(\n"
        "                transcription=InputAudioTranscription(),\n"
        "                turn_detection=SemanticTurnDetection(),\n"
        '                noise_reduction=InputAudioNoiseReduction(type="near_field"),\n'
        "            )\n"
        "        ),\n"
        '        instructions=os.getenv("OPENAI_INSTRUCTIONS"),\n'
        "    )\n"
        "    llm = OpenAIRealtimeLLMService(\n"
        '        api_key=os.getenv("OPENAI_API_KEY"),\n'
        "        session_properties=session_properties,\n"
        "        start_audio_paused=False,\n"
        "    )\n"
    ),
}
