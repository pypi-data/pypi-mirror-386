#
# Copyright (c) 2024â€“2025, Daily
#
# SPDX-License-Identifier: BSD 2-Clause License
#

"""{{ project_name }} - Pipecat Voice Agent.

This bot uses a realtime pipeline: Speech-to-Speech with integrated LLM

Generated by Pipecat CLI

Required AI services:
{% if realtime_service %}
- {{ realtime_service.replace('_realtime', '').title() }} (Realtime Speech-to-Speech)
{% endif %}

Run the bot using::
    uv run bot.py
"""

{# Import macros for composition #}
{% import 'server/_macros/event_handlers.jinja2' as handlers %}
{% import 'server/_macros/pipeline_components.jinja2' as pipeline %}
{% import 'server/_macros/helper_functions.jinja2' as helpers %}

{# Standard imports #}
{{ imports|join('\n') }}

{# Daily PSTN specific imports #}
{% if 'daily_pstn_dialin' in transports %}
from server_utils import AgentRequest
{% elif 'daily_pstn_dialout' in transports %}
from server_utils import AgentRequest, DialoutSettings
{% endif %}

load_dotenv(override=True)

{% if recording %}
{{ helpers.save_audio_file_function() }}
{% endif %}

{% if 'daily_pstn_dialout' in transports %}
{{ helpers.dialout_manager_class() }}
{% endif %}

{% if 'daily_pstn_dialout' in transports %}
async def run_bot(
    transport: BaseTransport, runner_args: RunnerArguments, dialout_settings: DialoutSettings
) -> None:
    """Run the voice bot for an outbound call.

    Sets up the bot pipeline with STT, LLM, and TTS services, then initiates
    the dialout and handles the conversation with retry logic.

    Args:
        transport: Daily transport for the call
        runner_args: Runner arguments including handle_sigint
        dialout_settings: Phone number and optional caller ID for the outbound call
    """
{% else %}
async def run_bot(transport: BaseTransport, runner_args: RunnerArguments):
    """Main bot logic."""
{% endif %}
    logger.info("Starting bot")

    # Realtime LLM service (handles STT, LLM, and TTS internally)
    {% if realtime_service and realtime_service in service_configs %}
    {{ service_configs[realtime_service] }}
    {% endif %}

{{ helpers.setup_context() }}

{{ helpers.setup_feature_processors(recording, transcription, bot_type) }}
    
    # Pipeline - assembled from reusable components
{{ pipeline.realtime_pipeline(bot_type, transcription, recording) }}

    task = PipelineTask(
        pipeline,
        params=PipelineParams(
            enable_metrics=True,
            enable_usage_metrics=True,
        ),
        {% if bot_type == 'web' or enable_observability %}
        observers=[
            {% if bot_type == 'web' %}
            RTVIObserver(rtvi),
            {% endif %}
            {% if enable_observability %}
            WhiskerObserver(pipeline),
            TailObserver(),
            {% endif %}
        ],
        {% endif %}
    )

    {% if 'daily_pstn_dialout' in transports %}
    # Initialize dialout manager
    dialout_manager = DialoutManager(transport, dialout_settings)

    {% endif %}
    {# Event handlers - use macros based on transport type #}
    {% if 'daily_pstn_dialin' in transports %}
{{ handlers.daily_pstn_dialin_handlers() }}
    {% elif 'daily_pstn_dialout' in transports %}
{{ handlers.daily_pstn_dialout_handlers() }}
    {% else %}
{{ handlers.standard_handlers() }}
    {% endif %}

    {# Feature-specific event handlers #}
    {% if transcription %}
{{ handlers.transcription_handler() }}
    {% endif %}

    {% if recording %}
{{ handlers.recording_handler() }}
    {% endif %}

    runner = PipelineRunner(handle_sigint=runner_args.handle_sigint)

    await runner.run(task)


async def bot(runner_args: RunnerArguments):
    """Main bot entry point."""
    {# Bot entry point - use blocks based on transport type #}
    {% if 'daily_pstn_dialin' in transports or 'daily_pstn_dialout' in transports %}
{% include 'server/_blocks/bot_entry_daily_pstn.jinja2' %}
    {% else %}
{% include 'server/_blocks/bot_entry_standard.jinja2' %}
    {% endif %}


if __name__ == "__main__":
    from pipecat.runner.run import main

    main()
