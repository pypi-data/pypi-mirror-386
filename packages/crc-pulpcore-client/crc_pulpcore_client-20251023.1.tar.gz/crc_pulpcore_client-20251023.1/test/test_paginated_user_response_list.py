# coding: utf-8

"""
    Pulp 3 API

    Fetch, Upload, Organize, and Distribute Software Packages

    The version of the OpenAPI document: v3
    Contact: pulp-list@redhat.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from pulpcore.client.pulpcore.models.paginated_user_response_list import PaginatedUserResponseList

class TestPaginatedUserResponseList(unittest.TestCase):
    """PaginatedUserResponseList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PaginatedUserResponseList:
        """Test PaginatedUserResponseList
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PaginatedUserResponseList`
        """
        model = PaginatedUserResponseList()
        if include_optional:
            return PaginatedUserResponseList(
                count = 123,
                next = 'http://api.example.org/accounts/?offset=400&limit=100',
                previous = 'http://api.example.org/accounts/?offset=200&limit=100',
                results = [
                    pulpcore.client.pulpcore.models.user_response.UserResponse(
                        pulp_href = '', 
                        prn = '', 
                        id = 56, 
                        username = '', 
                        first_name = '', 
                        last_name = '', 
                        email = '', 
                        is_staff = True, 
                        is_active = True, 
                        date_joined = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        groups = [
                            pulpcore.client.pulpcore.models.user_group_response.UserGroupResponse(
                                name = '', 
                                pulp_href = '', 
                                prn = '', )
                            ], 
                        hidden_fields = [
                            pulpcore.client.pulpcore.models.generic_remote_response_hidden_fields_inner.GenericRemoteResponse_hidden_fields_inner(
                                name = '', 
                                is_set = True, )
                            ], )
                    ]
            )
        else:
            return PaginatedUserResponseList(
                count = 123,
                results = [
                    pulpcore.client.pulpcore.models.user_response.UserResponse(
                        pulp_href = '', 
                        prn = '', 
                        id = 56, 
                        username = '', 
                        first_name = '', 
                        last_name = '', 
                        email = '', 
                        is_staff = True, 
                        is_active = True, 
                        date_joined = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        groups = [
                            pulpcore.client.pulpcore.models.user_group_response.UserGroupResponse(
                                name = '', 
                                pulp_href = '', 
                                prn = '', )
                            ], 
                        hidden_fields = [
                            pulpcore.client.pulpcore.models.generic_remote_response_hidden_fields_inner.GenericRemoteResponse_hidden_fields_inner(
                                name = '', 
                                is_set = True, )
                            ], )
                    ],
        )
        """

    def testPaginatedUserResponseList(self):
        """Test PaginatedUserResponseList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
