# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from nedo_vision_worker.protos import VisionWorkerService_pb2 as nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in nedo_vision_worker/protos/VisionWorkerService_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class VisionWorkerServiceStub(object):
    """Define the VisionWorkerService
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetConnectionInfo = channel.unary_unary(
                '/Sindika.AspNet.App005.Services.VisionWorkerService/GetConnectionInfo',
                request_serializer=nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.GetWorkerConnectionInfoRequest.SerializeToString,
                response_deserializer=nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.GetWorkerConnectionInfoResponse.FromString,
                _registered_method=True)
        self.SendSystemUsage = channel.unary_unary(
                '/Sindika.AspNet.App005.Services.VisionWorkerService/SendSystemUsage',
                request_serializer=nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.SystemUsageRequest.SerializeToString,
                response_deserializer=nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.SystemUsageResponse.FromString,
                _registered_method=True)
        self.UpdateStatus = channel.unary_unary(
                '/Sindika.AspNet.App005.Services.VisionWorkerService/UpdateStatus',
                request_serializer=nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.UpdateWorkerStatusRequest.SerializeToString,
                response_deserializer=nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.UpdateWorkerStatusResponse.FromString,
                _registered_method=True)


class VisionWorkerServiceServicer(object):
    """Define the VisionWorkerService
    """

    def GetConnectionInfo(self, request, context):
        """Connection Info Service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendSystemUsage(self, request, context):
        """System Usage Service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateStatus(self, request, context):
        """Update Status Service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VisionWorkerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetConnectionInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConnectionInfo,
                    request_deserializer=nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.GetWorkerConnectionInfoRequest.FromString,
                    response_serializer=nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.GetWorkerConnectionInfoResponse.SerializeToString,
            ),
            'SendSystemUsage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendSystemUsage,
                    request_deserializer=nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.SystemUsageRequest.FromString,
                    response_serializer=nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.SystemUsageResponse.SerializeToString,
            ),
            'UpdateStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateStatus,
                    request_deserializer=nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.UpdateWorkerStatusRequest.FromString,
                    response_serializer=nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.UpdateWorkerStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Sindika.AspNet.App005.Services.VisionWorkerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Sindika.AspNet.App005.Services.VisionWorkerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class VisionWorkerService(object):
    """Define the VisionWorkerService
    """

    @staticmethod
    def GetConnectionInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Sindika.AspNet.App005.Services.VisionWorkerService/GetConnectionInfo',
            nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.GetWorkerConnectionInfoRequest.SerializeToString,
            nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.GetWorkerConnectionInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendSystemUsage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Sindika.AspNet.App005.Services.VisionWorkerService/SendSystemUsage',
            nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.SystemUsageRequest.SerializeToString,
            nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.SystemUsageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Sindika.AspNet.App005.Services.VisionWorkerService/UpdateStatus',
            nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.UpdateWorkerStatusRequest.SerializeToString,
            nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.UpdateWorkerStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ImageServiceStub(object):
    """//////////////////////////

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetLastImageDate = channel.unary_unary(
                '/Sindika.AspNet.App005.Services.ImageService/GetLastImageDate',
                request_serializer=nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.LastImageDateRequest.SerializeToString,
                response_deserializer=nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.LastImageDateResponse.FromString,
                _registered_method=True)
        self.UploadImage = channel.unary_unary(
                '/Sindika.AspNet.App005.Services.ImageService/UploadImage',
                request_serializer=nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.UploadImageRequest.SerializeToString,
                response_deserializer=nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.UploadImageResponse.FromString,
                _registered_method=True)


class ImageServiceServicer(object):
    """//////////////////////////

    """

    def GetLastImageDate(self, request, context):
        """Get the last uploaded image date
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadImage(self, request, context):
        """Upload an image and metadata
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ImageServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetLastImageDate': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLastImageDate,
                    request_deserializer=nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.LastImageDateRequest.FromString,
                    response_serializer=nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.LastImageDateResponse.SerializeToString,
            ),
            'UploadImage': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadImage,
                    request_deserializer=nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.UploadImageRequest.FromString,
                    response_serializer=nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.UploadImageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Sindika.AspNet.App005.Services.ImageService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Sindika.AspNet.App005.Services.ImageService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ImageService(object):
    """//////////////////////////

    """

    @staticmethod
    def GetLastImageDate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Sindika.AspNet.App005.Services.ImageService/GetLastImageDate',
            nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.LastImageDateRequest.SerializeToString,
            nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.LastImageDateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UploadImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Sindika.AspNet.App005.Services.ImageService/UploadImage',
            nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.UploadImageRequest.SerializeToString,
            nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.UploadImageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class HealthCheckServiceStub(object):
    """//////////////////////////

    Health Check Service for gRPC Latency
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HealthCheck = channel.unary_unary(
                '/Sindika.AspNet.App005.Services.HealthCheckService/HealthCheck',
                request_serializer=nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class HealthCheckServiceServicer(object):
    """//////////////////////////

    Health Check Service for gRPC Latency
    """

    def HealthCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HealthCheckServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.HealthCheckRequest.FromString,
                    response_serializer=nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Sindika.AspNet.App005.Services.HealthCheckService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Sindika.AspNet.App005.Services.HealthCheckService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class HealthCheckService(object):
    """//////////////////////////

    Health Check Service for gRPC Latency
    """

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Sindika.AspNet.App005.Services.HealthCheckService/HealthCheck',
            nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.HealthCheckRequest.SerializeToString,
            nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class VideoStreamServiceStub(object):
    """//////////////////////////

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamVideo = channel.stream_unary(
                '/Sindika.AspNet.App005.Services.VideoStreamService/StreamVideo',
                request_serializer=nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.VideoFrame.SerializeToString,
                response_deserializer=nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.VideoResponse.FromString,
                _registered_method=True)


class VideoStreamServiceServicer(object):
    """//////////////////////////

    """

    def StreamVideo(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VideoStreamServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamVideo': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamVideo,
                    request_deserializer=nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.VideoFrame.FromString,
                    response_serializer=nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.VideoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Sindika.AspNet.App005.Services.VideoStreamService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Sindika.AspNet.App005.Services.VideoStreamService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class VideoStreamService(object):
    """//////////////////////////

    """

    @staticmethod
    def StreamVideo(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/Sindika.AspNet.App005.Services.VideoStreamService/StreamVideo',
            nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.VideoFrame.SerializeToString,
            nedo__vision__worker_dot_protos_dot_VisionWorkerService__pb2.VideoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
