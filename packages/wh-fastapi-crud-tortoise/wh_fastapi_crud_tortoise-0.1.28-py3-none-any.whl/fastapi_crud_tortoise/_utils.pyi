from ._model import OperationsModel as OperationsModel
from ._types import PAGINATION as PAGINATION, SCHEMA as SCHEMA
from fastapi import HTTPException
from typing import Any
from uuid import UUID

def schema_factory(schema_cls: type[SCHEMA], pk_field_name: str = 'id', name: str = 'Create') -> type[SCHEMA]: ...
def create_query_validation_exception(field: str, msg: str) -> HTTPException: ...
def pagination_factory(max_limit: int | None = None) -> Any: ...
def resp_success(data=None, total: int = None, current: int = None, size: int = None, code: str = '0000', msg: str = 'OK', http_code=..., headers={}): ...
def resp_fail(data=None, total=None, code: str = '5000', msg: str = 'Fail', http_code=..., headers={}): ...
async def insert_operation(user: str, action: str, target: str | None = None, notes: str | None = None, tenant_id: UUID | None = None, user_id: UUID | None = None, trace_id: str | None = None): ...
