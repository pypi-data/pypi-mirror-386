name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions: {}

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
          python-version: "3.13"

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Run full CI pipeline
        run: uv run poe ci

  release-client:
    needs: test
    runs-on: ubuntu-latest
    concurrency: release-client
    permissions:
      id-token: write
      contents: write
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
          python-version: "3.13"

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Check for client changes
        id: check
        run: |
          # Check if there are any commits with (client) scope or no scope since last client release
          if git log $(git describe --tags --abbrev=0 --match="client-v*" 2>/dev/null || echo "HEAD~10")..HEAD --pretty=format:"%s" | grep -qE '^(feat|fix|perf)(\(client\))?:'; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Python Semantic Release (Client)
        if: steps.check.outputs.has_changes == 'true'
        id: release
        uses: python-semantic-release/python-semantic-release@v10.2.0
        with:
          github_token: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
          verbosity: 2

      - name: Build client package
        if: steps.release.outputs.released == 'true'
        run: uv build

      - name: Upload client build artifacts
        if: steps.release.outputs.released == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: client-dist
          path: dist/

  release-mcp:
    needs: test
    runs-on: ubuntu-latest
    concurrency: release-mcp
    permissions:
      id-token: write
      contents: write
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
          python-version: "3.13"

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Check for MCP changes
        id: check
        run: |
          # Check if there are any commits with (mcp) scope since last mcp release
          if git log $(git describe --tags --abbrev=0 --match="mcp-v*" 2>/dev/null || echo "HEAD~10")..HEAD --pretty=format:"%s" | grep -qE '^(feat|fix|perf)\(mcp\):'; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Python Semantic Release (MCP)
        if: steps.check.outputs.has_changes == 'true'
        id: release
        uses: python-semantic-release/python-semantic-release@v10.2.0
        with:
          github_token: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
          verbosity: 2
          directory: katana_mcp_server

      - name: Build MCP package
        if: steps.release.outputs.released == 'true'
        run: cd katana_mcp_server && uv build

      - name: Upload MCP build artifacts
        if: steps.release.outputs.released == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: mcp-dist
          path: katana_mcp_server/dist/

  publish-client-pypi:
    name: Publish Client to PyPI
    needs: release-client
    if: needs.release-client.outputs.released == 'true'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Download client build artifacts
        uses: actions/download-artifact@v4
        with:
          name: client-dist
          path: dist/

      - name: Publish client to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          attestations: true

  publish-mcp-pypi:
    name: Publish MCP to PyPI
    needs: release-mcp
    if: needs.release-mcp.outputs.released == 'true'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Download MCP build artifacts
        uses: actions/download-artifact@v4
        with:
          name: mcp-dist
          path: dist/

      - name: Publish MCP to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          attestations: true
