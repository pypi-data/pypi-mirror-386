# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

from . import _utilities
import typing
# Export this package's modules as members:
from .azure_metrics_integration import *
from .blackhole_alert_notifier import *
from .bucket import *
from .bucket_data_source import *
from .classic_dashboard import *
from .collection import *
from .collection_data_source import *
from .consumption_budget import *
from .consumption_config import *
from .dashboard import *
from .dataset import *
from .derived_label import *
from .derived_metric import *
from .drop_rule import *
from .email_alert_notifier import *
from .gcp_metrics_integration import *
from .log_allocation_config import *
from .log_control_config import *
from .log_ingest_config import *
from .logscale_action import *
from .logscale_alert import *
from .mapping_rule import *
from .monitor import *
from .notification_policy import *
from .opsgenie_alert_notifier import *
from .otel_metrics_ingestion import *
from .pagerduty_alert_notifier import *
from .provider import *
from .recording_rule import *
from .resource_pools_config import *
from .rollup_rule import *
from .service_account import *
from .service_data_source import *
from .slack_alert_notifier import *
from .slo import *
from .team import *
from .trace_jaeger_remote_sampling_strategy import *
from .trace_metrics_rule import *
from .trace_tail_sampling_rules import *
from .victorops_alert_notifier import *
from .webhook_alert_notifier import *
from ._inputs import *
from . import outputs

# Make subpackages available:
if typing.TYPE_CHECKING:
    import pulumi_chronosphere.config as __config
    config = __config
else:
    config = _utilities.lazy_import('pulumi_chronosphere.config')

_utilities.register(
    resource_modules="""
[
 {
  "pkg": "chronosphere",
  "mod": "index/azureMetricsIntegration",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/azureMetricsIntegration:AzureMetricsIntegration": "AzureMetricsIntegration"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/blackholeAlertNotifier",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/blackholeAlertNotifier:BlackholeAlertNotifier": "BlackholeAlertNotifier"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/bucket",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/bucket:Bucket": "Bucket"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/classicDashboard",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/classicDashboard:ClassicDashboard": "ClassicDashboard"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/collection",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/collection:Collection": "Collection"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/consumptionBudget",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/consumptionBudget:ConsumptionBudget": "ConsumptionBudget"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/consumptionConfig",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/consumptionConfig:ConsumptionConfig": "ConsumptionConfig"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/dashboard",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/dashboard:Dashboard": "Dashboard"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/dataset",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/dataset:Dataset": "Dataset"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/derivedLabel",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/derivedLabel:DerivedLabel": "DerivedLabel"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/derivedMetric",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/derivedMetric:DerivedMetric": "DerivedMetric"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/dropRule",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/dropRule:DropRule": "DropRule"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/emailAlertNotifier",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/emailAlertNotifier:EmailAlertNotifier": "EmailAlertNotifier"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/gcpMetricsIntegration",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/gcpMetricsIntegration:GcpMetricsIntegration": "GcpMetricsIntegration"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/logAllocationConfig",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/logAllocationConfig:LogAllocationConfig": "LogAllocationConfig"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/logControlConfig",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/logControlConfig:LogControlConfig": "LogControlConfig"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/logIngestConfig",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/logIngestConfig:LogIngestConfig": "LogIngestConfig"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/logscaleAction",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/logscaleAction:LogscaleAction": "LogscaleAction"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/logscaleAlert",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/logscaleAlert:LogscaleAlert": "LogscaleAlert"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/mappingRule",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/mappingRule:MappingRule": "MappingRule"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/monitor",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/monitor:Monitor": "Monitor"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/notificationPolicy",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/notificationPolicy:NotificationPolicy": "NotificationPolicy"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/opsgenieAlertNotifier",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/opsgenieAlertNotifier:OpsgenieAlertNotifier": "OpsgenieAlertNotifier"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/otelMetricsIngestion",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/otelMetricsIngestion:OtelMetricsIngestion": "OtelMetricsIngestion"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/pagerdutyAlertNotifier",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/pagerdutyAlertNotifier:PagerdutyAlertNotifier": "PagerdutyAlertNotifier"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/recordingRule",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/recordingRule:RecordingRule": "RecordingRule"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/resourcePoolsConfig",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/resourcePoolsConfig:ResourcePoolsConfig": "ResourcePoolsConfig"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/rollupRule",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/rollupRule:RollupRule": "RollupRule"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/sLO",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/sLO:SLO": "SLO"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/serviceAccount",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/serviceAccount:ServiceAccount": "ServiceAccount"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/slackAlertNotifier",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/slackAlertNotifier:SlackAlertNotifier": "SlackAlertNotifier"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/team",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/team:Team": "Team"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/traceJaegerRemoteSamplingStrategy",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/traceJaegerRemoteSamplingStrategy:TraceJaegerRemoteSamplingStrategy": "TraceJaegerRemoteSamplingStrategy"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/traceMetricsRule",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/traceMetricsRule:TraceMetricsRule": "TraceMetricsRule"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/traceTailSamplingRules",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/traceTailSamplingRules:TraceTailSamplingRules": "TraceTailSamplingRules"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/victoropsAlertNotifier",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/victoropsAlertNotifier:VictoropsAlertNotifier": "VictoropsAlertNotifier"
  }
 },
 {
  "pkg": "chronosphere",
  "mod": "index/webhookAlertNotifier",
  "fqn": "pulumi_chronosphere",
  "classes": {
   "chronosphere:index/webhookAlertNotifier:WebhookAlertNotifier": "WebhookAlertNotifier"
  }
 }
]
""",
    resource_packages="""
[
 {
  "pkg": "chronosphere",
  "token": "pulumi:providers:chronosphere",
  "fqn": "pulumi_chronosphere",
  "class": "Provider"
 }
]
"""
)
