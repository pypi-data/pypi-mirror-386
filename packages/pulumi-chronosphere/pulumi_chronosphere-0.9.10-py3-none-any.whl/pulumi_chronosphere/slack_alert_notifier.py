# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SlackAlertNotifierArgs', 'SlackAlertNotifier']

@pulumi.input_type
class SlackAlertNotifierArgs:
    def __init__(__self__, *,
                 api_url: pulumi.Input[str],
                 channel: pulumi.Input[str],
                 name: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['SlackAlertNotifierActionArgs']]]] = None,
                 basic_auth_password: Optional[pulumi.Input[str]] = None,
                 basic_auth_username: Optional[pulumi.Input[str]] = None,
                 bearer_token: Optional[pulumi.Input[str]] = None,
                 callback_id: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[str]] = None,
                 fallback: Optional[pulumi.Input[str]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input['SlackAlertNotifierFieldArgs']]]] = None,
                 footer: Optional[pulumi.Input[str]] = None,
                 icon_emoji: Optional[pulumi.Input[str]] = None,
                 icon_url: Optional[pulumi.Input[str]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 link_names: Optional[pulumi.Input[bool]] = None,
                 mrkdwn_ins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 pretext: Optional[pulumi.Input[str]] = None,
                 proxy_url: Optional[pulumi.Input[str]] = None,
                 send_resolved: Optional[pulumi.Input[bool]] = None,
                 short_fields: Optional[pulumi.Input[bool]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 text: Optional[pulumi.Input[str]] = None,
                 thumb_url: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_link: Optional[pulumi.Input[str]] = None,
                 tls_insecure_skip_verify: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SlackAlertNotifier resource.
        """
        pulumi.set(__self__, "api_url", api_url)
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "name", name)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if basic_auth_password is not None:
            pulumi.set(__self__, "basic_auth_password", basic_auth_password)
        if basic_auth_username is not None:
            pulumi.set(__self__, "basic_auth_username", basic_auth_username)
        if bearer_token is not None:
            pulumi.set(__self__, "bearer_token", bearer_token)
        if callback_id is not None:
            pulumi.set(__self__, "callback_id", callback_id)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if fallback is not None:
            pulumi.set(__self__, "fallback", fallback)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if footer is not None:
            pulumi.set(__self__, "footer", footer)
        if icon_emoji is not None:
            pulumi.set(__self__, "icon_emoji", icon_emoji)
        if icon_url is not None:
            pulumi.set(__self__, "icon_url", icon_url)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if link_names is not None:
            pulumi.set(__self__, "link_names", link_names)
        if mrkdwn_ins is not None:
            pulumi.set(__self__, "mrkdwn_ins", mrkdwn_ins)
        if pretext is not None:
            pulumi.set(__self__, "pretext", pretext)
        if proxy_url is not None:
            warnings.warn("""custom proxy URLs are not supported""", DeprecationWarning)
            pulumi.log.warn("""proxy_url is deprecated: custom proxy URLs are not supported""")
        if proxy_url is not None:
            pulumi.set(__self__, "proxy_url", proxy_url)
        if send_resolved is not None:
            pulumi.set(__self__, "send_resolved", send_resolved)
        if short_fields is not None:
            pulumi.set(__self__, "short_fields", short_fields)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if text is not None:
            pulumi.set(__self__, "text", text)
        if thumb_url is not None:
            pulumi.set(__self__, "thumb_url", thumb_url)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_link is not None:
            pulumi.set(__self__, "title_link", title_link)
        if tls_insecure_skip_verify is not None:
            pulumi.set(__self__, "tls_insecure_skip_verify", tls_insecure_skip_verify)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_url")

    @api_url.setter
    def api_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_url", value)

    @property
    @pulumi.getter
    def channel(self) -> pulumi.Input[str]:
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: pulumi.Input[str]):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SlackAlertNotifierActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SlackAlertNotifierActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="basicAuthPassword")
    def basic_auth_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "basic_auth_password")

    @basic_auth_password.setter
    def basic_auth_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "basic_auth_password", value)

    @property
    @pulumi.getter(name="basicAuthUsername")
    def basic_auth_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "basic_auth_username")

    @basic_auth_username.setter
    def basic_auth_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "basic_auth_username", value)

    @property
    @pulumi.getter(name="bearerToken")
    def bearer_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bearer_token")

    @bearer_token.setter
    def bearer_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bearer_token", value)

    @property
    @pulumi.getter(name="callbackId")
    def callback_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "callback_id")

    @callback_id.setter
    def callback_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "callback_id", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def fallback(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fallback")

    @fallback.setter
    def fallback(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fallback", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SlackAlertNotifierFieldArgs']]]]:
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SlackAlertNotifierFieldArgs']]]]):
        pulumi.set(self, "fields", value)

    @property
    @pulumi.getter
    def footer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "footer")

    @footer.setter
    def footer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "footer", value)

    @property
    @pulumi.getter(name="iconEmoji")
    def icon_emoji(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon_emoji")

    @icon_emoji.setter
    def icon_emoji(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon_emoji", value)

    @property
    @pulumi.getter(name="iconUrl")
    def icon_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon_url")

    @icon_url.setter
    def icon_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon_url", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter(name="linkNames")
    def link_names(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "link_names")

    @link_names.setter
    def link_names(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "link_names", value)

    @property
    @pulumi.getter(name="mrkdwnIns")
    def mrkdwn_ins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "mrkdwn_ins")

    @mrkdwn_ins.setter
    def mrkdwn_ins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "mrkdwn_ins", value)

    @property
    @pulumi.getter
    def pretext(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pretext")

    @pretext.setter
    def pretext(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pretext", value)

    @property
    @pulumi.getter(name="proxyUrl")
    def proxy_url(self) -> Optional[pulumi.Input[str]]:
        warnings.warn("""custom proxy URLs are not supported""", DeprecationWarning)
        pulumi.log.warn("""proxy_url is deprecated: custom proxy URLs are not supported""")

        return pulumi.get(self, "proxy_url")

    @proxy_url.setter
    def proxy_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_url", value)

    @property
    @pulumi.getter(name="sendResolved")
    def send_resolved(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "send_resolved")

    @send_resolved.setter
    def send_resolved(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "send_resolved", value)

    @property
    @pulumi.getter(name="shortFields")
    def short_fields(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "short_fields")

    @short_fields.setter
    def short_fields(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "short_fields", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter(name="thumbUrl")
    def thumb_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thumb_url")

    @thumb_url.setter
    def thumb_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thumb_url", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleLink")
    def title_link(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_link")

    @title_link.setter
    def title_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_link", value)

    @property
    @pulumi.getter(name="tlsInsecureSkipVerify")
    def tls_insecure_skip_verify(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "tls_insecure_skip_verify")

    @tls_insecure_skip_verify.setter
    def tls_insecure_skip_verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tls_insecure_skip_verify", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class _SlackAlertNotifierState:
    def __init__(__self__, *,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['SlackAlertNotifierActionArgs']]]] = None,
                 api_url: Optional[pulumi.Input[str]] = None,
                 basic_auth_password: Optional[pulumi.Input[str]] = None,
                 basic_auth_username: Optional[pulumi.Input[str]] = None,
                 bearer_token: Optional[pulumi.Input[str]] = None,
                 callback_id: Optional[pulumi.Input[str]] = None,
                 channel: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[str]] = None,
                 fallback: Optional[pulumi.Input[str]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input['SlackAlertNotifierFieldArgs']]]] = None,
                 footer: Optional[pulumi.Input[str]] = None,
                 icon_emoji: Optional[pulumi.Input[str]] = None,
                 icon_url: Optional[pulumi.Input[str]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 link_names: Optional[pulumi.Input[bool]] = None,
                 mrkdwn_ins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pretext: Optional[pulumi.Input[str]] = None,
                 proxy_url: Optional[pulumi.Input[str]] = None,
                 send_resolved: Optional[pulumi.Input[bool]] = None,
                 short_fields: Optional[pulumi.Input[bool]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 text: Optional[pulumi.Input[str]] = None,
                 thumb_url: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_link: Optional[pulumi.Input[str]] = None,
                 tls_insecure_skip_verify: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SlackAlertNotifier resources.
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if api_url is not None:
            pulumi.set(__self__, "api_url", api_url)
        if basic_auth_password is not None:
            pulumi.set(__self__, "basic_auth_password", basic_auth_password)
        if basic_auth_username is not None:
            pulumi.set(__self__, "basic_auth_username", basic_auth_username)
        if bearer_token is not None:
            pulumi.set(__self__, "bearer_token", bearer_token)
        if callback_id is not None:
            pulumi.set(__self__, "callback_id", callback_id)
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if fallback is not None:
            pulumi.set(__self__, "fallback", fallback)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if footer is not None:
            pulumi.set(__self__, "footer", footer)
        if icon_emoji is not None:
            pulumi.set(__self__, "icon_emoji", icon_emoji)
        if icon_url is not None:
            pulumi.set(__self__, "icon_url", icon_url)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if link_names is not None:
            pulumi.set(__self__, "link_names", link_names)
        if mrkdwn_ins is not None:
            pulumi.set(__self__, "mrkdwn_ins", mrkdwn_ins)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pretext is not None:
            pulumi.set(__self__, "pretext", pretext)
        if proxy_url is not None:
            warnings.warn("""custom proxy URLs are not supported""", DeprecationWarning)
            pulumi.log.warn("""proxy_url is deprecated: custom proxy URLs are not supported""")
        if proxy_url is not None:
            pulumi.set(__self__, "proxy_url", proxy_url)
        if send_resolved is not None:
            pulumi.set(__self__, "send_resolved", send_resolved)
        if short_fields is not None:
            pulumi.set(__self__, "short_fields", short_fields)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if text is not None:
            pulumi.set(__self__, "text", text)
        if thumb_url is not None:
            pulumi.set(__self__, "thumb_url", thumb_url)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_link is not None:
            pulumi.set(__self__, "title_link", title_link)
        if tls_insecure_skip_verify is not None:
            pulumi.set(__self__, "tls_insecure_skip_verify", tls_insecure_skip_verify)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SlackAlertNotifierActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SlackAlertNotifierActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_url")

    @api_url.setter
    def api_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_url", value)

    @property
    @pulumi.getter(name="basicAuthPassword")
    def basic_auth_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "basic_auth_password")

    @basic_auth_password.setter
    def basic_auth_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "basic_auth_password", value)

    @property
    @pulumi.getter(name="basicAuthUsername")
    def basic_auth_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "basic_auth_username")

    @basic_auth_username.setter
    def basic_auth_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "basic_auth_username", value)

    @property
    @pulumi.getter(name="bearerToken")
    def bearer_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bearer_token")

    @bearer_token.setter
    def bearer_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bearer_token", value)

    @property
    @pulumi.getter(name="callbackId")
    def callback_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "callback_id")

    @callback_id.setter
    def callback_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "callback_id", value)

    @property
    @pulumi.getter
    def channel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def fallback(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fallback")

    @fallback.setter
    def fallback(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fallback", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SlackAlertNotifierFieldArgs']]]]:
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SlackAlertNotifierFieldArgs']]]]):
        pulumi.set(self, "fields", value)

    @property
    @pulumi.getter
    def footer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "footer")

    @footer.setter
    def footer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "footer", value)

    @property
    @pulumi.getter(name="iconEmoji")
    def icon_emoji(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon_emoji")

    @icon_emoji.setter
    def icon_emoji(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon_emoji", value)

    @property
    @pulumi.getter(name="iconUrl")
    def icon_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon_url")

    @icon_url.setter
    def icon_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon_url", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter(name="linkNames")
    def link_names(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "link_names")

    @link_names.setter
    def link_names(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "link_names", value)

    @property
    @pulumi.getter(name="mrkdwnIns")
    def mrkdwn_ins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "mrkdwn_ins")

    @mrkdwn_ins.setter
    def mrkdwn_ins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "mrkdwn_ins", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def pretext(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pretext")

    @pretext.setter
    def pretext(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pretext", value)

    @property
    @pulumi.getter(name="proxyUrl")
    def proxy_url(self) -> Optional[pulumi.Input[str]]:
        warnings.warn("""custom proxy URLs are not supported""", DeprecationWarning)
        pulumi.log.warn("""proxy_url is deprecated: custom proxy URLs are not supported""")

        return pulumi.get(self, "proxy_url")

    @proxy_url.setter
    def proxy_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_url", value)

    @property
    @pulumi.getter(name="sendResolved")
    def send_resolved(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "send_resolved")

    @send_resolved.setter
    def send_resolved(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "send_resolved", value)

    @property
    @pulumi.getter(name="shortFields")
    def short_fields(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "short_fields")

    @short_fields.setter
    def short_fields(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "short_fields", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter(name="thumbUrl")
    def thumb_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thumb_url")

    @thumb_url.setter
    def thumb_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thumb_url", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleLink")
    def title_link(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title_link")

    @title_link.setter
    def title_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_link", value)

    @property
    @pulumi.getter(name="tlsInsecureSkipVerify")
    def tls_insecure_skip_verify(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "tls_insecure_skip_verify")

    @tls_insecure_skip_verify.setter
    def tls_insecure_skip_verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tls_insecure_skip_verify", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


class SlackAlertNotifier(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SlackAlertNotifierActionArgs']]]]] = None,
                 api_url: Optional[pulumi.Input[str]] = None,
                 basic_auth_password: Optional[pulumi.Input[str]] = None,
                 basic_auth_username: Optional[pulumi.Input[str]] = None,
                 bearer_token: Optional[pulumi.Input[str]] = None,
                 callback_id: Optional[pulumi.Input[str]] = None,
                 channel: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[str]] = None,
                 fallback: Optional[pulumi.Input[str]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SlackAlertNotifierFieldArgs']]]]] = None,
                 footer: Optional[pulumi.Input[str]] = None,
                 icon_emoji: Optional[pulumi.Input[str]] = None,
                 icon_url: Optional[pulumi.Input[str]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 link_names: Optional[pulumi.Input[bool]] = None,
                 mrkdwn_ins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pretext: Optional[pulumi.Input[str]] = None,
                 proxy_url: Optional[pulumi.Input[str]] = None,
                 send_resolved: Optional[pulumi.Input[bool]] = None,
                 short_fields: Optional[pulumi.Input[bool]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 text: Optional[pulumi.Input[str]] = None,
                 thumb_url: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_link: Optional[pulumi.Input[str]] = None,
                 tls_insecure_skip_verify: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SlackAlertNotifier resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SlackAlertNotifierArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SlackAlertNotifier resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SlackAlertNotifierArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SlackAlertNotifierArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SlackAlertNotifierActionArgs']]]]] = None,
                 api_url: Optional[pulumi.Input[str]] = None,
                 basic_auth_password: Optional[pulumi.Input[str]] = None,
                 basic_auth_username: Optional[pulumi.Input[str]] = None,
                 bearer_token: Optional[pulumi.Input[str]] = None,
                 callback_id: Optional[pulumi.Input[str]] = None,
                 channel: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[str]] = None,
                 fallback: Optional[pulumi.Input[str]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SlackAlertNotifierFieldArgs']]]]] = None,
                 footer: Optional[pulumi.Input[str]] = None,
                 icon_emoji: Optional[pulumi.Input[str]] = None,
                 icon_url: Optional[pulumi.Input[str]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 link_names: Optional[pulumi.Input[bool]] = None,
                 mrkdwn_ins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pretext: Optional[pulumi.Input[str]] = None,
                 proxy_url: Optional[pulumi.Input[str]] = None,
                 send_resolved: Optional[pulumi.Input[bool]] = None,
                 short_fields: Optional[pulumi.Input[bool]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 text: Optional[pulumi.Input[str]] = None,
                 thumb_url: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_link: Optional[pulumi.Input[str]] = None,
                 tls_insecure_skip_verify: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SlackAlertNotifierArgs.__new__(SlackAlertNotifierArgs)

            __props__.__dict__["actions"] = actions
            if api_url is None and not opts.urn:
                raise TypeError("Missing required property 'api_url'")
            __props__.__dict__["api_url"] = None if api_url is None else pulumi.Output.secret(api_url)
            __props__.__dict__["basic_auth_password"] = None if basic_auth_password is None else pulumi.Output.secret(basic_auth_password)
            __props__.__dict__["basic_auth_username"] = basic_auth_username
            __props__.__dict__["bearer_token"] = bearer_token
            __props__.__dict__["callback_id"] = callback_id
            if channel is None and not opts.urn:
                raise TypeError("Missing required property 'channel'")
            __props__.__dict__["channel"] = channel
            __props__.__dict__["color"] = color
            __props__.__dict__["fallback"] = fallback
            __props__.__dict__["fields"] = fields
            __props__.__dict__["footer"] = footer
            __props__.__dict__["icon_emoji"] = icon_emoji
            __props__.__dict__["icon_url"] = icon_url
            __props__.__dict__["image_url"] = image_url
            __props__.__dict__["link_names"] = link_names
            __props__.__dict__["mrkdwn_ins"] = mrkdwn_ins
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            __props__.__dict__["pretext"] = pretext
            __props__.__dict__["proxy_url"] = proxy_url
            __props__.__dict__["send_resolved"] = send_resolved
            __props__.__dict__["short_fields"] = short_fields
            __props__.__dict__["slug"] = slug
            __props__.__dict__["text"] = text
            __props__.__dict__["thumb_url"] = thumb_url
            __props__.__dict__["title"] = title
            __props__.__dict__["title_link"] = title_link
            __props__.__dict__["tls_insecure_skip_verify"] = tls_insecure_skip_verify
            __props__.__dict__["username"] = username
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["apiUrl", "basicAuthPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(SlackAlertNotifier, __self__).__init__(
            'chronosphere:index/slackAlertNotifier:SlackAlertNotifier',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            actions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SlackAlertNotifierActionArgs']]]]] = None,
            api_url: Optional[pulumi.Input[str]] = None,
            basic_auth_password: Optional[pulumi.Input[str]] = None,
            basic_auth_username: Optional[pulumi.Input[str]] = None,
            bearer_token: Optional[pulumi.Input[str]] = None,
            callback_id: Optional[pulumi.Input[str]] = None,
            channel: Optional[pulumi.Input[str]] = None,
            color: Optional[pulumi.Input[str]] = None,
            fallback: Optional[pulumi.Input[str]] = None,
            fields: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SlackAlertNotifierFieldArgs']]]]] = None,
            footer: Optional[pulumi.Input[str]] = None,
            icon_emoji: Optional[pulumi.Input[str]] = None,
            icon_url: Optional[pulumi.Input[str]] = None,
            image_url: Optional[pulumi.Input[str]] = None,
            link_names: Optional[pulumi.Input[bool]] = None,
            mrkdwn_ins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            pretext: Optional[pulumi.Input[str]] = None,
            proxy_url: Optional[pulumi.Input[str]] = None,
            send_resolved: Optional[pulumi.Input[bool]] = None,
            short_fields: Optional[pulumi.Input[bool]] = None,
            slug: Optional[pulumi.Input[str]] = None,
            text: Optional[pulumi.Input[str]] = None,
            thumb_url: Optional[pulumi.Input[str]] = None,
            title: Optional[pulumi.Input[str]] = None,
            title_link: Optional[pulumi.Input[str]] = None,
            tls_insecure_skip_verify: Optional[pulumi.Input[bool]] = None,
            username: Optional[pulumi.Input[str]] = None) -> 'SlackAlertNotifier':
        """
        Get an existing SlackAlertNotifier resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SlackAlertNotifierState.__new__(_SlackAlertNotifierState)

        __props__.__dict__["actions"] = actions
        __props__.__dict__["api_url"] = api_url
        __props__.__dict__["basic_auth_password"] = basic_auth_password
        __props__.__dict__["basic_auth_username"] = basic_auth_username
        __props__.__dict__["bearer_token"] = bearer_token
        __props__.__dict__["callback_id"] = callback_id
        __props__.__dict__["channel"] = channel
        __props__.__dict__["color"] = color
        __props__.__dict__["fallback"] = fallback
        __props__.__dict__["fields"] = fields
        __props__.__dict__["footer"] = footer
        __props__.__dict__["icon_emoji"] = icon_emoji
        __props__.__dict__["icon_url"] = icon_url
        __props__.__dict__["image_url"] = image_url
        __props__.__dict__["link_names"] = link_names
        __props__.__dict__["mrkdwn_ins"] = mrkdwn_ins
        __props__.__dict__["name"] = name
        __props__.__dict__["pretext"] = pretext
        __props__.__dict__["proxy_url"] = proxy_url
        __props__.__dict__["send_resolved"] = send_resolved
        __props__.__dict__["short_fields"] = short_fields
        __props__.__dict__["slug"] = slug
        __props__.__dict__["text"] = text
        __props__.__dict__["thumb_url"] = thumb_url
        __props__.__dict__["title"] = title
        __props__.__dict__["title_link"] = title_link
        __props__.__dict__["tls_insecure_skip_verify"] = tls_insecure_skip_verify
        __props__.__dict__["username"] = username
        return SlackAlertNotifier(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Output[Optional[Sequence['outputs.SlackAlertNotifierAction']]]:
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "api_url")

    @property
    @pulumi.getter(name="basicAuthPassword")
    def basic_auth_password(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "basic_auth_password")

    @property
    @pulumi.getter(name="basicAuthUsername")
    def basic_auth_username(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "basic_auth_username")

    @property
    @pulumi.getter(name="bearerToken")
    def bearer_token(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "bearer_token")

    @property
    @pulumi.getter(name="callbackId")
    def callback_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "callback_id")

    @property
    @pulumi.getter
    def channel(self) -> pulumi.Output[str]:
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def color(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def fallback(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "fallback")

    @property
    @pulumi.getter
    def fields(self) -> pulumi.Output[Optional[Sequence['outputs.SlackAlertNotifierField']]]:
        return pulumi.get(self, "fields")

    @property
    @pulumi.getter
    def footer(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "footer")

    @property
    @pulumi.getter(name="iconEmoji")
    def icon_emoji(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "icon_emoji")

    @property
    @pulumi.getter(name="iconUrl")
    def icon_url(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "icon_url")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter(name="linkNames")
    def link_names(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "link_names")

    @property
    @pulumi.getter(name="mrkdwnIns")
    def mrkdwn_ins(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "mrkdwn_ins")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def pretext(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "pretext")

    @property
    @pulumi.getter(name="proxyUrl")
    def proxy_url(self) -> pulumi.Output[Optional[str]]:
        warnings.warn("""custom proxy URLs are not supported""", DeprecationWarning)
        pulumi.log.warn("""proxy_url is deprecated: custom proxy URLs are not supported""")

        return pulumi.get(self, "proxy_url")

    @property
    @pulumi.getter(name="sendResolved")
    def send_resolved(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "send_resolved")

    @property
    @pulumi.getter(name="shortFields")
    def short_fields(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "short_fields")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter
    def text(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter(name="thumbUrl")
    def thumb_url(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "thumb_url")

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="titleLink")
    def title_link(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "title_link")

    @property
    @pulumi.getter(name="tlsInsecureSkipVerify")
    def tls_insecure_skip_verify(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "tls_insecure_skip_verify")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "username")

