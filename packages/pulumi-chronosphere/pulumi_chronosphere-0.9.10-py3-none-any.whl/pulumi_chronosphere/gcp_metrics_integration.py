# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['GcpMetricsIntegrationArgs', 'GcpMetricsIntegration']

@pulumi.input_type
class GcpMetricsIntegrationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 metric_groups: Optional[pulumi.Input[Sequence[pulumi.Input['GcpMetricsIntegrationMetricGroupArgs']]]] = None,
                 service_account: Optional[pulumi.Input['GcpMetricsIntegrationServiceAccountArgs']] = None,
                 slug: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a GcpMetricsIntegration resource.
        """
        pulumi.set(__self__, "name", name)
        if metric_groups is not None:
            pulumi.set(__self__, "metric_groups", metric_groups)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="metricGroups")
    def metric_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GcpMetricsIntegrationMetricGroupArgs']]]]:
        return pulumi.get(self, "metric_groups")

    @metric_groups.setter
    def metric_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GcpMetricsIntegrationMetricGroupArgs']]]]):
        pulumi.set(self, "metric_groups", value)

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input['GcpMetricsIntegrationServiceAccountArgs']]:
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input['GcpMetricsIntegrationServiceAccountArgs']]):
        pulumi.set(self, "service_account", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)


@pulumi.input_type
class _GcpMetricsIntegrationState:
    def __init__(__self__, *,
                 metric_groups: Optional[pulumi.Input[Sequence[pulumi.Input['GcpMetricsIntegrationMetricGroupArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 service_account: Optional[pulumi.Input['GcpMetricsIntegrationServiceAccountArgs']] = None,
                 slug: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering GcpMetricsIntegration resources.
        """
        if metric_groups is not None:
            pulumi.set(__self__, "metric_groups", metric_groups)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="metricGroups")
    def metric_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GcpMetricsIntegrationMetricGroupArgs']]]]:
        return pulumi.get(self, "metric_groups")

    @metric_groups.setter
    def metric_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GcpMetricsIntegrationMetricGroupArgs']]]]):
        pulumi.set(self, "metric_groups", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input['GcpMetricsIntegrationServiceAccountArgs']]:
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input['GcpMetricsIntegrationServiceAccountArgs']]):
        pulumi.set(self, "service_account", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)


class GcpMetricsIntegration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 metric_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GcpMetricsIntegrationMetricGroupArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 service_account: Optional[pulumi.Input[pulumi.InputType['GcpMetricsIntegrationServiceAccountArgs']]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a GcpMetricsIntegration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GcpMetricsIntegrationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a GcpMetricsIntegration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param GcpMetricsIntegrationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GcpMetricsIntegrationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 metric_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GcpMetricsIntegrationMetricGroupArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 service_account: Optional[pulumi.Input[pulumi.InputType['GcpMetricsIntegrationServiceAccountArgs']]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GcpMetricsIntegrationArgs.__new__(GcpMetricsIntegrationArgs)

            __props__.__dict__["metric_groups"] = metric_groups
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            __props__.__dict__["service_account"] = service_account
            __props__.__dict__["slug"] = slug
        super(GcpMetricsIntegration, __self__).__init__(
            'chronosphere:index/gcpMetricsIntegration:GcpMetricsIntegration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            metric_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GcpMetricsIntegrationMetricGroupArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            service_account: Optional[pulumi.Input[pulumi.InputType['GcpMetricsIntegrationServiceAccountArgs']]] = None,
            slug: Optional[pulumi.Input[str]] = None) -> 'GcpMetricsIntegration':
        """
        Get an existing GcpMetricsIntegration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GcpMetricsIntegrationState.__new__(_GcpMetricsIntegrationState)

        __props__.__dict__["metric_groups"] = metric_groups
        __props__.__dict__["name"] = name
        __props__.__dict__["service_account"] = service_account
        __props__.__dict__["slug"] = slug
        return GcpMetricsIntegration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="metricGroups")
    def metric_groups(self) -> pulumi.Output[Optional[Sequence['outputs.GcpMetricsIntegrationMetricGroup']]]:
        return pulumi.get(self, "metric_groups")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> pulumi.Output[Optional['outputs.GcpMetricsIntegrationServiceAccount']]:
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "slug")

