# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ResourcePoolsConfigArgs', 'ResourcePoolsConfig']

@pulumi.input_type
class ResourcePoolsConfigArgs:
    def __init__(__self__, *,
                 default_pool: Optional[pulumi.Input['ResourcePoolsConfigDefaultPoolArgs']] = None,
                 pool: Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolsConfigPoolArgs']]]] = None,
                 pools: Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolsConfigPoolArgs']]]] = None):
        """
        The set of arguments for constructing a ResourcePoolsConfig resource.
        """
        if default_pool is not None:
            pulumi.set(__self__, "default_pool", default_pool)
        if pool is not None:
            pulumi.set(__self__, "pool", pool)
        if pools is not None:
            warnings.warn("""Use pool instead of pools""", DeprecationWarning)
            pulumi.log.warn("""pools is deprecated: Use pool instead of pools""")
        if pools is not None:
            pulumi.set(__self__, "pools", pools)

    @property
    @pulumi.getter(name="defaultPool")
    def default_pool(self) -> Optional[pulumi.Input['ResourcePoolsConfigDefaultPoolArgs']]:
        return pulumi.get(self, "default_pool")

    @default_pool.setter
    def default_pool(self, value: Optional[pulumi.Input['ResourcePoolsConfigDefaultPoolArgs']]):
        pulumi.set(self, "default_pool", value)

    @property
    @pulumi.getter
    def pool(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolsConfigPoolArgs']]]]:
        return pulumi.get(self, "pool")

    @pool.setter
    def pool(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolsConfigPoolArgs']]]]):
        pulumi.set(self, "pool", value)

    @property
    @pulumi.getter
    def pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolsConfigPoolArgs']]]]:
        warnings.warn("""Use pool instead of pools""", DeprecationWarning)
        pulumi.log.warn("""pools is deprecated: Use pool instead of pools""")

        return pulumi.get(self, "pools")

    @pools.setter
    def pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolsConfigPoolArgs']]]]):
        pulumi.set(self, "pools", value)


@pulumi.input_type
class _ResourcePoolsConfigState:
    def __init__(__self__, *,
                 default_pool: Optional[pulumi.Input['ResourcePoolsConfigDefaultPoolArgs']] = None,
                 pool: Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolsConfigPoolArgs']]]] = None,
                 pools: Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolsConfigPoolArgs']]]] = None):
        """
        Input properties used for looking up and filtering ResourcePoolsConfig resources.
        """
        if default_pool is not None:
            pulumi.set(__self__, "default_pool", default_pool)
        if pool is not None:
            pulumi.set(__self__, "pool", pool)
        if pools is not None:
            warnings.warn("""Use pool instead of pools""", DeprecationWarning)
            pulumi.log.warn("""pools is deprecated: Use pool instead of pools""")
        if pools is not None:
            pulumi.set(__self__, "pools", pools)

    @property
    @pulumi.getter(name="defaultPool")
    def default_pool(self) -> Optional[pulumi.Input['ResourcePoolsConfigDefaultPoolArgs']]:
        return pulumi.get(self, "default_pool")

    @default_pool.setter
    def default_pool(self, value: Optional[pulumi.Input['ResourcePoolsConfigDefaultPoolArgs']]):
        pulumi.set(self, "default_pool", value)

    @property
    @pulumi.getter
    def pool(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolsConfigPoolArgs']]]]:
        return pulumi.get(self, "pool")

    @pool.setter
    def pool(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolsConfigPoolArgs']]]]):
        pulumi.set(self, "pool", value)

    @property
    @pulumi.getter
    def pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolsConfigPoolArgs']]]]:
        warnings.warn("""Use pool instead of pools""", DeprecationWarning)
        pulumi.log.warn("""pools is deprecated: Use pool instead of pools""")

        return pulumi.get(self, "pools")

    @pools.setter
    def pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolsConfigPoolArgs']]]]):
        pulumi.set(self, "pools", value)


class ResourcePoolsConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default_pool: Optional[pulumi.Input[pulumi.InputType['ResourcePoolsConfigDefaultPoolArgs']]] = None,
                 pool: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ResourcePoolsConfigPoolArgs']]]]] = None,
                 pools: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ResourcePoolsConfigPoolArgs']]]]] = None,
                 __props__=None):
        """
        Create a ResourcePoolsConfig resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ResourcePoolsConfigArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ResourcePoolsConfig resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ResourcePoolsConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourcePoolsConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default_pool: Optional[pulumi.Input[pulumi.InputType['ResourcePoolsConfigDefaultPoolArgs']]] = None,
                 pool: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ResourcePoolsConfigPoolArgs']]]]] = None,
                 pools: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ResourcePoolsConfigPoolArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourcePoolsConfigArgs.__new__(ResourcePoolsConfigArgs)

            __props__.__dict__["default_pool"] = default_pool
            __props__.__dict__["pool"] = pool
            __props__.__dict__["pools"] = pools
        super(ResourcePoolsConfig, __self__).__init__(
            'chronosphere:index/resourcePoolsConfig:ResourcePoolsConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            default_pool: Optional[pulumi.Input[pulumi.InputType['ResourcePoolsConfigDefaultPoolArgs']]] = None,
            pool: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ResourcePoolsConfigPoolArgs']]]]] = None,
            pools: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ResourcePoolsConfigPoolArgs']]]]] = None) -> 'ResourcePoolsConfig':
        """
        Get an existing ResourcePoolsConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ResourcePoolsConfigState.__new__(_ResourcePoolsConfigState)

        __props__.__dict__["default_pool"] = default_pool
        __props__.__dict__["pool"] = pool
        __props__.__dict__["pools"] = pools
        return ResourcePoolsConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="defaultPool")
    def default_pool(self) -> pulumi.Output[Optional['outputs.ResourcePoolsConfigDefaultPool']]:
        return pulumi.get(self, "default_pool")

    @property
    @pulumi.getter
    def pool(self) -> pulumi.Output[Optional[Sequence['outputs.ResourcePoolsConfigPool']]]:
        return pulumi.get(self, "pool")

    @property
    @pulumi.getter
    def pools(self) -> pulumi.Output[Optional[Sequence['outputs.ResourcePoolsConfigPool']]]:
        warnings.warn("""Use pool instead of pools""", DeprecationWarning)
        pulumi.log.warn("""pools is deprecated: Use pool instead of pools""")

        return pulumi.get(self, "pools")

