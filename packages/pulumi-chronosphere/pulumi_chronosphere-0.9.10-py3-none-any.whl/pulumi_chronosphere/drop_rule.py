# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DropRuleArgs', 'DropRule']

@pulumi.input_type
class DropRuleArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 queries: pulumi.Input[Sequence[pulumi.Input[str]]],
                 activated_drop_duration: Optional[pulumi.Input[str]] = None,
                 active: Optional[pulumi.Input[bool]] = None,
                 conditional_drop: Optional[pulumi.Input[bool]] = None,
                 drop_nan_value: Optional[pulumi.Input[bool]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 rate_limit_threshold: Optional[pulumi.Input[float]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 value_based_drop: Optional[pulumi.Input['DropRuleValueBasedDropArgs']] = None):
        """
        The set of arguments for constructing a DropRule resource.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "queries", queries)
        if activated_drop_duration is not None:
            pulumi.set(__self__, "activated_drop_duration", activated_drop_duration)
        if active is not None:
            warnings.warn("""use `mode` instead""", DeprecationWarning)
            pulumi.log.warn("""active is deprecated: use `mode` instead""")
        if active is not None:
            pulumi.set(__self__, "active", active)
        if conditional_drop is not None:
            pulumi.set(__self__, "conditional_drop", conditional_drop)
        if drop_nan_value is not None:
            pulumi.set(__self__, "drop_nan_value", drop_nan_value)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if rate_limit_threshold is not None:
            pulumi.set(__self__, "rate_limit_threshold", rate_limit_threshold)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if value_based_drop is not None:
            pulumi.set(__self__, "value_based_drop", value_based_drop)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def queries(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter(name="activatedDropDuration")
    def activated_drop_duration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "activated_drop_duration")

    @activated_drop_duration.setter
    def activated_drop_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "activated_drop_duration", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[bool]]:
        warnings.warn("""use `mode` instead""", DeprecationWarning)
        pulumi.log.warn("""active is deprecated: use `mode` instead""")

        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="conditionalDrop")
    def conditional_drop(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "conditional_drop")

    @conditional_drop.setter
    def conditional_drop(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "conditional_drop", value)

    @property
    @pulumi.getter(name="dropNanValue")
    def drop_nan_value(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "drop_nan_value")

    @drop_nan_value.setter
    def drop_nan_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drop_nan_value", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="rateLimitThreshold")
    def rate_limit_threshold(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "rate_limit_threshold")

    @rate_limit_threshold.setter
    def rate_limit_threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "rate_limit_threshold", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="valueBasedDrop")
    def value_based_drop(self) -> Optional[pulumi.Input['DropRuleValueBasedDropArgs']]:
        return pulumi.get(self, "value_based_drop")

    @value_based_drop.setter
    def value_based_drop(self, value: Optional[pulumi.Input['DropRuleValueBasedDropArgs']]):
        pulumi.set(self, "value_based_drop", value)


@pulumi.input_type
class _DropRuleState:
    def __init__(__self__, *,
                 activated_drop_duration: Optional[pulumi.Input[str]] = None,
                 active: Optional[pulumi.Input[bool]] = None,
                 conditional_drop: Optional[pulumi.Input[bool]] = None,
                 drop_nan_value: Optional[pulumi.Input[bool]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rate_limit_threshold: Optional[pulumi.Input[float]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 value_based_drop: Optional[pulumi.Input['DropRuleValueBasedDropArgs']] = None):
        """
        Input properties used for looking up and filtering DropRule resources.
        """
        if activated_drop_duration is not None:
            pulumi.set(__self__, "activated_drop_duration", activated_drop_duration)
        if active is not None:
            warnings.warn("""use `mode` instead""", DeprecationWarning)
            pulumi.log.warn("""active is deprecated: use `mode` instead""")
        if active is not None:
            pulumi.set(__self__, "active", active)
        if conditional_drop is not None:
            pulumi.set(__self__, "conditional_drop", conditional_drop)
        if drop_nan_value is not None:
            pulumi.set(__self__, "drop_nan_value", drop_nan_value)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if rate_limit_threshold is not None:
            pulumi.set(__self__, "rate_limit_threshold", rate_limit_threshold)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if value_based_drop is not None:
            pulumi.set(__self__, "value_based_drop", value_based_drop)

    @property
    @pulumi.getter(name="activatedDropDuration")
    def activated_drop_duration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "activated_drop_duration")

    @activated_drop_duration.setter
    def activated_drop_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "activated_drop_duration", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[bool]]:
        warnings.warn("""use `mode` instead""", DeprecationWarning)
        pulumi.log.warn("""active is deprecated: use `mode` instead""")

        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="conditionalDrop")
    def conditional_drop(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "conditional_drop")

    @conditional_drop.setter
    def conditional_drop(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "conditional_drop", value)

    @property
    @pulumi.getter(name="dropNanValue")
    def drop_nan_value(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "drop_nan_value")

    @drop_nan_value.setter
    def drop_nan_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drop_nan_value", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter(name="rateLimitThreshold")
    def rate_limit_threshold(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "rate_limit_threshold")

    @rate_limit_threshold.setter
    def rate_limit_threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "rate_limit_threshold", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="valueBasedDrop")
    def value_based_drop(self) -> Optional[pulumi.Input['DropRuleValueBasedDropArgs']]:
        return pulumi.get(self, "value_based_drop")

    @value_based_drop.setter
    def value_based_drop(self, value: Optional[pulumi.Input['DropRuleValueBasedDropArgs']]):
        pulumi.set(self, "value_based_drop", value)


class DropRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 activated_drop_duration: Optional[pulumi.Input[str]] = None,
                 active: Optional[pulumi.Input[bool]] = None,
                 conditional_drop: Optional[pulumi.Input[bool]] = None,
                 drop_nan_value: Optional[pulumi.Input[bool]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rate_limit_threshold: Optional[pulumi.Input[float]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 value_based_drop: Optional[pulumi.Input[pulumi.InputType['DropRuleValueBasedDropArgs']]] = None,
                 __props__=None):
        """
        Create a DropRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DropRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DropRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DropRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DropRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 activated_drop_duration: Optional[pulumi.Input[str]] = None,
                 active: Optional[pulumi.Input[bool]] = None,
                 conditional_drop: Optional[pulumi.Input[bool]] = None,
                 drop_nan_value: Optional[pulumi.Input[bool]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rate_limit_threshold: Optional[pulumi.Input[float]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 value_based_drop: Optional[pulumi.Input[pulumi.InputType['DropRuleValueBasedDropArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DropRuleArgs.__new__(DropRuleArgs)

            __props__.__dict__["activated_drop_duration"] = activated_drop_duration
            __props__.__dict__["active"] = active
            __props__.__dict__["conditional_drop"] = conditional_drop
            __props__.__dict__["drop_nan_value"] = drop_nan_value
            __props__.__dict__["mode"] = mode
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            if queries is None and not opts.urn:
                raise TypeError("Missing required property 'queries'")
            __props__.__dict__["queries"] = queries
            __props__.__dict__["rate_limit_threshold"] = rate_limit_threshold
            __props__.__dict__["slug"] = slug
            __props__.__dict__["value_based_drop"] = value_based_drop
        super(DropRule, __self__).__init__(
            'chronosphere:index/dropRule:DropRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            activated_drop_duration: Optional[pulumi.Input[str]] = None,
            active: Optional[pulumi.Input[bool]] = None,
            conditional_drop: Optional[pulumi.Input[bool]] = None,
            drop_nan_value: Optional[pulumi.Input[bool]] = None,
            mode: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            queries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            rate_limit_threshold: Optional[pulumi.Input[float]] = None,
            slug: Optional[pulumi.Input[str]] = None,
            value_based_drop: Optional[pulumi.Input[pulumi.InputType['DropRuleValueBasedDropArgs']]] = None) -> 'DropRule':
        """
        Get an existing DropRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DropRuleState.__new__(_DropRuleState)

        __props__.__dict__["activated_drop_duration"] = activated_drop_duration
        __props__.__dict__["active"] = active
        __props__.__dict__["conditional_drop"] = conditional_drop
        __props__.__dict__["drop_nan_value"] = drop_nan_value
        __props__.__dict__["mode"] = mode
        __props__.__dict__["name"] = name
        __props__.__dict__["queries"] = queries
        __props__.__dict__["rate_limit_threshold"] = rate_limit_threshold
        __props__.__dict__["slug"] = slug
        __props__.__dict__["value_based_drop"] = value_based_drop
        return DropRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="activatedDropDuration")
    def activated_drop_duration(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "activated_drop_duration")

    @property
    @pulumi.getter
    def active(self) -> pulumi.Output[Optional[bool]]:
        warnings.warn("""use `mode` instead""", DeprecationWarning)
        pulumi.log.warn("""active is deprecated: use `mode` instead""")

        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="conditionalDrop")
    def conditional_drop(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "conditional_drop")

    @property
    @pulumi.getter(name="dropNanValue")
    def drop_nan_value(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "drop_nan_value")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def queries(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter(name="rateLimitThreshold")
    def rate_limit_threshold(self) -> pulumi.Output[Optional[float]]:
        return pulumi.get(self, "rate_limit_threshold")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="valueBasedDrop")
    def value_based_drop(self) -> pulumi.Output[Optional['outputs.DropRuleValueBasedDrop']]:
        return pulumi.get(self, "value_based_drop")

