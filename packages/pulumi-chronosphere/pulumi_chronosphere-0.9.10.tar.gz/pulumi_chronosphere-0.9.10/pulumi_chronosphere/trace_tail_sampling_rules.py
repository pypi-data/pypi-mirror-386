# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TraceTailSamplingRulesArgs', 'TraceTailSamplingRules']

@pulumi.input_type
class TraceTailSamplingRulesArgs:
    def __init__(__self__, *,
                 default_sample_rate: Optional[pulumi.Input['TraceTailSamplingRulesDefaultSampleRateArgs']] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['TraceTailSamplingRulesRuleArgs']]]] = None):
        """
        The set of arguments for constructing a TraceTailSamplingRules resource.
        """
        if default_sample_rate is not None:
            pulumi.set(__self__, "default_sample_rate", default_sample_rate)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="defaultSampleRate")
    def default_sample_rate(self) -> Optional[pulumi.Input['TraceTailSamplingRulesDefaultSampleRateArgs']]:
        return pulumi.get(self, "default_sample_rate")

    @default_sample_rate.setter
    def default_sample_rate(self, value: Optional[pulumi.Input['TraceTailSamplingRulesDefaultSampleRateArgs']]):
        pulumi.set(self, "default_sample_rate", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TraceTailSamplingRulesRuleArgs']]]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TraceTailSamplingRulesRuleArgs']]]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class _TraceTailSamplingRulesState:
    def __init__(__self__, *,
                 default_sample_rate: Optional[pulumi.Input['TraceTailSamplingRulesDefaultSampleRateArgs']] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['TraceTailSamplingRulesRuleArgs']]]] = None):
        """
        Input properties used for looking up and filtering TraceTailSamplingRules resources.
        """
        if default_sample_rate is not None:
            pulumi.set(__self__, "default_sample_rate", default_sample_rate)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="defaultSampleRate")
    def default_sample_rate(self) -> Optional[pulumi.Input['TraceTailSamplingRulesDefaultSampleRateArgs']]:
        return pulumi.get(self, "default_sample_rate")

    @default_sample_rate.setter
    def default_sample_rate(self, value: Optional[pulumi.Input['TraceTailSamplingRulesDefaultSampleRateArgs']]):
        pulumi.set(self, "default_sample_rate", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TraceTailSamplingRulesRuleArgs']]]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TraceTailSamplingRulesRuleArgs']]]]):
        pulumi.set(self, "rules", value)


class TraceTailSamplingRules(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default_sample_rate: Optional[pulumi.Input[pulumi.InputType['TraceTailSamplingRulesDefaultSampleRateArgs']]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TraceTailSamplingRulesRuleArgs']]]]] = None,
                 __props__=None):
        """
        Create a TraceTailSamplingRules resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[TraceTailSamplingRulesArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a TraceTailSamplingRules resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param TraceTailSamplingRulesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TraceTailSamplingRulesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default_sample_rate: Optional[pulumi.Input[pulumi.InputType['TraceTailSamplingRulesDefaultSampleRateArgs']]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TraceTailSamplingRulesRuleArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TraceTailSamplingRulesArgs.__new__(TraceTailSamplingRulesArgs)

            __props__.__dict__["default_sample_rate"] = default_sample_rate
            __props__.__dict__["rules"] = rules
        super(TraceTailSamplingRules, __self__).__init__(
            'chronosphere:index/traceTailSamplingRules:TraceTailSamplingRules',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            default_sample_rate: Optional[pulumi.Input[pulumi.InputType['TraceTailSamplingRulesDefaultSampleRateArgs']]] = None,
            rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TraceTailSamplingRulesRuleArgs']]]]] = None) -> 'TraceTailSamplingRules':
        """
        Get an existing TraceTailSamplingRules resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TraceTailSamplingRulesState.__new__(_TraceTailSamplingRulesState)

        __props__.__dict__["default_sample_rate"] = default_sample_rate
        __props__.__dict__["rules"] = rules
        return TraceTailSamplingRules(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="defaultSampleRate")
    def default_sample_rate(self) -> pulumi.Output[Optional['outputs.TraceTailSamplingRulesDefaultSampleRate']]:
        return pulumi.get(self, "default_sample_rate")

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Output[Optional[Sequence['outputs.TraceTailSamplingRulesRule']]]:
        return pulumi.get(self, "rules")

