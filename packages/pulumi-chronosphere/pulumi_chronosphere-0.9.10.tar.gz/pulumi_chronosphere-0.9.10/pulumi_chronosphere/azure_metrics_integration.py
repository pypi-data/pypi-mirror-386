# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AzureMetricsIntegrationArgs', 'AzureMetricsIntegration']

@pulumi.input_type
class AzureMetricsIntegrationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 count_metrics_enabled: Optional[pulumi.Input[bool]] = None,
                 principal: Optional[pulumi.Input['AzureMetricsIntegrationPrincipalArgs']] = None,
                 propagate_tags: Optional[pulumi.Input[bool]] = None,
                 scrape_config: Optional[pulumi.Input['AzureMetricsIntegrationScrapeConfigArgs']] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 usage_metrics_enabled: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a AzureMetricsIntegration resource.
        """
        pulumi.set(__self__, "name", name)
        if count_metrics_enabled is not None:
            pulumi.set(__self__, "count_metrics_enabled", count_metrics_enabled)
        if principal is not None:
            pulumi.set(__self__, "principal", principal)
        if propagate_tags is not None:
            pulumi.set(__self__, "propagate_tags", propagate_tags)
        if scrape_config is not None:
            pulumi.set(__self__, "scrape_config", scrape_config)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if usage_metrics_enabled is not None:
            pulumi.set(__self__, "usage_metrics_enabled", usage_metrics_enabled)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="countMetricsEnabled")
    def count_metrics_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "count_metrics_enabled")

    @count_metrics_enabled.setter
    def count_metrics_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "count_metrics_enabled", value)

    @property
    @pulumi.getter
    def principal(self) -> Optional[pulumi.Input['AzureMetricsIntegrationPrincipalArgs']]:
        return pulumi.get(self, "principal")

    @principal.setter
    def principal(self, value: Optional[pulumi.Input['AzureMetricsIntegrationPrincipalArgs']]):
        pulumi.set(self, "principal", value)

    @property
    @pulumi.getter(name="propagateTags")
    def propagate_tags(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "propagate_tags")

    @propagate_tags.setter
    def propagate_tags(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "propagate_tags", value)

    @property
    @pulumi.getter(name="scrapeConfig")
    def scrape_config(self) -> Optional[pulumi.Input['AzureMetricsIntegrationScrapeConfigArgs']]:
        return pulumi.get(self, "scrape_config")

    @scrape_config.setter
    def scrape_config(self, value: Optional[pulumi.Input['AzureMetricsIntegrationScrapeConfigArgs']]):
        pulumi.set(self, "scrape_config", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="usageMetricsEnabled")
    def usage_metrics_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "usage_metrics_enabled")

    @usage_metrics_enabled.setter
    def usage_metrics_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "usage_metrics_enabled", value)


@pulumi.input_type
class _AzureMetricsIntegrationState:
    def __init__(__self__, *,
                 count_metrics_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 principal: Optional[pulumi.Input['AzureMetricsIntegrationPrincipalArgs']] = None,
                 propagate_tags: Optional[pulumi.Input[bool]] = None,
                 scrape_config: Optional[pulumi.Input['AzureMetricsIntegrationScrapeConfigArgs']] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 usage_metrics_enabled: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering AzureMetricsIntegration resources.
        """
        if count_metrics_enabled is not None:
            pulumi.set(__self__, "count_metrics_enabled", count_metrics_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if principal is not None:
            pulumi.set(__self__, "principal", principal)
        if propagate_tags is not None:
            pulumi.set(__self__, "propagate_tags", propagate_tags)
        if scrape_config is not None:
            pulumi.set(__self__, "scrape_config", scrape_config)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if usage_metrics_enabled is not None:
            pulumi.set(__self__, "usage_metrics_enabled", usage_metrics_enabled)

    @property
    @pulumi.getter(name="countMetricsEnabled")
    def count_metrics_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "count_metrics_enabled")

    @count_metrics_enabled.setter
    def count_metrics_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "count_metrics_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def principal(self) -> Optional[pulumi.Input['AzureMetricsIntegrationPrincipalArgs']]:
        return pulumi.get(self, "principal")

    @principal.setter
    def principal(self, value: Optional[pulumi.Input['AzureMetricsIntegrationPrincipalArgs']]):
        pulumi.set(self, "principal", value)

    @property
    @pulumi.getter(name="propagateTags")
    def propagate_tags(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "propagate_tags")

    @propagate_tags.setter
    def propagate_tags(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "propagate_tags", value)

    @property
    @pulumi.getter(name="scrapeConfig")
    def scrape_config(self) -> Optional[pulumi.Input['AzureMetricsIntegrationScrapeConfigArgs']]:
        return pulumi.get(self, "scrape_config")

    @scrape_config.setter
    def scrape_config(self, value: Optional[pulumi.Input['AzureMetricsIntegrationScrapeConfigArgs']]):
        pulumi.set(self, "scrape_config", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="usageMetricsEnabled")
    def usage_metrics_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "usage_metrics_enabled")

    @usage_metrics_enabled.setter
    def usage_metrics_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "usage_metrics_enabled", value)


class AzureMetricsIntegration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 count_metrics_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 principal: Optional[pulumi.Input[pulumi.InputType['AzureMetricsIntegrationPrincipalArgs']]] = None,
                 propagate_tags: Optional[pulumi.Input[bool]] = None,
                 scrape_config: Optional[pulumi.Input[pulumi.InputType['AzureMetricsIntegrationScrapeConfigArgs']]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 usage_metrics_enabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a AzureMetricsIntegration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AzureMetricsIntegrationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AzureMetricsIntegration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AzureMetricsIntegrationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AzureMetricsIntegrationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 count_metrics_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 principal: Optional[pulumi.Input[pulumi.InputType['AzureMetricsIntegrationPrincipalArgs']]] = None,
                 propagate_tags: Optional[pulumi.Input[bool]] = None,
                 scrape_config: Optional[pulumi.Input[pulumi.InputType['AzureMetricsIntegrationScrapeConfigArgs']]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 usage_metrics_enabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AzureMetricsIntegrationArgs.__new__(AzureMetricsIntegrationArgs)

            __props__.__dict__["count_metrics_enabled"] = count_metrics_enabled
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            __props__.__dict__["principal"] = principal
            __props__.__dict__["propagate_tags"] = propagate_tags
            __props__.__dict__["scrape_config"] = scrape_config
            __props__.__dict__["slug"] = slug
            __props__.__dict__["usage_metrics_enabled"] = usage_metrics_enabled
        super(AzureMetricsIntegration, __self__).__init__(
            'chronosphere:index/azureMetricsIntegration:AzureMetricsIntegration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            count_metrics_enabled: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            principal: Optional[pulumi.Input[pulumi.InputType['AzureMetricsIntegrationPrincipalArgs']]] = None,
            propagate_tags: Optional[pulumi.Input[bool]] = None,
            scrape_config: Optional[pulumi.Input[pulumi.InputType['AzureMetricsIntegrationScrapeConfigArgs']]] = None,
            slug: Optional[pulumi.Input[str]] = None,
            usage_metrics_enabled: Optional[pulumi.Input[bool]] = None) -> 'AzureMetricsIntegration':
        """
        Get an existing AzureMetricsIntegration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AzureMetricsIntegrationState.__new__(_AzureMetricsIntegrationState)

        __props__.__dict__["count_metrics_enabled"] = count_metrics_enabled
        __props__.__dict__["name"] = name
        __props__.__dict__["principal"] = principal
        __props__.__dict__["propagate_tags"] = propagate_tags
        __props__.__dict__["scrape_config"] = scrape_config
        __props__.__dict__["slug"] = slug
        __props__.__dict__["usage_metrics_enabled"] = usage_metrics_enabled
        return AzureMetricsIntegration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="countMetricsEnabled")
    def count_metrics_enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "count_metrics_enabled")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def principal(self) -> pulumi.Output[Optional['outputs.AzureMetricsIntegrationPrincipal']]:
        return pulumi.get(self, "principal")

    @property
    @pulumi.getter(name="propagateTags")
    def propagate_tags(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "propagate_tags")

    @property
    @pulumi.getter(name="scrapeConfig")
    def scrape_config(self) -> pulumi.Output[Optional['outputs.AzureMetricsIntegrationScrapeConfig']]:
        return pulumi.get(self, "scrape_config")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="usageMetricsEnabled")
    def usage_metrics_enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "usage_metrics_enabled")

