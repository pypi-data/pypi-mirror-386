# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MonitorArgs', 'Monitor']

@pulumi.input_type
class MonitorArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 query: pulumi.Input['MonitorQueryArgs'],
                 series_conditions: pulumi.Input['MonitorSeriesConditionsArgs'],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 bucket_id: Optional[pulumi.Input[str]] = None,
                 collection_id: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 notification_policy_id: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input['MonitorScheduleArgs']] = None,
                 signal_grouping: Optional[pulumi.Input['MonitorSignalGroupingArgs']] = None,
                 slug: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Monitor resource.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "series_conditions", series_conditions)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if bucket_id is not None:
            pulumi.set(__self__, "bucket_id", bucket_id)
        if collection_id is not None:
            pulumi.set(__self__, "collection_id", collection_id)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if notification_policy_id is not None:
            pulumi.set(__self__, "notification_policy_id", notification_policy_id)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if signal_grouping is not None:
            pulumi.set(__self__, "signal_grouping", signal_grouping)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input['MonitorQueryArgs']:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input['MonitorQueryArgs']):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="seriesConditions")
    def series_conditions(self) -> pulumi.Input['MonitorSeriesConditionsArgs']:
        return pulumi.get(self, "series_conditions")

    @series_conditions.setter
    def series_conditions(self, value: pulumi.Input['MonitorSeriesConditionsArgs']):
        pulumi.set(self, "series_conditions", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="bucketId")
    def bucket_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket_id")

    @bucket_id.setter
    def bucket_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_id", value)

    @property
    @pulumi.getter(name="collectionId")
    def collection_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "collection_id")

    @collection_id.setter
    def collection_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collection_id", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="notificationPolicyId")
    def notification_policy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notification_policy_id")

    @notification_policy_id.setter
    def notification_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notification_policy_id", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input['MonitorScheduleArgs']]:
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input['MonitorScheduleArgs']]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter(name="signalGrouping")
    def signal_grouping(self) -> Optional[pulumi.Input['MonitorSignalGroupingArgs']]:
        return pulumi.get(self, "signal_grouping")

    @signal_grouping.setter
    def signal_grouping(self, value: Optional[pulumi.Input['MonitorSignalGroupingArgs']]):
        pulumi.set(self, "signal_grouping", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)


@pulumi.input_type
class _MonitorState:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 bucket_id: Optional[pulumi.Input[str]] = None,
                 collection_id: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notification_policy_id: Optional[pulumi.Input[str]] = None,
                 query: Optional[pulumi.Input['MonitorQueryArgs']] = None,
                 schedule: Optional[pulumi.Input['MonitorScheduleArgs']] = None,
                 series_conditions: Optional[pulumi.Input['MonitorSeriesConditionsArgs']] = None,
                 signal_grouping: Optional[pulumi.Input['MonitorSignalGroupingArgs']] = None,
                 slug: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Monitor resources.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if bucket_id is not None:
            pulumi.set(__self__, "bucket_id", bucket_id)
        if collection_id is not None:
            pulumi.set(__self__, "collection_id", collection_id)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notification_policy_id is not None:
            pulumi.set(__self__, "notification_policy_id", notification_policy_id)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if series_conditions is not None:
            pulumi.set(__self__, "series_conditions", series_conditions)
        if signal_grouping is not None:
            pulumi.set(__self__, "signal_grouping", signal_grouping)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="bucketId")
    def bucket_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket_id")

    @bucket_id.setter
    def bucket_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_id", value)

    @property
    @pulumi.getter(name="collectionId")
    def collection_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "collection_id")

    @collection_id.setter
    def collection_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collection_id", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notificationPolicyId")
    def notification_policy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notification_policy_id")

    @notification_policy_id.setter
    def notification_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notification_policy_id", value)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input['MonitorQueryArgs']]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input['MonitorQueryArgs']]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input['MonitorScheduleArgs']]:
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input['MonitorScheduleArgs']]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter(name="seriesConditions")
    def series_conditions(self) -> Optional[pulumi.Input['MonitorSeriesConditionsArgs']]:
        return pulumi.get(self, "series_conditions")

    @series_conditions.setter
    def series_conditions(self, value: Optional[pulumi.Input['MonitorSeriesConditionsArgs']]):
        pulumi.set(self, "series_conditions", value)

    @property
    @pulumi.getter(name="signalGrouping")
    def signal_grouping(self) -> Optional[pulumi.Input['MonitorSignalGroupingArgs']]:
        return pulumi.get(self, "signal_grouping")

    @signal_grouping.setter
    def signal_grouping(self, value: Optional[pulumi.Input['MonitorSignalGroupingArgs']]):
        pulumi.set(self, "signal_grouping", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)


class Monitor(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 bucket_id: Optional[pulumi.Input[str]] = None,
                 collection_id: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notification_policy_id: Optional[pulumi.Input[str]] = None,
                 query: Optional[pulumi.Input[pulumi.InputType['MonitorQueryArgs']]] = None,
                 schedule: Optional[pulumi.Input[pulumi.InputType['MonitorScheduleArgs']]] = None,
                 series_conditions: Optional[pulumi.Input[pulumi.InputType['MonitorSeriesConditionsArgs']]] = None,
                 signal_grouping: Optional[pulumi.Input[pulumi.InputType['MonitorSignalGroupingArgs']]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Monitor resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MonitorArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Monitor resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param MonitorArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MonitorArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 bucket_id: Optional[pulumi.Input[str]] = None,
                 collection_id: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notification_policy_id: Optional[pulumi.Input[str]] = None,
                 query: Optional[pulumi.Input[pulumi.InputType['MonitorQueryArgs']]] = None,
                 schedule: Optional[pulumi.Input[pulumi.InputType['MonitorScheduleArgs']]] = None,
                 series_conditions: Optional[pulumi.Input[pulumi.InputType['MonitorSeriesConditionsArgs']]] = None,
                 signal_grouping: Optional[pulumi.Input[pulumi.InputType['MonitorSignalGroupingArgs']]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MonitorArgs.__new__(MonitorArgs)

            __props__.__dict__["annotations"] = annotations
            __props__.__dict__["bucket_id"] = bucket_id
            __props__.__dict__["collection_id"] = collection_id
            __props__.__dict__["interval"] = interval
            __props__.__dict__["labels"] = labels
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            __props__.__dict__["notification_policy_id"] = notification_policy_id
            if query is None and not opts.urn:
                raise TypeError("Missing required property 'query'")
            __props__.__dict__["query"] = query
            __props__.__dict__["schedule"] = schedule
            if series_conditions is None and not opts.urn:
                raise TypeError("Missing required property 'series_conditions'")
            __props__.__dict__["series_conditions"] = series_conditions
            __props__.__dict__["signal_grouping"] = signal_grouping
            __props__.__dict__["slug"] = slug
        super(Monitor, __self__).__init__(
            'chronosphere:index/monitor:Monitor',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            bucket_id: Optional[pulumi.Input[str]] = None,
            collection_id: Optional[pulumi.Input[str]] = None,
            interval: Optional[pulumi.Input[str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            notification_policy_id: Optional[pulumi.Input[str]] = None,
            query: Optional[pulumi.Input[pulumi.InputType['MonitorQueryArgs']]] = None,
            schedule: Optional[pulumi.Input[pulumi.InputType['MonitorScheduleArgs']]] = None,
            series_conditions: Optional[pulumi.Input[pulumi.InputType['MonitorSeriesConditionsArgs']]] = None,
            signal_grouping: Optional[pulumi.Input[pulumi.InputType['MonitorSignalGroupingArgs']]] = None,
            slug: Optional[pulumi.Input[str]] = None) -> 'Monitor':
        """
        Get an existing Monitor resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MonitorState.__new__(_MonitorState)

        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["bucket_id"] = bucket_id
        __props__.__dict__["collection_id"] = collection_id
        __props__.__dict__["interval"] = interval
        __props__.__dict__["labels"] = labels
        __props__.__dict__["name"] = name
        __props__.__dict__["notification_policy_id"] = notification_policy_id
        __props__.__dict__["query"] = query
        __props__.__dict__["schedule"] = schedule
        __props__.__dict__["series_conditions"] = series_conditions
        __props__.__dict__["signal_grouping"] = signal_grouping
        __props__.__dict__["slug"] = slug
        return Monitor(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="bucketId")
    def bucket_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "bucket_id")

    @property
    @pulumi.getter(name="collectionId")
    def collection_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "collection_id")

    @property
    @pulumi.getter
    def interval(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notificationPolicyId")
    def notification_policy_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "notification_policy_id")

    @property
    @pulumi.getter
    def query(self) -> pulumi.Output['outputs.MonitorQuery']:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Output[Optional['outputs.MonitorSchedule']]:
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter(name="seriesConditions")
    def series_conditions(self) -> pulumi.Output['outputs.MonitorSeriesConditions']:
        return pulumi.get(self, "series_conditions")

    @property
    @pulumi.getter(name="signalGrouping")
    def signal_grouping(self) -> pulumi.Output[Optional['outputs.MonitorSignalGrouping']]:
        return pulumi.get(self, "signal_grouping")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        return pulumi.get(self, "slug")

