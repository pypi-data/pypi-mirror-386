# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'BucketDataSourceResult',
    'AwaitableBucketDataSourceResult',
    'bucket_data_source',
    'bucket_data_source_output',
]

@pulumi.output_type
class BucketDataSourceResult:
    """
    A collection of values returned by BucketDataSource.
    """
    def __init__(__self__, description=None, id=None, labels=None, name=None, slug=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if slug and not isinstance(slug, str):
            raise TypeError("Expected argument 'slug' to be a str")
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")


class AwaitableBucketDataSourceResult(BucketDataSourceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return BucketDataSourceResult(
            description=self.description,
            id=self.id,
            labels=self.labels,
            name=self.name,
            slug=self.slug)


def bucket_data_source(labels: Optional[Mapping[str, str]] = None,
                       name: Optional[str] = None,
                       slug: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableBucketDataSourceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['labels'] = labels
    __args__['name'] = name
    __args__['slug'] = slug
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('chronosphere:index/bucketDataSource:BucketDataSource', __args__, opts=opts, typ=BucketDataSourceResult).value

    return AwaitableBucketDataSourceResult(
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        slug=pulumi.get(__ret__, 'slug'))


@_utilities.lift_output_func(bucket_data_source)
def bucket_data_source_output(labels: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                              name: Optional[pulumi.Input[Optional[str]]] = None,
                              slug: Optional[pulumi.Input[Optional[str]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[BucketDataSourceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
