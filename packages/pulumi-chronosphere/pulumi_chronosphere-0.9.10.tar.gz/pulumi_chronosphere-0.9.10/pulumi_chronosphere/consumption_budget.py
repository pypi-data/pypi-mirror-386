# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ConsumptionBudgetArgs', 'ConsumptionBudget']

@pulumi.input_type
class ConsumptionBudgetArgs:
    def __init__(__self__, *,
                 consumption_config_id: pulumi.Input[str],
                 name: pulumi.Input[str],
                 alert_action_config: Optional[pulumi.Input['ConsumptionBudgetAlertActionConfigArgs']] = None,
                 default_priority: Optional[pulumi.Input[int]] = None,
                 notification_policy_id: Optional[pulumi.Input[str]] = None,
                 partition_slug_path: Optional[pulumi.Input[str]] = None,
                 priorities: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionBudgetPriorityArgs']]]] = None,
                 resource: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 thresholds: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionBudgetThresholdArgs']]]] = None):
        """
        The set of arguments for constructing a ConsumptionBudget resource.
        """
        pulumi.set(__self__, "consumption_config_id", consumption_config_id)
        pulumi.set(__self__, "name", name)
        if alert_action_config is not None:
            pulumi.set(__self__, "alert_action_config", alert_action_config)
        if default_priority is not None:
            pulumi.set(__self__, "default_priority", default_priority)
        if notification_policy_id is not None:
            pulumi.set(__self__, "notification_policy_id", notification_policy_id)
        if partition_slug_path is not None:
            pulumi.set(__self__, "partition_slug_path", partition_slug_path)
        if priorities is not None:
            pulumi.set(__self__, "priorities", priorities)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter(name="consumptionConfigId")
    def consumption_config_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "consumption_config_id")

    @consumption_config_id.setter
    def consumption_config_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "consumption_config_id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="alertActionConfig")
    def alert_action_config(self) -> Optional[pulumi.Input['ConsumptionBudgetAlertActionConfigArgs']]:
        return pulumi.get(self, "alert_action_config")

    @alert_action_config.setter
    def alert_action_config(self, value: Optional[pulumi.Input['ConsumptionBudgetAlertActionConfigArgs']]):
        pulumi.set(self, "alert_action_config", value)

    @property
    @pulumi.getter(name="defaultPriority")
    def default_priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_priority")

    @default_priority.setter
    def default_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_priority", value)

    @property
    @pulumi.getter(name="notificationPolicyId")
    def notification_policy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notification_policy_id")

    @notification_policy_id.setter
    def notification_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notification_policy_id", value)

    @property
    @pulumi.getter(name="partitionSlugPath")
    def partition_slug_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "partition_slug_path")

    @partition_slug_path.setter
    def partition_slug_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "partition_slug_path", value)

    @property
    @pulumi.getter
    def priorities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionBudgetPriorityArgs']]]]:
        return pulumi.get(self, "priorities")

    @priorities.setter
    def priorities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionBudgetPriorityArgs']]]]):
        pulumi.set(self, "priorities", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionBudgetThresholdArgs']]]]:
        return pulumi.get(self, "thresholds")

    @thresholds.setter
    def thresholds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionBudgetThresholdArgs']]]]):
        pulumi.set(self, "thresholds", value)


@pulumi.input_type
class _ConsumptionBudgetState:
    def __init__(__self__, *,
                 alert_action_config: Optional[pulumi.Input['ConsumptionBudgetAlertActionConfigArgs']] = None,
                 consumption_config_id: Optional[pulumi.Input[str]] = None,
                 default_priority: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notification_policy_id: Optional[pulumi.Input[str]] = None,
                 partition_slug_path: Optional[pulumi.Input[str]] = None,
                 priorities: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionBudgetPriorityArgs']]]] = None,
                 resource: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 thresholds: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionBudgetThresholdArgs']]]] = None):
        """
        Input properties used for looking up and filtering ConsumptionBudget resources.
        """
        if alert_action_config is not None:
            pulumi.set(__self__, "alert_action_config", alert_action_config)
        if consumption_config_id is not None:
            pulumi.set(__self__, "consumption_config_id", consumption_config_id)
        if default_priority is not None:
            pulumi.set(__self__, "default_priority", default_priority)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notification_policy_id is not None:
            pulumi.set(__self__, "notification_policy_id", notification_policy_id)
        if partition_slug_path is not None:
            pulumi.set(__self__, "partition_slug_path", partition_slug_path)
        if priorities is not None:
            pulumi.set(__self__, "priorities", priorities)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter(name="alertActionConfig")
    def alert_action_config(self) -> Optional[pulumi.Input['ConsumptionBudgetAlertActionConfigArgs']]:
        return pulumi.get(self, "alert_action_config")

    @alert_action_config.setter
    def alert_action_config(self, value: Optional[pulumi.Input['ConsumptionBudgetAlertActionConfigArgs']]):
        pulumi.set(self, "alert_action_config", value)

    @property
    @pulumi.getter(name="consumptionConfigId")
    def consumption_config_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumption_config_id")

    @consumption_config_id.setter
    def consumption_config_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumption_config_id", value)

    @property
    @pulumi.getter(name="defaultPriority")
    def default_priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_priority")

    @default_priority.setter
    def default_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_priority", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notificationPolicyId")
    def notification_policy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notification_policy_id")

    @notification_policy_id.setter
    def notification_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notification_policy_id", value)

    @property
    @pulumi.getter(name="partitionSlugPath")
    def partition_slug_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "partition_slug_path")

    @partition_slug_path.setter
    def partition_slug_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "partition_slug_path", value)

    @property
    @pulumi.getter
    def priorities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionBudgetPriorityArgs']]]]:
        return pulumi.get(self, "priorities")

    @priorities.setter
    def priorities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionBudgetPriorityArgs']]]]):
        pulumi.set(self, "priorities", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionBudgetThresholdArgs']]]]:
        return pulumi.get(self, "thresholds")

    @thresholds.setter
    def thresholds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionBudgetThresholdArgs']]]]):
        pulumi.set(self, "thresholds", value)


class ConsumptionBudget(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alert_action_config: Optional[pulumi.Input[pulumi.InputType['ConsumptionBudgetAlertActionConfigArgs']]] = None,
                 consumption_config_id: Optional[pulumi.Input[str]] = None,
                 default_priority: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notification_policy_id: Optional[pulumi.Input[str]] = None,
                 partition_slug_path: Optional[pulumi.Input[str]] = None,
                 priorities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConsumptionBudgetPriorityArgs']]]]] = None,
                 resource: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 thresholds: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConsumptionBudgetThresholdArgs']]]]] = None,
                 __props__=None):
        """
        Create a ConsumptionBudget resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConsumptionBudgetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ConsumptionBudget resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ConsumptionBudgetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConsumptionBudgetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alert_action_config: Optional[pulumi.Input[pulumi.InputType['ConsumptionBudgetAlertActionConfigArgs']]] = None,
                 consumption_config_id: Optional[pulumi.Input[str]] = None,
                 default_priority: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notification_policy_id: Optional[pulumi.Input[str]] = None,
                 partition_slug_path: Optional[pulumi.Input[str]] = None,
                 priorities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConsumptionBudgetPriorityArgs']]]]] = None,
                 resource: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 thresholds: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConsumptionBudgetThresholdArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConsumptionBudgetArgs.__new__(ConsumptionBudgetArgs)

            __props__.__dict__["alert_action_config"] = alert_action_config
            if consumption_config_id is None and not opts.urn:
                raise TypeError("Missing required property 'consumption_config_id'")
            __props__.__dict__["consumption_config_id"] = consumption_config_id
            __props__.__dict__["default_priority"] = default_priority
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            __props__.__dict__["notification_policy_id"] = notification_policy_id
            __props__.__dict__["partition_slug_path"] = partition_slug_path
            __props__.__dict__["priorities"] = priorities
            __props__.__dict__["resource"] = resource
            __props__.__dict__["slug"] = slug
            __props__.__dict__["thresholds"] = thresholds
        super(ConsumptionBudget, __self__).__init__(
            'chronosphere:index/consumptionBudget:ConsumptionBudget',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alert_action_config: Optional[pulumi.Input[pulumi.InputType['ConsumptionBudgetAlertActionConfigArgs']]] = None,
            consumption_config_id: Optional[pulumi.Input[str]] = None,
            default_priority: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            notification_policy_id: Optional[pulumi.Input[str]] = None,
            partition_slug_path: Optional[pulumi.Input[str]] = None,
            priorities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConsumptionBudgetPriorityArgs']]]]] = None,
            resource: Optional[pulumi.Input[str]] = None,
            slug: Optional[pulumi.Input[str]] = None,
            thresholds: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConsumptionBudgetThresholdArgs']]]]] = None) -> 'ConsumptionBudget':
        """
        Get an existing ConsumptionBudget resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConsumptionBudgetState.__new__(_ConsumptionBudgetState)

        __props__.__dict__["alert_action_config"] = alert_action_config
        __props__.__dict__["consumption_config_id"] = consumption_config_id
        __props__.__dict__["default_priority"] = default_priority
        __props__.__dict__["name"] = name
        __props__.__dict__["notification_policy_id"] = notification_policy_id
        __props__.__dict__["partition_slug_path"] = partition_slug_path
        __props__.__dict__["priorities"] = priorities
        __props__.__dict__["resource"] = resource
        __props__.__dict__["slug"] = slug
        __props__.__dict__["thresholds"] = thresholds
        return ConsumptionBudget(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="alertActionConfig")
    def alert_action_config(self) -> pulumi.Output[Optional['outputs.ConsumptionBudgetAlertActionConfig']]:
        return pulumi.get(self, "alert_action_config")

    @property
    @pulumi.getter(name="consumptionConfigId")
    def consumption_config_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "consumption_config_id")

    @property
    @pulumi.getter(name="defaultPriority")
    def default_priority(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "default_priority")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notificationPolicyId")
    def notification_policy_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "notification_policy_id")

    @property
    @pulumi.getter(name="partitionSlugPath")
    def partition_slug_path(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "partition_slug_path")

    @property
    @pulumi.getter
    def priorities(self) -> pulumi.Output[Optional[Sequence['outputs.ConsumptionBudgetPriority']]]:
        return pulumi.get(self, "priorities")

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter
    def thresholds(self) -> pulumi.Output[Optional[Sequence['outputs.ConsumptionBudgetThreshold']]]:
        return pulumi.get(self, "thresholds")

