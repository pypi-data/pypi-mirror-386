# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TraceMetricsRuleArgs', 'TraceMetricsRule']

@pulumi.input_type
class TraceMetricsRuleArgs:
    def __init__(__self__, *,
                 metric_name: pulumi.Input[str],
                 name: pulumi.Input[str],
                 trace_filter: pulumi.Input['TraceMetricsRuleTraceFilterArgs'],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['TraceMetricsRuleGroupByArgs']]]] = None,
                 histogram_buckets_seconds: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 metric_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 slug: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a TraceMetricsRule resource.
        """
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "trace_filter", trace_filter)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if histogram_buckets_seconds is not None:
            pulumi.set(__self__, "histogram_buckets_seconds", histogram_buckets_seconds)
        if metric_labels is not None:
            pulumi.set(__self__, "metric_labels", metric_labels)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric_name")

    @metric_name.setter
    def metric_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_name", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="traceFilter")
    def trace_filter(self) -> pulumi.Input['TraceMetricsRuleTraceFilterArgs']:
        return pulumi.get(self, "trace_filter")

    @trace_filter.setter
    def trace_filter(self, value: pulumi.Input['TraceMetricsRuleTraceFilterArgs']):
        pulumi.set(self, "trace_filter", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TraceMetricsRuleGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TraceMetricsRuleGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="histogramBucketsSeconds")
    def histogram_buckets_seconds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "histogram_buckets_seconds")

    @histogram_buckets_seconds.setter
    def histogram_buckets_seconds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "histogram_buckets_seconds", value)

    @property
    @pulumi.getter(name="metricLabels")
    def metric_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "metric_labels")

    @metric_labels.setter
    def metric_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metric_labels", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)


@pulumi.input_type
class _TraceMetricsRuleState:
    def __init__(__self__, *,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['TraceMetricsRuleGroupByArgs']]]] = None,
                 histogram_buckets_seconds: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 metric_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metric_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 trace_filter: Optional[pulumi.Input['TraceMetricsRuleTraceFilterArgs']] = None):
        """
        Input properties used for looking up and filtering TraceMetricsRule resources.
        """
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if histogram_buckets_seconds is not None:
            pulumi.set(__self__, "histogram_buckets_seconds", histogram_buckets_seconds)
        if metric_labels is not None:
            pulumi.set(__self__, "metric_labels", metric_labels)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if trace_filter is not None:
            pulumi.set(__self__, "trace_filter", trace_filter)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TraceMetricsRuleGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TraceMetricsRuleGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="histogramBucketsSeconds")
    def histogram_buckets_seconds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "histogram_buckets_seconds")

    @histogram_buckets_seconds.setter
    def histogram_buckets_seconds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "histogram_buckets_seconds", value)

    @property
    @pulumi.getter(name="metricLabels")
    def metric_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "metric_labels")

    @metric_labels.setter
    def metric_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metric_labels", value)

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metric_name")

    @metric_name.setter
    def metric_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="traceFilter")
    def trace_filter(self) -> Optional[pulumi.Input['TraceMetricsRuleTraceFilterArgs']]:
        return pulumi.get(self, "trace_filter")

    @trace_filter.setter
    def trace_filter(self, value: Optional[pulumi.Input['TraceMetricsRuleTraceFilterArgs']]):
        pulumi.set(self, "trace_filter", value)


class TraceMetricsRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TraceMetricsRuleGroupByArgs']]]]] = None,
                 histogram_buckets_seconds: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 metric_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metric_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 trace_filter: Optional[pulumi.Input[pulumi.InputType['TraceMetricsRuleTraceFilterArgs']]] = None,
                 __props__=None):
        """
        Create a TraceMetricsRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TraceMetricsRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a TraceMetricsRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param TraceMetricsRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TraceMetricsRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TraceMetricsRuleGroupByArgs']]]]] = None,
                 histogram_buckets_seconds: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 metric_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metric_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 trace_filter: Optional[pulumi.Input[pulumi.InputType['TraceMetricsRuleTraceFilterArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TraceMetricsRuleArgs.__new__(TraceMetricsRuleArgs)

            __props__.__dict__["group_bies"] = group_bies
            __props__.__dict__["histogram_buckets_seconds"] = histogram_buckets_seconds
            __props__.__dict__["metric_labels"] = metric_labels
            if metric_name is None and not opts.urn:
                raise TypeError("Missing required property 'metric_name'")
            __props__.__dict__["metric_name"] = metric_name
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            __props__.__dict__["slug"] = slug
            if trace_filter is None and not opts.urn:
                raise TypeError("Missing required property 'trace_filter'")
            __props__.__dict__["trace_filter"] = trace_filter
        super(TraceMetricsRule, __self__).__init__(
            'chronosphere:index/traceMetricsRule:TraceMetricsRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TraceMetricsRuleGroupByArgs']]]]] = None,
            histogram_buckets_seconds: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
            metric_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            metric_name: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            slug: Optional[pulumi.Input[str]] = None,
            trace_filter: Optional[pulumi.Input[pulumi.InputType['TraceMetricsRuleTraceFilterArgs']]] = None) -> 'TraceMetricsRule':
        """
        Get an existing TraceMetricsRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TraceMetricsRuleState.__new__(_TraceMetricsRuleState)

        __props__.__dict__["group_bies"] = group_bies
        __props__.__dict__["histogram_buckets_seconds"] = histogram_buckets_seconds
        __props__.__dict__["metric_labels"] = metric_labels
        __props__.__dict__["metric_name"] = metric_name
        __props__.__dict__["name"] = name
        __props__.__dict__["slug"] = slug
        __props__.__dict__["trace_filter"] = trace_filter
        return TraceMetricsRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> pulumi.Output[Optional[Sequence['outputs.TraceMetricsRuleGroupBy']]]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="histogramBucketsSeconds")
    def histogram_buckets_seconds(self) -> pulumi.Output[Optional[Sequence[float]]]:
        return pulumi.get(self, "histogram_buckets_seconds")

    @property
    @pulumi.getter(name="metricLabels")
    def metric_labels(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "metric_labels")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="traceFilter")
    def trace_filter(self) -> pulumi.Output['outputs.TraceMetricsRuleTraceFilter']:
        return pulumi.get(self, "trace_filter")

