# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'AzureMetricsIntegrationPrincipalArgs',
    'AzureMetricsIntegrationScrapeConfigArgs',
    'AzureMetricsIntegrationScrapeConfigResourceTypeArgs',
    'ConsumptionBudgetAlertActionConfigArgs',
    'ConsumptionBudgetPriorityArgs',
    'ConsumptionBudgetPriorityFilterArgs',
    'ConsumptionBudgetPriorityFilterLogFilterArgs',
    'ConsumptionBudgetThresholdArgs',
    'ConsumptionBudgetThresholdInstantRateArgs',
    'ConsumptionBudgetThresholdVolumeArgs',
    'ConsumptionConfigPartitionArgs',
    'ConsumptionConfigPartitionFilterArgs',
    'ConsumptionConfigPartitionFilterConditionArgs',
    'ConsumptionConfigPartitionFilterConditionLogFilterArgs',
    'ConsumptionConfigPartitionPartitionArgs',
    'ConsumptionConfigPartitionPartitionFilterArgs',
    'ConsumptionConfigPartitionPartitionFilterConditionArgs',
    'ConsumptionConfigPartitionPartitionFilterConditionLogFilterArgs',
    'ConsumptionConfigPartitionPartitionPartitionArgs',
    'ConsumptionConfigPartitionPartitionPartitionFilterArgs',
    'ConsumptionConfigPartitionPartitionPartitionFilterConditionArgs',
    'ConsumptionConfigPartitionPartitionPartitionFilterConditionLogFilterArgs',
    'ConsumptionConfigPartitionPartitionPartitionPartitionArgs',
    'ConsumptionConfigPartitionPartitionPartitionPartitionFilterArgs',
    'ConsumptionConfigPartitionPartitionPartitionPartitionFilterConditionArgs',
    'ConsumptionConfigPartitionPartitionPartitionPartitionFilterConditionLogFilterArgs',
    'ConsumptionConfigPartitionPartitionPartitionPartitionPartitionArgs',
    'ConsumptionConfigPartitionPartitionPartitionPartitionPartitionFilterArgs',
    'ConsumptionConfigPartitionPartitionPartitionPartitionPartitionFilterConditionArgs',
    'ConsumptionConfigPartitionPartitionPartitionPartitionPartitionFilterConditionLogFilterArgs',
    'ConsumptionConfigPartitionPartitionPartitionPartitionPartitionPartitionArgs',
    'ConsumptionConfigPartitionPartitionPartitionPartitionPartitionPartitionFilterArgs',
    'ConsumptionConfigPartitionPartitionPartitionPartitionPartitionPartitionFilterConditionArgs',
    'ConsumptionConfigPartitionPartitionPartitionPartitionPartitionPartitionFilterConditionLogFilterArgs',
    'DatasetConfigurationArgs',
    'DatasetConfigurationLogDatasetArgs',
    'DatasetConfigurationLogDatasetMatchCriteriaArgs',
    'DatasetConfigurationTraceDatasetArgs',
    'DatasetConfigurationTraceDatasetMatchCriteriaArgs',
    'DatasetConfigurationTraceDatasetMatchCriteriaSpanArgs',
    'DatasetConfigurationTraceDatasetMatchCriteriaSpanDurationArgs',
    'DatasetConfigurationTraceDatasetMatchCriteriaSpanErrorArgs',
    'DatasetConfigurationTraceDatasetMatchCriteriaSpanIsRootSpanArgs',
    'DatasetConfigurationTraceDatasetMatchCriteriaSpanOperationArgs',
    'DatasetConfigurationTraceDatasetMatchCriteriaSpanParentOperationArgs',
    'DatasetConfigurationTraceDatasetMatchCriteriaSpanParentServiceArgs',
    'DatasetConfigurationTraceDatasetMatchCriteriaSpanServiceArgs',
    'DatasetConfigurationTraceDatasetMatchCriteriaSpanSpanCountArgs',
    'DatasetConfigurationTraceDatasetMatchCriteriaSpanTagArgs',
    'DatasetConfigurationTraceDatasetMatchCriteriaSpanTagNumericValueArgs',
    'DatasetConfigurationTraceDatasetMatchCriteriaSpanTagValueArgs',
    'DatasetConfigurationTraceDatasetMatchCriteriaTraceArgs',
    'DatasetConfigurationTraceDatasetMatchCriteriaTraceDurationArgs',
    'DatasetConfigurationTraceDatasetMatchCriteriaTraceErrorArgs',
    'DerivedLabelMetricLabelArgs',
    'DerivedLabelMetricLabelConstructedLabelArgs',
    'DerivedLabelMetricLabelConstructedLabelValueDefinitionArgs',
    'DerivedLabelMetricLabelConstructedLabelValueDefinitionFilterArgs',
    'DerivedLabelMetricLabelMappingLabelArgs',
    'DerivedLabelMetricLabelMappingLabelNameMappingArgs',
    'DerivedLabelMetricLabelMappingLabelNameMappingFilterArgs',
    'DerivedLabelMetricLabelMappingLabelNameMappingValueMappingArgs',
    'DerivedLabelMetricLabelMappingLabelValueMappingArgs',
    'DerivedLabelSpanTagArgs',
    'DerivedLabelSpanTagNameMappingArgs',
    'DerivedMetricQueryArgs',
    'DerivedMetricQueryQueryArgs',
    'DerivedMetricQueryQueryVariableArgs',
    'DerivedMetricQuerySelectorArgs',
    'DropRuleValueBasedDropArgs',
    'GcpMetricsIntegrationMetricGroupArgs',
    'GcpMetricsIntegrationServiceAccountArgs',
    'LogAllocationConfigDatasetAllocationArgs',
    'LogAllocationConfigDatasetAllocationAllocationArgs',
    'LogAllocationConfigDatasetAllocationPrioritiesArgs',
    'LogAllocationConfigDatasetAllocationPrioritiesHighPriorityFilterArgs',
    'LogAllocationConfigDatasetAllocationPrioritiesLowPriorityFilterArgs',
    'LogAllocationConfigDefaultDatasetArgs',
    'LogAllocationConfigDefaultDatasetAllocationArgs',
    'LogAllocationConfigDefaultDatasetPrioritiesArgs',
    'LogAllocationConfigDefaultDatasetPrioritiesHighPriorityFilterArgs',
    'LogAllocationConfigDefaultDatasetPrioritiesLowPriorityFilterArgs',
    'LogControlConfigRuleArgs',
    'LogControlConfigRuleDropFieldArgs',
    'LogControlConfigRuleDropFieldParentPathArgs',
    'LogControlConfigRuleEmitMetricsArgs',
    'LogControlConfigRuleEmitMetricsCounterArgs',
    'LogControlConfigRuleEmitMetricsCounterValueArgs',
    'LogControlConfigRuleEmitMetricsGaugeArgs',
    'LogControlConfigRuleEmitMetricsGaugeValueArgs',
    'LogControlConfigRuleEmitMetricsHistogramArgs',
    'LogControlConfigRuleEmitMetricsHistogramValueArgs',
    'LogControlConfigRuleEmitMetricsLabelArgs',
    'LogControlConfigRuleEmitMetricsLabelValueArgs',
    'LogControlConfigRuleReplaceFieldArgs',
    'LogControlConfigRuleReplaceFieldFieldArgs',
    'LogControlConfigRuleReplaceFieldMappedValueArgs',
    'LogControlConfigRuleReplaceFieldMappedValuePairArgs',
    'LogControlConfigRuleReplaceFieldStaticValueArgs',
    'LogControlConfigRuleSampleArgs',
    'LogIngestConfigFieldNormalizationArgs',
    'LogIngestConfigFieldNormalizationCustomFieldNormalizationArgs',
    'LogIngestConfigFieldNormalizationCustomFieldNormalizationNormalizationArgs',
    'LogIngestConfigFieldNormalizationCustomFieldNormalizationNormalizationSourceArgs',
    'LogIngestConfigFieldNormalizationMessageArgs',
    'LogIngestConfigFieldNormalizationMessageSourceArgs',
    'LogIngestConfigFieldNormalizationPrimaryKeyArgs',
    'LogIngestConfigFieldNormalizationPrimaryKeyNormalizationArgs',
    'LogIngestConfigFieldNormalizationPrimaryKeyNormalizationSourceArgs',
    'LogIngestConfigFieldNormalizationSeverityArgs',
    'LogIngestConfigFieldNormalizationSeveritySourceArgs',
    'LogIngestConfigFieldNormalizationTimestampArgs',
    'LogIngestConfigFieldNormalizationTimestampSourceArgs',
    'LogIngestConfigFieldParserArgs',
    'LogIngestConfigFieldParserDestinationArgs',
    'LogIngestConfigFieldParserParserArgs',
    'LogIngestConfigFieldParserParserKeyValueParserArgs',
    'LogIngestConfigFieldParserParserRegexParserArgs',
    'LogIngestConfigFieldParserSourceArgs',
    'LogIngestConfigPlaintextParserArgs',
    'LogIngestConfigPlaintextParserParserArgs',
    'LogIngestConfigPlaintextParserParserKeyValueParserArgs',
    'LogIngestConfigPlaintextParserParserRegexParserArgs',
    'LogscaleActionEmailActionArgs',
    'LogscaleActionHumioActionArgs',
    'LogscaleActionOpsGenieActionArgs',
    'LogscaleActionPagerDutyActionArgs',
    'LogscaleActionSlackActionArgs',
    'LogscaleActionSlackPostMessageActionArgs',
    'LogscaleActionUploadFileActionArgs',
    'LogscaleActionVictorOpsActionArgs',
    'LogscaleActionWebhookActionArgs',
    'MappingRuleStoragePolicyArgs',
    'MonitorQueryArgs',
    'MonitorScheduleArgs',
    'MonitorScheduleRangeArgs',
    'MonitorSeriesConditionsArgs',
    'MonitorSeriesConditionsConditionArgs',
    'MonitorSeriesConditionsOverrideArgs',
    'MonitorSeriesConditionsOverrideConditionArgs',
    'MonitorSeriesConditionsOverrideLabelMatcherArgs',
    'MonitorSignalGroupingArgs',
    'NotificationPolicyOverrideArgs',
    'NotificationPolicyOverrideAlertLabelMatcherArgs',
    'NotificationPolicyOverrideRouteArgs',
    'NotificationPolicyOverrideRouteGroupByArgs',
    'NotificationPolicyRouteArgs',
    'NotificationPolicyRouteGroupByArgs',
    'OpsgenieAlertNotifierResponderArgs',
    'OtelMetricsIngestionResourceAttributesArgs',
    'PagerdutyAlertNotifierImageArgs',
    'PagerdutyAlertNotifierLinkArgs',
    'ResourcePoolsConfigDefaultPoolArgs',
    'ResourcePoolsConfigDefaultPoolAllocationArgs',
    'ResourcePoolsConfigDefaultPoolAllocationFixedValueArgs',
    'ResourcePoolsConfigDefaultPoolAllocationPriorityThresholdArgs',
    'ResourcePoolsConfigDefaultPoolAllocationPriorityThresholdAllPrioritiesArgs',
    'ResourcePoolsConfigDefaultPoolAllocationPriorityThresholdDefaultAndLowPriorityArgs',
    'ResourcePoolsConfigDefaultPoolAllocationPriorityThresholdLowPriorityArgs',
    'ResourcePoolsConfigDefaultPoolPrioritiesArgs',
    'ResourcePoolsConfigDefaultPoolPriorityThresholdArgs',
    'ResourcePoolsConfigDefaultPoolPriorityThresholdAllPrioritiesArgs',
    'ResourcePoolsConfigDefaultPoolPriorityThresholdDefaultAndLowPriorityArgs',
    'ResourcePoolsConfigDefaultPoolPriorityThresholdLowPriorityArgs',
    'ResourcePoolsConfigPoolArgs',
    'ResourcePoolsConfigPoolAllocationArgs',
    'ResourcePoolsConfigPoolAllocationFixedValueArgs',
    'ResourcePoolsConfigPoolAllocationPriorityThresholdArgs',
    'ResourcePoolsConfigPoolAllocationPriorityThresholdAllPrioritiesArgs',
    'ResourcePoolsConfigPoolAllocationPriorityThresholdDefaultAndLowPriorityArgs',
    'ResourcePoolsConfigPoolAllocationPriorityThresholdLowPriorityArgs',
    'ResourcePoolsConfigPoolPrioritiesArgs',
    'RollupRuleGraphiteLabelPolicyArgs',
    'RollupRuleGraphiteLabelPolicyReplaceArgs',
    'RollupRuleStoragePoliciesArgs',
    'SLODefinitionArgs',
    'SLODefinitionBurnRateAlertingConfigArgs',
    'SLODefinitionTimeWindowArgs',
    'SLOSignalGroupingArgs',
    'SLOSliArgs',
    'SLOSliAdditionalPromqlFilterArgs',
    'SLOSliCustomIndicatorArgs',
    'SLOSliCustomTimesliceIndicatorArgs',
    'SLOSliCustomTimesliceIndicatorConditionArgs',
    'ServiceAccountRestrictionArgs',
    'SlackAlertNotifierActionArgs',
    'SlackAlertNotifierFieldArgs',
    'TraceJaegerRemoteSamplingStrategyAppliedStrategyArgs',
    'TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesArgs',
    'TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesPerOperationStrategyArgs',
    'TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesPerOperationStrategyProbabilisticStrategyArgs',
    'TraceJaegerRemoteSamplingStrategyAppliedStrategyProbabilisticStrategyArgs',
    'TraceJaegerRemoteSamplingStrategyAppliedStrategyRateLimitingStrategyArgs',
    'TraceMetricsRuleGroupByArgs',
    'TraceMetricsRuleGroupByKeyArgs',
    'TraceMetricsRuleTraceFilterArgs',
    'TraceMetricsRuleTraceFilterSpanArgs',
    'TraceMetricsRuleTraceFilterSpanDurationArgs',
    'TraceMetricsRuleTraceFilterSpanErrorArgs',
    'TraceMetricsRuleTraceFilterSpanIsRootSpanArgs',
    'TraceMetricsRuleTraceFilterSpanOperationArgs',
    'TraceMetricsRuleTraceFilterSpanParentOperationArgs',
    'TraceMetricsRuleTraceFilterSpanParentServiceArgs',
    'TraceMetricsRuleTraceFilterSpanServiceArgs',
    'TraceMetricsRuleTraceFilterSpanSpanCountArgs',
    'TraceMetricsRuleTraceFilterSpanTagArgs',
    'TraceMetricsRuleTraceFilterSpanTagNumericValueArgs',
    'TraceMetricsRuleTraceFilterSpanTagValueArgs',
    'TraceMetricsRuleTraceFilterTraceArgs',
    'TraceMetricsRuleTraceFilterTraceDurationArgs',
    'TraceMetricsRuleTraceFilterTraceErrorArgs',
    'TraceTailSamplingRulesDefaultSampleRateArgs',
    'TraceTailSamplingRulesRuleArgs',
    'TraceTailSamplingRulesRuleFilterArgs',
    'TraceTailSamplingRulesRuleFilterSpanArgs',
    'TraceTailSamplingRulesRuleFilterSpanDurationArgs',
    'TraceTailSamplingRulesRuleFilterSpanErrorArgs',
    'TraceTailSamplingRulesRuleFilterSpanIsRootSpanArgs',
    'TraceTailSamplingRulesRuleFilterSpanOperationArgs',
    'TraceTailSamplingRulesRuleFilterSpanParentOperationArgs',
    'TraceTailSamplingRulesRuleFilterSpanParentServiceArgs',
    'TraceTailSamplingRulesRuleFilterSpanServiceArgs',
    'TraceTailSamplingRulesRuleFilterSpanSpanCountArgs',
    'TraceTailSamplingRulesRuleFilterSpanTagArgs',
    'TraceTailSamplingRulesRuleFilterSpanTagNumericValueArgs',
    'TraceTailSamplingRulesRuleFilterSpanTagValueArgs',
    'TraceTailSamplingRulesRuleFilterTraceArgs',
    'TraceTailSamplingRulesRuleFilterTraceDurationArgs',
    'TraceTailSamplingRulesRuleFilterTraceErrorArgs',
]

@pulumi.input_type
class AzureMetricsIntegrationPrincipalArgs:
    def __init__(__self__, *,
                 client_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class AzureMetricsIntegrationScrapeConfigArgs:
    def __init__(__self__, *,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resource_types: Optional[pulumi.Input[Sequence[pulumi.Input['AzureMetricsIntegrationScrapeConfigResourceTypeArgs']]]] = None,
                 subscription_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if resource_types is not None:
            pulumi.set(__self__, "resource_types", resource_types)
        if subscription_ids is not None:
            pulumi.set(__self__, "subscription_ids", subscription_ids)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter(name="resourceTypes")
    def resource_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AzureMetricsIntegrationScrapeConfigResourceTypeArgs']]]]:
        return pulumi.get(self, "resource_types")

    @resource_types.setter
    def resource_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AzureMetricsIntegrationScrapeConfigResourceTypeArgs']]]]):
        pulumi.set(self, "resource_types", value)

    @property
    @pulumi.getter(name="subscriptionIds")
    def subscription_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "subscription_ids")

    @subscription_ids.setter
    def subscription_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subscription_ids", value)


@pulumi.input_type
class AzureMetricsIntegrationScrapeConfigResourceTypeArgs:
    def __init__(__self__, *,
                 metric_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if metric_names is not None:
            pulumi.set(__self__, "metric_names", metric_names)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="metricNames")
    def metric_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "metric_names")

    @metric_names.setter
    def metric_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "metric_names", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ConsumptionBudgetAlertActionConfigArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 instant_rate_sustain_secs: Optional[pulumi.Input[int]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if instant_rate_sustain_secs is not None:
            pulumi.set(__self__, "instant_rate_sustain_secs", instant_rate_sustain_secs)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="instantRateSustainSecs")
    def instant_rate_sustain_secs(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "instant_rate_sustain_secs")

    @instant_rate_sustain_secs.setter
    def instant_rate_sustain_secs(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instant_rate_sustain_secs", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ConsumptionBudgetPriorityArgs:
    def __init__(__self__, *,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionBudgetPriorityFilterArgs']]]] = None,
                 priority: Optional[pulumi.Input[int]] = None):
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionBudgetPriorityFilterArgs']]]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionBudgetPriorityFilterArgs']]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)


@pulumi.input_type
class ConsumptionBudgetPriorityFilterArgs:
    def __init__(__self__, *,
                 dataset_id: Optional[pulumi.Input[str]] = None,
                 log_filter: Optional[pulumi.Input['ConsumptionBudgetPriorityFilterLogFilterArgs']] = None):
        if dataset_id is not None:
            pulumi.set(__self__, "dataset_id", dataset_id)
        if log_filter is not None:
            pulumi.set(__self__, "log_filter", log_filter)

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dataset_id")

    @dataset_id.setter
    def dataset_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset_id", value)

    @property
    @pulumi.getter(name="logFilter")
    def log_filter(self) -> Optional[pulumi.Input['ConsumptionBudgetPriorityFilterLogFilterArgs']]:
        return pulumi.get(self, "log_filter")

    @log_filter.setter
    def log_filter(self, value: Optional[pulumi.Input['ConsumptionBudgetPriorityFilterLogFilterArgs']]):
        pulumi.set(self, "log_filter", value)


@pulumi.input_type
class ConsumptionBudgetPriorityFilterLogFilterArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class ConsumptionBudgetThresholdArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 instant_rate: Optional[pulumi.Input['ConsumptionBudgetThresholdInstantRateArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 volume: Optional[pulumi.Input['ConsumptionBudgetThresholdVolumeArgs']] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if instant_rate is not None:
            pulumi.set(__self__, "instant_rate", instant_rate)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if volume is not None:
            pulumi.set(__self__, "volume", volume)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="instantRate")
    def instant_rate(self) -> Optional[pulumi.Input['ConsumptionBudgetThresholdInstantRateArgs']]:
        return pulumi.get(self, "instant_rate")

    @instant_rate.setter
    def instant_rate(self, value: Optional[pulumi.Input['ConsumptionBudgetThresholdInstantRateArgs']]):
        pulumi.set(self, "instant_rate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def volume(self) -> Optional[pulumi.Input['ConsumptionBudgetThresholdVolumeArgs']]:
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: Optional[pulumi.Input['ConsumptionBudgetThresholdVolumeArgs']]):
        pulumi.set(self, "volume", value)


@pulumi.input_type
class ConsumptionBudgetThresholdInstantRateArgs:
    def __init__(__self__, *,
                 fixed_value_per_sec: Optional[pulumi.Input[int]] = None):
        if fixed_value_per_sec is not None:
            pulumi.set(__self__, "fixed_value_per_sec", fixed_value_per_sec)

    @property
    @pulumi.getter(name="fixedValuePerSec")
    def fixed_value_per_sec(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fixed_value_per_sec")

    @fixed_value_per_sec.setter
    def fixed_value_per_sec(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fixed_value_per_sec", value)


@pulumi.input_type
class ConsumptionBudgetThresholdVolumeArgs:
    def __init__(__self__, *,
                 fixed_value: Optional[pulumi.Input[int]] = None):
        if fixed_value is not None:
            pulumi.set(__self__, "fixed_value", fixed_value)

    @property
    @pulumi.getter(name="fixedValue")
    def fixed_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fixed_value")

    @fixed_value.setter
    def fixed_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fixed_value", value)


@pulumi.input_type
class ConsumptionConfigPartitionArgs:
    def __init__(__self__, *,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionFilterArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 partitions: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionArgs']]]] = None,
                 slug: Optional[pulumi.Input[str]] = None):
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if partitions is not None:
            pulumi.set(__self__, "partitions", partitions)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionFilterArgs']]]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionFilterArgs']]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def partitions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionArgs']]]]:
        return pulumi.get(self, "partitions")

    @partitions.setter
    def partitions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionArgs']]]]):
        pulumi.set(self, "partitions", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)


@pulumi.input_type
class ConsumptionConfigPartitionFilterArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionFilterConditionArgs']]]] = None,
                 operator: Optional[pulumi.Input[str]] = None):
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionFilterConditionArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionFilterConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)


@pulumi.input_type
class ConsumptionConfigPartitionFilterConditionArgs:
    def __init__(__self__, *,
                 dataset_id: Optional[pulumi.Input[str]] = None,
                 log_filter: Optional[pulumi.Input['ConsumptionConfigPartitionFilterConditionLogFilterArgs']] = None):
        if dataset_id is not None:
            pulumi.set(__self__, "dataset_id", dataset_id)
        if log_filter is not None:
            pulumi.set(__self__, "log_filter", log_filter)

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dataset_id")

    @dataset_id.setter
    def dataset_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset_id", value)

    @property
    @pulumi.getter(name="logFilter")
    def log_filter(self) -> Optional[pulumi.Input['ConsumptionConfigPartitionFilterConditionLogFilterArgs']]:
        return pulumi.get(self, "log_filter")

    @log_filter.setter
    def log_filter(self, value: Optional[pulumi.Input['ConsumptionConfigPartitionFilterConditionLogFilterArgs']]):
        pulumi.set(self, "log_filter", value)


@pulumi.input_type
class ConsumptionConfigPartitionFilterConditionLogFilterArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class ConsumptionConfigPartitionPartitionArgs:
    def __init__(__self__, *,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionFilterArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 partitions: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionArgs']]]] = None,
                 slug: Optional[pulumi.Input[str]] = None):
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if partitions is not None:
            pulumi.set(__self__, "partitions", partitions)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionFilterArgs']]]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionFilterArgs']]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def partitions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionArgs']]]]:
        return pulumi.get(self, "partitions")

    @partitions.setter
    def partitions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionArgs']]]]):
        pulumi.set(self, "partitions", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)


@pulumi.input_type
class ConsumptionConfigPartitionPartitionFilterArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionFilterConditionArgs']]]] = None,
                 operator: Optional[pulumi.Input[str]] = None):
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionFilterConditionArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionFilterConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)


@pulumi.input_type
class ConsumptionConfigPartitionPartitionFilterConditionArgs:
    def __init__(__self__, *,
                 dataset_id: Optional[pulumi.Input[str]] = None,
                 log_filter: Optional[pulumi.Input['ConsumptionConfigPartitionPartitionFilterConditionLogFilterArgs']] = None):
        if dataset_id is not None:
            pulumi.set(__self__, "dataset_id", dataset_id)
        if log_filter is not None:
            pulumi.set(__self__, "log_filter", log_filter)

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dataset_id")

    @dataset_id.setter
    def dataset_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset_id", value)

    @property
    @pulumi.getter(name="logFilter")
    def log_filter(self) -> Optional[pulumi.Input['ConsumptionConfigPartitionPartitionFilterConditionLogFilterArgs']]:
        return pulumi.get(self, "log_filter")

    @log_filter.setter
    def log_filter(self, value: Optional[pulumi.Input['ConsumptionConfigPartitionPartitionFilterConditionLogFilterArgs']]):
        pulumi.set(self, "log_filter", value)


@pulumi.input_type
class ConsumptionConfigPartitionPartitionFilterConditionLogFilterArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class ConsumptionConfigPartitionPartitionPartitionArgs:
    def __init__(__self__, *,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionFilterArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 partitions: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionArgs']]]] = None,
                 slug: Optional[pulumi.Input[str]] = None):
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if partitions is not None:
            pulumi.set(__self__, "partitions", partitions)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionFilterArgs']]]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionFilterArgs']]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def partitions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionArgs']]]]:
        return pulumi.get(self, "partitions")

    @partitions.setter
    def partitions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionArgs']]]]):
        pulumi.set(self, "partitions", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)


@pulumi.input_type
class ConsumptionConfigPartitionPartitionPartitionFilterArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionFilterConditionArgs']]]] = None,
                 operator: Optional[pulumi.Input[str]] = None):
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionFilterConditionArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionFilterConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)


@pulumi.input_type
class ConsumptionConfigPartitionPartitionPartitionFilterConditionArgs:
    def __init__(__self__, *,
                 dataset_id: Optional[pulumi.Input[str]] = None,
                 log_filter: Optional[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionFilterConditionLogFilterArgs']] = None):
        if dataset_id is not None:
            pulumi.set(__self__, "dataset_id", dataset_id)
        if log_filter is not None:
            pulumi.set(__self__, "log_filter", log_filter)

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dataset_id")

    @dataset_id.setter
    def dataset_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset_id", value)

    @property
    @pulumi.getter(name="logFilter")
    def log_filter(self) -> Optional[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionFilterConditionLogFilterArgs']]:
        return pulumi.get(self, "log_filter")

    @log_filter.setter
    def log_filter(self, value: Optional[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionFilterConditionLogFilterArgs']]):
        pulumi.set(self, "log_filter", value)


@pulumi.input_type
class ConsumptionConfigPartitionPartitionPartitionFilterConditionLogFilterArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class ConsumptionConfigPartitionPartitionPartitionPartitionArgs:
    def __init__(__self__, *,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionFilterArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 partitions: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionPartitionArgs']]]] = None,
                 slug: Optional[pulumi.Input[str]] = None):
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if partitions is not None:
            pulumi.set(__self__, "partitions", partitions)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionFilterArgs']]]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionFilterArgs']]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def partitions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionPartitionArgs']]]]:
        return pulumi.get(self, "partitions")

    @partitions.setter
    def partitions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionPartitionArgs']]]]):
        pulumi.set(self, "partitions", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)


@pulumi.input_type
class ConsumptionConfigPartitionPartitionPartitionPartitionFilterArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionFilterConditionArgs']]]] = None,
                 operator: Optional[pulumi.Input[str]] = None):
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionFilterConditionArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionFilterConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)


@pulumi.input_type
class ConsumptionConfigPartitionPartitionPartitionPartitionFilterConditionArgs:
    def __init__(__self__, *,
                 dataset_id: Optional[pulumi.Input[str]] = None,
                 log_filter: Optional[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionFilterConditionLogFilterArgs']] = None):
        if dataset_id is not None:
            pulumi.set(__self__, "dataset_id", dataset_id)
        if log_filter is not None:
            pulumi.set(__self__, "log_filter", log_filter)

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dataset_id")

    @dataset_id.setter
    def dataset_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset_id", value)

    @property
    @pulumi.getter(name="logFilter")
    def log_filter(self) -> Optional[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionFilterConditionLogFilterArgs']]:
        return pulumi.get(self, "log_filter")

    @log_filter.setter
    def log_filter(self, value: Optional[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionFilterConditionLogFilterArgs']]):
        pulumi.set(self, "log_filter", value)


@pulumi.input_type
class ConsumptionConfigPartitionPartitionPartitionPartitionFilterConditionLogFilterArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class ConsumptionConfigPartitionPartitionPartitionPartitionPartitionArgs:
    def __init__(__self__, *,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionPartitionFilterArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 partitions: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionPartitionPartitionArgs']]]] = None,
                 slug: Optional[pulumi.Input[str]] = None):
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if partitions is not None:
            pulumi.set(__self__, "partitions", partitions)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionPartitionFilterArgs']]]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionPartitionFilterArgs']]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def partitions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionPartitionPartitionArgs']]]]:
        return pulumi.get(self, "partitions")

    @partitions.setter
    def partitions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionPartitionPartitionArgs']]]]):
        pulumi.set(self, "partitions", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)


@pulumi.input_type
class ConsumptionConfigPartitionPartitionPartitionPartitionPartitionFilterArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionPartitionFilterConditionArgs']]]] = None,
                 operator: Optional[pulumi.Input[str]] = None):
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionPartitionFilterConditionArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionPartitionFilterConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)


@pulumi.input_type
class ConsumptionConfigPartitionPartitionPartitionPartitionPartitionFilterConditionArgs:
    def __init__(__self__, *,
                 dataset_id: Optional[pulumi.Input[str]] = None,
                 log_filter: Optional[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionPartitionFilterConditionLogFilterArgs']] = None):
        if dataset_id is not None:
            pulumi.set(__self__, "dataset_id", dataset_id)
        if log_filter is not None:
            pulumi.set(__self__, "log_filter", log_filter)

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dataset_id")

    @dataset_id.setter
    def dataset_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset_id", value)

    @property
    @pulumi.getter(name="logFilter")
    def log_filter(self) -> Optional[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionPartitionFilterConditionLogFilterArgs']]:
        return pulumi.get(self, "log_filter")

    @log_filter.setter
    def log_filter(self, value: Optional[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionPartitionFilterConditionLogFilterArgs']]):
        pulumi.set(self, "log_filter", value)


@pulumi.input_type
class ConsumptionConfigPartitionPartitionPartitionPartitionPartitionFilterConditionLogFilterArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class ConsumptionConfigPartitionPartitionPartitionPartitionPartitionPartitionArgs:
    def __init__(__self__, *,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionPartitionPartitionFilterArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None):
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionPartitionPartitionFilterArgs']]]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionPartitionPartitionFilterArgs']]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)


@pulumi.input_type
class ConsumptionConfigPartitionPartitionPartitionPartitionPartitionPartitionFilterArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionPartitionPartitionFilterConditionArgs']]]] = None,
                 operator: Optional[pulumi.Input[str]] = None):
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionPartitionPartitionFilterConditionArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionPartitionPartitionFilterConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)


@pulumi.input_type
class ConsumptionConfigPartitionPartitionPartitionPartitionPartitionPartitionFilterConditionArgs:
    def __init__(__self__, *,
                 dataset_id: Optional[pulumi.Input[str]] = None,
                 log_filter: Optional[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionPartitionPartitionFilterConditionLogFilterArgs']] = None):
        if dataset_id is not None:
            pulumi.set(__self__, "dataset_id", dataset_id)
        if log_filter is not None:
            pulumi.set(__self__, "log_filter", log_filter)

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dataset_id")

    @dataset_id.setter
    def dataset_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset_id", value)

    @property
    @pulumi.getter(name="logFilter")
    def log_filter(self) -> Optional[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionPartitionPartitionFilterConditionLogFilterArgs']]:
        return pulumi.get(self, "log_filter")

    @log_filter.setter
    def log_filter(self, value: Optional[pulumi.Input['ConsumptionConfigPartitionPartitionPartitionPartitionPartitionPartitionFilterConditionLogFilterArgs']]):
        pulumi.set(self, "log_filter", value)


@pulumi.input_type
class ConsumptionConfigPartitionPartitionPartitionPartitionPartitionPartitionFilterConditionLogFilterArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DatasetConfigurationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 log_dataset: Optional[pulumi.Input['DatasetConfigurationLogDatasetArgs']] = None,
                 trace_dataset: Optional[pulumi.Input['DatasetConfigurationTraceDatasetArgs']] = None):
        pulumi.set(__self__, "type", type)
        if log_dataset is not None:
            pulumi.set(__self__, "log_dataset", log_dataset)
        if trace_dataset is not None:
            pulumi.set(__self__, "trace_dataset", trace_dataset)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="logDataset")
    def log_dataset(self) -> Optional[pulumi.Input['DatasetConfigurationLogDatasetArgs']]:
        return pulumi.get(self, "log_dataset")

    @log_dataset.setter
    def log_dataset(self, value: Optional[pulumi.Input['DatasetConfigurationLogDatasetArgs']]):
        pulumi.set(self, "log_dataset", value)

    @property
    @pulumi.getter(name="traceDataset")
    def trace_dataset(self) -> Optional[pulumi.Input['DatasetConfigurationTraceDatasetArgs']]:
        return pulumi.get(self, "trace_dataset")

    @trace_dataset.setter
    def trace_dataset(self, value: Optional[pulumi.Input['DatasetConfigurationTraceDatasetArgs']]):
        pulumi.set(self, "trace_dataset", value)


@pulumi.input_type
class DatasetConfigurationLogDatasetArgs:
    def __init__(__self__, *,
                 match_criteria: Optional[pulumi.Input['DatasetConfigurationLogDatasetMatchCriteriaArgs']] = None):
        if match_criteria is not None:
            pulumi.set(__self__, "match_criteria", match_criteria)

    @property
    @pulumi.getter(name="matchCriteria")
    def match_criteria(self) -> Optional[pulumi.Input['DatasetConfigurationLogDatasetMatchCriteriaArgs']]:
        return pulumi.get(self, "match_criteria")

    @match_criteria.setter
    def match_criteria(self, value: Optional[pulumi.Input['DatasetConfigurationLogDatasetMatchCriteriaArgs']]):
        pulumi.set(self, "match_criteria", value)


@pulumi.input_type
class DatasetConfigurationLogDatasetMatchCriteriaArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DatasetConfigurationTraceDatasetArgs:
    def __init__(__self__, *,
                 match_criteria: pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaArgs']):
        pulumi.set(__self__, "match_criteria", match_criteria)

    @property
    @pulumi.getter(name="matchCriteria")
    def match_criteria(self) -> pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaArgs']:
        return pulumi.get(self, "match_criteria")

    @match_criteria.setter
    def match_criteria(self, value: pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaArgs']):
        pulumi.set(self, "match_criteria", value)


@pulumi.input_type
class DatasetConfigurationTraceDatasetMatchCriteriaArgs:
    def __init__(__self__, *,
                 spans: Optional[pulumi.Input[Sequence[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanArgs']]]] = None,
                 trace: Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaTraceArgs']] = None):
        if spans is not None:
            pulumi.set(__self__, "spans", spans)
        if trace is not None:
            pulumi.set(__self__, "trace", trace)

    @property
    @pulumi.getter
    def spans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanArgs']]]]:
        return pulumi.get(self, "spans")

    @spans.setter
    def spans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanArgs']]]]):
        pulumi.set(self, "spans", value)

    @property
    @pulumi.getter
    def trace(self) -> Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaTraceArgs']]:
        return pulumi.get(self, "trace")

    @trace.setter
    def trace(self, value: Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaTraceArgs']]):
        pulumi.set(self, "trace", value)


@pulumi.input_type
class DatasetConfigurationTraceDatasetMatchCriteriaSpanArgs:
    def __init__(__self__, *,
                 duration: Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanDurationArgs']] = None,
                 error: Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanErrorArgs']] = None,
                 is_root_span: Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanIsRootSpanArgs']] = None,
                 match_type: Optional[pulumi.Input[str]] = None,
                 operation: Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanOperationArgs']] = None,
                 parent_operation: Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanParentOperationArgs']] = None,
                 parent_service: Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanParentServiceArgs']] = None,
                 service: Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanServiceArgs']] = None,
                 span_count: Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanSpanCountArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanTagArgs']]]] = None):
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if error is not None:
            pulumi.set(__self__, "error", error)
        if is_root_span is not None:
            pulumi.set(__self__, "is_root_span", is_root_span)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if operation is not None:
            pulumi.set(__self__, "operation", operation)
        if parent_operation is not None:
            pulumi.set(__self__, "parent_operation", parent_operation)
        if parent_service is not None:
            pulumi.set(__self__, "parent_service", parent_service)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if span_count is not None:
            pulumi.set(__self__, "span_count", span_count)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanDurationArgs']]:
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanDurationArgs']]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def error(self) -> Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanErrorArgs']]:
        return pulumi.get(self, "error")

    @error.setter
    def error(self, value: Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanErrorArgs']]):
        pulumi.set(self, "error", value)

    @property
    @pulumi.getter(name="isRootSpan")
    def is_root_span(self) -> Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanIsRootSpanArgs']]:
        return pulumi.get(self, "is_root_span")

    @is_root_span.setter
    def is_root_span(self, value: Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanIsRootSpanArgs']]):
        pulumi.set(self, "is_root_span", value)

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_type")

    @match_type.setter
    def match_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_type", value)

    @property
    @pulumi.getter
    def operation(self) -> Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanOperationArgs']]:
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanOperationArgs']]):
        pulumi.set(self, "operation", value)

    @property
    @pulumi.getter(name="parentOperation")
    def parent_operation(self) -> Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanParentOperationArgs']]:
        return pulumi.get(self, "parent_operation")

    @parent_operation.setter
    def parent_operation(self, value: Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanParentOperationArgs']]):
        pulumi.set(self, "parent_operation", value)

    @property
    @pulumi.getter(name="parentService")
    def parent_service(self) -> Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanParentServiceArgs']]:
        return pulumi.get(self, "parent_service")

    @parent_service.setter
    def parent_service(self, value: Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanParentServiceArgs']]):
        pulumi.set(self, "parent_service", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanServiceArgs']]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanServiceArgs']]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="spanCount")
    def span_count(self) -> Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanSpanCountArgs']]:
        return pulumi.get(self, "span_count")

    @span_count.setter
    def span_count(self, value: Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanSpanCountArgs']]):
        pulumi.set(self, "span_count", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class DatasetConfigurationTraceDatasetMatchCriteriaSpanDurationArgs:
    def __init__(__self__, *,
                 max_secs: Optional[pulumi.Input[float]] = None,
                 min_secs: Optional[pulumi.Input[float]] = None):
        if max_secs is not None:
            pulumi.set(__self__, "max_secs", max_secs)
        if min_secs is not None:
            pulumi.set(__self__, "min_secs", min_secs)

    @property
    @pulumi.getter(name="maxSecs")
    def max_secs(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max_secs")

    @max_secs.setter
    def max_secs(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_secs", value)

    @property
    @pulumi.getter(name="minSecs")
    def min_secs(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "min_secs")

    @min_secs.setter
    def min_secs(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "min_secs", value)


@pulumi.input_type
class DatasetConfigurationTraceDatasetMatchCriteriaSpanErrorArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[bool]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[bool]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DatasetConfigurationTraceDatasetMatchCriteriaSpanIsRootSpanArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[bool]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[bool]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DatasetConfigurationTraceDatasetMatchCriteriaSpanOperationArgs:
    def __init__(__self__, *,
                 in_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if in_values is not None:
            pulumi.set(__self__, "in_values", in_values)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="inValues")
    def in_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "in_values")

    @in_values.setter
    def in_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "in_values", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DatasetConfigurationTraceDatasetMatchCriteriaSpanParentOperationArgs:
    def __init__(__self__, *,
                 in_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if in_values is not None:
            pulumi.set(__self__, "in_values", in_values)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="inValues")
    def in_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "in_values")

    @in_values.setter
    def in_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "in_values", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DatasetConfigurationTraceDatasetMatchCriteriaSpanParentServiceArgs:
    def __init__(__self__, *,
                 in_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if in_values is not None:
            pulumi.set(__self__, "in_values", in_values)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="inValues")
    def in_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "in_values")

    @in_values.setter
    def in_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "in_values", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DatasetConfigurationTraceDatasetMatchCriteriaSpanServiceArgs:
    def __init__(__self__, *,
                 in_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if in_values is not None:
            pulumi.set(__self__, "in_values", in_values)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="inValues")
    def in_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "in_values")

    @in_values.setter
    def in_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "in_values", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DatasetConfigurationTraceDatasetMatchCriteriaSpanSpanCountArgs:
    def __init__(__self__, *,
                 max: Optional[pulumi.Input[int]] = None,
                 min: Optional[pulumi.Input[int]] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min", value)


@pulumi.input_type
class DatasetConfigurationTraceDatasetMatchCriteriaSpanTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 numeric_value: Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanTagNumericValueArgs']] = None,
                 value: Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanTagValueArgs']] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if numeric_value is not None:
            pulumi.set(__self__, "numeric_value", numeric_value)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="numericValue")
    def numeric_value(self) -> Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanTagNumericValueArgs']]:
        return pulumi.get(self, "numeric_value")

    @numeric_value.setter
    def numeric_value(self, value: Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanTagNumericValueArgs']]):
        pulumi.set(self, "numeric_value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanTagValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaSpanTagValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DatasetConfigurationTraceDatasetMatchCriteriaSpanTagNumericValueArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[float]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DatasetConfigurationTraceDatasetMatchCriteriaSpanTagValueArgs:
    def __init__(__self__, *,
                 in_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if in_values is not None:
            pulumi.set(__self__, "in_values", in_values)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="inValues")
    def in_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "in_values")

    @in_values.setter
    def in_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "in_values", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DatasetConfigurationTraceDatasetMatchCriteriaTraceArgs:
    def __init__(__self__, *,
                 duration: Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaTraceDurationArgs']] = None,
                 error: Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaTraceErrorArgs']] = None):
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if error is not None:
            pulumi.set(__self__, "error", error)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaTraceDurationArgs']]:
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaTraceDurationArgs']]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def error(self) -> Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaTraceErrorArgs']]:
        return pulumi.get(self, "error")

    @error.setter
    def error(self, value: Optional[pulumi.Input['DatasetConfigurationTraceDatasetMatchCriteriaTraceErrorArgs']]):
        pulumi.set(self, "error", value)


@pulumi.input_type
class DatasetConfigurationTraceDatasetMatchCriteriaTraceDurationArgs:
    def __init__(__self__, *,
                 max_secs: Optional[pulumi.Input[float]] = None,
                 min_secs: Optional[pulumi.Input[float]] = None):
        if max_secs is not None:
            pulumi.set(__self__, "max_secs", max_secs)
        if min_secs is not None:
            pulumi.set(__self__, "min_secs", min_secs)

    @property
    @pulumi.getter(name="maxSecs")
    def max_secs(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max_secs")

    @max_secs.setter
    def max_secs(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_secs", value)

    @property
    @pulumi.getter(name="minSecs")
    def min_secs(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "min_secs")

    @min_secs.setter
    def min_secs(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "min_secs", value)


@pulumi.input_type
class DatasetConfigurationTraceDatasetMatchCriteriaTraceErrorArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[bool]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[bool]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DerivedLabelMetricLabelArgs:
    def __init__(__self__, *,
                 constructed_label: Optional[pulumi.Input['DerivedLabelMetricLabelConstructedLabelArgs']] = None,
                 mapping_label: Optional[pulumi.Input['DerivedLabelMetricLabelMappingLabelArgs']] = None):
        if constructed_label is not None:
            pulumi.set(__self__, "constructed_label", constructed_label)
        if mapping_label is not None:
            pulumi.set(__self__, "mapping_label", mapping_label)

    @property
    @pulumi.getter(name="constructedLabel")
    def constructed_label(self) -> Optional[pulumi.Input['DerivedLabelMetricLabelConstructedLabelArgs']]:
        return pulumi.get(self, "constructed_label")

    @constructed_label.setter
    def constructed_label(self, value: Optional[pulumi.Input['DerivedLabelMetricLabelConstructedLabelArgs']]):
        pulumi.set(self, "constructed_label", value)

    @property
    @pulumi.getter(name="mappingLabel")
    def mapping_label(self) -> Optional[pulumi.Input['DerivedLabelMetricLabelMappingLabelArgs']]:
        return pulumi.get(self, "mapping_label")

    @mapping_label.setter
    def mapping_label(self, value: Optional[pulumi.Input['DerivedLabelMetricLabelMappingLabelArgs']]):
        pulumi.set(self, "mapping_label", value)


@pulumi.input_type
class DerivedLabelMetricLabelConstructedLabelArgs:
    def __init__(__self__, *,
                 value_definitions: pulumi.Input[Sequence[pulumi.Input['DerivedLabelMetricLabelConstructedLabelValueDefinitionArgs']]]):
        pulumi.set(__self__, "value_definitions", value_definitions)

    @property
    @pulumi.getter(name="valueDefinitions")
    def value_definitions(self) -> pulumi.Input[Sequence[pulumi.Input['DerivedLabelMetricLabelConstructedLabelValueDefinitionArgs']]]:
        return pulumi.get(self, "value_definitions")

    @value_definitions.setter
    def value_definitions(self, value: pulumi.Input[Sequence[pulumi.Input['DerivedLabelMetricLabelConstructedLabelValueDefinitionArgs']]]):
        pulumi.set(self, "value_definitions", value)


@pulumi.input_type
class DerivedLabelMetricLabelConstructedLabelValueDefinitionArgs:
    def __init__(__self__, *,
                 filters: pulumi.Input[Sequence[pulumi.Input['DerivedLabelMetricLabelConstructedLabelValueDefinitionFilterArgs']]],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Input[Sequence[pulumi.Input['DerivedLabelMetricLabelConstructedLabelValueDefinitionFilterArgs']]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: pulumi.Input[Sequence[pulumi.Input['DerivedLabelMetricLabelConstructedLabelValueDefinitionFilterArgs']]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DerivedLabelMetricLabelConstructedLabelValueDefinitionFilterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value_glob: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value_glob", value_glob)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="valueGlob")
    def value_glob(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value_glob")

    @value_glob.setter
    def value_glob(self, value: pulumi.Input[str]):
        pulumi.set(self, "value_glob", value)


@pulumi.input_type
class DerivedLabelMetricLabelMappingLabelArgs:
    def __init__(__self__, *,
                 name_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['DerivedLabelMetricLabelMappingLabelNameMappingArgs']]]] = None,
                 value_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['DerivedLabelMetricLabelMappingLabelValueMappingArgs']]]] = None):
        if name_mappings is not None:
            pulumi.set(__self__, "name_mappings", name_mappings)
        if value_mappings is not None:
            pulumi.set(__self__, "value_mappings", value_mappings)

    @property
    @pulumi.getter(name="nameMappings")
    def name_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DerivedLabelMetricLabelMappingLabelNameMappingArgs']]]]:
        return pulumi.get(self, "name_mappings")

    @name_mappings.setter
    def name_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DerivedLabelMetricLabelMappingLabelNameMappingArgs']]]]):
        pulumi.set(self, "name_mappings", value)

    @property
    @pulumi.getter(name="valueMappings")
    def value_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DerivedLabelMetricLabelMappingLabelValueMappingArgs']]]]:
        return pulumi.get(self, "value_mappings")

    @value_mappings.setter
    def value_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DerivedLabelMetricLabelMappingLabelValueMappingArgs']]]]):
        pulumi.set(self, "value_mappings", value)


@pulumi.input_type
class DerivedLabelMetricLabelMappingLabelNameMappingArgs:
    def __init__(__self__, *,
                 filters: pulumi.Input[Sequence[pulumi.Input['DerivedLabelMetricLabelMappingLabelNameMappingFilterArgs']]],
                 source_label: pulumi.Input[str],
                 value_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['DerivedLabelMetricLabelMappingLabelNameMappingValueMappingArgs']]]] = None):
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "source_label", source_label)
        if value_mappings is not None:
            pulumi.set(__self__, "value_mappings", value_mappings)

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Input[Sequence[pulumi.Input['DerivedLabelMetricLabelMappingLabelNameMappingFilterArgs']]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: pulumi.Input[Sequence[pulumi.Input['DerivedLabelMetricLabelMappingLabelNameMappingFilterArgs']]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter(name="sourceLabel")
    def source_label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_label")

    @source_label.setter
    def source_label(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_label", value)

    @property
    @pulumi.getter(name="valueMappings")
    def value_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DerivedLabelMetricLabelMappingLabelNameMappingValueMappingArgs']]]]:
        return pulumi.get(self, "value_mappings")

    @value_mappings.setter
    def value_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DerivedLabelMetricLabelMappingLabelNameMappingValueMappingArgs']]]]):
        pulumi.set(self, "value_mappings", value)


@pulumi.input_type
class DerivedLabelMetricLabelMappingLabelNameMappingFilterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value_glob: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value_glob", value_glob)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="valueGlob")
    def value_glob(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value_glob")

    @value_glob.setter
    def value_glob(self, value: pulumi.Input[str]):
        pulumi.set(self, "value_glob", value)


@pulumi.input_type
class DerivedLabelMetricLabelMappingLabelNameMappingValueMappingArgs:
    def __init__(__self__, *,
                 source_value_globs: pulumi.Input[Sequence[pulumi.Input[str]]],
                 target_value: pulumi.Input[str]):
        pulumi.set(__self__, "source_value_globs", source_value_globs)
        pulumi.set(__self__, "target_value", target_value)

    @property
    @pulumi.getter(name="sourceValueGlobs")
    def source_value_globs(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "source_value_globs")

    @source_value_globs.setter
    def source_value_globs(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "source_value_globs", value)

    @property
    @pulumi.getter(name="targetValue")
    def target_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target_value")

    @target_value.setter
    def target_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_value", value)


@pulumi.input_type
class DerivedLabelMetricLabelMappingLabelValueMappingArgs:
    def __init__(__self__, *,
                 source_value_globs: pulumi.Input[Sequence[pulumi.Input[str]]],
                 target_value: pulumi.Input[str]):
        pulumi.set(__self__, "source_value_globs", source_value_globs)
        pulumi.set(__self__, "target_value", target_value)

    @property
    @pulumi.getter(name="sourceValueGlobs")
    def source_value_globs(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "source_value_globs")

    @source_value_globs.setter
    def source_value_globs(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "source_value_globs", value)

    @property
    @pulumi.getter(name="targetValue")
    def target_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target_value")

    @target_value.setter
    def target_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_value", value)


@pulumi.input_type
class DerivedLabelSpanTagArgs:
    def __init__(__self__, *,
                 name_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['DerivedLabelSpanTagNameMappingArgs']]]] = None):
        if name_mappings is not None:
            pulumi.set(__self__, "name_mappings", name_mappings)

    @property
    @pulumi.getter(name="nameMappings")
    def name_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DerivedLabelSpanTagNameMappingArgs']]]]:
        return pulumi.get(self, "name_mappings")

    @name_mappings.setter
    def name_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DerivedLabelSpanTagNameMappingArgs']]]]):
        pulumi.set(self, "name_mappings", value)


@pulumi.input_type
class DerivedLabelSpanTagNameMappingArgs:
    def __init__(__self__, *,
                 source_tag: pulumi.Input[str]):
        pulumi.set(__self__, "source_tag", source_tag)

    @property
    @pulumi.getter(name="sourceTag")
    def source_tag(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_tag")

    @source_tag.setter
    def source_tag(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_tag", value)


@pulumi.input_type
class DerivedMetricQueryArgs:
    def __init__(__self__, *,
                 query: pulumi.Input['DerivedMetricQueryQueryArgs'],
                 selector: Optional[pulumi.Input['DerivedMetricQuerySelectorArgs']] = None):
        pulumi.set(__self__, "query", query)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input['DerivedMetricQueryQueryArgs']:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input['DerivedMetricQueryQueryArgs']):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input['DerivedMetricQuerySelectorArgs']]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input['DerivedMetricQuerySelectorArgs']]):
        pulumi.set(self, "selector", value)


@pulumi.input_type
class DerivedMetricQueryQueryArgs:
    def __init__(__self__, *,
                 expr: pulumi.Input[str],
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['DerivedMetricQueryQueryVariableArgs']]]] = None):
        pulumi.set(__self__, "expr", expr)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expr(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expr")

    @expr.setter
    def expr(self, value: pulumi.Input[str]):
        pulumi.set(self, "expr", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DerivedMetricQueryQueryVariableArgs']]]]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DerivedMetricQueryQueryVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class DerivedMetricQueryQueryVariableArgs:
    def __init__(__self__, *,
                 default_selector: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "default_selector", default_selector)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="defaultSelector")
    def default_selector(self) -> pulumi.Input[str]:
        return pulumi.get(self, "default_selector")

    @default_selector.setter
    def default_selector(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_selector", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DerivedMetricQuerySelectorArgs:
    def __init__(__self__, *,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class DropRuleValueBasedDropArgs:
    def __init__(__self__, *,
                 target_drop_value: pulumi.Input[float]):
        pulumi.set(__self__, "target_drop_value", target_drop_value)

    @property
    @pulumi.getter(name="targetDropValue")
    def target_drop_value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "target_drop_value")

    @target_drop_value.setter
    def target_drop_value(self, value: pulumi.Input[float]):
        pulumi.set(self, "target_drop_value", value)


@pulumi.input_type
class GcpMetricsIntegrationMetricGroupArgs:
    def __init__(__self__, *,
                 project_id: pulumi.Input[str],
                 prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "project_id", project_id)
        if prefixes is not None:
            pulumi.set(__self__, "prefixes", prefixes)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "prefixes")

    @prefixes.setter
    def prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "prefixes", value)


@pulumi.input_type
class GcpMetricsIntegrationServiceAccountArgs:
    def __init__(__self__, *,
                 client_email: pulumi.Input[str]):
        pulumi.set(__self__, "client_email", client_email)

    @property
    @pulumi.getter(name="clientEmail")
    def client_email(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_email")

    @client_email.setter
    def client_email(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_email", value)


@pulumi.input_type
class LogAllocationConfigDatasetAllocationArgs:
    def __init__(__self__, *,
                 allocation: pulumi.Input['LogAllocationConfigDatasetAllocationAllocationArgs'],
                 dataset_id: pulumi.Input[str],
                 priorities: Optional[pulumi.Input['LogAllocationConfigDatasetAllocationPrioritiesArgs']] = None):
        pulumi.set(__self__, "allocation", allocation)
        pulumi.set(__self__, "dataset_id", dataset_id)
        if priorities is not None:
            pulumi.set(__self__, "priorities", priorities)

    @property
    @pulumi.getter
    def allocation(self) -> pulumi.Input['LogAllocationConfigDatasetAllocationAllocationArgs']:
        return pulumi.get(self, "allocation")

    @allocation.setter
    def allocation(self, value: pulumi.Input['LogAllocationConfigDatasetAllocationAllocationArgs']):
        pulumi.set(self, "allocation", value)

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dataset_id")

    @dataset_id.setter
    def dataset_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "dataset_id", value)

    @property
    @pulumi.getter
    def priorities(self) -> Optional[pulumi.Input['LogAllocationConfigDatasetAllocationPrioritiesArgs']]:
        return pulumi.get(self, "priorities")

    @priorities.setter
    def priorities(self, value: Optional[pulumi.Input['LogAllocationConfigDatasetAllocationPrioritiesArgs']]):
        pulumi.set(self, "priorities", value)


@pulumi.input_type
class LogAllocationConfigDatasetAllocationAllocationArgs:
    def __init__(__self__, *,
                 percent_of_license: pulumi.Input[float]):
        pulumi.set(__self__, "percent_of_license", percent_of_license)

    @property
    @pulumi.getter(name="percentOfLicense")
    def percent_of_license(self) -> pulumi.Input[float]:
        return pulumi.get(self, "percent_of_license")

    @percent_of_license.setter
    def percent_of_license(self, value: pulumi.Input[float]):
        pulumi.set(self, "percent_of_license", value)


@pulumi.input_type
class LogAllocationConfigDatasetAllocationPrioritiesArgs:
    def __init__(__self__, *,
                 high_priority_filters: Optional[pulumi.Input[Sequence[pulumi.Input['LogAllocationConfigDatasetAllocationPrioritiesHighPriorityFilterArgs']]]] = None,
                 low_priority_filters: Optional[pulumi.Input[Sequence[pulumi.Input['LogAllocationConfigDatasetAllocationPrioritiesLowPriorityFilterArgs']]]] = None):
        if high_priority_filters is not None:
            pulumi.set(__self__, "high_priority_filters", high_priority_filters)
        if low_priority_filters is not None:
            pulumi.set(__self__, "low_priority_filters", low_priority_filters)

    @property
    @pulumi.getter(name="highPriorityFilters")
    def high_priority_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogAllocationConfigDatasetAllocationPrioritiesHighPriorityFilterArgs']]]]:
        return pulumi.get(self, "high_priority_filters")

    @high_priority_filters.setter
    def high_priority_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogAllocationConfigDatasetAllocationPrioritiesHighPriorityFilterArgs']]]]):
        pulumi.set(self, "high_priority_filters", value)

    @property
    @pulumi.getter(name="lowPriorityFilters")
    def low_priority_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogAllocationConfigDatasetAllocationPrioritiesLowPriorityFilterArgs']]]]:
        return pulumi.get(self, "low_priority_filters")

    @low_priority_filters.setter
    def low_priority_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogAllocationConfigDatasetAllocationPrioritiesLowPriorityFilterArgs']]]]):
        pulumi.set(self, "low_priority_filters", value)


@pulumi.input_type
class LogAllocationConfigDatasetAllocationPrioritiesHighPriorityFilterArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class LogAllocationConfigDatasetAllocationPrioritiesLowPriorityFilterArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class LogAllocationConfigDefaultDatasetArgs:
    def __init__(__self__, *,
                 allocation: pulumi.Input['LogAllocationConfigDefaultDatasetAllocationArgs'],
                 priorities: Optional[pulumi.Input['LogAllocationConfigDefaultDatasetPrioritiesArgs']] = None):
        pulumi.set(__self__, "allocation", allocation)
        if priorities is not None:
            pulumi.set(__self__, "priorities", priorities)

    @property
    @pulumi.getter
    def allocation(self) -> pulumi.Input['LogAllocationConfigDefaultDatasetAllocationArgs']:
        return pulumi.get(self, "allocation")

    @allocation.setter
    def allocation(self, value: pulumi.Input['LogAllocationConfigDefaultDatasetAllocationArgs']):
        pulumi.set(self, "allocation", value)

    @property
    @pulumi.getter
    def priorities(self) -> Optional[pulumi.Input['LogAllocationConfigDefaultDatasetPrioritiesArgs']]:
        return pulumi.get(self, "priorities")

    @priorities.setter
    def priorities(self, value: Optional[pulumi.Input['LogAllocationConfigDefaultDatasetPrioritiesArgs']]):
        pulumi.set(self, "priorities", value)


@pulumi.input_type
class LogAllocationConfigDefaultDatasetAllocationArgs:
    def __init__(__self__, *,
                 percent_of_license: pulumi.Input[float]):
        pulumi.set(__self__, "percent_of_license", percent_of_license)

    @property
    @pulumi.getter(name="percentOfLicense")
    def percent_of_license(self) -> pulumi.Input[float]:
        return pulumi.get(self, "percent_of_license")

    @percent_of_license.setter
    def percent_of_license(self, value: pulumi.Input[float]):
        pulumi.set(self, "percent_of_license", value)


@pulumi.input_type
class LogAllocationConfigDefaultDatasetPrioritiesArgs:
    def __init__(__self__, *,
                 high_priority_filters: Optional[pulumi.Input[Sequence[pulumi.Input['LogAllocationConfigDefaultDatasetPrioritiesHighPriorityFilterArgs']]]] = None,
                 low_priority_filters: Optional[pulumi.Input[Sequence[pulumi.Input['LogAllocationConfigDefaultDatasetPrioritiesLowPriorityFilterArgs']]]] = None):
        if high_priority_filters is not None:
            pulumi.set(__self__, "high_priority_filters", high_priority_filters)
        if low_priority_filters is not None:
            pulumi.set(__self__, "low_priority_filters", low_priority_filters)

    @property
    @pulumi.getter(name="highPriorityFilters")
    def high_priority_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogAllocationConfigDefaultDatasetPrioritiesHighPriorityFilterArgs']]]]:
        return pulumi.get(self, "high_priority_filters")

    @high_priority_filters.setter
    def high_priority_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogAllocationConfigDefaultDatasetPrioritiesHighPriorityFilterArgs']]]]):
        pulumi.set(self, "high_priority_filters", value)

    @property
    @pulumi.getter(name="lowPriorityFilters")
    def low_priority_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogAllocationConfigDefaultDatasetPrioritiesLowPriorityFilterArgs']]]]:
        return pulumi.get(self, "low_priority_filters")

    @low_priority_filters.setter
    def low_priority_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogAllocationConfigDefaultDatasetPrioritiesLowPriorityFilterArgs']]]]):
        pulumi.set(self, "low_priority_filters", value)


@pulumi.input_type
class LogAllocationConfigDefaultDatasetPrioritiesHighPriorityFilterArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class LogAllocationConfigDefaultDatasetPrioritiesLowPriorityFilterArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class LogControlConfigRuleArgs:
    def __init__(__self__, *,
                 drop_field: Optional[pulumi.Input['LogControlConfigRuleDropFieldArgs']] = None,
                 emit_metrics: Optional[pulumi.Input['LogControlConfigRuleEmitMetricsArgs']] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 replace_field: Optional[pulumi.Input['LogControlConfigRuleReplaceFieldArgs']] = None,
                 sample: Optional[pulumi.Input['LogControlConfigRuleSampleArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if drop_field is not None:
            pulumi.set(__self__, "drop_field", drop_field)
        if emit_metrics is not None:
            pulumi.set(__self__, "emit_metrics", emit_metrics)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if replace_field is not None:
            pulumi.set(__self__, "replace_field", replace_field)
        if sample is not None:
            pulumi.set(__self__, "sample", sample)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="dropField")
    def drop_field(self) -> Optional[pulumi.Input['LogControlConfigRuleDropFieldArgs']]:
        return pulumi.get(self, "drop_field")

    @drop_field.setter
    def drop_field(self, value: Optional[pulumi.Input['LogControlConfigRuleDropFieldArgs']]):
        pulumi.set(self, "drop_field", value)

    @property
    @pulumi.getter(name="emitMetrics")
    def emit_metrics(self) -> Optional[pulumi.Input['LogControlConfigRuleEmitMetricsArgs']]:
        return pulumi.get(self, "emit_metrics")

    @emit_metrics.setter
    def emit_metrics(self, value: Optional[pulumi.Input['LogControlConfigRuleEmitMetricsArgs']]):
        pulumi.set(self, "emit_metrics", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="replaceField")
    def replace_field(self) -> Optional[pulumi.Input['LogControlConfigRuleReplaceFieldArgs']]:
        return pulumi.get(self, "replace_field")

    @replace_field.setter
    def replace_field(self, value: Optional[pulumi.Input['LogControlConfigRuleReplaceFieldArgs']]):
        pulumi.set(self, "replace_field", value)

    @property
    @pulumi.getter
    def sample(self) -> Optional[pulumi.Input['LogControlConfigRuleSampleArgs']]:
        return pulumi.get(self, "sample")

    @sample.setter
    def sample(self, value: Optional[pulumi.Input['LogControlConfigRuleSampleArgs']]):
        pulumi.set(self, "sample", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class LogControlConfigRuleDropFieldArgs:
    def __init__(__self__, *,
                 field_regex: Optional[pulumi.Input[str]] = None,
                 parent_path: Optional[pulumi.Input['LogControlConfigRuleDropFieldParentPathArgs']] = None):
        if field_regex is not None:
            pulumi.set(__self__, "field_regex", field_regex)
        if parent_path is not None:
            pulumi.set(__self__, "parent_path", parent_path)

    @property
    @pulumi.getter(name="fieldRegex")
    def field_regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_regex")

    @field_regex.setter
    def field_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_regex", value)

    @property
    @pulumi.getter(name="parentPath")
    def parent_path(self) -> Optional[pulumi.Input['LogControlConfigRuleDropFieldParentPathArgs']]:
        return pulumi.get(self, "parent_path")

    @parent_path.setter
    def parent_path(self, value: Optional[pulumi.Input['LogControlConfigRuleDropFieldParentPathArgs']]):
        pulumi.set(self, "parent_path", value)


@pulumi.input_type
class LogControlConfigRuleDropFieldParentPathArgs:
    def __init__(__self__, *,
                 selector: Optional[pulumi.Input[str]] = None):
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "selector", value)


@pulumi.input_type
class LogControlConfigRuleEmitMetricsArgs:
    def __init__(__self__, *,
                 counter: Optional[pulumi.Input['LogControlConfigRuleEmitMetricsCounterArgs']] = None,
                 drop_log: Optional[pulumi.Input[bool]] = None,
                 gauge: Optional[pulumi.Input['LogControlConfigRuleEmitMetricsGaugeArgs']] = None,
                 histogram: Optional[pulumi.Input['LogControlConfigRuleEmitMetricsHistogramArgs']] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input['LogControlConfigRuleEmitMetricsLabelArgs']]]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if counter is not None:
            pulumi.set(__self__, "counter", counter)
        if drop_log is not None:
            pulumi.set(__self__, "drop_log", drop_log)
        if gauge is not None:
            pulumi.set(__self__, "gauge", gauge)
        if histogram is not None:
            pulumi.set(__self__, "histogram", histogram)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def counter(self) -> Optional[pulumi.Input['LogControlConfigRuleEmitMetricsCounterArgs']]:
        return pulumi.get(self, "counter")

    @counter.setter
    def counter(self, value: Optional[pulumi.Input['LogControlConfigRuleEmitMetricsCounterArgs']]):
        pulumi.set(self, "counter", value)

    @property
    @pulumi.getter(name="dropLog")
    def drop_log(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "drop_log")

    @drop_log.setter
    def drop_log(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drop_log", value)

    @property
    @pulumi.getter
    def gauge(self) -> Optional[pulumi.Input['LogControlConfigRuleEmitMetricsGaugeArgs']]:
        return pulumi.get(self, "gauge")

    @gauge.setter
    def gauge(self, value: Optional[pulumi.Input['LogControlConfigRuleEmitMetricsGaugeArgs']]):
        pulumi.set(self, "gauge", value)

    @property
    @pulumi.getter
    def histogram(self) -> Optional[pulumi.Input['LogControlConfigRuleEmitMetricsHistogramArgs']]:
        return pulumi.get(self, "histogram")

    @histogram.setter
    def histogram(self, value: Optional[pulumi.Input['LogControlConfigRuleEmitMetricsHistogramArgs']]):
        pulumi.set(self, "histogram", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogControlConfigRuleEmitMetricsLabelArgs']]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogControlConfigRuleEmitMetricsLabelArgs']]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogControlConfigRuleEmitMetricsCounterArgs:
    def __init__(__self__, *,
                 value: Optional[pulumi.Input['LogControlConfigRuleEmitMetricsCounterValueArgs']] = None):
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['LogControlConfigRuleEmitMetricsCounterValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['LogControlConfigRuleEmitMetricsCounterValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class LogControlConfigRuleEmitMetricsCounterValueArgs:
    def __init__(__self__, *,
                 selector: Optional[pulumi.Input[str]] = None):
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "selector", value)


@pulumi.input_type
class LogControlConfigRuleEmitMetricsGaugeArgs:
    def __init__(__self__, *,
                 aggregation_type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['LogControlConfigRuleEmitMetricsGaugeValueArgs']] = None):
        if aggregation_type is not None:
            pulumi.set(__self__, "aggregation_type", aggregation_type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="aggregationType")
    def aggregation_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aggregation_type")

    @aggregation_type.setter
    def aggregation_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation_type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['LogControlConfigRuleEmitMetricsGaugeValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['LogControlConfigRuleEmitMetricsGaugeValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class LogControlConfigRuleEmitMetricsGaugeValueArgs:
    def __init__(__self__, *,
                 selector: Optional[pulumi.Input[str]] = None):
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "selector", value)


@pulumi.input_type
class LogControlConfigRuleEmitMetricsHistogramArgs:
    def __init__(__self__, *,
                 value: Optional[pulumi.Input['LogControlConfigRuleEmitMetricsHistogramValueArgs']] = None):
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['LogControlConfigRuleEmitMetricsHistogramValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['LogControlConfigRuleEmitMetricsHistogramValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class LogControlConfigRuleEmitMetricsHistogramValueArgs:
    def __init__(__self__, *,
                 selector: Optional[pulumi.Input[str]] = None):
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "selector", value)


@pulumi.input_type
class LogControlConfigRuleEmitMetricsLabelArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['LogControlConfigRuleEmitMetricsLabelValueArgs']] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['LogControlConfigRuleEmitMetricsLabelValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['LogControlConfigRuleEmitMetricsLabelValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class LogControlConfigRuleEmitMetricsLabelValueArgs:
    def __init__(__self__, *,
                 selector: Optional[pulumi.Input[str]] = None):
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "selector", value)


@pulumi.input_type
class LogControlConfigRuleReplaceFieldArgs:
    def __init__(__self__, *,
                 field: Optional[pulumi.Input['LogControlConfigRuleReplaceFieldFieldArgs']] = None,
                 mapped_value: Optional[pulumi.Input['LogControlConfigRuleReplaceFieldMappedValueArgs']] = None,
                 replace_all: Optional[pulumi.Input[bool]] = None,
                 replace_mode: Optional[pulumi.Input[str]] = None,
                 replace_regex: Optional[pulumi.Input[str]] = None,
                 static_value: Optional[pulumi.Input['LogControlConfigRuleReplaceFieldStaticValueArgs']] = None):
        if field is not None:
            pulumi.set(__self__, "field", field)
        if mapped_value is not None:
            pulumi.set(__self__, "mapped_value", mapped_value)
        if replace_all is not None:
            pulumi.set(__self__, "replace_all", replace_all)
        if replace_mode is not None:
            pulumi.set(__self__, "replace_mode", replace_mode)
        if replace_regex is not None:
            pulumi.set(__self__, "replace_regex", replace_regex)
        if static_value is not None:
            pulumi.set(__self__, "static_value", static_value)

    @property
    @pulumi.getter
    def field(self) -> Optional[pulumi.Input['LogControlConfigRuleReplaceFieldFieldArgs']]:
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[pulumi.Input['LogControlConfigRuleReplaceFieldFieldArgs']]):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter(name="mappedValue")
    def mapped_value(self) -> Optional[pulumi.Input['LogControlConfigRuleReplaceFieldMappedValueArgs']]:
        return pulumi.get(self, "mapped_value")

    @mapped_value.setter
    def mapped_value(self, value: Optional[pulumi.Input['LogControlConfigRuleReplaceFieldMappedValueArgs']]):
        pulumi.set(self, "mapped_value", value)

    @property
    @pulumi.getter(name="replaceAll")
    def replace_all(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "replace_all")

    @replace_all.setter
    def replace_all(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "replace_all", value)

    @property
    @pulumi.getter(name="replaceMode")
    def replace_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replace_mode")

    @replace_mode.setter
    def replace_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replace_mode", value)

    @property
    @pulumi.getter(name="replaceRegex")
    def replace_regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replace_regex")

    @replace_regex.setter
    def replace_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replace_regex", value)

    @property
    @pulumi.getter(name="staticValue")
    def static_value(self) -> Optional[pulumi.Input['LogControlConfigRuleReplaceFieldStaticValueArgs']]:
        return pulumi.get(self, "static_value")

    @static_value.setter
    def static_value(self, value: Optional[pulumi.Input['LogControlConfigRuleReplaceFieldStaticValueArgs']]):
        pulumi.set(self, "static_value", value)


@pulumi.input_type
class LogControlConfigRuleReplaceFieldFieldArgs:
    def __init__(__self__, *,
                 selector: Optional[pulumi.Input[str]] = None):
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "selector", value)


@pulumi.input_type
class LogControlConfigRuleReplaceFieldMappedValueArgs:
    def __init__(__self__, *,
                 default_value: Optional[pulumi.Input[str]] = None,
                 pairs: Optional[pulumi.Input[Sequence[pulumi.Input['LogControlConfigRuleReplaceFieldMappedValuePairArgs']]]] = None,
                 use_default: Optional[pulumi.Input[bool]] = None):
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if pairs is not None:
            pulumi.set(__self__, "pairs", pairs)
        if use_default is not None:
            pulumi.set(__self__, "use_default", use_default)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter
    def pairs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogControlConfigRuleReplaceFieldMappedValuePairArgs']]]]:
        return pulumi.get(self, "pairs")

    @pairs.setter
    def pairs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogControlConfigRuleReplaceFieldMappedValuePairArgs']]]]):
        pulumi.set(self, "pairs", value)

    @property
    @pulumi.getter(name="useDefault")
    def use_default(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_default")

    @use_default.setter
    def use_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_default", value)


@pulumi.input_type
class LogControlConfigRuleReplaceFieldMappedValuePairArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class LogControlConfigRuleReplaceFieldStaticValueArgs:
    def __init__(__self__, *,
                 value: Optional[pulumi.Input[str]] = None):
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class LogControlConfigRuleSampleArgs:
    def __init__(__self__, *,
                 rate: Optional[pulumi.Input[float]] = None):
        if rate is not None:
            pulumi.set(__self__, "rate", rate)

    @property
    @pulumi.getter
    def rate(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "rate")

    @rate.setter
    def rate(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "rate", value)


@pulumi.input_type
class LogIngestConfigFieldNormalizationArgs:
    def __init__(__self__, *,
                 custom_field_normalizations: Optional[pulumi.Input[Sequence[pulumi.Input['LogIngestConfigFieldNormalizationCustomFieldNormalizationArgs']]]] = None,
                 message: Optional[pulumi.Input['LogIngestConfigFieldNormalizationMessageArgs']] = None,
                 primary_key: Optional[pulumi.Input['LogIngestConfigFieldNormalizationPrimaryKeyArgs']] = None,
                 severity: Optional[pulumi.Input['LogIngestConfigFieldNormalizationSeverityArgs']] = None,
                 timestamp: Optional[pulumi.Input['LogIngestConfigFieldNormalizationTimestampArgs']] = None):
        if custom_field_normalizations is not None:
            pulumi.set(__self__, "custom_field_normalizations", custom_field_normalizations)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if primary_key is not None:
            pulumi.set(__self__, "primary_key", primary_key)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter(name="customFieldNormalizations")
    def custom_field_normalizations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogIngestConfigFieldNormalizationCustomFieldNormalizationArgs']]]]:
        return pulumi.get(self, "custom_field_normalizations")

    @custom_field_normalizations.setter
    def custom_field_normalizations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogIngestConfigFieldNormalizationCustomFieldNormalizationArgs']]]]):
        pulumi.set(self, "custom_field_normalizations", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input['LogIngestConfigFieldNormalizationMessageArgs']]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input['LogIngestConfigFieldNormalizationMessageArgs']]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="primaryKey")
    def primary_key(self) -> Optional[pulumi.Input['LogIngestConfigFieldNormalizationPrimaryKeyArgs']]:
        return pulumi.get(self, "primary_key")

    @primary_key.setter
    def primary_key(self, value: Optional[pulumi.Input['LogIngestConfigFieldNormalizationPrimaryKeyArgs']]):
        pulumi.set(self, "primary_key", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input['LogIngestConfigFieldNormalizationSeverityArgs']]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input['LogIngestConfigFieldNormalizationSeverityArgs']]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[pulumi.Input['LogIngestConfigFieldNormalizationTimestampArgs']]:
        return pulumi.get(self, "timestamp")

    @timestamp.setter
    def timestamp(self, value: Optional[pulumi.Input['LogIngestConfigFieldNormalizationTimestampArgs']]):
        pulumi.set(self, "timestamp", value)


@pulumi.input_type
class LogIngestConfigFieldNormalizationCustomFieldNormalizationArgs:
    def __init__(__self__, *,
                 normalization: Optional[pulumi.Input['LogIngestConfigFieldNormalizationCustomFieldNormalizationNormalizationArgs']] = None,
                 target: Optional[pulumi.Input[str]] = None):
        if normalization is not None:
            pulumi.set(__self__, "normalization", normalization)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def normalization(self) -> Optional[pulumi.Input['LogIngestConfigFieldNormalizationCustomFieldNormalizationNormalizationArgs']]:
        return pulumi.get(self, "normalization")

    @normalization.setter
    def normalization(self, value: Optional[pulumi.Input['LogIngestConfigFieldNormalizationCustomFieldNormalizationNormalizationArgs']]):
        pulumi.set(self, "normalization", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class LogIngestConfigFieldNormalizationCustomFieldNormalizationNormalizationArgs:
    def __init__(__self__, *,
                 default_value: Optional[pulumi.Input[str]] = None,
                 sanitize_patterns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input['LogIngestConfigFieldNormalizationCustomFieldNormalizationNormalizationSourceArgs']]]] = None,
                 value_map: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if sanitize_patterns is not None:
            pulumi.set(__self__, "sanitize_patterns", sanitize_patterns)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if value_map is not None:
            pulumi.set(__self__, "value_map", value_map)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter(name="sanitizePatterns")
    def sanitize_patterns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "sanitize_patterns")

    @sanitize_patterns.setter
    def sanitize_patterns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sanitize_patterns", value)

    @property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogIngestConfigFieldNormalizationCustomFieldNormalizationNormalizationSourceArgs']]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogIngestConfigFieldNormalizationCustomFieldNormalizationNormalizationSourceArgs']]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="valueMap")
    def value_map(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "value_map")

    @value_map.setter
    def value_map(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "value_map", value)


@pulumi.input_type
class LogIngestConfigFieldNormalizationCustomFieldNormalizationNormalizationSourceArgs:
    def __init__(__self__, *,
                 selector: pulumi.Input[str]):
        pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter
    def selector(self) -> pulumi.Input[str]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: pulumi.Input[str]):
        pulumi.set(self, "selector", value)


@pulumi.input_type
class LogIngestConfigFieldNormalizationMessageArgs:
    def __init__(__self__, *,
                 default_value: Optional[pulumi.Input[str]] = None,
                 sanitize_patterns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input['LogIngestConfigFieldNormalizationMessageSourceArgs']]]] = None,
                 value_map: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if sanitize_patterns is not None:
            pulumi.set(__self__, "sanitize_patterns", sanitize_patterns)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if value_map is not None:
            pulumi.set(__self__, "value_map", value_map)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter(name="sanitizePatterns")
    def sanitize_patterns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "sanitize_patterns")

    @sanitize_patterns.setter
    def sanitize_patterns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sanitize_patterns", value)

    @property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogIngestConfigFieldNormalizationMessageSourceArgs']]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogIngestConfigFieldNormalizationMessageSourceArgs']]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="valueMap")
    def value_map(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "value_map")

    @value_map.setter
    def value_map(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "value_map", value)


@pulumi.input_type
class LogIngestConfigFieldNormalizationMessageSourceArgs:
    def __init__(__self__, *,
                 selector: pulumi.Input[str]):
        pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter
    def selector(self) -> pulumi.Input[str]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: pulumi.Input[str]):
        pulumi.set(self, "selector", value)


@pulumi.input_type
class LogIngestConfigFieldNormalizationPrimaryKeyArgs:
    def __init__(__self__, *,
                 normalization: Optional[pulumi.Input['LogIngestConfigFieldNormalizationPrimaryKeyNormalizationArgs']] = None,
                 target: Optional[pulumi.Input[str]] = None):
        if normalization is not None:
            pulumi.set(__self__, "normalization", normalization)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def normalization(self) -> Optional[pulumi.Input['LogIngestConfigFieldNormalizationPrimaryKeyNormalizationArgs']]:
        return pulumi.get(self, "normalization")

    @normalization.setter
    def normalization(self, value: Optional[pulumi.Input['LogIngestConfigFieldNormalizationPrimaryKeyNormalizationArgs']]):
        pulumi.set(self, "normalization", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class LogIngestConfigFieldNormalizationPrimaryKeyNormalizationArgs:
    def __init__(__self__, *,
                 default_value: Optional[pulumi.Input[str]] = None,
                 sanitize_patterns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input['LogIngestConfigFieldNormalizationPrimaryKeyNormalizationSourceArgs']]]] = None,
                 value_map: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if sanitize_patterns is not None:
            pulumi.set(__self__, "sanitize_patterns", sanitize_patterns)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if value_map is not None:
            pulumi.set(__self__, "value_map", value_map)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter(name="sanitizePatterns")
    def sanitize_patterns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "sanitize_patterns")

    @sanitize_patterns.setter
    def sanitize_patterns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sanitize_patterns", value)

    @property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogIngestConfigFieldNormalizationPrimaryKeyNormalizationSourceArgs']]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogIngestConfigFieldNormalizationPrimaryKeyNormalizationSourceArgs']]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="valueMap")
    def value_map(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "value_map")

    @value_map.setter
    def value_map(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "value_map", value)


@pulumi.input_type
class LogIngestConfigFieldNormalizationPrimaryKeyNormalizationSourceArgs:
    def __init__(__self__, *,
                 selector: pulumi.Input[str]):
        pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter
    def selector(self) -> pulumi.Input[str]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: pulumi.Input[str]):
        pulumi.set(self, "selector", value)


@pulumi.input_type
class LogIngestConfigFieldNormalizationSeverityArgs:
    def __init__(__self__, *,
                 default_value: Optional[pulumi.Input[str]] = None,
                 sanitize_patterns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input['LogIngestConfigFieldNormalizationSeveritySourceArgs']]]] = None,
                 value_map: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if sanitize_patterns is not None:
            pulumi.set(__self__, "sanitize_patterns", sanitize_patterns)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if value_map is not None:
            pulumi.set(__self__, "value_map", value_map)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter(name="sanitizePatterns")
    def sanitize_patterns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "sanitize_patterns")

    @sanitize_patterns.setter
    def sanitize_patterns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sanitize_patterns", value)

    @property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogIngestConfigFieldNormalizationSeveritySourceArgs']]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogIngestConfigFieldNormalizationSeveritySourceArgs']]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="valueMap")
    def value_map(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "value_map")

    @value_map.setter
    def value_map(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "value_map", value)


@pulumi.input_type
class LogIngestConfigFieldNormalizationSeveritySourceArgs:
    def __init__(__self__, *,
                 selector: pulumi.Input[str]):
        pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter
    def selector(self) -> pulumi.Input[str]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: pulumi.Input[str]):
        pulumi.set(self, "selector", value)


@pulumi.input_type
class LogIngestConfigFieldNormalizationTimestampArgs:
    def __init__(__self__, *,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input['LogIngestConfigFieldNormalizationTimestampSourceArgs']]]] = None):
        if sources is not None:
            pulumi.set(__self__, "sources", sources)

    @property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogIngestConfigFieldNormalizationTimestampSourceArgs']]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogIngestConfigFieldNormalizationTimestampSourceArgs']]]]):
        pulumi.set(self, "sources", value)


@pulumi.input_type
class LogIngestConfigFieldNormalizationTimestampSourceArgs:
    def __init__(__self__, *,
                 selector: pulumi.Input[str]):
        pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter
    def selector(self) -> pulumi.Input[str]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: pulumi.Input[str]):
        pulumi.set(self, "selector", value)


@pulumi.input_type
class LogIngestConfigFieldParserArgs:
    def __init__(__self__, *,
                 parser: pulumi.Input['LogIngestConfigFieldParserParserArgs'],
                 source: pulumi.Input['LogIngestConfigFieldParserSourceArgs'],
                 destination: Optional[pulumi.Input['LogIngestConfigFieldParserDestinationArgs']] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "parser", parser)
        pulumi.set(__self__, "source", source)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def parser(self) -> pulumi.Input['LogIngestConfigFieldParserParserArgs']:
        return pulumi.get(self, "parser")

    @parser.setter
    def parser(self, value: pulumi.Input['LogIngestConfigFieldParserParserArgs']):
        pulumi.set(self, "parser", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input['LogIngestConfigFieldParserSourceArgs']:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input['LogIngestConfigFieldParserSourceArgs']):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def destination(self) -> Optional[pulumi.Input['LogIngestConfigFieldParserDestinationArgs']]:
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: Optional[pulumi.Input['LogIngestConfigFieldParserDestinationArgs']]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class LogIngestConfigFieldParserDestinationArgs:
    def __init__(__self__, *,
                 selector: pulumi.Input[str]):
        pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter
    def selector(self) -> pulumi.Input[str]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: pulumi.Input[str]):
        pulumi.set(self, "selector", value)


@pulumi.input_type
class LogIngestConfigFieldParserParserArgs:
    def __init__(__self__, *,
                 parser_type: pulumi.Input[str],
                 key_value_parser: Optional[pulumi.Input['LogIngestConfigFieldParserParserKeyValueParserArgs']] = None,
                 regex_parser: Optional[pulumi.Input['LogIngestConfigFieldParserParserRegexParserArgs']] = None):
        pulumi.set(__self__, "parser_type", parser_type)
        if key_value_parser is not None:
            pulumi.set(__self__, "key_value_parser", key_value_parser)
        if regex_parser is not None:
            pulumi.set(__self__, "regex_parser", regex_parser)

    @property
    @pulumi.getter(name="parserType")
    def parser_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parser_type")

    @parser_type.setter
    def parser_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "parser_type", value)

    @property
    @pulumi.getter(name="keyValueParser")
    def key_value_parser(self) -> Optional[pulumi.Input['LogIngestConfigFieldParserParserKeyValueParserArgs']]:
        return pulumi.get(self, "key_value_parser")

    @key_value_parser.setter
    def key_value_parser(self, value: Optional[pulumi.Input['LogIngestConfigFieldParserParserKeyValueParserArgs']]):
        pulumi.set(self, "key_value_parser", value)

    @property
    @pulumi.getter(name="regexParser")
    def regex_parser(self) -> Optional[pulumi.Input['LogIngestConfigFieldParserParserRegexParserArgs']]:
        return pulumi.get(self, "regex_parser")

    @regex_parser.setter
    def regex_parser(self, value: Optional[pulumi.Input['LogIngestConfigFieldParserParserRegexParserArgs']]):
        pulumi.set(self, "regex_parser", value)


@pulumi.input_type
class LogIngestConfigFieldParserParserKeyValueParserArgs:
    def __init__(__self__, *,
                 delimiter: pulumi.Input[str],
                 pair_separator: pulumi.Input[str],
                 trim_set: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "delimiter", delimiter)
        pulumi.set(__self__, "pair_separator", pair_separator)
        if trim_set is not None:
            pulumi.set(__self__, "trim_set", trim_set)

    @property
    @pulumi.getter
    def delimiter(self) -> pulumi.Input[str]:
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: pulumi.Input[str]):
        pulumi.set(self, "delimiter", value)

    @property
    @pulumi.getter(name="pairSeparator")
    def pair_separator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "pair_separator")

    @pair_separator.setter
    def pair_separator(self, value: pulumi.Input[str]):
        pulumi.set(self, "pair_separator", value)

    @property
    @pulumi.getter(name="trimSet")
    def trim_set(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trim_set")

    @trim_set.setter
    def trim_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trim_set", value)


@pulumi.input_type
class LogIngestConfigFieldParserParserRegexParserArgs:
    def __init__(__self__, *,
                 regex: pulumi.Input[str]):
        pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def regex(self) -> pulumi.Input[str]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: pulumi.Input[str]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class LogIngestConfigFieldParserSourceArgs:
    def __init__(__self__, *,
                 selector: pulumi.Input[str]):
        pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter
    def selector(self) -> pulumi.Input[str]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: pulumi.Input[str]):
        pulumi.set(self, "selector", value)


@pulumi.input_type
class LogIngestConfigPlaintextParserArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parser: pulumi.Input['LogIngestConfigPlaintextParserParserArgs'],
                 keep_original: Optional[pulumi.Input[bool]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parser", parser)
        if keep_original is not None:
            pulumi.set(__self__, "keep_original", keep_original)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parser(self) -> pulumi.Input['LogIngestConfigPlaintextParserParserArgs']:
        return pulumi.get(self, "parser")

    @parser.setter
    def parser(self, value: pulumi.Input['LogIngestConfigPlaintextParserParserArgs']):
        pulumi.set(self, "parser", value)

    @property
    @pulumi.getter(name="keepOriginal")
    def keep_original(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "keep_original")

    @keep_original.setter
    def keep_original(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "keep_original", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class LogIngestConfigPlaintextParserParserArgs:
    def __init__(__self__, *,
                 parser_type: pulumi.Input[str],
                 key_value_parser: Optional[pulumi.Input['LogIngestConfigPlaintextParserParserKeyValueParserArgs']] = None,
                 regex_parser: Optional[pulumi.Input['LogIngestConfigPlaintextParserParserRegexParserArgs']] = None):
        pulumi.set(__self__, "parser_type", parser_type)
        if key_value_parser is not None:
            pulumi.set(__self__, "key_value_parser", key_value_parser)
        if regex_parser is not None:
            pulumi.set(__self__, "regex_parser", regex_parser)

    @property
    @pulumi.getter(name="parserType")
    def parser_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parser_type")

    @parser_type.setter
    def parser_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "parser_type", value)

    @property
    @pulumi.getter(name="keyValueParser")
    def key_value_parser(self) -> Optional[pulumi.Input['LogIngestConfigPlaintextParserParserKeyValueParserArgs']]:
        return pulumi.get(self, "key_value_parser")

    @key_value_parser.setter
    def key_value_parser(self, value: Optional[pulumi.Input['LogIngestConfigPlaintextParserParserKeyValueParserArgs']]):
        pulumi.set(self, "key_value_parser", value)

    @property
    @pulumi.getter(name="regexParser")
    def regex_parser(self) -> Optional[pulumi.Input['LogIngestConfigPlaintextParserParserRegexParserArgs']]:
        return pulumi.get(self, "regex_parser")

    @regex_parser.setter
    def regex_parser(self, value: Optional[pulumi.Input['LogIngestConfigPlaintextParserParserRegexParserArgs']]):
        pulumi.set(self, "regex_parser", value)


@pulumi.input_type
class LogIngestConfigPlaintextParserParserKeyValueParserArgs:
    def __init__(__self__, *,
                 delimiter: pulumi.Input[str],
                 pair_separator: pulumi.Input[str],
                 trim_set: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "delimiter", delimiter)
        pulumi.set(__self__, "pair_separator", pair_separator)
        if trim_set is not None:
            pulumi.set(__self__, "trim_set", trim_set)

    @property
    @pulumi.getter
    def delimiter(self) -> pulumi.Input[str]:
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: pulumi.Input[str]):
        pulumi.set(self, "delimiter", value)

    @property
    @pulumi.getter(name="pairSeparator")
    def pair_separator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "pair_separator")

    @pair_separator.setter
    def pair_separator(self, value: pulumi.Input[str]):
        pulumi.set(self, "pair_separator", value)

    @property
    @pulumi.getter(name="trimSet")
    def trim_set(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trim_set")

    @trim_set.setter
    def trim_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trim_set", value)


@pulumi.input_type
class LogIngestConfigPlaintextParserParserRegexParserArgs:
    def __init__(__self__, *,
                 regex: pulumi.Input[str]):
        pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def regex(self) -> pulumi.Input[str]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: pulumi.Input[str]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class LogscaleActionEmailActionArgs:
    def __init__(__self__, *,
                 recipients: pulumi.Input[Sequence[pulumi.Input[str]]],
                 attach_csv: Optional[pulumi.Input[bool]] = None,
                 body_template: Optional[pulumi.Input[str]] = None,
                 subject_template: Optional[pulumi.Input[str]] = None,
                 use_proxy: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "recipients", recipients)
        if attach_csv is not None:
            pulumi.set(__self__, "attach_csv", attach_csv)
        if body_template is not None:
            pulumi.set(__self__, "body_template", body_template)
        if subject_template is not None:
            pulumi.set(__self__, "subject_template", subject_template)
        if use_proxy is not None:
            pulumi.set(__self__, "use_proxy", use_proxy)

    @property
    @pulumi.getter
    def recipients(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "recipients")

    @recipients.setter
    def recipients(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "recipients", value)

    @property
    @pulumi.getter(name="attachCsv")
    def attach_csv(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "attach_csv")

    @attach_csv.setter
    def attach_csv(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "attach_csv", value)

    @property
    @pulumi.getter(name="bodyTemplate")
    def body_template(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "body_template")

    @body_template.setter
    def body_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body_template", value)

    @property
    @pulumi.getter(name="subjectTemplate")
    def subject_template(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subject_template")

    @subject_template.setter
    def subject_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject_template", value)

    @property
    @pulumi.getter(name="useProxy")
    def use_proxy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_proxy")

    @use_proxy.setter
    def use_proxy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_proxy", value)


@pulumi.input_type
class LogscaleActionHumioActionArgs:
    def __init__(__self__, *,
                 ingest_token: pulumi.Input[str]):
        pulumi.set(__self__, "ingest_token", ingest_token)

    @property
    @pulumi.getter(name="ingestToken")
    def ingest_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ingest_token")

    @ingest_token.setter
    def ingest_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "ingest_token", value)


@pulumi.input_type
class LogscaleActionOpsGenieActionArgs:
    def __init__(__self__, *,
                 api_url: pulumi.Input[str],
                 ops_genie_key: pulumi.Input[str],
                 use_proxy: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "api_url", api_url)
        pulumi.set(__self__, "ops_genie_key", ops_genie_key)
        if use_proxy is not None:
            pulumi.set(__self__, "use_proxy", use_proxy)

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_url")

    @api_url.setter
    def api_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_url", value)

    @property
    @pulumi.getter(name="opsGenieKey")
    def ops_genie_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ops_genie_key")

    @ops_genie_key.setter
    def ops_genie_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ops_genie_key", value)

    @property
    @pulumi.getter(name="useProxy")
    def use_proxy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_proxy")

    @use_proxy.setter
    def use_proxy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_proxy", value)


@pulumi.input_type
class LogscaleActionPagerDutyActionArgs:
    def __init__(__self__, *,
                 routing_key: pulumi.Input[str],
                 severity: pulumi.Input[str],
                 use_proxy: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "routing_key", routing_key)
        pulumi.set(__self__, "severity", severity)
        if use_proxy is not None:
            pulumi.set(__self__, "use_proxy", use_proxy)

    @property
    @pulumi.getter(name="routingKey")
    def routing_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "routing_key")

    @routing_key.setter
    def routing_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "routing_key", value)

    @property
    @pulumi.getter
    def severity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: pulumi.Input[str]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter(name="useProxy")
    def use_proxy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_proxy")

    @use_proxy.setter
    def use_proxy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_proxy", value)


@pulumi.input_type
class LogscaleActionSlackActionArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 use_proxy: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "url", url)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if use_proxy is not None:
            pulumi.set(__self__, "use_proxy", use_proxy)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "fields", value)

    @property
    @pulumi.getter(name="useProxy")
    def use_proxy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_proxy")

    @use_proxy.setter
    def use_proxy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_proxy", value)


@pulumi.input_type
class LogscaleActionSlackPostMessageActionArgs:
    def __init__(__self__, *,
                 api_token: pulumi.Input[str],
                 channels: pulumi.Input[Sequence[pulumi.Input[str]]],
                 fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 use_proxy: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "channels", channels)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if use_proxy is not None:
            pulumi.set(__self__, "use_proxy", use_proxy)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter
    def channels(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "fields", value)

    @property
    @pulumi.getter(name="useProxy")
    def use_proxy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_proxy")

    @use_proxy.setter
    def use_proxy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_proxy", value)


@pulumi.input_type
class LogscaleActionUploadFileActionArgs:
    def __init__(__self__, *,
                 file_name: pulumi.Input[str]):
        pulumi.set(__self__, "file_name", file_name)

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "file_name")

    @file_name.setter
    def file_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "file_name", value)


@pulumi.input_type
class LogscaleActionVictorOpsActionArgs:
    def __init__(__self__, *,
                 message_type: pulumi.Input[str],
                 notify_url: pulumi.Input[str],
                 use_proxy: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "message_type", message_type)
        pulumi.set(__self__, "notify_url", notify_url)
        if use_proxy is not None:
            pulumi.set(__self__, "use_proxy", use_proxy)

    @property
    @pulumi.getter(name="messageType")
    def message_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "message_type")

    @message_type.setter
    def message_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "message_type", value)

    @property
    @pulumi.getter(name="notifyUrl")
    def notify_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "notify_url")

    @notify_url.setter
    def notify_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "notify_url", value)

    @property
    @pulumi.getter(name="useProxy")
    def use_proxy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_proxy")

    @use_proxy.setter
    def use_proxy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_proxy", value)


@pulumi.input_type
class LogscaleActionWebhookActionArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str],
                 url: pulumi.Input[str],
                 body_template: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 ignore_ssl: Optional[pulumi.Input[bool]] = None,
                 use_proxy: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "url", url)
        if body_template is not None:
            pulumi.set(__self__, "body_template", body_template)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if ignore_ssl is not None:
            pulumi.set(__self__, "ignore_ssl", ignore_ssl)
        if use_proxy is not None:
            pulumi.set(__self__, "use_proxy", use_proxy)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="bodyTemplate")
    def body_template(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "body_template")

    @body_template.setter
    def body_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body_template", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="ignoreSsl")
    def ignore_ssl(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ignore_ssl")

    @ignore_ssl.setter
    def ignore_ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_ssl", value)

    @property
    @pulumi.getter(name="useProxy")
    def use_proxy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_proxy")

    @use_proxy.setter
    def use_proxy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_proxy", value)


@pulumi.input_type
class MappingRuleStoragePolicyArgs:
    def __init__(__self__, *,
                 resolution: pulumi.Input[str],
                 retention: pulumi.Input[str]):
        pulumi.set(__self__, "resolution", resolution)
        pulumi.set(__self__, "retention", retention)

    @property
    @pulumi.getter
    def resolution(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resolution")

    @resolution.setter
    def resolution(self, value: pulumi.Input[str]):
        pulumi.set(self, "resolution", value)

    @property
    @pulumi.getter
    def retention(self) -> pulumi.Input[str]:
        return pulumi.get(self, "retention")

    @retention.setter
    def retention(self, value: pulumi.Input[str]):
        pulumi.set(self, "retention", value)


@pulumi.input_type
class MonitorQueryArgs:
    def __init__(__self__, *,
                 graphite_expr: Optional[pulumi.Input[str]] = None,
                 logging_expr: Optional[pulumi.Input[str]] = None,
                 prometheus_expr: Optional[pulumi.Input[str]] = None):
        if graphite_expr is not None:
            pulumi.set(__self__, "graphite_expr", graphite_expr)
        if logging_expr is not None:
            pulumi.set(__self__, "logging_expr", logging_expr)
        if prometheus_expr is not None:
            pulumi.set(__self__, "prometheus_expr", prometheus_expr)

    @property
    @pulumi.getter(name="graphiteExpr")
    def graphite_expr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "graphite_expr")

    @graphite_expr.setter
    def graphite_expr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "graphite_expr", value)

    @property
    @pulumi.getter(name="loggingExpr")
    def logging_expr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "logging_expr")

    @logging_expr.setter
    def logging_expr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logging_expr", value)

    @property
    @pulumi.getter(name="prometheusExpr")
    def prometheus_expr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus_expr")

    @prometheus_expr.setter
    def prometheus_expr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus_expr", value)


@pulumi.input_type
class MonitorScheduleArgs:
    def __init__(__self__, *,
                 timezone: pulumi.Input[str],
                 ranges: Optional[pulumi.Input[Sequence[pulumi.Input['MonitorScheduleRangeArgs']]]] = None):
        pulumi.set(__self__, "timezone", timezone)
        if ranges is not None:
            pulumi.set(__self__, "ranges", ranges)

    @property
    @pulumi.getter
    def timezone(self) -> pulumi.Input[str]:
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: pulumi.Input[str]):
        pulumi.set(self, "timezone", value)

    @property
    @pulumi.getter
    def ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MonitorScheduleRangeArgs']]]]:
        return pulumi.get(self, "ranges")

    @ranges.setter
    def ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MonitorScheduleRangeArgs']]]]):
        pulumi.set(self, "ranges", value)


@pulumi.input_type
class MonitorScheduleRangeArgs:
    def __init__(__self__, *,
                 day: pulumi.Input[str],
                 end: pulumi.Input[str],
                 start: pulumi.Input[str]):
        pulumi.set(__self__, "day", day)
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def day(self) -> pulumi.Input[str]:
        return pulumi.get(self, "day")

    @day.setter
    def day(self, value: pulumi.Input[str]):
        pulumi.set(self, "day", value)

    @property
    @pulumi.getter
    def end(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: pulumi.Input[str]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: pulumi.Input[str]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class MonitorSeriesConditionsArgs:
    def __init__(__self__, *,
                 conditions: pulumi.Input[Sequence[pulumi.Input['MonitorSeriesConditionsConditionArgs']]],
                 overrides: Optional[pulumi.Input[Sequence[pulumi.Input['MonitorSeriesConditionsOverrideArgs']]]] = None):
        pulumi.set(__self__, "conditions", conditions)
        if overrides is not None:
            pulumi.set(__self__, "overrides", overrides)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['MonitorSeriesConditionsConditionArgs']]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['MonitorSeriesConditionsConditionArgs']]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MonitorSeriesConditionsOverrideArgs']]]]:
        return pulumi.get(self, "overrides")

    @overrides.setter
    def overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MonitorSeriesConditionsOverrideArgs']]]]):
        pulumi.set(self, "overrides", value)


@pulumi.input_type
class MonitorSeriesConditionsConditionArgs:
    def __init__(__self__, *,
                 op: pulumi.Input[str],
                 severity: pulumi.Input[str],
                 resolve_sustain: Optional[pulumi.Input[str]] = None,
                 sustain: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[float]] = None):
        pulumi.set(__self__, "op", op)
        pulumi.set(__self__, "severity", severity)
        if resolve_sustain is not None:
            pulumi.set(__self__, "resolve_sustain", resolve_sustain)
        if sustain is not None:
            pulumi.set(__self__, "sustain", sustain)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def op(self) -> pulumi.Input[str]:
        return pulumi.get(self, "op")

    @op.setter
    def op(self, value: pulumi.Input[str]):
        pulumi.set(self, "op", value)

    @property
    @pulumi.getter
    def severity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: pulumi.Input[str]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter(name="resolveSustain")
    def resolve_sustain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resolve_sustain")

    @resolve_sustain.setter
    def resolve_sustain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolve_sustain", value)

    @property
    @pulumi.getter
    def sustain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sustain")

    @sustain.setter
    def sustain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sustain", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class MonitorSeriesConditionsOverrideArgs:
    def __init__(__self__, *,
                 conditions: pulumi.Input[Sequence[pulumi.Input['MonitorSeriesConditionsOverrideConditionArgs']]],
                 label_matchers: pulumi.Input[Sequence[pulumi.Input['MonitorSeriesConditionsOverrideLabelMatcherArgs']]]):
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "label_matchers", label_matchers)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['MonitorSeriesConditionsOverrideConditionArgs']]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['MonitorSeriesConditionsOverrideConditionArgs']]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="labelMatchers")
    def label_matchers(self) -> pulumi.Input[Sequence[pulumi.Input['MonitorSeriesConditionsOverrideLabelMatcherArgs']]]:
        return pulumi.get(self, "label_matchers")

    @label_matchers.setter
    def label_matchers(self, value: pulumi.Input[Sequence[pulumi.Input['MonitorSeriesConditionsOverrideLabelMatcherArgs']]]):
        pulumi.set(self, "label_matchers", value)


@pulumi.input_type
class MonitorSeriesConditionsOverrideConditionArgs:
    def __init__(__self__, *,
                 op: pulumi.Input[str],
                 severity: pulumi.Input[str],
                 resolve_sustain: Optional[pulumi.Input[str]] = None,
                 sustain: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[float]] = None):
        pulumi.set(__self__, "op", op)
        pulumi.set(__self__, "severity", severity)
        if resolve_sustain is not None:
            pulumi.set(__self__, "resolve_sustain", resolve_sustain)
        if sustain is not None:
            pulumi.set(__self__, "sustain", sustain)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def op(self) -> pulumi.Input[str]:
        return pulumi.get(self, "op")

    @op.setter
    def op(self, value: pulumi.Input[str]):
        pulumi.set(self, "op", value)

    @property
    @pulumi.getter
    def severity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: pulumi.Input[str]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter(name="resolveSustain")
    def resolve_sustain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resolve_sustain")

    @resolve_sustain.setter
    def resolve_sustain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolve_sustain", value)

    @property
    @pulumi.getter
    def sustain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sustain")

    @sustain.setter
    def sustain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sustain", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class MonitorSeriesConditionsOverrideLabelMatcherArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class MonitorSignalGroupingArgs:
    def __init__(__self__, *,
                 label_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 signal_per_series: Optional[pulumi.Input[bool]] = None):
        if label_names is not None:
            pulumi.set(__self__, "label_names", label_names)
        if signal_per_series is not None:
            pulumi.set(__self__, "signal_per_series", signal_per_series)

    @property
    @pulumi.getter(name="labelNames")
    def label_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "label_names")

    @label_names.setter
    def label_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "label_names", value)

    @property
    @pulumi.getter(name="signalPerSeries")
    def signal_per_series(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "signal_per_series")

    @signal_per_series.setter
    def signal_per_series(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "signal_per_series", value)


@pulumi.input_type
class NotificationPolicyOverrideArgs:
    def __init__(__self__, *,
                 alert_label_matchers: pulumi.Input[Sequence[pulumi.Input['NotificationPolicyOverrideAlertLabelMatcherArgs']]],
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input['NotificationPolicyOverrideRouteArgs']]]] = None):
        pulumi.set(__self__, "alert_label_matchers", alert_label_matchers)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)

    @property
    @pulumi.getter(name="alertLabelMatchers")
    def alert_label_matchers(self) -> pulumi.Input[Sequence[pulumi.Input['NotificationPolicyOverrideAlertLabelMatcherArgs']]]:
        return pulumi.get(self, "alert_label_matchers")

    @alert_label_matchers.setter
    def alert_label_matchers(self, value: pulumi.Input[Sequence[pulumi.Input['NotificationPolicyOverrideAlertLabelMatcherArgs']]]):
        pulumi.set(self, "alert_label_matchers", value)

    @property
    @pulumi.getter
    def routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NotificationPolicyOverrideRouteArgs']]]]:
        return pulumi.get(self, "routes")

    @routes.setter
    def routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NotificationPolicyOverrideRouteArgs']]]]):
        pulumi.set(self, "routes", value)


@pulumi.input_type
class NotificationPolicyOverrideAlertLabelMatcherArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class NotificationPolicyOverrideRouteArgs:
    def __init__(__self__, *,
                 severity: pulumi.Input[str],
                 group_by: Optional[pulumi.Input['NotificationPolicyOverrideRouteGroupByArgs']] = None,
                 notifiers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 repeat_interval: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "severity", severity)
        if group_by is not None:
            pulumi.set(__self__, "group_by", group_by)
        if notifiers is not None:
            pulumi.set(__self__, "notifiers", notifiers)
        if repeat_interval is not None:
            pulumi.set(__self__, "repeat_interval", repeat_interval)

    @property
    @pulumi.getter
    def severity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: pulumi.Input[str]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter(name="groupBy")
    def group_by(self) -> Optional[pulumi.Input['NotificationPolicyOverrideRouteGroupByArgs']]:
        return pulumi.get(self, "group_by")

    @group_by.setter
    def group_by(self, value: Optional[pulumi.Input['NotificationPolicyOverrideRouteGroupByArgs']]):
        pulumi.set(self, "group_by", value)

    @property
    @pulumi.getter
    def notifiers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "notifiers")

    @notifiers.setter
    def notifiers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "notifiers", value)

    @property
    @pulumi.getter(name="repeatInterval")
    def repeat_interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "repeat_interval")

    @repeat_interval.setter
    def repeat_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repeat_interval", value)


@pulumi.input_type
class NotificationPolicyOverrideRouteGroupByArgs:
    def __init__(__self__, *,
                 label_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if label_names is not None:
            pulumi.set(__self__, "label_names", label_names)

    @property
    @pulumi.getter(name="labelNames")
    def label_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "label_names")

    @label_names.setter
    def label_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "label_names", value)


@pulumi.input_type
class NotificationPolicyRouteArgs:
    def __init__(__self__, *,
                 severity: pulumi.Input[str],
                 group_by: Optional[pulumi.Input['NotificationPolicyRouteGroupByArgs']] = None,
                 notifiers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 repeat_interval: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "severity", severity)
        if group_by is not None:
            pulumi.set(__self__, "group_by", group_by)
        if notifiers is not None:
            pulumi.set(__self__, "notifiers", notifiers)
        if repeat_interval is not None:
            pulumi.set(__self__, "repeat_interval", repeat_interval)

    @property
    @pulumi.getter
    def severity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: pulumi.Input[str]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter(name="groupBy")
    def group_by(self) -> Optional[pulumi.Input['NotificationPolicyRouteGroupByArgs']]:
        return pulumi.get(self, "group_by")

    @group_by.setter
    def group_by(self, value: Optional[pulumi.Input['NotificationPolicyRouteGroupByArgs']]):
        pulumi.set(self, "group_by", value)

    @property
    @pulumi.getter
    def notifiers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "notifiers")

    @notifiers.setter
    def notifiers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "notifiers", value)

    @property
    @pulumi.getter(name="repeatInterval")
    def repeat_interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "repeat_interval")

    @repeat_interval.setter
    def repeat_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repeat_interval", value)


@pulumi.input_type
class NotificationPolicyRouteGroupByArgs:
    def __init__(__self__, *,
                 label_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if label_names is not None:
            pulumi.set(__self__, "label_names", label_names)

    @property
    @pulumi.getter(name="labelNames")
    def label_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "label_names")

    @label_names.setter
    def label_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "label_names", value)


@pulumi.input_type
class OpsgenieAlertNotifierResponderArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class OtelMetricsIngestionResourceAttributesArgs:
    def __init__(__self__, *,
                 exclude_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 filter_mode: Optional[pulumi.Input[str]] = None,
                 flatten_mode: Optional[pulumi.Input[str]] = None,
                 generate_target_info: Optional[pulumi.Input[bool]] = None):
        if exclude_keys is not None:
            pulumi.set(__self__, "exclude_keys", exclude_keys)
        if filter_mode is not None:
            pulumi.set(__self__, "filter_mode", filter_mode)
        if flatten_mode is not None:
            pulumi.set(__self__, "flatten_mode", flatten_mode)
        if generate_target_info is not None:
            pulumi.set(__self__, "generate_target_info", generate_target_info)

    @property
    @pulumi.getter(name="excludeKeys")
    def exclude_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exclude_keys")

    @exclude_keys.setter
    def exclude_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exclude_keys", value)

    @property
    @pulumi.getter(name="filterMode")
    def filter_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_mode")

    @filter_mode.setter
    def filter_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_mode", value)

    @property
    @pulumi.getter(name="flattenMode")
    def flatten_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flatten_mode")

    @flatten_mode.setter
    def flatten_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flatten_mode", value)

    @property
    @pulumi.getter(name="generateTargetInfo")
    def generate_target_info(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "generate_target_info")

    @generate_target_info.setter
    def generate_target_info(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "generate_target_info", value)


@pulumi.input_type
class PagerdutyAlertNotifierImageArgs:
    def __init__(__self__, *,
                 src: pulumi.Input[str],
                 alt: Optional[pulumi.Input[str]] = None,
                 href: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "src", src)
        if alt is not None:
            pulumi.set(__self__, "alt", alt)
        if href is not None:
            pulumi.set(__self__, "href", href)

    @property
    @pulumi.getter
    def src(self) -> pulumi.Input[str]:
        return pulumi.get(self, "src")

    @src.setter
    def src(self, value: pulumi.Input[str]):
        pulumi.set(self, "src", value)

    @property
    @pulumi.getter
    def alt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alt")

    @alt.setter
    def alt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alt", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)


@pulumi.input_type
class PagerdutyAlertNotifierLinkArgs:
    def __init__(__self__, *,
                 href: pulumi.Input[str],
                 text: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "href", href)
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def href(self) -> pulumi.Input[str]:
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: pulumi.Input[str]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text", value)


@pulumi.input_type
class ResourcePoolsConfigDefaultPoolArgs:
    def __init__(__self__, *,
                 allocation: Optional[pulumi.Input['ResourcePoolsConfigDefaultPoolAllocationArgs']] = None,
                 priorities: Optional[pulumi.Input['ResourcePoolsConfigDefaultPoolPrioritiesArgs']] = None,
                 priority_thresholds: Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolsConfigDefaultPoolPriorityThresholdArgs']]]] = None):
        if allocation is not None:
            pulumi.set(__self__, "allocation", allocation)
        if priorities is not None:
            pulumi.set(__self__, "priorities", priorities)
        if priority_thresholds is not None:
            pulumi.set(__self__, "priority_thresholds", priority_thresholds)

    @property
    @pulumi.getter
    def allocation(self) -> Optional[pulumi.Input['ResourcePoolsConfigDefaultPoolAllocationArgs']]:
        return pulumi.get(self, "allocation")

    @allocation.setter
    def allocation(self, value: Optional[pulumi.Input['ResourcePoolsConfigDefaultPoolAllocationArgs']]):
        pulumi.set(self, "allocation", value)

    @property
    @pulumi.getter
    def priorities(self) -> Optional[pulumi.Input['ResourcePoolsConfigDefaultPoolPrioritiesArgs']]:
        return pulumi.get(self, "priorities")

    @priorities.setter
    def priorities(self, value: Optional[pulumi.Input['ResourcePoolsConfigDefaultPoolPrioritiesArgs']]):
        pulumi.set(self, "priorities", value)

    @property
    @pulumi.getter(name="priorityThresholds")
    def priority_thresholds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolsConfigDefaultPoolPriorityThresholdArgs']]]]:
        return pulumi.get(self, "priority_thresholds")

    @priority_thresholds.setter
    def priority_thresholds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolsConfigDefaultPoolPriorityThresholdArgs']]]]):
        pulumi.set(self, "priority_thresholds", value)


@pulumi.input_type
class ResourcePoolsConfigDefaultPoolAllocationArgs:
    def __init__(__self__, *,
                 fixed_values: Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolsConfigDefaultPoolAllocationFixedValueArgs']]]] = None,
                 percent_of_license: Optional[pulumi.Input[float]] = None,
                 priority_thresholds: Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolsConfigDefaultPoolAllocationPriorityThresholdArgs']]]] = None):
        if fixed_values is not None:
            pulumi.set(__self__, "fixed_values", fixed_values)
        if percent_of_license is not None:
            pulumi.set(__self__, "percent_of_license", percent_of_license)
        if priority_thresholds is not None:
            pulumi.set(__self__, "priority_thresholds", priority_thresholds)

    @property
    @pulumi.getter(name="fixedValues")
    def fixed_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolsConfigDefaultPoolAllocationFixedValueArgs']]]]:
        return pulumi.get(self, "fixed_values")

    @fixed_values.setter
    def fixed_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolsConfigDefaultPoolAllocationFixedValueArgs']]]]):
        pulumi.set(self, "fixed_values", value)

    @property
    @pulumi.getter(name="percentOfLicense")
    def percent_of_license(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "percent_of_license")

    @percent_of_license.setter
    def percent_of_license(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "percent_of_license", value)

    @property
    @pulumi.getter(name="priorityThresholds")
    def priority_thresholds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolsConfigDefaultPoolAllocationPriorityThresholdArgs']]]]:
        return pulumi.get(self, "priority_thresholds")

    @priority_thresholds.setter
    def priority_thresholds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolsConfigDefaultPoolAllocationPriorityThresholdArgs']]]]):
        pulumi.set(self, "priority_thresholds", value)


@pulumi.input_type
class ResourcePoolsConfigDefaultPoolAllocationFixedValueArgs:
    def __init__(__self__, *,
                 license: pulumi.Input[str],
                 value: pulumi.Input[int]):
        pulumi.set(__self__, "license", license)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def license(self) -> pulumi.Input[str]:
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: pulumi.Input[str]):
        pulumi.set(self, "license", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ResourcePoolsConfigDefaultPoolAllocationPriorityThresholdArgs:
    def __init__(__self__, *,
                 license: pulumi.Input[str],
                 all_priorities: Optional[pulumi.Input['ResourcePoolsConfigDefaultPoolAllocationPriorityThresholdAllPrioritiesArgs']] = None,
                 default_and_low_priority: Optional[pulumi.Input['ResourcePoolsConfigDefaultPoolAllocationPriorityThresholdDefaultAndLowPriorityArgs']] = None,
                 low_priority: Optional[pulumi.Input['ResourcePoolsConfigDefaultPoolAllocationPriorityThresholdLowPriorityArgs']] = None):
        pulumi.set(__self__, "license", license)
        if all_priorities is not None:
            pulumi.set(__self__, "all_priorities", all_priorities)
        if default_and_low_priority is not None:
            pulumi.set(__self__, "default_and_low_priority", default_and_low_priority)
        if low_priority is not None:
            pulumi.set(__self__, "low_priority", low_priority)

    @property
    @pulumi.getter
    def license(self) -> pulumi.Input[str]:
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: pulumi.Input[str]):
        pulumi.set(self, "license", value)

    @property
    @pulumi.getter(name="allPriorities")
    def all_priorities(self) -> Optional[pulumi.Input['ResourcePoolsConfigDefaultPoolAllocationPriorityThresholdAllPrioritiesArgs']]:
        return pulumi.get(self, "all_priorities")

    @all_priorities.setter
    def all_priorities(self, value: Optional[pulumi.Input['ResourcePoolsConfigDefaultPoolAllocationPriorityThresholdAllPrioritiesArgs']]):
        pulumi.set(self, "all_priorities", value)

    @property
    @pulumi.getter(name="defaultAndLowPriority")
    def default_and_low_priority(self) -> Optional[pulumi.Input['ResourcePoolsConfigDefaultPoolAllocationPriorityThresholdDefaultAndLowPriorityArgs']]:
        return pulumi.get(self, "default_and_low_priority")

    @default_and_low_priority.setter
    def default_and_low_priority(self, value: Optional[pulumi.Input['ResourcePoolsConfigDefaultPoolAllocationPriorityThresholdDefaultAndLowPriorityArgs']]):
        pulumi.set(self, "default_and_low_priority", value)

    @property
    @pulumi.getter(name="lowPriority")
    def low_priority(self) -> Optional[pulumi.Input['ResourcePoolsConfigDefaultPoolAllocationPriorityThresholdLowPriorityArgs']]:
        return pulumi.get(self, "low_priority")

    @low_priority.setter
    def low_priority(self, value: Optional[pulumi.Input['ResourcePoolsConfigDefaultPoolAllocationPriorityThresholdLowPriorityArgs']]):
        pulumi.set(self, "low_priority", value)


@pulumi.input_type
class ResourcePoolsConfigDefaultPoolAllocationPriorityThresholdAllPrioritiesArgs:
    def __init__(__self__, *,
                 fixed_value: Optional[pulumi.Input[int]] = None,
                 percent_of_pool_allocation: Optional[pulumi.Input[float]] = None):
        if fixed_value is not None:
            pulumi.set(__self__, "fixed_value", fixed_value)
        if percent_of_pool_allocation is not None:
            pulumi.set(__self__, "percent_of_pool_allocation", percent_of_pool_allocation)

    @property
    @pulumi.getter(name="fixedValue")
    def fixed_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fixed_value")

    @fixed_value.setter
    def fixed_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fixed_value", value)

    @property
    @pulumi.getter(name="percentOfPoolAllocation")
    def percent_of_pool_allocation(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "percent_of_pool_allocation")

    @percent_of_pool_allocation.setter
    def percent_of_pool_allocation(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "percent_of_pool_allocation", value)


@pulumi.input_type
class ResourcePoolsConfigDefaultPoolAllocationPriorityThresholdDefaultAndLowPriorityArgs:
    def __init__(__self__, *,
                 fixed_value: Optional[pulumi.Input[int]] = None,
                 percent_of_pool_allocation: Optional[pulumi.Input[float]] = None):
        if fixed_value is not None:
            pulumi.set(__self__, "fixed_value", fixed_value)
        if percent_of_pool_allocation is not None:
            pulumi.set(__self__, "percent_of_pool_allocation", percent_of_pool_allocation)

    @property
    @pulumi.getter(name="fixedValue")
    def fixed_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fixed_value")

    @fixed_value.setter
    def fixed_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fixed_value", value)

    @property
    @pulumi.getter(name="percentOfPoolAllocation")
    def percent_of_pool_allocation(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "percent_of_pool_allocation")

    @percent_of_pool_allocation.setter
    def percent_of_pool_allocation(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "percent_of_pool_allocation", value)


@pulumi.input_type
class ResourcePoolsConfigDefaultPoolAllocationPriorityThresholdLowPriorityArgs:
    def __init__(__self__, *,
                 fixed_value: Optional[pulumi.Input[int]] = None,
                 percent_of_pool_allocation: Optional[pulumi.Input[float]] = None):
        if fixed_value is not None:
            pulumi.set(__self__, "fixed_value", fixed_value)
        if percent_of_pool_allocation is not None:
            pulumi.set(__self__, "percent_of_pool_allocation", percent_of_pool_allocation)

    @property
    @pulumi.getter(name="fixedValue")
    def fixed_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fixed_value")

    @fixed_value.setter
    def fixed_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fixed_value", value)

    @property
    @pulumi.getter(name="percentOfPoolAllocation")
    def percent_of_pool_allocation(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "percent_of_pool_allocation")

    @percent_of_pool_allocation.setter
    def percent_of_pool_allocation(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "percent_of_pool_allocation", value)


@pulumi.input_type
class ResourcePoolsConfigDefaultPoolPrioritiesArgs:
    def __init__(__self__, *,
                 high_priority_match_rules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 low_priority_match_rules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if high_priority_match_rules is not None:
            pulumi.set(__self__, "high_priority_match_rules", high_priority_match_rules)
        if low_priority_match_rules is not None:
            pulumi.set(__self__, "low_priority_match_rules", low_priority_match_rules)

    @property
    @pulumi.getter(name="highPriorityMatchRules")
    def high_priority_match_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "high_priority_match_rules")

    @high_priority_match_rules.setter
    def high_priority_match_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "high_priority_match_rules", value)

    @property
    @pulumi.getter(name="lowPriorityMatchRules")
    def low_priority_match_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "low_priority_match_rules")

    @low_priority_match_rules.setter
    def low_priority_match_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "low_priority_match_rules", value)


@pulumi.input_type
class ResourcePoolsConfigDefaultPoolPriorityThresholdArgs:
    def __init__(__self__, *,
                 license: pulumi.Input[str],
                 all_priorities: Optional[pulumi.Input['ResourcePoolsConfigDefaultPoolPriorityThresholdAllPrioritiesArgs']] = None,
                 default_and_low_priority: Optional[pulumi.Input['ResourcePoolsConfigDefaultPoolPriorityThresholdDefaultAndLowPriorityArgs']] = None,
                 low_priority: Optional[pulumi.Input['ResourcePoolsConfigDefaultPoolPriorityThresholdLowPriorityArgs']] = None):
        pulumi.set(__self__, "license", license)
        if all_priorities is not None:
            pulumi.set(__self__, "all_priorities", all_priorities)
        if default_and_low_priority is not None:
            pulumi.set(__self__, "default_and_low_priority", default_and_low_priority)
        if low_priority is not None:
            pulumi.set(__self__, "low_priority", low_priority)

    @property
    @pulumi.getter
    def license(self) -> pulumi.Input[str]:
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: pulumi.Input[str]):
        pulumi.set(self, "license", value)

    @property
    @pulumi.getter(name="allPriorities")
    def all_priorities(self) -> Optional[pulumi.Input['ResourcePoolsConfigDefaultPoolPriorityThresholdAllPrioritiesArgs']]:
        return pulumi.get(self, "all_priorities")

    @all_priorities.setter
    def all_priorities(self, value: Optional[pulumi.Input['ResourcePoolsConfigDefaultPoolPriorityThresholdAllPrioritiesArgs']]):
        pulumi.set(self, "all_priorities", value)

    @property
    @pulumi.getter(name="defaultAndLowPriority")
    def default_and_low_priority(self) -> Optional[pulumi.Input['ResourcePoolsConfigDefaultPoolPriorityThresholdDefaultAndLowPriorityArgs']]:
        return pulumi.get(self, "default_and_low_priority")

    @default_and_low_priority.setter
    def default_and_low_priority(self, value: Optional[pulumi.Input['ResourcePoolsConfigDefaultPoolPriorityThresholdDefaultAndLowPriorityArgs']]):
        pulumi.set(self, "default_and_low_priority", value)

    @property
    @pulumi.getter(name="lowPriority")
    def low_priority(self) -> Optional[pulumi.Input['ResourcePoolsConfigDefaultPoolPriorityThresholdLowPriorityArgs']]:
        return pulumi.get(self, "low_priority")

    @low_priority.setter
    def low_priority(self, value: Optional[pulumi.Input['ResourcePoolsConfigDefaultPoolPriorityThresholdLowPriorityArgs']]):
        pulumi.set(self, "low_priority", value)


@pulumi.input_type
class ResourcePoolsConfigDefaultPoolPriorityThresholdAllPrioritiesArgs:
    def __init__(__self__, *,
                 fixed_value: Optional[pulumi.Input[int]] = None,
                 percent_of_pool_allocation: Optional[pulumi.Input[float]] = None):
        if fixed_value is not None:
            pulumi.set(__self__, "fixed_value", fixed_value)
        if percent_of_pool_allocation is not None:
            pulumi.set(__self__, "percent_of_pool_allocation", percent_of_pool_allocation)

    @property
    @pulumi.getter(name="fixedValue")
    def fixed_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fixed_value")

    @fixed_value.setter
    def fixed_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fixed_value", value)

    @property
    @pulumi.getter(name="percentOfPoolAllocation")
    def percent_of_pool_allocation(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "percent_of_pool_allocation")

    @percent_of_pool_allocation.setter
    def percent_of_pool_allocation(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "percent_of_pool_allocation", value)


@pulumi.input_type
class ResourcePoolsConfigDefaultPoolPriorityThresholdDefaultAndLowPriorityArgs:
    def __init__(__self__, *,
                 fixed_value: Optional[pulumi.Input[int]] = None,
                 percent_of_pool_allocation: Optional[pulumi.Input[float]] = None):
        if fixed_value is not None:
            pulumi.set(__self__, "fixed_value", fixed_value)
        if percent_of_pool_allocation is not None:
            pulumi.set(__self__, "percent_of_pool_allocation", percent_of_pool_allocation)

    @property
    @pulumi.getter(name="fixedValue")
    def fixed_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fixed_value")

    @fixed_value.setter
    def fixed_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fixed_value", value)

    @property
    @pulumi.getter(name="percentOfPoolAllocation")
    def percent_of_pool_allocation(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "percent_of_pool_allocation")

    @percent_of_pool_allocation.setter
    def percent_of_pool_allocation(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "percent_of_pool_allocation", value)


@pulumi.input_type
class ResourcePoolsConfigDefaultPoolPriorityThresholdLowPriorityArgs:
    def __init__(__self__, *,
                 fixed_value: Optional[pulumi.Input[int]] = None,
                 percent_of_pool_allocation: Optional[pulumi.Input[float]] = None):
        if fixed_value is not None:
            pulumi.set(__self__, "fixed_value", fixed_value)
        if percent_of_pool_allocation is not None:
            pulumi.set(__self__, "percent_of_pool_allocation", percent_of_pool_allocation)

    @property
    @pulumi.getter(name="fixedValue")
    def fixed_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fixed_value")

    @fixed_value.setter
    def fixed_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fixed_value", value)

    @property
    @pulumi.getter(name="percentOfPoolAllocation")
    def percent_of_pool_allocation(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "percent_of_pool_allocation")

    @percent_of_pool_allocation.setter
    def percent_of_pool_allocation(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "percent_of_pool_allocation", value)


@pulumi.input_type
class ResourcePoolsConfigPoolArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 allocation: Optional[pulumi.Input['ResourcePoolsConfigPoolAllocationArgs']] = None,
                 match_rule: Optional[pulumi.Input[str]] = None,
                 match_rules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 priorities: Optional[pulumi.Input['ResourcePoolsConfigPoolPrioritiesArgs']] = None):
        pulumi.set(__self__, "name", name)
        if allocation is not None:
            pulumi.set(__self__, "allocation", allocation)
        if match_rule is not None:
            warnings.warn("""use match_rules""", DeprecationWarning)
            pulumi.log.warn("""match_rule is deprecated: use match_rules""")
        if match_rule is not None:
            pulumi.set(__self__, "match_rule", match_rule)
        if match_rules is not None:
            pulumi.set(__self__, "match_rules", match_rules)
        if priorities is not None:
            pulumi.set(__self__, "priorities", priorities)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def allocation(self) -> Optional[pulumi.Input['ResourcePoolsConfigPoolAllocationArgs']]:
        return pulumi.get(self, "allocation")

    @allocation.setter
    def allocation(self, value: Optional[pulumi.Input['ResourcePoolsConfigPoolAllocationArgs']]):
        pulumi.set(self, "allocation", value)

    @property
    @pulumi.getter(name="matchRule")
    def match_rule(self) -> Optional[pulumi.Input[str]]:
        warnings.warn("""use match_rules""", DeprecationWarning)
        pulumi.log.warn("""match_rule is deprecated: use match_rules""")

        return pulumi.get(self, "match_rule")

    @match_rule.setter
    def match_rule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_rule", value)

    @property
    @pulumi.getter(name="matchRules")
    def match_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "match_rules")

    @match_rules.setter
    def match_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "match_rules", value)

    @property
    @pulumi.getter
    def priorities(self) -> Optional[pulumi.Input['ResourcePoolsConfigPoolPrioritiesArgs']]:
        return pulumi.get(self, "priorities")

    @priorities.setter
    def priorities(self, value: Optional[pulumi.Input['ResourcePoolsConfigPoolPrioritiesArgs']]):
        pulumi.set(self, "priorities", value)


@pulumi.input_type
class ResourcePoolsConfigPoolAllocationArgs:
    def __init__(__self__, *,
                 fixed_values: Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolsConfigPoolAllocationFixedValueArgs']]]] = None,
                 percent_of_license: Optional[pulumi.Input[float]] = None,
                 priority_thresholds: Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolsConfigPoolAllocationPriorityThresholdArgs']]]] = None):
        if fixed_values is not None:
            pulumi.set(__self__, "fixed_values", fixed_values)
        if percent_of_license is not None:
            pulumi.set(__self__, "percent_of_license", percent_of_license)
        if priority_thresholds is not None:
            pulumi.set(__self__, "priority_thresholds", priority_thresholds)

    @property
    @pulumi.getter(name="fixedValues")
    def fixed_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolsConfigPoolAllocationFixedValueArgs']]]]:
        return pulumi.get(self, "fixed_values")

    @fixed_values.setter
    def fixed_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolsConfigPoolAllocationFixedValueArgs']]]]):
        pulumi.set(self, "fixed_values", value)

    @property
    @pulumi.getter(name="percentOfLicense")
    def percent_of_license(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "percent_of_license")

    @percent_of_license.setter
    def percent_of_license(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "percent_of_license", value)

    @property
    @pulumi.getter(name="priorityThresholds")
    def priority_thresholds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolsConfigPoolAllocationPriorityThresholdArgs']]]]:
        return pulumi.get(self, "priority_thresholds")

    @priority_thresholds.setter
    def priority_thresholds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourcePoolsConfigPoolAllocationPriorityThresholdArgs']]]]):
        pulumi.set(self, "priority_thresholds", value)


@pulumi.input_type
class ResourcePoolsConfigPoolAllocationFixedValueArgs:
    def __init__(__self__, *,
                 license: pulumi.Input[str],
                 value: pulumi.Input[int]):
        pulumi.set(__self__, "license", license)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def license(self) -> pulumi.Input[str]:
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: pulumi.Input[str]):
        pulumi.set(self, "license", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ResourcePoolsConfigPoolAllocationPriorityThresholdArgs:
    def __init__(__self__, *,
                 license: pulumi.Input[str],
                 all_priorities: Optional[pulumi.Input['ResourcePoolsConfigPoolAllocationPriorityThresholdAllPrioritiesArgs']] = None,
                 default_and_low_priority: Optional[pulumi.Input['ResourcePoolsConfigPoolAllocationPriorityThresholdDefaultAndLowPriorityArgs']] = None,
                 low_priority: Optional[pulumi.Input['ResourcePoolsConfigPoolAllocationPriorityThresholdLowPriorityArgs']] = None):
        pulumi.set(__self__, "license", license)
        if all_priorities is not None:
            pulumi.set(__self__, "all_priorities", all_priorities)
        if default_and_low_priority is not None:
            pulumi.set(__self__, "default_and_low_priority", default_and_low_priority)
        if low_priority is not None:
            pulumi.set(__self__, "low_priority", low_priority)

    @property
    @pulumi.getter
    def license(self) -> pulumi.Input[str]:
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: pulumi.Input[str]):
        pulumi.set(self, "license", value)

    @property
    @pulumi.getter(name="allPriorities")
    def all_priorities(self) -> Optional[pulumi.Input['ResourcePoolsConfigPoolAllocationPriorityThresholdAllPrioritiesArgs']]:
        return pulumi.get(self, "all_priorities")

    @all_priorities.setter
    def all_priorities(self, value: Optional[pulumi.Input['ResourcePoolsConfigPoolAllocationPriorityThresholdAllPrioritiesArgs']]):
        pulumi.set(self, "all_priorities", value)

    @property
    @pulumi.getter(name="defaultAndLowPriority")
    def default_and_low_priority(self) -> Optional[pulumi.Input['ResourcePoolsConfigPoolAllocationPriorityThresholdDefaultAndLowPriorityArgs']]:
        return pulumi.get(self, "default_and_low_priority")

    @default_and_low_priority.setter
    def default_and_low_priority(self, value: Optional[pulumi.Input['ResourcePoolsConfigPoolAllocationPriorityThresholdDefaultAndLowPriorityArgs']]):
        pulumi.set(self, "default_and_low_priority", value)

    @property
    @pulumi.getter(name="lowPriority")
    def low_priority(self) -> Optional[pulumi.Input['ResourcePoolsConfigPoolAllocationPriorityThresholdLowPriorityArgs']]:
        return pulumi.get(self, "low_priority")

    @low_priority.setter
    def low_priority(self, value: Optional[pulumi.Input['ResourcePoolsConfigPoolAllocationPriorityThresholdLowPriorityArgs']]):
        pulumi.set(self, "low_priority", value)


@pulumi.input_type
class ResourcePoolsConfigPoolAllocationPriorityThresholdAllPrioritiesArgs:
    def __init__(__self__, *,
                 fixed_value: Optional[pulumi.Input[int]] = None,
                 percent_of_pool_allocation: Optional[pulumi.Input[float]] = None):
        if fixed_value is not None:
            pulumi.set(__self__, "fixed_value", fixed_value)
        if percent_of_pool_allocation is not None:
            pulumi.set(__self__, "percent_of_pool_allocation", percent_of_pool_allocation)

    @property
    @pulumi.getter(name="fixedValue")
    def fixed_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fixed_value")

    @fixed_value.setter
    def fixed_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fixed_value", value)

    @property
    @pulumi.getter(name="percentOfPoolAllocation")
    def percent_of_pool_allocation(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "percent_of_pool_allocation")

    @percent_of_pool_allocation.setter
    def percent_of_pool_allocation(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "percent_of_pool_allocation", value)


@pulumi.input_type
class ResourcePoolsConfigPoolAllocationPriorityThresholdDefaultAndLowPriorityArgs:
    def __init__(__self__, *,
                 fixed_value: Optional[pulumi.Input[int]] = None,
                 percent_of_pool_allocation: Optional[pulumi.Input[float]] = None):
        if fixed_value is not None:
            pulumi.set(__self__, "fixed_value", fixed_value)
        if percent_of_pool_allocation is not None:
            pulumi.set(__self__, "percent_of_pool_allocation", percent_of_pool_allocation)

    @property
    @pulumi.getter(name="fixedValue")
    def fixed_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fixed_value")

    @fixed_value.setter
    def fixed_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fixed_value", value)

    @property
    @pulumi.getter(name="percentOfPoolAllocation")
    def percent_of_pool_allocation(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "percent_of_pool_allocation")

    @percent_of_pool_allocation.setter
    def percent_of_pool_allocation(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "percent_of_pool_allocation", value)


@pulumi.input_type
class ResourcePoolsConfigPoolAllocationPriorityThresholdLowPriorityArgs:
    def __init__(__self__, *,
                 fixed_value: Optional[pulumi.Input[int]] = None,
                 percent_of_pool_allocation: Optional[pulumi.Input[float]] = None):
        if fixed_value is not None:
            pulumi.set(__self__, "fixed_value", fixed_value)
        if percent_of_pool_allocation is not None:
            pulumi.set(__self__, "percent_of_pool_allocation", percent_of_pool_allocation)

    @property
    @pulumi.getter(name="fixedValue")
    def fixed_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fixed_value")

    @fixed_value.setter
    def fixed_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fixed_value", value)

    @property
    @pulumi.getter(name="percentOfPoolAllocation")
    def percent_of_pool_allocation(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "percent_of_pool_allocation")

    @percent_of_pool_allocation.setter
    def percent_of_pool_allocation(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "percent_of_pool_allocation", value)


@pulumi.input_type
class ResourcePoolsConfigPoolPrioritiesArgs:
    def __init__(__self__, *,
                 high_priority_match_rules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 low_priority_match_rules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if high_priority_match_rules is not None:
            pulumi.set(__self__, "high_priority_match_rules", high_priority_match_rules)
        if low_priority_match_rules is not None:
            pulumi.set(__self__, "low_priority_match_rules", low_priority_match_rules)

    @property
    @pulumi.getter(name="highPriorityMatchRules")
    def high_priority_match_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "high_priority_match_rules")

    @high_priority_match_rules.setter
    def high_priority_match_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "high_priority_match_rules", value)

    @property
    @pulumi.getter(name="lowPriorityMatchRules")
    def low_priority_match_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "low_priority_match_rules")

    @low_priority_match_rules.setter
    def low_priority_match_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "low_priority_match_rules", value)


@pulumi.input_type
class RollupRuleGraphiteLabelPolicyArgs:
    def __init__(__self__, *,
                 replaces: Optional[pulumi.Input[Sequence[pulumi.Input['RollupRuleGraphiteLabelPolicyReplaceArgs']]]] = None):
        if replaces is not None:
            pulumi.set(__self__, "replaces", replaces)

    @property
    @pulumi.getter
    def replaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RollupRuleGraphiteLabelPolicyReplaceArgs']]]]:
        return pulumi.get(self, "replaces")

    @replaces.setter
    def replaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RollupRuleGraphiteLabelPolicyReplaceArgs']]]]):
        pulumi.set(self, "replaces", value)


@pulumi.input_type
class RollupRuleGraphiteLabelPolicyReplaceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 new_value: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "new_value", new_value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="newValue")
    def new_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "new_value")

    @new_value.setter
    def new_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "new_value", value)


@pulumi.input_type
class RollupRuleStoragePoliciesArgs:
    def __init__(__self__, *,
                 resolution: pulumi.Input[str],
                 retention: pulumi.Input[str]):
        pulumi.set(__self__, "resolution", resolution)
        pulumi.set(__self__, "retention", retention)

    @property
    @pulumi.getter
    def resolution(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resolution")

    @resolution.setter
    def resolution(self, value: pulumi.Input[str]):
        pulumi.set(self, "resolution", value)

    @property
    @pulumi.getter
    def retention(self) -> pulumi.Input[str]:
        return pulumi.get(self, "retention")

    @retention.setter
    def retention(self, value: pulumi.Input[str]):
        pulumi.set(self, "retention", value)


@pulumi.input_type
class SLODefinitionArgs:
    def __init__(__self__, *,
                 objective: pulumi.Input[float],
                 burn_rate_alerting_configs: Optional[pulumi.Input[Sequence[pulumi.Input['SLODefinitionBurnRateAlertingConfigArgs']]]] = None,
                 enable_burn_rate_alerting: Optional[pulumi.Input[bool]] = None,
                 time_window: Optional[pulumi.Input['SLODefinitionTimeWindowArgs']] = None):
        pulumi.set(__self__, "objective", objective)
        if burn_rate_alerting_configs is not None:
            pulumi.set(__self__, "burn_rate_alerting_configs", burn_rate_alerting_configs)
        if enable_burn_rate_alerting is not None:
            pulumi.set(__self__, "enable_burn_rate_alerting", enable_burn_rate_alerting)
        if time_window is not None:
            pulumi.set(__self__, "time_window", time_window)

    @property
    @pulumi.getter
    def objective(self) -> pulumi.Input[float]:
        return pulumi.get(self, "objective")

    @objective.setter
    def objective(self, value: pulumi.Input[float]):
        pulumi.set(self, "objective", value)

    @property
    @pulumi.getter(name="burnRateAlertingConfigs")
    def burn_rate_alerting_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SLODefinitionBurnRateAlertingConfigArgs']]]]:
        return pulumi.get(self, "burn_rate_alerting_configs")

    @burn_rate_alerting_configs.setter
    def burn_rate_alerting_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SLODefinitionBurnRateAlertingConfigArgs']]]]):
        pulumi.set(self, "burn_rate_alerting_configs", value)

    @property
    @pulumi.getter(name="enableBurnRateAlerting")
    def enable_burn_rate_alerting(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_burn_rate_alerting")

    @enable_burn_rate_alerting.setter
    def enable_burn_rate_alerting(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_burn_rate_alerting", value)

    @property
    @pulumi.getter(name="timeWindow")
    def time_window(self) -> Optional[pulumi.Input['SLODefinitionTimeWindowArgs']]:
        return pulumi.get(self, "time_window")

    @time_window.setter
    def time_window(self, value: Optional[pulumi.Input['SLODefinitionTimeWindowArgs']]):
        pulumi.set(self, "time_window", value)


@pulumi.input_type
class SLODefinitionBurnRateAlertingConfigArgs:
    def __init__(__self__, *,
                 budget: pulumi.Input[float],
                 severity: pulumi.Input[str],
                 window: pulumi.Input[str],
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "budget", budget)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "window", window)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def budget(self) -> pulumi.Input[float]:
        return pulumi.get(self, "budget")

    @budget.setter
    def budget(self, value: pulumi.Input[float]):
        pulumi.set(self, "budget", value)

    @property
    @pulumi.getter
    def severity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: pulumi.Input[str]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def window(self) -> pulumi.Input[str]:
        return pulumi.get(self, "window")

    @window.setter
    def window(self, value: pulumi.Input[str]):
        pulumi.set(self, "window", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class SLODefinitionTimeWindowArgs:
    def __init__(__self__, *,
                 duration: pulumi.Input[str]):
        pulumi.set(__self__, "duration", duration)

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Input[str]:
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: pulumi.Input[str]):
        pulumi.set(self, "duration", value)


@pulumi.input_type
class SLOSignalGroupingArgs:
    def __init__(__self__, *,
                 label_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 signal_per_series: Optional[pulumi.Input[bool]] = None):
        if label_names is not None:
            pulumi.set(__self__, "label_names", label_names)
        if signal_per_series is not None:
            pulumi.set(__self__, "signal_per_series", signal_per_series)

    @property
    @pulumi.getter(name="labelNames")
    def label_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "label_names")

    @label_names.setter
    def label_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "label_names", value)

    @property
    @pulumi.getter(name="signalPerSeries")
    def signal_per_series(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "signal_per_series")

    @signal_per_series.setter
    def signal_per_series(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "signal_per_series", value)


@pulumi.input_type
class SLOSliArgs:
    def __init__(__self__, *,
                 additional_promql_filters: Optional[pulumi.Input[Sequence[pulumi.Input['SLOSliAdditionalPromqlFilterArgs']]]] = None,
                 custom_dimension_labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 custom_indicator: Optional[pulumi.Input['SLOSliCustomIndicatorArgs']] = None,
                 custom_timeslice_indicator: Optional[pulumi.Input['SLOSliCustomTimesliceIndicatorArgs']] = None):
        if additional_promql_filters is not None:
            pulumi.set(__self__, "additional_promql_filters", additional_promql_filters)
        if custom_dimension_labels is not None:
            pulumi.set(__self__, "custom_dimension_labels", custom_dimension_labels)
        if custom_indicator is not None:
            pulumi.set(__self__, "custom_indicator", custom_indicator)
        if custom_timeslice_indicator is not None:
            pulumi.set(__self__, "custom_timeslice_indicator", custom_timeslice_indicator)

    @property
    @pulumi.getter(name="additionalPromqlFilters")
    def additional_promql_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SLOSliAdditionalPromqlFilterArgs']]]]:
        return pulumi.get(self, "additional_promql_filters")

    @additional_promql_filters.setter
    def additional_promql_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SLOSliAdditionalPromqlFilterArgs']]]]):
        pulumi.set(self, "additional_promql_filters", value)

    @property
    @pulumi.getter(name="customDimensionLabels")
    def custom_dimension_labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "custom_dimension_labels")

    @custom_dimension_labels.setter
    def custom_dimension_labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "custom_dimension_labels", value)

    @property
    @pulumi.getter(name="customIndicator")
    def custom_indicator(self) -> Optional[pulumi.Input['SLOSliCustomIndicatorArgs']]:
        return pulumi.get(self, "custom_indicator")

    @custom_indicator.setter
    def custom_indicator(self, value: Optional[pulumi.Input['SLOSliCustomIndicatorArgs']]):
        pulumi.set(self, "custom_indicator", value)

    @property
    @pulumi.getter(name="customTimesliceIndicator")
    def custom_timeslice_indicator(self) -> Optional[pulumi.Input['SLOSliCustomTimesliceIndicatorArgs']]:
        return pulumi.get(self, "custom_timeslice_indicator")

    @custom_timeslice_indicator.setter
    def custom_timeslice_indicator(self, value: Optional[pulumi.Input['SLOSliCustomTimesliceIndicatorArgs']]):
        pulumi.set(self, "custom_timeslice_indicator", value)


@pulumi.input_type
class SLOSliAdditionalPromqlFilterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SLOSliCustomIndicatorArgs:
    def __init__(__self__, *,
                 total_query_template: pulumi.Input[str],
                 bad_query_template: Optional[pulumi.Input[str]] = None,
                 good_query_template: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "total_query_template", total_query_template)
        if bad_query_template is not None:
            pulumi.set(__self__, "bad_query_template", bad_query_template)
        if good_query_template is not None:
            pulumi.set(__self__, "good_query_template", good_query_template)

    @property
    @pulumi.getter(name="totalQueryTemplate")
    def total_query_template(self) -> pulumi.Input[str]:
        return pulumi.get(self, "total_query_template")

    @total_query_template.setter
    def total_query_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "total_query_template", value)

    @property
    @pulumi.getter(name="badQueryTemplate")
    def bad_query_template(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bad_query_template")

    @bad_query_template.setter
    def bad_query_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bad_query_template", value)

    @property
    @pulumi.getter(name="goodQueryTemplate")
    def good_query_template(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "good_query_template")

    @good_query_template.setter
    def good_query_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "good_query_template", value)


@pulumi.input_type
class SLOSliCustomTimesliceIndicatorArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input['SLOSliCustomTimesliceIndicatorConditionArgs'],
                 query_template: pulumi.Input[str],
                 timeslice_size: pulumi.Input[str]):
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "query_template", query_template)
        pulumi.set(__self__, "timeslice_size", timeslice_size)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Input['SLOSliCustomTimesliceIndicatorConditionArgs']:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input['SLOSliCustomTimesliceIndicatorConditionArgs']):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter(name="queryTemplate")
    def query_template(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query_template")

    @query_template.setter
    def query_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "query_template", value)

    @property
    @pulumi.getter(name="timesliceSize")
    def timeslice_size(self) -> pulumi.Input[str]:
        return pulumi.get(self, "timeslice_size")

    @timeslice_size.setter
    def timeslice_size(self, value: pulumi.Input[str]):
        pulumi.set(self, "timeslice_size", value)


@pulumi.input_type
class SLOSliCustomTimesliceIndicatorConditionArgs:
    def __init__(__self__, *,
                 op: pulumi.Input[str],
                 value: pulumi.Input[float]):
        pulumi.set(__self__, "op", op)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def op(self) -> pulumi.Input[str]:
        return pulumi.get(self, "op")

    @op.setter
    def op(self, value: pulumi.Input[str]):
        pulumi.set(self, "op", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceAccountRestrictionArgs:
    def __init__(__self__, *,
                 permission: pulumi.Input[str],
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "permission", permission)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def permission(self) -> pulumi.Input[str]:
        return pulumi.get(self, "permission")

    @permission.setter
    def permission(self, value: pulumi.Input[str]):
        pulumi.set(self, "permission", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class SlackAlertNotifierActionArgs:
    def __init__(__self__, *,
                 action_confirm_dismiss_text: Optional[pulumi.Input[str]] = None,
                 action_confirm_ok_text: Optional[pulumi.Input[str]] = None,
                 action_confirm_text: Optional[pulumi.Input[str]] = None,
                 action_confirm_tile: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 style: Optional[pulumi.Input[str]] = None,
                 text: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if action_confirm_dismiss_text is not None:
            pulumi.set(__self__, "action_confirm_dismiss_text", action_confirm_dismiss_text)
        if action_confirm_ok_text is not None:
            pulumi.set(__self__, "action_confirm_ok_text", action_confirm_ok_text)
        if action_confirm_text is not None:
            pulumi.set(__self__, "action_confirm_text", action_confirm_text)
        if action_confirm_tile is not None:
            pulumi.set(__self__, "action_confirm_tile", action_confirm_tile)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if text is not None:
            pulumi.set(__self__, "text", text)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="actionConfirmDismissText")
    def action_confirm_dismiss_text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action_confirm_dismiss_text")

    @action_confirm_dismiss_text.setter
    def action_confirm_dismiss_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_confirm_dismiss_text", value)

    @property
    @pulumi.getter(name="actionConfirmOkText")
    def action_confirm_ok_text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action_confirm_ok_text")

    @action_confirm_ok_text.setter
    def action_confirm_ok_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_confirm_ok_text", value)

    @property
    @pulumi.getter(name="actionConfirmText")
    def action_confirm_text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action_confirm_text")

    @action_confirm_text.setter
    def action_confirm_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_confirm_text", value)

    @property
    @pulumi.getter(name="actionConfirmTile")
    def action_confirm_tile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action_confirm_tile")

    @action_confirm_tile.setter
    def action_confirm_tile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_confirm_tile", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "style", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SlackAlertNotifierFieldArgs:
    def __init__(__self__, *,
                 short: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if short is not None:
            pulumi.set(__self__, "short", short)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def short(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "short")

    @short.setter
    def short(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "short", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TraceJaegerRemoteSamplingStrategyAppliedStrategyArgs:
    def __init__(__self__, *,
                 per_operation_strategies: Optional[pulumi.Input['TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesArgs']] = None,
                 probabilistic_strategy: Optional[pulumi.Input['TraceJaegerRemoteSamplingStrategyAppliedStrategyProbabilisticStrategyArgs']] = None,
                 rate_limiting_strategy: Optional[pulumi.Input['TraceJaegerRemoteSamplingStrategyAppliedStrategyRateLimitingStrategyArgs']] = None):
        if per_operation_strategies is not None:
            pulumi.set(__self__, "per_operation_strategies", per_operation_strategies)
        if probabilistic_strategy is not None:
            pulumi.set(__self__, "probabilistic_strategy", probabilistic_strategy)
        if rate_limiting_strategy is not None:
            pulumi.set(__self__, "rate_limiting_strategy", rate_limiting_strategy)

    @property
    @pulumi.getter(name="perOperationStrategies")
    def per_operation_strategies(self) -> Optional[pulumi.Input['TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesArgs']]:
        return pulumi.get(self, "per_operation_strategies")

    @per_operation_strategies.setter
    def per_operation_strategies(self, value: Optional[pulumi.Input['TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesArgs']]):
        pulumi.set(self, "per_operation_strategies", value)

    @property
    @pulumi.getter(name="probabilisticStrategy")
    def probabilistic_strategy(self) -> Optional[pulumi.Input['TraceJaegerRemoteSamplingStrategyAppliedStrategyProbabilisticStrategyArgs']]:
        return pulumi.get(self, "probabilistic_strategy")

    @probabilistic_strategy.setter
    def probabilistic_strategy(self, value: Optional[pulumi.Input['TraceJaegerRemoteSamplingStrategyAppliedStrategyProbabilisticStrategyArgs']]):
        pulumi.set(self, "probabilistic_strategy", value)

    @property
    @pulumi.getter(name="rateLimitingStrategy")
    def rate_limiting_strategy(self) -> Optional[pulumi.Input['TraceJaegerRemoteSamplingStrategyAppliedStrategyRateLimitingStrategyArgs']]:
        return pulumi.get(self, "rate_limiting_strategy")

    @rate_limiting_strategy.setter
    def rate_limiting_strategy(self, value: Optional[pulumi.Input['TraceJaegerRemoteSamplingStrategyAppliedStrategyRateLimitingStrategyArgs']]):
        pulumi.set(self, "rate_limiting_strategy", value)


@pulumi.input_type
class TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesArgs:
    def __init__(__self__, *,
                 default_sampling_rate: pulumi.Input[float],
                 default_lower_bound_traces_per_second: Optional[pulumi.Input[float]] = None,
                 default_upper_bound_traces_per_second: Optional[pulumi.Input[float]] = None,
                 per_operation_strategies: Optional[pulumi.Input[Sequence[pulumi.Input['TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesPerOperationStrategyArgs']]]] = None):
        pulumi.set(__self__, "default_sampling_rate", default_sampling_rate)
        if default_lower_bound_traces_per_second is not None:
            pulumi.set(__self__, "default_lower_bound_traces_per_second", default_lower_bound_traces_per_second)
        if default_upper_bound_traces_per_second is not None:
            pulumi.set(__self__, "default_upper_bound_traces_per_second", default_upper_bound_traces_per_second)
        if per_operation_strategies is not None:
            pulumi.set(__self__, "per_operation_strategies", per_operation_strategies)

    @property
    @pulumi.getter(name="defaultSamplingRate")
    def default_sampling_rate(self) -> pulumi.Input[float]:
        return pulumi.get(self, "default_sampling_rate")

    @default_sampling_rate.setter
    def default_sampling_rate(self, value: pulumi.Input[float]):
        pulumi.set(self, "default_sampling_rate", value)

    @property
    @pulumi.getter(name="defaultLowerBoundTracesPerSecond")
    def default_lower_bound_traces_per_second(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "default_lower_bound_traces_per_second")

    @default_lower_bound_traces_per_second.setter
    def default_lower_bound_traces_per_second(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "default_lower_bound_traces_per_second", value)

    @property
    @pulumi.getter(name="defaultUpperBoundTracesPerSecond")
    def default_upper_bound_traces_per_second(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "default_upper_bound_traces_per_second")

    @default_upper_bound_traces_per_second.setter
    def default_upper_bound_traces_per_second(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "default_upper_bound_traces_per_second", value)

    @property
    @pulumi.getter(name="perOperationStrategies")
    def per_operation_strategies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesPerOperationStrategyArgs']]]]:
        return pulumi.get(self, "per_operation_strategies")

    @per_operation_strategies.setter
    def per_operation_strategies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesPerOperationStrategyArgs']]]]):
        pulumi.set(self, "per_operation_strategies", value)


@pulumi.input_type
class TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesPerOperationStrategyArgs:
    def __init__(__self__, *,
                 operation: pulumi.Input[str],
                 probabilistic_strategy: pulumi.Input['TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesPerOperationStrategyProbabilisticStrategyArgs']):
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "probabilistic_strategy", probabilistic_strategy)

    @property
    @pulumi.getter
    def operation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation", value)

    @property
    @pulumi.getter(name="probabilisticStrategy")
    def probabilistic_strategy(self) -> pulumi.Input['TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesPerOperationStrategyProbabilisticStrategyArgs']:
        return pulumi.get(self, "probabilistic_strategy")

    @probabilistic_strategy.setter
    def probabilistic_strategy(self, value: pulumi.Input['TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesPerOperationStrategyProbabilisticStrategyArgs']):
        pulumi.set(self, "probabilistic_strategy", value)


@pulumi.input_type
class TraceJaegerRemoteSamplingStrategyAppliedStrategyPerOperationStrategiesPerOperationStrategyProbabilisticStrategyArgs:
    def __init__(__self__, *,
                 sampling_rate: pulumi.Input[float]):
        pulumi.set(__self__, "sampling_rate", sampling_rate)

    @property
    @pulumi.getter(name="samplingRate")
    def sampling_rate(self) -> pulumi.Input[float]:
        return pulumi.get(self, "sampling_rate")

    @sampling_rate.setter
    def sampling_rate(self, value: pulumi.Input[float]):
        pulumi.set(self, "sampling_rate", value)


@pulumi.input_type
class TraceJaegerRemoteSamplingStrategyAppliedStrategyProbabilisticStrategyArgs:
    def __init__(__self__, *,
                 sampling_rate: pulumi.Input[float]):
        pulumi.set(__self__, "sampling_rate", sampling_rate)

    @property
    @pulumi.getter(name="samplingRate")
    def sampling_rate(self) -> pulumi.Input[float]:
        return pulumi.get(self, "sampling_rate")

    @sampling_rate.setter
    def sampling_rate(self, value: pulumi.Input[float]):
        pulumi.set(self, "sampling_rate", value)


@pulumi.input_type
class TraceJaegerRemoteSamplingStrategyAppliedStrategyRateLimitingStrategyArgs:
    def __init__(__self__, *,
                 max_traces_per_second: pulumi.Input[int]):
        pulumi.set(__self__, "max_traces_per_second", max_traces_per_second)

    @property
    @pulumi.getter(name="maxTracesPerSecond")
    def max_traces_per_second(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_traces_per_second")

    @max_traces_per_second.setter
    def max_traces_per_second(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_traces_per_second", value)


@pulumi.input_type
class TraceMetricsRuleGroupByArgs:
    def __init__(__self__, *,
                 key: pulumi.Input['TraceMetricsRuleGroupByKeyArgs'],
                 label: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input['TraceMetricsRuleGroupByKeyArgs']:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input['TraceMetricsRuleGroupByKeyArgs']):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class TraceMetricsRuleGroupByKeyArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 named_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if named_key is not None:
            pulumi.set(__self__, "named_key", named_key)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="namedKey")
    def named_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "named_key")

    @named_key.setter
    def named_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "named_key", value)


@pulumi.input_type
class TraceMetricsRuleTraceFilterArgs:
    def __init__(__self__, *,
                 spans: Optional[pulumi.Input[Sequence[pulumi.Input['TraceMetricsRuleTraceFilterSpanArgs']]]] = None,
                 trace: Optional[pulumi.Input['TraceMetricsRuleTraceFilterTraceArgs']] = None):
        if spans is not None:
            pulumi.set(__self__, "spans", spans)
        if trace is not None:
            pulumi.set(__self__, "trace", trace)

    @property
    @pulumi.getter
    def spans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TraceMetricsRuleTraceFilterSpanArgs']]]]:
        return pulumi.get(self, "spans")

    @spans.setter
    def spans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TraceMetricsRuleTraceFilterSpanArgs']]]]):
        pulumi.set(self, "spans", value)

    @property
    @pulumi.getter
    def trace(self) -> Optional[pulumi.Input['TraceMetricsRuleTraceFilterTraceArgs']]:
        return pulumi.get(self, "trace")

    @trace.setter
    def trace(self, value: Optional[pulumi.Input['TraceMetricsRuleTraceFilterTraceArgs']]):
        pulumi.set(self, "trace", value)


@pulumi.input_type
class TraceMetricsRuleTraceFilterSpanArgs:
    def __init__(__self__, *,
                 duration: Optional[pulumi.Input['TraceMetricsRuleTraceFilterSpanDurationArgs']] = None,
                 error: Optional[pulumi.Input['TraceMetricsRuleTraceFilterSpanErrorArgs']] = None,
                 is_root_span: Optional[pulumi.Input['TraceMetricsRuleTraceFilterSpanIsRootSpanArgs']] = None,
                 match_type: Optional[pulumi.Input[str]] = None,
                 operation: Optional[pulumi.Input['TraceMetricsRuleTraceFilterSpanOperationArgs']] = None,
                 parent_operation: Optional[pulumi.Input['TraceMetricsRuleTraceFilterSpanParentOperationArgs']] = None,
                 parent_service: Optional[pulumi.Input['TraceMetricsRuleTraceFilterSpanParentServiceArgs']] = None,
                 service: Optional[pulumi.Input['TraceMetricsRuleTraceFilterSpanServiceArgs']] = None,
                 span_count: Optional[pulumi.Input['TraceMetricsRuleTraceFilterSpanSpanCountArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['TraceMetricsRuleTraceFilterSpanTagArgs']]]] = None):
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if error is not None:
            pulumi.set(__self__, "error", error)
        if is_root_span is not None:
            pulumi.set(__self__, "is_root_span", is_root_span)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if operation is not None:
            pulumi.set(__self__, "operation", operation)
        if parent_operation is not None:
            pulumi.set(__self__, "parent_operation", parent_operation)
        if parent_service is not None:
            pulumi.set(__self__, "parent_service", parent_service)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if span_count is not None:
            pulumi.set(__self__, "span_count", span_count)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input['TraceMetricsRuleTraceFilterSpanDurationArgs']]:
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input['TraceMetricsRuleTraceFilterSpanDurationArgs']]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def error(self) -> Optional[pulumi.Input['TraceMetricsRuleTraceFilterSpanErrorArgs']]:
        return pulumi.get(self, "error")

    @error.setter
    def error(self, value: Optional[pulumi.Input['TraceMetricsRuleTraceFilterSpanErrorArgs']]):
        pulumi.set(self, "error", value)

    @property
    @pulumi.getter(name="isRootSpan")
    def is_root_span(self) -> Optional[pulumi.Input['TraceMetricsRuleTraceFilterSpanIsRootSpanArgs']]:
        return pulumi.get(self, "is_root_span")

    @is_root_span.setter
    def is_root_span(self, value: Optional[pulumi.Input['TraceMetricsRuleTraceFilterSpanIsRootSpanArgs']]):
        pulumi.set(self, "is_root_span", value)

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_type")

    @match_type.setter
    def match_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_type", value)

    @property
    @pulumi.getter
    def operation(self) -> Optional[pulumi.Input['TraceMetricsRuleTraceFilterSpanOperationArgs']]:
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: Optional[pulumi.Input['TraceMetricsRuleTraceFilterSpanOperationArgs']]):
        pulumi.set(self, "operation", value)

    @property
    @pulumi.getter(name="parentOperation")
    def parent_operation(self) -> Optional[pulumi.Input['TraceMetricsRuleTraceFilterSpanParentOperationArgs']]:
        return pulumi.get(self, "parent_operation")

    @parent_operation.setter
    def parent_operation(self, value: Optional[pulumi.Input['TraceMetricsRuleTraceFilterSpanParentOperationArgs']]):
        pulumi.set(self, "parent_operation", value)

    @property
    @pulumi.getter(name="parentService")
    def parent_service(self) -> Optional[pulumi.Input['TraceMetricsRuleTraceFilterSpanParentServiceArgs']]:
        return pulumi.get(self, "parent_service")

    @parent_service.setter
    def parent_service(self, value: Optional[pulumi.Input['TraceMetricsRuleTraceFilterSpanParentServiceArgs']]):
        pulumi.set(self, "parent_service", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input['TraceMetricsRuleTraceFilterSpanServiceArgs']]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input['TraceMetricsRuleTraceFilterSpanServiceArgs']]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="spanCount")
    def span_count(self) -> Optional[pulumi.Input['TraceMetricsRuleTraceFilterSpanSpanCountArgs']]:
        return pulumi.get(self, "span_count")

    @span_count.setter
    def span_count(self, value: Optional[pulumi.Input['TraceMetricsRuleTraceFilterSpanSpanCountArgs']]):
        pulumi.set(self, "span_count", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TraceMetricsRuleTraceFilterSpanTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TraceMetricsRuleTraceFilterSpanTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class TraceMetricsRuleTraceFilterSpanDurationArgs:
    def __init__(__self__, *,
                 max_secs: Optional[pulumi.Input[float]] = None,
                 min_secs: Optional[pulumi.Input[float]] = None):
        if max_secs is not None:
            pulumi.set(__self__, "max_secs", max_secs)
        if min_secs is not None:
            pulumi.set(__self__, "min_secs", min_secs)

    @property
    @pulumi.getter(name="maxSecs")
    def max_secs(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max_secs")

    @max_secs.setter
    def max_secs(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_secs", value)

    @property
    @pulumi.getter(name="minSecs")
    def min_secs(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "min_secs")

    @min_secs.setter
    def min_secs(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "min_secs", value)


@pulumi.input_type
class TraceMetricsRuleTraceFilterSpanErrorArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[bool]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[bool]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TraceMetricsRuleTraceFilterSpanIsRootSpanArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[bool]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[bool]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TraceMetricsRuleTraceFilterSpanOperationArgs:
    def __init__(__self__, *,
                 in_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if in_values is not None:
            pulumi.set(__self__, "in_values", in_values)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="inValues")
    def in_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "in_values")

    @in_values.setter
    def in_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "in_values", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TraceMetricsRuleTraceFilterSpanParentOperationArgs:
    def __init__(__self__, *,
                 in_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if in_values is not None:
            pulumi.set(__self__, "in_values", in_values)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="inValues")
    def in_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "in_values")

    @in_values.setter
    def in_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "in_values", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TraceMetricsRuleTraceFilterSpanParentServiceArgs:
    def __init__(__self__, *,
                 in_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if in_values is not None:
            pulumi.set(__self__, "in_values", in_values)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="inValues")
    def in_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "in_values")

    @in_values.setter
    def in_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "in_values", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TraceMetricsRuleTraceFilterSpanServiceArgs:
    def __init__(__self__, *,
                 in_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if in_values is not None:
            pulumi.set(__self__, "in_values", in_values)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="inValues")
    def in_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "in_values")

    @in_values.setter
    def in_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "in_values", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TraceMetricsRuleTraceFilterSpanSpanCountArgs:
    def __init__(__self__, *,
                 max: Optional[pulumi.Input[int]] = None,
                 min: Optional[pulumi.Input[int]] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min", value)


@pulumi.input_type
class TraceMetricsRuleTraceFilterSpanTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 numeric_value: Optional[pulumi.Input['TraceMetricsRuleTraceFilterSpanTagNumericValueArgs']] = None,
                 value: Optional[pulumi.Input['TraceMetricsRuleTraceFilterSpanTagValueArgs']] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if numeric_value is not None:
            pulumi.set(__self__, "numeric_value", numeric_value)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="numericValue")
    def numeric_value(self) -> Optional[pulumi.Input['TraceMetricsRuleTraceFilterSpanTagNumericValueArgs']]:
        return pulumi.get(self, "numeric_value")

    @numeric_value.setter
    def numeric_value(self, value: Optional[pulumi.Input['TraceMetricsRuleTraceFilterSpanTagNumericValueArgs']]):
        pulumi.set(self, "numeric_value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['TraceMetricsRuleTraceFilterSpanTagValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['TraceMetricsRuleTraceFilterSpanTagValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TraceMetricsRuleTraceFilterSpanTagNumericValueArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[float]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TraceMetricsRuleTraceFilterSpanTagValueArgs:
    def __init__(__self__, *,
                 in_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if in_values is not None:
            pulumi.set(__self__, "in_values", in_values)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="inValues")
    def in_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "in_values")

    @in_values.setter
    def in_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "in_values", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TraceMetricsRuleTraceFilterTraceArgs:
    def __init__(__self__, *,
                 duration: Optional[pulumi.Input['TraceMetricsRuleTraceFilterTraceDurationArgs']] = None,
                 error: Optional[pulumi.Input['TraceMetricsRuleTraceFilterTraceErrorArgs']] = None):
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if error is not None:
            pulumi.set(__self__, "error", error)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input['TraceMetricsRuleTraceFilterTraceDurationArgs']]:
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input['TraceMetricsRuleTraceFilterTraceDurationArgs']]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def error(self) -> Optional[pulumi.Input['TraceMetricsRuleTraceFilterTraceErrorArgs']]:
        return pulumi.get(self, "error")

    @error.setter
    def error(self, value: Optional[pulumi.Input['TraceMetricsRuleTraceFilterTraceErrorArgs']]):
        pulumi.set(self, "error", value)


@pulumi.input_type
class TraceMetricsRuleTraceFilterTraceDurationArgs:
    def __init__(__self__, *,
                 max_secs: Optional[pulumi.Input[float]] = None,
                 min_secs: Optional[pulumi.Input[float]] = None):
        if max_secs is not None:
            pulumi.set(__self__, "max_secs", max_secs)
        if min_secs is not None:
            pulumi.set(__self__, "min_secs", min_secs)

    @property
    @pulumi.getter(name="maxSecs")
    def max_secs(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max_secs")

    @max_secs.setter
    def max_secs(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_secs", value)

    @property
    @pulumi.getter(name="minSecs")
    def min_secs(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "min_secs")

    @min_secs.setter
    def min_secs(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "min_secs", value)


@pulumi.input_type
class TraceMetricsRuleTraceFilterTraceErrorArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[bool]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[bool]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TraceTailSamplingRulesDefaultSampleRateArgs:
    def __init__(__self__, *,
                 sample_rate: pulumi.Input[float],
                 enabled: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "sample_rate", sample_rate)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> pulumi.Input[float]:
        return pulumi.get(self, "sample_rate")

    @sample_rate.setter
    def sample_rate(self, value: pulumi.Input[float]):
        pulumi.set(self, "sample_rate", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class TraceTailSamplingRulesRuleArgs:
    def __init__(__self__, *,
                 filter: pulumi.Input['TraceTailSamplingRulesRuleFilterArgs'],
                 sample_rate: pulumi.Input[float],
                 name: Optional[pulumi.Input[str]] = None,
                 system_name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "sample_rate", sample_rate)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if system_name is not None:
            pulumi.set(__self__, "system_name", system_name)

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Input['TraceTailSamplingRulesRuleFilterArgs']:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: pulumi.Input['TraceTailSamplingRulesRuleFilterArgs']):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> pulumi.Input[float]:
        return pulumi.get(self, "sample_rate")

    @sample_rate.setter
    def sample_rate(self, value: pulumi.Input[float]):
        pulumi.set(self, "sample_rate", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="systemName")
    def system_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "system_name")

    @system_name.setter
    def system_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_name", value)


@pulumi.input_type
class TraceTailSamplingRulesRuleFilterArgs:
    def __init__(__self__, *,
                 spans: Optional[pulumi.Input[Sequence[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanArgs']]]] = None,
                 trace: Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterTraceArgs']] = None):
        if spans is not None:
            pulumi.set(__self__, "spans", spans)
        if trace is not None:
            pulumi.set(__self__, "trace", trace)

    @property
    @pulumi.getter
    def spans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanArgs']]]]:
        return pulumi.get(self, "spans")

    @spans.setter
    def spans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanArgs']]]]):
        pulumi.set(self, "spans", value)

    @property
    @pulumi.getter
    def trace(self) -> Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterTraceArgs']]:
        return pulumi.get(self, "trace")

    @trace.setter
    def trace(self, value: Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterTraceArgs']]):
        pulumi.set(self, "trace", value)


@pulumi.input_type
class TraceTailSamplingRulesRuleFilterSpanArgs:
    def __init__(__self__, *,
                 duration: Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanDurationArgs']] = None,
                 error: Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanErrorArgs']] = None,
                 is_root_span: Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanIsRootSpanArgs']] = None,
                 match_type: Optional[pulumi.Input[str]] = None,
                 operation: Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanOperationArgs']] = None,
                 parent_operation: Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanParentOperationArgs']] = None,
                 parent_service: Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanParentServiceArgs']] = None,
                 service: Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanServiceArgs']] = None,
                 span_count: Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanSpanCountArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanTagArgs']]]] = None):
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if error is not None:
            pulumi.set(__self__, "error", error)
        if is_root_span is not None:
            pulumi.set(__self__, "is_root_span", is_root_span)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if operation is not None:
            pulumi.set(__self__, "operation", operation)
        if parent_operation is not None:
            pulumi.set(__self__, "parent_operation", parent_operation)
        if parent_service is not None:
            pulumi.set(__self__, "parent_service", parent_service)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if span_count is not None:
            pulumi.set(__self__, "span_count", span_count)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanDurationArgs']]:
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanDurationArgs']]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def error(self) -> Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanErrorArgs']]:
        return pulumi.get(self, "error")

    @error.setter
    def error(self, value: Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanErrorArgs']]):
        pulumi.set(self, "error", value)

    @property
    @pulumi.getter(name="isRootSpan")
    def is_root_span(self) -> Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanIsRootSpanArgs']]:
        return pulumi.get(self, "is_root_span")

    @is_root_span.setter
    def is_root_span(self, value: Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanIsRootSpanArgs']]):
        pulumi.set(self, "is_root_span", value)

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_type")

    @match_type.setter
    def match_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_type", value)

    @property
    @pulumi.getter
    def operation(self) -> Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanOperationArgs']]:
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanOperationArgs']]):
        pulumi.set(self, "operation", value)

    @property
    @pulumi.getter(name="parentOperation")
    def parent_operation(self) -> Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanParentOperationArgs']]:
        return pulumi.get(self, "parent_operation")

    @parent_operation.setter
    def parent_operation(self, value: Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanParentOperationArgs']]):
        pulumi.set(self, "parent_operation", value)

    @property
    @pulumi.getter(name="parentService")
    def parent_service(self) -> Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanParentServiceArgs']]:
        return pulumi.get(self, "parent_service")

    @parent_service.setter
    def parent_service(self, value: Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanParentServiceArgs']]):
        pulumi.set(self, "parent_service", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanServiceArgs']]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanServiceArgs']]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="spanCount")
    def span_count(self) -> Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanSpanCountArgs']]:
        return pulumi.get(self, "span_count")

    @span_count.setter
    def span_count(self, value: Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanSpanCountArgs']]):
        pulumi.set(self, "span_count", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class TraceTailSamplingRulesRuleFilterSpanDurationArgs:
    def __init__(__self__, *,
                 max_secs: Optional[pulumi.Input[float]] = None,
                 min_secs: Optional[pulumi.Input[float]] = None):
        if max_secs is not None:
            pulumi.set(__self__, "max_secs", max_secs)
        if min_secs is not None:
            pulumi.set(__self__, "min_secs", min_secs)

    @property
    @pulumi.getter(name="maxSecs")
    def max_secs(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max_secs")

    @max_secs.setter
    def max_secs(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_secs", value)

    @property
    @pulumi.getter(name="minSecs")
    def min_secs(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "min_secs")

    @min_secs.setter
    def min_secs(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "min_secs", value)


@pulumi.input_type
class TraceTailSamplingRulesRuleFilterSpanErrorArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[bool]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[bool]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TraceTailSamplingRulesRuleFilterSpanIsRootSpanArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[bool]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[bool]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TraceTailSamplingRulesRuleFilterSpanOperationArgs:
    def __init__(__self__, *,
                 in_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if in_values is not None:
            pulumi.set(__self__, "in_values", in_values)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="inValues")
    def in_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "in_values")

    @in_values.setter
    def in_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "in_values", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TraceTailSamplingRulesRuleFilterSpanParentOperationArgs:
    def __init__(__self__, *,
                 in_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if in_values is not None:
            pulumi.set(__self__, "in_values", in_values)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="inValues")
    def in_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "in_values")

    @in_values.setter
    def in_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "in_values", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TraceTailSamplingRulesRuleFilterSpanParentServiceArgs:
    def __init__(__self__, *,
                 in_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if in_values is not None:
            pulumi.set(__self__, "in_values", in_values)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="inValues")
    def in_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "in_values")

    @in_values.setter
    def in_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "in_values", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TraceTailSamplingRulesRuleFilterSpanServiceArgs:
    def __init__(__self__, *,
                 in_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if in_values is not None:
            pulumi.set(__self__, "in_values", in_values)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="inValues")
    def in_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "in_values")

    @in_values.setter
    def in_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "in_values", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TraceTailSamplingRulesRuleFilterSpanSpanCountArgs:
    def __init__(__self__, *,
                 max: Optional[pulumi.Input[int]] = None,
                 min: Optional[pulumi.Input[int]] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min", value)


@pulumi.input_type
class TraceTailSamplingRulesRuleFilterSpanTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 numeric_value: Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanTagNumericValueArgs']] = None,
                 value: Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanTagValueArgs']] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if numeric_value is not None:
            pulumi.set(__self__, "numeric_value", numeric_value)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="numericValue")
    def numeric_value(self) -> Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanTagNumericValueArgs']]:
        return pulumi.get(self, "numeric_value")

    @numeric_value.setter
    def numeric_value(self, value: Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanTagNumericValueArgs']]):
        pulumi.set(self, "numeric_value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanTagValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterSpanTagValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TraceTailSamplingRulesRuleFilterSpanTagNumericValueArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 value: pulumi.Input[float]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TraceTailSamplingRulesRuleFilterSpanTagValueArgs:
    def __init__(__self__, *,
                 in_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if in_values is not None:
            pulumi.set(__self__, "in_values", in_values)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="inValues")
    def in_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "in_values")

    @in_values.setter
    def in_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "in_values", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TraceTailSamplingRulesRuleFilterTraceArgs:
    def __init__(__self__, *,
                 duration: Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterTraceDurationArgs']] = None,
                 error: Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterTraceErrorArgs']] = None):
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if error is not None:
            pulumi.set(__self__, "error", error)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterTraceDurationArgs']]:
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterTraceDurationArgs']]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def error(self) -> Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterTraceErrorArgs']]:
        return pulumi.get(self, "error")

    @error.setter
    def error(self, value: Optional[pulumi.Input['TraceTailSamplingRulesRuleFilterTraceErrorArgs']]):
        pulumi.set(self, "error", value)


@pulumi.input_type
class TraceTailSamplingRulesRuleFilterTraceDurationArgs:
    def __init__(__self__, *,
                 max_secs: Optional[pulumi.Input[float]] = None,
                 min_secs: Optional[pulumi.Input[float]] = None):
        if max_secs is not None:
            pulumi.set(__self__, "max_secs", max_secs)
        if min_secs is not None:
            pulumi.set(__self__, "min_secs", min_secs)

    @property
    @pulumi.getter(name="maxSecs")
    def max_secs(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max_secs")

    @max_secs.setter
    def max_secs(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_secs", value)

    @property
    @pulumi.getter(name="minSecs")
    def min_secs(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "min_secs")

    @min_secs.setter
    def min_secs(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "min_secs", value)


@pulumi.input_type
class TraceTailSamplingRulesRuleFilterTraceErrorArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[bool]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[bool]):
        pulumi.set(self, "value", value)


