# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TraceJaegerRemoteSamplingStrategyArgs', 'TraceJaegerRemoteSamplingStrategy']

@pulumi.input_type
class TraceJaegerRemoteSamplingStrategyArgs:
    def __init__(__self__, *,
                 applied_strategy: pulumi.Input['TraceJaegerRemoteSamplingStrategyAppliedStrategyArgs'],
                 name: pulumi.Input[str],
                 service_name: pulumi.Input[str],
                 slug: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a TraceJaegerRemoteSamplingStrategy resource.
        """
        pulumi.set(__self__, "applied_strategy", applied_strategy)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service_name", service_name)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="appliedStrategy")
    def applied_strategy(self) -> pulumi.Input['TraceJaegerRemoteSamplingStrategyAppliedStrategyArgs']:
        return pulumi.get(self, "applied_strategy")

    @applied_strategy.setter
    def applied_strategy(self, value: pulumi.Input['TraceJaegerRemoteSamplingStrategyAppliedStrategyArgs']):
        pulumi.set(self, "applied_strategy", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)


@pulumi.input_type
class _TraceJaegerRemoteSamplingStrategyState:
    def __init__(__self__, *,
                 applied_strategy: Optional[pulumi.Input['TraceJaegerRemoteSamplingStrategyAppliedStrategyArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering TraceJaegerRemoteSamplingStrategy resources.
        """
        if applied_strategy is not None:
            pulumi.set(__self__, "applied_strategy", applied_strategy)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="appliedStrategy")
    def applied_strategy(self) -> Optional[pulumi.Input['TraceJaegerRemoteSamplingStrategyAppliedStrategyArgs']]:
        return pulumi.get(self, "applied_strategy")

    @applied_strategy.setter
    def applied_strategy(self, value: Optional[pulumi.Input['TraceJaegerRemoteSamplingStrategyAppliedStrategyArgs']]):
        pulumi.set(self, "applied_strategy", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)


class TraceJaegerRemoteSamplingStrategy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 applied_strategy: Optional[pulumi.Input[pulumi.InputType['TraceJaegerRemoteSamplingStrategyAppliedStrategyArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a TraceJaegerRemoteSamplingStrategy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TraceJaegerRemoteSamplingStrategyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a TraceJaegerRemoteSamplingStrategy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param TraceJaegerRemoteSamplingStrategyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TraceJaegerRemoteSamplingStrategyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 applied_strategy: Optional[pulumi.Input[pulumi.InputType['TraceJaegerRemoteSamplingStrategyAppliedStrategyArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TraceJaegerRemoteSamplingStrategyArgs.__new__(TraceJaegerRemoteSamplingStrategyArgs)

            if applied_strategy is None and not opts.urn:
                raise TypeError("Missing required property 'applied_strategy'")
            __props__.__dict__["applied_strategy"] = applied_strategy
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            if service_name is None and not opts.urn:
                raise TypeError("Missing required property 'service_name'")
            __props__.__dict__["service_name"] = service_name
            __props__.__dict__["slug"] = slug
        super(TraceJaegerRemoteSamplingStrategy, __self__).__init__(
            'chronosphere:index/traceJaegerRemoteSamplingStrategy:TraceJaegerRemoteSamplingStrategy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            applied_strategy: Optional[pulumi.Input[pulumi.InputType['TraceJaegerRemoteSamplingStrategyAppliedStrategyArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            service_name: Optional[pulumi.Input[str]] = None,
            slug: Optional[pulumi.Input[str]] = None) -> 'TraceJaegerRemoteSamplingStrategy':
        """
        Get an existing TraceJaegerRemoteSamplingStrategy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TraceJaegerRemoteSamplingStrategyState.__new__(_TraceJaegerRemoteSamplingStrategyState)

        __props__.__dict__["applied_strategy"] = applied_strategy
        __props__.__dict__["name"] = name
        __props__.__dict__["service_name"] = service_name
        __props__.__dict__["slug"] = slug
        return TraceJaegerRemoteSamplingStrategy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appliedStrategy")
    def applied_strategy(self) -> pulumi.Output['outputs.TraceJaegerRemoteSamplingStrategyAppliedStrategy']:
        return pulumi.get(self, "applied_strategy")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        return pulumi.get(self, "slug")

