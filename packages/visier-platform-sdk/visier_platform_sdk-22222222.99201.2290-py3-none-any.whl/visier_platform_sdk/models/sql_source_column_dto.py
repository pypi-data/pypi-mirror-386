# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99201.2290
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SqlSourceColumnDTO(BaseModel):
    """
    SqlSourceColumnDTO
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The name of the column. This is used in SQL queries to refer to the column.")
    data_type: Optional[StrictStr] = Field(default=None, description="The SQL type of data stored in the column.  * `UNSPECIFIED`: The data type is unspecified.  * `STRING`: The data type is a string.  * `TENANT_ID`: The data type is a tenant ID.  * `INTEGER`: The data type is an integer.  * `LONG`: The data type is a long value.  * `DOUBLE`: The data type is a double.  * `DECIMAL`: The data type is a decimal.  * `BOOLEAN`: The data type is a Boolean value.  * `DATE_TIME`: The data type is a date and time value.   * `DATE`: The data type is date.  * `JSON`: The data type is in JSON format.", alias="dataType")
    is_primary_timestamp: Optional[StrictBool] = Field(default=None, description="If `true`, this column determines the overall timestamp of the data contained within the row. This is used for time-based partitioning.", alias="isPrimaryTimestamp")
    __properties: ClassVar[List[str]] = ["name", "dataType", "isPrimaryTimestamp"]

    @field_validator('data_type')
    def data_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'STRING', 'TENANT_ID', 'INTEGER', 'LONG', 'DOUBLE', 'DECIMAL', 'BOOLEAN', 'DATE_TIME', 'DATE', 'JSON']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'STRING', 'TENANT_ID', 'INTEGER', 'LONG', 'DOUBLE', 'DECIMAL', 'BOOLEAN', 'DATE_TIME', 'DATE', 'JSON')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SqlSourceColumnDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SqlSourceColumnDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "dataType": obj.get("dataType"),
            "isPrimaryTimestamp": obj.get("isPrimaryTimestamp")
        })
        return _obj


