# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99201.2290
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from visier_platform_sdk.models.sql_source_action_dto import SqlSourceActionDTO
from visier_platform_sdk.models.sql_source_input_dto import SqlSourceInputDTO
from typing import Optional, Set
from typing_extensions import Self

class SqlSourceExecuteJobRequestDTO(BaseModel):
    """
    SqlSourceExecuteJobRequestDTO
    """ # noqa: E501
    actions: Optional[List[SqlSourceActionDTO]] = Field(default=None, description="The actions to execute within the job, in order.")
    tenants: Optional[List[StrictStr]] = Field(default=None, description="The tenants to schedule the job for. If not specified, schedules for the current tenant only.")
    inputs: Optional[List[SqlSourceInputDTO]] = Field(default=None, description="The input files to make available to the job.")
    keep_transaction_open_on_error: Optional[StrictBool] = Field(default=None, description="If `true`, keep the transaction open if an error occurs while executing the job. The default is to rollback the transaction.", alias="keepTransactionOpenOnError")
    __properties: ClassVar[List[str]] = ["actions", "tenants", "inputs", "keepTransactionOpenOnError"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SqlSourceExecuteJobRequestDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in actions (list)
        _items = []
        if self.actions:
            for _item_actions in self.actions:
                if _item_actions:
                    _items.append(_item_actions.to_dict())
            _dict['actions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in inputs (list)
        _items = []
        if self.inputs:
            for _item_inputs in self.inputs:
                if _item_inputs:
                    _items.append(_item_inputs.to_dict())
            _dict['inputs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SqlSourceExecuteJobRequestDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actions": [SqlSourceActionDTO.from_dict(_item) for _item in obj["actions"]] if obj.get("actions") is not None else None,
            "tenants": obj.get("tenants"),
            "inputs": [SqlSourceInputDTO.from_dict(_item) for _item in obj["inputs"]] if obj.get("inputs") is not None else None,
            "keepTransactionOpenOnError": obj.get("keepTransactionOpenOnError")
        })
        return _obj


