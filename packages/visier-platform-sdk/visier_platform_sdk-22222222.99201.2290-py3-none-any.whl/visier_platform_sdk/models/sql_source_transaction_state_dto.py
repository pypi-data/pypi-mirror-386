# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99201.2290
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SqlSourceTransactionStateDTO(BaseModel):
    """
    SqlSourceTransactionStateDTO
    """ # noqa: E501
    transaction_id: Optional[StrictStr] = Field(default=None, description="The transaction ID.", alias="transactionId")
    status: Optional[StrictStr] = Field(default=None, description="The current status of the transaction.  * `UNSPECIFIED`: The transaction is in an unspecified state.  * `OPEN`: The transaction is open and can accept new actions.  * `CLOSED`: The transaction is closed and cannot accept new actions.  * `COMMITTED`: The transaction has been committed and is closed.  * `ROLLED_BACK`: The transaction has been rolled back and is closed.")
    created_at: Optional[StrictStr] = Field(default=None, description="The timestamp when the transaction was created in ISO 8601 format.", alias="createdAt")
    created_by: Optional[StrictStr] = Field(default=None, description="The name of the user who created the transaction.", alias="createdBy")
    expire_at: Optional[StrictStr] = Field(default=None, description="The timestamp when the transaction will expire in ISO 8601 format.", alias="expireAt")
    started_at: Optional[StrictStr] = Field(default=None, description="The timestamp when work began on the transaction in ISO 8601 format.", alias="startedAt")
    closed_at: Optional[StrictStr] = Field(default=None, description="The timestamp when the transaction was closed in ISO 8601 format.", alias="closedAt")
    tables_to_modify: Optional[List[StrictStr]] = Field(default=None, description="The tables to modify in the transaction.", alias="tablesToModify")
    __properties: ClassVar[List[str]] = ["transactionId", "status", "createdAt", "createdBy", "expireAt", "startedAt", "closedAt", "tablesToModify"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'OPEN', 'CLOSED', 'COMMITTED', 'ROLLED_BACK']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'OPEN', 'CLOSED', 'COMMITTED', 'ROLLED_BACK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SqlSourceTransactionStateDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SqlSourceTransactionStateDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "transactionId": obj.get("transactionId"),
            "status": obj.get("status"),
            "createdAt": obj.get("createdAt"),
            "createdBy": obj.get("createdBy"),
            "expireAt": obj.get("expireAt"),
            "startedAt": obj.get("startedAt"),
            "closedAt": obj.get("closedAt"),
            "tablesToModify": obj.get("tablesToModify")
        })
        return _obj


