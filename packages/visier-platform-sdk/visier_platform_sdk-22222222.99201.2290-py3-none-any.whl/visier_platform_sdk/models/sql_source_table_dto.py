# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99201.2290
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from visier_platform_sdk.models.basic_information_dto import BasicInformationDTO
from visier_platform_sdk.models.sql_source_column_dto import SqlSourceColumnDTO
from typing import Optional, Set
from typing_extensions import Self

class SqlSourceTableDTO(BaseModel):
    """
    SqlSourceTableDTO
    """ # noqa: E501
    uuid: Optional[StrictStr] = Field(default=None, description="The unique identifier for the table. This UUID is generated automatically when the table is created and cannot be changed.  Do not provide a value when creating a new table.")
    object_name: Optional[StrictStr] = Field(default=None, description="The object name for the table. This determines the name of the table accessible from SQL.", alias="objectName")
    basic_information: Optional[BasicInformationDTO] = Field(default=None, description="Fields that identify and describe the table, such as its display name, description, and explanation.", alias="basicInformation")
    columns: Optional[List[SqlSourceColumnDTO]] = Field(default=None, description="The columns contained within the table.")
    can_children_inherit: Optional[StrictBool] = Field(default=None, description="If `true`, analytic tenants inherit the table definition. To also inherit the table data, set `canChildrenInheritData` to `true`. Default is `false`.", alias="canChildrenInherit")
    can_children_inherit_data: Optional[StrictBool] = Field(default=None, description="If `true`, analytic tenants inherit the table data. Analytic tenants can read the data but cannot write to it. Default is `false`.", alias="canChildrenInheritData")
    __properties: ClassVar[List[str]] = ["uuid", "objectName", "basicInformation", "columns", "canChildrenInherit", "canChildrenInheritData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SqlSourceTableDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of basic_information
        if self.basic_information:
            _dict['basicInformation'] = self.basic_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in columns (list)
        _items = []
        if self.columns:
            for _item_columns in self.columns:
                if _item_columns:
                    _items.append(_item_columns.to_dict())
            _dict['columns'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SqlSourceTableDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "objectName": obj.get("objectName"),
            "basicInformation": BasicInformationDTO.from_dict(obj["basicInformation"]) if obj.get("basicInformation") is not None else None,
            "columns": [SqlSourceColumnDTO.from_dict(_item) for _item in obj["columns"]] if obj.get("columns") is not None else None,
            "canChildrenInherit": obj.get("canChildrenInherit"),
            "canChildrenInheritData": obj.get("canChildrenInheritData")
        })
        return _obj


