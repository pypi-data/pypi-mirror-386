# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99201.2290
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from visier_platform_sdk.models.sql_source_capture_changes_action_dto import SqlSourceCaptureChangesActionDTO
from visier_platform_sdk.models.sql_source_process_action_dto import SqlSourceProcessActionDTO
from visier_platform_sdk.models.sql_source_query_action_dto import SqlSourceQueryActionDTO
from visier_platform_sdk.models.sql_source_replace_action_dto import SqlSourceReplaceActionDTO
from visier_platform_sdk.models.sql_source_upsert_action_dto import SqlSourceUpsertActionDTO
from typing import Optional, Set
from typing_extensions import Self

class SqlSourceActionDTO(BaseModel):
    """
    An individual action to execute within a SQL job.
    """ # noqa: E501
    query: Optional[SqlSourceQueryActionDTO] = None
    upsert: Optional[SqlSourceUpsertActionDTO] = None
    replace: Optional[SqlSourceReplaceActionDTO] = None
    capture_changes: Optional[SqlSourceCaptureChangesActionDTO] = Field(default=None, alias="captureChanges")
    rollback: Optional[Dict[str, Any]] = Field(default=None, description="A rollback action.")
    commit: Optional[Dict[str, Any]] = Field(default=None, description="A commit action.")
    process: Optional[SqlSourceProcessActionDTO] = None
    __properties: ClassVar[List[str]] = ["query", "upsert", "replace", "captureChanges", "rollback", "commit", "process"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SqlSourceActionDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of query
        if self.query:
            _dict['query'] = self.query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of upsert
        if self.upsert:
            _dict['upsert'] = self.upsert.to_dict()
        # override the default output from pydantic by calling `to_dict()` of replace
        if self.replace:
            _dict['replace'] = self.replace.to_dict()
        # override the default output from pydantic by calling `to_dict()` of capture_changes
        if self.capture_changes:
            _dict['captureChanges'] = self.capture_changes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of process
        if self.process:
            _dict['process'] = self.process.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SqlSourceActionDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "query": SqlSourceQueryActionDTO.from_dict(obj["query"]) if obj.get("query") is not None else None,
            "upsert": SqlSourceUpsertActionDTO.from_dict(obj["upsert"]) if obj.get("upsert") is not None else None,
            "replace": SqlSourceReplaceActionDTO.from_dict(obj["replace"]) if obj.get("replace") is not None else None,
            "captureChanges": SqlSourceCaptureChangesActionDTO.from_dict(obj["captureChanges"]) if obj.get("captureChanges") is not None else None,
            "rollback": obj.get("rollback"),
            "commit": obj.get("commit"),
            "process": SqlSourceProcessActionDTO.from_dict(obj["process"]) if obj.get("process") is not None else None
        })
        return _obj


