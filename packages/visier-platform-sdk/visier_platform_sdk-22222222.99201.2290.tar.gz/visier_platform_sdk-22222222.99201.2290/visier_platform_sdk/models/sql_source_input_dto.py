# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99201.2290
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from visier_platform_sdk.models.sql_source_io_format_dto import SqlSourceIoFormatDTO
from typing import Optional, Set
from typing_extensions import Self

class SqlSourceInputDTO(BaseModel):
    """
    SqlSourceInputDTO
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The name to give the input view in SQL.")
    filename: Optional[StrictStr] = Field(default=None, description="The name of the input file.")
    format: Optional[SqlSourceIoFormatDTO] = Field(default=None, description="The format and parameters to use to read the input file.")
    tenant_code_column: Optional[StrictStr] = Field(default=None, description="The tenant code column to use when multiple tenants are specified.", alias="tenantCodeColumn")
    prepend_admin_tenant_code: Optional[StrictBool] = Field(default=None, description="If `true`, the tenant codes in the column/filename do not include the parent tenant prefix.", alias="prependAdminTenantCode")
    input_distribution_mode: Optional[StrictStr] = Field(default=None, description="Describes how to distribute input data among tenants. Required when multiple tenants are specified. Valid values:  - `NO_DISTRIBUTION`: Don't distribute to multiple tenants. Files must be uploaded directly to their target tenant.  - `DISTRIBUTE_FILES`: Distribute to multiple tenants based on the file path. The input filename must exist under subdirectories.  - `DISTRIBUTE_ROWS`: Distribute to multiple tenants by splitting rows to each tenant based on the tenant code column.", alias="inputDistributionMode")
    file_container_name: Optional[StrictStr] = Field(default=None, description="Indicates if the file exists in a container and the container name.", alias="fileContainerName")
    __properties: ClassVar[List[str]] = ["id", "filename", "format", "tenantCodeColumn", "prependAdminTenantCode", "inputDistributionMode", "fileContainerName"]

    @field_validator('input_distribution_mode')
    def input_distribution_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NO_DISTRIBUTION', 'DISTRIBUTE_FILES', 'DISTRIBUTE_ROWS']):
            raise ValueError("must be one of enum values ('NO_DISTRIBUTION', 'DISTRIBUTE_FILES', 'DISTRIBUTE_ROWS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SqlSourceInputDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of format
        if self.format:
            _dict['format'] = self.format.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SqlSourceInputDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "filename": obj.get("filename"),
            "format": SqlSourceIoFormatDTO.from_dict(obj["format"]) if obj.get("format") is not None else None,
            "tenantCodeColumn": obj.get("tenantCodeColumn"),
            "prependAdminTenantCode": obj.get("prependAdminTenantCode"),
            "inputDistributionMode": obj.get("inputDistributionMode"),
            "fileContainerName": obj.get("fileContainerName")
        })
        return _obj


