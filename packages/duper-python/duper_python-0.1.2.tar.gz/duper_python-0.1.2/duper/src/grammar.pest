//! The parser rules used to build the Duper abstract syntax tree (AST).

// -- WHITESPACE --

/// Matches whitespace, which is ignored.
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

/// Matches a comment, which is ignored.
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* | "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

// -- ROOT --

/// Matches a Duper trunk value, i.e. an object or array, at the root of the input.
duper_trunk = { SOI ~ (identifier ~ "(" ~ (object | array) ~ ")" | object | array) ~ EOI }

/// Matches any Duper value at the root of the input.
duper_value = _{ SOI ~ described_value ~ EOI }

// -- VALUES --

/// Matches an identifier for a Duper value.
identifier = @{ UPPERCASE_LETTER ~ (("-" | "_")? ~ LETTER | NUMBER)* }

/// Matches a value with an optional identifier.
described_value = { identifier ~ "(" ~ value ~ ")" | value }

/// Matches any valid inner value.
value = _{ object | array | tuple | quoted_string | raw_string | quoted_bytes | raw_bytes | float | integer | boolean | null }

// -- OBJECTS --

/// Matches a Duper object.
object = {
    "{" ~ ","? ~ "}"
  | "{" ~ pair ~ ("," ~ pair)* ~ ","? ~ "}"
}

/// Matches a Duper object's key-value pair.
pair = { key ~ ":" ~ described_value }

/// Matches a Duper object's key, which may be plain, quoted, or raw.
key = _{ quoted_string | raw_string | plain_key }

/// Matches a Duper object's plain key.
plain_key = @{ (ASCII_ALPHA | "_" ~ ASCII_ALPHANUMERIC) ~ (("_" | "-")? ~ ASCII_ALPHANUMERIC)* }

// -- TUPLES AND ARRAYS --

/// Matches a Duper tuple.
tuple = {
    "(" ~ ","? ~ ")"
  | "(" ~ described_value ~ ("," ~ described_value)* ~ ","? ~ ")"
}

/// Matches a Duper array.
array = {
    "[" ~ ","? ~ "]"
  | "[" ~ described_value ~ ("," ~ described_value)* ~ ","? ~ "]"
}

// -- STRINGS AND BYTE STRINGS --

/// Matches the characters inside a quoted string or a quoted byte string.
quoted_inner = @{ char* }

/// Matches the individual characters in a quoted string or a quoted byte string.
char = {
    !("\"" | "\\") ~ ANY
  | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t" | "0")
  | "\\" ~ ("x" ~ ASCII_HEX_DIGIT{2})
  | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

/// Matches a quoted string.
quoted_string = ${ "\"" ~ quoted_inner ~ "\"" }

/// Matches a quoted byte string.
quoted_bytes = ${ "b\"" ~ quoted_inner ~ "\"" }

/// Matches a raw string.
raw_string = ${
    "r" ~ PUSH("#"*) ~ "\"" ~ raw_inner ~ "\"" ~ POP
}

/// Matches a raw byte string.
raw_bytes = ${
    "br" ~ PUSH("#"*) ~ "\"" ~ raw_inner ~ "\"" ~ POP
}

/// Matches the characters inside a raw string or a raw byte string.
raw_inner = @{ (!("\"" ~ PEEK) ~ ANY)* }

// -- INTEGERS --

/// Matches an integer.
integer = { hex_integer | octal_integer | binary_integer | decimal_integer }

/// Matches a decimal integer.
decimal_integer = @{ ("+" | "-")? ~ decimal_digits }

/// Matches the digits of a decimal integer.
decimal_digits = { "0" | ASCII_NONZERO_DIGIT ~ ("_"? ~ ASCII_DIGIT)* }

/// Matches a hexadecimal integer.
hex_integer = @{ "0x" ~ hex_digits }

/// Matches the digits of a hexadecimal integer.
hex_digits = { ASCII_HEX_DIGIT ~ ("_"? ~ ASCII_HEX_DIGIT)* }

/// Matches an octal integer.
octal_integer = @{ "0o" ~ octal_digits }

/// Matches the digits of an octal integer.
octal_digits = { ASCII_OCT_DIGIT ~ ("_"? ~ ASCII_OCT_DIGIT)* }

/// Matches a binary integer.
binary_integer = @{ "0b" ~ binary_digits }

/// Matches the digits of a binary integer.
binary_digits = { ASCII_BIN_DIGIT ~ ("_"? ~ ASCII_BIN_DIGIT)* }

// -- FLOATING POINT NUMBERS --

/// Matches a floating point number.
float = @{
    ("+" | "-")? ~ ("0" | ASCII_NONZERO_DIGIT ~ ("_"? ~ ASCII_DIGIT)*) ~ ((decimal ~ exponent?) | (decimal? ~ exponent))
}

/// Matches the decimal part of a floating point number (i.e. the numbers after the period).
decimal = { "." ~ ASCII_DIGIT ~ ("_"? ~ ASCII_DIGIT)* ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT ~ ("_"? ~ ASCII_DIGIT)*)? }

/// Matches the exponent of a floating point number.
exponent = { ^"e" ~ ("+" | "-")? ~ ASCII_DIGIT ~ ("_"? ~ ASCII_DIGIT)* }

// -- BOOLEANS AND NULL --

/// Matches a boolean.
boolean = { "true" | "false" }

/// Matches a null value.
null = { "null" }
