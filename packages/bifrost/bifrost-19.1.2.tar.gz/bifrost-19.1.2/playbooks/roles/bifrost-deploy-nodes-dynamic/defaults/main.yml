---
# defaults file for bifrost-deploy-nodes-dynamic
file_url_port: "8080"
network_interface: "virbr0"
ans_network_interface: "{{ network_interface | replace('-', '_') }}"
ans_hostname: "{{ groups['target'][0] if groups['target'] is defined else 'localhost' }}"
internal_ip: "{{ hostvars[ans_hostname]['ansible_' + ans_network_interface]['ipv4']['address'] }}"

http_boot_folder: "/var/lib/ironic/httpboot"
deploy_image_filename: "deployment_image.qcow2"
# Backward compatibility: used to be called deploy_image
deploy_image_path: "{{ deploy_image | default(http_boot_folder + '/' + deploy_image_filename) }}"
deploy_image_source: "{{ deploy_url_protocol }}://{{ internal_ip }}:{{ file_url_port }}/{{ deploy_image_filename }}"
deploy_root_gb: 10
deploy_url_protocol: "http"

# Under normal circumstances, the os_ironic_node module does not wait for
# the node to reach active state before continuing with the deployment
# process.  This means we may have to timeout, to figure out a deployment
# failed.  Change wait_for_node_deploy to true to cause bifrost to wait for
# Ironic to show the instance in Active state.
wait_for_node_deploy: false
wait_timeout: 1800

# Timeout for gathering facts.
fact_gather_timeout: "{{ lookup('config', 'DEFAULT_GATHER_TIMEOUT', on_missing='skip') | default(omit, true) }}"

# Ensure that Ansible is using python interpreter and dependencies inside the bifrost virtual environment
bifrost_venv_dir: "{{ lookup('env', 'VENV') or '/opt/stack/bifrost' }}"
ansible_python_interpreter: "{{ bifrost_venv_dir + '/bin/python3' }}"
