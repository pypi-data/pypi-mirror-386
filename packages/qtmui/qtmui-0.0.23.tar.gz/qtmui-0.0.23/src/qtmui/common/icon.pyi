from enum import Enum
from typing import Union
from qtpy.QtXml import QDomDocument
from qtpy.QtCore import QRectF, Qt, QFile, QObject, QRect
from qtpy.QtGui import QIcon, QIconEngine, QColor, QPixmap, QImage, QPainter, QAction
from qtpy.QtSvg import QSvgRenderer
from .config import isDarkTheme, Theme
from .overload import singledispatchmethod
class FluentIconEngine:
    def __init__(self, icon, reverse): ...
    def paint(self, painter, rect, mode, state): ...
class SvgIconEngine:
    def __init__(self, svg: str): ...
    def paint(self, painter, rect, mode, state): ...
    def clone(self): ...
    def pixmap(self, size, mode, state): ...
def getIconColor(theme, reverse): ...
def drawSvgIcon(icon, painter, rect): ...
def writeSvg(iconPath: str, indexes, **attributes): ...
def drawIcon(icon, painter, rect, state, **attributes): ...
class FluentIconBase:
    def path(self, theme): ...
    def icon(self, theme, color: QColor): ...
    def icon_(self, path, color: QColor): ...
    def qicon(self, reverse): ...
    def render(self, painter, rect, theme, indexes, **attributes): ...
class FluentIcon:
    def path(self, theme): ...
class Icon:
    def __init__(self, fluentIcon: FluentIcon): ...
def toQIcon(icon: Union[QIcon, FluentIconBase, str]): ...
class Action:
    def __init__(self, parent: QObject, **kwargs): ...
    def _(self, text: str, parent: QObject, **kwargs): ...
    def _(self, icon: QIcon, text: str, parent: QObject, **kwargs): ...
    def _(self, icon: FluentIconBase, text: str, parent: QObject, **kwargs): ...
    def icon(self): ...
    def setIcon(self, icon: Union[FluentIconBase, QIcon]): ...