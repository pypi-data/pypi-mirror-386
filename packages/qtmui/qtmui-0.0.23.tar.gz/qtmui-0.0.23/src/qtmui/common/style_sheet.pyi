from enum import Enum
from string import Template
from typing import List, Union
import weakref
from qtpy.QtCore import QFile, QObject, QEvent
from qtpy.QtGui import QColor
from qtpy.QtWidgets import QWidget
from .config import qconfig, Theme, isDarkTheme
class StyleSheetManager:
    def __init__(self): ...
    def register(self, source, widget: QWidget, reset): ...
    def deregister(self, widget: QWidget): ...
    def items(self): ...
    def source(self, widget: QWidget): ...
class QssTemplate:
def applyThemeColor(qss: str): ...
class StyleSheetBase:
    def path(self, theme): ...
    def content(self, theme): ...
    def apply(self, widget: QWidget, theme): ...
class FluentStyleSheet:
    def path(self, theme): ...
class StyleSheetFile:
    def __init__(self, path: str): ...
    def path(self, theme): ...
class CustomStyleSheet:
    def __init__(self, widget: QWidget): ...
    def path(self, theme): ...
    def __eq__(self, other: object): ...
    def setCustomStyleSheet(self, lightQss: str, darkQss: str): ...
    def setLightStyleSheet(self, qss: str): ...
    def setDarkStyleSheet(self, qss: str): ...
    def lightStyleSheet(self): ...
    def darkStyleSheet(self): ...
    def content(self, theme): ...
class CustomStyleSheetWatcher:
    def eventFilter(self, obj: QWidget, e: QEvent): ...
class StyleSheetCompose:
    def __init__(self, sources: List[StyleSheetBase]): ...
    def content(self, theme): ...
    def add(self, source: StyleSheetBase): ...
    def remove(self, source: StyleSheetBase): ...
def getStyleSheetFromFile(file: Union[str, QFile]): ...
def getStyleSheet(source: Union[str, StyleSheetBase], theme): ...
def setStyleSheet(widget: QWidget, source: Union[str, StyleSheetBase], theme, register): ...
def setCustomStyleSheet(widget: QWidget, lightQss: str, darkQss: str): ...
def addStyleSheet(widget: QWidget, source: Union[str, StyleSheetBase], theme, register): ...
def updateStyleSheet(): ...
def setTheme(theme: Theme, save): ...
def toggleTheme(save): ...
class ThemeColor:
    def name(self): ...
    def color(self): ...
def themeColor(): ...
def setThemeColor(color, save): ...