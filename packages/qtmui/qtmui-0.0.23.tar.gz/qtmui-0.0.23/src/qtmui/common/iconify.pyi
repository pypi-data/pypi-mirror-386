from __future__ import annotations
from enum import Enum
from typing import Union, Literal
import warnings
from typing import TYPE_CHECKING
from qtpy.QtXml import QDomDocument
from qtpy.QtCore import QRectF, Qt, QFile, QObject, QRect, QSize
from qtpy.QtGui import QIcon, QIconEngine, QColor, QPixmap, QImage, QPainter, QAction
from qtpy.QtSvg import QSvgRenderer
from qtpy.QtWidgets import QApplication
import random
import re
class Iconify:
    def __init__(self, *key): ...
    def addKey(self, *key): ...
    def _draw_text_fallback(self, key: tuple[str, Any]): ...
def writeSvg(iconPath: str, indexes, **attributes): ...
def changeSvgFill(iconPath: str, indexes, **attributes): ...
def drawSvgIcon(icon, painter, rect): ...
class SvgIconEngine:
    def __init__(self, svg: str): ...
    def paint(self, painter, rect, mode, state): ...
    def clone(self): ...
    def pixmap(self, size, mode, state): ...
class DrawSVG:
    def path(self): ...
    def icon(self, path, color: Any): ...
    def render(self, painter: QPainter, rect: Any, icon: str, indexes, **attributes): ...
class IconPath:
    def path(self): ...
class Icon:
    def __init__(self, icon_path: IconPath): ...
def paintIcon(painter: QPainter, rect: Any, opacity: int, **attributes): ...
def drawIcon(icon, painter, rect, state, **attributes): ...