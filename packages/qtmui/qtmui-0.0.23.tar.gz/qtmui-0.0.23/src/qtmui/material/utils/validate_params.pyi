from typing import Any, Optional, Union, Dict, List, get_args, get_origin
from qtmui.errors import PyMuiValidationError
from qtmui.hooks import State
from qtpy.QtWidgets import QWidget
def validate_positive_integer(param_name: str, value: Optional[Union[int, State]], allow_none: bool, **kwargs): ...
def validate_positive_number(param_name: str, value: Optional[Union[int, float, State]], allow_none: bool, **kwargs): ...
def validate_non_negative_number(param_name: str, value: Optional[Union[int, float, State]], allow_none: bool, **kwargs): ...
def validate_spacing(param_name: str, value: Optional[Union[int, Dict, State]], allow_none: bool, **kwargs): ...
def validate_sx(param_name: str, value: Optional[Union[State, str, Dict]], allow_none: bool, **kwargs): ...
def validate_bool(param_name: str, value: Optional[Union[bool, State]], allow_none: bool, **kwargs): ...
def validate_string(param_name: str, value: Optional[Union[str, State]], allow_none: bool, **kwargs): ...
def validate_choice(param_name: str, value: Optional[Union[str, State]], valid_values: List[str], allow_none: bool, **kwargs): ...
def validate_dict_with_positive_integers(param_name: str, value: Optional[Union[Dict, State]], allow_none: bool, **kwargs): ...
def validate_children(param_name: str, value: Optional[Union[str, list, QWidget, State]], allow_none: bool, **kwargs): ...
def validate_divider(param_name: str, value: Optional[Union[QWidget, bool, State]], allow_none: bool, **kwargs): ...
def validate_param(validator_func, param_name, allow_none, **kwargs): ...
def _validate_param(file_path: str, param_name: str, supported_signatures: Union[type, List[type], str], valid_values: Optional[List[Any]], validator: Optional[callable]): ...