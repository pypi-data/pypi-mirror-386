from qtpy.QtCore import QEvent, QEasingCurve, Qt, Signal, QPropertyAnimation, Property, QRectF, QTimer, QPoint, QObject
from qtpy.QtGui import QPainter, QColor, QMouseEvent
from qtpy.QtWidgets import QWidget, QToolButton, QAbstractScrollArea, QGraphicsOpacityEffect, QHBoxLayout, QVBoxLayout, QApplication, QAbstractItemView, QListView
from ...common.icon import FluentIcon
from ...common.style_sheet import isDarkTheme
from ...common.smooth_scroll import SmoothScroll
class ArrowButton:
    def __init__(self, icon: FluentIcon, parent): ...
    def setOpacity(self, opacity): ...
    def paintEvent(self, e): ...
class ScrollBarGroove:
    def __init__(self, orient: Qt.Orientation, parent): ...
    def fadeIn(self): ...
    def fadeOut(self): ...
    def paintEvent(self, e): ...
    def setOpacity(self, opacity: float): ...
    def getOpacity(self): ...
class ScrollBarHandle:
    def __init__(self, orient: Qt.Orientation, parent): ...
    def paintEvent(self, e): ...
class ScrollBar:
    def __init__(self, orient: Qt.Orientation, parent: QAbstractScrollArea): ...
    def __initWidget(self, parent): ...
    def _onPageUp(self): ...
    def _onPageDown(self): ...
    def _onValueChanged(self, value): ...
    def value(self): ...
    def val(self): ...
    def val(self, value: int): ...
    def minimum(self): ...
    def maximum(self): ...
    def orientation(self): ...
    def pageStep(self): ...
    def singleStep(self): ...
    def isSliderDown(self): ...
    def setValue(self, value: int): ...
    def setMinimum(self, min: int): ...
    def setMaximum(self, max: int): ...
    def setRange(self, min: int, max: int): ...
    def setPageStep(self, step: int): ...
    def setSingleStep(self, step: int): ...
    def setSliderDown(self, isDown: bool): ...
    def expand(self): ...
    def collapse(self): ...
    def enterEvent(self, e): ...
    def leaveEvent(self, e): ...
    def eventFilter(self, obj, e: QEvent): ...
    def resizeEvent(self, e): ...
    def mousePressEvent(self, e: QMouseEvent): ...
    def mouseReleaseEvent(self, e): ...
    def mouseMoveEvent(self, e: QMouseEvent): ...
    def _adjustPos(self, size): ...
    def _adjustHandleSize(self): ...
    def _adjustHandlePos(self): ...
    def _grooveLength(self): ...
    def _slideLength(self): ...
    def _isSlideResion(self, pos: QPoint): ...
    def _onOpacityAniValueChanged(self): ...
    def setForceHidden(self, isHidden: bool): ...
    def wheelEvent(self, e): ...
class SmoothScrollBar:
    def __init__(self, orient: Qt.Orientation, parent): ...
    def setValue(self, value, useAni): ...
    def scrollValue(self, value, useAni): ...
    def scrollTo(self, value, useAni): ...
    def resetValue(self, value): ...
    def mousePressEvent(self, e): ...
    def mouseMoveEvent(self, e): ...
    def setScrollAnimation(self, duration, easing): ...
class SmoothScrollDelegate:
    def __init__(self, parent: QAbstractScrollArea, useAni): ...
    def eventFilter(self, obj, e: QEvent): ...
    def setVerticalScrollBarPolicy(self, policy): ...
    def setHorizontalScrollBarPolicy(self, policy): ...