import asyncio
import uuid
import time
from typing import List, Union, Optional, Dict
from qtpy.QtGui import QAction
from qtpy.QtWidgets import QTableWidget, QHeaderView, QWidget, QTableWidgetItem, QStyledItemDelegate, QApplication, QStyleOptionViewItem, QTableView, QTableWidget, QWidget, QTableWidgetItem, QStyle, QStyleOptionButton, QFrame, QVBoxLayout, QProxyStyle, QStyleOption, QCheckBox, QHBoxLayout, QScrollBar, QSizePolicy
from qtpy.QtCore import Qt, QMargins, QModelIndex, QItemSelectionModel, Property, QRectF, QRect, Signal, QAbstractTableModel, QTimer, QRunnable, QThreadPool
from qtpy.QtGui import QPainter, QColor, QKeyEvent, QPalette, QBrush, QFont
from typing import TYPE_CHECKING, Callable
from qtmui.hooks import State, useState
from qtmui.utils.translator import getTranslatedText
from qtmui.material.styles.create_theme.components.get_qss_styles import get_qss_style
from ...widgets.line_edit import LineEdit
from qtmui.material.styles import useTheme
from ....i18n.use_translation import translate, i18n
from ...py_iconify import PyIconify
from ....qtmui_assets import QTMUI_ASSETS
from ...checkbox import Checkbox
from ...button import Button
from ...box import Box
from ...spacer import HSpacer
from .table_base import TableBase
from .table_item_delegate import TableItemDelegate
class AbstractTableModel:
    def headerData(self, section: int, orientation: Qt.Orientation, role: int): ...
    def __init__(self, parent, tableHead, data): ...
    def rowCount(self, n): ...
    def columnCount(self, n): ...
    def flags(self, index: QModelIndex): ...
    def data(self, index, role): ...
class ChunkVisibleIndexesRunnable:
    def __init__(self, table_view, start_row, end_row, first_col, last_col): ...
    def run(self): ...
class TableView:
    def __init__(self, parent, fullWidth: bool, isBorderVisible: bool, tableHead: list, children: list, loading: Optional[Union[bool, State]], sortingEnabled: bool, size: str, model: object, dragEnable: Optional[bool], dragDropMode: Optional[QTableView.DragDropMode], selectionMode: Optional[QTableView.SelectionMode], selectionBehavior: Optional[QTableView.SelectionBehavior], maxHeight: Optional[int], rowHeight: int, sx: Optional[Union[dict, State]]): ...
    def _init_ui(self): ...
    def _onLoading(self, isLoading): ...
    def __setup_header(self): ...
    def _set_model_data(self, data): ...
    def onScrollReleased(self): ...
    def wheelEvent(self, event): ...
    def _thread_setup_table_for_visible_indexes(self): ...
    def _calculate_visible_indexes_directly(self, first_row, last_row, first_col, last_col): ...
    def _collect_chunk_results(self, visible_indexes_chunk, to_remove_indexes_chunk): ...
    def _clear_index_widgets(self): ...
    def _remove_index_widget(self, index): ...
    def _rem(self, widget, index): ...
    def _set_index_widget(self, indexs): ...
    def isSelectRightClickedRow(self): ...
    def setSelectRightClickedRow(self, isSelect: bool): ...
    def getselectedRowsFast(self): ...