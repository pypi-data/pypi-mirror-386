import uuid
from typing import List, Union, Optional, Dict
from qtpy.QtWidgets import QTableWidget, QHeaderView, QWidget, QTableWidgetItem, QStyledItemDelegate, QApplication, QStyleOptionViewItem, QTableView, QTableWidget, QWidget, QTableWidgetItem, QStyle, QStyleOptionButton, QFrame, QVBoxLayout
from qtpy.QtCore import Qt, QMargins, QModelIndex, QItemSelectionModel, Property, QRectF
from qtpy.QtGui import QPainter, QColor, QKeyEvent, QPalette, QBrush, QFont
from typing import TYPE_CHECKING, Callable
from qtmui.material.styles.create_theme.components.get_qss_styles import get_qss_style
from qtmui.material.styles import useTheme
from ....i18n.use_translation import translate, i18n
from ....common.font import getFont
from ....common.style_sheet import isDarkTheme, FluentStyleSheet, themeColor, setCustomStyleSheet
from ...widgets.check_box import CheckBoxIcon
from ...widgets.line_edit import LineEdit
from ...widgets.scroll_bar import SmoothScrollDelegate
class TableItemDelegate:
    def __init__(self, parent: QTableView): ...
    def setHoverRow(self, row: int): ...
    def setPressedRow(self, row: int): ...
    def setSelectedRows(self, indexes: List[QModelIndex]): ...
    def sizeHint(self, option, index): ...
    def createEditor(self, parent: QWidget, option: QStyleOptionViewItem, index: QModelIndex): ...
    def updateEditorGeometry(self, editor: QWidget, option: QStyleOptionViewItem, index: QModelIndex): ...
    def _drawBackground(self, painter: QPainter, option: QStyleOptionViewItem, index: QModelIndex): ...
    def _drawIndicator(self, painter: QPainter, option: QStyleOptionViewItem, index: QModelIndex): ...
    def initStyleOption(self, option: QStyleOptionViewItem, index: QModelIndex): ...
    def paint(self, painter, option, index): ...
    def _drawCheckBox(self, painter: QPainter, option: QStyleOptionViewItem, index: QModelIndex): ...
class TableBase:
    def __init__(self, *args, **kwargs): ...
    def setBorderVisible(self, isVisible: bool): ...
    def setBorderRadius(self, radius: int): ...
    def _setHoverRow(self, row: int): ...
    def _setPressedRow(self, row: int): ...
    def _setSelectedRows(self, indexes: List[QModelIndex]): ...
    def leaveEvent(self, e): ...
    def resizeEvent(self, e): ...
    def keyPressEvent(self, e: QKeyEvent): ...
    def mousePressEvent(self, e): ...
    def mouseReleaseEvent(self, e): ...
    def setItemDelegate(self, delegate: TableItemDelegate): ...
    def selectAll(self): ...
    def selectRow(self, row: int): ...
    def clearSelection(self): ...
    def setCurrentIndex(self, index: QModelIndex): ...
    def updateSelectedRows(self): ...
class CustomHeaderView:
    def __init__(self, orientation, parent): ...
    def _set_theme(self): ...
    def paintSection(self, painter, rect, logicalIndex): ...
    def paintSection(self, painter, rect, logicalIndex): ...
class TableWidget:
    def __init__(self, fullWidth: bool, isBorderVisible: bool, tableHead: list, children: list, size: str, sx: Optional[Union[Callable, str, Dict]]): ...
    def _init_ui(self): ...
    def retranslateUi(self): ...
    def _set_stylesheet(self, _theme): ...
    def update_data(self, rows): ...
    def setCurrentCell(self, row: int, column: int, command): ...
    def setCurrentItem(self, item: QTableWidgetItem, command): ...
    def setCurrentCell(self, row: int, column: int, command): ...
    def setCurrentItem(self, item: QTableWidgetItem, command): ...
    def isSelectRightClickedRow(self): ...
    def setSelectRightClickedRow(self, isSelect: bool): ...
class TableView:
    def __init__(self, parent): ...
    def isSelectRightClickedRow(self): ...
    def setSelectRightClickedRow(self, isSelect: bool): ...
class Table:
    def __init__(self, **kwargs): ...
    def _init_ui(self): ...
    def _set_style_sheet(self): ...