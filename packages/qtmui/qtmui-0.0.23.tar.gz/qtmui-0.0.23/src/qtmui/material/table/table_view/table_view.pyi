import asyncio
import uuid
from typing import Union, Optional, Dict
from qtpy.QtWidgets import QHeaderView, QWidget, QTableView, QWidget, QHBoxLayout
from qtpy.QtCore import Qt, QModelIndex, Property, Signal, QAbstractTableModel, QTimer, QItemSelection
from typing import TYPE_CHECKING, Callable
from qtmui.utils.translator import getTranslatedText
from qtmui.hooks import State
from qtmui.material.styles.create_theme.components.get_qss_styles import get_qss_style
from qtmui.material.styles import useTheme
from ....i18n.use_translation import i18n
from qtmui.material.table.table_head import TableHead
from ...checkbox import Checkbox
from .table_base import TableBase
class AbstractTableModel:
    def headerData(self, section: int, orientation: Qt.Orientation, role: int): ...
    def __init__(self, parent, headLabel, data): ...
    def rowCount(self, n): ...
    def columnCount(self, n): ...
    def flags(self, index: QModelIndex): ...
    def data(self, index, role): ...
class TableView:
    def __init__(self, parent, fullWidth: bool, isBorderVisible: bool, tableHead: TableHead, children: list, loading: Optional[Union[bool, State]], sortingEnabled: bool, size: str, model: object, dragEnable: Optional[bool], dragDropMode: Optional[QTableView.DragDropMode], selectionMode: Optional[QTableView.SelectionMode], selectionBehavior: Optional[QTableView.SelectionBehavior], onSelectionChanged: Optional[Callable], maxHeight: Optional[int], rowHeight: int, sx: Optional[Union[dict, State]]): ...
    def _init_ui(self): ...
    def _onLoading(self, isLoading): ...
    def _onSelectionChange(self, selected: QItemSelection, deselected: QItemSelection): ...
    def _onSelectAllChanged(self, checked): ...
    def __setup_header(self): ...
    def _set_model_data(self, data): ...
    def onScrollReleased(self): ...
    def wheelEvent(self, event): ...
    def _thread_setup_table_for_visible_indexes(self): ...
    def _setup_table_for_visible_indexes(self): ...
    def _clear_index_widgets(self): ...
    def _remove_index_widget(self, index): ...
    def _set_index_widget(self, indexs): ...
    def isSelectRightClickedRow(self): ...
    def setSelectRightClickedRow(self, isSelect: bool): ...
    def getselectedRowsFast(self): ...