from typing import List, Union
from qtpy.QtCore import QSize, Qt, QRectF, Signal, QPoint, QTimer, QEvent, QAbstractItemModel, Property
from qtpy.QtGui import QPainter, QPainterPath, QIcon, QCursor, QAction, QColor
from qtpy.QtWidgets import QApplication, QHBoxLayout, QLineEdit, QToolButton, QTextEdit, QPlainTextEdit, QCompleter, QStyle, QWidget
from ...common.style_sheet import FluentStyleSheet, themeColor
from ...common.icon import isDarkTheme, FluentIconBase, drawIcon
from ...common.icon import FluentIcon
from ...common.font import setFont
from .menu import LineEditMenu, TextEditMenu, RoundMenu, MenuAnimationType, IndicatorMenuItemDelegate
from .scroll_bar import SmoothScrollDelegate
from ..py_iconify import PyIconify
from ...qtmui_assets import QTMUI_ASSETS
from qtmui.material.styles import useTheme
class LineEditButton:
    def __init__(self, icon: Union[str, QIcon, FluentIconBase], parent): ...
    def retranslateUi(self): ...
    def _set_stylesheet(self, _theme): ...
    def mousePressEvent(self, e): ...
    def mouseReleaseEvent(self, e): ...
    def paintEvent(self, e): ...
class LineEdit:
    def __init__(self, parent): ...
    def retranslateUi(self): ...
    def _set_stylesheet(self, _theme): ...
    def setClearButtonEnabled(self, enable: bool): ...
    def isClearButtonEnabled(self): ...
    def setCompleter(self, completer: QCompleter): ...
    def completer(self): ...
    def focusOutEvent(self, e): ...
    def focusInEvent(self, e): ...
    def __onChange(self, text): ...
    def __onTextEdited(self, text): ...
    def setCompleterMenu(self, menu): ...
    def _showCompleterMenu(self): ...
    def contextMenuEvent(self, e): ...
    def paintEvent(self, e): ...
class CompleterMenu:
    def __init__(self, lineEdit: LineEdit): ...
    def setCompletion(self, model: QAbstractItemModel): ...
    def setItems(self, items: List[str]): ...
    def _onItemClicked(self, item): ...
    def eventFilter(self, obj, e: QEvent): ...
    def __onItemSelected(self, text): ...
    def exec(self, pos, ani, aniType): ...
    def popup(self): ...
class SearchLineEdit:
    def __init__(self, parent): ...
    def search(self): ...
    def setClearButtonEnabled(self, enable: bool): ...
class EditLayer:
    def __init__(self, parent): ...
    def eventFilter(self, obj, e): ...
    def paintEvent(self, e): ...
class TextEdit:
    def __init__(self, parent): ...
    def contextMenuEvent(self, e): ...
class PlainTextEdit:
    def __init__(self, parent): ...
    def contextMenuEvent(self, e): ...
class PasswordLineEdit:
    def __init__(self, parent): ...
    def setPasswordVisible(self, isVisible: bool): ...
    def isPasswordVisible(self): ...
    def setClearButtonEnabled(self, enable: bool): ...
    def setViewPasswordButtonVisible(self, isVisible: bool): ...
    def eventFilter(self, obj, e): ...
    def inputMethodQuery(self, query: Qt.InputMethodQuery): ...