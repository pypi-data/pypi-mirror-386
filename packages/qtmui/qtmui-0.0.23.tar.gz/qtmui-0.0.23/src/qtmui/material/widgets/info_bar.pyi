from enum import Enum
from typing import Union
import weakref
from qtpy.QtCore import Qt, QEvent, QSize, QRectF, QObject, QPropertyAnimation, QEasingCurve, QTimer, Signal, QParallelAnimationGroup, QPoint
from qtpy.QtGui import QPainter, QIcon, QColor
from qtpy.QtWidgets import QWidget, QFrame, QLabel, QHBoxLayout, QVBoxLayout, QToolButton, QGraphicsOpacityEffect
from ...common.auto_wrap import TextWrap
from ...common.style_sheet import FluentStyleSheet, themeColor
from ...common.icon import FluentIconBase, Theme, isDarkTheme, writeSvg, drawSvgIcon, drawIcon
from ...common.icon import FluentIcon
from .button import TransparentToolButton
class InfoBarIcon:
    def path(self, theme): ...
class InfoBarPosition:
class InfoIconWidget:
    def __init__(self, icon: InfoBarIcon, parent): ...
    def paintEvent(self, e): ...
class InfoBar:
    def __init__(self, icon: Union[InfoBarIcon, FluentIconBase, QIcon, str], title: str, content: str, orient, isClosable, duration, position, parent): ...
    def __initWidget(self): ...
    def __initLayout(self): ...
    def __setQss(self): ...
    def __fadeOut(self): ...
    def _adjustText(self): ...
    def addWidget(self, widget: QWidget, stretch): ...
    def setCustomBackgroundColor(self, light, dark): ...
    def eventFilter(self, obj, e: QEvent): ...
    def closeEvent(self, e): ...
    def showEvent(self, e): ...
    def paintEvent(self, e): ...
    def new(cls, icon, title, content, orient, isClosable, duration, position, parent): ...
    def info(cls, title, content, orient, isClosable, duration, position, parent): ...
    def success(cls, title, content, orient, isClosable, duration, position, parent): ...
    def warning(cls, title, content, orient, isClosable, duration, position, parent): ...
    def error(cls, title, content, orient, isClosable, duration, position, parent): ...
class InfoBarManager:
    def __new__(cls, *args, **kwargs): ...
    def __init__(self): ...
    def add(self, infoBar: InfoBar): ...
    def remove(self, infoBar: InfoBar): ...
    def _createSlideAni(self, infoBar: InfoBar): ...
    def _updateDropAni(self, parent): ...
    def _pos(self, infoBar: InfoBar, parentSize): ...
    def _slideStartPos(self, infoBar: InfoBar): ...
    def eventFilter(self, obj, e: QEvent): ...
    def register(cls, name): ...
    def make(cls, position: InfoBarPosition): ...
class TopInfoBarManager:
    def _pos(self, infoBar: InfoBar, parentSize): ...
    def _slideStartPos(self, infoBar: InfoBar): ...
class TopRightInfoBarManager:
    def _pos(self, infoBar: InfoBar, parentSize): ...
    def _slideStartPos(self, infoBar: InfoBar): ...
class BottomRightInfoBarManager:
    def _pos(self, infoBar: InfoBar, parentSize): ...
    def _slideStartPos(self, infoBar: InfoBar): ...
class TopLeftInfoBarManager:
    def _pos(self, infoBar: InfoBar, parentSize): ...
    def _slideStartPos(self, infoBar: InfoBar): ...
class BottomLeftInfoBarManager:
    def _pos(self, infoBar: InfoBar, parentSize: QSize): ...
    def _slideStartPos(self, infoBar: InfoBar): ...
class BottomInfoBarManager:
    def _pos(self, infoBar: InfoBar, parentSize: QSize): ...
    def _slideStartPos(self, infoBar: InfoBar): ...