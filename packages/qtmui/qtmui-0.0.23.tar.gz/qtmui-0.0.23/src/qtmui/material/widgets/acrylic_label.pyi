import warnings
from typing import Union
from qtpy.QtCore import Qt, QThread, Signal, QRect
from qtpy.QtGui import QBrush, QColor, QImage, QPainter, QPixmap, QPainterPath
from qtpy.QtWidgets import QLabel, QApplication, QWidget
from ...common.screen import getCurrentScreen
def checkAcrylicAvailability(): ...
class BlurCoverThread:
    def __init__(self, parent): ...
    def run(self): ...
    def blur(self, imagePath: str, blurRadius, maxSize: tuple): ...
class AcrylicTextureLabel:
    def __init__(self, tintColor: QColor, luminosityColor: QColor, noiseOpacity, parent): ...
    def setTintColor(self, color: QColor): ...
    def paintEvent(self, e): ...
class AcrylicLabel:
    def __init__(self, blurRadius: int, tintColor: QColor, luminosityColor, maxBlurSize: tuple, parent): ...
    def __onBlurFinished(self, blurPixmap: QPixmap): ...
    def setImage(self, imagePath: str): ...
    def setTintColor(self, color: QColor): ...
    def resizeEvent(self, e): ...
class AcrylicBrush:
    def __init__(self, device: QWidget, blurRadius: int, tintColor, luminosityColor, noiseOpacity): ...
    def setBlurRadius(self, radius: int): ...
    def setTintColor(self, color: QColor): ...
    def setLuminosityColor(self, color: QColor): ...
    def isAvailable(self): ...
    def grabImage(self, rect: QRect): ...
    def setImage(self, image: Union[str, QImage, QPixmap]): ...
    def setClipPath(self, path: QPainterPath): ...
    def textureImage(self): ...
    def paint(self): ...