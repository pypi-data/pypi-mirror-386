from typing import List, Union
from qtpy.QtCore import Qt, Signal, QModelIndex, QSize, Property, QRectF, QPropertyAnimation, QSizeF
from qtpy.QtGui import QPixmap, QPainter, QColor, QImage, QWheelEvent, QPainterPath, QImageReader
from qtpy.QtWidgets import QStyleOptionViewItem, QListWidget, QStyledItemDelegate, QListWidgetItem
from ...common.overload import singledispatchmethod
from ...common.style_sheet import isDarkTheme, FluentStyleSheet
from ...common.icon import drawIcon, FluentIcon
from .scroll_bar import SmoothScrollBar
from .button import ToolButton
class ScrollButton:
    def _postInit(self): ...
    def getOpacity(self): ...
    def setOpacity(self, o: float): ...
    def isTransparent(self): ...
    def fadeIn(self): ...
    def fadeOut(self): ...
    def paintEvent(self, e): ...
class FlipImageDelegate:
    def __init__(self, parent): ...
    def itemSize(self, index: int): ...
    def setBorderRadius(self, radius: int): ...
    def paint(self, painter: QPainter, option: QStyleOptionViewItem, index: QModelIndex): ...
class FlipView:
    def __init__(self, parent): ...
    def _(self, orientation: Qt.Orientation, parent): ...
    def _postInit(self): ...
    def isHorizontal(self): ...
    def setItemSize(self, size: QSize): ...
    def getItemSize(self): ...
    def setBorderRadius(self, radius: int): ...
    def getBorderRadius(self): ...
    def scrollPrevious(self): ...
    def scrollNext(self): ...
    def setCurrentIndex(self, index: int): ...
    def scrollToIndex(self, index): ...
    def currentIndex(self): ...
    def image(self, index: int): ...
    def addImage(self, image: Union[QImage, QPixmap, str]): ...
    def addImages(self, images: List[Union[QImage, QPixmap, str]], targetSize: QSize): ...
    def setItemImage(self, index: int, image: Union[QImage, QPixmap, str], targetSize: QSize): ...
    def _adjustItemSize(self, item: QListWidgetItem): ...
    def itemImage(self, index: int, load): ...
    def resizeEvent(self, e): ...
    def enterEvent(self, e): ...
    def leaveEvent(self, e): ...
    def showEvent(self, e): ...
    def wheelEvent(self, e: QWheelEvent): ...
    def getAspectRatioMode(self): ...
    def setAspectRatioMode(self, mode: Qt.AspectRatioMode): ...
class HorizontalFlipView:
    def __init__(self, parent): ...
class VerticalFlipView:
    def __init__(self, parent): ...