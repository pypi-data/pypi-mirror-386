import asyncio
from typing import Any, Callable, Optional, Union
from qtpy.QtWidgets import QWidget, QVBoxLayout, QFrame
from qtpy.QtCore import Qt, Signal, Slot, Property, QTimer
from qtmui.hooks import useEffect
from qtmui.hooks import State
from ..button import Button, LoadingButton
from .rhf_submit import SubmitButton
from .rhf_text_field import RHFTextField
from .rhf_autocomplete import RHFAutocomplete
from .rhf_select import RHFSelect
from .rhf_radio_group import RHFRadioGroup
from .rhf_switch import RHFSwitch
from .rhf_rating import RHFRating
from .rhf_checkbox import RHFCheckbox, RHFMultiCheckbox
from .rhf_slider import RHFSlider
from .rhf_upload import RHFUploadAvatar
from .types import ResolverType, UseFormType
class FormProvider:
    def __init__(self, onSubmit: Callable, initForm: Optional[State], schema: object, children: object, methods: UseFormType): ...
    def _setup_form(self): ...
    def _onDestroy(self, obj): ...
    def _schedule_setup_form(self): ...
    def _schedule_set_form_data(self): ...
    def _reset(self): ...
    def _set_control_value(self, control, value): ...
    def set_form_data(self, data: Optional[Union[dict, Any]], reseting): ...
    def _on_reset(self): ...
    def _on_submit(self): ...
    def get_form_data(self): ...
    def validate(self, field): ...
    def on_value_changed(self, name, value): ...