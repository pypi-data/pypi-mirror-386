from enum import Enum
from typing import Union, Callable, Optional
import weakref
from qtpy.QtCore import Qt, QEvent, QSize, QRectF, QObject, QPropertyAnimation, QEasingCurve, QTimer, Signal, QParallelAnimationGroup, QPoint
from qtpy.QtGui import QPainter, QIcon, QColor
from qtpy.QtWidgets import QWidget, QFrame, QLabel, QHBoxLayout, QVBoxLayout, QApplication, QGraphicsOpacityEffect
from ...common.auto_wrap import TextWrap
from ...common.icon import FluentIconBase, Theme, isDarkTheme, drawIcon
from ..py_tool_button import PyToolButton
from ..py_iconify import PyIconify
from qtmui.material.styles import useTheme
from qtmui.i18n.use_translation import translate, i18n
from ..widget_base import PyWidgetBase
from ...qtmui_assets import QTMUI_ASSETS
from qtmui.material.styles.create_theme.components.get_qss_styles import get_qss_style
class SnackbarIcon:
    def path(self, theme): ...
class SnackbarPosition:
class InfoIconWidget:
    def __init__(self, icon: SnackbarIcon, parent, fill): ...
    def paintEvent(self, e): ...
class Snackbar:
    def __init__(self, color: str, icon: Union[PyIconify, str], title: Optional[Union[str, Callable]], content: Optional[Union[str, Callable]], orient: Union[int, str, Qt.Orientation], isClosable: bool, duration: int, position: Union[int, str], parent): ...
    def retranslateUi(self): ...
    def __initWidget(self): ...
    def __initLayout(self): ...
    def __setQss(self): ...
    def __fadeOut(self): ...
    def _adjustText(self): ...
    def addWidget(self, widget: QWidget, stretch): ...
    def setCustomBackgroundColor(self, light, dark): ...
    def eventFilter(self, obj, e: QEvent): ...
    def closeEvent(self, e): ...
    def showEvent(self, e): ...
    def paintEvent(self, e): ...
class SnackbarManager:
    def __new__(cls, *args, **kwargs): ...
    def __init__(self): ...
    def add(self, infoBar: Snackbar): ...
    def remove(self, infoBar: Snackbar): ...
    def _createSlideAni(self, infoBar: Snackbar): ...
    def _updateDropAni(self, parent): ...
    def _pos(self, infoBar: Snackbar, parentSize): ...
    def _slideStartPos(self, infoBar: Snackbar): ...
    def eventFilter(self, obj, e: QEvent): ...
    def register(cls, name): ...
    def make(cls, position: SnackbarPosition): ...
class TopSnackbarManager:
    def _pos(self, infoBar: Snackbar, parentSize): ...
    def _slideStartPos(self, infoBar: Snackbar): ...
class TopRightSnackbarManager:
    def _pos(self, infoBar: Snackbar, parentSize): ...
    def _slideStartPos(self, infoBar: Snackbar): ...
class BottomRightSnackbarManager:
    def _pos(self, infoBar: Snackbar, parentSize): ...
    def _slideStartPos(self, infoBar: Snackbar): ...
class TopLeftSnackbarManager:
    def _pos(self, infoBar: Snackbar, parentSize): ...
    def _slideStartPos(self, infoBar: Snackbar): ...
class BottomLeftSnackbarManager:
    def _pos(self, infoBar: Snackbar, parentSize: QSize): ...
    def _slideStartPos(self, infoBar: Snackbar): ...
class BottomSnackbarManager:
    def _pos(self, infoBar: Snackbar, parentSize: QSize): ...
    def _slideStartPos(self, infoBar: Snackbar): ...