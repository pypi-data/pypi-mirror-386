from typing import Literal, Tuple, Union, Dict
import re
from qtpy.QtGui import QColor
import random
class ColorObject:
    def __init__(self, type: ColorFormat, values: Union[Tuple[int, int, int], Tuple[int, int, int, int]], color_space: ColorSpace): ...
    def __repr__(self): ...
def clamp(value, min_value, max_value): ...
def hexToRgb(color): ...
def int_to_hex(value): ...
def hexToRgb(hex_color: str): ...
def decomposeColor(color: Union[str, Dict]): ...
def recomposeColor(color): ...
def hslToRgb(color): ...
def rgbToHex(color): ...
def rgb2hex(r_or_color: Union[tuple, int], g: int, b: int, a: int): ...
def rgbaToQColor(self, rgba_string): ...
def getLuminance(color): ...
def getContrastRatio(foreground, background): ...
def alpha_tuple(color, value): ...
def alpha(color, value): ...
def darken(color, coefficient): ...
def lighten(color, coefficient): ...
def emphasize(color, coefficient): ...
def blend(background, overlay, opacity, gamma): ...
def hex_string_to_qcolor(hex_string: str): ...
def get_palette_text_color(palette, color): ...
def lighten_hex(hex_color, value): ...
def interpolate_color(start_color: str, end_color: str, factor: float): ...
def generate_color_palette(start_color: str, end_color: str, steps: int): ...
def get_contrast_text(background, contrast_threshold): ...
def rgba_to_hex(r, g, b, a, rgba): ...
def get_flat_ui_color_hex(color_name): ...
def get_random_flat_ui_color(): ...