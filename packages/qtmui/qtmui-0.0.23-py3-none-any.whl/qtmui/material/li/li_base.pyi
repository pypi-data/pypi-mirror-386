from typing import Any, Awaitable, Callable, Concatenate, Generic, Optional, cast, overload
import uuid
from qtpy.QtWidgets import QPushButton, QLabel
from qtpy.QtCore import Qt, QPropertyAnimation, QEasingCurve, QPoint, Property, QObject, QTimer, QEvent, Signal
from qtpy.QtGui import QPainter, QColor, QBrush, QPainterPath
from qtmui.hooks import State
from ..system.color_manipulator import get_palette_text_color, hex_string_to_qcolor
from ..widget_base import PyWidgetBase
from qtmui.material.styles import useTheme
class RippleEffect:
    def __init__(self, parent): ...
    def radius(self): ...
    def setRadius(self, radius): ...
    def opacity(self): ...
    def setOpacity(self, opacity): ...
    def center(self): ...
    def setCenter(self, center): ...
class LiBase:
    def __init__(self, id: str, key: str, value: object, action: Optional[Callable], centerRipple: bool, children: Optional[object], classes: Optional[dict], component: Optional[object], disabled: bool, disableRipple: bool, disableTouchRipple: bool, focusRipple: bool, focusVisibleClassName: Optional[str], LinkComponent: Optional[object], onFocusVisible: Optional[Callable], sx: Optional[object], tabIndex: Optional[int], TouchRippleProps: Optional[dict], touchRippleRef: Optional[Callable], tooltip: Optional[str], tooltipMaxWidth: Optional[int], tooltipPlacement: Optional[str], onBlur: Optional[Callable], onClick: Optional[Callable], onMouseEnter: Optional[Callable], onContextMenu: Optional[Callable], onFocus: Optional[Callable], onKeyDown: Optional[Callable], onKeyUp: Optional[Callable], onMouseDown: Optional[Callable], onMouseLeave: Optional[Callable], onMouseUp: Optional[Callable], onDragLeave: Optional[Callable], rippleDuration: int, rippleTimeout: int, *args, **kwargs): ...
    def _connect_signals_to_slots(self): ...
    def _set_enabled(self, state): ...
    def focusInEvent(self, event): ...
    def focusOutEvent(self, event): ...
    def contextMenuEvent(self, event): ...
    def enterEvent(self, event): ...
    def leaveEvent(self, event): ...
    def _check_tooltip_under_currsor(self): ...
    def move_tooltip(self): ...
    def mousePressEvent(self, event): ...
    def _run_ripple_animation(self): ...
    def mouseReleaseEvent(self, event): ...
    def mouseMoveEvent(self, event): ...
    def keyPressEvent(self, event): ...
    def keyReleaseEvent(self, event): ...
    def dragLeaveEvent(self, event): ...
    def paintEvent(self, event): ...
    def set_on_click(self, callback): ...