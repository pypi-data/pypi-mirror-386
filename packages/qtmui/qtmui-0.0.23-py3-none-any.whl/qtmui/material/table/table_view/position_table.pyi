import random
from typing import List
from qtpy.QtCore import Qt, QMargins, QModelIndex, QRectF, Qt, QAbstractTableModel, QModelIndex, QPointF, QPoint, Signal
from qtpy.QtGui import QPainter, QColor, QPalette, QBrush, QMouseEvent
from qtpy.QtWidgets import QStyledItemDelegate, QApplication, QStyleOptionViewItem, QHeaderView, QTableView, QWidget, QVBoxLayout
from atklip.app_utils.functions import mkColor
from atklip.gui.qfluentwidgets import isDarkTheme, Theme, TableView, getFont, themeColor, FluentIcon
from atklip.gui.qfluentwidgets.components.widgets.label import TitleLabel
class PositionItemDelegate:
    def __init__(self, parent: QTableView): ...
    def setHoverRow(self, row: int): ...
    def setPressedRow(self, row: int): ...
    def setSelectedRows(self, indexes: List[QModelIndex]): ...
    def sizeHint(self, option, index): ...
    def createEditor(self, parent: QWidget, option: QStyleOptionViewItem, index: QModelIndex): ...
    def updateEditorGeometry(self, editor: QWidget, option: QStyleOptionViewItem, index: QModelIndex): ...
    def _drawBackground(self, painter: QPainter, option: QStyleOptionViewItem, index: QModelIndex): ...
    def _drawIndicator(self, painter: QPainter, option: QStyleOptionViewItem, index: QModelIndex): ...
    def initStyleOption(self, option: QStyleOptionViewItem, index: QModelIndex): ...
    def paint(self, painter, option, index): ...
    def _drawCheckBox(self, painter: QPainter, option: QStyleOptionViewItem, index: QModelIndex): ...
class PositionModel:
    def __init__(self, data): ...
    def rowCount(self, index): ...
    def columnCount(self, index): ...
    def data(self, index: QModelIndex, role): ...
    def headerData(self, section, orientation, role): ...
    def update_row(self, row, column, value): ...
    def updateRows(self, rows_to_update): ...
    def setData(self, index, value, role): ...
    def flags(self, index): ...
class PositionTable:
    def __init__(self, parent): ...
    def update_table(self): ...
    def leaveEvent(self, ev): ...
    def enterEvent(self, ev): ...
    def mouseMoveEvent(self, ev: QMouseEvent): ...
    def on_btn_pos_click(self, item): ...
class RealTimeTable:
    def __init__(self, parent: QWidget): ...
    def update_table(self): ...