from __future__ import annotations
from typing import Any, Optional, Dict, Callable, Union, Literal
from enum import Enum
import uuid
import warnings
import os
from typing import TYPE_CHECKING
import asyncio
from qtmui.material.styles.create_theme.components.get_qss_styles import get_qss_style
from ..widget_base.widget_base import PyWidgetBase
from qtpy.QtXml import QDomDocument
from qtpy.QtCore import QRectF, Qt, QFile, QSize, QByteArray, QThreadPool, QTimer, QPoint, QEvent
from qtpy.QtGui import QIcon, QColor, QPixmap, QImage, QPainter, QPalette
from qtpy.QtSvg import QSvgRenderer
from qtpy.QtWidgets import QApplication, QSizePolicy, QFrame, QHBoxLayout
from qtpy.QtSvgWidgets import QSvgWidget
from qtmui.material.styles import useTheme
import random
import re
class PySvgWidget:
    def __init__(self, key: str, color: Optional[str], flip: Optional[Flip], rotate: Optional[Rotation], dir: Optional[str], fill: Optional[str], active: Optional[bool], size: QSize, width: Optional[Union[str, int]], height: Optional[Union[str, int]], viewBox: Optional[str], svgContent: Optional[str], xmlns: Optional[str], mode, state, sx: Optional[Union[Callable, str, Dict]], **kwargs): ...
    def _py_svg_widget_destroy(self): ...
    def _setup_ui(self): ...
    def addKey(self): ...
    def _is_resource_key(self, key: str): ...
    def changeSvg(self, path: Union[str, os.PathLike]): ...
    def _processSvg(self, svg_content: str): ...
    def _get_theme_color(self, value): ...
    def _draw_text_fallback(self, key: tuple[str, Any]): ...
    def changeEvent(self, event: QEvent): ...
    def _set_text_color(self, color): ...
    def _set_stylesheet(self, component_styled): ...