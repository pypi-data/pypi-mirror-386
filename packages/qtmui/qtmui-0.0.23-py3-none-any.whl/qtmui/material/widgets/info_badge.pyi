from enum import Enum
from typing import Union
from qtpy.QtCore import Qt, QEvent, QRectF, QPoint, QObject, QSize
from qtpy.QtGui import QPixmap, QPainter, QColor, QIcon
from qtpy.QtWidgets import QLabel, QWidget, QSizePolicy
from ...common.font import setFont
from ...common.icon import drawIcon, FluentIconBase, toQIcon
from ...common.overload import singledispatchmethod
from ...common.style_sheet import themeColor, FluentStyleSheet, isDarkTheme, Theme
class InfoLevel:
class InfoBadgePosition:
class InfoBadge:
    def __init__(self, parent: QWidget, level): ...
    def _(self, text: str, parent: QWidget, level): ...
    def _(self, num: int, parent: QWidget, level): ...
    def _(self, num: float, parent: QWidget, level): ...
    def setLevel(self, level: InfoLevel): ...
    def setProperty(self, name: str, value): ...
    def setCustomBackgroundColor(self, light, dark): ...
    def paintEvent(self, e): ...
    def _backgroundColor(self): ...
    def make(cls, text: Union[str, float], parent, level, target: QWidget, position): ...
    def info(cls, text: Union[str, float], parent, target: QWidget, position): ...
    def success(cls, text: Union[str, float], parent, target: QWidget, position): ...
    def attension(cls, text: Union[str, float], parent, target: QWidget, position): ...
    def warning(cls, text: Union[str, float], parent, target: QWidget, position): ...
    def error(cls, text: Union[str, float], parent, target: QWidget, position): ...
    def custom(cls, text: Union[str, float], light: QColor, dark: QColor, parent, target: QWidget, position): ...
class DotInfoBadge:
    def __init__(self, parent, level): ...
    def paintEvent(self, e): ...
    def make(cls, parent, level, target: QWidget, position): ...
    def info(cls, parent, target: QWidget, position): ...
    def success(cls, parent, target: QWidget, position): ...
    def attension(cls, parent, target: QWidget, position): ...
    def warning(cls, parent, target: QWidget, position): ...
    def error(cls, parent, target: QWidget, position): ...
    def custom(cls, light: QColor, dark: QColor, parent, target: QWidget, position): ...
class IconInfoBadge:
    def __init__(self, parent: QWidget, level): ...
    def _(self, icon: FluentIconBase, parent: QWidget, level): ...
    def _(self, icon: QIcon, parent: QWidget, level): ...
    def setIcon(self, icon: Union[QIcon, FluentIconBase, str]): ...
    def icon(self): ...
    def iconSize(self): ...
    def setIconSize(self, size: QSize): ...
    def paintEvent(self, e): ...
    def make(cls, icon: Union[QIcon, FluentIconBase], parent, level, target: QWidget, position): ...
    def info(cls, icon: Union[QIcon, FluentIconBase], parent, target: QWidget, position): ...
    def success(cls, icon: Union[QIcon, FluentIconBase], parent, target: QWidget, position): ...
    def attension(cls, icon: Union[QIcon, FluentIconBase], parent, target: QWidget, position): ...
    def warning(cls, icon: Union[QIcon, FluentIconBase], parent, target: QWidget, position): ...
    def error(cls, icon: Union[QIcon, FluentIconBase], parent, target: QWidget, position): ...
    def custom(cls, icon: Union[QIcon, FluentIconBase], light: QColor, dark: QColor, parent, target: QWidget, position): ...
class InfoBadgeManager:
    def __init__(self, target: QWidget, badge: InfoBadge): ...
    def eventFilter(self, obj, e: QEvent): ...
    def register(cls, name): ...
    def make(cls, position: InfoBadgePosition, target: QWidget, badge: InfoBadge): ...
    def position(self): ...
class TopRightInfoBadgeManager:
    def position(self): ...
class RightInfoBadgeManager:
    def position(self): ...
class BottomRightInfoBadgeManager:
    def position(self): ...
class TopLeftInfoBadgeManager:
    def position(self): ...
class LeftInfoBadgeManager:
    def position(self): ...
class BottomLeftInfoBadgeManager:
    def position(self): ...