from enum import Enum
from qtpy.QtCore import Qt, QSize, QRectF, QPoint
from qtpy.QtGui import QPainter, QPainterPath, QColor
from qtpy.QtWidgets import QSpinBox, QDoubleSpinBox, QToolButton, QHBoxLayout, QDateEdit, QDateTimeEdit, QTimeEdit, QVBoxLayout, QApplication
from ...common.style_sheet import FluentStyleSheet, themeColor, isDarkTheme
from ...common.icon import FluentIconBase, Theme, getIconColor
from ...common.font import setFont
from .button import TransparentToolButton
from .line_edit import LineEditMenu
from .flyout import Flyout, FlyoutViewBase, FlyoutAnimationType
class SpinIcon:
    def path(self, theme): ...
class SpinButton:
    def __init__(self, icon: SpinIcon, parent): ...
    def mousePressEvent(self, e): ...
    def mouseReleaseEvent(self, e): ...
    def paintEvent(self, e): ...
class CompactSpinButton:
    def __init__(self, parent): ...
    def paintEvent(self, e): ...
class SpinFlyoutView:
    def __init__(self, parent): ...
    def paintEvent(self, e): ...
class SpinBoxBase:
    def __init__(self, parent): ...
    def setReadOnly(self, isReadOnly: bool): ...
    def setSymbolVisible(self, isVisible: bool): ...
    def _showContextMenu(self, pos): ...
    def _drawBorderBottom(self): ...
    def paintEvent(self, e): ...
class InlineSpinBoxBase:
    def __init__(self, parent): ...
    def setSymbolVisible(self, isVisible: bool): ...
    def setAccelerated(self, on: bool): ...
class CompactSpinBoxBase:
    def __init__(self, parent): ...
    def setAccelerated(self, on: bool): ...
    def focusInEvent(self, e): ...
    def setSymbolVisible(self, isVisible: bool): ...
    def _showFlyout(self): ...
class SpinBox:
class CompactSpinBox:
class DoubleSpinBox:
class CompactDoubleSpinBox:
class TimeEdit:
class CompactTimeEdit:
class DateTimeEdit:
class CompactDateTimeEdit:
class DateEdit:
class CompactDateEdit: