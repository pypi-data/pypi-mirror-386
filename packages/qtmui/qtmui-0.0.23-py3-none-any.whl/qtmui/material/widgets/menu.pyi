import uuid
from enum import Enum
from typing import List, Union
from ...lib.qframelesswindow import WindowEffect
from qtpy.QtCore import QEasingCurve, QEvent, QPropertyAnimation, QObject, QModelIndex, Qt, QSize, QRectF, Signal, QPoint, QTimer, QObject, QParallelAnimationGroup
from qtpy.QtGui import QAction, QIcon, QColor, QPainter, QPen, QPixmap, QRegion, QCursor, QTextCursor, QHoverEvent, QFontMetrics, QKeySequence
from qtpy.QtWidgets import QApplication, QMenu, QProxyStyle, QStyle, QGraphicsDropShadowEffect, QListWidget, QWidget, QHBoxLayout, QListWidgetItem, QLineEdit, QTextEdit, QStyledItemDelegate, QStyleOptionViewItem, QLabel
from ...common.icon import FluentIcon
from ...common.icon import FluentIconEngine, Action, FluentIconBase, Icon
from ...common.style_sheet import FluentStyleSheet, themeColor
from ...common.screen import getCurrentScreenGeometry
from ...common.font import getFont
from ...common.config import isDarkTheme
from .scroll_bar import SmoothScrollDelegate
from qtmui.material.styles import useTheme
from qtmui.material.styles.create_theme.components.get_qss_styles import get_qss_style
class CustomMenuStyle:
    def __init__(self, iconSize): ...
    def pixelMetric(self, metric, option, widget): ...
class DWMMenu:
    def __init__(self, title, parent): ...
    def event(self, e: QEvent): ...
class MenuAnimationType:
class SubMenuItemWidget:
    def __init__(self, menu, item, parent): ...
    def enterEvent(self, e): ...
    def paintEvent(self, e): ...
class MenuItemDelegate:
    def _isSeparator(self, index: QModelIndex): ...
    def paint(self, painter, option, index): ...
class ShortcutMenuItemDelegate:
    def paint(self, painter: QPainter, option: QStyleOptionViewItem, index: QModelIndex): ...
class MenuActionListWidget:
    def __init__(self, parent): ...
    def insertItem(self, row, item): ...
    def addItem(self, item): ...
    def takeItem(self, row): ...
    def adjustSize(self, pos, aniType): ...
    def setItemHeight(self, height: int): ...
    def setMaxVisibleItems(self, num: int): ...
    def maxVisibleItems(self): ...
    def heightForAnimation(self, pos: QPoint, aniType: MenuAnimationType): ...
    def itemsHeight(self): ...
class RoundMenu:
    def __init__(self, title, parent): ...
    def __initWidgets(self): ...
    def __set_stylesheet(self): ...
    def setMaxVisibleItems(self, num: int): ...
    def setItemHeight(self, height): ...
    def setShadowEffect(self, blurRadius, offset, color): ...
    def _setParentMenu(self, parent, item): ...
    def adjustSize(self): ...
    def icon(self): ...
    def title(self): ...
    def clear(self): ...
    def setIcon(self, icon: Union[QIcon, FluentIconBase]): ...
    def addAction(self, action: Union[QAction, Action]): ...
    def addWidget(self, widget: QWidget, selectable, onClick): ...
    def _createActionItem(self, action: QAction, before): ...
    def _hasItemIcon(self): ...
    def _adjustItemText(self, item: QListWidgetItem, action: QAction): ...
    def _longestShortcutWidth(self): ...
    def _createItemIcon(self, w): ...
    def insertAction(self, before: Union[QAction, Action], action: Union[QAction, Action]): ...
    def addActions(self, actions: List[Union[QAction, Action]]): ...
    def insertActions(self, before: Union[QAction, Action], actions: List[Union[QAction, Action]]): ...
    def removeAction(self, action: Union[QAction, Action]): ...
    def setDefaultAction(self, action: Union[QAction, Action]): ...
    def addMenu(self, menu): ...
    def insertMenu(self, before: Union[QAction, Action], menu): ...
    def _createSubMenuItem(self, menu): ...
    def _showSubMenu(self, item): ...
    def _onShowMenuTimeOut(self): ...
    def addSeparator(self): ...
    def _onItemClicked(self, item): ...
    def _closeParentMenu(self): ...
    def _onItemEntered(self, item): ...
    def _hideMenu(self, isHideBySystem): ...
    def hideEvent(self, e): ...
    def closeEvent(self, e): ...
    def menuActions(self): ...
    def mousePressEvent(self, e): ...
    def mouseMoveEvent(self, e): ...
    def _onActionChanged(self): ...
    def exec(self, pos, ani, aniType): ...
    def exec_(self, pos: QPoint, ani, aniType): ...
    def adjustPosition(self): ...
    def paintEvent(self, e): ...
class MenuAnimationManager:
    def __init__(self, menu: RoundMenu): ...
    def _onValueChanged(self): ...
    def availableViewSize(self, pos: QPoint): ...
    def _updateMenuViewport(self): ...
    def _endPosition(self, pos): ...
    def _menuSize(self): ...
    def exec(self, pos: QPoint): ...
    def register(cls, name): ...
    def make(cls, menu: RoundMenu, aniType: MenuAnimationType): ...
class DummyMenuAnimationManager:
    def exec(self, pos: QPoint): ...
class DropDownMenuAnimationManager:
    def exec(self, pos): ...
    def availableViewSize(self, pos: QPoint): ...
    def _onValueChanged(self): ...
class PullUpMenuAnimationManager:
    def _endPosition(self, pos): ...
    def exec(self, pos): ...
    def availableViewSize(self, pos: QPoint): ...
    def _onValueChanged(self): ...
class FadeInDropDownMenuAnimationManager:
    def __init__(self, menu: RoundMenu): ...
    def exec(self, pos): ...
    def availableViewSize(self, pos: QPoint): ...
class FadeInPullUpMenuAnimationManager:
    def __init__(self, menu: RoundMenu): ...
    def _endPosition(self, pos): ...
    def exec(self, pos): ...
    def availableViewSize(self, pos: QPoint): ...
class EditMenu:
    def createActions(self): ...
    def _parentText(self): ...
    def _parentSelectedText(self): ...
    def exec(self, pos, ani, aniType): ...
class LineEditMenu:
    def __init__(self, parent: QLineEdit): ...
    def _onItemClicked(self, item): ...
    def _parentText(self): ...
    def _parentSelectedText(self): ...
    def exec(self, pos, ani, aniType): ...
class TextEditMenu:
    def __init__(self, parent: QTextEdit): ...
    def _parentText(self): ...
    def _parentSelectedText(self): ...
    def _onItemClicked(self, item): ...
    def exec(self, pos, ani, aniType): ...
class IndicatorMenuItemDelegate:
    def paint(self, painter: QPainter, option, index): ...
class CheckableMenuItemDelegate:
    def _drawIndicator(self, painter: QPainter, option: QStyleOptionViewItem, index: QModelIndex): ...
    def paint(self, painter: QPainter, option: QStyleOptionViewItem, index: QModelIndex): ...
class RadioIndicatorMenuItemDelegate:
    def _drawIndicator(self, painter, option, index): ...
class CheckIndicatorMenuItemDelegate:
    def _drawIndicator(self, painter, option, index): ...
class MenuIndicatorType:
def createCheckableMenuItemDelegate(style: MenuIndicatorType): ...
class CheckableMenu:
    def __init__(self, title, parent, indicatorType): ...
    def _adjustItemText(self, item: QListWidgetItem, action: QAction): ...
    def exec(self, pos, ani, aniType): ...
class SystemTrayMenu:
    def sizeHint(self): ...
class CheckableSystemTrayMenu:
    def sizeHint(self): ...
class LabelContextMenu:
    def __init__(self, parent: QLabel): ...
    def _onCopy(self): ...
    def _onSelectAll(self): ...
    def label(self): ...
    def exec(self, pos, ani, aniType): ...