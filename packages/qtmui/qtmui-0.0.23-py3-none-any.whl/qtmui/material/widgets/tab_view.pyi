from copy import deepcopy
from enum import Enum
from typing import Dict, List, Union
from qtpy.QtCore import Qt, Signal, Property, QRectF, QSize, QPoint, QPropertyAnimation, QEasingCurve, QRect
from qtpy.QtGui import QPainter, QColor, QIcon, QPainterPath, QLinearGradient, QPen, QBrush, QMouseEvent
from qtpy.QtWidgets import QWidget, QGraphicsDropShadowEffect, QHBoxLayout, QSizePolicy, QApplication
from ...common.icon import FluentIcon, FluentIconBase, drawIcon
from ...common.style_sheet import isDarkTheme, FluentStyleSheet
from ...common.font import setFont
from ...common.router import qrouter
from .button import TransparentToolButton, PushButton
from .scroll_area import SingleDirectionScrollArea
from .tool_tip import ToolTipFilter
class TabCloseButtonDisplayMode:
def checkIndex(*default): ...
class TabToolButton:
    def _postInit(self): ...
    def _drawIcon(self, icon, painter: QPainter, rect: QRectF, state): ...
    def enterEvent(self, e): ...
    def leaveEvent(self, e): ...
class TabItem:
    def _postInit(self): ...
    def __initWidget(self): ...
    def slideTo(self, x: int, duration): ...
    def setShadowEnabled(self, isEnabled: bool): ...
    def _canShowShadow(self): ...
    def setRouteKey(self, key: str): ...
    def routeKey(self): ...
    def setBorderRadius(self, radius: int): ...
    def setSelected(self, isSelected: bool): ...
    def setCloseButtonDisplayMode(self, mode: TabCloseButtonDisplayMode): ...
    def setTextColor(self, color: QColor): ...
    def setSelectedBackgroundColor(self, light: QColor, dark: QColor): ...
    def resizeEvent(self, e): ...
    def enterEvent(self, e): ...
    def leaveEvent(self, e): ...
    def mousePressEvent(self, e): ...
    def mouseMoveEvent(self, e): ...
    def mouseReleaseEvent(self, e): ...
    def _forwardMouseEvent(self, e: QMouseEvent): ...
    def sizeHint(self): ...
    def paintEvent(self, e): ...
    def _drawSelectedBackground(self, painter: QPainter): ...
    def _drawNotSelectedBackground(self, painter: QPainter): ...
    def _drawText(self, painter: QPainter): ...
class TabBar:
    def __init__(self, parent): ...
    def __initWidget(self): ...
    def __initLayout(self): ...
    def setAddButtonVisible(self, isVisible: bool): ...
    def addTab(self, routeKey: str, text: str, icon: Union[QIcon, str, FluentIconBase], onClick): ...
    def insertTab(self, index: int, routeKey: str, text: str, icon: Union[QIcon, str, FluentIconBase], onClick): ...
    def removeTab(self, index: int): ...
    def removeTabByKey(self, routeKey: str): ...
    def setCurrentIndex(self, index: int): ...
    def setCurrentTab(self, routeKey: str): ...
    def currentIndex(self): ...
    def currentTab(self): ...
    def _onItemPressed(self): ...
    def setCloseButtonDisplayMode(self, mode: TabCloseButtonDisplayMode): ...
    def tabItem(self, index: int): ...
    def tab(self, routeKey: str): ...
    def tabRegion(self): ...
    def tabRect(self, index: int): ...
    def tabText(self, index: int): ...
    def tabIcon(self, index: int): ...
    def tabToolTip(self, index: int): ...
    def setTabsClosable(self, isClosable: bool): ...
    def tabsClosable(self): ...
    def setTabIcon(self, index: int, icon: Union[QIcon, FluentIconBase, str]): ...
    def setTabText(self, index: int, text: str): ...
    def setTabVisible(self, index: int, isVisible: bool): ...
    def setTabTextColor(self, index: int, color: QColor): ...
    def setTabToolTip(self, index: int, toolTip: str): ...
    def setTabSelectedBackgroundColor(self, light: QColor, dark: QColor): ...
    def setTabShadowEnabled(self, isEnabled: bool): ...
    def isTabShadowEnabled(self): ...
    def paintEvent(self, e): ...
    def setMovable(self, movable: bool): ...
    def isMovable(self): ...
    def setScrollable(self, scrollable: bool): ...
    def setTabMaximumWidth(self, width: int): ...
    def setTabMinimumWidth(self, width: int): ...
    def tabMaximumWidth(self): ...
    def tabMinimumWidth(self): ...
    def isScrollable(self): ...
    def count(self): ...
    def mousePressEvent(self, e: QMouseEvent): ...
    def mouseMoveEvent(self, e: QMouseEvent): ...
    def mouseReleaseEvent(self, e): ...
    def _adjustLayout(self): ...
    def _swapItem(self, index: int): ...