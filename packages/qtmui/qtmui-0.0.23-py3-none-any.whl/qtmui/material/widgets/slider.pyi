from qtpy.QtCore import QSize, Qt, Signal, QPoint, QRectF, QPropertyAnimation, Property, QEasingCurve
from qtpy.QtGui import QColor, QMouseEvent, QPainter, QPainterPath
from qtpy.QtWidgets import QProxyStyle, QSlider, QStyle, QStyleOptionSlider, QWidget
from ...common.style_sheet import FluentStyleSheet, themeColor, isDarkTheme
from ...common.overload import singledispatchmethod
class SliderHandle:
    def __init__(self, parent: QSlider): ...
    def radius(self): ...
    def radius(self, r): ...
    def enterEvent(self, e): ...
    def leaveEvent(self, e): ...
    def mousePressEvent(self, e): ...
    def mouseReleaseEvent(self, e): ...
    def _startAni(self, radius): ...
    def paintEvent(self, e): ...
class Slider:
    def __init__(self, parent: QWidget): ...
    def _(self, orientation: Qt.Orientation, parent: QWidget): ...
    def _postInit(self): ...
    def setOrientation(self, orientation: Qt.Orientation): ...
    def mousePressEvent(self, e: QMouseEvent): ...
    def mouseMoveEvent(self, e: QMouseEvent): ...
    def grooveLength(self): ...
    def _adjustHandlePos(self): ...
    def _posToValue(self, pos: QPoint): ...
    def paintEvent(self, e): ...
    def _drawHorizonGroove(self, painter: QPainter): ...
    def _drawVerticalGroove(self, painter: QPainter): ...
    def resizeEvent(self, e): ...
class ClickableSlider:
    def mousePressEvent(self, e: QMouseEvent): ...
class HollowHandleStyle:
    def __init__(self, config: dict): ...
    def subControlRect(self, cc: QStyle.ComplexControl, opt: QStyleOptionSlider, sc: QStyle.SubControl, widget: QSlider): ...
    def drawComplexControl(self, cc: QStyle.ComplexControl, opt: QStyleOptionSlider, painter: QPainter, widget: QSlider): ...