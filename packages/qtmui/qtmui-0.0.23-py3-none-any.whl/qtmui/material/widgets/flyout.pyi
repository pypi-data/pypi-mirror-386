from enum import Enum
from typing import Union
from qtpy.QtCore import Qt, QPropertyAnimation, QPoint, QParallelAnimationGroup, QEasingCurve, QMargins, QRectF, QObject, QSize, Signal
from qtpy.QtGui import QPixmap, QPainter, QColor, QCursor, QIcon, QImage, QPainterPath, QBrush, QMovie, QImageReader
from qtpy.QtWidgets import QWidget, QGraphicsDropShadowEffect, QLabel, QHBoxLayout, QVBoxLayout, QApplication
from ...common.auto_wrap import TextWrap
from ...common.style_sheet import isDarkTheme, FluentStyleSheet
from ...common.icon import FluentIconBase, drawIcon, FluentIcon
from ...common.screen import getCurrentScreenGeometry
from .button import TransparentToolButton
from .label import ImageLabel
class FlyoutAnimationType:
class IconWidget:
    def __init__(self, icon, parent): ...
    def paintEvent(self, e): ...
class FlyoutViewBase:
    def __init__(self, parent): ...
    def addWidget(self, widget: QWidget, stretch, align): ...
    def backgroundColor(self): ...
    def borderColor(self): ...
    def paintEvent(self, e): ...
class FlyoutView:
    def __init__(self, title: str, content: str, icon: Union[FluentIconBase, QIcon, str], image: Union[str, QPixmap, QImage], isClosable, parent): ...
    def __initWidgets(self): ...
    def __initLayout(self): ...
    def addWidget(self, widget: QWidget, stretch, align): ...
    def _addImageToLayout(self): ...
    def _adjustText(self): ...
    def _adjustImage(self): ...
    def showEvent(self, e): ...
class Flyout:
    def __init__(self, view: FlyoutViewBase, parent, isDeleteOnClose): ...
    def setShadowEffect(self, blurRadius, offset): ...
    def closeEvent(self, e): ...
    def showEvent(self, e): ...
    def exec(self, pos: QPoint, aniType): ...
    def make(cls, view: FlyoutViewBase, target: Union[QWidget, QPoint], parent, aniType, isDeleteOnClose): ...
    def create(cls, title: str, content: str, icon: Union[FluentIconBase, QIcon, str], image: Union[str, QPixmap, QImage], isClosable, target: Union[QWidget, QPoint], parent, aniType, isDeleteOnClose): ...
    def fadeOut(self): ...
class FlyoutAnimationManager:
    def __init__(self, flyout: Flyout): ...
    def register(cls, name): ...
    def exec(self, pos: QPoint): ...
    def _adjustPosition(self, pos): ...
    def position(self, target: QWidget): ...
    def make(cls, aniType: FlyoutAnimationType, flyout: Flyout): ...
class PullUpFlyoutAnimationManager:
    def position(self, target: QWidget): ...
    def exec(self, pos: QPoint): ...
class DropDownFlyoutAnimationManager:
    def position(self, target: QWidget): ...
    def exec(self, pos: QPoint): ...
class SlideLeftFlyoutAnimationManager:
    def position(self, target: QWidget): ...
    def exec(self, pos: QPoint): ...
class SlideRightFlyoutAnimationManager:
    def position(self, target: QWidget): ...
    def exec(self, pos: QPoint): ...
class FadeInFlyoutAnimationManager:
    def position(self, target: QWidget): ...
    def exec(self, pos: QPoint): ...
class DummyFlyoutAnimationManager:
    def exec(self, pos: QPoint): ...
    def position(self, target: QWidget): ...