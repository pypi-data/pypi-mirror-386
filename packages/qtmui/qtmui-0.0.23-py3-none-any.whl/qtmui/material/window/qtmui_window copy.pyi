from typing import Optional, Dict, Callable, Union
import sys
import uuid
from qtpy.QtCore import Qt, QSize, QRect, Signal, QByteArray
from qtpy.QtGui import QIcon, QPainter, QColor, QPixmap
from qtpy.QtWidgets import QWidget, QHBoxLayout, QLabel, QApplication, QSizePolicy
from ...common.router import qrouter
from ...common.style_sheet import FluentStyleSheet, isDarkTheme
from ...common.animation import BackgroundAnimationWidget
from .frameless_window import FramelessWindow
from qtmui.material.styles import useTheme
from qtmui.material.styles.create_theme.components.get_qss_styles import get_qss_style
from .stacked_widget import StackedWidget
from ...lib.qframelesswindow import TitleBar, TitleBarBase
from qtmui.material.typography import Typography
from qtmui.material.py_iconify import PyIconify
from qtmui.qtmui_assets import QTMUI_ASSETS
from qtmui.material.styles.global_styles import GLOBAL_STYLES
def iconFromBase64(base64): ...
class FluentWindowBase:
    def __init__(self, parent): ...
    def switchTo(self, interface: QWidget): ...
    def _onCurrentInterfaceChanged(self, index: int): ...
    def _updateStackedBackground(self): ...
    def setCustomBackgroundColor(self, light, dark): ...
    def _normalBackgroundColor(self): ...
    def _onThemeChangedFinished(self): ...
    def paintEvent(self, e): ...
    def setMicaEffectEnabled(self, isEnabled: bool): ...
    def isMicaEffectEnabled(self): ...
    def systemTitleBarRect(self, size: QSize): ...
    def setTitleBar(self, titleBar): ...
class FluentTitleBar:
    def __init__(self, parent, title, sx: Optional[Union[Callable, str, Dict]]): ...
    def _set_stylesheet(self): ...
    def _setTitle(self, title): ...
    def setIcon(self, icon): ...
class QtMuiWindow:
    def __init__(self, parent, title): ...
    def setTitle(self, title: str): ...
    def _create_title_bar_content_frame(self): ...
    def setHeader(self, widget: QWidget): ...
    def setCentralWidget(self, widget: QWidget): ...
    def resizeEvent(self, e): ...
class MSFluentTitleBar:
    def __init__(self, parent): ...
class MSFluentWindow:
    def __init__(self, parent): ...
class SplitTitleBar:
    def __init__(self, parent): ...
    def setTitle(self, title): ...
    def setIcon(self, icon): ...
class SplitFluentWindow:
    def __init__(self, parent): ...
class FluentBackgroundTheme: