import uuid
import re
from typing import Optional, Callable, Any, Dict, Union, TYPE_CHECKING
from qtmui.errors import PyMuiValidationError
from qtpy.QtWidgets import QWidget, QGraphicsOpacityEffect, QApplication
from qtpy.QtCore import QObject, Qt, QEvent, QPropertyAnimation, QEasingCurve, QPoint, QSize
from qtpy.QtGui import QPalette, QPainter, QColor
from ..tooltip import ToolTipFilter
from qtmui.material.styles.create_theme.components.get_qss_styles import get_qss_style
from qtmui.hooks import State
from qtmui.i18n.use_translation import i18n, translate
from ..utils.validate_params import _validate_param
class PyWidgetBase:
    def __init__(self, parent, onMouseEnter: Optional[Callable], onMouseLeave: Optional[Callable], onMousePress: Optional[Callable], onMouseRelease: Optional[Callable], onFocusIn: Optional[Callable], onFocusOut: Optional[Callable], tooltip: Optional[str], tooltipPlacement: Optional[str], tooltipLeaveDelay: Optional[int], *args, **kwargs): ...
    def _setUpUi(self, **kwargs): ...
    def __setup_vh_or_vw_height_width(self): ...
    def _update_height_vh_on_mainwindow_resize(self, new_size: QSize): ...
    def showEvent(self, duration): ...
    def _installTooltipFilter(self): ...
    def _getTranslatedText(self, input): ...
    def setupPseudoClasses(self, sx: dict): ...
    def set_styleFn(self, styleFn): ...
    def _update_component_styles(self, theme, component_styles): ...
    def enterEvent(self, event): ...
    def leaveEvent(self, event): ...
    def mousePressEvent(self, event): ...
    def mouseReleaseEvent(self, event): ...
    def focusInEvent(self, event): ...
    def focusOutEvent(self, event): ...
    def changeEvent(self, event: QEvent): ...
    def _on_destroyed(self): ...
    def _setup_sx_position(self, sx: Optional[Union[Callable, str, Dict]]): ...
    def _initialize_positioning(self): ...
    def _parse_size_value(self, val, parent_size): ...
    def _update_size_from_sx(self): ...
    def __get_sx_dict(self): ...
    def __contvert_to_percent_value(self, value): ...
    def _get_float_or_percent_sx_value(self, key): ...
    def _apply_float_and_percent_sx_value(self): ...
    def _on_sx_changed(self): ...
    def _get_position_from_sx(self): ...
    def _get_sx_value(self, key: str): ...
    def _add_absolute_child(self, child: Any): ...
    def _remove_absolute_child(self, child: Any): ...
    def update_absolute_position(self): ...
    def _ajustPositionBaseOnParentMarginValue(self, pos): ...
    def update_absolute_children(self): ...
    def resizeEvent(self, event): ...
    def setOpacity(self, opacity): ...
    def paintEvent(self, event): ...