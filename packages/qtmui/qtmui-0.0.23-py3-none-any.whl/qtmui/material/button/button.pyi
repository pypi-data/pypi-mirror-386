import asyncio
from functools import lru_cache
import uuid
from typing import Optional, Callable, Union, Dict, List
from qtpy.QtWidgets import QSizePolicy, QWidget, QVBoxLayout, QHBoxLayout
from qtpy.QtCore import Qt, QPoint, Signal, QTimer, QEvent
from qtpy.QtGui import QPalette
from qtmui.hooks import State
from qtmui.material.py_iconify import Iconify, PyIconify
from qtmui.material.menu import Menu
from .button_base import ButtonBase
from qtmui.material.styles import useTheme
from qtmui.i18n.use_translation import translate, i18n
from qtmui.material.styles.create_theme.components.get_qss_styles import get_qss_style
from ..utils.validate_params import _validate_param
class Button:
    def __init__(self, autoFocus: Optional[Union[State, bool]], id: Optional[Union[State, str]], text: Optional[Union[State, str, Callable]], value, active: Optional[Union[State, bool]], isLoadingButton: Optional[Union[State, bool]], key: Optional[Union[State, str]], children: Optional[Union[State, List, str]], classes: Optional[Union[State, Dict]], color: Optional[Union[State, str]], component: Optional[Union[State, str]], disabled: Optional[Union[State, bool]], disableElevation: Optional[Union[State, bool]], disableFocusRipple: Optional[Union[State, bool]], disableRipple: Optional[Union[State, bool]], disablePointerEvents: Optional[Union[State, bool]], menu: Optional[Union[State, Menu]], endIcon: Optional[Union[State, Iconify]], fullWidth: Optional[Union[State, bool]], href: Optional[Union[State, str]], size: Optional[Union[State, str]], startIcon: Optional[Union[State, Iconify]], sx: Optional[Union[State, Callable, str, Dict]], type: Optional[Union[State, str]], variant: Optional[Union[State, str]], *args, **kwargs): ...
    def _onDestroy(self, obj): ...
    def _schedule_init(self): ...
    def _set_autoFocus(self, value): ...
    def _get_autoFocus(self): ...
    def _set_id(self, value): ...
    def _get_id(self): ...
    def _set_text(self, value): ...
    def _get_text(self): ...
    def _set_value(self, value): ...
    def _get_value(self): ...
    def _set_active(self, value): ...
    def _get_active(self): ...
    def _set_isLoadingButton(self, value): ...
    def _get_isLoadingButton(self): ...
    def _set_key(self, value): ...
    def _get_key(self): ...
    def _set_children(self, value): ...
    def _get_children(self): ...
    def _set_classes(self, value): ...
    def _get_classes(self): ...
    def _set_color(self, value): ...
    def _get_color(self): ...
    def _set_component(self, value): ...
    def _get_component(self): ...
    def _set_disabled(self, value): ...
    def _get_disabled(self): ...
    def _set_disableElevation(self, value): ...
    def _get_disableElevation(self): ...
    def _set_disableFocusRipple(self, value): ...
    def _get_disableFocusRipple(self): ...
    def _set_disableRipple(self, value): ...
    def _get_disableRipple(self): ...
    def _set_disablePointerEvents(self, value): ...
    def _get_disablePointerEvents(self): ...
    def _set_menu(self, value): ...
    def _get_menu(self): ...
    def _set_endIcon(self, value): ...
    def _get_endIcon(self): ...
    def _set_fullWidth(self, value): ...
    def _get_fullWidth(self): ...
    def _set_href(self, value): ...
    def _get_href(self): ...
    def _set_size(self, value): ...
    def _get_size(self): ...
    def _set_startIcon(self, value): ...
    def _get_startIcon(self): ...
    def _set_sx(self, value): ...
    def _get_sx(self): ...
    def _set_type(self, value): ...
    def _get_type(self): ...
    def _set_variant(self, value): ...
    def _get_variant(self): ...
    def connect_signal_slot(self): ...
    def init_ui(self): ...
    def retranslateUi(self): ...
    def _get_stylesheet(cls, _variant: str, _size: str, _color: str, _theme_mode: str): ...
    def _set_stylesheet(self, component_styled): ...
    def changeEvent(self, event: QEvent): ...
    def _setIcon(self): ...
    def _show_menu(self, state): ...
    def _hide_popup(self): ...
    def _show_popup(self, state): ...
    def mouseReleaseEvent(self, event): ...
    def set_visible(self, state): ...
    def set_collapse_icon(self, icon): ...
    def get_selected(self): ...
    def set_selected(self, selected): ...