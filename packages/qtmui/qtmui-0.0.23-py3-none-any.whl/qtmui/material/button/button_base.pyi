import inspect
from typing import Callable, Optional
import uuid
from qtpy.QtWidgets import QPushButton
from qtpy.QtCore import Qt, QPropertyAnimation, QEasingCurve, QPoint, Property, QObject, QTimer, Signal
from qtpy.QtGui import QPainter, QBrush, QPainterPath
from qtmui.hooks import State
from ..system.color_manipulator import get_palette_text_color, hex_string_to_qcolor
from ..widget_base import PyWidgetBase
from qtmui.material.styles import useTheme
class RippleEffect:
    def __init__(self, parent): ...
    def radius(self): ...
    def setRadius(self, radius): ...
    def opacity(self): ...
    def setOpacity(self, opacity): ...
    def center(self): ...
    def setCenter(self, center): ...
class ButtonBase:
    def __init__(self, id: str, key: str, value: object, action: Optional[Callable], centerRipple: bool, children: Optional[object], classes: Optional[dict], component: Optional[object], disabled: bool, disableRipple: bool, disableTouchRipple: bool, focusRipple: bool, focusVisibleClassName: Optional[str], LinkComponent: Optional[object], onFocusVisible: Optional[Callable], sx: Optional[object], tabIndex: Optional[int], TouchRippleProps: Optional[dict], touchRippleRef: Optional[Callable], tooltip: Optional[str], tooltipMaxWidth: Optional[int], tooltipPlacement: Optional[str], onBlur: Optional[Callable], onClick: Optional[Callable], onMouseEnter: Optional[Callable], onContextMenu: Optional[Callable], onFocus: Optional[Callable], onKeyDown: Optional[Callable], onKeyUp: Optional[Callable], onMouseDown: Optional[Callable], onMouseLeave: Optional[Callable], onMouseUp: Optional[Callable], onDragLeave: Optional[Callable], rippleDuration: int, rippleTimeout: int, *args, **kwargs): ...
    def _setup_ui(self): ...
    def _connect_signals_to_slots(self): ...
    def _set_enabled(self, state): ...
    def _run_ripple_animation(self): ...
    def set_on_click(self, callback): ...
    def enterEvent(self, event): ...
    def leaveEvent(self, event): ...