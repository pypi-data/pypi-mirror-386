from typing import Iterable, List
from qtpy.QtCore import Qt, Signal, QSize, QRectF, QPoint, QPropertyAnimation, QEasingCurve, QObject
from qtpy.QtGui import QColor, QPainter, QCursor, QRegion
from qtpy.QtWidgets import QApplication, QWidget, QFrame, QVBoxLayout, QHBoxLayout, QGraphicsDropShadowEffect, QSizePolicy, QPushButton, QListWidgetItem
from ..widgets.cycle_list_widget import CycleListWidget
from ..widgets.button import TransparentToolButton
from ..button import Button
from ...common.icon import FluentIcon
from ...common.screen import getCurrentScreenGeometry
from qtmui.material.styles import useTheme
from ..py_iconify import PyIconify
from ...qtmui_assets import QTMUI_ASSETS
def get_stylesheet(): ...
class SeparatorWidget:
    def __init__(self, orient: Qt.Orientation, parent): ...
    def _set_theme(self): ...
class ItemMaskWidget:
    def __init__(self, listWidgets: List[CycleListWidget], parent): ...
    def _set_theme(self): ...
    def paintEvent(self, e): ...
    def _drawText(self, item: QListWidgetItem, painter: QPainter, y: int): ...
class PickerColumnFormatter:
    def __init__(self): ...
    def encode(self, value): ...
    def decode(self, value: str): ...
class DigitFormatter:
    def decode(self, value): ...
class PickerColumnButton:
    def __init__(self, name: str, items: Iterable, width: int, align, formatter, parent): ...
    def align(self): ...
    def setAlignment(self, align): ...
    def value(self): ...
    def setValue(self, v): ...
    def items(self): ...
    def setItems(self, items: Iterable): ...
    def formatter(self): ...
    def setFormatter(self, formatter): ...
    def name(self): ...
    def setName(self, name: str): ...
def checkColumnIndex(func): ...
class PickerBase:
    def __init__(self, parent): ...
    def _set_theme(self): ...
    def addColumn(self, name: str, items: Iterable, width: int, align, formatter: PickerColumnFormatter): ...
    def setColumnAlignment(self, index: int, align): ...
    def setColumnWidth(self, index: int, width: int): ...
    def setColumnTight(self, index: int): ...
    def setColumnVisible(self, index: int, isVisible: bool): ...
    def value(self): ...
    def initialValue(self): ...
    def setColumnValue(self, index: int, value): ...
    def setColumnInitialValue(self, index: int, value): ...
    def setColumnFormatter(self, index: int, formatter: PickerColumnFormatter): ...
    def setColumnItems(self, index: int, items: Iterable): ...
    def encodeValue(self, index: int, value): ...
    def decodeValue(self, index: int, value): ...
    def setColumn(self, index: int, name: str, items: Iterable, width: int, align): ...
    def clearColumns(self): ...
    def enterEvent(self, e): ...
    def leaveEvent(self, e): ...
    def mousePressEvent(self, e): ...
    def mouseReleaseEvent(self, e): ...
    def _setButtonProperty(self, name, value): ...
    def panelInitialValue(self): ...
    def _showPanel(self): ...
    def _onConfirmed(self, value: list): ...
    def _onColumnValueChanged(self, panel, index: int, value: str): ...
class PickerToolButton:
    def _drawIcon(self, icon, painter, rect): ...
class PickerPanel:
    def __init__(self, parent): ...
    def __initWidget(self): ...
    def _set_theme(self): ...
    def setShadowEffect(self, blurRadius, offset, color): ...
    def addColumn(self, items: Iterable, width: int, align): ...
    def resizeEvent(self, e): ...
    def value(self): ...
    def setValue(self, value: list): ...
    def columnValue(self, index: int): ...
    def setColumnValue(self, index: int, value: str): ...
    def column(self, index: int): ...
    def exec(self, pos, ani): ...
    def _onAniValueChanged(self, opacity): ...
    def _fadeOut(self): ...