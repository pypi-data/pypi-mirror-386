from math import ceil
from collections import defaultdict, Counter
from typing import Tuple, Type
from qtpy.QtCore import Qt, QRectF, Signal, QSize, QModelIndex, QDate, QCalendar, QEasingCurve, QPropertyAnimation, QParallelAnimationGroup, QPoint, QRect, QStringListModel
from qtpy.QtGui import QPainter, QColor, QCursor
from qtpy.QtWidgets import QApplication, QFrame, QPushButton, QHBoxLayout, QVBoxLayout, QListWidget, QListWidgetItem, QStyledItemDelegate, QStyle, QStyleOptionViewItem, QLabel, QWidget, QStackedWidget, QGraphicsDropShadowEffect, QListView
from ...common.icon import FluentIcon
from ...common.style_sheet import isDarkTheme, FluentStyleSheet, themeColor, ThemeColor
from ...common.font import getFont
from ...common.screen import getCurrentScreenGeometry
from ..widgets.button import TransparentToolButton
from ..widgets.scroll_bar import SmoothScrollBar
class ScrollButton:
    def _drawIcon(self, icon, painter: QPainter, rect: QRectF): ...
    def paintEvent(self, e): ...
class ScrollItemDelegate:
    def __init__(self, min, max): ...
    def setRange(self, min, max): ...
    def setPressedIndex(self, index: QModelIndex): ...
    def setCurrentIndex(self, index: QModelIndex): ...
    def setSelectedIndex(self, index: QModelIndex): ...
    def paint(self, painter, option, index): ...
    def _drawBackground(self, painter: QPainter, option: QStyleOptionViewItem, index: QModelIndex): ...
    def _drawText(self, painter: QPainter, option: QStyleOptionViewItem, index: QModelIndex): ...
    def _itemMargin(self): ...
class YearScrollItemDelegate:
    def _itemMargin(self): ...
class DayScrollItemDelegate:
    def _itemMargin(self): ...
class ScrollViewBase:
    def __init__(self, Delegate: Type[ScrollItemDelegate], parent): ...
    def __initWidget(self): ...
    def _onFirstScrollFinished(self): ...
    def scrollUp(self): ...
    def scrollDown(self): ...
    def scrollToPage(self, page: int): ...
    def currentPageRange(self): ...
    def setDate(self, date: QDate): ...
    def scrollToDate(self, date: QDate): ...
    def _setPressedIndex(self, index): ...
    def _setSelectedIndex(self, index): ...
    def wheelEvent(self, e): ...
    def mousePressEvent(self, e): ...
    def mouseReleaseEvent(self, e): ...
    def gridSize(self): ...
class CalendarViewBase:
    def __init__(self, parent): ...
    def __initWidget(self): ...
    def setScrollView(self, view: ScrollViewBase): ...
    def setDate(self, date: QDate): ...
    def setTitle(self, title: str): ...
    def currentPageDate(self): ...
    def _onScrollUp(self): ...
    def _onScrollDown(self): ...
    def _updateTitle(self): ...
class YearScrollView:
    def __init__(self, parent): ...
    def _initItems(self): ...
    def scrollToDate(self, date: QDate): ...
    def currentPageRange(self): ...
class YearCalendarView:
    def __init__(self, parent): ...
    def _updateTitle(self): ...
class MonthScrollView:
    def __init__(self, parent): ...
    def _initItems(self): ...
    def scrollToDate(self, date: QDate): ...
    def currentPageRange(self): ...
class MonthCalendarView:
    def __init__(self, parent): ...
    def _updateTitle(self): ...
    def currentPageDate(self): ...
class DayScrollView:
    def __init__(self, parent): ...
    def gridSize(self): ...
    def _initItems(self): ...
    def setDate(self, date: QDate): ...
    def scrollToDate(self, date: QDate): ...
    def scrollToPage(self, page: int): ...
    def currentPageRange(self): ...
    def _pageToDate(self): ...
    def _dateToRow(self, date: QDate): ...
    def mouseReleaseEvent(self, e): ...
class DayCalendarView:
    def __init__(self, parent): ...
    def _updateTitle(self): ...
    def currentPageDate(self): ...
    def scrollToDate(self, date: QDate): ...
class CalendarView:
    def __init__(self, parent): ...
    def __initWidget(self): ...
    def setShadowEffect(self, blurRadius, offset, color): ...
    def _onDayViewTitleClicked(self): ...
    def _onMonthTitleClicked(self): ...
    def _onMonthItemClicked(self, date: QDate): ...
    def _onYearItemClicked(self, date: QDate): ...
    def _onDayItemClicked(self, date: QDate): ...
    def setDate(self, date: QDate): ...
    def exec(self, pos: QPoint, ani): ...