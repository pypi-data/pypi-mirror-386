from enum import Enum
from qtpy.QtCore import QEasingCurve, QEvent, QObject, QPropertyAnimation, Property, Signal, QPoint, QPointF
from qtpy.QtCore import QEasingCurve, QEvent, QObject, QPropertyAnimation, Property, Signal, QPoint, QPointF
from qtpy.QtGui import QMouseEvent, QEnterEvent, QColor
from qtpy.QtWidgets import QWidget, QLineEdit, QGraphicsDropShadowEffect
from .config import qconfig
class AnimationBase:
    def __init__(self, parent: QWidget): ...
    def _onHover(self, e: QEnterEvent): ...
    def _onLeave(self, e: QEvent): ...
    def _onPress(self, e: QMouseEvent): ...
    def _onRelease(self, e: QMouseEvent): ...
    def eventFilter(self, obj, e: QEvent): ...
class TranslateYAnimation:
    def __init__(self, parent: QWidget, offset): ...
    def y(self): ...
    def y(self, y): ...
    def _onPress(self, e): ...
    def _onRelease(self, e): ...
class BackgroundAnimationWidget:
    def __init__(self, *args, **kwargs): ...
    def eventFilter(self, obj, e): ...
    def mousePressEvent(self, e): ...
    def mouseReleaseEvent(self, e): ...
    def enterEvent(self, e): ...
    def leaveEvent(self, e): ...
    def focusInEvent(self, e): ...
    def _normalBackgroundColor(self): ...
    def _hoverBackgroundColor(self): ...
    def _pressedBackgroundColor(self): ...
    def _focusInBackgroundColor(self): ...
    def _disabledBackgroundColor(self): ...
    def _updateBackgroundColor(self): ...
    def getBackgroundColor(self): ...
    def setBackgroundColor(self, color: QColor): ...
    def backgroundColor(self): ...
class BackgroundColorObject:
    def __init__(self, parent: BackgroundAnimationWidget): ...
    def backgroundColor(self): ...
    def backgroundColor(self, color: QColor): ...
class DropShadowAnimation:
    def __init__(self, parent: QWidget, normalColor, hoverColor): ...
    def setBlurRadius(self, radius: int): ...
    def setOffset(self, dx: int, dy: int): ...
    def setNormalColor(self, color: QColor): ...
    def setHoverColor(self, color: QColor): ...
    def setColor(self, color): ...
    def _createShadowEffect(self): ...
    def eventFilter(self, obj, e): ...
    def _onAniFinished(self): ...
class FluentAnimationSpeed:
class FluentAnimationType:
class FluentAnimationProperty:
class FluentAnimationProperObject:
    def __init__(self, parent): ...
    def getValue(self): ...
    def setValue(self): ...
    def register(cls, name): ...
    def create(cls, propertyType: FluentAnimationProperty, parent): ...
class PositionObject:
    def __init__(self, parent): ...
    def getValue(self): ...
    def setValue(self, pos: QPoint): ...
class ScaleObject:
    def __init__(self, parent): ...
    def getValue(self): ...
    def setValue(self, scale: float): ...
class AngleObject:
    def __init__(self, parent): ...
    def getValue(self): ...
    def setValue(self, angle: float): ...
class OpacityObject:
    def __init__(self, parent): ...
    def getValue(self): ...
    def setValue(self, opacity: float): ...
class FluentAnimation:
    def __init__(self, parent): ...
    def createBezierCurve(cls, x1, y1, x2, y2): ...
    def curve(cls): ...
    def setSpeed(self, speed: FluentAnimationSpeed): ...
    def speedToDuration(self, speed: FluentAnimationSpeed): ...
    def startAnimation(self, endValue, startValue): ...
    def value(self): ...
    def setValue(self, value): ...
    def register(cls, name): ...
    def create(cls, aniType: FluentAnimationType, propertyType: FluentAnimationProperty, speed, value, parent): ...
class FastInvokeAnimation:
    def curve(cls): ...
    def speedToDuration(self, speed: FluentAnimationSpeed): ...
class StrongInvokeAnimation:
    def curve(cls): ...
    def speedToDuration(self, speed: FluentAnimationSpeed): ...
class FastDismissAnimation:
class SoftDismissAnimation:
    def curve(cls): ...
    def speedToDuration(self, speed: FluentAnimationSpeed): ...
class PointToPointAnimation:
    def curve(cls): ...
class FadeInOutAnimation:
    def speedToDuration(self, speed: FluentAnimationSpeed): ...
class FluentAnimationSpeed:
class FluentAnimationType:
class FluentAnimationProperty:
class FluentAnimationProperObject:
    def __init__(self, parent): ...
    def getValue(self): ...
    def setValue(self): ...
    def register(cls, name): ...
    def create(cls, propertyType: FluentAnimationProperty, parent): ...
class PositionObject:
    def __init__(self, parent): ...
    def getValue(self): ...
    def setValue(self, pos: QPoint): ...
class ScaleObject:
    def __init__(self, parent): ...
    def getValue(self): ...
    def setValue(self, scale: float): ...
class AngleObject:
    def __init__(self, parent): ...
    def getValue(self): ...
    def setValue(self, angle: float): ...
class OpacityObject:
    def __init__(self, parent): ...
    def getValue(self): ...
    def setValue(self, opacity: float): ...
class FluentAnimation:
    def __init__(self, parent): ...
    def createBezierCurve(cls, x1, y1, x2, y2): ...
    def curve(cls): ...
    def setSpeed(self, speed: FluentAnimationSpeed): ...
    def speedToDuration(self, speed: FluentAnimationSpeed): ...
    def startAnimation(self, endValue, startValue): ...
    def value(self): ...
    def setValue(self, value): ...
    def register(cls, name): ...
    def create(cls, aniType: FluentAnimationType, propertyType: FluentAnimationProperty, speed, value, parent): ...
class FastInvokeAnimation:
    def curve(cls): ...
    def speedToDuration(self, speed: FluentAnimationSpeed): ...
class StrongInvokeAnimation:
    def curve(cls): ...
    def speedToDuration(self, speed: FluentAnimationSpeed): ...
class FastDismissAnimation:
class SoftDismissAnimation:
    def curve(cls): ...
    def speedToDuration(self, speed: FluentAnimationSpeed): ...
class PointToPointAnimation:
    def curve(cls): ...
class FadeInOutAnimation:
    def speedToDuration(self, speed: FluentAnimationSpeed): ...