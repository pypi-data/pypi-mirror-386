import json
from copy import deepcopy
from enum import Enum
from pathlib import Path
from qtpy.QtCore import QObject, Signal
from qtpy.QtGui import QColor
from .exception_handler import exceptionHandler
from qtmui.material.styles import useTheme
class Theme:
class ConfigValidator:
    def validate(self, value): ...
    def correct(self, value): ...
class RangeValidator:
    def __init__(self, min, max): ...
    def validate(self, value): ...
    def correct(self, value): ...
class OptionsValidator:
    def __init__(self, options): ...
    def validate(self, value): ...
    def correct(self, value): ...
class BoolValidator:
    def __init__(self): ...
class FolderValidator:
    def validate(self, value): ...
    def correct(self, value): ...
class FolderListValidator:
    def validate(self, value): ...
    def correct(self, value): ...
class ColorValidator:
    def __init__(self, default): ...
    def validate(self, color): ...
    def correct(self, value): ...
class ConfigSerializer:
    def serialize(self, value): ...
    def deserialize(self, value): ...
class EnumSerializer:
    def __init__(self, enumClass): ...
    def serialize(self, value): ...
    def deserialize(self, value): ...
class ColorSerializer:
    def serialize(self, value: QColor): ...
    def deserialize(self, value): ...
class ConfigItem:
    def __init__(self, group, name, default, validator, serializer, restart): ...
    def value(self): ...
    def value(self, v): ...
    def key(self): ...
    def __str__(self): ...
    def serialize(self): ...
    def deserializeFrom(self, value): ...
class RangeConfigItem:
    def range(self): ...
    def __str__(self): ...
class OptionsConfigItem:
    def options(self): ...
    def __str__(self): ...
class ColorConfigItem:
    def __init__(self, group, name, default, restart): ...
    def __str__(self): ...
class QConfig:
    def __init__(self): ...
    def get(self, item): ...
    def set(self, item, value, save, copy): ...
    def toDict(self, serialize): ...
    def save(self): ...
    def load(self, file, config): ...
    def theme(self): ...
    def theme(self, t): ...
def isDarkTheme(): ...
def theme(): ...