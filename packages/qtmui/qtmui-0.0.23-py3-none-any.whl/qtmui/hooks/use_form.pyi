from typing import Any, Callable, Dict, Optional
from .use_state import useState, State
from dataclasses import dataclass
from qtpy.QtCore import QObject, Signal
class UseFormType:
    state: State
    handleSubmit: Callable[Any, any]
    setValue: Callable[Any, any]
    formState: Callable[Any, any]
    control: dict
    watch: Callable[Any, dict]
    reset: Callable[Any, any]
    resolver: Callable[Any, any]
    fields: State
class FormContext:
    def setInstance(cls, instance: Any): ...
    def getInstance(cls): ...
class UseForm:
    def __init__(self, resolver, values): ...
    def handleSubmit(self, *args, **kwargs): ...
    def setValue(self, name: str, value: Any): ...
    def watch(self): ...
    def reset(self): ...
    def formState(self): ...
    def control(self): ...
def useForm(resolver: Callable, values: object): ...
class UseFormContextType:
    control: Optional[Any]
    setValue: Callable[Any, any]
    watch: Callable[Any, dict]
    resetField: Callable[Any, any]
def useFormContext(): ...