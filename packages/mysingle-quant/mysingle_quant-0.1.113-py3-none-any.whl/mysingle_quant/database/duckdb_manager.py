"""
DuckDB Database Manager - Common Base Class
Î™®Îì† ÏÑúÎπÑÏä§ÏóêÏÑú Í≥µÌÜµÏúºÎ°ú ÏÇ¨Ïö©ÌïòÎäî DuckDB Í¥ÄÎ¶¨ ÌÅ¥ÎûòÏä§
"""

import json
import uuid
from datetime import UTC, datetime
from pathlib import Path
from typing import Any

import duckdb

from mysingle_quant import get_logger

logger = get_logger(__name__)


class BaseDuckDBManager:
    """DuckDB Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Í¥ÄÎ¶¨ Í∏∞Î≥∏ ÌÅ¥ÎûòÏä§"""

    def __init__(self, db_path: str):
        """
        Args:
            db_path: DuckDB ÌååÏùº Í≤ΩÎ°ú
        """
        self.db_path = db_path
        self.connection: duckdb.DuckDBPyConnection | None = None

        # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
        Path(self.db_path).parent.mkdir(parents=True, exist_ok=True)

    @property
    def duckdb_conn(self) -> duckdb.DuckDBPyConnection:
        """DuckDB Ïó∞Í≤∞ Í∞ùÏ≤¥ Î∞òÌôò"""
        if self.connection is None:
            self.connect()
        if self.connection is None:
            raise RuntimeError("DuckDB connection not established")
        return self.connection

    def __enter__(self):
        """Ïª®ÌÖçÏä§Ìä∏ Îß§ÎãàÏ†Ä ÏßÑÏûÖ"""
        self.connect()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        """Ïª®ÌÖçÏä§Ìä∏ Îß§ÎãàÏ†Ä Ï¢ÖÎ£å"""
        self.close()

    def connect(self) -> None:
        """Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞"""
        if self.connection is None:
            logger.info(f"Connecting to DuckDB at: {self.db_path}")
            try:
                # Í∏∞Ï°¥ Ïó∞Í≤∞Ïù¥ ÏûàÎã§Î©¥ Ï¢ÖÎ£å
                self.close()
                # ÏÉà Ïó∞Í≤∞ ÏÉùÏÑ±
                self.connection = duckdb.connect(self.db_path)
                self._create_tables()
                logger.info(f"‚úÖ DuckDB connected successfully at: {self.db_path}")
            except Exception as e:
                logger.error(f"‚ùå Failed to connect to DuckDB: {e}")
                # ÌååÏùºÏù¥ Ïû†Í≤®ÏûàÎã§Î©¥ Î©îÎ™®Î¶¨ DBÎ°ú Ìè¥Î∞±
                if "lock" in str(e).lower():
                    logger.warning("üîÑ Falling back to in-memory database")
                    self.connection = duckdb.connect(":memory:")
                    self._create_tables()
                    logger.info("‚úÖ DuckDB connected to in-memory database")
                else:
                    raise

    def close(self) -> None:
        """Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ Ï¢ÖÎ£å"""
        if self.connection:
            try:
                self.connection.close()
                logger.info("üîí DuckDB connection closed")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Error closing DuckDB connection: {e}")
            finally:
                self.connection = None

    def _create_tables(self) -> None:
        """ÌÖåÏù¥Î∏î ÏÉùÏÑ± - ÏÑúÎ∏åÌÅ¥ÎûòÏä§ÏóêÏÑú Ïò§Î≤ÑÎùºÏù¥Îìú"""
        raise NotImplementedError("Subclass must implement _create_tables()")

    def _ensure_connected(self) -> None:
        """Ïó∞Í≤∞Ïù¥ ÏóÜÏúºÎ©¥ ÏûêÎèôÏúºÎ°ú Ïó∞Í≤∞"""
        if self.connection is None:
            self.connect()

    def _make_json_serializable(self, obj) -> Any:
        """Í∞ùÏ≤¥Î•º JSON ÏßÅÎ†¨Ìôî Í∞ÄÎä•ÌïòÎèÑÎ°ù Î≥ÄÌôò"""
        import json
        from datetime import datetime
        from decimal import Decimal

        if isinstance(obj, dict):
            return {k: self._make_json_serializable(v) for k, v in obj.items()}
        elif isinstance(obj, list):
            return [self._make_json_serializable(item) for item in obj]
        elif isinstance(obj, datetime):
            return obj.isoformat()
        elif isinstance(obj, Decimal):
            return float(obj)
        elif hasattr(obj, "model_dump"):  # Pydantic v2
            return self._make_json_serializable(obj.model_dump())
        elif hasattr(obj, "dict"):  # Pydantic v1
            return self._make_json_serializable(obj.dict())
        else:
            # Í∏∞Î≥∏ JSON ÏßÅÎ†¨Ìôî ÏãúÎèÑ
            try:
                json.dumps(obj)
                return obj
            except (TypeError, ValueError):
                return str(obj)

    # ===== Í≥µÌÜµ Ï∫êÏãú Î©îÏÑúÎìúÎì§ =====

    def store_cache_data(
        self, cache_key: str, data: list[dict], table_name: str = "cache_data"
    ) -> bool:
        """DuckDB Ï∫êÏãúÏóê Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•"""
        self._ensure_connected()
        if not self.connection:
            return False

        try:
            # ÌÖåÏù¥Î∏îÏù¥ ÏóÜÏúºÎ©¥ ÏÉùÏÑ±
            self._create_cache_table(table_name)

            # Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
            self.connection.execute(
                f"DELETE FROM {table_name} WHERE cache_key = ?", [cache_key]
            )

            # ÏÉà Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ
            now = datetime.now(UTC)
            record_id = str(uuid.uuid4())

            self.connection.execute(
                f"""
                INSERT INTO {table_name} (id, cache_key, data_json, created_at, updated_at)
                VALUES (?, ?, ?, ?, ?)
            """,
                [record_id, cache_key, json.dumps(data), now, now],
            )

            logger.info(f"Ï∫êÏãú Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• ÏôÑÎ£å: {cache_key}")
            return True

        except Exception as e:
            logger.error(f"Ï∫êÏãú Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• Ïã§Ìå®: {e}")
            return False

    def get_cache_data(
        self, cache_key: str, table_name: str = "cache_data", ttl_hours: int = 24
    ) -> list[dict] | None:
        """DuckDB Ï∫êÏãúÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå"""
        self._ensure_connected()
        if not self.connection:
            return None

        try:
            # TTL Ï≤¥ÌÅ¨Î•º ÏúÑÌïú ÏãúÍ∞Ñ Í≥ÑÏÇ∞
            cutoff_time = datetime.now(UTC).timestamp() - (ttl_hours * 3600)

            result = self.connection.execute(
                f"""
                SELECT data_json, updated_at
                FROM {table_name}
                WHERE cache_key = ?
                AND EXTRACT(EPOCH FROM updated_at) > ?
            """,
                [cache_key, cutoff_time],
            ).fetchone()

            if result:
                data_json, _ = result
                parsed_data: list[dict[Any, Any]] = json.loads(data_json)  # type: ignore[assignment]
                return parsed_data
            else:
                return None

        except Exception as e:
            logger.error(f"Ï∫êÏãú Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïã§Ìå®: {e}")
            return None

    def _create_cache_table(self, table_name: str) -> None:
        """Ï∫êÏãú ÌÖåÏù¥Î∏î ÏÉùÏÑ±"""
        self._ensure_connected()
        if not self.connection:
            return

        self.connection.execute(
            f"""
            CREATE TABLE IF NOT EXISTS {table_name} (
                id VARCHAR PRIMARY KEY,
                cache_key VARCHAR NOT NULL,
                data_json TEXT NOT NULL,
                created_at TIMESTAMP NOT NULL,
                updated_at TIMESTAMP NOT NULL
            )
        """
        )

        # Ïù∏Îç±Ïä§ ÏÉùÏÑ±
        self.connection.execute(
            f"""
            CREATE INDEX IF NOT EXISTS idx_{table_name}_cache_key
            ON {table_name}(cache_key)
        """
        )

        self.connection.execute(
            f"""
            CREATE INDEX IF NOT EXISTS idx_{table_name}_updated_at
            ON {table_name}(updated_at)
        """
        )
