# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1MultiMachineJobEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'id': 'str',
        'job_id': 'str',
        'message': 'str',
        'multi_machine_job_id': 'str',
        'project_id': 'str',
        'reason': 'str',
        'timestamp': 'datetime',
        'type': 'V1MultiMachineJobEventType'
    }

    attribute_map = {
        'action': 'action',
        'id': 'id',
        'job_id': 'jobId',
        'message': 'message',
        'multi_machine_job_id': 'multiMachineJobId',
        'project_id': 'projectId',
        'reason': 'reason',
        'timestamp': 'timestamp',
        'type': 'type'
    }

    def __init__(self, action: 'str' =None, id: 'str' =None, job_id: 'str' =None, message: 'str' =None, multi_machine_job_id: 'str' =None, project_id: 'str' =None, reason: 'str' =None, timestamp: 'datetime' =None, type: 'V1MultiMachineJobEventType' =None):  # noqa: E501
        """V1MultiMachineJobEvent - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._id = None
        self._job_id = None
        self._message = None
        self._multi_machine_job_id = None
        self._project_id = None
        self._reason = None
        self._timestamp = None
        self._type = None
        self.discriminator = None
        if action is not None:
            self.action = action
        if id is not None:
            self.id = id
        if job_id is not None:
            self.job_id = job_id
        if message is not None:
            self.message = message
        if multi_machine_job_id is not None:
            self.multi_machine_job_id = multi_machine_job_id
        if project_id is not None:
            self.project_id = project_id
        if reason is not None:
            self.reason = reason
        if timestamp is not None:
            self.timestamp = timestamp
        if type is not None:
            self.type = type

    @property
    def action(self) -> 'str':
        """Gets the action of this V1MultiMachineJobEvent.  # noqa: E501


        :return: The action of this V1MultiMachineJobEvent.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action: 'str'):
        """Sets the action of this V1MultiMachineJobEvent.


        :param action: The action of this V1MultiMachineJobEvent.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def id(self) -> 'str':
        """Gets the id of this V1MultiMachineJobEvent.  # noqa: E501


        :return: The id of this V1MultiMachineJobEvent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1MultiMachineJobEvent.


        :param id: The id of this V1MultiMachineJobEvent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def job_id(self) -> 'str':
        """Gets the job_id of this V1MultiMachineJobEvent.  # noqa: E501


        :return: The job_id of this V1MultiMachineJobEvent.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id: 'str'):
        """Sets the job_id of this V1MultiMachineJobEvent.


        :param job_id: The job_id of this V1MultiMachineJobEvent.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def message(self) -> 'str':
        """Gets the message of this V1MultiMachineJobEvent.  # noqa: E501


        :return: The message of this V1MultiMachineJobEvent.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: 'str'):
        """Sets the message of this V1MultiMachineJobEvent.


        :param message: The message of this V1MultiMachineJobEvent.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def multi_machine_job_id(self) -> 'str':
        """Gets the multi_machine_job_id of this V1MultiMachineJobEvent.  # noqa: E501


        :return: The multi_machine_job_id of this V1MultiMachineJobEvent.  # noqa: E501
        :rtype: str
        """
        return self._multi_machine_job_id

    @multi_machine_job_id.setter
    def multi_machine_job_id(self, multi_machine_job_id: 'str'):
        """Sets the multi_machine_job_id of this V1MultiMachineJobEvent.


        :param multi_machine_job_id: The multi_machine_job_id of this V1MultiMachineJobEvent.  # noqa: E501
        :type: str
        """

        self._multi_machine_job_id = multi_machine_job_id

    @property
    def project_id(self) -> 'str':
        """Gets the project_id of this V1MultiMachineJobEvent.  # noqa: E501


        :return: The project_id of this V1MultiMachineJobEvent.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: 'str'):
        """Sets the project_id of this V1MultiMachineJobEvent.


        :param project_id: The project_id of this V1MultiMachineJobEvent.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def reason(self) -> 'str':
        """Gets the reason of this V1MultiMachineJobEvent.  # noqa: E501


        :return: The reason of this V1MultiMachineJobEvent.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason: 'str'):
        """Sets the reason of this V1MultiMachineJobEvent.


        :param reason: The reason of this V1MultiMachineJobEvent.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def timestamp(self) -> 'datetime':
        """Gets the timestamp of this V1MultiMachineJobEvent.  # noqa: E501


        :return: The timestamp of this V1MultiMachineJobEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: 'datetime'):
        """Sets the timestamp of this V1MultiMachineJobEvent.


        :param timestamp: The timestamp of this V1MultiMachineJobEvent.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def type(self) -> 'V1MultiMachineJobEventType':
        """Gets the type of this V1MultiMachineJobEvent.  # noqa: E501


        :return: The type of this V1MultiMachineJobEvent.  # noqa: E501
        :rtype: V1MultiMachineJobEventType
        """
        return self._type

    @type.setter
    def type(self, type: 'V1MultiMachineJobEventType'):
        """Sets the type of this V1MultiMachineJobEvent.


        :param type: The type of this V1MultiMachineJobEvent.  # noqa: E501
        :type: V1MultiMachineJobEventType
        """

        self._type = type

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1MultiMachineJobEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1MultiMachineJobEvent') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1MultiMachineJobEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1MultiMachineJobEvent') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
