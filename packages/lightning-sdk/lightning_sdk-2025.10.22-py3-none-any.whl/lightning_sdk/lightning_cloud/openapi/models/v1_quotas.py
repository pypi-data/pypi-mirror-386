# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1Quotas(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'free_storage_bytes': 'str',
        'max_frontends_per_lightning_app': 'str',
        'max_lightning_app_releases': 'str',
        'max_lightning_apps': 'str',
        'max_lightning_works': 'str',
        'max_running_default_lightning_works_per_app': 'str',
        'max_running_lightning_apps': 'str',
        'max_running_lightning_works': 'str'
    }

    attribute_map = {
        'free_storage_bytes': 'freeStorageBytes',
        'max_frontends_per_lightning_app': 'maxFrontendsPerLightningApp',
        'max_lightning_app_releases': 'maxLightningAppReleases',
        'max_lightning_apps': 'maxLightningApps',
        'max_lightning_works': 'maxLightningWorks',
        'max_running_default_lightning_works_per_app': 'maxRunningDefaultLightningWorksPerApp',
        'max_running_lightning_apps': 'maxRunningLightningApps',
        'max_running_lightning_works': 'maxRunningLightningWorks'
    }

    def __init__(self, free_storage_bytes: 'str' =None, max_frontends_per_lightning_app: 'str' =None, max_lightning_app_releases: 'str' =None, max_lightning_apps: 'str' =None, max_lightning_works: 'str' =None, max_running_default_lightning_works_per_app: 'str' =None, max_running_lightning_apps: 'str' =None, max_running_lightning_works: 'str' =None):  # noqa: E501
        """V1Quotas - a model defined in Swagger"""  # noqa: E501
        self._free_storage_bytes = None
        self._max_frontends_per_lightning_app = None
        self._max_lightning_app_releases = None
        self._max_lightning_apps = None
        self._max_lightning_works = None
        self._max_running_default_lightning_works_per_app = None
        self._max_running_lightning_apps = None
        self._max_running_lightning_works = None
        self.discriminator = None
        if free_storage_bytes is not None:
            self.free_storage_bytes = free_storage_bytes
        if max_frontends_per_lightning_app is not None:
            self.max_frontends_per_lightning_app = max_frontends_per_lightning_app
        if max_lightning_app_releases is not None:
            self.max_lightning_app_releases = max_lightning_app_releases
        if max_lightning_apps is not None:
            self.max_lightning_apps = max_lightning_apps
        if max_lightning_works is not None:
            self.max_lightning_works = max_lightning_works
        if max_running_default_lightning_works_per_app is not None:
            self.max_running_default_lightning_works_per_app = max_running_default_lightning_works_per_app
        if max_running_lightning_apps is not None:
            self.max_running_lightning_apps = max_running_lightning_apps
        if max_running_lightning_works is not None:
            self.max_running_lightning_works = max_running_lightning_works

    @property
    def free_storage_bytes(self) -> 'str':
        """Gets the free_storage_bytes of this V1Quotas.  # noqa: E501


        :return: The free_storage_bytes of this V1Quotas.  # noqa: E501
        :rtype: str
        """
        return self._free_storage_bytes

    @free_storage_bytes.setter
    def free_storage_bytes(self, free_storage_bytes: 'str'):
        """Sets the free_storage_bytes of this V1Quotas.


        :param free_storage_bytes: The free_storage_bytes of this V1Quotas.  # noqa: E501
        :type: str
        """

        self._free_storage_bytes = free_storage_bytes

    @property
    def max_frontends_per_lightning_app(self) -> 'str':
        """Gets the max_frontends_per_lightning_app of this V1Quotas.  # noqa: E501


        :return: The max_frontends_per_lightning_app of this V1Quotas.  # noqa: E501
        :rtype: str
        """
        return self._max_frontends_per_lightning_app

    @max_frontends_per_lightning_app.setter
    def max_frontends_per_lightning_app(self, max_frontends_per_lightning_app: 'str'):
        """Sets the max_frontends_per_lightning_app of this V1Quotas.


        :param max_frontends_per_lightning_app: The max_frontends_per_lightning_app of this V1Quotas.  # noqa: E501
        :type: str
        """

        self._max_frontends_per_lightning_app = max_frontends_per_lightning_app

    @property
    def max_lightning_app_releases(self) -> 'str':
        """Gets the max_lightning_app_releases of this V1Quotas.  # noqa: E501


        :return: The max_lightning_app_releases of this V1Quotas.  # noqa: E501
        :rtype: str
        """
        return self._max_lightning_app_releases

    @max_lightning_app_releases.setter
    def max_lightning_app_releases(self, max_lightning_app_releases: 'str'):
        """Sets the max_lightning_app_releases of this V1Quotas.


        :param max_lightning_app_releases: The max_lightning_app_releases of this V1Quotas.  # noqa: E501
        :type: str
        """

        self._max_lightning_app_releases = max_lightning_app_releases

    @property
    def max_lightning_apps(self) -> 'str':
        """Gets the max_lightning_apps of this V1Quotas.  # noqa: E501


        :return: The max_lightning_apps of this V1Quotas.  # noqa: E501
        :rtype: str
        """
        return self._max_lightning_apps

    @max_lightning_apps.setter
    def max_lightning_apps(self, max_lightning_apps: 'str'):
        """Sets the max_lightning_apps of this V1Quotas.


        :param max_lightning_apps: The max_lightning_apps of this V1Quotas.  # noqa: E501
        :type: str
        """

        self._max_lightning_apps = max_lightning_apps

    @property
    def max_lightning_works(self) -> 'str':
        """Gets the max_lightning_works of this V1Quotas.  # noqa: E501


        :return: The max_lightning_works of this V1Quotas.  # noqa: E501
        :rtype: str
        """
        return self._max_lightning_works

    @max_lightning_works.setter
    def max_lightning_works(self, max_lightning_works: 'str'):
        """Sets the max_lightning_works of this V1Quotas.


        :param max_lightning_works: The max_lightning_works of this V1Quotas.  # noqa: E501
        :type: str
        """

        self._max_lightning_works = max_lightning_works

    @property
    def max_running_default_lightning_works_per_app(self) -> 'str':
        """Gets the max_running_default_lightning_works_per_app of this V1Quotas.  # noqa: E501


        :return: The max_running_default_lightning_works_per_app of this V1Quotas.  # noqa: E501
        :rtype: str
        """
        return self._max_running_default_lightning_works_per_app

    @max_running_default_lightning_works_per_app.setter
    def max_running_default_lightning_works_per_app(self, max_running_default_lightning_works_per_app: 'str'):
        """Sets the max_running_default_lightning_works_per_app of this V1Quotas.


        :param max_running_default_lightning_works_per_app: The max_running_default_lightning_works_per_app of this V1Quotas.  # noqa: E501
        :type: str
        """

        self._max_running_default_lightning_works_per_app = max_running_default_lightning_works_per_app

    @property
    def max_running_lightning_apps(self) -> 'str':
        """Gets the max_running_lightning_apps of this V1Quotas.  # noqa: E501


        :return: The max_running_lightning_apps of this V1Quotas.  # noqa: E501
        :rtype: str
        """
        return self._max_running_lightning_apps

    @max_running_lightning_apps.setter
    def max_running_lightning_apps(self, max_running_lightning_apps: 'str'):
        """Sets the max_running_lightning_apps of this V1Quotas.


        :param max_running_lightning_apps: The max_running_lightning_apps of this V1Quotas.  # noqa: E501
        :type: str
        """

        self._max_running_lightning_apps = max_running_lightning_apps

    @property
    def max_running_lightning_works(self) -> 'str':
        """Gets the max_running_lightning_works of this V1Quotas.  # noqa: E501


        :return: The max_running_lightning_works of this V1Quotas.  # noqa: E501
        :rtype: str
        """
        return self._max_running_lightning_works

    @max_running_lightning_works.setter
    def max_running_lightning_works(self, max_running_lightning_works: 'str'):
        """Sets the max_running_lightning_works of this V1Quotas.


        :param max_running_lightning_works: The max_running_lightning_works of this V1Quotas.  # noqa: E501
        :type: str
        """

        self._max_running_lightning_works = max_running_lightning_works

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1Quotas, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1Quotas') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Quotas):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1Quotas') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
