# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1ContainerMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'container_id': 'str',
        'container_name': 'str',
        'cpu_usage': 'float',
        'mem_usage': 'float',
        'namespace': 'str',
        'node_name': 'str',
        'num_cpus_limit': 'int',
        'num_cpus_request': 'int',
        'num_gpus': 'int',
        'per_gpu_mem_used': 'dict(str, int)',
        'per_gpu_util': 'dict(str, float)',
        'pod_id': 'str',
        'pod_name': 'str',
        'timestamp': 'datetime'
    }

    attribute_map = {
        'container_id': 'containerId',
        'container_name': 'containerName',
        'cpu_usage': 'cpuUsage',
        'mem_usage': 'memUsage',
        'namespace': 'namespace',
        'node_name': 'nodeName',
        'num_cpus_limit': 'numCpusLimit',
        'num_cpus_request': 'numCpusRequest',
        'num_gpus': 'numGpus',
        'per_gpu_mem_used': 'perGpuMemUsed',
        'per_gpu_util': 'perGpuUtil',
        'pod_id': 'podId',
        'pod_name': 'podName',
        'timestamp': 'timestamp'
    }

    def __init__(self, container_id: 'str' =None, container_name: 'str' =None, cpu_usage: 'float' =None, mem_usage: 'float' =None, namespace: 'str' =None, node_name: 'str' =None, num_cpus_limit: 'int' =None, num_cpus_request: 'int' =None, num_gpus: 'int' =None, per_gpu_mem_used: 'dict(str, int)' =None, per_gpu_util: 'dict(str, float)' =None, pod_id: 'str' =None, pod_name: 'str' =None, timestamp: 'datetime' =None):  # noqa: E501
        """V1ContainerMetrics - a model defined in Swagger"""  # noqa: E501
        self._container_id = None
        self._container_name = None
        self._cpu_usage = None
        self._mem_usage = None
        self._namespace = None
        self._node_name = None
        self._num_cpus_limit = None
        self._num_cpus_request = None
        self._num_gpus = None
        self._per_gpu_mem_used = None
        self._per_gpu_util = None
        self._pod_id = None
        self._pod_name = None
        self._timestamp = None
        self.discriminator = None
        if container_id is not None:
            self.container_id = container_id
        if container_name is not None:
            self.container_name = container_name
        if cpu_usage is not None:
            self.cpu_usage = cpu_usage
        if mem_usage is not None:
            self.mem_usage = mem_usage
        if namespace is not None:
            self.namespace = namespace
        if node_name is not None:
            self.node_name = node_name
        if num_cpus_limit is not None:
            self.num_cpus_limit = num_cpus_limit
        if num_cpus_request is not None:
            self.num_cpus_request = num_cpus_request
        if num_gpus is not None:
            self.num_gpus = num_gpus
        if per_gpu_mem_used is not None:
            self.per_gpu_mem_used = per_gpu_mem_used
        if per_gpu_util is not None:
            self.per_gpu_util = per_gpu_util
        if pod_id is not None:
            self.pod_id = pod_id
        if pod_name is not None:
            self.pod_name = pod_name
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def container_id(self) -> 'str':
        """Gets the container_id of this V1ContainerMetrics.  # noqa: E501


        :return: The container_id of this V1ContainerMetrics.  # noqa: E501
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id: 'str'):
        """Sets the container_id of this V1ContainerMetrics.


        :param container_id: The container_id of this V1ContainerMetrics.  # noqa: E501
        :type: str
        """

        self._container_id = container_id

    @property
    def container_name(self) -> 'str':
        """Gets the container_name of this V1ContainerMetrics.  # noqa: E501


        :return: The container_name of this V1ContainerMetrics.  # noqa: E501
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name: 'str'):
        """Sets the container_name of this V1ContainerMetrics.


        :param container_name: The container_name of this V1ContainerMetrics.  # noqa: E501
        :type: str
        """

        self._container_name = container_name

    @property
    def cpu_usage(self) -> 'float':
        """Gets the cpu_usage of this V1ContainerMetrics.  # noqa: E501


        :return: The cpu_usage of this V1ContainerMetrics.  # noqa: E501
        :rtype: float
        """
        return self._cpu_usage

    @cpu_usage.setter
    def cpu_usage(self, cpu_usage: 'float'):
        """Sets the cpu_usage of this V1ContainerMetrics.


        :param cpu_usage: The cpu_usage of this V1ContainerMetrics.  # noqa: E501
        :type: float
        """

        self._cpu_usage = cpu_usage

    @property
    def mem_usage(self) -> 'float':
        """Gets the mem_usage of this V1ContainerMetrics.  # noqa: E501


        :return: The mem_usage of this V1ContainerMetrics.  # noqa: E501
        :rtype: float
        """
        return self._mem_usage

    @mem_usage.setter
    def mem_usage(self, mem_usage: 'float'):
        """Sets the mem_usage of this V1ContainerMetrics.


        :param mem_usage: The mem_usage of this V1ContainerMetrics.  # noqa: E501
        :type: float
        """

        self._mem_usage = mem_usage

    @property
    def namespace(self) -> 'str':
        """Gets the namespace of this V1ContainerMetrics.  # noqa: E501


        :return: The namespace of this V1ContainerMetrics.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace: 'str'):
        """Sets the namespace of this V1ContainerMetrics.


        :param namespace: The namespace of this V1ContainerMetrics.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def node_name(self) -> 'str':
        """Gets the node_name of this V1ContainerMetrics.  # noqa: E501


        :return: The node_name of this V1ContainerMetrics.  # noqa: E501
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name: 'str'):
        """Sets the node_name of this V1ContainerMetrics.


        :param node_name: The node_name of this V1ContainerMetrics.  # noqa: E501
        :type: str
        """

        self._node_name = node_name

    @property
    def num_cpus_limit(self) -> 'int':
        """Gets the num_cpus_limit of this V1ContainerMetrics.  # noqa: E501


        :return: The num_cpus_limit of this V1ContainerMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_cpus_limit

    @num_cpus_limit.setter
    def num_cpus_limit(self, num_cpus_limit: 'int'):
        """Sets the num_cpus_limit of this V1ContainerMetrics.


        :param num_cpus_limit: The num_cpus_limit of this V1ContainerMetrics.  # noqa: E501
        :type: int
        """

        self._num_cpus_limit = num_cpus_limit

    @property
    def num_cpus_request(self) -> 'int':
        """Gets the num_cpus_request of this V1ContainerMetrics.  # noqa: E501


        :return: The num_cpus_request of this V1ContainerMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_cpus_request

    @num_cpus_request.setter
    def num_cpus_request(self, num_cpus_request: 'int'):
        """Sets the num_cpus_request of this V1ContainerMetrics.


        :param num_cpus_request: The num_cpus_request of this V1ContainerMetrics.  # noqa: E501
        :type: int
        """

        self._num_cpus_request = num_cpus_request

    @property
    def num_gpus(self) -> 'int':
        """Gets the num_gpus of this V1ContainerMetrics.  # noqa: E501


        :return: The num_gpus of this V1ContainerMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_gpus

    @num_gpus.setter
    def num_gpus(self, num_gpus: 'int'):
        """Sets the num_gpus of this V1ContainerMetrics.


        :param num_gpus: The num_gpus of this V1ContainerMetrics.  # noqa: E501
        :type: int
        """

        self._num_gpus = num_gpus

    @property
    def per_gpu_mem_used(self) -> 'dict(str, int)':
        """Gets the per_gpu_mem_used of this V1ContainerMetrics.  # noqa: E501


        :return: The per_gpu_mem_used of this V1ContainerMetrics.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._per_gpu_mem_used

    @per_gpu_mem_used.setter
    def per_gpu_mem_used(self, per_gpu_mem_used: 'dict(str, int)'):
        """Sets the per_gpu_mem_used of this V1ContainerMetrics.


        :param per_gpu_mem_used: The per_gpu_mem_used of this V1ContainerMetrics.  # noqa: E501
        :type: dict(str, int)
        """

        self._per_gpu_mem_used = per_gpu_mem_used

    @property
    def per_gpu_util(self) -> 'dict(str, float)':
        """Gets the per_gpu_util of this V1ContainerMetrics.  # noqa: E501


        :return: The per_gpu_util of this V1ContainerMetrics.  # noqa: E501
        :rtype: dict(str, float)
        """
        return self._per_gpu_util

    @per_gpu_util.setter
    def per_gpu_util(self, per_gpu_util: 'dict(str, float)'):
        """Sets the per_gpu_util of this V1ContainerMetrics.


        :param per_gpu_util: The per_gpu_util of this V1ContainerMetrics.  # noqa: E501
        :type: dict(str, float)
        """

        self._per_gpu_util = per_gpu_util

    @property
    def pod_id(self) -> 'str':
        """Gets the pod_id of this V1ContainerMetrics.  # noqa: E501


        :return: The pod_id of this V1ContainerMetrics.  # noqa: E501
        :rtype: str
        """
        return self._pod_id

    @pod_id.setter
    def pod_id(self, pod_id: 'str'):
        """Sets the pod_id of this V1ContainerMetrics.


        :param pod_id: The pod_id of this V1ContainerMetrics.  # noqa: E501
        :type: str
        """

        self._pod_id = pod_id

    @property
    def pod_name(self) -> 'str':
        """Gets the pod_name of this V1ContainerMetrics.  # noqa: E501


        :return: The pod_name of this V1ContainerMetrics.  # noqa: E501
        :rtype: str
        """
        return self._pod_name

    @pod_name.setter
    def pod_name(self, pod_name: 'str'):
        """Sets the pod_name of this V1ContainerMetrics.


        :param pod_name: The pod_name of this V1ContainerMetrics.  # noqa: E501
        :type: str
        """

        self._pod_name = pod_name

    @property
    def timestamp(self) -> 'datetime':
        """Gets the timestamp of this V1ContainerMetrics.  # noqa: E501


        :return: The timestamp of this V1ContainerMetrics.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: 'datetime'):
        """Sets the timestamp of this V1ContainerMetrics.


        :param timestamp: The timestamp of this V1ContainerMetrics.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1ContainerMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1ContainerMetrics') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ContainerMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1ContainerMetrics') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
