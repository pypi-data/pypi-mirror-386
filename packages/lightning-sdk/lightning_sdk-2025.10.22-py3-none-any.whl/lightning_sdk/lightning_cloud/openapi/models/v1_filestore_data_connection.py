# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1FilestoreDataConnection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_increase_enabled': 'bool',
        'capacity_gb': 'str',
        'mount_ip': 'str',
        'region': 'str',
        'source': 'str',
        'tier': 'V1DataConnectionTier'
    }

    attribute_map = {
        'auto_increase_enabled': 'autoIncreaseEnabled',
        'capacity_gb': 'capacityGb',
        'mount_ip': 'mountIp',
        'region': 'region',
        'source': 'source',
        'tier': 'tier'
    }

    def __init__(self, auto_increase_enabled: 'bool' =None, capacity_gb: 'str' =None, mount_ip: 'str' =None, region: 'str' =None, source: 'str' =None, tier: 'V1DataConnectionTier' =None):  # noqa: E501
        """V1FilestoreDataConnection - a model defined in Swagger"""  # noqa: E501
        self._auto_increase_enabled = None
        self._capacity_gb = None
        self._mount_ip = None
        self._region = None
        self._source = None
        self._tier = None
        self.discriminator = None
        if auto_increase_enabled is not None:
            self.auto_increase_enabled = auto_increase_enabled
        if capacity_gb is not None:
            self.capacity_gb = capacity_gb
        if mount_ip is not None:
            self.mount_ip = mount_ip
        if region is not None:
            self.region = region
        if source is not None:
            self.source = source
        if tier is not None:
            self.tier = tier

    @property
    def auto_increase_enabled(self) -> 'bool':
        """Gets the auto_increase_enabled of this V1FilestoreDataConnection.  # noqa: E501


        :return: The auto_increase_enabled of this V1FilestoreDataConnection.  # noqa: E501
        :rtype: bool
        """
        return self._auto_increase_enabled

    @auto_increase_enabled.setter
    def auto_increase_enabled(self, auto_increase_enabled: 'bool'):
        """Sets the auto_increase_enabled of this V1FilestoreDataConnection.


        :param auto_increase_enabled: The auto_increase_enabled of this V1FilestoreDataConnection.  # noqa: E501
        :type: bool
        """

        self._auto_increase_enabled = auto_increase_enabled

    @property
    def capacity_gb(self) -> 'str':
        """Gets the capacity_gb of this V1FilestoreDataConnection.  # noqa: E501


        :return: The capacity_gb of this V1FilestoreDataConnection.  # noqa: E501
        :rtype: str
        """
        return self._capacity_gb

    @capacity_gb.setter
    def capacity_gb(self, capacity_gb: 'str'):
        """Sets the capacity_gb of this V1FilestoreDataConnection.


        :param capacity_gb: The capacity_gb of this V1FilestoreDataConnection.  # noqa: E501
        :type: str
        """

        self._capacity_gb = capacity_gb

    @property
    def mount_ip(self) -> 'str':
        """Gets the mount_ip of this V1FilestoreDataConnection.  # noqa: E501


        :return: The mount_ip of this V1FilestoreDataConnection.  # noqa: E501
        :rtype: str
        """
        return self._mount_ip

    @mount_ip.setter
    def mount_ip(self, mount_ip: 'str'):
        """Sets the mount_ip of this V1FilestoreDataConnection.


        :param mount_ip: The mount_ip of this V1FilestoreDataConnection.  # noqa: E501
        :type: str
        """

        self._mount_ip = mount_ip

    @property
    def region(self) -> 'str':
        """Gets the region of this V1FilestoreDataConnection.  # noqa: E501


        :return: The region of this V1FilestoreDataConnection.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region: 'str'):
        """Sets the region of this V1FilestoreDataConnection.


        :param region: The region of this V1FilestoreDataConnection.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def source(self) -> 'str':
        """Gets the source of this V1FilestoreDataConnection.  # noqa: E501


        :return: The source of this V1FilestoreDataConnection.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source: 'str'):
        """Sets the source of this V1FilestoreDataConnection.


        :param source: The source of this V1FilestoreDataConnection.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def tier(self) -> 'V1DataConnectionTier':
        """Gets the tier of this V1FilestoreDataConnection.  # noqa: E501


        :return: The tier of this V1FilestoreDataConnection.  # noqa: E501
        :rtype: V1DataConnectionTier
        """
        return self._tier

    @tier.setter
    def tier(self, tier: 'V1DataConnectionTier'):
        """Sets the tier of this V1FilestoreDataConnection.


        :param tier: The tier of this V1FilestoreDataConnection.  # noqa: E501
        :type: V1DataConnectionTier
        """

        self._tier = tier

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1FilestoreDataConnection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1FilestoreDataConnection') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1FilestoreDataConnection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1FilestoreDataConnection') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
