# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1CloudSpaceColdStartMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cloudspace_id': 'str',
        'cloudspace_instance_id': 'str',
        'cluster_id': 'str',
        'container_started_at': 'datetime',
        'created_at': 'datetime',
        'deleted_at': 'datetime',
        'display_name': 'str',
        'docker_availability_ended_at': 'datetime',
        'docker_availability_started_at': 'datetime',
        'image_pulling_ended_at': 'datetime',
        'image_pulling_started_at': 'datetime',
        'instance_type': 'str',
        'is_studio_deleted': 'bool',
        'overprovisioned': 'bool',
        'progress_bar_ended_at': 'datetime',
        'project_id': 'str',
        'resources': 'V1Resources',
        'spot': 'bool',
        'started_at': 'datetime',
        'stop_at': 'datetime',
        'stopped_at': 'datetime',
        'user_id': 'str'
    }

    attribute_map = {
        'cloudspace_id': 'cloudspaceId',
        'cloudspace_instance_id': 'cloudspaceInstanceId',
        'cluster_id': 'clusterId',
        'container_started_at': 'containerStartedAt',
        'created_at': 'createdAt',
        'deleted_at': 'deletedAt',
        'display_name': 'displayName',
        'docker_availability_ended_at': 'dockerAvailabilityEndedAt',
        'docker_availability_started_at': 'dockerAvailabilityStartedAt',
        'image_pulling_ended_at': 'imagePullingEndedAt',
        'image_pulling_started_at': 'imagePullingStartedAt',
        'instance_type': 'instanceType',
        'is_studio_deleted': 'isStudioDeleted',
        'overprovisioned': 'overprovisioned',
        'progress_bar_ended_at': 'progressBarEndedAt',
        'project_id': 'projectId',
        'resources': 'resources',
        'spot': 'spot',
        'started_at': 'startedAt',
        'stop_at': 'stopAt',
        'stopped_at': 'stoppedAt',
        'user_id': 'userId'
    }

    def __init__(self, cloudspace_id: 'str' =None, cloudspace_instance_id: 'str' =None, cluster_id: 'str' =None, container_started_at: 'datetime' =None, created_at: 'datetime' =None, deleted_at: 'datetime' =None, display_name: 'str' =None, docker_availability_ended_at: 'datetime' =None, docker_availability_started_at: 'datetime' =None, image_pulling_ended_at: 'datetime' =None, image_pulling_started_at: 'datetime' =None, instance_type: 'str' =None, is_studio_deleted: 'bool' =None, overprovisioned: 'bool' =None, progress_bar_ended_at: 'datetime' =None, project_id: 'str' =None, resources: 'V1Resources' =None, spot: 'bool' =None, started_at: 'datetime' =None, stop_at: 'datetime' =None, stopped_at: 'datetime' =None, user_id: 'str' =None):  # noqa: E501
        """V1CloudSpaceColdStartMetrics - a model defined in Swagger"""  # noqa: E501
        self._cloudspace_id = None
        self._cloudspace_instance_id = None
        self._cluster_id = None
        self._container_started_at = None
        self._created_at = None
        self._deleted_at = None
        self._display_name = None
        self._docker_availability_ended_at = None
        self._docker_availability_started_at = None
        self._image_pulling_ended_at = None
        self._image_pulling_started_at = None
        self._instance_type = None
        self._is_studio_deleted = None
        self._overprovisioned = None
        self._progress_bar_ended_at = None
        self._project_id = None
        self._resources = None
        self._spot = None
        self._started_at = None
        self._stop_at = None
        self._stopped_at = None
        self._user_id = None
        self.discriminator = None
        if cloudspace_id is not None:
            self.cloudspace_id = cloudspace_id
        if cloudspace_instance_id is not None:
            self.cloudspace_instance_id = cloudspace_instance_id
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if container_started_at is not None:
            self.container_started_at = container_started_at
        if created_at is not None:
            self.created_at = created_at
        if deleted_at is not None:
            self.deleted_at = deleted_at
        if display_name is not None:
            self.display_name = display_name
        if docker_availability_ended_at is not None:
            self.docker_availability_ended_at = docker_availability_ended_at
        if docker_availability_started_at is not None:
            self.docker_availability_started_at = docker_availability_started_at
        if image_pulling_ended_at is not None:
            self.image_pulling_ended_at = image_pulling_ended_at
        if image_pulling_started_at is not None:
            self.image_pulling_started_at = image_pulling_started_at
        if instance_type is not None:
            self.instance_type = instance_type
        if is_studio_deleted is not None:
            self.is_studio_deleted = is_studio_deleted
        if overprovisioned is not None:
            self.overprovisioned = overprovisioned
        if progress_bar_ended_at is not None:
            self.progress_bar_ended_at = progress_bar_ended_at
        if project_id is not None:
            self.project_id = project_id
        if resources is not None:
            self.resources = resources
        if spot is not None:
            self.spot = spot
        if started_at is not None:
            self.started_at = started_at
        if stop_at is not None:
            self.stop_at = stop_at
        if stopped_at is not None:
            self.stopped_at = stopped_at
        if user_id is not None:
            self.user_id = user_id

    @property
    def cloudspace_id(self) -> 'str':
        """Gets the cloudspace_id of this V1CloudSpaceColdStartMetrics.  # noqa: E501


        :return: The cloudspace_id of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :rtype: str
        """
        return self._cloudspace_id

    @cloudspace_id.setter
    def cloudspace_id(self, cloudspace_id: 'str'):
        """Sets the cloudspace_id of this V1CloudSpaceColdStartMetrics.


        :param cloudspace_id: The cloudspace_id of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :type: str
        """

        self._cloudspace_id = cloudspace_id

    @property
    def cloudspace_instance_id(self) -> 'str':
        """Gets the cloudspace_instance_id of this V1CloudSpaceColdStartMetrics.  # noqa: E501


        :return: The cloudspace_instance_id of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :rtype: str
        """
        return self._cloudspace_instance_id

    @cloudspace_instance_id.setter
    def cloudspace_instance_id(self, cloudspace_instance_id: 'str'):
        """Sets the cloudspace_instance_id of this V1CloudSpaceColdStartMetrics.


        :param cloudspace_instance_id: The cloudspace_instance_id of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :type: str
        """

        self._cloudspace_instance_id = cloudspace_instance_id

    @property
    def cluster_id(self) -> 'str':
        """Gets the cluster_id of this V1CloudSpaceColdStartMetrics.  # noqa: E501


        :return: The cluster_id of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id: 'str'):
        """Sets the cluster_id of this V1CloudSpaceColdStartMetrics.


        :param cluster_id: The cluster_id of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def container_started_at(self) -> 'datetime':
        """Gets the container_started_at of this V1CloudSpaceColdStartMetrics.  # noqa: E501


        :return: The container_started_at of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :rtype: datetime
        """
        return self._container_started_at

    @container_started_at.setter
    def container_started_at(self, container_started_at: 'datetime'):
        """Sets the container_started_at of this V1CloudSpaceColdStartMetrics.


        :param container_started_at: The container_started_at of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :type: datetime
        """

        self._container_started_at = container_started_at

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this V1CloudSpaceColdStartMetrics.  # noqa: E501


        :return: The created_at of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this V1CloudSpaceColdStartMetrics.


        :param created_at: The created_at of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def deleted_at(self) -> 'datetime':
        """Gets the deleted_at of this V1CloudSpaceColdStartMetrics.  # noqa: E501


        :return: The deleted_at of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at: 'datetime'):
        """Sets the deleted_at of this V1CloudSpaceColdStartMetrics.


        :param deleted_at: The deleted_at of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :type: datetime
        """

        self._deleted_at = deleted_at

    @property
    def display_name(self) -> 'str':
        """Gets the display_name of this V1CloudSpaceColdStartMetrics.  # noqa: E501


        :return: The display_name of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: 'str'):
        """Sets the display_name of this V1CloudSpaceColdStartMetrics.


        :param display_name: The display_name of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def docker_availability_ended_at(self) -> 'datetime':
        """Gets the docker_availability_ended_at of this V1CloudSpaceColdStartMetrics.  # noqa: E501


        :return: The docker_availability_ended_at of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :rtype: datetime
        """
        return self._docker_availability_ended_at

    @docker_availability_ended_at.setter
    def docker_availability_ended_at(self, docker_availability_ended_at: 'datetime'):
        """Sets the docker_availability_ended_at of this V1CloudSpaceColdStartMetrics.


        :param docker_availability_ended_at: The docker_availability_ended_at of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :type: datetime
        """

        self._docker_availability_ended_at = docker_availability_ended_at

    @property
    def docker_availability_started_at(self) -> 'datetime':
        """Gets the docker_availability_started_at of this V1CloudSpaceColdStartMetrics.  # noqa: E501


        :return: The docker_availability_started_at of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :rtype: datetime
        """
        return self._docker_availability_started_at

    @docker_availability_started_at.setter
    def docker_availability_started_at(self, docker_availability_started_at: 'datetime'):
        """Sets the docker_availability_started_at of this V1CloudSpaceColdStartMetrics.


        :param docker_availability_started_at: The docker_availability_started_at of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :type: datetime
        """

        self._docker_availability_started_at = docker_availability_started_at

    @property
    def image_pulling_ended_at(self) -> 'datetime':
        """Gets the image_pulling_ended_at of this V1CloudSpaceColdStartMetrics.  # noqa: E501


        :return: The image_pulling_ended_at of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :rtype: datetime
        """
        return self._image_pulling_ended_at

    @image_pulling_ended_at.setter
    def image_pulling_ended_at(self, image_pulling_ended_at: 'datetime'):
        """Sets the image_pulling_ended_at of this V1CloudSpaceColdStartMetrics.


        :param image_pulling_ended_at: The image_pulling_ended_at of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :type: datetime
        """

        self._image_pulling_ended_at = image_pulling_ended_at

    @property
    def image_pulling_started_at(self) -> 'datetime':
        """Gets the image_pulling_started_at of this V1CloudSpaceColdStartMetrics.  # noqa: E501


        :return: The image_pulling_started_at of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :rtype: datetime
        """
        return self._image_pulling_started_at

    @image_pulling_started_at.setter
    def image_pulling_started_at(self, image_pulling_started_at: 'datetime'):
        """Sets the image_pulling_started_at of this V1CloudSpaceColdStartMetrics.


        :param image_pulling_started_at: The image_pulling_started_at of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :type: datetime
        """

        self._image_pulling_started_at = image_pulling_started_at

    @property
    def instance_type(self) -> 'str':
        """Gets the instance_type of this V1CloudSpaceColdStartMetrics.  # noqa: E501


        :return: The instance_type of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type: 'str'):
        """Sets the instance_type of this V1CloudSpaceColdStartMetrics.


        :param instance_type: The instance_type of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :type: str
        """

        self._instance_type = instance_type

    @property
    def is_studio_deleted(self) -> 'bool':
        """Gets the is_studio_deleted of this V1CloudSpaceColdStartMetrics.  # noqa: E501


        :return: The is_studio_deleted of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :rtype: bool
        """
        return self._is_studio_deleted

    @is_studio_deleted.setter
    def is_studio_deleted(self, is_studio_deleted: 'bool'):
        """Sets the is_studio_deleted of this V1CloudSpaceColdStartMetrics.


        :param is_studio_deleted: The is_studio_deleted of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :type: bool
        """

        self._is_studio_deleted = is_studio_deleted

    @property
    def overprovisioned(self) -> 'bool':
        """Gets the overprovisioned of this V1CloudSpaceColdStartMetrics.  # noqa: E501


        :return: The overprovisioned of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :rtype: bool
        """
        return self._overprovisioned

    @overprovisioned.setter
    def overprovisioned(self, overprovisioned: 'bool'):
        """Sets the overprovisioned of this V1CloudSpaceColdStartMetrics.


        :param overprovisioned: The overprovisioned of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :type: bool
        """

        self._overprovisioned = overprovisioned

    @property
    def progress_bar_ended_at(self) -> 'datetime':
        """Gets the progress_bar_ended_at of this V1CloudSpaceColdStartMetrics.  # noqa: E501


        :return: The progress_bar_ended_at of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :rtype: datetime
        """
        return self._progress_bar_ended_at

    @progress_bar_ended_at.setter
    def progress_bar_ended_at(self, progress_bar_ended_at: 'datetime'):
        """Sets the progress_bar_ended_at of this V1CloudSpaceColdStartMetrics.


        :param progress_bar_ended_at: The progress_bar_ended_at of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :type: datetime
        """

        self._progress_bar_ended_at = progress_bar_ended_at

    @property
    def project_id(self) -> 'str':
        """Gets the project_id of this V1CloudSpaceColdStartMetrics.  # noqa: E501


        :return: The project_id of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: 'str'):
        """Sets the project_id of this V1CloudSpaceColdStartMetrics.


        :param project_id: The project_id of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def resources(self) -> 'V1Resources':
        """Gets the resources of this V1CloudSpaceColdStartMetrics.  # noqa: E501


        :return: The resources of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :rtype: V1Resources
        """
        return self._resources

    @resources.setter
    def resources(self, resources: 'V1Resources'):
        """Sets the resources of this V1CloudSpaceColdStartMetrics.


        :param resources: The resources of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :type: V1Resources
        """

        self._resources = resources

    @property
    def spot(self) -> 'bool':
        """Gets the spot of this V1CloudSpaceColdStartMetrics.  # noqa: E501


        :return: The spot of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :rtype: bool
        """
        return self._spot

    @spot.setter
    def spot(self, spot: 'bool'):
        """Sets the spot of this V1CloudSpaceColdStartMetrics.


        :param spot: The spot of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :type: bool
        """

        self._spot = spot

    @property
    def started_at(self) -> 'datetime':
        """Gets the started_at of this V1CloudSpaceColdStartMetrics.  # noqa: E501


        :return: The started_at of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at: 'datetime'):
        """Sets the started_at of this V1CloudSpaceColdStartMetrics.


        :param started_at: The started_at of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def stop_at(self) -> 'datetime':
        """Gets the stop_at of this V1CloudSpaceColdStartMetrics.  # noqa: E501


        :return: The stop_at of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :rtype: datetime
        """
        return self._stop_at

    @stop_at.setter
    def stop_at(self, stop_at: 'datetime'):
        """Sets the stop_at of this V1CloudSpaceColdStartMetrics.


        :param stop_at: The stop_at of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :type: datetime
        """

        self._stop_at = stop_at

    @property
    def stopped_at(self) -> 'datetime':
        """Gets the stopped_at of this V1CloudSpaceColdStartMetrics.  # noqa: E501


        :return: The stopped_at of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :rtype: datetime
        """
        return self._stopped_at

    @stopped_at.setter
    def stopped_at(self, stopped_at: 'datetime'):
        """Sets the stopped_at of this V1CloudSpaceColdStartMetrics.


        :param stopped_at: The stopped_at of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :type: datetime
        """

        self._stopped_at = stopped_at

    @property
    def user_id(self) -> 'str':
        """Gets the user_id of this V1CloudSpaceColdStartMetrics.  # noqa: E501


        :return: The user_id of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: 'str'):
        """Sets the user_id of this V1CloudSpaceColdStartMetrics.


        :param user_id: The user_id of this V1CloudSpaceColdStartMetrics.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1CloudSpaceColdStartMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1CloudSpaceColdStartMetrics') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1CloudSpaceColdStartMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1CloudSpaceColdStartMetrics') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
