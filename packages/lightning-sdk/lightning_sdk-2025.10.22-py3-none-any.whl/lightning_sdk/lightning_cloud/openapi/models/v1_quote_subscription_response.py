# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1QuoteSubscriptionResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'annual_amount': 'int',
        'annual_tax': 'int',
        'eligible': 'bool',
        'features': 'list[V1BillingFeature]',
        'monthly_amount': 'int',
        'monthly_tax': 'int',
        'prorated_amount': 'int',
        'prorated_tax': 'int',
        'trial_days': 'int'
    }

    attribute_map = {
        'annual_amount': 'annualAmount',
        'annual_tax': 'annualTax',
        'eligible': 'eligible',
        'features': 'features',
        'monthly_amount': 'monthlyAmount',
        'monthly_tax': 'monthlyTax',
        'prorated_amount': 'proratedAmount',
        'prorated_tax': 'proratedTax',
        'trial_days': 'trialDays'
    }

    def __init__(self, annual_amount: 'int' =None, annual_tax: 'int' =None, eligible: 'bool' =None, features: 'list[V1BillingFeature]' =None, monthly_amount: 'int' =None, monthly_tax: 'int' =None, prorated_amount: 'int' =None, prorated_tax: 'int' =None, trial_days: 'int' =None):  # noqa: E501
        """V1QuoteSubscriptionResponse - a model defined in Swagger"""  # noqa: E501
        self._annual_amount = None
        self._annual_tax = None
        self._eligible = None
        self._features = None
        self._monthly_amount = None
        self._monthly_tax = None
        self._prorated_amount = None
        self._prorated_tax = None
        self._trial_days = None
        self.discriminator = None
        if annual_amount is not None:
            self.annual_amount = annual_amount
        if annual_tax is not None:
            self.annual_tax = annual_tax
        if eligible is not None:
            self.eligible = eligible
        if features is not None:
            self.features = features
        if monthly_amount is not None:
            self.monthly_amount = monthly_amount
        if monthly_tax is not None:
            self.monthly_tax = monthly_tax
        if prorated_amount is not None:
            self.prorated_amount = prorated_amount
        if prorated_tax is not None:
            self.prorated_tax = prorated_tax
        if trial_days is not None:
            self.trial_days = trial_days

    @property
    def annual_amount(self) -> 'int':
        """Gets the annual_amount of this V1QuoteSubscriptionResponse.  # noqa: E501


        :return: The annual_amount of this V1QuoteSubscriptionResponse.  # noqa: E501
        :rtype: int
        """
        return self._annual_amount

    @annual_amount.setter
    def annual_amount(self, annual_amount: 'int'):
        """Sets the annual_amount of this V1QuoteSubscriptionResponse.


        :param annual_amount: The annual_amount of this V1QuoteSubscriptionResponse.  # noqa: E501
        :type: int
        """

        self._annual_amount = annual_amount

    @property
    def annual_tax(self) -> 'int':
        """Gets the annual_tax of this V1QuoteSubscriptionResponse.  # noqa: E501


        :return: The annual_tax of this V1QuoteSubscriptionResponse.  # noqa: E501
        :rtype: int
        """
        return self._annual_tax

    @annual_tax.setter
    def annual_tax(self, annual_tax: 'int'):
        """Sets the annual_tax of this V1QuoteSubscriptionResponse.


        :param annual_tax: The annual_tax of this V1QuoteSubscriptionResponse.  # noqa: E501
        :type: int
        """

        self._annual_tax = annual_tax

    @property
    def eligible(self) -> 'bool':
        """Gets the eligible of this V1QuoteSubscriptionResponse.  # noqa: E501


        :return: The eligible of this V1QuoteSubscriptionResponse.  # noqa: E501
        :rtype: bool
        """
        return self._eligible

    @eligible.setter
    def eligible(self, eligible: 'bool'):
        """Sets the eligible of this V1QuoteSubscriptionResponse.


        :param eligible: The eligible of this V1QuoteSubscriptionResponse.  # noqa: E501
        :type: bool
        """

        self._eligible = eligible

    @property
    def features(self) -> 'list[V1BillingFeature]':
        """Gets the features of this V1QuoteSubscriptionResponse.  # noqa: E501


        :return: The features of this V1QuoteSubscriptionResponse.  # noqa: E501
        :rtype: list[V1BillingFeature]
        """
        return self._features

    @features.setter
    def features(self, features: 'list[V1BillingFeature]'):
        """Sets the features of this V1QuoteSubscriptionResponse.


        :param features: The features of this V1QuoteSubscriptionResponse.  # noqa: E501
        :type: list[V1BillingFeature]
        """

        self._features = features

    @property
    def monthly_amount(self) -> 'int':
        """Gets the monthly_amount of this V1QuoteSubscriptionResponse.  # noqa: E501


        :return: The monthly_amount of this V1QuoteSubscriptionResponse.  # noqa: E501
        :rtype: int
        """
        return self._monthly_amount

    @monthly_amount.setter
    def monthly_amount(self, monthly_amount: 'int'):
        """Sets the monthly_amount of this V1QuoteSubscriptionResponse.


        :param monthly_amount: The monthly_amount of this V1QuoteSubscriptionResponse.  # noqa: E501
        :type: int
        """

        self._monthly_amount = monthly_amount

    @property
    def monthly_tax(self) -> 'int':
        """Gets the monthly_tax of this V1QuoteSubscriptionResponse.  # noqa: E501


        :return: The monthly_tax of this V1QuoteSubscriptionResponse.  # noqa: E501
        :rtype: int
        """
        return self._monthly_tax

    @monthly_tax.setter
    def monthly_tax(self, monthly_tax: 'int'):
        """Sets the monthly_tax of this V1QuoteSubscriptionResponse.


        :param monthly_tax: The monthly_tax of this V1QuoteSubscriptionResponse.  # noqa: E501
        :type: int
        """

        self._monthly_tax = monthly_tax

    @property
    def prorated_amount(self) -> 'int':
        """Gets the prorated_amount of this V1QuoteSubscriptionResponse.  # noqa: E501


        :return: The prorated_amount of this V1QuoteSubscriptionResponse.  # noqa: E501
        :rtype: int
        """
        return self._prorated_amount

    @prorated_amount.setter
    def prorated_amount(self, prorated_amount: 'int'):
        """Sets the prorated_amount of this V1QuoteSubscriptionResponse.


        :param prorated_amount: The prorated_amount of this V1QuoteSubscriptionResponse.  # noqa: E501
        :type: int
        """

        self._prorated_amount = prorated_amount

    @property
    def prorated_tax(self) -> 'int':
        """Gets the prorated_tax of this V1QuoteSubscriptionResponse.  # noqa: E501


        :return: The prorated_tax of this V1QuoteSubscriptionResponse.  # noqa: E501
        :rtype: int
        """
        return self._prorated_tax

    @prorated_tax.setter
    def prorated_tax(self, prorated_tax: 'int'):
        """Sets the prorated_tax of this V1QuoteSubscriptionResponse.


        :param prorated_tax: The prorated_tax of this V1QuoteSubscriptionResponse.  # noqa: E501
        :type: int
        """

        self._prorated_tax = prorated_tax

    @property
    def trial_days(self) -> 'int':
        """Gets the trial_days of this V1QuoteSubscriptionResponse.  # noqa: E501


        :return: The trial_days of this V1QuoteSubscriptionResponse.  # noqa: E501
        :rtype: int
        """
        return self._trial_days

    @trial_days.setter
    def trial_days(self, trial_days: 'int'):
        """Sets the trial_days of this V1QuoteSubscriptionResponse.


        :param trial_days: The trial_days of this V1QuoteSubscriptionResponse.  # noqa: E501
        :type: int
        """

        self._trial_days = trial_days

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1QuoteSubscriptionResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1QuoteSubscriptionResponse') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1QuoteSubscriptionResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1QuoteSubscriptionResponse') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
