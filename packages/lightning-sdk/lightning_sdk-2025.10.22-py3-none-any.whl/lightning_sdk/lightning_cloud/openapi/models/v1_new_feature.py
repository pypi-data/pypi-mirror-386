# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1NewFeature(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'description': 'str',
        'feature_name': 'str',
        'highlights': 'list[str]',
        'id': 'str',
        'image_url': 'str',
        'learn_more_url': 'str',
        'poster_url': 'str',
        'title': 'str',
        'video_url': 'str',
        'viewed': 'bool'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'description': 'description',
        'feature_name': 'featureName',
        'highlights': 'highlights',
        'id': 'id',
        'image_url': 'imageUrl',
        'learn_more_url': 'learnMoreUrl',
        'poster_url': 'posterUrl',
        'title': 'title',
        'video_url': 'videoUrl',
        'viewed': 'viewed'
    }

    def __init__(self, created_at: 'datetime' =None, description: 'str' =None, feature_name: 'str' =None, highlights: 'list[str]' =None, id: 'str' =None, image_url: 'str' =None, learn_more_url: 'str' =None, poster_url: 'str' =None, title: 'str' =None, video_url: 'str' =None, viewed: 'bool' =None):  # noqa: E501
        """V1NewFeature - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._description = None
        self._feature_name = None
        self._highlights = None
        self._id = None
        self._image_url = None
        self._learn_more_url = None
        self._poster_url = None
        self._title = None
        self._video_url = None
        self._viewed = None
        self.discriminator = None
        if created_at is not None:
            self.created_at = created_at
        if description is not None:
            self.description = description
        if feature_name is not None:
            self.feature_name = feature_name
        if highlights is not None:
            self.highlights = highlights
        if id is not None:
            self.id = id
        if image_url is not None:
            self.image_url = image_url
        if learn_more_url is not None:
            self.learn_more_url = learn_more_url
        if poster_url is not None:
            self.poster_url = poster_url
        if title is not None:
            self.title = title
        if video_url is not None:
            self.video_url = video_url
        if viewed is not None:
            self.viewed = viewed

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this V1NewFeature.  # noqa: E501


        :return: The created_at of this V1NewFeature.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this V1NewFeature.


        :param created_at: The created_at of this V1NewFeature.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def description(self) -> 'str':
        """Gets the description of this V1NewFeature.  # noqa: E501


        :return: The description of this V1NewFeature.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: 'str'):
        """Sets the description of this V1NewFeature.


        :param description: The description of this V1NewFeature.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def feature_name(self) -> 'str':
        """Gets the feature_name of this V1NewFeature.  # noqa: E501


        :return: The feature_name of this V1NewFeature.  # noqa: E501
        :rtype: str
        """
        return self._feature_name

    @feature_name.setter
    def feature_name(self, feature_name: 'str'):
        """Sets the feature_name of this V1NewFeature.


        :param feature_name: The feature_name of this V1NewFeature.  # noqa: E501
        :type: str
        """

        self._feature_name = feature_name

    @property
    def highlights(self) -> 'list[str]':
        """Gets the highlights of this V1NewFeature.  # noqa: E501


        :return: The highlights of this V1NewFeature.  # noqa: E501
        :rtype: list[str]
        """
        return self._highlights

    @highlights.setter
    def highlights(self, highlights: 'list[str]'):
        """Sets the highlights of this V1NewFeature.


        :param highlights: The highlights of this V1NewFeature.  # noqa: E501
        :type: list[str]
        """

        self._highlights = highlights

    @property
    def id(self) -> 'str':
        """Gets the id of this V1NewFeature.  # noqa: E501


        :return: The id of this V1NewFeature.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1NewFeature.


        :param id: The id of this V1NewFeature.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def image_url(self) -> 'str':
        """Gets the image_url of this V1NewFeature.  # noqa: E501


        :return: The image_url of this V1NewFeature.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url: 'str'):
        """Sets the image_url of this V1NewFeature.


        :param image_url: The image_url of this V1NewFeature.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def learn_more_url(self) -> 'str':
        """Gets the learn_more_url of this V1NewFeature.  # noqa: E501


        :return: The learn_more_url of this V1NewFeature.  # noqa: E501
        :rtype: str
        """
        return self._learn_more_url

    @learn_more_url.setter
    def learn_more_url(self, learn_more_url: 'str'):
        """Sets the learn_more_url of this V1NewFeature.


        :param learn_more_url: The learn_more_url of this V1NewFeature.  # noqa: E501
        :type: str
        """

        self._learn_more_url = learn_more_url

    @property
    def poster_url(self) -> 'str':
        """Gets the poster_url of this V1NewFeature.  # noqa: E501


        :return: The poster_url of this V1NewFeature.  # noqa: E501
        :rtype: str
        """
        return self._poster_url

    @poster_url.setter
    def poster_url(self, poster_url: 'str'):
        """Sets the poster_url of this V1NewFeature.


        :param poster_url: The poster_url of this V1NewFeature.  # noqa: E501
        :type: str
        """

        self._poster_url = poster_url

    @property
    def title(self) -> 'str':
        """Gets the title of this V1NewFeature.  # noqa: E501


        :return: The title of this V1NewFeature.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: 'str'):
        """Sets the title of this V1NewFeature.


        :param title: The title of this V1NewFeature.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def video_url(self) -> 'str':
        """Gets the video_url of this V1NewFeature.  # noqa: E501


        :return: The video_url of this V1NewFeature.  # noqa: E501
        :rtype: str
        """
        return self._video_url

    @video_url.setter
    def video_url(self, video_url: 'str'):
        """Sets the video_url of this V1NewFeature.


        :param video_url: The video_url of this V1NewFeature.  # noqa: E501
        :type: str
        """

        self._video_url = video_url

    @property
    def viewed(self) -> 'bool':
        """Gets the viewed of this V1NewFeature.  # noqa: E501


        :return: The viewed of this V1NewFeature.  # noqa: E501
        :rtype: bool
        """
        return self._viewed

    @viewed.setter
    def viewed(self, viewed: 'bool'):
        """Sets the viewed of this V1NewFeature.


        :param viewed: The viewed of this V1NewFeature.  # noqa: E501
        :type: bool
        """

        self._viewed = viewed

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1NewFeature, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1NewFeature') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1NewFeature):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1NewFeature') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
