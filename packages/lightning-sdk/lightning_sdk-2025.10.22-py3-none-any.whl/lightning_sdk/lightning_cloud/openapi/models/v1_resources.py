# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1Resources(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu': 'int',
        'cpus': 'str',
        'extra': 'dict(str, str)',
        'gpu': 'int',
        'gpu_type': 'str',
        'iops': 'str',
        'memory_mb': 'str',
        'storage_gb': 'str',
        'throughput': 'str'
    }

    attribute_map = {
        'cpu': 'cpu',
        'cpus': 'cpus',
        'extra': 'extra',
        'gpu': 'gpu',
        'gpu_type': 'gpuType',
        'iops': 'iops',
        'memory_mb': 'memoryMb',
        'storage_gb': 'storageGb',
        'throughput': 'throughput'
    }

    def __init__(self, cpu: 'int' =None, cpus: 'str' =None, extra: 'dict(str, str)' =None, gpu: 'int' =None, gpu_type: 'str' =None, iops: 'str' =None, memory_mb: 'str' =None, storage_gb: 'str' =None, throughput: 'str' =None):  # noqa: E501
        """V1Resources - a model defined in Swagger"""  # noqa: E501
        self._cpu = None
        self._cpus = None
        self._extra = None
        self._gpu = None
        self._gpu_type = None
        self._iops = None
        self._memory_mb = None
        self._storage_gb = None
        self._throughput = None
        self.discriminator = None
        if cpu is not None:
            self.cpu = cpu
        if cpus is not None:
            self.cpus = cpus
        if extra is not None:
            self.extra = extra
        if gpu is not None:
            self.gpu = gpu
        if gpu_type is not None:
            self.gpu_type = gpu_type
        if iops is not None:
            self.iops = iops
        if memory_mb is not None:
            self.memory_mb = memory_mb
        if storage_gb is not None:
            self.storage_gb = storage_gb
        if throughput is not None:
            self.throughput = throughput

    @property
    def cpu(self) -> 'int':
        """Gets the cpu of this V1Resources.  # noqa: E501


        :return: The cpu of this V1Resources.  # noqa: E501
        :rtype: int
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu: 'int'):
        """Sets the cpu of this V1Resources.


        :param cpu: The cpu of this V1Resources.  # noqa: E501
        :type: int
        """

        self._cpu = cpu

    @property
    def cpus(self) -> 'str':
        """Gets the cpus of this V1Resources.  # noqa: E501


        :return: The cpus of this V1Resources.  # noqa: E501
        :rtype: str
        """
        return self._cpus

    @cpus.setter
    def cpus(self, cpus: 'str'):
        """Sets the cpus of this V1Resources.


        :param cpus: The cpus of this V1Resources.  # noqa: E501
        :type: str
        """

        self._cpus = cpus

    @property
    def extra(self) -> 'dict(str, str)':
        """Gets the extra of this V1Resources.  # noqa: E501


        :return: The extra of this V1Resources.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._extra

    @extra.setter
    def extra(self, extra: 'dict(str, str)'):
        """Sets the extra of this V1Resources.


        :param extra: The extra of this V1Resources.  # noqa: E501
        :type: dict(str, str)
        """

        self._extra = extra

    @property
    def gpu(self) -> 'int':
        """Gets the gpu of this V1Resources.  # noqa: E501


        :return: The gpu of this V1Resources.  # noqa: E501
        :rtype: int
        """
        return self._gpu

    @gpu.setter
    def gpu(self, gpu: 'int'):
        """Sets the gpu of this V1Resources.


        :param gpu: The gpu of this V1Resources.  # noqa: E501
        :type: int
        """

        self._gpu = gpu

    @property
    def gpu_type(self) -> 'str':
        """Gets the gpu_type of this V1Resources.  # noqa: E501


        :return: The gpu_type of this V1Resources.  # noqa: E501
        :rtype: str
        """
        return self._gpu_type

    @gpu_type.setter
    def gpu_type(self, gpu_type: 'str'):
        """Sets the gpu_type of this V1Resources.


        :param gpu_type: The gpu_type of this V1Resources.  # noqa: E501
        :type: str
        """

        self._gpu_type = gpu_type

    @property
    def iops(self) -> 'str':
        """Gets the iops of this V1Resources.  # noqa: E501


        :return: The iops of this V1Resources.  # noqa: E501
        :rtype: str
        """
        return self._iops

    @iops.setter
    def iops(self, iops: 'str'):
        """Sets the iops of this V1Resources.


        :param iops: The iops of this V1Resources.  # noqa: E501
        :type: str
        """

        self._iops = iops

    @property
    def memory_mb(self) -> 'str':
        """Gets the memory_mb of this V1Resources.  # noqa: E501


        :return: The memory_mb of this V1Resources.  # noqa: E501
        :rtype: str
        """
        return self._memory_mb

    @memory_mb.setter
    def memory_mb(self, memory_mb: 'str'):
        """Sets the memory_mb of this V1Resources.


        :param memory_mb: The memory_mb of this V1Resources.  # noqa: E501
        :type: str
        """

        self._memory_mb = memory_mb

    @property
    def storage_gb(self) -> 'str':
        """Gets the storage_gb of this V1Resources.  # noqa: E501


        :return: The storage_gb of this V1Resources.  # noqa: E501
        :rtype: str
        """
        return self._storage_gb

    @storage_gb.setter
    def storage_gb(self, storage_gb: 'str'):
        """Sets the storage_gb of this V1Resources.


        :param storage_gb: The storage_gb of this V1Resources.  # noqa: E501
        :type: str
        """

        self._storage_gb = storage_gb

    @property
    def throughput(self) -> 'str':
        """Gets the throughput of this V1Resources.  # noqa: E501


        :return: The throughput of this V1Resources.  # noqa: E501
        :rtype: str
        """
        return self._throughput

    @throughput.setter
    def throughput(self, throughput: 'str'):
        """Sets the throughput of this V1Resources.


        :param throughput: The throughput of this V1Resources.  # noqa: E501
        :type: str
        """

        self._throughput = throughput

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1Resources, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1Resources') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Resources):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1Resources') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
