# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1Conversation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assistant_id': 'str',
        'created_at': 'datetime',
        'id': 'str',
        'like': 'V1LikeStatus',
        'messages': 'list[V1Message]',
        'name': 'str',
        'project_id': 'str',
        'title': 'str',
        'updated_at': 'datetime',
        'user_id': 'str'
    }

    attribute_map = {
        'assistant_id': 'assistantId',
        'created_at': 'createdAt',
        'id': 'id',
        'like': 'like',
        'messages': 'messages',
        'name': 'name',
        'project_id': 'projectId',
        'title': 'title',
        'updated_at': 'updatedAt',
        'user_id': 'userId'
    }

    def __init__(self, assistant_id: 'str' =None, created_at: 'datetime' =None, id: 'str' =None, like: 'V1LikeStatus' =None, messages: 'list[V1Message]' =None, name: 'str' =None, project_id: 'str' =None, title: 'str' =None, updated_at: 'datetime' =None, user_id: 'str' =None):  # noqa: E501
        """V1Conversation - a model defined in Swagger"""  # noqa: E501
        self._assistant_id = None
        self._created_at = None
        self._id = None
        self._like = None
        self._messages = None
        self._name = None
        self._project_id = None
        self._title = None
        self._updated_at = None
        self._user_id = None
        self.discriminator = None
        if assistant_id is not None:
            self.assistant_id = assistant_id
        if created_at is not None:
            self.created_at = created_at
        if id is not None:
            self.id = id
        if like is not None:
            self.like = like
        if messages is not None:
            self.messages = messages
        if name is not None:
            self.name = name
        if project_id is not None:
            self.project_id = project_id
        if title is not None:
            self.title = title
        if updated_at is not None:
            self.updated_at = updated_at
        if user_id is not None:
            self.user_id = user_id

    @property
    def assistant_id(self) -> 'str':
        """Gets the assistant_id of this V1Conversation.  # noqa: E501


        :return: The assistant_id of this V1Conversation.  # noqa: E501
        :rtype: str
        """
        return self._assistant_id

    @assistant_id.setter
    def assistant_id(self, assistant_id: 'str'):
        """Sets the assistant_id of this V1Conversation.


        :param assistant_id: The assistant_id of this V1Conversation.  # noqa: E501
        :type: str
        """

        self._assistant_id = assistant_id

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this V1Conversation.  # noqa: E501


        :return: The created_at of this V1Conversation.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this V1Conversation.


        :param created_at: The created_at of this V1Conversation.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def id(self) -> 'str':
        """Gets the id of this V1Conversation.  # noqa: E501


        :return: The id of this V1Conversation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1Conversation.


        :param id: The id of this V1Conversation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def like(self) -> 'V1LikeStatus':
        """Gets the like of this V1Conversation.  # noqa: E501


        :return: The like of this V1Conversation.  # noqa: E501
        :rtype: V1LikeStatus
        """
        return self._like

    @like.setter
    def like(self, like: 'V1LikeStatus'):
        """Sets the like of this V1Conversation.


        :param like: The like of this V1Conversation.  # noqa: E501
        :type: V1LikeStatus
        """

        self._like = like

    @property
    def messages(self) -> 'list[V1Message]':
        """Gets the messages of this V1Conversation.  # noqa: E501


        :return: The messages of this V1Conversation.  # noqa: E501
        :rtype: list[V1Message]
        """
        return self._messages

    @messages.setter
    def messages(self, messages: 'list[V1Message]'):
        """Sets the messages of this V1Conversation.


        :param messages: The messages of this V1Conversation.  # noqa: E501
        :type: list[V1Message]
        """

        self._messages = messages

    @property
    def name(self) -> 'str':
        """Gets the name of this V1Conversation.  # noqa: E501


        :return: The name of this V1Conversation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1Conversation.


        :param name: The name of this V1Conversation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def project_id(self) -> 'str':
        """Gets the project_id of this V1Conversation.  # noqa: E501


        :return: The project_id of this V1Conversation.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: 'str'):
        """Sets the project_id of this V1Conversation.


        :param project_id: The project_id of this V1Conversation.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def title(self) -> 'str':
        """Gets the title of this V1Conversation.  # noqa: E501


        :return: The title of this V1Conversation.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: 'str'):
        """Sets the title of this V1Conversation.


        :param title: The title of this V1Conversation.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def updated_at(self) -> 'datetime':
        """Gets the updated_at of this V1Conversation.  # noqa: E501


        :return: The updated_at of this V1Conversation.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: 'datetime'):
        """Sets the updated_at of this V1Conversation.


        :param updated_at: The updated_at of this V1Conversation.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def user_id(self) -> 'str':
        """Gets the user_id of this V1Conversation.  # noqa: E501


        :return: The user_id of this V1Conversation.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: 'str'):
        """Sets the user_id of this V1Conversation.


        :param user_id: The user_id of this V1Conversation.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1Conversation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1Conversation') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Conversation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1Conversation') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
