# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class AgentmanagedendpointsIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_key': 'str',
        'base_url': 'str',
        'description': 'str',
        'models_metadata': 'list[V1ManagedModel]',
        'name': 'str',
        'org_id': 'str',
        'provider_display_name': 'str',
        'publish_status': 'str',
        'user_id': 'str'
    }

    attribute_map = {
        'api_key': 'apiKey',
        'base_url': 'baseUrl',
        'description': 'description',
        'models_metadata': 'modelsMetadata',
        'name': 'name',
        'org_id': 'orgId',
        'provider_display_name': 'providerDisplayName',
        'publish_status': 'publishStatus',
        'user_id': 'userId'
    }

    def __init__(self, api_key: 'str' =None, base_url: 'str' =None, description: 'str' =None, models_metadata: 'list[V1ManagedModel]' =None, name: 'str' =None, org_id: 'str' =None, provider_display_name: 'str' =None, publish_status: 'str' =None, user_id: 'str' =None):  # noqa: E501
        """AgentmanagedendpointsIdBody - a model defined in Swagger"""  # noqa: E501
        self._api_key = None
        self._base_url = None
        self._description = None
        self._models_metadata = None
        self._name = None
        self._org_id = None
        self._provider_display_name = None
        self._publish_status = None
        self._user_id = None
        self.discriminator = None
        if api_key is not None:
            self.api_key = api_key
        if base_url is not None:
            self.base_url = base_url
        if description is not None:
            self.description = description
        if models_metadata is not None:
            self.models_metadata = models_metadata
        if name is not None:
            self.name = name
        if org_id is not None:
            self.org_id = org_id
        if provider_display_name is not None:
            self.provider_display_name = provider_display_name
        if publish_status is not None:
            self.publish_status = publish_status
        if user_id is not None:
            self.user_id = user_id

    @property
    def api_key(self) -> 'str':
        """Gets the api_key of this AgentmanagedendpointsIdBody.  # noqa: E501


        :return: The api_key of this AgentmanagedendpointsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key: 'str'):
        """Sets the api_key of this AgentmanagedendpointsIdBody.


        :param api_key: The api_key of this AgentmanagedendpointsIdBody.  # noqa: E501
        :type: str
        """

        self._api_key = api_key

    @property
    def base_url(self) -> 'str':
        """Gets the base_url of this AgentmanagedendpointsIdBody.  # noqa: E501


        :return: The base_url of this AgentmanagedendpointsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url: 'str'):
        """Sets the base_url of this AgentmanagedendpointsIdBody.


        :param base_url: The base_url of this AgentmanagedendpointsIdBody.  # noqa: E501
        :type: str
        """

        self._base_url = base_url

    @property
    def description(self) -> 'str':
        """Gets the description of this AgentmanagedendpointsIdBody.  # noqa: E501


        :return: The description of this AgentmanagedendpointsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: 'str'):
        """Sets the description of this AgentmanagedendpointsIdBody.


        :param description: The description of this AgentmanagedendpointsIdBody.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def models_metadata(self) -> 'list[V1ManagedModel]':
        """Gets the models_metadata of this AgentmanagedendpointsIdBody.  # noqa: E501


        :return: The models_metadata of this AgentmanagedendpointsIdBody.  # noqa: E501
        :rtype: list[V1ManagedModel]
        """
        return self._models_metadata

    @models_metadata.setter
    def models_metadata(self, models_metadata: 'list[V1ManagedModel]'):
        """Sets the models_metadata of this AgentmanagedendpointsIdBody.


        :param models_metadata: The models_metadata of this AgentmanagedendpointsIdBody.  # noqa: E501
        :type: list[V1ManagedModel]
        """

        self._models_metadata = models_metadata

    @property
    def name(self) -> 'str':
        """Gets the name of this AgentmanagedendpointsIdBody.  # noqa: E501


        :return: The name of this AgentmanagedendpointsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this AgentmanagedendpointsIdBody.


        :param name: The name of this AgentmanagedendpointsIdBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def org_id(self) -> 'str':
        """Gets the org_id of this AgentmanagedendpointsIdBody.  # noqa: E501


        :return: The org_id of this AgentmanagedendpointsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id: 'str'):
        """Sets the org_id of this AgentmanagedendpointsIdBody.


        :param org_id: The org_id of this AgentmanagedendpointsIdBody.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def provider_display_name(self) -> 'str':
        """Gets the provider_display_name of this AgentmanagedendpointsIdBody.  # noqa: E501


        :return: The provider_display_name of this AgentmanagedendpointsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._provider_display_name

    @provider_display_name.setter
    def provider_display_name(self, provider_display_name: 'str'):
        """Sets the provider_display_name of this AgentmanagedendpointsIdBody.


        :param provider_display_name: The provider_display_name of this AgentmanagedendpointsIdBody.  # noqa: E501
        :type: str
        """

        self._provider_display_name = provider_display_name

    @property
    def publish_status(self) -> 'str':
        """Gets the publish_status of this AgentmanagedendpointsIdBody.  # noqa: E501


        :return: The publish_status of this AgentmanagedendpointsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._publish_status

    @publish_status.setter
    def publish_status(self, publish_status: 'str'):
        """Sets the publish_status of this AgentmanagedendpointsIdBody.


        :param publish_status: The publish_status of this AgentmanagedendpointsIdBody.  # noqa: E501
        :type: str
        """

        self._publish_status = publish_status

    @property
    def user_id(self) -> 'str':
        """Gets the user_id of this AgentmanagedendpointsIdBody.  # noqa: E501


        :return: The user_id of this AgentmanagedendpointsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: 'str'):
        """Sets the user_id of this AgentmanagedendpointsIdBody.


        :param user_id: The user_id of this AgentmanagedendpointsIdBody.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AgentmanagedendpointsIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'AgentmanagedendpointsIdBody') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, AgentmanagedendpointsIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'AgentmanagedendpointsIdBody') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
