# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1AffiliateLink(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'created_at': 'datetime',
        'expires_at': 'datetime',
        'id': 'str',
        'max_uses': 'int',
        'name': 'str',
        'referred_incentives': 'dict(str, str)',
        'skip_waitlist': 'bool',
        'type': 'str',
        'updated_at': 'datetime',
        'url': 'str',
        'usage_count': 'int',
        'user_id': 'str'
    }

    attribute_map = {
        'code': 'code',
        'created_at': 'createdAt',
        'expires_at': 'expiresAt',
        'id': 'id',
        'max_uses': 'maxUses',
        'name': 'name',
        'referred_incentives': 'referredIncentives',
        'skip_waitlist': 'skipWaitlist',
        'type': 'type',
        'updated_at': 'updatedAt',
        'url': 'url',
        'usage_count': 'usageCount',
        'user_id': 'userId'
    }

    def __init__(self, code: 'str' =None, created_at: 'datetime' =None, expires_at: 'datetime' =None, id: 'str' =None, max_uses: 'int' =None, name: 'str' =None, referred_incentives: 'dict(str, str)' =None, skip_waitlist: 'bool' =None, type: 'str' =None, updated_at: 'datetime' =None, url: 'str' =None, usage_count: 'int' =None, user_id: 'str' =None):  # noqa: E501
        """V1AffiliateLink - a model defined in Swagger"""  # noqa: E501
        self._code = None
        self._created_at = None
        self._expires_at = None
        self._id = None
        self._max_uses = None
        self._name = None
        self._referred_incentives = None
        self._skip_waitlist = None
        self._type = None
        self._updated_at = None
        self._url = None
        self._usage_count = None
        self._user_id = None
        self.discriminator = None
        if code is not None:
            self.code = code
        if created_at is not None:
            self.created_at = created_at
        if expires_at is not None:
            self.expires_at = expires_at
        if id is not None:
            self.id = id
        if max_uses is not None:
            self.max_uses = max_uses
        if name is not None:
            self.name = name
        if referred_incentives is not None:
            self.referred_incentives = referred_incentives
        if skip_waitlist is not None:
            self.skip_waitlist = skip_waitlist
        if type is not None:
            self.type = type
        if updated_at is not None:
            self.updated_at = updated_at
        if url is not None:
            self.url = url
        if usage_count is not None:
            self.usage_count = usage_count
        if user_id is not None:
            self.user_id = user_id

    @property
    def code(self) -> 'str':
        """Gets the code of this V1AffiliateLink.  # noqa: E501


        :return: The code of this V1AffiliateLink.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code: 'str'):
        """Sets the code of this V1AffiliateLink.


        :param code: The code of this V1AffiliateLink.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this V1AffiliateLink.  # noqa: E501


        :return: The created_at of this V1AffiliateLink.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this V1AffiliateLink.


        :param created_at: The created_at of this V1AffiliateLink.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def expires_at(self) -> 'datetime':
        """Gets the expires_at of this V1AffiliateLink.  # noqa: E501


        :return: The expires_at of this V1AffiliateLink.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at: 'datetime'):
        """Sets the expires_at of this V1AffiliateLink.


        :param expires_at: The expires_at of this V1AffiliateLink.  # noqa: E501
        :type: datetime
        """

        self._expires_at = expires_at

    @property
    def id(self) -> 'str':
        """Gets the id of this V1AffiliateLink.  # noqa: E501


        :return: The id of this V1AffiliateLink.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1AffiliateLink.


        :param id: The id of this V1AffiliateLink.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def max_uses(self) -> 'int':
        """Gets the max_uses of this V1AffiliateLink.  # noqa: E501


        :return: The max_uses of this V1AffiliateLink.  # noqa: E501
        :rtype: int
        """
        return self._max_uses

    @max_uses.setter
    def max_uses(self, max_uses: 'int'):
        """Sets the max_uses of this V1AffiliateLink.


        :param max_uses: The max_uses of this V1AffiliateLink.  # noqa: E501
        :type: int
        """

        self._max_uses = max_uses

    @property
    def name(self) -> 'str':
        """Gets the name of this V1AffiliateLink.  # noqa: E501


        :return: The name of this V1AffiliateLink.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1AffiliateLink.


        :param name: The name of this V1AffiliateLink.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def referred_incentives(self) -> 'dict(str, str)':
        """Gets the referred_incentives of this V1AffiliateLink.  # noqa: E501


        :return: The referred_incentives of this V1AffiliateLink.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._referred_incentives

    @referred_incentives.setter
    def referred_incentives(self, referred_incentives: 'dict(str, str)'):
        """Sets the referred_incentives of this V1AffiliateLink.


        :param referred_incentives: The referred_incentives of this V1AffiliateLink.  # noqa: E501
        :type: dict(str, str)
        """

        self._referred_incentives = referred_incentives

    @property
    def skip_waitlist(self) -> 'bool':
        """Gets the skip_waitlist of this V1AffiliateLink.  # noqa: E501


        :return: The skip_waitlist of this V1AffiliateLink.  # noqa: E501
        :rtype: bool
        """
        return self._skip_waitlist

    @skip_waitlist.setter
    def skip_waitlist(self, skip_waitlist: 'bool'):
        """Sets the skip_waitlist of this V1AffiliateLink.


        :param skip_waitlist: The skip_waitlist of this V1AffiliateLink.  # noqa: E501
        :type: bool
        """

        self._skip_waitlist = skip_waitlist

    @property
    def type(self) -> 'str':
        """Gets the type of this V1AffiliateLink.  # noqa: E501


        :return: The type of this V1AffiliateLink.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: 'str'):
        """Sets the type of this V1AffiliateLink.


        :param type: The type of this V1AffiliateLink.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def updated_at(self) -> 'datetime':
        """Gets the updated_at of this V1AffiliateLink.  # noqa: E501


        :return: The updated_at of this V1AffiliateLink.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: 'datetime'):
        """Sets the updated_at of this V1AffiliateLink.


        :param updated_at: The updated_at of this V1AffiliateLink.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def url(self) -> 'str':
        """Gets the url of this V1AffiliateLink.  # noqa: E501


        :return: The url of this V1AffiliateLink.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: 'str'):
        """Sets the url of this V1AffiliateLink.


        :param url: The url of this V1AffiliateLink.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def usage_count(self) -> 'int':
        """Gets the usage_count of this V1AffiliateLink.  # noqa: E501


        :return: The usage_count of this V1AffiliateLink.  # noqa: E501
        :rtype: int
        """
        return self._usage_count

    @usage_count.setter
    def usage_count(self, usage_count: 'int'):
        """Sets the usage_count of this V1AffiliateLink.


        :param usage_count: The usage_count of this V1AffiliateLink.  # noqa: E501
        :type: int
        """

        self._usage_count = usage_count

    @property
    def user_id(self) -> 'str':
        """Gets the user_id of this V1AffiliateLink.  # noqa: E501


        :return: The user_id of this V1AffiliateLink.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: 'str'):
        """Sets the user_id of this V1AffiliateLink.


        :param user_id: The user_id of this V1AffiliateLink.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1AffiliateLink, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1AffiliateLink') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1AffiliateLink):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1AffiliateLink') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
