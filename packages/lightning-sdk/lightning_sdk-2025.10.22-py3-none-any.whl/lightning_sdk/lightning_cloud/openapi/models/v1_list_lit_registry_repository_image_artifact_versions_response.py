# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1ListLitRegistryRepositoryImageArtifactVersionsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'artifacts': 'list[V1LitRegistryArtifact]',
        'cluster_id': 'str',
        'latest_artifact': 'V1LitRegistryArtifact',
        'latest_tag_name': 'str',
        'lit_repo_name': 'str',
        'project_id': 'str'
    }

    attribute_map = {
        'artifacts': 'artifacts',
        'cluster_id': 'clusterId',
        'latest_artifact': 'latestArtifact',
        'latest_tag_name': 'latestTagName',
        'lit_repo_name': 'litRepoName',
        'project_id': 'projectId'
    }

    def __init__(self, artifacts: 'list[V1LitRegistryArtifact]' =None, cluster_id: 'str' =None, latest_artifact: 'V1LitRegistryArtifact' =None, latest_tag_name: 'str' =None, lit_repo_name: 'str' =None, project_id: 'str' =None):  # noqa: E501
        """V1ListLitRegistryRepositoryImageArtifactVersionsResponse - a model defined in Swagger"""  # noqa: E501
        self._artifacts = None
        self._cluster_id = None
        self._latest_artifact = None
        self._latest_tag_name = None
        self._lit_repo_name = None
        self._project_id = None
        self.discriminator = None
        if artifacts is not None:
            self.artifacts = artifacts
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if latest_artifact is not None:
            self.latest_artifact = latest_artifact
        if latest_tag_name is not None:
            self.latest_tag_name = latest_tag_name
        if lit_repo_name is not None:
            self.lit_repo_name = lit_repo_name
        if project_id is not None:
            self.project_id = project_id

    @property
    def artifacts(self) -> 'list[V1LitRegistryArtifact]':
        """Gets the artifacts of this V1ListLitRegistryRepositoryImageArtifactVersionsResponse.  # noqa: E501

        will contain all artifacts and tags excluding the latest.  # noqa: E501

        :return: The artifacts of this V1ListLitRegistryRepositoryImageArtifactVersionsResponse.  # noqa: E501
        :rtype: list[V1LitRegistryArtifact]
        """
        return self._artifacts

    @artifacts.setter
    def artifacts(self, artifacts: 'list[V1LitRegistryArtifact]'):
        """Sets the artifacts of this V1ListLitRegistryRepositoryImageArtifactVersionsResponse.

        will contain all artifacts and tags excluding the latest.  # noqa: E501

        :param artifacts: The artifacts of this V1ListLitRegistryRepositoryImageArtifactVersionsResponse.  # noqa: E501
        :type: list[V1LitRegistryArtifact]
        """

        self._artifacts = artifacts

    @property
    def cluster_id(self) -> 'str':
        """Gets the cluster_id of this V1ListLitRegistryRepositoryImageArtifactVersionsResponse.  # noqa: E501


        :return: The cluster_id of this V1ListLitRegistryRepositoryImageArtifactVersionsResponse.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id: 'str'):
        """Sets the cluster_id of this V1ListLitRegistryRepositoryImageArtifactVersionsResponse.


        :param cluster_id: The cluster_id of this V1ListLitRegistryRepositoryImageArtifactVersionsResponse.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def latest_artifact(self) -> 'V1LitRegistryArtifact':
        """Gets the latest_artifact of this V1ListLitRegistryRepositoryImageArtifactVersionsResponse.  # noqa: E501


        :return: The latest_artifact of this V1ListLitRegistryRepositoryImageArtifactVersionsResponse.  # noqa: E501
        :rtype: V1LitRegistryArtifact
        """
        return self._latest_artifact

    @latest_artifact.setter
    def latest_artifact(self, latest_artifact: 'V1LitRegistryArtifact'):
        """Sets the latest_artifact of this V1ListLitRegistryRepositoryImageArtifactVersionsResponse.


        :param latest_artifact: The latest_artifact of this V1ListLitRegistryRepositoryImageArtifactVersionsResponse.  # noqa: E501
        :type: V1LitRegistryArtifact
        """

        self._latest_artifact = latest_artifact

    @property
    def latest_tag_name(self) -> 'str':
        """Gets the latest_tag_name of this V1ListLitRegistryRepositoryImageArtifactVersionsResponse.  # noqa: E501

        We'll search for artifacts where artifacts[0].tags[X].name == latest else, most recent push_time. Also, latest_tag_name is allowed to be empty since you don't technically have to tag any of your artifacts. If this is empty we will fallback to entering in \"latest\" inside the versions table in the UI.  # noqa: E501

        :return: The latest_tag_name of this V1ListLitRegistryRepositoryImageArtifactVersionsResponse.  # noqa: E501
        :rtype: str
        """
        return self._latest_tag_name

    @latest_tag_name.setter
    def latest_tag_name(self, latest_tag_name: 'str'):
        """Sets the latest_tag_name of this V1ListLitRegistryRepositoryImageArtifactVersionsResponse.

        We'll search for artifacts where artifacts[0].tags[X].name == latest else, most recent push_time. Also, latest_tag_name is allowed to be empty since you don't technically have to tag any of your artifacts. If this is empty we will fallback to entering in \"latest\" inside the versions table in the UI.  # noqa: E501

        :param latest_tag_name: The latest_tag_name of this V1ListLitRegistryRepositoryImageArtifactVersionsResponse.  # noqa: E501
        :type: str
        """

        self._latest_tag_name = latest_tag_name

    @property
    def lit_repo_name(self) -> 'str':
        """Gets the lit_repo_name of this V1ListLitRegistryRepositoryImageArtifactVersionsResponse.  # noqa: E501


        :return: The lit_repo_name of this V1ListLitRegistryRepositoryImageArtifactVersionsResponse.  # noqa: E501
        :rtype: str
        """
        return self._lit_repo_name

    @lit_repo_name.setter
    def lit_repo_name(self, lit_repo_name: 'str'):
        """Sets the lit_repo_name of this V1ListLitRegistryRepositoryImageArtifactVersionsResponse.


        :param lit_repo_name: The lit_repo_name of this V1ListLitRegistryRepositoryImageArtifactVersionsResponse.  # noqa: E501
        :type: str
        """

        self._lit_repo_name = lit_repo_name

    @property
    def project_id(self) -> 'str':
        """Gets the project_id of this V1ListLitRegistryRepositoryImageArtifactVersionsResponse.  # noqa: E501


        :return: The project_id of this V1ListLitRegistryRepositoryImageArtifactVersionsResponse.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: 'str'):
        """Sets the project_id of this V1ListLitRegistryRepositoryImageArtifactVersionsResponse.


        :param project_id: The project_id of this V1ListLitRegistryRepositoryImageArtifactVersionsResponse.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1ListLitRegistryRepositoryImageArtifactVersionsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1ListLitRegistryRepositoryImageArtifactVersionsResponse') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ListLitRegistryRepositoryImageArtifactVersionsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1ListLitRegistryRepositoryImageArtifactVersionsResponse') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
