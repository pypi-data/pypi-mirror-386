# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1IncidentEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'closing': 'bool',
        'cluster_id': 'str',
        'created_at': 'datetime',
        'current_value': 'float',
        'id': 'str',
        'incident_id': 'str',
        'k8s': 'V1K8sIncidentIndexes',
        'message': 'str',
        'multiple_event': 'bool',
        'notified': 'bool',
        'previous_value': 'float',
        'project_id': 'str',
        'resource': 'str',
        'severity': 'V1IncidentSeverity',
        'threshold': 'float',
        'timestamp': 'datetime',
        'title': 'str',
        'type': 'V1IncidentType',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'closing': 'closing',
        'cluster_id': 'clusterId',
        'created_at': 'createdAt',
        'current_value': 'currentValue',
        'id': 'id',
        'incident_id': 'incidentId',
        'k8s': 'k8s',
        'message': 'message',
        'multiple_event': 'multipleEvent',
        'notified': 'notified',
        'previous_value': 'previousValue',
        'project_id': 'projectId',
        'resource': 'resource',
        'severity': 'severity',
        'threshold': 'threshold',
        'timestamp': 'timestamp',
        'title': 'title',
        'type': 'type',
        'updated_at': 'updatedAt'
    }

    def __init__(self, closing: 'bool' =None, cluster_id: 'str' =None, created_at: 'datetime' =None, current_value: 'float' =None, id: 'str' =None, incident_id: 'str' =None, k8s: 'V1K8sIncidentIndexes' =None, message: 'str' =None, multiple_event: 'bool' =None, notified: 'bool' =None, previous_value: 'float' =None, project_id: 'str' =None, resource: 'str' =None, severity: 'V1IncidentSeverity' =None, threshold: 'float' =None, timestamp: 'datetime' =None, title: 'str' =None, type: 'V1IncidentType' =None, updated_at: 'datetime' =None):  # noqa: E501
        """V1IncidentEvent - a model defined in Swagger"""  # noqa: E501
        self._closing = None
        self._cluster_id = None
        self._created_at = None
        self._current_value = None
        self._id = None
        self._incident_id = None
        self._k8s = None
        self._message = None
        self._multiple_event = None
        self._notified = None
        self._previous_value = None
        self._project_id = None
        self._resource = None
        self._severity = None
        self._threshold = None
        self._timestamp = None
        self._title = None
        self._type = None
        self._updated_at = None
        self.discriminator = None
        if closing is not None:
            self.closing = closing
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if created_at is not None:
            self.created_at = created_at
        if current_value is not None:
            self.current_value = current_value
        if id is not None:
            self.id = id
        if incident_id is not None:
            self.incident_id = incident_id
        if k8s is not None:
            self.k8s = k8s
        if message is not None:
            self.message = message
        if multiple_event is not None:
            self.multiple_event = multiple_event
        if notified is not None:
            self.notified = notified
        if previous_value is not None:
            self.previous_value = previous_value
        if project_id is not None:
            self.project_id = project_id
        if resource is not None:
            self.resource = resource
        if severity is not None:
            self.severity = severity
        if threshold is not None:
            self.threshold = threshold
        if timestamp is not None:
            self.timestamp = timestamp
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def closing(self) -> 'bool':
        """Gets the closing of this V1IncidentEvent.  # noqa: E501


        :return: The closing of this V1IncidentEvent.  # noqa: E501
        :rtype: bool
        """
        return self._closing

    @closing.setter
    def closing(self, closing: 'bool'):
        """Sets the closing of this V1IncidentEvent.


        :param closing: The closing of this V1IncidentEvent.  # noqa: E501
        :type: bool
        """

        self._closing = closing

    @property
    def cluster_id(self) -> 'str':
        """Gets the cluster_id of this V1IncidentEvent.  # noqa: E501


        :return: The cluster_id of this V1IncidentEvent.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id: 'str'):
        """Sets the cluster_id of this V1IncidentEvent.


        :param cluster_id: The cluster_id of this V1IncidentEvent.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this V1IncidentEvent.  # noqa: E501


        :return: The created_at of this V1IncidentEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this V1IncidentEvent.


        :param created_at: The created_at of this V1IncidentEvent.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def current_value(self) -> 'float':
        """Gets the current_value of this V1IncidentEvent.  # noqa: E501


        :return: The current_value of this V1IncidentEvent.  # noqa: E501
        :rtype: float
        """
        return self._current_value

    @current_value.setter
    def current_value(self, current_value: 'float'):
        """Sets the current_value of this V1IncidentEvent.


        :param current_value: The current_value of this V1IncidentEvent.  # noqa: E501
        :type: float
        """

        self._current_value = current_value

    @property
    def id(self) -> 'str':
        """Gets the id of this V1IncidentEvent.  # noqa: E501


        :return: The id of this V1IncidentEvent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1IncidentEvent.


        :param id: The id of this V1IncidentEvent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def incident_id(self) -> 'str':
        """Gets the incident_id of this V1IncidentEvent.  # noqa: E501


        :return: The incident_id of this V1IncidentEvent.  # noqa: E501
        :rtype: str
        """
        return self._incident_id

    @incident_id.setter
    def incident_id(self, incident_id: 'str'):
        """Sets the incident_id of this V1IncidentEvent.


        :param incident_id: The incident_id of this V1IncidentEvent.  # noqa: E501
        :type: str
        """

        self._incident_id = incident_id

    @property
    def k8s(self) -> 'V1K8sIncidentIndexes':
        """Gets the k8s of this V1IncidentEvent.  # noqa: E501


        :return: The k8s of this V1IncidentEvent.  # noqa: E501
        :rtype: V1K8sIncidentIndexes
        """
        return self._k8s

    @k8s.setter
    def k8s(self, k8s: 'V1K8sIncidentIndexes'):
        """Sets the k8s of this V1IncidentEvent.


        :param k8s: The k8s of this V1IncidentEvent.  # noqa: E501
        :type: V1K8sIncidentIndexes
        """

        self._k8s = k8s

    @property
    def message(self) -> 'str':
        """Gets the message of this V1IncidentEvent.  # noqa: E501


        :return: The message of this V1IncidentEvent.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: 'str'):
        """Sets the message of this V1IncidentEvent.


        :param message: The message of this V1IncidentEvent.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def multiple_event(self) -> 'bool':
        """Gets the multiple_event of this V1IncidentEvent.  # noqa: E501


        :return: The multiple_event of this V1IncidentEvent.  # noqa: E501
        :rtype: bool
        """
        return self._multiple_event

    @multiple_event.setter
    def multiple_event(self, multiple_event: 'bool'):
        """Sets the multiple_event of this V1IncidentEvent.


        :param multiple_event: The multiple_event of this V1IncidentEvent.  # noqa: E501
        :type: bool
        """

        self._multiple_event = multiple_event

    @property
    def notified(self) -> 'bool':
        """Gets the notified of this V1IncidentEvent.  # noqa: E501


        :return: The notified of this V1IncidentEvent.  # noqa: E501
        :rtype: bool
        """
        return self._notified

    @notified.setter
    def notified(self, notified: 'bool'):
        """Sets the notified of this V1IncidentEvent.


        :param notified: The notified of this V1IncidentEvent.  # noqa: E501
        :type: bool
        """

        self._notified = notified

    @property
    def previous_value(self) -> 'float':
        """Gets the previous_value of this V1IncidentEvent.  # noqa: E501


        :return: The previous_value of this V1IncidentEvent.  # noqa: E501
        :rtype: float
        """
        return self._previous_value

    @previous_value.setter
    def previous_value(self, previous_value: 'float'):
        """Sets the previous_value of this V1IncidentEvent.


        :param previous_value: The previous_value of this V1IncidentEvent.  # noqa: E501
        :type: float
        """

        self._previous_value = previous_value

    @property
    def project_id(self) -> 'str':
        """Gets the project_id of this V1IncidentEvent.  # noqa: E501


        :return: The project_id of this V1IncidentEvent.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: 'str'):
        """Sets the project_id of this V1IncidentEvent.


        :param project_id: The project_id of this V1IncidentEvent.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def resource(self) -> 'str':
        """Gets the resource of this V1IncidentEvent.  # noqa: E501


        :return: The resource of this V1IncidentEvent.  # noqa: E501
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource: 'str'):
        """Sets the resource of this V1IncidentEvent.


        :param resource: The resource of this V1IncidentEvent.  # noqa: E501
        :type: str
        """

        self._resource = resource

    @property
    def severity(self) -> 'V1IncidentSeverity':
        """Gets the severity of this V1IncidentEvent.  # noqa: E501


        :return: The severity of this V1IncidentEvent.  # noqa: E501
        :rtype: V1IncidentSeverity
        """
        return self._severity

    @severity.setter
    def severity(self, severity: 'V1IncidentSeverity'):
        """Sets the severity of this V1IncidentEvent.


        :param severity: The severity of this V1IncidentEvent.  # noqa: E501
        :type: V1IncidentSeverity
        """

        self._severity = severity

    @property
    def threshold(self) -> 'float':
        """Gets the threshold of this V1IncidentEvent.  # noqa: E501


        :return: The threshold of this V1IncidentEvent.  # noqa: E501
        :rtype: float
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold: 'float'):
        """Sets the threshold of this V1IncidentEvent.


        :param threshold: The threshold of this V1IncidentEvent.  # noqa: E501
        :type: float
        """

        self._threshold = threshold

    @property
    def timestamp(self) -> 'datetime':
        """Gets the timestamp of this V1IncidentEvent.  # noqa: E501


        :return: The timestamp of this V1IncidentEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: 'datetime'):
        """Sets the timestamp of this V1IncidentEvent.


        :param timestamp: The timestamp of this V1IncidentEvent.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def title(self) -> 'str':
        """Gets the title of this V1IncidentEvent.  # noqa: E501


        :return: The title of this V1IncidentEvent.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: 'str'):
        """Sets the title of this V1IncidentEvent.


        :param title: The title of this V1IncidentEvent.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self) -> 'V1IncidentType':
        """Gets the type of this V1IncidentEvent.  # noqa: E501


        :return: The type of this V1IncidentEvent.  # noqa: E501
        :rtype: V1IncidentType
        """
        return self._type

    @type.setter
    def type(self, type: 'V1IncidentType'):
        """Sets the type of this V1IncidentEvent.


        :param type: The type of this V1IncidentEvent.  # noqa: E501
        :type: V1IncidentType
        """

        self._type = type

    @property
    def updated_at(self) -> 'datetime':
        """Gets the updated_at of this V1IncidentEvent.  # noqa: E501


        :return: The updated_at of this V1IncidentEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: 'datetime'):
        """Sets the updated_at of this V1IncidentEvent.


        :param updated_at: The updated_at of this V1IncidentEvent.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1IncidentEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1IncidentEvent') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1IncidentEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1IncidentEvent') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
