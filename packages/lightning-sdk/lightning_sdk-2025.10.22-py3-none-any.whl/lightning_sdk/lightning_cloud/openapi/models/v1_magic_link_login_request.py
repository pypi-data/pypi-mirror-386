# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1MagicLinkLoginRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collab_session_id': 'str',
        'email': 'str',
        'experimentation_id': 'str',
        'invite_code': 'str',
        'redirect_url': 'str',
        'referrer_params': 'str'
    }

    attribute_map = {
        'collab_session_id': 'collabSessionId',
        'email': 'email',
        'experimentation_id': 'experimentationId',
        'invite_code': 'inviteCode',
        'redirect_url': 'redirectUrl',
        'referrer_params': 'referrerParams'
    }

    def __init__(self, collab_session_id: 'str' =None, email: 'str' =None, experimentation_id: 'str' =None, invite_code: 'str' =None, redirect_url: 'str' =None, referrer_params: 'str' =None):  # noqa: E501
        """V1MagicLinkLoginRequest - a model defined in Swagger"""  # noqa: E501
        self._collab_session_id = None
        self._email = None
        self._experimentation_id = None
        self._invite_code = None
        self._redirect_url = None
        self._referrer_params = None
        self.discriminator = None
        if collab_session_id is not None:
            self.collab_session_id = collab_session_id
        if email is not None:
            self.email = email
        if experimentation_id is not None:
            self.experimentation_id = experimentation_id
        if invite_code is not None:
            self.invite_code = invite_code
        if redirect_url is not None:
            self.redirect_url = redirect_url
        if referrer_params is not None:
            self.referrer_params = referrer_params

    @property
    def collab_session_id(self) -> 'str':
        """Gets the collab_session_id of this V1MagicLinkLoginRequest.  # noqa: E501


        :return: The collab_session_id of this V1MagicLinkLoginRequest.  # noqa: E501
        :rtype: str
        """
        return self._collab_session_id

    @collab_session_id.setter
    def collab_session_id(self, collab_session_id: 'str'):
        """Sets the collab_session_id of this V1MagicLinkLoginRequest.


        :param collab_session_id: The collab_session_id of this V1MagicLinkLoginRequest.  # noqa: E501
        :type: str
        """

        self._collab_session_id = collab_session_id

    @property
    def email(self) -> 'str':
        """Gets the email of this V1MagicLinkLoginRequest.  # noqa: E501


        :return: The email of this V1MagicLinkLoginRequest.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: 'str'):
        """Sets the email of this V1MagicLinkLoginRequest.


        :param email: The email of this V1MagicLinkLoginRequest.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def experimentation_id(self) -> 'str':
        """Gets the experimentation_id of this V1MagicLinkLoginRequest.  # noqa: E501


        :return: The experimentation_id of this V1MagicLinkLoginRequest.  # noqa: E501
        :rtype: str
        """
        return self._experimentation_id

    @experimentation_id.setter
    def experimentation_id(self, experimentation_id: 'str'):
        """Sets the experimentation_id of this V1MagicLinkLoginRequest.


        :param experimentation_id: The experimentation_id of this V1MagicLinkLoginRequest.  # noqa: E501
        :type: str
        """

        self._experimentation_id = experimentation_id

    @property
    def invite_code(self) -> 'str':
        """Gets the invite_code of this V1MagicLinkLoginRequest.  # noqa: E501


        :return: The invite_code of this V1MagicLinkLoginRequest.  # noqa: E501
        :rtype: str
        """
        return self._invite_code

    @invite_code.setter
    def invite_code(self, invite_code: 'str'):
        """Sets the invite_code of this V1MagicLinkLoginRequest.


        :param invite_code: The invite_code of this V1MagicLinkLoginRequest.  # noqa: E501
        :type: str
        """

        self._invite_code = invite_code

    @property
    def redirect_url(self) -> 'str':
        """Gets the redirect_url of this V1MagicLinkLoginRequest.  # noqa: E501


        :return: The redirect_url of this V1MagicLinkLoginRequest.  # noqa: E501
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url: 'str'):
        """Sets the redirect_url of this V1MagicLinkLoginRequest.


        :param redirect_url: The redirect_url of this V1MagicLinkLoginRequest.  # noqa: E501
        :type: str
        """

        self._redirect_url = redirect_url

    @property
    def referrer_params(self) -> 'str':
        """Gets the referrer_params of this V1MagicLinkLoginRequest.  # noqa: E501


        :return: The referrer_params of this V1MagicLinkLoginRequest.  # noqa: E501
        :rtype: str
        """
        return self._referrer_params

    @referrer_params.setter
    def referrer_params(self, referrer_params: 'str'):
        """Sets the referrer_params of this V1MagicLinkLoginRequest.


        :param referrer_params: The referrer_params of this V1MagicLinkLoginRequest.  # noqa: E501
        :type: str
        """

        self._referrer_params = referrer_params

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1MagicLinkLoginRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1MagicLinkLoginRequest') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1MagicLinkLoginRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1MagicLinkLoginRequest') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
