# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class OrgsIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alerts_config': 'V1AlertsConfig',
        'allow_budgeting': 'bool',
        'allow_cloud_space_publish': 'bool',
        'allow_credits_auto_replenish': 'bool',
        'allow_external_project_duplication': 'bool',
        'allow_guest': 'bool',
        'allow_marketplace': 'bool',
        'allow_member_invitations': 'bool',
        'allow_member_teamspace_creation': 'bool',
        'auto_invite_by_domain': 'bool',
        'auto_join_domains': 'list[str]',
        'auto_replenish_amount': 'float',
        'auto_replenish_threshold': 'float',
        'auto_switch_machine': 'bool',
        'default_machine_type': 'str',
        'default_project_id': 'str',
        'description': 'str',
        'disallow_aws_saas': 'bool',
        'disallow_dgx_saas': 'bool',
        'disallow_gcp_saas': 'bool',
        'disallow_lambda_saas': 'bool',
        'disallow_lightning_saas': 'bool',
        'disallow_nebius_saas': 'bool',
        'disallow_voltage_park_saas': 'bool',
        'disallow_vultr_saas': 'bool',
        'display_name': 'str',
        'domain': 'str',
        'email': 'str',
        'featured_gallery': 'bool',
        'location': 'str',
        'preferred_cluster': 'str',
        'preferred_deployment_provider': 'str',
        'preferred_studio_provider': 'str',
        'show_model_apis_tab': 'bool',
        'start_studios_on_spot_instance': 'bool',
        'switch_to_default_machine_on_idle': 'bool',
        'teamspace_default_credits': 'float',
        'twitter_username': 'str',
        'workload_max_run_duration': 'str'
    }

    attribute_map = {
        'alerts_config': 'alertsConfig',
        'allow_budgeting': 'allowBudgeting',
        'allow_cloud_space_publish': 'allowCloudSpacePublish',
        'allow_credits_auto_replenish': 'allowCreditsAutoReplenish',
        'allow_external_project_duplication': 'allowExternalProjectDuplication',
        'allow_guest': 'allowGuest',
        'allow_marketplace': 'allowMarketplace',
        'allow_member_invitations': 'allowMemberInvitations',
        'allow_member_teamspace_creation': 'allowMemberTeamspaceCreation',
        'auto_invite_by_domain': 'autoInviteByDomain',
        'auto_join_domains': 'autoJoinDomains',
        'auto_replenish_amount': 'autoReplenishAmount',
        'auto_replenish_threshold': 'autoReplenishThreshold',
        'auto_switch_machine': 'autoSwitchMachine',
        'default_machine_type': 'defaultMachineType',
        'default_project_id': 'defaultProjectId',
        'description': 'description',
        'disallow_aws_saas': 'disallowAwsSaas',
        'disallow_dgx_saas': 'disallowDgxSaas',
        'disallow_gcp_saas': 'disallowGcpSaas',
        'disallow_lambda_saas': 'disallowLambdaSaas',
        'disallow_lightning_saas': 'disallowLightningSaas',
        'disallow_nebius_saas': 'disallowNebiusSaas',
        'disallow_voltage_park_saas': 'disallowVoltageParkSaas',
        'disallow_vultr_saas': 'disallowVultrSaas',
        'display_name': 'displayName',
        'domain': 'domain',
        'email': 'email',
        'featured_gallery': 'featuredGallery',
        'location': 'location',
        'preferred_cluster': 'preferredCluster',
        'preferred_deployment_provider': 'preferredDeploymentProvider',
        'preferred_studio_provider': 'preferredStudioProvider',
        'show_model_apis_tab': 'showModelApisTab',
        'start_studios_on_spot_instance': 'startStudiosOnSpotInstance',
        'switch_to_default_machine_on_idle': 'switchToDefaultMachineOnIdle',
        'teamspace_default_credits': 'teamspaceDefaultCredits',
        'twitter_username': 'twitterUsername',
        'workload_max_run_duration': 'workloadMaxRunDuration'
    }

    def __init__(self, alerts_config: 'V1AlertsConfig' =None, allow_budgeting: 'bool' =None, allow_cloud_space_publish: 'bool' =None, allow_credits_auto_replenish: 'bool' =None, allow_external_project_duplication: 'bool' =None, allow_guest: 'bool' =None, allow_marketplace: 'bool' =None, allow_member_invitations: 'bool' =None, allow_member_teamspace_creation: 'bool' =None, auto_invite_by_domain: 'bool' =None, auto_join_domains: 'list[str]' =None, auto_replenish_amount: 'float' =None, auto_replenish_threshold: 'float' =None, auto_switch_machine: 'bool' =None, default_machine_type: 'str' =None, default_project_id: 'str' =None, description: 'str' =None, disallow_aws_saas: 'bool' =None, disallow_dgx_saas: 'bool' =None, disallow_gcp_saas: 'bool' =None, disallow_lambda_saas: 'bool' =None, disallow_lightning_saas: 'bool' =None, disallow_nebius_saas: 'bool' =None, disallow_voltage_park_saas: 'bool' =None, disallow_vultr_saas: 'bool' =None, display_name: 'str' =None, domain: 'str' =None, email: 'str' =None, featured_gallery: 'bool' =None, location: 'str' =None, preferred_cluster: 'str' =None, preferred_deployment_provider: 'str' =None, preferred_studio_provider: 'str' =None, show_model_apis_tab: 'bool' =None, start_studios_on_spot_instance: 'bool' =None, switch_to_default_machine_on_idle: 'bool' =None, teamspace_default_credits: 'float' =None, twitter_username: 'str' =None, workload_max_run_duration: 'str' =None):  # noqa: E501
        """OrgsIdBody - a model defined in Swagger"""  # noqa: E501
        self._alerts_config = None
        self._allow_budgeting = None
        self._allow_cloud_space_publish = None
        self._allow_credits_auto_replenish = None
        self._allow_external_project_duplication = None
        self._allow_guest = None
        self._allow_marketplace = None
        self._allow_member_invitations = None
        self._allow_member_teamspace_creation = None
        self._auto_invite_by_domain = None
        self._auto_join_domains = None
        self._auto_replenish_amount = None
        self._auto_replenish_threshold = None
        self._auto_switch_machine = None
        self._default_machine_type = None
        self._default_project_id = None
        self._description = None
        self._disallow_aws_saas = None
        self._disallow_dgx_saas = None
        self._disallow_gcp_saas = None
        self._disallow_lambda_saas = None
        self._disallow_lightning_saas = None
        self._disallow_nebius_saas = None
        self._disallow_voltage_park_saas = None
        self._disallow_vultr_saas = None
        self._display_name = None
        self._domain = None
        self._email = None
        self._featured_gallery = None
        self._location = None
        self._preferred_cluster = None
        self._preferred_deployment_provider = None
        self._preferred_studio_provider = None
        self._show_model_apis_tab = None
        self._start_studios_on_spot_instance = None
        self._switch_to_default_machine_on_idle = None
        self._teamspace_default_credits = None
        self._twitter_username = None
        self._workload_max_run_duration = None
        self.discriminator = None
        if alerts_config is not None:
            self.alerts_config = alerts_config
        if allow_budgeting is not None:
            self.allow_budgeting = allow_budgeting
        if allow_cloud_space_publish is not None:
            self.allow_cloud_space_publish = allow_cloud_space_publish
        if allow_credits_auto_replenish is not None:
            self.allow_credits_auto_replenish = allow_credits_auto_replenish
        if allow_external_project_duplication is not None:
            self.allow_external_project_duplication = allow_external_project_duplication
        if allow_guest is not None:
            self.allow_guest = allow_guest
        if allow_marketplace is not None:
            self.allow_marketplace = allow_marketplace
        if allow_member_invitations is not None:
            self.allow_member_invitations = allow_member_invitations
        if allow_member_teamspace_creation is not None:
            self.allow_member_teamspace_creation = allow_member_teamspace_creation
        if auto_invite_by_domain is not None:
            self.auto_invite_by_domain = auto_invite_by_domain
        if auto_join_domains is not None:
            self.auto_join_domains = auto_join_domains
        if auto_replenish_amount is not None:
            self.auto_replenish_amount = auto_replenish_amount
        if auto_replenish_threshold is not None:
            self.auto_replenish_threshold = auto_replenish_threshold
        if auto_switch_machine is not None:
            self.auto_switch_machine = auto_switch_machine
        if default_machine_type is not None:
            self.default_machine_type = default_machine_type
        if default_project_id is not None:
            self.default_project_id = default_project_id
        if description is not None:
            self.description = description
        if disallow_aws_saas is not None:
            self.disallow_aws_saas = disallow_aws_saas
        if disallow_dgx_saas is not None:
            self.disallow_dgx_saas = disallow_dgx_saas
        if disallow_gcp_saas is not None:
            self.disallow_gcp_saas = disallow_gcp_saas
        if disallow_lambda_saas is not None:
            self.disallow_lambda_saas = disallow_lambda_saas
        if disallow_lightning_saas is not None:
            self.disallow_lightning_saas = disallow_lightning_saas
        if disallow_nebius_saas is not None:
            self.disallow_nebius_saas = disallow_nebius_saas
        if disallow_voltage_park_saas is not None:
            self.disallow_voltage_park_saas = disallow_voltage_park_saas
        if disallow_vultr_saas is not None:
            self.disallow_vultr_saas = disallow_vultr_saas
        if display_name is not None:
            self.display_name = display_name
        if domain is not None:
            self.domain = domain
        if email is not None:
            self.email = email
        if featured_gallery is not None:
            self.featured_gallery = featured_gallery
        if location is not None:
            self.location = location
        if preferred_cluster is not None:
            self.preferred_cluster = preferred_cluster
        if preferred_deployment_provider is not None:
            self.preferred_deployment_provider = preferred_deployment_provider
        if preferred_studio_provider is not None:
            self.preferred_studio_provider = preferred_studio_provider
        if show_model_apis_tab is not None:
            self.show_model_apis_tab = show_model_apis_tab
        if start_studios_on_spot_instance is not None:
            self.start_studios_on_spot_instance = start_studios_on_spot_instance
        if switch_to_default_machine_on_idle is not None:
            self.switch_to_default_machine_on_idle = switch_to_default_machine_on_idle
        if teamspace_default_credits is not None:
            self.teamspace_default_credits = teamspace_default_credits
        if twitter_username is not None:
            self.twitter_username = twitter_username
        if workload_max_run_duration is not None:
            self.workload_max_run_duration = workload_max_run_duration

    @property
    def alerts_config(self) -> 'V1AlertsConfig':
        """Gets the alerts_config of this OrgsIdBody.  # noqa: E501


        :return: The alerts_config of this OrgsIdBody.  # noqa: E501
        :rtype: V1AlertsConfig
        """
        return self._alerts_config

    @alerts_config.setter
    def alerts_config(self, alerts_config: 'V1AlertsConfig'):
        """Sets the alerts_config of this OrgsIdBody.


        :param alerts_config: The alerts_config of this OrgsIdBody.  # noqa: E501
        :type: V1AlertsConfig
        """

        self._alerts_config = alerts_config

    @property
    def allow_budgeting(self) -> 'bool':
        """Gets the allow_budgeting of this OrgsIdBody.  # noqa: E501


        :return: The allow_budgeting of this OrgsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._allow_budgeting

    @allow_budgeting.setter
    def allow_budgeting(self, allow_budgeting: 'bool'):
        """Sets the allow_budgeting of this OrgsIdBody.


        :param allow_budgeting: The allow_budgeting of this OrgsIdBody.  # noqa: E501
        :type: bool
        """

        self._allow_budgeting = allow_budgeting

    @property
    def allow_cloud_space_publish(self) -> 'bool':
        """Gets the allow_cloud_space_publish of this OrgsIdBody.  # noqa: E501


        :return: The allow_cloud_space_publish of this OrgsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._allow_cloud_space_publish

    @allow_cloud_space_publish.setter
    def allow_cloud_space_publish(self, allow_cloud_space_publish: 'bool'):
        """Sets the allow_cloud_space_publish of this OrgsIdBody.


        :param allow_cloud_space_publish: The allow_cloud_space_publish of this OrgsIdBody.  # noqa: E501
        :type: bool
        """

        self._allow_cloud_space_publish = allow_cloud_space_publish

    @property
    def allow_credits_auto_replenish(self) -> 'bool':
        """Gets the allow_credits_auto_replenish of this OrgsIdBody.  # noqa: E501


        :return: The allow_credits_auto_replenish of this OrgsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._allow_credits_auto_replenish

    @allow_credits_auto_replenish.setter
    def allow_credits_auto_replenish(self, allow_credits_auto_replenish: 'bool'):
        """Sets the allow_credits_auto_replenish of this OrgsIdBody.


        :param allow_credits_auto_replenish: The allow_credits_auto_replenish of this OrgsIdBody.  # noqa: E501
        :type: bool
        """

        self._allow_credits_auto_replenish = allow_credits_auto_replenish

    @property
    def allow_external_project_duplication(self) -> 'bool':
        """Gets the allow_external_project_duplication of this OrgsIdBody.  # noqa: E501


        :return: The allow_external_project_duplication of this OrgsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._allow_external_project_duplication

    @allow_external_project_duplication.setter
    def allow_external_project_duplication(self, allow_external_project_duplication: 'bool'):
        """Sets the allow_external_project_duplication of this OrgsIdBody.


        :param allow_external_project_duplication: The allow_external_project_duplication of this OrgsIdBody.  # noqa: E501
        :type: bool
        """

        self._allow_external_project_duplication = allow_external_project_duplication

    @property
    def allow_guest(self) -> 'bool':
        """Gets the allow_guest of this OrgsIdBody.  # noqa: E501


        :return: The allow_guest of this OrgsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._allow_guest

    @allow_guest.setter
    def allow_guest(self, allow_guest: 'bool'):
        """Sets the allow_guest of this OrgsIdBody.


        :param allow_guest: The allow_guest of this OrgsIdBody.  # noqa: E501
        :type: bool
        """

        self._allow_guest = allow_guest

    @property
    def allow_marketplace(self) -> 'bool':
        """Gets the allow_marketplace of this OrgsIdBody.  # noqa: E501


        :return: The allow_marketplace of this OrgsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._allow_marketplace

    @allow_marketplace.setter
    def allow_marketplace(self, allow_marketplace: 'bool'):
        """Sets the allow_marketplace of this OrgsIdBody.


        :param allow_marketplace: The allow_marketplace of this OrgsIdBody.  # noqa: E501
        :type: bool
        """

        self._allow_marketplace = allow_marketplace

    @property
    def allow_member_invitations(self) -> 'bool':
        """Gets the allow_member_invitations of this OrgsIdBody.  # noqa: E501


        :return: The allow_member_invitations of this OrgsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._allow_member_invitations

    @allow_member_invitations.setter
    def allow_member_invitations(self, allow_member_invitations: 'bool'):
        """Sets the allow_member_invitations of this OrgsIdBody.


        :param allow_member_invitations: The allow_member_invitations of this OrgsIdBody.  # noqa: E501
        :type: bool
        """

        self._allow_member_invitations = allow_member_invitations

    @property
    def allow_member_teamspace_creation(self) -> 'bool':
        """Gets the allow_member_teamspace_creation of this OrgsIdBody.  # noqa: E501


        :return: The allow_member_teamspace_creation of this OrgsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._allow_member_teamspace_creation

    @allow_member_teamspace_creation.setter
    def allow_member_teamspace_creation(self, allow_member_teamspace_creation: 'bool'):
        """Sets the allow_member_teamspace_creation of this OrgsIdBody.


        :param allow_member_teamspace_creation: The allow_member_teamspace_creation of this OrgsIdBody.  # noqa: E501
        :type: bool
        """

        self._allow_member_teamspace_creation = allow_member_teamspace_creation

    @property
    def auto_invite_by_domain(self) -> 'bool':
        """Gets the auto_invite_by_domain of this OrgsIdBody.  # noqa: E501


        :return: The auto_invite_by_domain of this OrgsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._auto_invite_by_domain

    @auto_invite_by_domain.setter
    def auto_invite_by_domain(self, auto_invite_by_domain: 'bool'):
        """Sets the auto_invite_by_domain of this OrgsIdBody.


        :param auto_invite_by_domain: The auto_invite_by_domain of this OrgsIdBody.  # noqa: E501
        :type: bool
        """

        self._auto_invite_by_domain = auto_invite_by_domain

    @property
    def auto_join_domains(self) -> 'list[str]':
        """Gets the auto_join_domains of this OrgsIdBody.  # noqa: E501


        :return: The auto_join_domains of this OrgsIdBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._auto_join_domains

    @auto_join_domains.setter
    def auto_join_domains(self, auto_join_domains: 'list[str]'):
        """Sets the auto_join_domains of this OrgsIdBody.


        :param auto_join_domains: The auto_join_domains of this OrgsIdBody.  # noqa: E501
        :type: list[str]
        """

        self._auto_join_domains = auto_join_domains

    @property
    def auto_replenish_amount(self) -> 'float':
        """Gets the auto_replenish_amount of this OrgsIdBody.  # noqa: E501


        :return: The auto_replenish_amount of this OrgsIdBody.  # noqa: E501
        :rtype: float
        """
        return self._auto_replenish_amount

    @auto_replenish_amount.setter
    def auto_replenish_amount(self, auto_replenish_amount: 'float'):
        """Sets the auto_replenish_amount of this OrgsIdBody.


        :param auto_replenish_amount: The auto_replenish_amount of this OrgsIdBody.  # noqa: E501
        :type: float
        """

        self._auto_replenish_amount = auto_replenish_amount

    @property
    def auto_replenish_threshold(self) -> 'float':
        """Gets the auto_replenish_threshold of this OrgsIdBody.  # noqa: E501


        :return: The auto_replenish_threshold of this OrgsIdBody.  # noqa: E501
        :rtype: float
        """
        return self._auto_replenish_threshold

    @auto_replenish_threshold.setter
    def auto_replenish_threshold(self, auto_replenish_threshold: 'float'):
        """Sets the auto_replenish_threshold of this OrgsIdBody.


        :param auto_replenish_threshold: The auto_replenish_threshold of this OrgsIdBody.  # noqa: E501
        :type: float
        """

        self._auto_replenish_threshold = auto_replenish_threshold

    @property
    def auto_switch_machine(self) -> 'bool':
        """Gets the auto_switch_machine of this OrgsIdBody.  # noqa: E501


        :return: The auto_switch_machine of this OrgsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._auto_switch_machine

    @auto_switch_machine.setter
    def auto_switch_machine(self, auto_switch_machine: 'bool'):
        """Sets the auto_switch_machine of this OrgsIdBody.


        :param auto_switch_machine: The auto_switch_machine of this OrgsIdBody.  # noqa: E501
        :type: bool
        """

        self._auto_switch_machine = auto_switch_machine

    @property
    def default_machine_type(self) -> 'str':
        """Gets the default_machine_type of this OrgsIdBody.  # noqa: E501


        :return: The default_machine_type of this OrgsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._default_machine_type

    @default_machine_type.setter
    def default_machine_type(self, default_machine_type: 'str'):
        """Sets the default_machine_type of this OrgsIdBody.


        :param default_machine_type: The default_machine_type of this OrgsIdBody.  # noqa: E501
        :type: str
        """

        self._default_machine_type = default_machine_type

    @property
    def default_project_id(self) -> 'str':
        """Gets the default_project_id of this OrgsIdBody.  # noqa: E501


        :return: The default_project_id of this OrgsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._default_project_id

    @default_project_id.setter
    def default_project_id(self, default_project_id: 'str'):
        """Sets the default_project_id of this OrgsIdBody.


        :param default_project_id: The default_project_id of this OrgsIdBody.  # noqa: E501
        :type: str
        """

        self._default_project_id = default_project_id

    @property
    def description(self) -> 'str':
        """Gets the description of this OrgsIdBody.  # noqa: E501


        :return: The description of this OrgsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: 'str'):
        """Sets the description of this OrgsIdBody.


        :param description: The description of this OrgsIdBody.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def disallow_aws_saas(self) -> 'bool':
        """Gets the disallow_aws_saas of this OrgsIdBody.  # noqa: E501


        :return: The disallow_aws_saas of this OrgsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._disallow_aws_saas

    @disallow_aws_saas.setter
    def disallow_aws_saas(self, disallow_aws_saas: 'bool'):
        """Sets the disallow_aws_saas of this OrgsIdBody.


        :param disallow_aws_saas: The disallow_aws_saas of this OrgsIdBody.  # noqa: E501
        :type: bool
        """

        self._disallow_aws_saas = disallow_aws_saas

    @property
    def disallow_dgx_saas(self) -> 'bool':
        """Gets the disallow_dgx_saas of this OrgsIdBody.  # noqa: E501


        :return: The disallow_dgx_saas of this OrgsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._disallow_dgx_saas

    @disallow_dgx_saas.setter
    def disallow_dgx_saas(self, disallow_dgx_saas: 'bool'):
        """Sets the disallow_dgx_saas of this OrgsIdBody.


        :param disallow_dgx_saas: The disallow_dgx_saas of this OrgsIdBody.  # noqa: E501
        :type: bool
        """

        self._disallow_dgx_saas = disallow_dgx_saas

    @property
    def disallow_gcp_saas(self) -> 'bool':
        """Gets the disallow_gcp_saas of this OrgsIdBody.  # noqa: E501


        :return: The disallow_gcp_saas of this OrgsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._disallow_gcp_saas

    @disallow_gcp_saas.setter
    def disallow_gcp_saas(self, disallow_gcp_saas: 'bool'):
        """Sets the disallow_gcp_saas of this OrgsIdBody.


        :param disallow_gcp_saas: The disallow_gcp_saas of this OrgsIdBody.  # noqa: E501
        :type: bool
        """

        self._disallow_gcp_saas = disallow_gcp_saas

    @property
    def disallow_lambda_saas(self) -> 'bool':
        """Gets the disallow_lambda_saas of this OrgsIdBody.  # noqa: E501


        :return: The disallow_lambda_saas of this OrgsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._disallow_lambda_saas

    @disallow_lambda_saas.setter
    def disallow_lambda_saas(self, disallow_lambda_saas: 'bool'):
        """Sets the disallow_lambda_saas of this OrgsIdBody.


        :param disallow_lambda_saas: The disallow_lambda_saas of this OrgsIdBody.  # noqa: E501
        :type: bool
        """

        self._disallow_lambda_saas = disallow_lambda_saas

    @property
    def disallow_lightning_saas(self) -> 'bool':
        """Gets the disallow_lightning_saas of this OrgsIdBody.  # noqa: E501


        :return: The disallow_lightning_saas of this OrgsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._disallow_lightning_saas

    @disallow_lightning_saas.setter
    def disallow_lightning_saas(self, disallow_lightning_saas: 'bool'):
        """Sets the disallow_lightning_saas of this OrgsIdBody.


        :param disallow_lightning_saas: The disallow_lightning_saas of this OrgsIdBody.  # noqa: E501
        :type: bool
        """

        self._disallow_lightning_saas = disallow_lightning_saas

    @property
    def disallow_nebius_saas(self) -> 'bool':
        """Gets the disallow_nebius_saas of this OrgsIdBody.  # noqa: E501


        :return: The disallow_nebius_saas of this OrgsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._disallow_nebius_saas

    @disallow_nebius_saas.setter
    def disallow_nebius_saas(self, disallow_nebius_saas: 'bool'):
        """Sets the disallow_nebius_saas of this OrgsIdBody.


        :param disallow_nebius_saas: The disallow_nebius_saas of this OrgsIdBody.  # noqa: E501
        :type: bool
        """

        self._disallow_nebius_saas = disallow_nebius_saas

    @property
    def disallow_voltage_park_saas(self) -> 'bool':
        """Gets the disallow_voltage_park_saas of this OrgsIdBody.  # noqa: E501


        :return: The disallow_voltage_park_saas of this OrgsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._disallow_voltage_park_saas

    @disallow_voltage_park_saas.setter
    def disallow_voltage_park_saas(self, disallow_voltage_park_saas: 'bool'):
        """Sets the disallow_voltage_park_saas of this OrgsIdBody.


        :param disallow_voltage_park_saas: The disallow_voltage_park_saas of this OrgsIdBody.  # noqa: E501
        :type: bool
        """

        self._disallow_voltage_park_saas = disallow_voltage_park_saas

    @property
    def disallow_vultr_saas(self) -> 'bool':
        """Gets the disallow_vultr_saas of this OrgsIdBody.  # noqa: E501


        :return: The disallow_vultr_saas of this OrgsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._disallow_vultr_saas

    @disallow_vultr_saas.setter
    def disallow_vultr_saas(self, disallow_vultr_saas: 'bool'):
        """Sets the disallow_vultr_saas of this OrgsIdBody.


        :param disallow_vultr_saas: The disallow_vultr_saas of this OrgsIdBody.  # noqa: E501
        :type: bool
        """

        self._disallow_vultr_saas = disallow_vultr_saas

    @property
    def display_name(self) -> 'str':
        """Gets the display_name of this OrgsIdBody.  # noqa: E501


        :return: The display_name of this OrgsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: 'str'):
        """Sets the display_name of this OrgsIdBody.


        :param display_name: The display_name of this OrgsIdBody.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def domain(self) -> 'str':
        """Gets the domain of this OrgsIdBody.  # noqa: E501


        :return: The domain of this OrgsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain: 'str'):
        """Sets the domain of this OrgsIdBody.


        :param domain: The domain of this OrgsIdBody.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def email(self) -> 'str':
        """Gets the email of this OrgsIdBody.  # noqa: E501


        :return: The email of this OrgsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: 'str'):
        """Sets the email of this OrgsIdBody.


        :param email: The email of this OrgsIdBody.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def featured_gallery(self) -> 'bool':
        """Gets the featured_gallery of this OrgsIdBody.  # noqa: E501


        :return: The featured_gallery of this OrgsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._featured_gallery

    @featured_gallery.setter
    def featured_gallery(self, featured_gallery: 'bool'):
        """Sets the featured_gallery of this OrgsIdBody.


        :param featured_gallery: The featured_gallery of this OrgsIdBody.  # noqa: E501
        :type: bool
        """

        self._featured_gallery = featured_gallery

    @property
    def location(self) -> 'str':
        """Gets the location of this OrgsIdBody.  # noqa: E501


        :return: The location of this OrgsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location: 'str'):
        """Sets the location of this OrgsIdBody.


        :param location: The location of this OrgsIdBody.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def preferred_cluster(self) -> 'str':
        """Gets the preferred_cluster of this OrgsIdBody.  # noqa: E501


        :return: The preferred_cluster of this OrgsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._preferred_cluster

    @preferred_cluster.setter
    def preferred_cluster(self, preferred_cluster: 'str'):
        """Sets the preferred_cluster of this OrgsIdBody.


        :param preferred_cluster: The preferred_cluster of this OrgsIdBody.  # noqa: E501
        :type: str
        """

        self._preferred_cluster = preferred_cluster

    @property
    def preferred_deployment_provider(self) -> 'str':
        """Gets the preferred_deployment_provider of this OrgsIdBody.  # noqa: E501


        :return: The preferred_deployment_provider of this OrgsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._preferred_deployment_provider

    @preferred_deployment_provider.setter
    def preferred_deployment_provider(self, preferred_deployment_provider: 'str'):
        """Sets the preferred_deployment_provider of this OrgsIdBody.


        :param preferred_deployment_provider: The preferred_deployment_provider of this OrgsIdBody.  # noqa: E501
        :type: str
        """

        self._preferred_deployment_provider = preferred_deployment_provider

    @property
    def preferred_studio_provider(self) -> 'str':
        """Gets the preferred_studio_provider of this OrgsIdBody.  # noqa: E501


        :return: The preferred_studio_provider of this OrgsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._preferred_studio_provider

    @preferred_studio_provider.setter
    def preferred_studio_provider(self, preferred_studio_provider: 'str'):
        """Sets the preferred_studio_provider of this OrgsIdBody.


        :param preferred_studio_provider: The preferred_studio_provider of this OrgsIdBody.  # noqa: E501
        :type: str
        """

        self._preferred_studio_provider = preferred_studio_provider

    @property
    def show_model_apis_tab(self) -> 'bool':
        """Gets the show_model_apis_tab of this OrgsIdBody.  # noqa: E501


        :return: The show_model_apis_tab of this OrgsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._show_model_apis_tab

    @show_model_apis_tab.setter
    def show_model_apis_tab(self, show_model_apis_tab: 'bool'):
        """Sets the show_model_apis_tab of this OrgsIdBody.


        :param show_model_apis_tab: The show_model_apis_tab of this OrgsIdBody.  # noqa: E501
        :type: bool
        """

        self._show_model_apis_tab = show_model_apis_tab

    @property
    def start_studios_on_spot_instance(self) -> 'bool':
        """Gets the start_studios_on_spot_instance of this OrgsIdBody.  # noqa: E501


        :return: The start_studios_on_spot_instance of this OrgsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._start_studios_on_spot_instance

    @start_studios_on_spot_instance.setter
    def start_studios_on_spot_instance(self, start_studios_on_spot_instance: 'bool'):
        """Sets the start_studios_on_spot_instance of this OrgsIdBody.


        :param start_studios_on_spot_instance: The start_studios_on_spot_instance of this OrgsIdBody.  # noqa: E501
        :type: bool
        """

        self._start_studios_on_spot_instance = start_studios_on_spot_instance

    @property
    def switch_to_default_machine_on_idle(self) -> 'bool':
        """Gets the switch_to_default_machine_on_idle of this OrgsIdBody.  # noqa: E501


        :return: The switch_to_default_machine_on_idle of this OrgsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._switch_to_default_machine_on_idle

    @switch_to_default_machine_on_idle.setter
    def switch_to_default_machine_on_idle(self, switch_to_default_machine_on_idle: 'bool'):
        """Sets the switch_to_default_machine_on_idle of this OrgsIdBody.


        :param switch_to_default_machine_on_idle: The switch_to_default_machine_on_idle of this OrgsIdBody.  # noqa: E501
        :type: bool
        """

        self._switch_to_default_machine_on_idle = switch_to_default_machine_on_idle

    @property
    def teamspace_default_credits(self) -> 'float':
        """Gets the teamspace_default_credits of this OrgsIdBody.  # noqa: E501


        :return: The teamspace_default_credits of this OrgsIdBody.  # noqa: E501
        :rtype: float
        """
        return self._teamspace_default_credits

    @teamspace_default_credits.setter
    def teamspace_default_credits(self, teamspace_default_credits: 'float'):
        """Sets the teamspace_default_credits of this OrgsIdBody.


        :param teamspace_default_credits: The teamspace_default_credits of this OrgsIdBody.  # noqa: E501
        :type: float
        """

        self._teamspace_default_credits = teamspace_default_credits

    @property
    def twitter_username(self) -> 'str':
        """Gets the twitter_username of this OrgsIdBody.  # noqa: E501


        :return: The twitter_username of this OrgsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._twitter_username

    @twitter_username.setter
    def twitter_username(self, twitter_username: 'str'):
        """Sets the twitter_username of this OrgsIdBody.


        :param twitter_username: The twitter_username of this OrgsIdBody.  # noqa: E501
        :type: str
        """

        self._twitter_username = twitter_username

    @property
    def workload_max_run_duration(self) -> 'str':
        """Gets the workload_max_run_duration of this OrgsIdBody.  # noqa: E501


        :return: The workload_max_run_duration of this OrgsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._workload_max_run_duration

    @workload_max_run_duration.setter
    def workload_max_run_duration(self, workload_max_run_duration: 'str'):
        """Sets the workload_max_run_duration of this OrgsIdBody.


        :param workload_max_run_duration: The workload_max_run_duration of this OrgsIdBody.  # noqa: E501
        :type: str
        """

        self._workload_max_run_duration = workload_max_run_duration

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrgsIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'OrgsIdBody') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgsIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'OrgsIdBody') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
