# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1NodeMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu_capacity_cores': 'float',
        'cpu_util': 'float',
        'filesystem': 'dict(str, V1FilesystemMetrics)',
        'max_gpu_temp_recorded': 'float',
        'max_power_per_gpu': 'float',
        'mem_total': 'str',
        'mem_util': 'float',
        'node_name': 'str',
        'num_unschedulable_gpus': 'int',
        'nvlink_rx_gib': 'dict(str, float)',
        'nvlink_tx_gib': 'dict(str, float)',
        'pcie_rx_gib': 'dict(str, float)',
        'pcie_tx_gib': 'dict(str, float)',
        'per_gpu_errors': 'dict(str, int)',
        'per_gpu_mem_free': 'dict(str, int)',
        'per_gpu_mem_used': 'dict(str, int)',
        'per_gpu_power_usage_watts': 'dict(str, int)',
        'per_gpu_sm_active': 'dict(str, float)',
        'per_gpu_sm_occupancy': 'dict(str, float)',
        'per_gpu_temperature_c': 'dict(str, int)',
        'per_gpu_util': 'dict(str, float)',
        'timestamp': 'datetime',
        'unschedulable': 'bool'
    }

    attribute_map = {
        'cpu_capacity_cores': 'cpuCapacityCores',
        'cpu_util': 'cpuUtil',
        'filesystem': 'filesystem',
        'max_gpu_temp_recorded': 'maxGpuTempRecorded',
        'max_power_per_gpu': 'maxPowerPerGpu',
        'mem_total': 'memTotal',
        'mem_util': 'memUtil',
        'node_name': 'nodeName',
        'num_unschedulable_gpus': 'numUnschedulableGpus',
        'nvlink_rx_gib': 'nvlinkRxGib',
        'nvlink_tx_gib': 'nvlinkTxGib',
        'pcie_rx_gib': 'pcieRxGib',
        'pcie_tx_gib': 'pcieTxGib',
        'per_gpu_errors': 'perGpuErrors',
        'per_gpu_mem_free': 'perGpuMemFree',
        'per_gpu_mem_used': 'perGpuMemUsed',
        'per_gpu_power_usage_watts': 'perGpuPowerUsageWatts',
        'per_gpu_sm_active': 'perGpuSmActive',
        'per_gpu_sm_occupancy': 'perGpuSmOccupancy',
        'per_gpu_temperature_c': 'perGpuTemperatureC',
        'per_gpu_util': 'perGpuUtil',
        'timestamp': 'timestamp',
        'unschedulable': 'unschedulable'
    }

    def __init__(self, cpu_capacity_cores: 'float' =None, cpu_util: 'float' =None, filesystem: 'dict(str, V1FilesystemMetrics)' =None, max_gpu_temp_recorded: 'float' =None, max_power_per_gpu: 'float' =None, mem_total: 'str' =None, mem_util: 'float' =None, node_name: 'str' =None, num_unschedulable_gpus: 'int' =None, nvlink_rx_gib: 'dict(str, float)' =None, nvlink_tx_gib: 'dict(str, float)' =None, pcie_rx_gib: 'dict(str, float)' =None, pcie_tx_gib: 'dict(str, float)' =None, per_gpu_errors: 'dict(str, int)' =None, per_gpu_mem_free: 'dict(str, int)' =None, per_gpu_mem_used: 'dict(str, int)' =None, per_gpu_power_usage_watts: 'dict(str, int)' =None, per_gpu_sm_active: 'dict(str, float)' =None, per_gpu_sm_occupancy: 'dict(str, float)' =None, per_gpu_temperature_c: 'dict(str, int)' =None, per_gpu_util: 'dict(str, float)' =None, timestamp: 'datetime' =None, unschedulable: 'bool' =None):  # noqa: E501
        """V1NodeMetrics - a model defined in Swagger"""  # noqa: E501
        self._cpu_capacity_cores = None
        self._cpu_util = None
        self._filesystem = None
        self._max_gpu_temp_recorded = None
        self._max_power_per_gpu = None
        self._mem_total = None
        self._mem_util = None
        self._node_name = None
        self._num_unschedulable_gpus = None
        self._nvlink_rx_gib = None
        self._nvlink_tx_gib = None
        self._pcie_rx_gib = None
        self._pcie_tx_gib = None
        self._per_gpu_errors = None
        self._per_gpu_mem_free = None
        self._per_gpu_mem_used = None
        self._per_gpu_power_usage_watts = None
        self._per_gpu_sm_active = None
        self._per_gpu_sm_occupancy = None
        self._per_gpu_temperature_c = None
        self._per_gpu_util = None
        self._timestamp = None
        self._unschedulable = None
        self.discriminator = None
        if cpu_capacity_cores is not None:
            self.cpu_capacity_cores = cpu_capacity_cores
        if cpu_util is not None:
            self.cpu_util = cpu_util
        if filesystem is not None:
            self.filesystem = filesystem
        if max_gpu_temp_recorded is not None:
            self.max_gpu_temp_recorded = max_gpu_temp_recorded
        if max_power_per_gpu is not None:
            self.max_power_per_gpu = max_power_per_gpu
        if mem_total is not None:
            self.mem_total = mem_total
        if mem_util is not None:
            self.mem_util = mem_util
        if node_name is not None:
            self.node_name = node_name
        if num_unschedulable_gpus is not None:
            self.num_unschedulable_gpus = num_unschedulable_gpus
        if nvlink_rx_gib is not None:
            self.nvlink_rx_gib = nvlink_rx_gib
        if nvlink_tx_gib is not None:
            self.nvlink_tx_gib = nvlink_tx_gib
        if pcie_rx_gib is not None:
            self.pcie_rx_gib = pcie_rx_gib
        if pcie_tx_gib is not None:
            self.pcie_tx_gib = pcie_tx_gib
        if per_gpu_errors is not None:
            self.per_gpu_errors = per_gpu_errors
        if per_gpu_mem_free is not None:
            self.per_gpu_mem_free = per_gpu_mem_free
        if per_gpu_mem_used is not None:
            self.per_gpu_mem_used = per_gpu_mem_used
        if per_gpu_power_usage_watts is not None:
            self.per_gpu_power_usage_watts = per_gpu_power_usage_watts
        if per_gpu_sm_active is not None:
            self.per_gpu_sm_active = per_gpu_sm_active
        if per_gpu_sm_occupancy is not None:
            self.per_gpu_sm_occupancy = per_gpu_sm_occupancy
        if per_gpu_temperature_c is not None:
            self.per_gpu_temperature_c = per_gpu_temperature_c
        if per_gpu_util is not None:
            self.per_gpu_util = per_gpu_util
        if timestamp is not None:
            self.timestamp = timestamp
        if unschedulable is not None:
            self.unschedulable = unschedulable

    @property
    def cpu_capacity_cores(self) -> 'float':
        """Gets the cpu_capacity_cores of this V1NodeMetrics.  # noqa: E501


        :return: The cpu_capacity_cores of this V1NodeMetrics.  # noqa: E501
        :rtype: float
        """
        return self._cpu_capacity_cores

    @cpu_capacity_cores.setter
    def cpu_capacity_cores(self, cpu_capacity_cores: 'float'):
        """Sets the cpu_capacity_cores of this V1NodeMetrics.


        :param cpu_capacity_cores: The cpu_capacity_cores of this V1NodeMetrics.  # noqa: E501
        :type: float
        """

        self._cpu_capacity_cores = cpu_capacity_cores

    @property
    def cpu_util(self) -> 'float':
        """Gets the cpu_util of this V1NodeMetrics.  # noqa: E501


        :return: The cpu_util of this V1NodeMetrics.  # noqa: E501
        :rtype: float
        """
        return self._cpu_util

    @cpu_util.setter
    def cpu_util(self, cpu_util: 'float'):
        """Sets the cpu_util of this V1NodeMetrics.


        :param cpu_util: The cpu_util of this V1NodeMetrics.  # noqa: E501
        :type: float
        """

        self._cpu_util = cpu_util

    @property
    def filesystem(self) -> 'dict(str, V1FilesystemMetrics)':
        """Gets the filesystem of this V1NodeMetrics.  # noqa: E501


        :return: The filesystem of this V1NodeMetrics.  # noqa: E501
        :rtype: dict(str, V1FilesystemMetrics)
        """
        return self._filesystem

    @filesystem.setter
    def filesystem(self, filesystem: 'dict(str, V1FilesystemMetrics)'):
        """Sets the filesystem of this V1NodeMetrics.


        :param filesystem: The filesystem of this V1NodeMetrics.  # noqa: E501
        :type: dict(str, V1FilesystemMetrics)
        """

        self._filesystem = filesystem

    @property
    def max_gpu_temp_recorded(self) -> 'float':
        """Gets the max_gpu_temp_recorded of this V1NodeMetrics.  # noqa: E501


        :return: The max_gpu_temp_recorded of this V1NodeMetrics.  # noqa: E501
        :rtype: float
        """
        return self._max_gpu_temp_recorded

    @max_gpu_temp_recorded.setter
    def max_gpu_temp_recorded(self, max_gpu_temp_recorded: 'float'):
        """Sets the max_gpu_temp_recorded of this V1NodeMetrics.


        :param max_gpu_temp_recorded: The max_gpu_temp_recorded of this V1NodeMetrics.  # noqa: E501
        :type: float
        """

        self._max_gpu_temp_recorded = max_gpu_temp_recorded

    @property
    def max_power_per_gpu(self) -> 'float':
        """Gets the max_power_per_gpu of this V1NodeMetrics.  # noqa: E501


        :return: The max_power_per_gpu of this V1NodeMetrics.  # noqa: E501
        :rtype: float
        """
        return self._max_power_per_gpu

    @max_power_per_gpu.setter
    def max_power_per_gpu(self, max_power_per_gpu: 'float'):
        """Sets the max_power_per_gpu of this V1NodeMetrics.


        :param max_power_per_gpu: The max_power_per_gpu of this V1NodeMetrics.  # noqa: E501
        :type: float
        """

        self._max_power_per_gpu = max_power_per_gpu

    @property
    def mem_total(self) -> 'str':
        """Gets the mem_total of this V1NodeMetrics.  # noqa: E501


        :return: The mem_total of this V1NodeMetrics.  # noqa: E501
        :rtype: str
        """
        return self._mem_total

    @mem_total.setter
    def mem_total(self, mem_total: 'str'):
        """Sets the mem_total of this V1NodeMetrics.


        :param mem_total: The mem_total of this V1NodeMetrics.  # noqa: E501
        :type: str
        """

        self._mem_total = mem_total

    @property
    def mem_util(self) -> 'float':
        """Gets the mem_util of this V1NodeMetrics.  # noqa: E501


        :return: The mem_util of this V1NodeMetrics.  # noqa: E501
        :rtype: float
        """
        return self._mem_util

    @mem_util.setter
    def mem_util(self, mem_util: 'float'):
        """Sets the mem_util of this V1NodeMetrics.


        :param mem_util: The mem_util of this V1NodeMetrics.  # noqa: E501
        :type: float
        """

        self._mem_util = mem_util

    @property
    def node_name(self) -> 'str':
        """Gets the node_name of this V1NodeMetrics.  # noqa: E501


        :return: The node_name of this V1NodeMetrics.  # noqa: E501
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name: 'str'):
        """Sets the node_name of this V1NodeMetrics.


        :param node_name: The node_name of this V1NodeMetrics.  # noqa: E501
        :type: str
        """

        self._node_name = node_name

    @property
    def num_unschedulable_gpus(self) -> 'int':
        """Gets the num_unschedulable_gpus of this V1NodeMetrics.  # noqa: E501


        :return: The num_unschedulable_gpus of this V1NodeMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_unschedulable_gpus

    @num_unschedulable_gpus.setter
    def num_unschedulable_gpus(self, num_unschedulable_gpus: 'int'):
        """Sets the num_unschedulable_gpus of this V1NodeMetrics.


        :param num_unschedulable_gpus: The num_unschedulable_gpus of this V1NodeMetrics.  # noqa: E501
        :type: int
        """

        self._num_unschedulable_gpus = num_unschedulable_gpus

    @property
    def nvlink_rx_gib(self) -> 'dict(str, float)':
        """Gets the nvlink_rx_gib of this V1NodeMetrics.  # noqa: E501


        :return: The nvlink_rx_gib of this V1NodeMetrics.  # noqa: E501
        :rtype: dict(str, float)
        """
        return self._nvlink_rx_gib

    @nvlink_rx_gib.setter
    def nvlink_rx_gib(self, nvlink_rx_gib: 'dict(str, float)'):
        """Sets the nvlink_rx_gib of this V1NodeMetrics.


        :param nvlink_rx_gib: The nvlink_rx_gib of this V1NodeMetrics.  # noqa: E501
        :type: dict(str, float)
        """

        self._nvlink_rx_gib = nvlink_rx_gib

    @property
    def nvlink_tx_gib(self) -> 'dict(str, float)':
        """Gets the nvlink_tx_gib of this V1NodeMetrics.  # noqa: E501


        :return: The nvlink_tx_gib of this V1NodeMetrics.  # noqa: E501
        :rtype: dict(str, float)
        """
        return self._nvlink_tx_gib

    @nvlink_tx_gib.setter
    def nvlink_tx_gib(self, nvlink_tx_gib: 'dict(str, float)'):
        """Sets the nvlink_tx_gib of this V1NodeMetrics.


        :param nvlink_tx_gib: The nvlink_tx_gib of this V1NodeMetrics.  # noqa: E501
        :type: dict(str, float)
        """

        self._nvlink_tx_gib = nvlink_tx_gib

    @property
    def pcie_rx_gib(self) -> 'dict(str, float)':
        """Gets the pcie_rx_gib of this V1NodeMetrics.  # noqa: E501


        :return: The pcie_rx_gib of this V1NodeMetrics.  # noqa: E501
        :rtype: dict(str, float)
        """
        return self._pcie_rx_gib

    @pcie_rx_gib.setter
    def pcie_rx_gib(self, pcie_rx_gib: 'dict(str, float)'):
        """Sets the pcie_rx_gib of this V1NodeMetrics.


        :param pcie_rx_gib: The pcie_rx_gib of this V1NodeMetrics.  # noqa: E501
        :type: dict(str, float)
        """

        self._pcie_rx_gib = pcie_rx_gib

    @property
    def pcie_tx_gib(self) -> 'dict(str, float)':
        """Gets the pcie_tx_gib of this V1NodeMetrics.  # noqa: E501


        :return: The pcie_tx_gib of this V1NodeMetrics.  # noqa: E501
        :rtype: dict(str, float)
        """
        return self._pcie_tx_gib

    @pcie_tx_gib.setter
    def pcie_tx_gib(self, pcie_tx_gib: 'dict(str, float)'):
        """Sets the pcie_tx_gib of this V1NodeMetrics.


        :param pcie_tx_gib: The pcie_tx_gib of this V1NodeMetrics.  # noqa: E501
        :type: dict(str, float)
        """

        self._pcie_tx_gib = pcie_tx_gib

    @property
    def per_gpu_errors(self) -> 'dict(str, int)':
        """Gets the per_gpu_errors of this V1NodeMetrics.  # noqa: E501


        :return: The per_gpu_errors of this V1NodeMetrics.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._per_gpu_errors

    @per_gpu_errors.setter
    def per_gpu_errors(self, per_gpu_errors: 'dict(str, int)'):
        """Sets the per_gpu_errors of this V1NodeMetrics.


        :param per_gpu_errors: The per_gpu_errors of this V1NodeMetrics.  # noqa: E501
        :type: dict(str, int)
        """

        self._per_gpu_errors = per_gpu_errors

    @property
    def per_gpu_mem_free(self) -> 'dict(str, int)':
        """Gets the per_gpu_mem_free of this V1NodeMetrics.  # noqa: E501


        :return: The per_gpu_mem_free of this V1NodeMetrics.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._per_gpu_mem_free

    @per_gpu_mem_free.setter
    def per_gpu_mem_free(self, per_gpu_mem_free: 'dict(str, int)'):
        """Sets the per_gpu_mem_free of this V1NodeMetrics.


        :param per_gpu_mem_free: The per_gpu_mem_free of this V1NodeMetrics.  # noqa: E501
        :type: dict(str, int)
        """

        self._per_gpu_mem_free = per_gpu_mem_free

    @property
    def per_gpu_mem_used(self) -> 'dict(str, int)':
        """Gets the per_gpu_mem_used of this V1NodeMetrics.  # noqa: E501


        :return: The per_gpu_mem_used of this V1NodeMetrics.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._per_gpu_mem_used

    @per_gpu_mem_used.setter
    def per_gpu_mem_used(self, per_gpu_mem_used: 'dict(str, int)'):
        """Sets the per_gpu_mem_used of this V1NodeMetrics.


        :param per_gpu_mem_used: The per_gpu_mem_used of this V1NodeMetrics.  # noqa: E501
        :type: dict(str, int)
        """

        self._per_gpu_mem_used = per_gpu_mem_used

    @property
    def per_gpu_power_usage_watts(self) -> 'dict(str, int)':
        """Gets the per_gpu_power_usage_watts of this V1NodeMetrics.  # noqa: E501


        :return: The per_gpu_power_usage_watts of this V1NodeMetrics.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._per_gpu_power_usage_watts

    @per_gpu_power_usage_watts.setter
    def per_gpu_power_usage_watts(self, per_gpu_power_usage_watts: 'dict(str, int)'):
        """Sets the per_gpu_power_usage_watts of this V1NodeMetrics.


        :param per_gpu_power_usage_watts: The per_gpu_power_usage_watts of this V1NodeMetrics.  # noqa: E501
        :type: dict(str, int)
        """

        self._per_gpu_power_usage_watts = per_gpu_power_usage_watts

    @property
    def per_gpu_sm_active(self) -> 'dict(str, float)':
        """Gets the per_gpu_sm_active of this V1NodeMetrics.  # noqa: E501


        :return: The per_gpu_sm_active of this V1NodeMetrics.  # noqa: E501
        :rtype: dict(str, float)
        """
        return self._per_gpu_sm_active

    @per_gpu_sm_active.setter
    def per_gpu_sm_active(self, per_gpu_sm_active: 'dict(str, float)'):
        """Sets the per_gpu_sm_active of this V1NodeMetrics.


        :param per_gpu_sm_active: The per_gpu_sm_active of this V1NodeMetrics.  # noqa: E501
        :type: dict(str, float)
        """

        self._per_gpu_sm_active = per_gpu_sm_active

    @property
    def per_gpu_sm_occupancy(self) -> 'dict(str, float)':
        """Gets the per_gpu_sm_occupancy of this V1NodeMetrics.  # noqa: E501


        :return: The per_gpu_sm_occupancy of this V1NodeMetrics.  # noqa: E501
        :rtype: dict(str, float)
        """
        return self._per_gpu_sm_occupancy

    @per_gpu_sm_occupancy.setter
    def per_gpu_sm_occupancy(self, per_gpu_sm_occupancy: 'dict(str, float)'):
        """Sets the per_gpu_sm_occupancy of this V1NodeMetrics.


        :param per_gpu_sm_occupancy: The per_gpu_sm_occupancy of this V1NodeMetrics.  # noqa: E501
        :type: dict(str, float)
        """

        self._per_gpu_sm_occupancy = per_gpu_sm_occupancy

    @property
    def per_gpu_temperature_c(self) -> 'dict(str, int)':
        """Gets the per_gpu_temperature_c of this V1NodeMetrics.  # noqa: E501


        :return: The per_gpu_temperature_c of this V1NodeMetrics.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._per_gpu_temperature_c

    @per_gpu_temperature_c.setter
    def per_gpu_temperature_c(self, per_gpu_temperature_c: 'dict(str, int)'):
        """Sets the per_gpu_temperature_c of this V1NodeMetrics.


        :param per_gpu_temperature_c: The per_gpu_temperature_c of this V1NodeMetrics.  # noqa: E501
        :type: dict(str, int)
        """

        self._per_gpu_temperature_c = per_gpu_temperature_c

    @property
    def per_gpu_util(self) -> 'dict(str, float)':
        """Gets the per_gpu_util of this V1NodeMetrics.  # noqa: E501


        :return: The per_gpu_util of this V1NodeMetrics.  # noqa: E501
        :rtype: dict(str, float)
        """
        return self._per_gpu_util

    @per_gpu_util.setter
    def per_gpu_util(self, per_gpu_util: 'dict(str, float)'):
        """Sets the per_gpu_util of this V1NodeMetrics.


        :param per_gpu_util: The per_gpu_util of this V1NodeMetrics.  # noqa: E501
        :type: dict(str, float)
        """

        self._per_gpu_util = per_gpu_util

    @property
    def timestamp(self) -> 'datetime':
        """Gets the timestamp of this V1NodeMetrics.  # noqa: E501


        :return: The timestamp of this V1NodeMetrics.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: 'datetime'):
        """Sets the timestamp of this V1NodeMetrics.


        :param timestamp: The timestamp of this V1NodeMetrics.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def unschedulable(self) -> 'bool':
        """Gets the unschedulable of this V1NodeMetrics.  # noqa: E501


        :return: The unschedulable of this V1NodeMetrics.  # noqa: E501
        :rtype: bool
        """
        return self._unschedulable

    @unschedulable.setter
    def unschedulable(self, unschedulable: 'bool'):
        """Sets the unschedulable of this V1NodeMetrics.


        :param unschedulable: The unschedulable of this V1NodeMetrics.  # noqa: E501
        :type: bool
        """

        self._unschedulable = unschedulable

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1NodeMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1NodeMetrics') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1NodeMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1NodeMetrics') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
