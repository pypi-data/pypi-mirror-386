# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1ProjectStorage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'billable_bytes': 'str',
        'cloudspace_storage_bytes': 'str',
        'container_registry_storage_bytes': 'str',
        'daily_read_bytes': 'str',
        'daily_write_bytes': 'str',
        'data_connection_storage_bytes': 'str',
        'display_name': 'str',
        'efs_folder_bytes': 'str',
        'estimated_daily_cost': 'float',
        'estimated_efs_cost': 'float',
        'folder_storage_bytes': 'str',
        'id': 'str',
        'job_storage_bytes': 'str',
        'model_storage_bytes': 'str',
        'total_storage_bytes': 'str',
        'upload_storage_bytes': 'str'
    }

    attribute_map = {
        'billable_bytes': 'billableBytes',
        'cloudspace_storage_bytes': 'cloudspaceStorageBytes',
        'container_registry_storage_bytes': 'containerRegistryStorageBytes',
        'daily_read_bytes': 'dailyReadBytes',
        'daily_write_bytes': 'dailyWriteBytes',
        'data_connection_storage_bytes': 'dataConnectionStorageBytes',
        'display_name': 'displayName',
        'efs_folder_bytes': 'efsFolderBytes',
        'estimated_daily_cost': 'estimatedDailyCost',
        'estimated_efs_cost': 'estimatedEfsCost',
        'folder_storage_bytes': 'folderStorageBytes',
        'id': 'id',
        'job_storage_bytes': 'jobStorageBytes',
        'model_storage_bytes': 'modelStorageBytes',
        'total_storage_bytes': 'totalStorageBytes',
        'upload_storage_bytes': 'uploadStorageBytes'
    }

    def __init__(self, billable_bytes: 'str' =None, cloudspace_storage_bytes: 'str' =None, container_registry_storage_bytes: 'str' =None, daily_read_bytes: 'str' =None, daily_write_bytes: 'str' =None, data_connection_storage_bytes: 'str' =None, display_name: 'str' =None, efs_folder_bytes: 'str' =None, estimated_daily_cost: 'float' =None, estimated_efs_cost: 'float' =None, folder_storage_bytes: 'str' =None, id: 'str' =None, job_storage_bytes: 'str' =None, model_storage_bytes: 'str' =None, total_storage_bytes: 'str' =None, upload_storage_bytes: 'str' =None):  # noqa: E501
        """V1ProjectStorage - a model defined in Swagger"""  # noqa: E501
        self._billable_bytes = None
        self._cloudspace_storage_bytes = None
        self._container_registry_storage_bytes = None
        self._daily_read_bytes = None
        self._daily_write_bytes = None
        self._data_connection_storage_bytes = None
        self._display_name = None
        self._efs_folder_bytes = None
        self._estimated_daily_cost = None
        self._estimated_efs_cost = None
        self._folder_storage_bytes = None
        self._id = None
        self._job_storage_bytes = None
        self._model_storage_bytes = None
        self._total_storage_bytes = None
        self._upload_storage_bytes = None
        self.discriminator = None
        if billable_bytes is not None:
            self.billable_bytes = billable_bytes
        if cloudspace_storage_bytes is not None:
            self.cloudspace_storage_bytes = cloudspace_storage_bytes
        if container_registry_storage_bytes is not None:
            self.container_registry_storage_bytes = container_registry_storage_bytes
        if daily_read_bytes is not None:
            self.daily_read_bytes = daily_read_bytes
        if daily_write_bytes is not None:
            self.daily_write_bytes = daily_write_bytes
        if data_connection_storage_bytes is not None:
            self.data_connection_storage_bytes = data_connection_storage_bytes
        if display_name is not None:
            self.display_name = display_name
        if efs_folder_bytes is not None:
            self.efs_folder_bytes = efs_folder_bytes
        if estimated_daily_cost is not None:
            self.estimated_daily_cost = estimated_daily_cost
        if estimated_efs_cost is not None:
            self.estimated_efs_cost = estimated_efs_cost
        if folder_storage_bytes is not None:
            self.folder_storage_bytes = folder_storage_bytes
        if id is not None:
            self.id = id
        if job_storage_bytes is not None:
            self.job_storage_bytes = job_storage_bytes
        if model_storage_bytes is not None:
            self.model_storage_bytes = model_storage_bytes
        if total_storage_bytes is not None:
            self.total_storage_bytes = total_storage_bytes
        if upload_storage_bytes is not None:
            self.upload_storage_bytes = upload_storage_bytes

    @property
    def billable_bytes(self) -> 'str':
        """Gets the billable_bytes of this V1ProjectStorage.  # noqa: E501


        :return: The billable_bytes of this V1ProjectStorage.  # noqa: E501
        :rtype: str
        """
        return self._billable_bytes

    @billable_bytes.setter
    def billable_bytes(self, billable_bytes: 'str'):
        """Sets the billable_bytes of this V1ProjectStorage.


        :param billable_bytes: The billable_bytes of this V1ProjectStorage.  # noqa: E501
        :type: str
        """

        self._billable_bytes = billable_bytes

    @property
    def cloudspace_storage_bytes(self) -> 'str':
        """Gets the cloudspace_storage_bytes of this V1ProjectStorage.  # noqa: E501


        :return: The cloudspace_storage_bytes of this V1ProjectStorage.  # noqa: E501
        :rtype: str
        """
        return self._cloudspace_storage_bytes

    @cloudspace_storage_bytes.setter
    def cloudspace_storage_bytes(self, cloudspace_storage_bytes: 'str'):
        """Sets the cloudspace_storage_bytes of this V1ProjectStorage.


        :param cloudspace_storage_bytes: The cloudspace_storage_bytes of this V1ProjectStorage.  # noqa: E501
        :type: str
        """

        self._cloudspace_storage_bytes = cloudspace_storage_bytes

    @property
    def container_registry_storage_bytes(self) -> 'str':
        """Gets the container_registry_storage_bytes of this V1ProjectStorage.  # noqa: E501


        :return: The container_registry_storage_bytes of this V1ProjectStorage.  # noqa: E501
        :rtype: str
        """
        return self._container_registry_storage_bytes

    @container_registry_storage_bytes.setter
    def container_registry_storage_bytes(self, container_registry_storage_bytes: 'str'):
        """Sets the container_registry_storage_bytes of this V1ProjectStorage.


        :param container_registry_storage_bytes: The container_registry_storage_bytes of this V1ProjectStorage.  # noqa: E501
        :type: str
        """

        self._container_registry_storage_bytes = container_registry_storage_bytes

    @property
    def daily_read_bytes(self) -> 'str':
        """Gets the daily_read_bytes of this V1ProjectStorage.  # noqa: E501


        :return: The daily_read_bytes of this V1ProjectStorage.  # noqa: E501
        :rtype: str
        """
        return self._daily_read_bytes

    @daily_read_bytes.setter
    def daily_read_bytes(self, daily_read_bytes: 'str'):
        """Sets the daily_read_bytes of this V1ProjectStorage.


        :param daily_read_bytes: The daily_read_bytes of this V1ProjectStorage.  # noqa: E501
        :type: str
        """

        self._daily_read_bytes = daily_read_bytes

    @property
    def daily_write_bytes(self) -> 'str':
        """Gets the daily_write_bytes of this V1ProjectStorage.  # noqa: E501


        :return: The daily_write_bytes of this V1ProjectStorage.  # noqa: E501
        :rtype: str
        """
        return self._daily_write_bytes

    @daily_write_bytes.setter
    def daily_write_bytes(self, daily_write_bytes: 'str'):
        """Sets the daily_write_bytes of this V1ProjectStorage.


        :param daily_write_bytes: The daily_write_bytes of this V1ProjectStorage.  # noqa: E501
        :type: str
        """

        self._daily_write_bytes = daily_write_bytes

    @property
    def data_connection_storage_bytes(self) -> 'str':
        """Gets the data_connection_storage_bytes of this V1ProjectStorage.  # noqa: E501


        :return: The data_connection_storage_bytes of this V1ProjectStorage.  # noqa: E501
        :rtype: str
        """
        return self._data_connection_storage_bytes

    @data_connection_storage_bytes.setter
    def data_connection_storage_bytes(self, data_connection_storage_bytes: 'str'):
        """Sets the data_connection_storage_bytes of this V1ProjectStorage.


        :param data_connection_storage_bytes: The data_connection_storage_bytes of this V1ProjectStorage.  # noqa: E501
        :type: str
        """

        self._data_connection_storage_bytes = data_connection_storage_bytes

    @property
    def display_name(self) -> 'str':
        """Gets the display_name of this V1ProjectStorage.  # noqa: E501


        :return: The display_name of this V1ProjectStorage.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: 'str'):
        """Sets the display_name of this V1ProjectStorage.


        :param display_name: The display_name of this V1ProjectStorage.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def efs_folder_bytes(self) -> 'str':
        """Gets the efs_folder_bytes of this V1ProjectStorage.  # noqa: E501


        :return: The efs_folder_bytes of this V1ProjectStorage.  # noqa: E501
        :rtype: str
        """
        return self._efs_folder_bytes

    @efs_folder_bytes.setter
    def efs_folder_bytes(self, efs_folder_bytes: 'str'):
        """Sets the efs_folder_bytes of this V1ProjectStorage.


        :param efs_folder_bytes: The efs_folder_bytes of this V1ProjectStorage.  # noqa: E501
        :type: str
        """

        self._efs_folder_bytes = efs_folder_bytes

    @property
    def estimated_daily_cost(self) -> 'float':
        """Gets the estimated_daily_cost of this V1ProjectStorage.  # noqa: E501


        :return: The estimated_daily_cost of this V1ProjectStorage.  # noqa: E501
        :rtype: float
        """
        return self._estimated_daily_cost

    @estimated_daily_cost.setter
    def estimated_daily_cost(self, estimated_daily_cost: 'float'):
        """Sets the estimated_daily_cost of this V1ProjectStorage.


        :param estimated_daily_cost: The estimated_daily_cost of this V1ProjectStorage.  # noqa: E501
        :type: float
        """

        self._estimated_daily_cost = estimated_daily_cost

    @property
    def estimated_efs_cost(self) -> 'float':
        """Gets the estimated_efs_cost of this V1ProjectStorage.  # noqa: E501


        :return: The estimated_efs_cost of this V1ProjectStorage.  # noqa: E501
        :rtype: float
        """
        return self._estimated_efs_cost

    @estimated_efs_cost.setter
    def estimated_efs_cost(self, estimated_efs_cost: 'float'):
        """Sets the estimated_efs_cost of this V1ProjectStorage.


        :param estimated_efs_cost: The estimated_efs_cost of this V1ProjectStorage.  # noqa: E501
        :type: float
        """

        self._estimated_efs_cost = estimated_efs_cost

    @property
    def folder_storage_bytes(self) -> 'str':
        """Gets the folder_storage_bytes of this V1ProjectStorage.  # noqa: E501


        :return: The folder_storage_bytes of this V1ProjectStorage.  # noqa: E501
        :rtype: str
        """
        return self._folder_storage_bytes

    @folder_storage_bytes.setter
    def folder_storage_bytes(self, folder_storage_bytes: 'str'):
        """Sets the folder_storage_bytes of this V1ProjectStorage.


        :param folder_storage_bytes: The folder_storage_bytes of this V1ProjectStorage.  # noqa: E501
        :type: str
        """

        self._folder_storage_bytes = folder_storage_bytes

    @property
    def id(self) -> 'str':
        """Gets the id of this V1ProjectStorage.  # noqa: E501


        :return: The id of this V1ProjectStorage.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1ProjectStorage.


        :param id: The id of this V1ProjectStorage.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def job_storage_bytes(self) -> 'str':
        """Gets the job_storage_bytes of this V1ProjectStorage.  # noqa: E501


        :return: The job_storage_bytes of this V1ProjectStorage.  # noqa: E501
        :rtype: str
        """
        return self._job_storage_bytes

    @job_storage_bytes.setter
    def job_storage_bytes(self, job_storage_bytes: 'str'):
        """Sets the job_storage_bytes of this V1ProjectStorage.


        :param job_storage_bytes: The job_storage_bytes of this V1ProjectStorage.  # noqa: E501
        :type: str
        """

        self._job_storage_bytes = job_storage_bytes

    @property
    def model_storage_bytes(self) -> 'str':
        """Gets the model_storage_bytes of this V1ProjectStorage.  # noqa: E501


        :return: The model_storage_bytes of this V1ProjectStorage.  # noqa: E501
        :rtype: str
        """
        return self._model_storage_bytes

    @model_storage_bytes.setter
    def model_storage_bytes(self, model_storage_bytes: 'str'):
        """Sets the model_storage_bytes of this V1ProjectStorage.


        :param model_storage_bytes: The model_storage_bytes of this V1ProjectStorage.  # noqa: E501
        :type: str
        """

        self._model_storage_bytes = model_storage_bytes

    @property
    def total_storage_bytes(self) -> 'str':
        """Gets the total_storage_bytes of this V1ProjectStorage.  # noqa: E501


        :return: The total_storage_bytes of this V1ProjectStorage.  # noqa: E501
        :rtype: str
        """
        return self._total_storage_bytes

    @total_storage_bytes.setter
    def total_storage_bytes(self, total_storage_bytes: 'str'):
        """Sets the total_storage_bytes of this V1ProjectStorage.


        :param total_storage_bytes: The total_storage_bytes of this V1ProjectStorage.  # noqa: E501
        :type: str
        """

        self._total_storage_bytes = total_storage_bytes

    @property
    def upload_storage_bytes(self) -> 'str':
        """Gets the upload_storage_bytes of this V1ProjectStorage.  # noqa: E501


        :return: The upload_storage_bytes of this V1ProjectStorage.  # noqa: E501
        :rtype: str
        """
        return self._upload_storage_bytes

    @upload_storage_bytes.setter
    def upload_storage_bytes(self, upload_storage_bytes: 'str'):
        """Sets the upload_storage_bytes of this V1ProjectStorage.


        :param upload_storage_bytes: The upload_storage_bytes of this V1ProjectStorage.  # noqa: E501
        :type: str
        """

        self._upload_storage_bytes = upload_storage_bytes

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1ProjectStorage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1ProjectStorage') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ProjectStorage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1ProjectStorage') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
