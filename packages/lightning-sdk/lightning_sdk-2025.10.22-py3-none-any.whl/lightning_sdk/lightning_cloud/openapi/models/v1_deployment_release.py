# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1DeploymentRelease(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'archived': 'bool',
        'created_at': 'datetime',
        'first_job_state': 'str',
        'id': 'str',
        'project_id': 'str',
        'replicas': 'int',
        'spec': 'V1JobSpec',
        'user_id': 'str',
        'version': 'int'
    }

    attribute_map = {
        'archived': 'archived',
        'created_at': 'createdAt',
        'first_job_state': 'firstJobState',
        'id': 'id',
        'project_id': 'projectId',
        'replicas': 'replicas',
        'spec': 'spec',
        'user_id': 'userId',
        'version': 'version'
    }

    def __init__(self, archived: 'bool' =None, created_at: 'datetime' =None, first_job_state: 'str' =None, id: 'str' =None, project_id: 'str' =None, replicas: 'int' =None, spec: 'V1JobSpec' =None, user_id: 'str' =None, version: 'int' =None):  # noqa: E501
        """V1DeploymentRelease - a model defined in Swagger"""  # noqa: E501
        self._archived = None
        self._created_at = None
        self._first_job_state = None
        self._id = None
        self._project_id = None
        self._replicas = None
        self._spec = None
        self._user_id = None
        self._version = None
        self.discriminator = None
        if archived is not None:
            self.archived = archived
        if created_at is not None:
            self.created_at = created_at
        if first_job_state is not None:
            self.first_job_state = first_job_state
        if id is not None:
            self.id = id
        if project_id is not None:
            self.project_id = project_id
        if replicas is not None:
            self.replicas = replicas
        if spec is not None:
            self.spec = spec
        if user_id is not None:
            self.user_id = user_id
        if version is not None:
            self.version = version

    @property
    def archived(self) -> 'bool':
        """Gets the archived of this V1DeploymentRelease.  # noqa: E501


        :return: The archived of this V1DeploymentRelease.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived: 'bool'):
        """Sets the archived of this V1DeploymentRelease.


        :param archived: The archived of this V1DeploymentRelease.  # noqa: E501
        :type: bool
        """

        self._archived = archived

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this V1DeploymentRelease.  # noqa: E501


        :return: The created_at of this V1DeploymentRelease.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this V1DeploymentRelease.


        :param created_at: The created_at of this V1DeploymentRelease.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def first_job_state(self) -> 'str':
        """Gets the first_job_state of this V1DeploymentRelease.  # noqa: E501


        :return: The first_job_state of this V1DeploymentRelease.  # noqa: E501
        :rtype: str
        """
        return self._first_job_state

    @first_job_state.setter
    def first_job_state(self, first_job_state: 'str'):
        """Sets the first_job_state of this V1DeploymentRelease.


        :param first_job_state: The first_job_state of this V1DeploymentRelease.  # noqa: E501
        :type: str
        """

        self._first_job_state = first_job_state

    @property
    def id(self) -> 'str':
        """Gets the id of this V1DeploymentRelease.  # noqa: E501


        :return: The id of this V1DeploymentRelease.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1DeploymentRelease.


        :param id: The id of this V1DeploymentRelease.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def project_id(self) -> 'str':
        """Gets the project_id of this V1DeploymentRelease.  # noqa: E501


        :return: The project_id of this V1DeploymentRelease.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: 'str'):
        """Sets the project_id of this V1DeploymentRelease.


        :param project_id: The project_id of this V1DeploymentRelease.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def replicas(self) -> 'int':
        """Gets the replicas of this V1DeploymentRelease.  # noqa: E501


        :return: The replicas of this V1DeploymentRelease.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas: 'int'):
        """Sets the replicas of this V1DeploymentRelease.


        :param replicas: The replicas of this V1DeploymentRelease.  # noqa: E501
        :type: int
        """

        self._replicas = replicas

    @property
    def spec(self) -> 'V1JobSpec':
        """Gets the spec of this V1DeploymentRelease.  # noqa: E501


        :return: The spec of this V1DeploymentRelease.  # noqa: E501
        :rtype: V1JobSpec
        """
        return self._spec

    @spec.setter
    def spec(self, spec: 'V1JobSpec'):
        """Sets the spec of this V1DeploymentRelease.


        :param spec: The spec of this V1DeploymentRelease.  # noqa: E501
        :type: V1JobSpec
        """

        self._spec = spec

    @property
    def user_id(self) -> 'str':
        """Gets the user_id of this V1DeploymentRelease.  # noqa: E501


        :return: The user_id of this V1DeploymentRelease.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: 'str'):
        """Sets the user_id of this V1DeploymentRelease.


        :param user_id: The user_id of this V1DeploymentRelease.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def version(self) -> 'int':
        """Gets the version of this V1DeploymentRelease.  # noqa: E501


        :return: The version of this V1DeploymentRelease.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version: 'int'):
        """Sets the version of this V1DeploymentRelease.


        :param version: The version of this V1DeploymentRelease.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1DeploymentRelease, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1DeploymentRelease') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1DeploymentRelease):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1DeploymentRelease') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
