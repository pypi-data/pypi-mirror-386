# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1CloudSpaceInstanceCollabStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'edit_request_queue_user_ids': 'list[str]',
        'editor_user_id': 'str',
        'is_live': 'bool',
        'viewer_user_ids': 'list[str]'
    }

    attribute_map = {
        'edit_request_queue_user_ids': 'editRequestQueueUserIds',
        'editor_user_id': 'editorUserId',
        'is_live': 'isLive',
        'viewer_user_ids': 'viewerUserIds'
    }

    def __init__(self, edit_request_queue_user_ids: 'list[str]' =None, editor_user_id: 'str' =None, is_live: 'bool' =None, viewer_user_ids: 'list[str]' =None):  # noqa: E501
        """V1CloudSpaceInstanceCollabStatus - a model defined in Swagger"""  # noqa: E501
        self._edit_request_queue_user_ids = None
        self._editor_user_id = None
        self._is_live = None
        self._viewer_user_ids = None
        self.discriminator = None
        if edit_request_queue_user_ids is not None:
            self.edit_request_queue_user_ids = edit_request_queue_user_ids
        if editor_user_id is not None:
            self.editor_user_id = editor_user_id
        if is_live is not None:
            self.is_live = is_live
        if viewer_user_ids is not None:
            self.viewer_user_ids = viewer_user_ids

    @property
    def edit_request_queue_user_ids(self) -> 'list[str]':
        """Gets the edit_request_queue_user_ids of this V1CloudSpaceInstanceCollabStatus.  # noqa: E501


        :return: The edit_request_queue_user_ids of this V1CloudSpaceInstanceCollabStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._edit_request_queue_user_ids

    @edit_request_queue_user_ids.setter
    def edit_request_queue_user_ids(self, edit_request_queue_user_ids: 'list[str]'):
        """Sets the edit_request_queue_user_ids of this V1CloudSpaceInstanceCollabStatus.


        :param edit_request_queue_user_ids: The edit_request_queue_user_ids of this V1CloudSpaceInstanceCollabStatus.  # noqa: E501
        :type: list[str]
        """

        self._edit_request_queue_user_ids = edit_request_queue_user_ids

    @property
    def editor_user_id(self) -> 'str':
        """Gets the editor_user_id of this V1CloudSpaceInstanceCollabStatus.  # noqa: E501


        :return: The editor_user_id of this V1CloudSpaceInstanceCollabStatus.  # noqa: E501
        :rtype: str
        """
        return self._editor_user_id

    @editor_user_id.setter
    def editor_user_id(self, editor_user_id: 'str'):
        """Sets the editor_user_id of this V1CloudSpaceInstanceCollabStatus.


        :param editor_user_id: The editor_user_id of this V1CloudSpaceInstanceCollabStatus.  # noqa: E501
        :type: str
        """

        self._editor_user_id = editor_user_id

    @property
    def is_live(self) -> 'bool':
        """Gets the is_live of this V1CloudSpaceInstanceCollabStatus.  # noqa: E501


        :return: The is_live of this V1CloudSpaceInstanceCollabStatus.  # noqa: E501
        :rtype: bool
        """
        return self._is_live

    @is_live.setter
    def is_live(self, is_live: 'bool'):
        """Sets the is_live of this V1CloudSpaceInstanceCollabStatus.


        :param is_live: The is_live of this V1CloudSpaceInstanceCollabStatus.  # noqa: E501
        :type: bool
        """

        self._is_live = is_live

    @property
    def viewer_user_ids(self) -> 'list[str]':
        """Gets the viewer_user_ids of this V1CloudSpaceInstanceCollabStatus.  # noqa: E501


        :return: The viewer_user_ids of this V1CloudSpaceInstanceCollabStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._viewer_user_ids

    @viewer_user_ids.setter
    def viewer_user_ids(self, viewer_user_ids: 'list[str]'):
        """Sets the viewer_user_ids of this V1CloudSpaceInstanceCollabStatus.


        :param viewer_user_ids: The viewer_user_ids of this V1CloudSpaceInstanceCollabStatus.  # noqa: E501
        :type: list[str]
        """

        self._viewer_user_ids = viewer_user_ids

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1CloudSpaceInstanceCollabStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1CloudSpaceInstanceCollabStatus') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1CloudSpaceInstanceCollabStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1CloudSpaceInstanceCollabStatus') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
