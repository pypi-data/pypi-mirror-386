# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1GetOrganizationStorageMetadataResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_limit_bytes': 'str',
        'estimated_daily_cost': 'float',
        'estimated_daily_efs_cost': 'float',
        'id': 'str',
        'project_metadata': 'list[V1ProjectStorage]',
        'total_billable_bytes': 'str',
        'total_cloudspace_storage_bytes': 'str',
        'total_container_registry_storage_bytes': 'str',
        'total_data_connection_storage_bytes': 'str',
        'total_folder_storage_bytes': 'str',
        'total_free_storage_bytes': 'str',
        'total_job_storage_bytes': 'str',
        'total_model_storage_bytes': 'str',
        'total_storage_bytes': 'str',
        'total_upload_storage_bytes': 'str'
    }

    attribute_map = {
        'account_limit_bytes': 'accountLimitBytes',
        'estimated_daily_cost': 'estimatedDailyCost',
        'estimated_daily_efs_cost': 'estimatedDailyEfsCost',
        'id': 'id',
        'project_metadata': 'projectMetadata',
        'total_billable_bytes': 'totalBillableBytes',
        'total_cloudspace_storage_bytes': 'totalCloudspaceStorageBytes',
        'total_container_registry_storage_bytes': 'totalContainerRegistryStorageBytes',
        'total_data_connection_storage_bytes': 'totalDataConnectionStorageBytes',
        'total_folder_storage_bytes': 'totalFolderStorageBytes',
        'total_free_storage_bytes': 'totalFreeStorageBytes',
        'total_job_storage_bytes': 'totalJobStorageBytes',
        'total_model_storage_bytes': 'totalModelStorageBytes',
        'total_storage_bytes': 'totalStorageBytes',
        'total_upload_storage_bytes': 'totalUploadStorageBytes'
    }

    def __init__(self, account_limit_bytes: 'str' =None, estimated_daily_cost: 'float' =None, estimated_daily_efs_cost: 'float' =None, id: 'str' =None, project_metadata: 'list[V1ProjectStorage]' =None, total_billable_bytes: 'str' =None, total_cloudspace_storage_bytes: 'str' =None, total_container_registry_storage_bytes: 'str' =None, total_data_connection_storage_bytes: 'str' =None, total_folder_storage_bytes: 'str' =None, total_free_storage_bytes: 'str' =None, total_job_storage_bytes: 'str' =None, total_model_storage_bytes: 'str' =None, total_storage_bytes: 'str' =None, total_upload_storage_bytes: 'str' =None):  # noqa: E501
        """V1GetOrganizationStorageMetadataResponse - a model defined in Swagger"""  # noqa: E501
        self._account_limit_bytes = None
        self._estimated_daily_cost = None
        self._estimated_daily_efs_cost = None
        self._id = None
        self._project_metadata = None
        self._total_billable_bytes = None
        self._total_cloudspace_storage_bytes = None
        self._total_container_registry_storage_bytes = None
        self._total_data_connection_storage_bytes = None
        self._total_folder_storage_bytes = None
        self._total_free_storage_bytes = None
        self._total_job_storage_bytes = None
        self._total_model_storage_bytes = None
        self._total_storage_bytes = None
        self._total_upload_storage_bytes = None
        self.discriminator = None
        if account_limit_bytes is not None:
            self.account_limit_bytes = account_limit_bytes
        if estimated_daily_cost is not None:
            self.estimated_daily_cost = estimated_daily_cost
        if estimated_daily_efs_cost is not None:
            self.estimated_daily_efs_cost = estimated_daily_efs_cost
        if id is not None:
            self.id = id
        if project_metadata is not None:
            self.project_metadata = project_metadata
        if total_billable_bytes is not None:
            self.total_billable_bytes = total_billable_bytes
        if total_cloudspace_storage_bytes is not None:
            self.total_cloudspace_storage_bytes = total_cloudspace_storage_bytes
        if total_container_registry_storage_bytes is not None:
            self.total_container_registry_storage_bytes = total_container_registry_storage_bytes
        if total_data_connection_storage_bytes is not None:
            self.total_data_connection_storage_bytes = total_data_connection_storage_bytes
        if total_folder_storage_bytes is not None:
            self.total_folder_storage_bytes = total_folder_storage_bytes
        if total_free_storage_bytes is not None:
            self.total_free_storage_bytes = total_free_storage_bytes
        if total_job_storage_bytes is not None:
            self.total_job_storage_bytes = total_job_storage_bytes
        if total_model_storage_bytes is not None:
            self.total_model_storage_bytes = total_model_storage_bytes
        if total_storage_bytes is not None:
            self.total_storage_bytes = total_storage_bytes
        if total_upload_storage_bytes is not None:
            self.total_upload_storage_bytes = total_upload_storage_bytes

    @property
    def account_limit_bytes(self) -> 'str':
        """Gets the account_limit_bytes of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501


        :return: The account_limit_bytes of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_limit_bytes

    @account_limit_bytes.setter
    def account_limit_bytes(self, account_limit_bytes: 'str'):
        """Sets the account_limit_bytes of this V1GetOrganizationStorageMetadataResponse.


        :param account_limit_bytes: The account_limit_bytes of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501
        :type: str
        """

        self._account_limit_bytes = account_limit_bytes

    @property
    def estimated_daily_cost(self) -> 'float':
        """Gets the estimated_daily_cost of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501


        :return: The estimated_daily_cost of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501
        :rtype: float
        """
        return self._estimated_daily_cost

    @estimated_daily_cost.setter
    def estimated_daily_cost(self, estimated_daily_cost: 'float'):
        """Sets the estimated_daily_cost of this V1GetOrganizationStorageMetadataResponse.


        :param estimated_daily_cost: The estimated_daily_cost of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501
        :type: float
        """

        self._estimated_daily_cost = estimated_daily_cost

    @property
    def estimated_daily_efs_cost(self) -> 'float':
        """Gets the estimated_daily_efs_cost of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501


        :return: The estimated_daily_efs_cost of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501
        :rtype: float
        """
        return self._estimated_daily_efs_cost

    @estimated_daily_efs_cost.setter
    def estimated_daily_efs_cost(self, estimated_daily_efs_cost: 'float'):
        """Sets the estimated_daily_efs_cost of this V1GetOrganizationStorageMetadataResponse.


        :param estimated_daily_efs_cost: The estimated_daily_efs_cost of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501
        :type: float
        """

        self._estimated_daily_efs_cost = estimated_daily_efs_cost

    @property
    def id(self) -> 'str':
        """Gets the id of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501


        :return: The id of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1GetOrganizationStorageMetadataResponse.


        :param id: The id of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def project_metadata(self) -> 'list[V1ProjectStorage]':
        """Gets the project_metadata of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501


        :return: The project_metadata of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501
        :rtype: list[V1ProjectStorage]
        """
        return self._project_metadata

    @project_metadata.setter
    def project_metadata(self, project_metadata: 'list[V1ProjectStorage]'):
        """Sets the project_metadata of this V1GetOrganizationStorageMetadataResponse.


        :param project_metadata: The project_metadata of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501
        :type: list[V1ProjectStorage]
        """

        self._project_metadata = project_metadata

    @property
    def total_billable_bytes(self) -> 'str':
        """Gets the total_billable_bytes of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501


        :return: The total_billable_bytes of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._total_billable_bytes

    @total_billable_bytes.setter
    def total_billable_bytes(self, total_billable_bytes: 'str'):
        """Sets the total_billable_bytes of this V1GetOrganizationStorageMetadataResponse.


        :param total_billable_bytes: The total_billable_bytes of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501
        :type: str
        """

        self._total_billable_bytes = total_billable_bytes

    @property
    def total_cloudspace_storage_bytes(self) -> 'str':
        """Gets the total_cloudspace_storage_bytes of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501


        :return: The total_cloudspace_storage_bytes of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._total_cloudspace_storage_bytes

    @total_cloudspace_storage_bytes.setter
    def total_cloudspace_storage_bytes(self, total_cloudspace_storage_bytes: 'str'):
        """Sets the total_cloudspace_storage_bytes of this V1GetOrganizationStorageMetadataResponse.


        :param total_cloudspace_storage_bytes: The total_cloudspace_storage_bytes of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501
        :type: str
        """

        self._total_cloudspace_storage_bytes = total_cloudspace_storage_bytes

    @property
    def total_container_registry_storage_bytes(self) -> 'str':
        """Gets the total_container_registry_storage_bytes of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501


        :return: The total_container_registry_storage_bytes of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._total_container_registry_storage_bytes

    @total_container_registry_storage_bytes.setter
    def total_container_registry_storage_bytes(self, total_container_registry_storage_bytes: 'str'):
        """Sets the total_container_registry_storage_bytes of this V1GetOrganizationStorageMetadataResponse.


        :param total_container_registry_storage_bytes: The total_container_registry_storage_bytes of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501
        :type: str
        """

        self._total_container_registry_storage_bytes = total_container_registry_storage_bytes

    @property
    def total_data_connection_storage_bytes(self) -> 'str':
        """Gets the total_data_connection_storage_bytes of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501


        :return: The total_data_connection_storage_bytes of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._total_data_connection_storage_bytes

    @total_data_connection_storage_bytes.setter
    def total_data_connection_storage_bytes(self, total_data_connection_storage_bytes: 'str'):
        """Sets the total_data_connection_storage_bytes of this V1GetOrganizationStorageMetadataResponse.


        :param total_data_connection_storage_bytes: The total_data_connection_storage_bytes of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501
        :type: str
        """

        self._total_data_connection_storage_bytes = total_data_connection_storage_bytes

    @property
    def total_folder_storage_bytes(self) -> 'str':
        """Gets the total_folder_storage_bytes of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501


        :return: The total_folder_storage_bytes of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._total_folder_storage_bytes

    @total_folder_storage_bytes.setter
    def total_folder_storage_bytes(self, total_folder_storage_bytes: 'str'):
        """Sets the total_folder_storage_bytes of this V1GetOrganizationStorageMetadataResponse.


        :param total_folder_storage_bytes: The total_folder_storage_bytes of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501
        :type: str
        """

        self._total_folder_storage_bytes = total_folder_storage_bytes

    @property
    def total_free_storage_bytes(self) -> 'str':
        """Gets the total_free_storage_bytes of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501


        :return: The total_free_storage_bytes of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._total_free_storage_bytes

    @total_free_storage_bytes.setter
    def total_free_storage_bytes(self, total_free_storage_bytes: 'str'):
        """Sets the total_free_storage_bytes of this V1GetOrganizationStorageMetadataResponse.


        :param total_free_storage_bytes: The total_free_storage_bytes of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501
        :type: str
        """

        self._total_free_storage_bytes = total_free_storage_bytes

    @property
    def total_job_storage_bytes(self) -> 'str':
        """Gets the total_job_storage_bytes of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501


        :return: The total_job_storage_bytes of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._total_job_storage_bytes

    @total_job_storage_bytes.setter
    def total_job_storage_bytes(self, total_job_storage_bytes: 'str'):
        """Sets the total_job_storage_bytes of this V1GetOrganizationStorageMetadataResponse.


        :param total_job_storage_bytes: The total_job_storage_bytes of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501
        :type: str
        """

        self._total_job_storage_bytes = total_job_storage_bytes

    @property
    def total_model_storage_bytes(self) -> 'str':
        """Gets the total_model_storage_bytes of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501


        :return: The total_model_storage_bytes of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._total_model_storage_bytes

    @total_model_storage_bytes.setter
    def total_model_storage_bytes(self, total_model_storage_bytes: 'str'):
        """Sets the total_model_storage_bytes of this V1GetOrganizationStorageMetadataResponse.


        :param total_model_storage_bytes: The total_model_storage_bytes of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501
        :type: str
        """

        self._total_model_storage_bytes = total_model_storage_bytes

    @property
    def total_storage_bytes(self) -> 'str':
        """Gets the total_storage_bytes of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501


        :return: The total_storage_bytes of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._total_storage_bytes

    @total_storage_bytes.setter
    def total_storage_bytes(self, total_storage_bytes: 'str'):
        """Sets the total_storage_bytes of this V1GetOrganizationStorageMetadataResponse.


        :param total_storage_bytes: The total_storage_bytes of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501
        :type: str
        """

        self._total_storage_bytes = total_storage_bytes

    @property
    def total_upload_storage_bytes(self) -> 'str':
        """Gets the total_upload_storage_bytes of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501


        :return: The total_upload_storage_bytes of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._total_upload_storage_bytes

    @total_upload_storage_bytes.setter
    def total_upload_storage_bytes(self, total_upload_storage_bytes: 'str'):
        """Sets the total_upload_storage_bytes of this V1GetOrganizationStorageMetadataResponse.


        :param total_upload_storage_bytes: The total_upload_storage_bytes of this V1GetOrganizationStorageMetadataResponse.  # noqa: E501
        :type: str
        """

        self._total_upload_storage_bytes = total_upload_storage_bytes

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1GetOrganizationStorageMetadataResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1GetOrganizationStorageMetadataResponse') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1GetOrganizationStorageMetadataResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1GetOrganizationStorageMetadataResponse') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
