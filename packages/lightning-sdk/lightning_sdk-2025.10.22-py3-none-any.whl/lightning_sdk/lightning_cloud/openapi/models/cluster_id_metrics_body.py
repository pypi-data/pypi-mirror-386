# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class ClusterIdMetricsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_metrics': 'V1ClusterMetrics',
        'container_metrics': 'list[V1ContainerMetrics]',
        'group_node_metrics': 'list[V1GroupNodeMetrics]',
        'group_pod_metrics': 'list[V1GroupPodMetrics]',
        'kai_scheduler_queues_metrics': 'list[V1KaiSchedulerQueueMetrics]',
        'namespace_metrics': 'list[V1NamespaceMetrics]',
        'node_metrics': 'list[V1NodeMetrics]',
        'pod_metrics': 'list[V1PodMetrics]'
    }

    attribute_map = {
        'cluster_metrics': 'clusterMetrics',
        'container_metrics': 'containerMetrics',
        'group_node_metrics': 'groupNodeMetrics',
        'group_pod_metrics': 'groupPodMetrics',
        'kai_scheduler_queues_metrics': 'kaiSchedulerQueuesMetrics',
        'namespace_metrics': 'namespaceMetrics',
        'node_metrics': 'nodeMetrics',
        'pod_metrics': 'podMetrics'
    }

    def __init__(self, cluster_metrics: 'V1ClusterMetrics' =None, container_metrics: 'list[V1ContainerMetrics]' =None, group_node_metrics: 'list[V1GroupNodeMetrics]' =None, group_pod_metrics: 'list[V1GroupPodMetrics]' =None, kai_scheduler_queues_metrics: 'list[V1KaiSchedulerQueueMetrics]' =None, namespace_metrics: 'list[V1NamespaceMetrics]' =None, node_metrics: 'list[V1NodeMetrics]' =None, pod_metrics: 'list[V1PodMetrics]' =None):  # noqa: E501
        """ClusterIdMetricsBody - a model defined in Swagger"""  # noqa: E501
        self._cluster_metrics = None
        self._container_metrics = None
        self._group_node_metrics = None
        self._group_pod_metrics = None
        self._kai_scheduler_queues_metrics = None
        self._namespace_metrics = None
        self._node_metrics = None
        self._pod_metrics = None
        self.discriminator = None
        if cluster_metrics is not None:
            self.cluster_metrics = cluster_metrics
        if container_metrics is not None:
            self.container_metrics = container_metrics
        if group_node_metrics is not None:
            self.group_node_metrics = group_node_metrics
        if group_pod_metrics is not None:
            self.group_pod_metrics = group_pod_metrics
        if kai_scheduler_queues_metrics is not None:
            self.kai_scheduler_queues_metrics = kai_scheduler_queues_metrics
        if namespace_metrics is not None:
            self.namespace_metrics = namespace_metrics
        if node_metrics is not None:
            self.node_metrics = node_metrics
        if pod_metrics is not None:
            self.pod_metrics = pod_metrics

    @property
    def cluster_metrics(self) -> 'V1ClusterMetrics':
        """Gets the cluster_metrics of this ClusterIdMetricsBody.  # noqa: E501


        :return: The cluster_metrics of this ClusterIdMetricsBody.  # noqa: E501
        :rtype: V1ClusterMetrics
        """
        return self._cluster_metrics

    @cluster_metrics.setter
    def cluster_metrics(self, cluster_metrics: 'V1ClusterMetrics'):
        """Sets the cluster_metrics of this ClusterIdMetricsBody.


        :param cluster_metrics: The cluster_metrics of this ClusterIdMetricsBody.  # noqa: E501
        :type: V1ClusterMetrics
        """

        self._cluster_metrics = cluster_metrics

    @property
    def container_metrics(self) -> 'list[V1ContainerMetrics]':
        """Gets the container_metrics of this ClusterIdMetricsBody.  # noqa: E501


        :return: The container_metrics of this ClusterIdMetricsBody.  # noqa: E501
        :rtype: list[V1ContainerMetrics]
        """
        return self._container_metrics

    @container_metrics.setter
    def container_metrics(self, container_metrics: 'list[V1ContainerMetrics]'):
        """Sets the container_metrics of this ClusterIdMetricsBody.


        :param container_metrics: The container_metrics of this ClusterIdMetricsBody.  # noqa: E501
        :type: list[V1ContainerMetrics]
        """

        self._container_metrics = container_metrics

    @property
    def group_node_metrics(self) -> 'list[V1GroupNodeMetrics]':
        """Gets the group_node_metrics of this ClusterIdMetricsBody.  # noqa: E501


        :return: The group_node_metrics of this ClusterIdMetricsBody.  # noqa: E501
        :rtype: list[V1GroupNodeMetrics]
        """
        return self._group_node_metrics

    @group_node_metrics.setter
    def group_node_metrics(self, group_node_metrics: 'list[V1GroupNodeMetrics]'):
        """Sets the group_node_metrics of this ClusterIdMetricsBody.


        :param group_node_metrics: The group_node_metrics of this ClusterIdMetricsBody.  # noqa: E501
        :type: list[V1GroupNodeMetrics]
        """

        self._group_node_metrics = group_node_metrics

    @property
    def group_pod_metrics(self) -> 'list[V1GroupPodMetrics]':
        """Gets the group_pod_metrics of this ClusterIdMetricsBody.  # noqa: E501


        :return: The group_pod_metrics of this ClusterIdMetricsBody.  # noqa: E501
        :rtype: list[V1GroupPodMetrics]
        """
        return self._group_pod_metrics

    @group_pod_metrics.setter
    def group_pod_metrics(self, group_pod_metrics: 'list[V1GroupPodMetrics]'):
        """Sets the group_pod_metrics of this ClusterIdMetricsBody.


        :param group_pod_metrics: The group_pod_metrics of this ClusterIdMetricsBody.  # noqa: E501
        :type: list[V1GroupPodMetrics]
        """

        self._group_pod_metrics = group_pod_metrics

    @property
    def kai_scheduler_queues_metrics(self) -> 'list[V1KaiSchedulerQueueMetrics]':
        """Gets the kai_scheduler_queues_metrics of this ClusterIdMetricsBody.  # noqa: E501


        :return: The kai_scheduler_queues_metrics of this ClusterIdMetricsBody.  # noqa: E501
        :rtype: list[V1KaiSchedulerQueueMetrics]
        """
        return self._kai_scheduler_queues_metrics

    @kai_scheduler_queues_metrics.setter
    def kai_scheduler_queues_metrics(self, kai_scheduler_queues_metrics: 'list[V1KaiSchedulerQueueMetrics]'):
        """Sets the kai_scheduler_queues_metrics of this ClusterIdMetricsBody.


        :param kai_scheduler_queues_metrics: The kai_scheduler_queues_metrics of this ClusterIdMetricsBody.  # noqa: E501
        :type: list[V1KaiSchedulerQueueMetrics]
        """

        self._kai_scheduler_queues_metrics = kai_scheduler_queues_metrics

    @property
    def namespace_metrics(self) -> 'list[V1NamespaceMetrics]':
        """Gets the namespace_metrics of this ClusterIdMetricsBody.  # noqa: E501


        :return: The namespace_metrics of this ClusterIdMetricsBody.  # noqa: E501
        :rtype: list[V1NamespaceMetrics]
        """
        return self._namespace_metrics

    @namespace_metrics.setter
    def namespace_metrics(self, namespace_metrics: 'list[V1NamespaceMetrics]'):
        """Sets the namespace_metrics of this ClusterIdMetricsBody.


        :param namespace_metrics: The namespace_metrics of this ClusterIdMetricsBody.  # noqa: E501
        :type: list[V1NamespaceMetrics]
        """

        self._namespace_metrics = namespace_metrics

    @property
    def node_metrics(self) -> 'list[V1NodeMetrics]':
        """Gets the node_metrics of this ClusterIdMetricsBody.  # noqa: E501


        :return: The node_metrics of this ClusterIdMetricsBody.  # noqa: E501
        :rtype: list[V1NodeMetrics]
        """
        return self._node_metrics

    @node_metrics.setter
    def node_metrics(self, node_metrics: 'list[V1NodeMetrics]'):
        """Sets the node_metrics of this ClusterIdMetricsBody.


        :param node_metrics: The node_metrics of this ClusterIdMetricsBody.  # noqa: E501
        :type: list[V1NodeMetrics]
        """

        self._node_metrics = node_metrics

    @property
    def pod_metrics(self) -> 'list[V1PodMetrics]':
        """Gets the pod_metrics of this ClusterIdMetricsBody.  # noqa: E501


        :return: The pod_metrics of this ClusterIdMetricsBody.  # noqa: E501
        :rtype: list[V1PodMetrics]
        """
        return self._pod_metrics

    @pod_metrics.setter
    def pod_metrics(self, pod_metrics: 'list[V1PodMetrics]'):
        """Sets the pod_metrics of this ClusterIdMetricsBody.


        :param pod_metrics: The pod_metrics of this ClusterIdMetricsBody.  # noqa: E501
        :type: list[V1PodMetrics]
        """

        self._pod_metrics = pod_metrics

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterIdMetricsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'ClusterIdMetricsBody') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterIdMetricsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'ClusterIdMetricsBody') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
