# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class EndpointsIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth': 'V1EndpointAuth',
        'cloudspace': 'V1UpstreamCloudSpace',
        'created_at': 'datetime',
        'custom_domain': 'str',
        'job': 'V1UpstreamJob',
        'managed': 'V1UpstreamManaged',
        'name': 'str',
        'openai': 'V1UpstreamOpenAI',
        'ports': 'list[str]',
        'prewarm': 'V1EndpointPrewarm',
        'proxy': 'bool',
        'updated_at': 'datetime',
        'urls': 'list[str]',
        'user_id': 'str'
    }

    attribute_map = {
        'auth': 'auth',
        'cloudspace': 'cloudspace',
        'created_at': 'createdAt',
        'custom_domain': 'customDomain',
        'job': 'job',
        'managed': 'managed',
        'name': 'name',
        'openai': 'openai',
        'ports': 'ports',
        'prewarm': 'prewarm',
        'proxy': 'proxy',
        'updated_at': 'updatedAt',
        'urls': 'urls',
        'user_id': 'userId'
    }

    def __init__(self, auth: 'V1EndpointAuth' =None, cloudspace: 'V1UpstreamCloudSpace' =None, created_at: 'datetime' =None, custom_domain: 'str' =None, job: 'V1UpstreamJob' =None, managed: 'V1UpstreamManaged' =None, name: 'str' =None, openai: 'V1UpstreamOpenAI' =None, ports: 'list[str]' =None, prewarm: 'V1EndpointPrewarm' =None, proxy: 'bool' =None, updated_at: 'datetime' =None, urls: 'list[str]' =None, user_id: 'str' =None):  # noqa: E501
        """EndpointsIdBody - a model defined in Swagger"""  # noqa: E501
        self._auth = None
        self._cloudspace = None
        self._created_at = None
        self._custom_domain = None
        self._job = None
        self._managed = None
        self._name = None
        self._openai = None
        self._ports = None
        self._prewarm = None
        self._proxy = None
        self._updated_at = None
        self._urls = None
        self._user_id = None
        self.discriminator = None
        if auth is not None:
            self.auth = auth
        if cloudspace is not None:
            self.cloudspace = cloudspace
        if created_at is not None:
            self.created_at = created_at
        if custom_domain is not None:
            self.custom_domain = custom_domain
        if job is not None:
            self.job = job
        if managed is not None:
            self.managed = managed
        if name is not None:
            self.name = name
        if openai is not None:
            self.openai = openai
        if ports is not None:
            self.ports = ports
        if prewarm is not None:
            self.prewarm = prewarm
        if proxy is not None:
            self.proxy = proxy
        if updated_at is not None:
            self.updated_at = updated_at
        if urls is not None:
            self.urls = urls
        if user_id is not None:
            self.user_id = user_id

    @property
    def auth(self) -> 'V1EndpointAuth':
        """Gets the auth of this EndpointsIdBody.  # noqa: E501


        :return: The auth of this EndpointsIdBody.  # noqa: E501
        :rtype: V1EndpointAuth
        """
        return self._auth

    @auth.setter
    def auth(self, auth: 'V1EndpointAuth'):
        """Sets the auth of this EndpointsIdBody.


        :param auth: The auth of this EndpointsIdBody.  # noqa: E501
        :type: V1EndpointAuth
        """

        self._auth = auth

    @property
    def cloudspace(self) -> 'V1UpstreamCloudSpace':
        """Gets the cloudspace of this EndpointsIdBody.  # noqa: E501


        :return: The cloudspace of this EndpointsIdBody.  # noqa: E501
        :rtype: V1UpstreamCloudSpace
        """
        return self._cloudspace

    @cloudspace.setter
    def cloudspace(self, cloudspace: 'V1UpstreamCloudSpace'):
        """Sets the cloudspace of this EndpointsIdBody.


        :param cloudspace: The cloudspace of this EndpointsIdBody.  # noqa: E501
        :type: V1UpstreamCloudSpace
        """

        self._cloudspace = cloudspace

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this EndpointsIdBody.  # noqa: E501


        :return: The created_at of this EndpointsIdBody.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this EndpointsIdBody.


        :param created_at: The created_at of this EndpointsIdBody.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def custom_domain(self) -> 'str':
        """Gets the custom_domain of this EndpointsIdBody.  # noqa: E501


        :return: The custom_domain of this EndpointsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._custom_domain

    @custom_domain.setter
    def custom_domain(self, custom_domain: 'str'):
        """Sets the custom_domain of this EndpointsIdBody.


        :param custom_domain: The custom_domain of this EndpointsIdBody.  # noqa: E501
        :type: str
        """

        self._custom_domain = custom_domain

    @property
    def job(self) -> 'V1UpstreamJob':
        """Gets the job of this EndpointsIdBody.  # noqa: E501


        :return: The job of this EndpointsIdBody.  # noqa: E501
        :rtype: V1UpstreamJob
        """
        return self._job

    @job.setter
    def job(self, job: 'V1UpstreamJob'):
        """Sets the job of this EndpointsIdBody.


        :param job: The job of this EndpointsIdBody.  # noqa: E501
        :type: V1UpstreamJob
        """

        self._job = job

    @property
    def managed(self) -> 'V1UpstreamManaged':
        """Gets the managed of this EndpointsIdBody.  # noqa: E501


        :return: The managed of this EndpointsIdBody.  # noqa: E501
        :rtype: V1UpstreamManaged
        """
        return self._managed

    @managed.setter
    def managed(self, managed: 'V1UpstreamManaged'):
        """Sets the managed of this EndpointsIdBody.


        :param managed: The managed of this EndpointsIdBody.  # noqa: E501
        :type: V1UpstreamManaged
        """

        self._managed = managed

    @property
    def name(self) -> 'str':
        """Gets the name of this EndpointsIdBody.  # noqa: E501


        :return: The name of this EndpointsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this EndpointsIdBody.


        :param name: The name of this EndpointsIdBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def openai(self) -> 'V1UpstreamOpenAI':
        """Gets the openai of this EndpointsIdBody.  # noqa: E501


        :return: The openai of this EndpointsIdBody.  # noqa: E501
        :rtype: V1UpstreamOpenAI
        """
        return self._openai

    @openai.setter
    def openai(self, openai: 'V1UpstreamOpenAI'):
        """Sets the openai of this EndpointsIdBody.


        :param openai: The openai of this EndpointsIdBody.  # noqa: E501
        :type: V1UpstreamOpenAI
        """

        self._openai = openai

    @property
    def ports(self) -> 'list[str]':
        """Gets the ports of this EndpointsIdBody.  # noqa: E501


        :return: The ports of this EndpointsIdBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._ports

    @ports.setter
    def ports(self, ports: 'list[str]'):
        """Sets the ports of this EndpointsIdBody.


        :param ports: The ports of this EndpointsIdBody.  # noqa: E501
        :type: list[str]
        """

        self._ports = ports

    @property
    def prewarm(self) -> 'V1EndpointPrewarm':
        """Gets the prewarm of this EndpointsIdBody.  # noqa: E501


        :return: The prewarm of this EndpointsIdBody.  # noqa: E501
        :rtype: V1EndpointPrewarm
        """
        return self._prewarm

    @prewarm.setter
    def prewarm(self, prewarm: 'V1EndpointPrewarm'):
        """Sets the prewarm of this EndpointsIdBody.


        :param prewarm: The prewarm of this EndpointsIdBody.  # noqa: E501
        :type: V1EndpointPrewarm
        """

        self._prewarm = prewarm

    @property
    def proxy(self) -> 'bool':
        """Gets the proxy of this EndpointsIdBody.  # noqa: E501


        :return: The proxy of this EndpointsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._proxy

    @proxy.setter
    def proxy(self, proxy: 'bool'):
        """Sets the proxy of this EndpointsIdBody.


        :param proxy: The proxy of this EndpointsIdBody.  # noqa: E501
        :type: bool
        """

        self._proxy = proxy

    @property
    def updated_at(self) -> 'datetime':
        """Gets the updated_at of this EndpointsIdBody.  # noqa: E501


        :return: The updated_at of this EndpointsIdBody.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: 'datetime'):
        """Sets the updated_at of this EndpointsIdBody.


        :param updated_at: The updated_at of this EndpointsIdBody.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def urls(self) -> 'list[str]':
        """Gets the urls of this EndpointsIdBody.  # noqa: E501


        :return: The urls of this EndpointsIdBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._urls

    @urls.setter
    def urls(self, urls: 'list[str]'):
        """Sets the urls of this EndpointsIdBody.


        :param urls: The urls of this EndpointsIdBody.  # noqa: E501
        :type: list[str]
        """

        self._urls = urls

    @property
    def user_id(self) -> 'str':
        """Gets the user_id of this EndpointsIdBody.  # noqa: E501


        :return: The user_id of this EndpointsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: 'str'):
        """Sets the user_id of this EndpointsIdBody.


        :param user_id: The user_id of this EndpointsIdBody.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EndpointsIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'EndpointsIdBody') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, EndpointsIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'EndpointsIdBody') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
