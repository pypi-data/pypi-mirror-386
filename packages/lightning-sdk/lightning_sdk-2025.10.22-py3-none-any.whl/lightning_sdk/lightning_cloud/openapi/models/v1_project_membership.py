# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1ProjectMembership(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'avatar_url': 'str',
        'balance': 'float',
        'created_at': 'datetime',
        'creator_id': 'str',
        'current_storage_bytes': 'str',
        'datastore_count': 'str',
        'description': 'str',
        'display_name': 'str',
        'email': 'str',
        'first_name': 'str',
        'free_credits_enabled': 'bool',
        'free_storage_bytes': 'str',
        'inactive': 'bool',
        'is_default': 'bool',
        'job_count': 'str',
        'job_title': 'str',
        'last_name': 'str',
        'membership_count': 'str',
        'name': 'str',
        'next_free_credits_grant': 'str',
        'organization': 'str',
        'organization_billing_enabled': 'bool',
        'owner_id': 'str',
        'owner_type': 'V1OwnerType',
        'project_id': 'str',
        'quotas': 'V1Quotas',
        'roles': 'list[V1Role]',
        'updated_at': 'datetime',
        'user_id': 'str',
        'username': 'str'
    }

    attribute_map = {
        'avatar_url': 'avatarUrl',
        'balance': 'balance',
        'created_at': 'createdAt',
        'creator_id': 'creatorId',
        'current_storage_bytes': 'currentStorageBytes',
        'datastore_count': 'datastoreCount',
        'description': 'description',
        'display_name': 'displayName',
        'email': 'email',
        'first_name': 'firstName',
        'free_credits_enabled': 'freeCreditsEnabled',
        'free_storage_bytes': 'freeStorageBytes',
        'inactive': 'inactive',
        'is_default': 'isDefault',
        'job_count': 'jobCount',
        'job_title': 'jobTitle',
        'last_name': 'lastName',
        'membership_count': 'membershipCount',
        'name': 'name',
        'next_free_credits_grant': 'nextFreeCreditsGrant',
        'organization': 'organization',
        'organization_billing_enabled': 'organizationBillingEnabled',
        'owner_id': 'ownerId',
        'owner_type': 'ownerType',
        'project_id': 'projectId',
        'quotas': 'quotas',
        'roles': 'roles',
        'updated_at': 'updatedAt',
        'user_id': 'userId',
        'username': 'username'
    }

    def __init__(self, avatar_url: 'str' =None, balance: 'float' =None, created_at: 'datetime' =None, creator_id: 'str' =None, current_storage_bytes: 'str' =None, datastore_count: 'str' =None, description: 'str' =None, display_name: 'str' =None, email: 'str' =None, first_name: 'str' =None, free_credits_enabled: 'bool' =None, free_storage_bytes: 'str' =None, inactive: 'bool' =None, is_default: 'bool' =None, job_count: 'str' =None, job_title: 'str' =None, last_name: 'str' =None, membership_count: 'str' =None, name: 'str' =None, next_free_credits_grant: 'str' =None, organization: 'str' =None, organization_billing_enabled: 'bool' =None, owner_id: 'str' =None, owner_type: 'V1OwnerType' =None, project_id: 'str' =None, quotas: 'V1Quotas' =None, roles: 'list[V1Role]' =None, updated_at: 'datetime' =None, user_id: 'str' =None, username: 'str' =None):  # noqa: E501
        """V1ProjectMembership - a model defined in Swagger"""  # noqa: E501
        self._avatar_url = None
        self._balance = None
        self._created_at = None
        self._creator_id = None
        self._current_storage_bytes = None
        self._datastore_count = None
        self._description = None
        self._display_name = None
        self._email = None
        self._first_name = None
        self._free_credits_enabled = None
        self._free_storage_bytes = None
        self._inactive = None
        self._is_default = None
        self._job_count = None
        self._job_title = None
        self._last_name = None
        self._membership_count = None
        self._name = None
        self._next_free_credits_grant = None
        self._organization = None
        self._organization_billing_enabled = None
        self._owner_id = None
        self._owner_type = None
        self._project_id = None
        self._quotas = None
        self._roles = None
        self._updated_at = None
        self._user_id = None
        self._username = None
        self.discriminator = None
        if avatar_url is not None:
            self.avatar_url = avatar_url
        if balance is not None:
            self.balance = balance
        if created_at is not None:
            self.created_at = created_at
        if creator_id is not None:
            self.creator_id = creator_id
        if current_storage_bytes is not None:
            self.current_storage_bytes = current_storage_bytes
        if datastore_count is not None:
            self.datastore_count = datastore_count
        if description is not None:
            self.description = description
        if display_name is not None:
            self.display_name = display_name
        if email is not None:
            self.email = email
        if first_name is not None:
            self.first_name = first_name
        if free_credits_enabled is not None:
            self.free_credits_enabled = free_credits_enabled
        if free_storage_bytes is not None:
            self.free_storage_bytes = free_storage_bytes
        if inactive is not None:
            self.inactive = inactive
        if is_default is not None:
            self.is_default = is_default
        if job_count is not None:
            self.job_count = job_count
        if job_title is not None:
            self.job_title = job_title
        if last_name is not None:
            self.last_name = last_name
        if membership_count is not None:
            self.membership_count = membership_count
        if name is not None:
            self.name = name
        if next_free_credits_grant is not None:
            self.next_free_credits_grant = next_free_credits_grant
        if organization is not None:
            self.organization = organization
        if organization_billing_enabled is not None:
            self.organization_billing_enabled = organization_billing_enabled
        if owner_id is not None:
            self.owner_id = owner_id
        if owner_type is not None:
            self.owner_type = owner_type
        if project_id is not None:
            self.project_id = project_id
        if quotas is not None:
            self.quotas = quotas
        if roles is not None:
            self.roles = roles
        if updated_at is not None:
            self.updated_at = updated_at
        if user_id is not None:
            self.user_id = user_id
        if username is not None:
            self.username = username

    @property
    def avatar_url(self) -> 'str':
        """Gets the avatar_url of this V1ProjectMembership.  # noqa: E501


        :return: The avatar_url of this V1ProjectMembership.  # noqa: E501
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url: 'str'):
        """Sets the avatar_url of this V1ProjectMembership.


        :param avatar_url: The avatar_url of this V1ProjectMembership.  # noqa: E501
        :type: str
        """

        self._avatar_url = avatar_url

    @property
    def balance(self) -> 'float':
        """Gets the balance of this V1ProjectMembership.  # noqa: E501


        :return: The balance of this V1ProjectMembership.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance: 'float'):
        """Sets the balance of this V1ProjectMembership.


        :param balance: The balance of this V1ProjectMembership.  # noqa: E501
        :type: float
        """

        self._balance = balance

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this V1ProjectMembership.  # noqa: E501


        :return: The created_at of this V1ProjectMembership.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this V1ProjectMembership.


        :param created_at: The created_at of this V1ProjectMembership.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def creator_id(self) -> 'str':
        """Gets the creator_id of this V1ProjectMembership.  # noqa: E501


        :return: The creator_id of this V1ProjectMembership.  # noqa: E501
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id: 'str'):
        """Sets the creator_id of this V1ProjectMembership.


        :param creator_id: The creator_id of this V1ProjectMembership.  # noqa: E501
        :type: str
        """

        self._creator_id = creator_id

    @property
    def current_storage_bytes(self) -> 'str':
        """Gets the current_storage_bytes of this V1ProjectMembership.  # noqa: E501


        :return: The current_storage_bytes of this V1ProjectMembership.  # noqa: E501
        :rtype: str
        """
        return self._current_storage_bytes

    @current_storage_bytes.setter
    def current_storage_bytes(self, current_storage_bytes: 'str'):
        """Sets the current_storage_bytes of this V1ProjectMembership.


        :param current_storage_bytes: The current_storage_bytes of this V1ProjectMembership.  # noqa: E501
        :type: str
        """

        self._current_storage_bytes = current_storage_bytes

    @property
    def datastore_count(self) -> 'str':
        """Gets the datastore_count of this V1ProjectMembership.  # noqa: E501


        :return: The datastore_count of this V1ProjectMembership.  # noqa: E501
        :rtype: str
        """
        return self._datastore_count

    @datastore_count.setter
    def datastore_count(self, datastore_count: 'str'):
        """Sets the datastore_count of this V1ProjectMembership.


        :param datastore_count: The datastore_count of this V1ProjectMembership.  # noqa: E501
        :type: str
        """

        self._datastore_count = datastore_count

    @property
    def description(self) -> 'str':
        """Gets the description of this V1ProjectMembership.  # noqa: E501


        :return: The description of this V1ProjectMembership.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: 'str'):
        """Sets the description of this V1ProjectMembership.


        :param description: The description of this V1ProjectMembership.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def display_name(self) -> 'str':
        """Gets the display_name of this V1ProjectMembership.  # noqa: E501


        :return: The display_name of this V1ProjectMembership.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: 'str'):
        """Sets the display_name of this V1ProjectMembership.


        :param display_name: The display_name of this V1ProjectMembership.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def email(self) -> 'str':
        """Gets the email of this V1ProjectMembership.  # noqa: E501


        :return: The email of this V1ProjectMembership.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: 'str'):
        """Sets the email of this V1ProjectMembership.


        :param email: The email of this V1ProjectMembership.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def first_name(self) -> 'str':
        """Gets the first_name of this V1ProjectMembership.  # noqa: E501


        :return: The first_name of this V1ProjectMembership.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name: 'str'):
        """Sets the first_name of this V1ProjectMembership.


        :param first_name: The first_name of this V1ProjectMembership.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def free_credits_enabled(self) -> 'bool':
        """Gets the free_credits_enabled of this V1ProjectMembership.  # noqa: E501


        :return: The free_credits_enabled of this V1ProjectMembership.  # noqa: E501
        :rtype: bool
        """
        return self._free_credits_enabled

    @free_credits_enabled.setter
    def free_credits_enabled(self, free_credits_enabled: 'bool'):
        """Sets the free_credits_enabled of this V1ProjectMembership.


        :param free_credits_enabled: The free_credits_enabled of this V1ProjectMembership.  # noqa: E501
        :type: bool
        """

        self._free_credits_enabled = free_credits_enabled

    @property
    def free_storage_bytes(self) -> 'str':
        """Gets the free_storage_bytes of this V1ProjectMembership.  # noqa: E501


        :return: The free_storage_bytes of this V1ProjectMembership.  # noqa: E501
        :rtype: str
        """
        return self._free_storage_bytes

    @free_storage_bytes.setter
    def free_storage_bytes(self, free_storage_bytes: 'str'):
        """Sets the free_storage_bytes of this V1ProjectMembership.


        :param free_storage_bytes: The free_storage_bytes of this V1ProjectMembership.  # noqa: E501
        :type: str
        """

        self._free_storage_bytes = free_storage_bytes

    @property
    def inactive(self) -> 'bool':
        """Gets the inactive of this V1ProjectMembership.  # noqa: E501


        :return: The inactive of this V1ProjectMembership.  # noqa: E501
        :rtype: bool
        """
        return self._inactive

    @inactive.setter
    def inactive(self, inactive: 'bool'):
        """Sets the inactive of this V1ProjectMembership.


        :param inactive: The inactive of this V1ProjectMembership.  # noqa: E501
        :type: bool
        """

        self._inactive = inactive

    @property
    def is_default(self) -> 'bool':
        """Gets the is_default of this V1ProjectMembership.  # noqa: E501


        :return: The is_default of this V1ProjectMembership.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default: 'bool'):
        """Sets the is_default of this V1ProjectMembership.


        :param is_default: The is_default of this V1ProjectMembership.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def job_count(self) -> 'str':
        """Gets the job_count of this V1ProjectMembership.  # noqa: E501


        :return: The job_count of this V1ProjectMembership.  # noqa: E501
        :rtype: str
        """
        return self._job_count

    @job_count.setter
    def job_count(self, job_count: 'str'):
        """Sets the job_count of this V1ProjectMembership.


        :param job_count: The job_count of this V1ProjectMembership.  # noqa: E501
        :type: str
        """

        self._job_count = job_count

    @property
    def job_title(self) -> 'str':
        """Gets the job_title of this V1ProjectMembership.  # noqa: E501


        :return: The job_title of this V1ProjectMembership.  # noqa: E501
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title: 'str'):
        """Sets the job_title of this V1ProjectMembership.


        :param job_title: The job_title of this V1ProjectMembership.  # noqa: E501
        :type: str
        """

        self._job_title = job_title

    @property
    def last_name(self) -> 'str':
        """Gets the last_name of this V1ProjectMembership.  # noqa: E501


        :return: The last_name of this V1ProjectMembership.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name: 'str'):
        """Sets the last_name of this V1ProjectMembership.


        :param last_name: The last_name of this V1ProjectMembership.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def membership_count(self) -> 'str':
        """Gets the membership_count of this V1ProjectMembership.  # noqa: E501


        :return: The membership_count of this V1ProjectMembership.  # noqa: E501
        :rtype: str
        """
        return self._membership_count

    @membership_count.setter
    def membership_count(self, membership_count: 'str'):
        """Sets the membership_count of this V1ProjectMembership.


        :param membership_count: The membership_count of this V1ProjectMembership.  # noqa: E501
        :type: str
        """

        self._membership_count = membership_count

    @property
    def name(self) -> 'str':
        """Gets the name of this V1ProjectMembership.  # noqa: E501


        :return: The name of this V1ProjectMembership.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1ProjectMembership.


        :param name: The name of this V1ProjectMembership.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def next_free_credits_grant(self) -> 'str':
        """Gets the next_free_credits_grant of this V1ProjectMembership.  # noqa: E501


        :return: The next_free_credits_grant of this V1ProjectMembership.  # noqa: E501
        :rtype: str
        """
        return self._next_free_credits_grant

    @next_free_credits_grant.setter
    def next_free_credits_grant(self, next_free_credits_grant: 'str'):
        """Sets the next_free_credits_grant of this V1ProjectMembership.


        :param next_free_credits_grant: The next_free_credits_grant of this V1ProjectMembership.  # noqa: E501
        :type: str
        """

        self._next_free_credits_grant = next_free_credits_grant

    @property
    def organization(self) -> 'str':
        """Gets the organization of this V1ProjectMembership.  # noqa: E501


        :return: The organization of this V1ProjectMembership.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization: 'str'):
        """Sets the organization of this V1ProjectMembership.


        :param organization: The organization of this V1ProjectMembership.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def organization_billing_enabled(self) -> 'bool':
        """Gets the organization_billing_enabled of this V1ProjectMembership.  # noqa: E501


        :return: The organization_billing_enabled of this V1ProjectMembership.  # noqa: E501
        :rtype: bool
        """
        return self._organization_billing_enabled

    @organization_billing_enabled.setter
    def organization_billing_enabled(self, organization_billing_enabled: 'bool'):
        """Sets the organization_billing_enabled of this V1ProjectMembership.


        :param organization_billing_enabled: The organization_billing_enabled of this V1ProjectMembership.  # noqa: E501
        :type: bool
        """

        self._organization_billing_enabled = organization_billing_enabled

    @property
    def owner_id(self) -> 'str':
        """Gets the owner_id of this V1ProjectMembership.  # noqa: E501


        :return: The owner_id of this V1ProjectMembership.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id: 'str'):
        """Sets the owner_id of this V1ProjectMembership.


        :param owner_id: The owner_id of this V1ProjectMembership.  # noqa: E501
        :type: str
        """

        self._owner_id = owner_id

    @property
    def owner_type(self) -> 'V1OwnerType':
        """Gets the owner_type of this V1ProjectMembership.  # noqa: E501


        :return: The owner_type of this V1ProjectMembership.  # noqa: E501
        :rtype: V1OwnerType
        """
        return self._owner_type

    @owner_type.setter
    def owner_type(self, owner_type: 'V1OwnerType'):
        """Sets the owner_type of this V1ProjectMembership.


        :param owner_type: The owner_type of this V1ProjectMembership.  # noqa: E501
        :type: V1OwnerType
        """

        self._owner_type = owner_type

    @property
    def project_id(self) -> 'str':
        """Gets the project_id of this V1ProjectMembership.  # noqa: E501


        :return: The project_id of this V1ProjectMembership.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: 'str'):
        """Sets the project_id of this V1ProjectMembership.


        :param project_id: The project_id of this V1ProjectMembership.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def quotas(self) -> 'V1Quotas':
        """Gets the quotas of this V1ProjectMembership.  # noqa: E501


        :return: The quotas of this V1ProjectMembership.  # noqa: E501
        :rtype: V1Quotas
        """
        return self._quotas

    @quotas.setter
    def quotas(self, quotas: 'V1Quotas'):
        """Sets the quotas of this V1ProjectMembership.


        :param quotas: The quotas of this V1ProjectMembership.  # noqa: E501
        :type: V1Quotas
        """

        self._quotas = quotas

    @property
    def roles(self) -> 'list[V1Role]':
        """Gets the roles of this V1ProjectMembership.  # noqa: E501


        :return: The roles of this V1ProjectMembership.  # noqa: E501
        :rtype: list[V1Role]
        """
        return self._roles

    @roles.setter
    def roles(self, roles: 'list[V1Role]'):
        """Sets the roles of this V1ProjectMembership.


        :param roles: The roles of this V1ProjectMembership.  # noqa: E501
        :type: list[V1Role]
        """

        self._roles = roles

    @property
    def updated_at(self) -> 'datetime':
        """Gets the updated_at of this V1ProjectMembership.  # noqa: E501


        :return: The updated_at of this V1ProjectMembership.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: 'datetime'):
        """Sets the updated_at of this V1ProjectMembership.


        :param updated_at: The updated_at of this V1ProjectMembership.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def user_id(self) -> 'str':
        """Gets the user_id of this V1ProjectMembership.  # noqa: E501


        :return: The user_id of this V1ProjectMembership.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: 'str'):
        """Sets the user_id of this V1ProjectMembership.


        :param user_id: The user_id of this V1ProjectMembership.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def username(self) -> 'str':
        """Gets the username of this V1ProjectMembership.  # noqa: E501


        :return: The username of this V1ProjectMembership.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: 'str'):
        """Sets the username of this V1ProjectMembership.


        :param username: The username of this V1ProjectMembership.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1ProjectMembership, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1ProjectMembership') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ProjectMembership):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1ProjectMembership') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
