# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1Volume(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attached_at': 'datetime',
        'availability_zone': 'str',
        'detached_at': 'datetime',
        'encrypted': 'bool',
        'iops': 'str',
        'metadata': 'V1Metadata',
        'path': 'str',
        'provider': 'str',
        'provider_id': 'str',
        'region': 'str',
        'resource_id': 'str',
        'resource_type': 'str',
        'retention_period': 'str',
        'server_id': 'str',
        'size_gb': 'str',
        'state': 'V1VolumeState',
        'subnet_id': 'str',
        'throughput': 'str',
        'type': 'str',
        'updated_at': 'datetime',
        'user_id': 'str'
    }

    attribute_map = {
        'attached_at': 'attachedAt',
        'availability_zone': 'availabilityZone',
        'detached_at': 'detachedAt',
        'encrypted': 'encrypted',
        'iops': 'iops',
        'metadata': 'metadata',
        'path': 'path',
        'provider': 'provider',
        'provider_id': 'providerId',
        'region': 'region',
        'resource_id': 'resourceId',
        'resource_type': 'resourceType',
        'retention_period': 'retentionPeriod',
        'server_id': 'serverId',
        'size_gb': 'sizeGb',
        'state': 'state',
        'subnet_id': 'subnetId',
        'throughput': 'throughput',
        'type': 'type',
        'updated_at': 'updatedAt',
        'user_id': 'userId'
    }

    def __init__(self, attached_at: 'datetime' =None, availability_zone: 'str' =None, detached_at: 'datetime' =None, encrypted: 'bool' =None, iops: 'str' =None, metadata: 'V1Metadata' =None, path: 'str' =None, provider: 'str' =None, provider_id: 'str' =None, region: 'str' =None, resource_id: 'str' =None, resource_type: 'str' =None, retention_period: 'str' =None, server_id: 'str' =None, size_gb: 'str' =None, state: 'V1VolumeState' =None, subnet_id: 'str' =None, throughput: 'str' =None, type: 'str' =None, updated_at: 'datetime' =None, user_id: 'str' =None):  # noqa: E501
        """V1Volume - a model defined in Swagger"""  # noqa: E501
        self._attached_at = None
        self._availability_zone = None
        self._detached_at = None
        self._encrypted = None
        self._iops = None
        self._metadata = None
        self._path = None
        self._provider = None
        self._provider_id = None
        self._region = None
        self._resource_id = None
        self._resource_type = None
        self._retention_period = None
        self._server_id = None
        self._size_gb = None
        self._state = None
        self._subnet_id = None
        self._throughput = None
        self._type = None
        self._updated_at = None
        self._user_id = None
        self.discriminator = None
        if attached_at is not None:
            self.attached_at = attached_at
        if availability_zone is not None:
            self.availability_zone = availability_zone
        if detached_at is not None:
            self.detached_at = detached_at
        if encrypted is not None:
            self.encrypted = encrypted
        if iops is not None:
            self.iops = iops
        if metadata is not None:
            self.metadata = metadata
        if path is not None:
            self.path = path
        if provider is not None:
            self.provider = provider
        if provider_id is not None:
            self.provider_id = provider_id
        if region is not None:
            self.region = region
        if resource_id is not None:
            self.resource_id = resource_id
        if resource_type is not None:
            self.resource_type = resource_type
        if retention_period is not None:
            self.retention_period = retention_period
        if server_id is not None:
            self.server_id = server_id
        if size_gb is not None:
            self.size_gb = size_gb
        if state is not None:
            self.state = state
        if subnet_id is not None:
            self.subnet_id = subnet_id
        if throughput is not None:
            self.throughput = throughput
        if type is not None:
            self.type = type
        if updated_at is not None:
            self.updated_at = updated_at
        if user_id is not None:
            self.user_id = user_id

    @property
    def attached_at(self) -> 'datetime':
        """Gets the attached_at of this V1Volume.  # noqa: E501


        :return: The attached_at of this V1Volume.  # noqa: E501
        :rtype: datetime
        """
        return self._attached_at

    @attached_at.setter
    def attached_at(self, attached_at: 'datetime'):
        """Sets the attached_at of this V1Volume.


        :param attached_at: The attached_at of this V1Volume.  # noqa: E501
        :type: datetime
        """

        self._attached_at = attached_at

    @property
    def availability_zone(self) -> 'str':
        """Gets the availability_zone of this V1Volume.  # noqa: E501


        :return: The availability_zone of this V1Volume.  # noqa: E501
        :rtype: str
        """
        return self._availability_zone

    @availability_zone.setter
    def availability_zone(self, availability_zone: 'str'):
        """Sets the availability_zone of this V1Volume.


        :param availability_zone: The availability_zone of this V1Volume.  # noqa: E501
        :type: str
        """

        self._availability_zone = availability_zone

    @property
    def detached_at(self) -> 'datetime':
        """Gets the detached_at of this V1Volume.  # noqa: E501


        :return: The detached_at of this V1Volume.  # noqa: E501
        :rtype: datetime
        """
        return self._detached_at

    @detached_at.setter
    def detached_at(self, detached_at: 'datetime'):
        """Sets the detached_at of this V1Volume.


        :param detached_at: The detached_at of this V1Volume.  # noqa: E501
        :type: datetime
        """

        self._detached_at = detached_at

    @property
    def encrypted(self) -> 'bool':
        """Gets the encrypted of this V1Volume.  # noqa: E501


        :return: The encrypted of this V1Volume.  # noqa: E501
        :rtype: bool
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted: 'bool'):
        """Sets the encrypted of this V1Volume.


        :param encrypted: The encrypted of this V1Volume.  # noqa: E501
        :type: bool
        """

        self._encrypted = encrypted

    @property
    def iops(self) -> 'str':
        """Gets the iops of this V1Volume.  # noqa: E501


        :return: The iops of this V1Volume.  # noqa: E501
        :rtype: str
        """
        return self._iops

    @iops.setter
    def iops(self, iops: 'str'):
        """Sets the iops of this V1Volume.


        :param iops: The iops of this V1Volume.  # noqa: E501
        :type: str
        """

        self._iops = iops

    @property
    def metadata(self) -> 'V1Metadata':
        """Gets the metadata of this V1Volume.  # noqa: E501


        :return: The metadata of this V1Volume.  # noqa: E501
        :rtype: V1Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: 'V1Metadata'):
        """Sets the metadata of this V1Volume.


        :param metadata: The metadata of this V1Volume.  # noqa: E501
        :type: V1Metadata
        """

        self._metadata = metadata

    @property
    def path(self) -> 'str':
        """Gets the path of this V1Volume.  # noqa: E501


        :return: The path of this V1Volume.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: 'str'):
        """Sets the path of this V1Volume.


        :param path: The path of this V1Volume.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def provider(self) -> 'str':
        """Gets the provider of this V1Volume.  # noqa: E501


        :return: The provider of this V1Volume.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider: 'str'):
        """Sets the provider of this V1Volume.


        :param provider: The provider of this V1Volume.  # noqa: E501
        :type: str
        """

        self._provider = provider

    @property
    def provider_id(self) -> 'str':
        """Gets the provider_id of this V1Volume.  # noqa: E501


        :return: The provider_id of this V1Volume.  # noqa: E501
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id: 'str'):
        """Sets the provider_id of this V1Volume.


        :param provider_id: The provider_id of this V1Volume.  # noqa: E501
        :type: str
        """

        self._provider_id = provider_id

    @property
    def region(self) -> 'str':
        """Gets the region of this V1Volume.  # noqa: E501


        :return: The region of this V1Volume.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region: 'str'):
        """Sets the region of this V1Volume.


        :param region: The region of this V1Volume.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def resource_id(self) -> 'str':
        """Gets the resource_id of this V1Volume.  # noqa: E501


        :return: The resource_id of this V1Volume.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id: 'str'):
        """Sets the resource_id of this V1Volume.


        :param resource_id: The resource_id of this V1Volume.  # noqa: E501
        :type: str
        """

        self._resource_id = resource_id

    @property
    def resource_type(self) -> 'str':
        """Gets the resource_type of this V1Volume.  # noqa: E501


        :return: The resource_type of this V1Volume.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type: 'str'):
        """Sets the resource_type of this V1Volume.


        :param resource_type: The resource_type of this V1Volume.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def retention_period(self) -> 'str':
        """Gets the retention_period of this V1Volume.  # noqa: E501


        :return: The retention_period of this V1Volume.  # noqa: E501
        :rtype: str
        """
        return self._retention_period

    @retention_period.setter
    def retention_period(self, retention_period: 'str'):
        """Sets the retention_period of this V1Volume.


        :param retention_period: The retention_period of this V1Volume.  # noqa: E501
        :type: str
        """

        self._retention_period = retention_period

    @property
    def server_id(self) -> 'str':
        """Gets the server_id of this V1Volume.  # noqa: E501


        :return: The server_id of this V1Volume.  # noqa: E501
        :rtype: str
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id: 'str'):
        """Sets the server_id of this V1Volume.


        :param server_id: The server_id of this V1Volume.  # noqa: E501
        :type: str
        """

        self._server_id = server_id

    @property
    def size_gb(self) -> 'str':
        """Gets the size_gb of this V1Volume.  # noqa: E501


        :return: The size_gb of this V1Volume.  # noqa: E501
        :rtype: str
        """
        return self._size_gb

    @size_gb.setter
    def size_gb(self, size_gb: 'str'):
        """Sets the size_gb of this V1Volume.


        :param size_gb: The size_gb of this V1Volume.  # noqa: E501
        :type: str
        """

        self._size_gb = size_gb

    @property
    def state(self) -> 'V1VolumeState':
        """Gets the state of this V1Volume.  # noqa: E501


        :return: The state of this V1Volume.  # noqa: E501
        :rtype: V1VolumeState
        """
        return self._state

    @state.setter
    def state(self, state: 'V1VolumeState'):
        """Sets the state of this V1Volume.


        :param state: The state of this V1Volume.  # noqa: E501
        :type: V1VolumeState
        """

        self._state = state

    @property
    def subnet_id(self) -> 'str':
        """Gets the subnet_id of this V1Volume.  # noqa: E501


        :return: The subnet_id of this V1Volume.  # noqa: E501
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id: 'str'):
        """Sets the subnet_id of this V1Volume.


        :param subnet_id: The subnet_id of this V1Volume.  # noqa: E501
        :type: str
        """

        self._subnet_id = subnet_id

    @property
    def throughput(self) -> 'str':
        """Gets the throughput of this V1Volume.  # noqa: E501


        :return: The throughput of this V1Volume.  # noqa: E501
        :rtype: str
        """
        return self._throughput

    @throughput.setter
    def throughput(self, throughput: 'str'):
        """Sets the throughput of this V1Volume.


        :param throughput: The throughput of this V1Volume.  # noqa: E501
        :type: str
        """

        self._throughput = throughput

    @property
    def type(self) -> 'str':
        """Gets the type of this V1Volume.  # noqa: E501


        :return: The type of this V1Volume.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: 'str'):
        """Sets the type of this V1Volume.


        :param type: The type of this V1Volume.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def updated_at(self) -> 'datetime':
        """Gets the updated_at of this V1Volume.  # noqa: E501


        :return: The updated_at of this V1Volume.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: 'datetime'):
        """Sets the updated_at of this V1Volume.


        :param updated_at: The updated_at of this V1Volume.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def user_id(self) -> 'str':
        """Gets the user_id of this V1Volume.  # noqa: E501


        :return: The user_id of this V1Volume.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: 'str'):
        """Sets the user_id of this V1Volume.


        :param user_id: The user_id of this V1Volume.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1Volume, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1Volume') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Volume):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1Volume') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
