# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1CreatePipelineTemplateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'about_page_content': 'str',
        'description': 'str',
        'image_url': 'str',
        'name': 'str',
        'org_id': 'str',
        'pipeline_id': 'str',
        'project_id': 'str',
        'thumbnail': 'str',
        'thumbnail_file_type': 'str',
        'version': 'int',
        'visibility': 'V1PipelineTemplateVisibilityType'
    }

    attribute_map = {
        'about_page_content': 'aboutPageContent',
        'description': 'description',
        'image_url': 'imageUrl',
        'name': 'name',
        'org_id': 'orgId',
        'pipeline_id': 'pipelineId',
        'project_id': 'projectId',
        'thumbnail': 'thumbnail',
        'thumbnail_file_type': 'thumbnailFileType',
        'version': 'version',
        'visibility': 'visibility'
    }

    def __init__(self, about_page_content: 'str' =None, description: 'str' =None, image_url: 'str' =None, name: 'str' =None, org_id: 'str' =None, pipeline_id: 'str' =None, project_id: 'str' =None, thumbnail: 'str' =None, thumbnail_file_type: 'str' =None, version: 'int' =None, visibility: 'V1PipelineTemplateVisibilityType' =None):  # noqa: E501
        """V1CreatePipelineTemplateRequest - a model defined in Swagger"""  # noqa: E501
        self._about_page_content = None
        self._description = None
        self._image_url = None
        self._name = None
        self._org_id = None
        self._pipeline_id = None
        self._project_id = None
        self._thumbnail = None
        self._thumbnail_file_type = None
        self._version = None
        self._visibility = None
        self.discriminator = None
        if about_page_content is not None:
            self.about_page_content = about_page_content
        if description is not None:
            self.description = description
        if image_url is not None:
            self.image_url = image_url
        if name is not None:
            self.name = name
        if org_id is not None:
            self.org_id = org_id
        if pipeline_id is not None:
            self.pipeline_id = pipeline_id
        if project_id is not None:
            self.project_id = project_id
        if thumbnail is not None:
            self.thumbnail = thumbnail
        if thumbnail_file_type is not None:
            self.thumbnail_file_type = thumbnail_file_type
        if version is not None:
            self.version = version
        if visibility is not None:
            self.visibility = visibility

    @property
    def about_page_content(self) -> 'str':
        """Gets the about_page_content of this V1CreatePipelineTemplateRequest.  # noqa: E501


        :return: The about_page_content of this V1CreatePipelineTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._about_page_content

    @about_page_content.setter
    def about_page_content(self, about_page_content: 'str'):
        """Sets the about_page_content of this V1CreatePipelineTemplateRequest.


        :param about_page_content: The about_page_content of this V1CreatePipelineTemplateRequest.  # noqa: E501
        :type: str
        """

        self._about_page_content = about_page_content

    @property
    def description(self) -> 'str':
        """Gets the description of this V1CreatePipelineTemplateRequest.  # noqa: E501


        :return: The description of this V1CreatePipelineTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: 'str'):
        """Sets the description of this V1CreatePipelineTemplateRequest.


        :param description: The description of this V1CreatePipelineTemplateRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def image_url(self) -> 'str':
        """Gets the image_url of this V1CreatePipelineTemplateRequest.  # noqa: E501


        :return: The image_url of this V1CreatePipelineTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url: 'str'):
        """Sets the image_url of this V1CreatePipelineTemplateRequest.


        :param image_url: The image_url of this V1CreatePipelineTemplateRequest.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def name(self) -> 'str':
        """Gets the name of this V1CreatePipelineTemplateRequest.  # noqa: E501


        :return: The name of this V1CreatePipelineTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1CreatePipelineTemplateRequest.


        :param name: The name of this V1CreatePipelineTemplateRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def org_id(self) -> 'str':
        """Gets the org_id of this V1CreatePipelineTemplateRequest.  # noqa: E501


        :return: The org_id of this V1CreatePipelineTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id: 'str'):
        """Sets the org_id of this V1CreatePipelineTemplateRequest.


        :param org_id: The org_id of this V1CreatePipelineTemplateRequest.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def pipeline_id(self) -> 'str':
        """Gets the pipeline_id of this V1CreatePipelineTemplateRequest.  # noqa: E501


        :return: The pipeline_id of this V1CreatePipelineTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id: 'str'):
        """Sets the pipeline_id of this V1CreatePipelineTemplateRequest.


        :param pipeline_id: The pipeline_id of this V1CreatePipelineTemplateRequest.  # noqa: E501
        :type: str
        """

        self._pipeline_id = pipeline_id

    @property
    def project_id(self) -> 'str':
        """Gets the project_id of this V1CreatePipelineTemplateRequest.  # noqa: E501


        :return: The project_id of this V1CreatePipelineTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: 'str'):
        """Sets the project_id of this V1CreatePipelineTemplateRequest.


        :param project_id: The project_id of this V1CreatePipelineTemplateRequest.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def thumbnail(self) -> 'str':
        """Gets the thumbnail of this V1CreatePipelineTemplateRequest.  # noqa: E501


        :return: The thumbnail of this V1CreatePipelineTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail: 'str'):
        """Sets the thumbnail of this V1CreatePipelineTemplateRequest.


        :param thumbnail: The thumbnail of this V1CreatePipelineTemplateRequest.  # noqa: E501
        :type: str
        """

        self._thumbnail = thumbnail

    @property
    def thumbnail_file_type(self) -> 'str':
        """Gets the thumbnail_file_type of this V1CreatePipelineTemplateRequest.  # noqa: E501


        :return: The thumbnail_file_type of this V1CreatePipelineTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_file_type

    @thumbnail_file_type.setter
    def thumbnail_file_type(self, thumbnail_file_type: 'str'):
        """Sets the thumbnail_file_type of this V1CreatePipelineTemplateRequest.


        :param thumbnail_file_type: The thumbnail_file_type of this V1CreatePipelineTemplateRequest.  # noqa: E501
        :type: str
        """

        self._thumbnail_file_type = thumbnail_file_type

    @property
    def version(self) -> 'int':
        """Gets the version of this V1CreatePipelineTemplateRequest.  # noqa: E501


        :return: The version of this V1CreatePipelineTemplateRequest.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version: 'int'):
        """Sets the version of this V1CreatePipelineTemplateRequest.


        :param version: The version of this V1CreatePipelineTemplateRequest.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def visibility(self) -> 'V1PipelineTemplateVisibilityType':
        """Gets the visibility of this V1CreatePipelineTemplateRequest.  # noqa: E501


        :return: The visibility of this V1CreatePipelineTemplateRequest.  # noqa: E501
        :rtype: V1PipelineTemplateVisibilityType
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility: 'V1PipelineTemplateVisibilityType'):
        """Sets the visibility of this V1CreatePipelineTemplateRequest.


        :param visibility: The visibility of this V1CreatePipelineTemplateRequest.  # noqa: E501
        :type: V1PipelineTemplateVisibilityType
        """

        self._visibility = visibility

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1CreatePipelineTemplateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1CreatePipelineTemplateRequest') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1CreatePipelineTemplateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1CreatePipelineTemplateRequest') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
