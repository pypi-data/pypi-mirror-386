# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1LightningworkStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ip_address': 'str',
        'last_state_status_transition_timestamp': 'datetime',
        'message': 'str',
        'modified_volume': 'bool',
        'number_of_files': 'str',
        'phase': 'V1LightningworkState',
        'reason': 'V1LightningworkStatusReason',
        'server_id': 'str',
        'server_instance_id': 'str',
        'start_timestamp': 'datetime',
        'stop_timestamp': 'datetime',
        'total_cost': 'float',
        'total_size_bytes': 'str'
    }

    attribute_map = {
        'ip_address': 'ipAddress',
        'last_state_status_transition_timestamp': 'lastStateStatusTransitionTimestamp',
        'message': 'message',
        'modified_volume': 'modifiedVolume',
        'number_of_files': 'numberOfFiles',
        'phase': 'phase',
        'reason': 'reason',
        'server_id': 'serverId',
        'server_instance_id': 'serverInstanceId',
        'start_timestamp': 'startTimestamp',
        'stop_timestamp': 'stopTimestamp',
        'total_cost': 'totalCost',
        'total_size_bytes': 'totalSizeBytes'
    }

    def __init__(self, ip_address: 'str' =None, last_state_status_transition_timestamp: 'datetime' =None, message: 'str' =None, modified_volume: 'bool' =None, number_of_files: 'str' =None, phase: 'V1LightningworkState' =None, reason: 'V1LightningworkStatusReason' =None, server_id: 'str' =None, server_instance_id: 'str' =None, start_timestamp: 'datetime' =None, stop_timestamp: 'datetime' =None, total_cost: 'float' =None, total_size_bytes: 'str' =None):  # noqa: E501
        """V1LightningworkStatus - a model defined in Swagger"""  # noqa: E501
        self._ip_address = None
        self._last_state_status_transition_timestamp = None
        self._message = None
        self._modified_volume = None
        self._number_of_files = None
        self._phase = None
        self._reason = None
        self._server_id = None
        self._server_instance_id = None
        self._start_timestamp = None
        self._stop_timestamp = None
        self._total_cost = None
        self._total_size_bytes = None
        self.discriminator = None
        if ip_address is not None:
            self.ip_address = ip_address
        if last_state_status_transition_timestamp is not None:
            self.last_state_status_transition_timestamp = last_state_status_transition_timestamp
        if message is not None:
            self.message = message
        if modified_volume is not None:
            self.modified_volume = modified_volume
        if number_of_files is not None:
            self.number_of_files = number_of_files
        if phase is not None:
            self.phase = phase
        if reason is not None:
            self.reason = reason
        if server_id is not None:
            self.server_id = server_id
        if server_instance_id is not None:
            self.server_instance_id = server_instance_id
        if start_timestamp is not None:
            self.start_timestamp = start_timestamp
        if stop_timestamp is not None:
            self.stop_timestamp = stop_timestamp
        if total_cost is not None:
            self.total_cost = total_cost
        if total_size_bytes is not None:
            self.total_size_bytes = total_size_bytes

    @property
    def ip_address(self) -> 'str':
        """Gets the ip_address of this V1LightningworkStatus.  # noqa: E501


        :return: The ip_address of this V1LightningworkStatus.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address: 'str'):
        """Sets the ip_address of this V1LightningworkStatus.


        :param ip_address: The ip_address of this V1LightningworkStatus.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def last_state_status_transition_timestamp(self) -> 'datetime':
        """Gets the last_state_status_transition_timestamp of this V1LightningworkStatus.  # noqa: E501


        :return: The last_state_status_transition_timestamp of this V1LightningworkStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._last_state_status_transition_timestamp

    @last_state_status_transition_timestamp.setter
    def last_state_status_transition_timestamp(self, last_state_status_transition_timestamp: 'datetime'):
        """Sets the last_state_status_transition_timestamp of this V1LightningworkStatus.


        :param last_state_status_transition_timestamp: The last_state_status_transition_timestamp of this V1LightningworkStatus.  # noqa: E501
        :type: datetime
        """

        self._last_state_status_transition_timestamp = last_state_status_transition_timestamp

    @property
    def message(self) -> 'str':
        """Gets the message of this V1LightningworkStatus.  # noqa: E501


        :return: The message of this V1LightningworkStatus.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: 'str'):
        """Sets the message of this V1LightningworkStatus.


        :param message: The message of this V1LightningworkStatus.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def modified_volume(self) -> 'bool':
        """Gets the modified_volume of this V1LightningworkStatus.  # noqa: E501


        :return: The modified_volume of this V1LightningworkStatus.  # noqa: E501
        :rtype: bool
        """
        return self._modified_volume

    @modified_volume.setter
    def modified_volume(self, modified_volume: 'bool'):
        """Sets the modified_volume of this V1LightningworkStatus.


        :param modified_volume: The modified_volume of this V1LightningworkStatus.  # noqa: E501
        :type: bool
        """

        self._modified_volume = modified_volume

    @property
    def number_of_files(self) -> 'str':
        """Gets the number_of_files of this V1LightningworkStatus.  # noqa: E501


        :return: The number_of_files of this V1LightningworkStatus.  # noqa: E501
        :rtype: str
        """
        return self._number_of_files

    @number_of_files.setter
    def number_of_files(self, number_of_files: 'str'):
        """Sets the number_of_files of this V1LightningworkStatus.


        :param number_of_files: The number_of_files of this V1LightningworkStatus.  # noqa: E501
        :type: str
        """

        self._number_of_files = number_of_files

    @property
    def phase(self) -> 'V1LightningworkState':
        """Gets the phase of this V1LightningworkStatus.  # noqa: E501


        :return: The phase of this V1LightningworkStatus.  # noqa: E501
        :rtype: V1LightningworkState
        """
        return self._phase

    @phase.setter
    def phase(self, phase: 'V1LightningworkState'):
        """Sets the phase of this V1LightningworkStatus.


        :param phase: The phase of this V1LightningworkStatus.  # noqa: E501
        :type: V1LightningworkState
        """

        self._phase = phase

    @property
    def reason(self) -> 'V1LightningworkStatusReason':
        """Gets the reason of this V1LightningworkStatus.  # noqa: E501


        :return: The reason of this V1LightningworkStatus.  # noqa: E501
        :rtype: V1LightningworkStatusReason
        """
        return self._reason

    @reason.setter
    def reason(self, reason: 'V1LightningworkStatusReason'):
        """Sets the reason of this V1LightningworkStatus.


        :param reason: The reason of this V1LightningworkStatus.  # noqa: E501
        :type: V1LightningworkStatusReason
        """

        self._reason = reason

    @property
    def server_id(self) -> 'str':
        """Gets the server_id of this V1LightningworkStatus.  # noqa: E501


        :return: The server_id of this V1LightningworkStatus.  # noqa: E501
        :rtype: str
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id: 'str'):
        """Sets the server_id of this V1LightningworkStatus.


        :param server_id: The server_id of this V1LightningworkStatus.  # noqa: E501
        :type: str
        """

        self._server_id = server_id

    @property
    def server_instance_id(self) -> 'str':
        """Gets the server_instance_id of this V1LightningworkStatus.  # noqa: E501


        :return: The server_instance_id of this V1LightningworkStatus.  # noqa: E501
        :rtype: str
        """
        return self._server_instance_id

    @server_instance_id.setter
    def server_instance_id(self, server_instance_id: 'str'):
        """Sets the server_instance_id of this V1LightningworkStatus.


        :param server_instance_id: The server_instance_id of this V1LightningworkStatus.  # noqa: E501
        :type: str
        """

        self._server_instance_id = server_instance_id

    @property
    def start_timestamp(self) -> 'datetime':
        """Gets the start_timestamp of this V1LightningworkStatus.  # noqa: E501


        :return: The start_timestamp of this V1LightningworkStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._start_timestamp

    @start_timestamp.setter
    def start_timestamp(self, start_timestamp: 'datetime'):
        """Sets the start_timestamp of this V1LightningworkStatus.


        :param start_timestamp: The start_timestamp of this V1LightningworkStatus.  # noqa: E501
        :type: datetime
        """

        self._start_timestamp = start_timestamp

    @property
    def stop_timestamp(self) -> 'datetime':
        """Gets the stop_timestamp of this V1LightningworkStatus.  # noqa: E501


        :return: The stop_timestamp of this V1LightningworkStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._stop_timestamp

    @stop_timestamp.setter
    def stop_timestamp(self, stop_timestamp: 'datetime'):
        """Sets the stop_timestamp of this V1LightningworkStatus.


        :param stop_timestamp: The stop_timestamp of this V1LightningworkStatus.  # noqa: E501
        :type: datetime
        """

        self._stop_timestamp = stop_timestamp

    @property
    def total_cost(self) -> 'float':
        """Gets the total_cost of this V1LightningworkStatus.  # noqa: E501


        :return: The total_cost of this V1LightningworkStatus.  # noqa: E501
        :rtype: float
        """
        return self._total_cost

    @total_cost.setter
    def total_cost(self, total_cost: 'float'):
        """Sets the total_cost of this V1LightningworkStatus.


        :param total_cost: The total_cost of this V1LightningworkStatus.  # noqa: E501
        :type: float
        """

        self._total_cost = total_cost

    @property
    def total_size_bytes(self) -> 'str':
        """Gets the total_size_bytes of this V1LightningworkStatus.  # noqa: E501


        :return: The total_size_bytes of this V1LightningworkStatus.  # noqa: E501
        :rtype: str
        """
        return self._total_size_bytes

    @total_size_bytes.setter
    def total_size_bytes(self, total_size_bytes: 'str'):
        """Sets the total_size_bytes of this V1LightningworkStatus.


        :param total_size_bytes: The total_size_bytes of this V1LightningworkStatus.  # noqa: E501
        :type: str
        """

        self._total_size_bytes = total_size_bytes

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1LightningworkStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1LightningworkStatus') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1LightningworkStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1LightningworkStatus') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
