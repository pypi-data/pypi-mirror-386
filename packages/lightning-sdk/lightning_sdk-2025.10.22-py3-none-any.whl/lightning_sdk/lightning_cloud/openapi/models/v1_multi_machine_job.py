# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1MultiMachineJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cloudspace_id': 'str',
        'created_at': 'datetime',
        'desired_state': 'V1MultiMachineJobState',
        'fault_tolerance': 'V1MultiMachineJobFaultTolerance',
        'id': 'str',
        'machines': 'int',
        'message': 'str',
        'name': 'str',
        'pipeline_id': 'str',
        'project_id': 'str',
        'spec': 'V1JobSpec',
        'state': 'V1MultiMachineJobState',
        'status': 'V1MultiMachineJobStatus',
        'total_cost': 'float',
        'updated_at': 'datetime',
        'user_id': 'str'
    }

    attribute_map = {
        'cloudspace_id': 'cloudspaceId',
        'created_at': 'createdAt',
        'desired_state': 'desiredState',
        'fault_tolerance': 'faultTolerance',
        'id': 'id',
        'machines': 'machines',
        'message': 'message',
        'name': 'name',
        'pipeline_id': 'pipelineId',
        'project_id': 'projectId',
        'spec': 'spec',
        'state': 'state',
        'status': 'status',
        'total_cost': 'totalCost',
        'updated_at': 'updatedAt',
        'user_id': 'userId'
    }

    def __init__(self, cloudspace_id: 'str' =None, created_at: 'datetime' =None, desired_state: 'V1MultiMachineJobState' =None, fault_tolerance: 'V1MultiMachineJobFaultTolerance' =None, id: 'str' =None, machines: 'int' =None, message: 'str' =None, name: 'str' =None, pipeline_id: 'str' =None, project_id: 'str' =None, spec: 'V1JobSpec' =None, state: 'V1MultiMachineJobState' =None, status: 'V1MultiMachineJobStatus' =None, total_cost: 'float' =None, updated_at: 'datetime' =None, user_id: 'str' =None):  # noqa: E501
        """V1MultiMachineJob - a model defined in Swagger"""  # noqa: E501
        self._cloudspace_id = None
        self._created_at = None
        self._desired_state = None
        self._fault_tolerance = None
        self._id = None
        self._machines = None
        self._message = None
        self._name = None
        self._pipeline_id = None
        self._project_id = None
        self._spec = None
        self._state = None
        self._status = None
        self._total_cost = None
        self._updated_at = None
        self._user_id = None
        self.discriminator = None
        if cloudspace_id is not None:
            self.cloudspace_id = cloudspace_id
        if created_at is not None:
            self.created_at = created_at
        if desired_state is not None:
            self.desired_state = desired_state
        if fault_tolerance is not None:
            self.fault_tolerance = fault_tolerance
        if id is not None:
            self.id = id
        if machines is not None:
            self.machines = machines
        if message is not None:
            self.message = message
        if name is not None:
            self.name = name
        if pipeline_id is not None:
            self.pipeline_id = pipeline_id
        if project_id is not None:
            self.project_id = project_id
        if spec is not None:
            self.spec = spec
        if state is not None:
            self.state = state
        if status is not None:
            self.status = status
        if total_cost is not None:
            self.total_cost = total_cost
        if updated_at is not None:
            self.updated_at = updated_at
        if user_id is not None:
            self.user_id = user_id

    @property
    def cloudspace_id(self) -> 'str':
        """Gets the cloudspace_id of this V1MultiMachineJob.  # noqa: E501


        :return: The cloudspace_id of this V1MultiMachineJob.  # noqa: E501
        :rtype: str
        """
        return self._cloudspace_id

    @cloudspace_id.setter
    def cloudspace_id(self, cloudspace_id: 'str'):
        """Sets the cloudspace_id of this V1MultiMachineJob.


        :param cloudspace_id: The cloudspace_id of this V1MultiMachineJob.  # noqa: E501
        :type: str
        """

        self._cloudspace_id = cloudspace_id

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this V1MultiMachineJob.  # noqa: E501


        :return: The created_at of this V1MultiMachineJob.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this V1MultiMachineJob.


        :param created_at: The created_at of this V1MultiMachineJob.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def desired_state(self) -> 'V1MultiMachineJobState':
        """Gets the desired_state of this V1MultiMachineJob.  # noqa: E501


        :return: The desired_state of this V1MultiMachineJob.  # noqa: E501
        :rtype: V1MultiMachineJobState
        """
        return self._desired_state

    @desired_state.setter
    def desired_state(self, desired_state: 'V1MultiMachineJobState'):
        """Sets the desired_state of this V1MultiMachineJob.


        :param desired_state: The desired_state of this V1MultiMachineJob.  # noqa: E501
        :type: V1MultiMachineJobState
        """

        self._desired_state = desired_state

    @property
    def fault_tolerance(self) -> 'V1MultiMachineJobFaultTolerance':
        """Gets the fault_tolerance of this V1MultiMachineJob.  # noqa: E501


        :return: The fault_tolerance of this V1MultiMachineJob.  # noqa: E501
        :rtype: V1MultiMachineJobFaultTolerance
        """
        return self._fault_tolerance

    @fault_tolerance.setter
    def fault_tolerance(self, fault_tolerance: 'V1MultiMachineJobFaultTolerance'):
        """Sets the fault_tolerance of this V1MultiMachineJob.


        :param fault_tolerance: The fault_tolerance of this V1MultiMachineJob.  # noqa: E501
        :type: V1MultiMachineJobFaultTolerance
        """

        self._fault_tolerance = fault_tolerance

    @property
    def id(self) -> 'str':
        """Gets the id of this V1MultiMachineJob.  # noqa: E501


        :return: The id of this V1MultiMachineJob.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1MultiMachineJob.


        :param id: The id of this V1MultiMachineJob.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def machines(self) -> 'int':
        """Gets the machines of this V1MultiMachineJob.  # noqa: E501


        :return: The machines of this V1MultiMachineJob.  # noqa: E501
        :rtype: int
        """
        return self._machines

    @machines.setter
    def machines(self, machines: 'int'):
        """Sets the machines of this V1MultiMachineJob.


        :param machines: The machines of this V1MultiMachineJob.  # noqa: E501
        :type: int
        """

        self._machines = machines

    @property
    def message(self) -> 'str':
        """Gets the message of this V1MultiMachineJob.  # noqa: E501


        :return: The message of this V1MultiMachineJob.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: 'str'):
        """Sets the message of this V1MultiMachineJob.


        :param message: The message of this V1MultiMachineJob.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def name(self) -> 'str':
        """Gets the name of this V1MultiMachineJob.  # noqa: E501


        :return: The name of this V1MultiMachineJob.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1MultiMachineJob.


        :param name: The name of this V1MultiMachineJob.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def pipeline_id(self) -> 'str':
        """Gets the pipeline_id of this V1MultiMachineJob.  # noqa: E501


        :return: The pipeline_id of this V1MultiMachineJob.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id: 'str'):
        """Sets the pipeline_id of this V1MultiMachineJob.


        :param pipeline_id: The pipeline_id of this V1MultiMachineJob.  # noqa: E501
        :type: str
        """

        self._pipeline_id = pipeline_id

    @property
    def project_id(self) -> 'str':
        """Gets the project_id of this V1MultiMachineJob.  # noqa: E501


        :return: The project_id of this V1MultiMachineJob.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: 'str'):
        """Sets the project_id of this V1MultiMachineJob.


        :param project_id: The project_id of this V1MultiMachineJob.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def spec(self) -> 'V1JobSpec':
        """Gets the spec of this V1MultiMachineJob.  # noqa: E501


        :return: The spec of this V1MultiMachineJob.  # noqa: E501
        :rtype: V1JobSpec
        """
        return self._spec

    @spec.setter
    def spec(self, spec: 'V1JobSpec'):
        """Sets the spec of this V1MultiMachineJob.


        :param spec: The spec of this V1MultiMachineJob.  # noqa: E501
        :type: V1JobSpec
        """

        self._spec = spec

    @property
    def state(self) -> 'V1MultiMachineJobState':
        """Gets the state of this V1MultiMachineJob.  # noqa: E501


        :return: The state of this V1MultiMachineJob.  # noqa: E501
        :rtype: V1MultiMachineJobState
        """
        return self._state

    @state.setter
    def state(self, state: 'V1MultiMachineJobState'):
        """Sets the state of this V1MultiMachineJob.


        :param state: The state of this V1MultiMachineJob.  # noqa: E501
        :type: V1MultiMachineJobState
        """

        self._state = state

    @property
    def status(self) -> 'V1MultiMachineJobStatus':
        """Gets the status of this V1MultiMachineJob.  # noqa: E501


        :return: The status of this V1MultiMachineJob.  # noqa: E501
        :rtype: V1MultiMachineJobStatus
        """
        return self._status

    @status.setter
    def status(self, status: 'V1MultiMachineJobStatus'):
        """Sets the status of this V1MultiMachineJob.


        :param status: The status of this V1MultiMachineJob.  # noqa: E501
        :type: V1MultiMachineJobStatus
        """

        self._status = status

    @property
    def total_cost(self) -> 'float':
        """Gets the total_cost of this V1MultiMachineJob.  # noqa: E501


        :return: The total_cost of this V1MultiMachineJob.  # noqa: E501
        :rtype: float
        """
        return self._total_cost

    @total_cost.setter
    def total_cost(self, total_cost: 'float'):
        """Sets the total_cost of this V1MultiMachineJob.


        :param total_cost: The total_cost of this V1MultiMachineJob.  # noqa: E501
        :type: float
        """

        self._total_cost = total_cost

    @property
    def updated_at(self) -> 'datetime':
        """Gets the updated_at of this V1MultiMachineJob.  # noqa: E501


        :return: The updated_at of this V1MultiMachineJob.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: 'datetime'):
        """Sets the updated_at of this V1MultiMachineJob.


        :param updated_at: The updated_at of this V1MultiMachineJob.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def user_id(self) -> 'str':
        """Gets the user_id of this V1MultiMachineJob.  # noqa: E501


        :return: The user_id of this V1MultiMachineJob.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: 'str'):
        """Sets the user_id of this V1MultiMachineJob.


        :param user_id: The user_id of this V1MultiMachineJob.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1MultiMachineJob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1MultiMachineJob') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1MultiMachineJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1MultiMachineJob') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
