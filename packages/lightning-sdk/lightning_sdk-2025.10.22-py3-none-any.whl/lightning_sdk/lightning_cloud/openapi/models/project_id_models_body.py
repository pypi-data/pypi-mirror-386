# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class ProjectIdModelsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'always_create': 'bool',
        'cluster_id': 'str',
        'metadata': 'dict(str, str)',
        'name': 'str',
        'private': 'bool'
    }

    attribute_map = {
        'always_create': 'alwaysCreate',
        'cluster_id': 'clusterId',
        'metadata': 'metadata',
        'name': 'name',
        'private': 'private'
    }

    def __init__(self, always_create: 'bool' =None, cluster_id: 'str' =None, metadata: 'dict(str, str)' =None, name: 'str' =None, private: 'bool' =None):  # noqa: E501
        """ProjectIdModelsBody - a model defined in Swagger"""  # noqa: E501
        self._always_create = None
        self._cluster_id = None
        self._metadata = None
        self._name = None
        self._private = None
        self.discriminator = None
        if always_create is not None:
            self.always_create = always_create
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if metadata is not None:
            self.metadata = metadata
        if name is not None:
            self.name = name
        if private is not None:
            self.private = private

    @property
    def always_create(self) -> 'bool':
        """Gets the always_create of this ProjectIdModelsBody.  # noqa: E501


        :return: The always_create of this ProjectIdModelsBody.  # noqa: E501
        :rtype: bool
        """
        return self._always_create

    @always_create.setter
    def always_create(self, always_create: 'bool'):
        """Sets the always_create of this ProjectIdModelsBody.


        :param always_create: The always_create of this ProjectIdModelsBody.  # noqa: E501
        :type: bool
        """

        self._always_create = always_create

    @property
    def cluster_id(self) -> 'str':
        """Gets the cluster_id of this ProjectIdModelsBody.  # noqa: E501


        :return: The cluster_id of this ProjectIdModelsBody.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id: 'str'):
        """Sets the cluster_id of this ProjectIdModelsBody.


        :param cluster_id: The cluster_id of this ProjectIdModelsBody.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def metadata(self) -> 'dict(str, str)':
        """Gets the metadata of this ProjectIdModelsBody.  # noqa: E501


        :return: The metadata of this ProjectIdModelsBody.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: 'dict(str, str)'):
        """Sets the metadata of this ProjectIdModelsBody.


        :param metadata: The metadata of this ProjectIdModelsBody.  # noqa: E501
        :type: dict(str, str)
        """

        self._metadata = metadata

    @property
    def name(self) -> 'str':
        """Gets the name of this ProjectIdModelsBody.  # noqa: E501


        :return: The name of this ProjectIdModelsBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this ProjectIdModelsBody.


        :param name: The name of this ProjectIdModelsBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def private(self) -> 'bool':
        """Gets the private of this ProjectIdModelsBody.  # noqa: E501


        :return: The private of this ProjectIdModelsBody.  # noqa: E501
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private: 'bool'):
        """Sets the private of this ProjectIdModelsBody.


        :param private: The private of this ProjectIdModelsBody.  # noqa: E501
        :type: bool
        """

        self._private = private

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectIdModelsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'ProjectIdModelsBody') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectIdModelsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'ProjectIdModelsBody') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
