# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1LightningappInstanceSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_entrypoint_file': 'str',
        'artifact_storage_uri': 'str',
        'auth': 'V1LightningAuth',
        'can_download_source_code': 'bool',
        'cloud_space_id': 'str',
        'cluster_id': 'str',
        'compute_config': 'V1ComputeConfig',
        'dependency_cache_key': 'str',
        'desired_state': 'V1LightningappInstanceState',
        'domain': 'str',
        'enable_app_server': 'bool',
        'env': 'list[V1EnvVar]',
        'flow_servers': 'list[V1Flowserver]',
        'image_spec': 'V1ImageSpec',
        'is_app_private': 'bool',
        'is_code_private': 'bool',
        'is_headless': 'bool',
        'keep_machines_after_stop': 'bool',
        'machines_reservation_time_minutes': 'str',
        'network_config': 'list[V1NetworkConfig]',
        'pause_automation': 'bool',
        'ports': 'list[str]',
        'queue_server_type': 'V1QueueServerType',
        'redis_token': 'str',
        'release_id': 'str',
        'restart_policy': 'V1LightningappRestartPolicy',
        'service_id': 'str',
        'should_mount_cloudspace_content': 'bool',
        'source_app': 'str',
        'source_code_url': 'str',
        'user_id': 'str',
        'user_requested_flow_compute_config': 'V1UserRequestedFlowComputeConfig',
        'version': 'str'
    }

    attribute_map = {
        'app_entrypoint_file': 'appEntrypointFile',
        'artifact_storage_uri': 'artifactStorageUri',
        'auth': 'auth',
        'can_download_source_code': 'canDownloadSourceCode',
        'cloud_space_id': 'cloudSpaceId',
        'cluster_id': 'clusterId',
        'compute_config': 'computeConfig',
        'dependency_cache_key': 'dependencyCacheKey',
        'desired_state': 'desiredState',
        'domain': 'domain',
        'enable_app_server': 'enableAppServer',
        'env': 'env',
        'flow_servers': 'flowServers',
        'image_spec': 'imageSpec',
        'is_app_private': 'isAppPrivate',
        'is_code_private': 'isCodePrivate',
        'is_headless': 'isHeadless',
        'keep_machines_after_stop': 'keepMachinesAfterStop',
        'machines_reservation_time_minutes': 'machinesReservationTimeMinutes',
        'network_config': 'networkConfig',
        'pause_automation': 'pauseAutomation',
        'ports': 'ports',
        'queue_server_type': 'queueServerType',
        'redis_token': 'redisToken',
        'release_id': 'releaseId',
        'restart_policy': 'restartPolicy',
        'service_id': 'serviceId',
        'should_mount_cloudspace_content': 'shouldMountCloudspaceContent',
        'source_app': 'sourceApp',
        'source_code_url': 'sourceCodeUrl',
        'user_id': 'userId',
        'user_requested_flow_compute_config': 'userRequestedFlowComputeConfig',
        'version': 'version'
    }

    def __init__(self, app_entrypoint_file: 'str' =None, artifact_storage_uri: 'str' =None, auth: 'V1LightningAuth' =None, can_download_source_code: 'bool' =None, cloud_space_id: 'str' =None, cluster_id: 'str' =None, compute_config: 'V1ComputeConfig' =None, dependency_cache_key: 'str' =None, desired_state: 'V1LightningappInstanceState' =None, domain: 'str' =None, enable_app_server: 'bool' =None, env: 'list[V1EnvVar]' =None, flow_servers: 'list[V1Flowserver]' =None, image_spec: 'V1ImageSpec' =None, is_app_private: 'bool' =None, is_code_private: 'bool' =None, is_headless: 'bool' =None, keep_machines_after_stop: 'bool' =None, machines_reservation_time_minutes: 'str' =None, network_config: 'list[V1NetworkConfig]' =None, pause_automation: 'bool' =None, ports: 'list[str]' =None, queue_server_type: 'V1QueueServerType' =None, redis_token: 'str' =None, release_id: 'str' =None, restart_policy: 'V1LightningappRestartPolicy' =None, service_id: 'str' =None, should_mount_cloudspace_content: 'bool' =None, source_app: 'str' =None, source_code_url: 'str' =None, user_id: 'str' =None, user_requested_flow_compute_config: 'V1UserRequestedFlowComputeConfig' =None, version: 'str' =None):  # noqa: E501
        """V1LightningappInstanceSpec - a model defined in Swagger"""  # noqa: E501
        self._app_entrypoint_file = None
        self._artifact_storage_uri = None
        self._auth = None
        self._can_download_source_code = None
        self._cloud_space_id = None
        self._cluster_id = None
        self._compute_config = None
        self._dependency_cache_key = None
        self._desired_state = None
        self._domain = None
        self._enable_app_server = None
        self._env = None
        self._flow_servers = None
        self._image_spec = None
        self._is_app_private = None
        self._is_code_private = None
        self._is_headless = None
        self._keep_machines_after_stop = None
        self._machines_reservation_time_minutes = None
        self._network_config = None
        self._pause_automation = None
        self._ports = None
        self._queue_server_type = None
        self._redis_token = None
        self._release_id = None
        self._restart_policy = None
        self._service_id = None
        self._should_mount_cloudspace_content = None
        self._source_app = None
        self._source_code_url = None
        self._user_id = None
        self._user_requested_flow_compute_config = None
        self._version = None
        self.discriminator = None
        if app_entrypoint_file is not None:
            self.app_entrypoint_file = app_entrypoint_file
        if artifact_storage_uri is not None:
            self.artifact_storage_uri = artifact_storage_uri
        if auth is not None:
            self.auth = auth
        if can_download_source_code is not None:
            self.can_download_source_code = can_download_source_code
        if cloud_space_id is not None:
            self.cloud_space_id = cloud_space_id
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if compute_config is not None:
            self.compute_config = compute_config
        if dependency_cache_key is not None:
            self.dependency_cache_key = dependency_cache_key
        if desired_state is not None:
            self.desired_state = desired_state
        if domain is not None:
            self.domain = domain
        if enable_app_server is not None:
            self.enable_app_server = enable_app_server
        if env is not None:
            self.env = env
        if flow_servers is not None:
            self.flow_servers = flow_servers
        if image_spec is not None:
            self.image_spec = image_spec
        if is_app_private is not None:
            self.is_app_private = is_app_private
        if is_code_private is not None:
            self.is_code_private = is_code_private
        if is_headless is not None:
            self.is_headless = is_headless
        if keep_machines_after_stop is not None:
            self.keep_machines_after_stop = keep_machines_after_stop
        if machines_reservation_time_minutes is not None:
            self.machines_reservation_time_minutes = machines_reservation_time_minutes
        if network_config is not None:
            self.network_config = network_config
        if pause_automation is not None:
            self.pause_automation = pause_automation
        if ports is not None:
            self.ports = ports
        if queue_server_type is not None:
            self.queue_server_type = queue_server_type
        if redis_token is not None:
            self.redis_token = redis_token
        if release_id is not None:
            self.release_id = release_id
        if restart_policy is not None:
            self.restart_policy = restart_policy
        if service_id is not None:
            self.service_id = service_id
        if should_mount_cloudspace_content is not None:
            self.should_mount_cloudspace_content = should_mount_cloudspace_content
        if source_app is not None:
            self.source_app = source_app
        if source_code_url is not None:
            self.source_code_url = source_code_url
        if user_id is not None:
            self.user_id = user_id
        if user_requested_flow_compute_config is not None:
            self.user_requested_flow_compute_config = user_requested_flow_compute_config
        if version is not None:
            self.version = version

    @property
    def app_entrypoint_file(self) -> 'str':
        """Gets the app_entrypoint_file of this V1LightningappInstanceSpec.  # noqa: E501


        :return: The app_entrypoint_file of this V1LightningappInstanceSpec.  # noqa: E501
        :rtype: str
        """
        return self._app_entrypoint_file

    @app_entrypoint_file.setter
    def app_entrypoint_file(self, app_entrypoint_file: 'str'):
        """Sets the app_entrypoint_file of this V1LightningappInstanceSpec.


        :param app_entrypoint_file: The app_entrypoint_file of this V1LightningappInstanceSpec.  # noqa: E501
        :type: str
        """

        self._app_entrypoint_file = app_entrypoint_file

    @property
    def artifact_storage_uri(self) -> 'str':
        """Gets the artifact_storage_uri of this V1LightningappInstanceSpec.  # noqa: E501


        :return: The artifact_storage_uri of this V1LightningappInstanceSpec.  # noqa: E501
        :rtype: str
        """
        return self._artifact_storage_uri

    @artifact_storage_uri.setter
    def artifact_storage_uri(self, artifact_storage_uri: 'str'):
        """Sets the artifact_storage_uri of this V1LightningappInstanceSpec.


        :param artifact_storage_uri: The artifact_storage_uri of this V1LightningappInstanceSpec.  # noqa: E501
        :type: str
        """

        self._artifact_storage_uri = artifact_storage_uri

    @property
    def auth(self) -> 'V1LightningAuth':
        """Gets the auth of this V1LightningappInstanceSpec.  # noqa: E501


        :return: The auth of this V1LightningappInstanceSpec.  # noqa: E501
        :rtype: V1LightningAuth
        """
        return self._auth

    @auth.setter
    def auth(self, auth: 'V1LightningAuth'):
        """Sets the auth of this V1LightningappInstanceSpec.


        :param auth: The auth of this V1LightningappInstanceSpec.  # noqa: E501
        :type: V1LightningAuth
        """

        self._auth = auth

    @property
    def can_download_source_code(self) -> 'bool':
        """Gets the can_download_source_code of this V1LightningappInstanceSpec.  # noqa: E501


        :return: The can_download_source_code of this V1LightningappInstanceSpec.  # noqa: E501
        :rtype: bool
        """
        return self._can_download_source_code

    @can_download_source_code.setter
    def can_download_source_code(self, can_download_source_code: 'bool'):
        """Sets the can_download_source_code of this V1LightningappInstanceSpec.


        :param can_download_source_code: The can_download_source_code of this V1LightningappInstanceSpec.  # noqa: E501
        :type: bool
        """

        self._can_download_source_code = can_download_source_code

    @property
    def cloud_space_id(self) -> 'str':
        """Gets the cloud_space_id of this V1LightningappInstanceSpec.  # noqa: E501


        :return: The cloud_space_id of this V1LightningappInstanceSpec.  # noqa: E501
        :rtype: str
        """
        return self._cloud_space_id

    @cloud_space_id.setter
    def cloud_space_id(self, cloud_space_id: 'str'):
        """Sets the cloud_space_id of this V1LightningappInstanceSpec.


        :param cloud_space_id: The cloud_space_id of this V1LightningappInstanceSpec.  # noqa: E501
        :type: str
        """

        self._cloud_space_id = cloud_space_id

    @property
    def cluster_id(self) -> 'str':
        """Gets the cluster_id of this V1LightningappInstanceSpec.  # noqa: E501


        :return: The cluster_id of this V1LightningappInstanceSpec.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id: 'str'):
        """Sets the cluster_id of this V1LightningappInstanceSpec.


        :param cluster_id: The cluster_id of this V1LightningappInstanceSpec.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def compute_config(self) -> 'V1ComputeConfig':
        """Gets the compute_config of this V1LightningappInstanceSpec.  # noqa: E501


        :return: The compute_config of this V1LightningappInstanceSpec.  # noqa: E501
        :rtype: V1ComputeConfig
        """
        return self._compute_config

    @compute_config.setter
    def compute_config(self, compute_config: 'V1ComputeConfig'):
        """Sets the compute_config of this V1LightningappInstanceSpec.


        :param compute_config: The compute_config of this V1LightningappInstanceSpec.  # noqa: E501
        :type: V1ComputeConfig
        """

        self._compute_config = compute_config

    @property
    def dependency_cache_key(self) -> 'str':
        """Gets the dependency_cache_key of this V1LightningappInstanceSpec.  # noqa: E501


        :return: The dependency_cache_key of this V1LightningappInstanceSpec.  # noqa: E501
        :rtype: str
        """
        return self._dependency_cache_key

    @dependency_cache_key.setter
    def dependency_cache_key(self, dependency_cache_key: 'str'):
        """Sets the dependency_cache_key of this V1LightningappInstanceSpec.


        :param dependency_cache_key: The dependency_cache_key of this V1LightningappInstanceSpec.  # noqa: E501
        :type: str
        """

        self._dependency_cache_key = dependency_cache_key

    @property
    def desired_state(self) -> 'V1LightningappInstanceState':
        """Gets the desired_state of this V1LightningappInstanceSpec.  # noqa: E501


        :return: The desired_state of this V1LightningappInstanceSpec.  # noqa: E501
        :rtype: V1LightningappInstanceState
        """
        return self._desired_state

    @desired_state.setter
    def desired_state(self, desired_state: 'V1LightningappInstanceState'):
        """Sets the desired_state of this V1LightningappInstanceSpec.


        :param desired_state: The desired_state of this V1LightningappInstanceSpec.  # noqa: E501
        :type: V1LightningappInstanceState
        """

        self._desired_state = desired_state

    @property
    def domain(self) -> 'str':
        """Gets the domain of this V1LightningappInstanceSpec.  # noqa: E501

        User-provided custom domain for the app. Will be generated if not provided.  # noqa: E501

        :return: The domain of this V1LightningappInstanceSpec.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain: 'str'):
        """Sets the domain of this V1LightningappInstanceSpec.

        User-provided custom domain for the app. Will be generated if not provided.  # noqa: E501

        :param domain: The domain of this V1LightningappInstanceSpec.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def enable_app_server(self) -> 'bool':
        """Gets the enable_app_server of this V1LightningappInstanceSpec.  # noqa: E501


        :return: The enable_app_server of this V1LightningappInstanceSpec.  # noqa: E501
        :rtype: bool
        """
        return self._enable_app_server

    @enable_app_server.setter
    def enable_app_server(self, enable_app_server: 'bool'):
        """Sets the enable_app_server of this V1LightningappInstanceSpec.


        :param enable_app_server: The enable_app_server of this V1LightningappInstanceSpec.  # noqa: E501
        :type: bool
        """

        self._enable_app_server = enable_app_server

    @property
    def env(self) -> 'list[V1EnvVar]':
        """Gets the env of this V1LightningappInstanceSpec.  # noqa: E501


        :return: The env of this V1LightningappInstanceSpec.  # noqa: E501
        :rtype: list[V1EnvVar]
        """
        return self._env

    @env.setter
    def env(self, env: 'list[V1EnvVar]'):
        """Sets the env of this V1LightningappInstanceSpec.


        :param env: The env of this V1LightningappInstanceSpec.  # noqa: E501
        :type: list[V1EnvVar]
        """

        self._env = env

    @property
    def flow_servers(self) -> 'list[V1Flowserver]':
        """Gets the flow_servers of this V1LightningappInstanceSpec.  # noqa: E501


        :return: The flow_servers of this V1LightningappInstanceSpec.  # noqa: E501
        :rtype: list[V1Flowserver]
        """
        return self._flow_servers

    @flow_servers.setter
    def flow_servers(self, flow_servers: 'list[V1Flowserver]'):
        """Sets the flow_servers of this V1LightningappInstanceSpec.


        :param flow_servers: The flow_servers of this V1LightningappInstanceSpec.  # noqa: E501
        :type: list[V1Flowserver]
        """

        self._flow_servers = flow_servers

    @property
    def image_spec(self) -> 'V1ImageSpec':
        """Gets the image_spec of this V1LightningappInstanceSpec.  # noqa: E501


        :return: The image_spec of this V1LightningappInstanceSpec.  # noqa: E501
        :rtype: V1ImageSpec
        """
        return self._image_spec

    @image_spec.setter
    def image_spec(self, image_spec: 'V1ImageSpec'):
        """Sets the image_spec of this V1LightningappInstanceSpec.


        :param image_spec: The image_spec of this V1LightningappInstanceSpec.  # noqa: E501
        :type: V1ImageSpec
        """

        self._image_spec = image_spec

    @property
    def is_app_private(self) -> 'bool':
        """Gets the is_app_private of this V1LightningappInstanceSpec.  # noqa: E501


        :return: The is_app_private of this V1LightningappInstanceSpec.  # noqa: E501
        :rtype: bool
        """
        return self._is_app_private

    @is_app_private.setter
    def is_app_private(self, is_app_private: 'bool'):
        """Sets the is_app_private of this V1LightningappInstanceSpec.


        :param is_app_private: The is_app_private of this V1LightningappInstanceSpec.  # noqa: E501
        :type: bool
        """

        self._is_app_private = is_app_private

    @property
    def is_code_private(self) -> 'bool':
        """Gets the is_code_private of this V1LightningappInstanceSpec.  # noqa: E501


        :return: The is_code_private of this V1LightningappInstanceSpec.  # noqa: E501
        :rtype: bool
        """
        return self._is_code_private

    @is_code_private.setter
    def is_code_private(self, is_code_private: 'bool'):
        """Sets the is_code_private of this V1LightningappInstanceSpec.


        :param is_code_private: The is_code_private of this V1LightningappInstanceSpec.  # noqa: E501
        :type: bool
        """

        self._is_code_private = is_code_private

    @property
    def is_headless(self) -> 'bool':
        """Gets the is_headless of this V1LightningappInstanceSpec.  # noqa: E501


        :return: The is_headless of this V1LightningappInstanceSpec.  # noqa: E501
        :rtype: bool
        """
        return self._is_headless

    @is_headless.setter
    def is_headless(self, is_headless: 'bool'):
        """Sets the is_headless of this V1LightningappInstanceSpec.


        :param is_headless: The is_headless of this V1LightningappInstanceSpec.  # noqa: E501
        :type: bool
        """

        self._is_headless = is_headless

    @property
    def keep_machines_after_stop(self) -> 'bool':
        """Gets the keep_machines_after_stop of this V1LightningappInstanceSpec.  # noqa: E501


        :return: The keep_machines_after_stop of this V1LightningappInstanceSpec.  # noqa: E501
        :rtype: bool
        """
        return self._keep_machines_after_stop

    @keep_machines_after_stop.setter
    def keep_machines_after_stop(self, keep_machines_after_stop: 'bool'):
        """Sets the keep_machines_after_stop of this V1LightningappInstanceSpec.


        :param keep_machines_after_stop: The keep_machines_after_stop of this V1LightningappInstanceSpec.  # noqa: E501
        :type: bool
        """

        self._keep_machines_after_stop = keep_machines_after_stop

    @property
    def machines_reservation_time_minutes(self) -> 'str':
        """Gets the machines_reservation_time_minutes of this V1LightningappInstanceSpec.  # noqa: E501


        :return: The machines_reservation_time_minutes of this V1LightningappInstanceSpec.  # noqa: E501
        :rtype: str
        """
        return self._machines_reservation_time_minutes

    @machines_reservation_time_minutes.setter
    def machines_reservation_time_minutes(self, machines_reservation_time_minutes: 'str'):
        """Sets the machines_reservation_time_minutes of this V1LightningappInstanceSpec.


        :param machines_reservation_time_minutes: The machines_reservation_time_minutes of this V1LightningappInstanceSpec.  # noqa: E501
        :type: str
        """

        self._machines_reservation_time_minutes = machines_reservation_time_minutes

    @property
    def network_config(self) -> 'list[V1NetworkConfig]':
        """Gets the network_config of this V1LightningappInstanceSpec.  # noqa: E501


        :return: The network_config of this V1LightningappInstanceSpec.  # noqa: E501
        :rtype: list[V1NetworkConfig]
        """
        return self._network_config

    @network_config.setter
    def network_config(self, network_config: 'list[V1NetworkConfig]'):
        """Sets the network_config of this V1LightningappInstanceSpec.


        :param network_config: The network_config of this V1LightningappInstanceSpec.  # noqa: E501
        :type: list[V1NetworkConfig]
        """

        self._network_config = network_config

    @property
    def pause_automation(self) -> 'bool':
        """Gets the pause_automation of this V1LightningappInstanceSpec.  # noqa: E501


        :return: The pause_automation of this V1LightningappInstanceSpec.  # noqa: E501
        :rtype: bool
        """
        return self._pause_automation

    @pause_automation.setter
    def pause_automation(self, pause_automation: 'bool'):
        """Sets the pause_automation of this V1LightningappInstanceSpec.


        :param pause_automation: The pause_automation of this V1LightningappInstanceSpec.  # noqa: E501
        :type: bool
        """

        self._pause_automation = pause_automation

    @property
    def ports(self) -> 'list[str]':
        """Gets the ports of this V1LightningappInstanceSpec.  # noqa: E501


        :return: The ports of this V1LightningappInstanceSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._ports

    @ports.setter
    def ports(self, ports: 'list[str]'):
        """Sets the ports of this V1LightningappInstanceSpec.


        :param ports: The ports of this V1LightningappInstanceSpec.  # noqa: E501
        :type: list[str]
        """

        self._ports = ports

    @property
    def queue_server_type(self) -> 'V1QueueServerType':
        """Gets the queue_server_type of this V1LightningappInstanceSpec.  # noqa: E501


        :return: The queue_server_type of this V1LightningappInstanceSpec.  # noqa: E501
        :rtype: V1QueueServerType
        """
        return self._queue_server_type

    @queue_server_type.setter
    def queue_server_type(self, queue_server_type: 'V1QueueServerType'):
        """Sets the queue_server_type of this V1LightningappInstanceSpec.


        :param queue_server_type: The queue_server_type of this V1LightningappInstanceSpec.  # noqa: E501
        :type: V1QueueServerType
        """

        self._queue_server_type = queue_server_type

    @property
    def redis_token(self) -> 'str':
        """Gets the redis_token of this V1LightningappInstanceSpec.  # noqa: E501


        :return: The redis_token of this V1LightningappInstanceSpec.  # noqa: E501
        :rtype: str
        """
        return self._redis_token

    @redis_token.setter
    def redis_token(self, redis_token: 'str'):
        """Sets the redis_token of this V1LightningappInstanceSpec.


        :param redis_token: The redis_token of this V1LightningappInstanceSpec.  # noqa: E501
        :type: str
        """

        self._redis_token = redis_token

    @property
    def release_id(self) -> 'str':
        """Gets the release_id of this V1LightningappInstanceSpec.  # noqa: E501


        :return: The release_id of this V1LightningappInstanceSpec.  # noqa: E501
        :rtype: str
        """
        return self._release_id

    @release_id.setter
    def release_id(self, release_id: 'str'):
        """Sets the release_id of this V1LightningappInstanceSpec.


        :param release_id: The release_id of this V1LightningappInstanceSpec.  # noqa: E501
        :type: str
        """

        self._release_id = release_id

    @property
    def restart_policy(self) -> 'V1LightningappRestartPolicy':
        """Gets the restart_policy of this V1LightningappInstanceSpec.  # noqa: E501


        :return: The restart_policy of this V1LightningappInstanceSpec.  # noqa: E501
        :rtype: V1LightningappRestartPolicy
        """
        return self._restart_policy

    @restart_policy.setter
    def restart_policy(self, restart_policy: 'V1LightningappRestartPolicy'):
        """Sets the restart_policy of this V1LightningappInstanceSpec.


        :param restart_policy: The restart_policy of this V1LightningappInstanceSpec.  # noqa: E501
        :type: V1LightningappRestartPolicy
        """

        self._restart_policy = restart_policy

    @property
    def service_id(self) -> 'str':
        """Gets the service_id of this V1LightningappInstanceSpec.  # noqa: E501


        :return: The service_id of this V1LightningappInstanceSpec.  # noqa: E501
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id: 'str'):
        """Sets the service_id of this V1LightningappInstanceSpec.


        :param service_id: The service_id of this V1LightningappInstanceSpec.  # noqa: E501
        :type: str
        """

        self._service_id = service_id

    @property
    def should_mount_cloudspace_content(self) -> 'bool':
        """Gets the should_mount_cloudspace_content of this V1LightningappInstanceSpec.  # noqa: E501


        :return: The should_mount_cloudspace_content of this V1LightningappInstanceSpec.  # noqa: E501
        :rtype: bool
        """
        return self._should_mount_cloudspace_content

    @should_mount_cloudspace_content.setter
    def should_mount_cloudspace_content(self, should_mount_cloudspace_content: 'bool'):
        """Sets the should_mount_cloudspace_content of this V1LightningappInstanceSpec.


        :param should_mount_cloudspace_content: The should_mount_cloudspace_content of this V1LightningappInstanceSpec.  # noqa: E501
        :type: bool
        """

        self._should_mount_cloudspace_content = should_mount_cloudspace_content

    @property
    def source_app(self) -> 'str':
        """Gets the source_app of this V1LightningappInstanceSpec.  # noqa: E501


        :return: The source_app of this V1LightningappInstanceSpec.  # noqa: E501
        :rtype: str
        """
        return self._source_app

    @source_app.setter
    def source_app(self, source_app: 'str'):
        """Sets the source_app of this V1LightningappInstanceSpec.


        :param source_app: The source_app of this V1LightningappInstanceSpec.  # noqa: E501
        :type: str
        """

        self._source_app = source_app

    @property
    def source_code_url(self) -> 'str':
        """Gets the source_code_url of this V1LightningappInstanceSpec.  # noqa: E501


        :return: The source_code_url of this V1LightningappInstanceSpec.  # noqa: E501
        :rtype: str
        """
        return self._source_code_url

    @source_code_url.setter
    def source_code_url(self, source_code_url: 'str'):
        """Sets the source_code_url of this V1LightningappInstanceSpec.


        :param source_code_url: The source_code_url of this V1LightningappInstanceSpec.  # noqa: E501
        :type: str
        """

        self._source_code_url = source_code_url

    @property
    def user_id(self) -> 'str':
        """Gets the user_id of this V1LightningappInstanceSpec.  # noqa: E501


        :return: The user_id of this V1LightningappInstanceSpec.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: 'str'):
        """Sets the user_id of this V1LightningappInstanceSpec.


        :param user_id: The user_id of this V1LightningappInstanceSpec.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def user_requested_flow_compute_config(self) -> 'V1UserRequestedFlowComputeConfig':
        """Gets the user_requested_flow_compute_config of this V1LightningappInstanceSpec.  # noqa: E501


        :return: The user_requested_flow_compute_config of this V1LightningappInstanceSpec.  # noqa: E501
        :rtype: V1UserRequestedFlowComputeConfig
        """
        return self._user_requested_flow_compute_config

    @user_requested_flow_compute_config.setter
    def user_requested_flow_compute_config(self, user_requested_flow_compute_config: 'V1UserRequestedFlowComputeConfig'):
        """Sets the user_requested_flow_compute_config of this V1LightningappInstanceSpec.


        :param user_requested_flow_compute_config: The user_requested_flow_compute_config of this V1LightningappInstanceSpec.  # noqa: E501
        :type: V1UserRequestedFlowComputeConfig
        """

        self._user_requested_flow_compute_config = user_requested_flow_compute_config

    @property
    def version(self) -> 'str':
        """Gets the version of this V1LightningappInstanceSpec.  # noqa: E501


        :return: The version of this V1LightningappInstanceSpec.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: 'str'):
        """Sets the version of this V1LightningappInstanceSpec.


        :param version: The version of this V1LightningappInstanceSpec.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1LightningappInstanceSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1LightningappInstanceSpec') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1LightningappInstanceSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1LightningappInstanceSpec') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
