# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1ClusterTaggingOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom_tags': 'list[V1ClusterResourceTag]',
        'tag_bucket_objects': 'bool',
        'tag_instances_with_teamspace_name': 'bool',
        'tag_instances_with_username': 'bool',
        'tag_instances_with_workload_name': 'bool'
    }

    attribute_map = {
        'custom_tags': 'customTags',
        'tag_bucket_objects': 'tagBucketObjects',
        'tag_instances_with_teamspace_name': 'tagInstancesWithTeamspaceName',
        'tag_instances_with_username': 'tagInstancesWithUsername',
        'tag_instances_with_workload_name': 'tagInstancesWithWorkloadName'
    }

    def __init__(self, custom_tags: 'list[V1ClusterResourceTag]' =None, tag_bucket_objects: 'bool' =None, tag_instances_with_teamspace_name: 'bool' =None, tag_instances_with_username: 'bool' =None, tag_instances_with_workload_name: 'bool' =None):  # noqa: E501
        """V1ClusterTaggingOptions - a model defined in Swagger"""  # noqa: E501
        self._custom_tags = None
        self._tag_bucket_objects = None
        self._tag_instances_with_teamspace_name = None
        self._tag_instances_with_username = None
        self._tag_instances_with_workload_name = None
        self.discriminator = None
        if custom_tags is not None:
            self.custom_tags = custom_tags
        if tag_bucket_objects is not None:
            self.tag_bucket_objects = tag_bucket_objects
        if tag_instances_with_teamspace_name is not None:
            self.tag_instances_with_teamspace_name = tag_instances_with_teamspace_name
        if tag_instances_with_username is not None:
            self.tag_instances_with_username = tag_instances_with_username
        if tag_instances_with_workload_name is not None:
            self.tag_instances_with_workload_name = tag_instances_with_workload_name

    @property
    def custom_tags(self) -> 'list[V1ClusterResourceTag]':
        """Gets the custom_tags of this V1ClusterTaggingOptions.  # noqa: E501


        :return: The custom_tags of this V1ClusterTaggingOptions.  # noqa: E501
        :rtype: list[V1ClusterResourceTag]
        """
        return self._custom_tags

    @custom_tags.setter
    def custom_tags(self, custom_tags: 'list[V1ClusterResourceTag]'):
        """Sets the custom_tags of this V1ClusterTaggingOptions.


        :param custom_tags: The custom_tags of this V1ClusterTaggingOptions.  # noqa: E501
        :type: list[V1ClusterResourceTag]
        """

        self._custom_tags = custom_tags

    @property
    def tag_bucket_objects(self) -> 'bool':
        """Gets the tag_bucket_objects of this V1ClusterTaggingOptions.  # noqa: E501


        :return: The tag_bucket_objects of this V1ClusterTaggingOptions.  # noqa: E501
        :rtype: bool
        """
        return self._tag_bucket_objects

    @tag_bucket_objects.setter
    def tag_bucket_objects(self, tag_bucket_objects: 'bool'):
        """Sets the tag_bucket_objects of this V1ClusterTaggingOptions.


        :param tag_bucket_objects: The tag_bucket_objects of this V1ClusterTaggingOptions.  # noqa: E501
        :type: bool
        """

        self._tag_bucket_objects = tag_bucket_objects

    @property
    def tag_instances_with_teamspace_name(self) -> 'bool':
        """Gets the tag_instances_with_teamspace_name of this V1ClusterTaggingOptions.  # noqa: E501


        :return: The tag_instances_with_teamspace_name of this V1ClusterTaggingOptions.  # noqa: E501
        :rtype: bool
        """
        return self._tag_instances_with_teamspace_name

    @tag_instances_with_teamspace_name.setter
    def tag_instances_with_teamspace_name(self, tag_instances_with_teamspace_name: 'bool'):
        """Sets the tag_instances_with_teamspace_name of this V1ClusterTaggingOptions.


        :param tag_instances_with_teamspace_name: The tag_instances_with_teamspace_name of this V1ClusterTaggingOptions.  # noqa: E501
        :type: bool
        """

        self._tag_instances_with_teamspace_name = tag_instances_with_teamspace_name

    @property
    def tag_instances_with_username(self) -> 'bool':
        """Gets the tag_instances_with_username of this V1ClusterTaggingOptions.  # noqa: E501


        :return: The tag_instances_with_username of this V1ClusterTaggingOptions.  # noqa: E501
        :rtype: bool
        """
        return self._tag_instances_with_username

    @tag_instances_with_username.setter
    def tag_instances_with_username(self, tag_instances_with_username: 'bool'):
        """Sets the tag_instances_with_username of this V1ClusterTaggingOptions.


        :param tag_instances_with_username: The tag_instances_with_username of this V1ClusterTaggingOptions.  # noqa: E501
        :type: bool
        """

        self._tag_instances_with_username = tag_instances_with_username

    @property
    def tag_instances_with_workload_name(self) -> 'bool':
        """Gets the tag_instances_with_workload_name of this V1ClusterTaggingOptions.  # noqa: E501


        :return: The tag_instances_with_workload_name of this V1ClusterTaggingOptions.  # noqa: E501
        :rtype: bool
        """
        return self._tag_instances_with_workload_name

    @tag_instances_with_workload_name.setter
    def tag_instances_with_workload_name(self, tag_instances_with_workload_name: 'bool'):
        """Sets the tag_instances_with_workload_name of this V1ClusterTaggingOptions.


        :param tag_instances_with_workload_name: The tag_instances_with_workload_name of this V1ClusterTaggingOptions.  # noqa: E501
        :type: bool
        """

        self._tag_instances_with_workload_name = tag_instances_with_workload_name

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1ClusterTaggingOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1ClusterTaggingOptions') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ClusterTaggingOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1ClusterTaggingOptions') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
