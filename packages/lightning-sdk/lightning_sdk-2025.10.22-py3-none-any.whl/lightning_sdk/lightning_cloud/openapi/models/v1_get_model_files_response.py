# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1GetModelFilesResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filepaths': 'list[str]',
        'files': 'list[V1ModelFile]',
        'model_id': 'str',
        'project_id': 'str',
        'size_bytes': 'str',
        'upload_complete': 'bool',
        'version': 'str'
    }

    attribute_map = {
        'filepaths': 'filepaths',
        'files': 'files',
        'model_id': 'modelId',
        'project_id': 'projectId',
        'size_bytes': 'sizeBytes',
        'upload_complete': 'uploadComplete',
        'version': 'version'
    }

    def __init__(self, filepaths: 'list[str]' =None, files: 'list[V1ModelFile]' =None, model_id: 'str' =None, project_id: 'str' =None, size_bytes: 'str' =None, upload_complete: 'bool' =None, version: 'str' =None):  # noqa: E501
        """V1GetModelFilesResponse - a model defined in Swagger"""  # noqa: E501
        self._filepaths = None
        self._files = None
        self._model_id = None
        self._project_id = None
        self._size_bytes = None
        self._upload_complete = None
        self._version = None
        self.discriminator = None
        if filepaths is not None:
            self.filepaths = filepaths
        if files is not None:
            self.files = files
        if model_id is not None:
            self.model_id = model_id
        if project_id is not None:
            self.project_id = project_id
        if size_bytes is not None:
            self.size_bytes = size_bytes
        if upload_complete is not None:
            self.upload_complete = upload_complete
        if version is not None:
            self.version = version

    @property
    def filepaths(self) -> 'list[str]':
        """Gets the filepaths of this V1GetModelFilesResponse.  # noqa: E501


        :return: The filepaths of this V1GetModelFilesResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._filepaths

    @filepaths.setter
    def filepaths(self, filepaths: 'list[str]'):
        """Sets the filepaths of this V1GetModelFilesResponse.


        :param filepaths: The filepaths of this V1GetModelFilesResponse.  # noqa: E501
        :type: list[str]
        """

        self._filepaths = filepaths

    @property
    def files(self) -> 'list[V1ModelFile]':
        """Gets the files of this V1GetModelFilesResponse.  # noqa: E501


        :return: The files of this V1GetModelFilesResponse.  # noqa: E501
        :rtype: list[V1ModelFile]
        """
        return self._files

    @files.setter
    def files(self, files: 'list[V1ModelFile]'):
        """Sets the files of this V1GetModelFilesResponse.


        :param files: The files of this V1GetModelFilesResponse.  # noqa: E501
        :type: list[V1ModelFile]
        """

        self._files = files

    @property
    def model_id(self) -> 'str':
        """Gets the model_id of this V1GetModelFilesResponse.  # noqa: E501


        :return: The model_id of this V1GetModelFilesResponse.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id: 'str'):
        """Sets the model_id of this V1GetModelFilesResponse.


        :param model_id: The model_id of this V1GetModelFilesResponse.  # noqa: E501
        :type: str
        """

        self._model_id = model_id

    @property
    def project_id(self) -> 'str':
        """Gets the project_id of this V1GetModelFilesResponse.  # noqa: E501


        :return: The project_id of this V1GetModelFilesResponse.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: 'str'):
        """Sets the project_id of this V1GetModelFilesResponse.


        :param project_id: The project_id of this V1GetModelFilesResponse.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def size_bytes(self) -> 'str':
        """Gets the size_bytes of this V1GetModelFilesResponse.  # noqa: E501


        :return: The size_bytes of this V1GetModelFilesResponse.  # noqa: E501
        :rtype: str
        """
        return self._size_bytes

    @size_bytes.setter
    def size_bytes(self, size_bytes: 'str'):
        """Sets the size_bytes of this V1GetModelFilesResponse.


        :param size_bytes: The size_bytes of this V1GetModelFilesResponse.  # noqa: E501
        :type: str
        """

        self._size_bytes = size_bytes

    @property
    def upload_complete(self) -> 'bool':
        """Gets the upload_complete of this V1GetModelFilesResponse.  # noqa: E501


        :return: The upload_complete of this V1GetModelFilesResponse.  # noqa: E501
        :rtype: bool
        """
        return self._upload_complete

    @upload_complete.setter
    def upload_complete(self, upload_complete: 'bool'):
        """Sets the upload_complete of this V1GetModelFilesResponse.


        :param upload_complete: The upload_complete of this V1GetModelFilesResponse.  # noqa: E501
        :type: bool
        """

        self._upload_complete = upload_complete

    @property
    def version(self) -> 'str':
        """Gets the version of this V1GetModelFilesResponse.  # noqa: E501


        :return: The version of this V1GetModelFilesResponse.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: 'str'):
        """Sets the version of this V1GetModelFilesResponse.


        :param version: The version of this V1GetModelFilesResponse.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1GetModelFilesResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1GetModelFilesResponse') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1GetModelFilesResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1GetModelFilesResponse') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
