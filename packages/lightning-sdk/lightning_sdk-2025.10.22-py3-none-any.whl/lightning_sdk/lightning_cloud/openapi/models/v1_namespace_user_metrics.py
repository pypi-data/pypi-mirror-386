# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1NamespaceUserMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu_utilisation': 'float',
        'failed_pods': 'int',
        'gpu_utilisation': 'float',
        'num_cpus': 'int',
        'num_gpus': 'int',
        'pending_pods': 'int',
        'ram_used': 'int',
        'running_pods': 'int',
        'succeeded_pods': 'int',
        'timestamp': 'datetime',
        'total_pods': 'int',
        'unknown_pods': 'int',
        'vram_used': 'int'
    }

    attribute_map = {
        'cpu_utilisation': 'cpuUtilisation',
        'failed_pods': 'failedPods',
        'gpu_utilisation': 'gpuUtilisation',
        'num_cpus': 'numCpus',
        'num_gpus': 'numGpus',
        'pending_pods': 'pendingPods',
        'ram_used': 'ramUsed',
        'running_pods': 'runningPods',
        'succeeded_pods': 'succeededPods',
        'timestamp': 'timestamp',
        'total_pods': 'totalPods',
        'unknown_pods': 'unknownPods',
        'vram_used': 'vramUsed'
    }

    def __init__(self, cpu_utilisation: 'float' =None, failed_pods: 'int' =None, gpu_utilisation: 'float' =None, num_cpus: 'int' =None, num_gpus: 'int' =None, pending_pods: 'int' =None, ram_used: 'int' =None, running_pods: 'int' =None, succeeded_pods: 'int' =None, timestamp: 'datetime' =None, total_pods: 'int' =None, unknown_pods: 'int' =None, vram_used: 'int' =None):  # noqa: E501
        """V1NamespaceUserMetrics - a model defined in Swagger"""  # noqa: E501
        self._cpu_utilisation = None
        self._failed_pods = None
        self._gpu_utilisation = None
        self._num_cpus = None
        self._num_gpus = None
        self._pending_pods = None
        self._ram_used = None
        self._running_pods = None
        self._succeeded_pods = None
        self._timestamp = None
        self._total_pods = None
        self._unknown_pods = None
        self._vram_used = None
        self.discriminator = None
        if cpu_utilisation is not None:
            self.cpu_utilisation = cpu_utilisation
        if failed_pods is not None:
            self.failed_pods = failed_pods
        if gpu_utilisation is not None:
            self.gpu_utilisation = gpu_utilisation
        if num_cpus is not None:
            self.num_cpus = num_cpus
        if num_gpus is not None:
            self.num_gpus = num_gpus
        if pending_pods is not None:
            self.pending_pods = pending_pods
        if ram_used is not None:
            self.ram_used = ram_used
        if running_pods is not None:
            self.running_pods = running_pods
        if succeeded_pods is not None:
            self.succeeded_pods = succeeded_pods
        if timestamp is not None:
            self.timestamp = timestamp
        if total_pods is not None:
            self.total_pods = total_pods
        if unknown_pods is not None:
            self.unknown_pods = unknown_pods
        if vram_used is not None:
            self.vram_used = vram_used

    @property
    def cpu_utilisation(self) -> 'float':
        """Gets the cpu_utilisation of this V1NamespaceUserMetrics.  # noqa: E501


        :return: The cpu_utilisation of this V1NamespaceUserMetrics.  # noqa: E501
        :rtype: float
        """
        return self._cpu_utilisation

    @cpu_utilisation.setter
    def cpu_utilisation(self, cpu_utilisation: 'float'):
        """Sets the cpu_utilisation of this V1NamespaceUserMetrics.


        :param cpu_utilisation: The cpu_utilisation of this V1NamespaceUserMetrics.  # noqa: E501
        :type: float
        """

        self._cpu_utilisation = cpu_utilisation

    @property
    def failed_pods(self) -> 'int':
        """Gets the failed_pods of this V1NamespaceUserMetrics.  # noqa: E501


        :return: The failed_pods of this V1NamespaceUserMetrics.  # noqa: E501
        :rtype: int
        """
        return self._failed_pods

    @failed_pods.setter
    def failed_pods(self, failed_pods: 'int'):
        """Sets the failed_pods of this V1NamespaceUserMetrics.


        :param failed_pods: The failed_pods of this V1NamespaceUserMetrics.  # noqa: E501
        :type: int
        """

        self._failed_pods = failed_pods

    @property
    def gpu_utilisation(self) -> 'float':
        """Gets the gpu_utilisation of this V1NamespaceUserMetrics.  # noqa: E501


        :return: The gpu_utilisation of this V1NamespaceUserMetrics.  # noqa: E501
        :rtype: float
        """
        return self._gpu_utilisation

    @gpu_utilisation.setter
    def gpu_utilisation(self, gpu_utilisation: 'float'):
        """Sets the gpu_utilisation of this V1NamespaceUserMetrics.


        :param gpu_utilisation: The gpu_utilisation of this V1NamespaceUserMetrics.  # noqa: E501
        :type: float
        """

        self._gpu_utilisation = gpu_utilisation

    @property
    def num_cpus(self) -> 'int':
        """Gets the num_cpus of this V1NamespaceUserMetrics.  # noqa: E501


        :return: The num_cpus of this V1NamespaceUserMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_cpus

    @num_cpus.setter
    def num_cpus(self, num_cpus: 'int'):
        """Sets the num_cpus of this V1NamespaceUserMetrics.


        :param num_cpus: The num_cpus of this V1NamespaceUserMetrics.  # noqa: E501
        :type: int
        """

        self._num_cpus = num_cpus

    @property
    def num_gpus(self) -> 'int':
        """Gets the num_gpus of this V1NamespaceUserMetrics.  # noqa: E501


        :return: The num_gpus of this V1NamespaceUserMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_gpus

    @num_gpus.setter
    def num_gpus(self, num_gpus: 'int'):
        """Sets the num_gpus of this V1NamespaceUserMetrics.


        :param num_gpus: The num_gpus of this V1NamespaceUserMetrics.  # noqa: E501
        :type: int
        """

        self._num_gpus = num_gpus

    @property
    def pending_pods(self) -> 'int':
        """Gets the pending_pods of this V1NamespaceUserMetrics.  # noqa: E501


        :return: The pending_pods of this V1NamespaceUserMetrics.  # noqa: E501
        :rtype: int
        """
        return self._pending_pods

    @pending_pods.setter
    def pending_pods(self, pending_pods: 'int'):
        """Sets the pending_pods of this V1NamespaceUserMetrics.


        :param pending_pods: The pending_pods of this V1NamespaceUserMetrics.  # noqa: E501
        :type: int
        """

        self._pending_pods = pending_pods

    @property
    def ram_used(self) -> 'int':
        """Gets the ram_used of this V1NamespaceUserMetrics.  # noqa: E501


        :return: The ram_used of this V1NamespaceUserMetrics.  # noqa: E501
        :rtype: int
        """
        return self._ram_used

    @ram_used.setter
    def ram_used(self, ram_used: 'int'):
        """Sets the ram_used of this V1NamespaceUserMetrics.


        :param ram_used: The ram_used of this V1NamespaceUserMetrics.  # noqa: E501
        :type: int
        """

        self._ram_used = ram_used

    @property
    def running_pods(self) -> 'int':
        """Gets the running_pods of this V1NamespaceUserMetrics.  # noqa: E501


        :return: The running_pods of this V1NamespaceUserMetrics.  # noqa: E501
        :rtype: int
        """
        return self._running_pods

    @running_pods.setter
    def running_pods(self, running_pods: 'int'):
        """Sets the running_pods of this V1NamespaceUserMetrics.


        :param running_pods: The running_pods of this V1NamespaceUserMetrics.  # noqa: E501
        :type: int
        """

        self._running_pods = running_pods

    @property
    def succeeded_pods(self) -> 'int':
        """Gets the succeeded_pods of this V1NamespaceUserMetrics.  # noqa: E501


        :return: The succeeded_pods of this V1NamespaceUserMetrics.  # noqa: E501
        :rtype: int
        """
        return self._succeeded_pods

    @succeeded_pods.setter
    def succeeded_pods(self, succeeded_pods: 'int'):
        """Sets the succeeded_pods of this V1NamespaceUserMetrics.


        :param succeeded_pods: The succeeded_pods of this V1NamespaceUserMetrics.  # noqa: E501
        :type: int
        """

        self._succeeded_pods = succeeded_pods

    @property
    def timestamp(self) -> 'datetime':
        """Gets the timestamp of this V1NamespaceUserMetrics.  # noqa: E501


        :return: The timestamp of this V1NamespaceUserMetrics.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: 'datetime'):
        """Sets the timestamp of this V1NamespaceUserMetrics.


        :param timestamp: The timestamp of this V1NamespaceUserMetrics.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def total_pods(self) -> 'int':
        """Gets the total_pods of this V1NamespaceUserMetrics.  # noqa: E501


        :return: The total_pods of this V1NamespaceUserMetrics.  # noqa: E501
        :rtype: int
        """
        return self._total_pods

    @total_pods.setter
    def total_pods(self, total_pods: 'int'):
        """Sets the total_pods of this V1NamespaceUserMetrics.


        :param total_pods: The total_pods of this V1NamespaceUserMetrics.  # noqa: E501
        :type: int
        """

        self._total_pods = total_pods

    @property
    def unknown_pods(self) -> 'int':
        """Gets the unknown_pods of this V1NamespaceUserMetrics.  # noqa: E501


        :return: The unknown_pods of this V1NamespaceUserMetrics.  # noqa: E501
        :rtype: int
        """
        return self._unknown_pods

    @unknown_pods.setter
    def unknown_pods(self, unknown_pods: 'int'):
        """Sets the unknown_pods of this V1NamespaceUserMetrics.


        :param unknown_pods: The unknown_pods of this V1NamespaceUserMetrics.  # noqa: E501
        :type: int
        """

        self._unknown_pods = unknown_pods

    @property
    def vram_used(self) -> 'int':
        """Gets the vram_used of this V1NamespaceUserMetrics.  # noqa: E501


        :return: The vram_used of this V1NamespaceUserMetrics.  # noqa: E501
        :rtype: int
        """
        return self._vram_used

    @vram_used.setter
    def vram_used(self, vram_used: 'int'):
        """Sets the vram_used of this V1NamespaceUserMetrics.


        :param vram_used: The vram_used of this V1NamespaceUserMetrics.  # noqa: E501
        :type: int
        """

        self._vram_used = vram_used

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1NamespaceUserMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1NamespaceUserMetrics') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1NamespaceUserMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1NamespaceUserMetrics') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
