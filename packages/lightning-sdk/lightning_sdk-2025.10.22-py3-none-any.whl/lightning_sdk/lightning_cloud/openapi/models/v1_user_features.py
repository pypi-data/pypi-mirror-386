# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1UserFeatures(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affiliate_links': 'bool',
        'agents_v2': 'bool',
        'ai_hub_monetization': 'bool',
        'auto_fast_load': 'bool',
        'b2c_experience': 'bool',
        'byo_machine_type': 'bool',
        'cap_add': 'list[str]',
        'cap_drop': 'list[str]',
        'capacity_reservation_byoc': 'bool',
        'capacity_reservation_dry_run': 'bool',
        'chat_models': 'bool',
        'cloudspace_schedules': 'bool',
        'code_tab': 'bool',
        'collab_screen_sharing': 'bool',
        'control_center_monitoring': 'bool',
        'cost_attribution_settings': 'bool',
        'custom_app_domain': 'bool',
        'datasets': 'bool',
        'default_one_cluster': 'bool',
        'deployment_persistent_disk': 'bool',
        'drive_v2': 'bool',
        'enterprise_compute_admin': 'bool',
        'f227': 'bool',
        'f234': 'bool',
        'f236': 'bool',
        'f239': 'bool',
        'f240': 'bool',
        'f241': 'bool',
        'f243': 'bool',
        'f245': 'bool',
        'f247': 'bool',
        'f248': 'bool',
        'f250': 'bool',
        'f252': 'bool',
        'f253': 'bool',
        'f254': 'bool',
        'f255': 'bool',
        'f257': 'bool',
        'f258': 'bool',
        'f259': 'bool',
        'f260': 'bool',
        'f261': 'bool',
        'f262': 'bool',
        'f263': 'bool',
        'f264': 'bool',
        'f265': 'bool',
        'f266': 'bool',
        'fair_share': 'bool',
        'featured_studios_admin': 'bool',
        'gcs_connections_optimized': 'bool',
        'job_artifacts_v2': 'bool',
        'kubernetes_cluster_ui': 'bool',
        'kubernetes_clusters': 'bool',
        'landing_studios': 'bool',
        'lit_logger': 'bool',
        'marketplace': 'bool',
        'mmt_fault_tolerance': 'bool',
        'mmt_strategy_selector': 'bool',
        'model_api_dashboard': 'bool',
        'multiple_studio_versions': 'bool',
        'nerf_fs_nonpaying': 'bool',
        'org_level_member_permissions': 'bool',
        'org_usage_limits': 'bool',
        'persistent_disk': 'bool',
        'plugin_distributed': 'bool',
        'plugin_inference': 'bool',
        'plugin_label_studio': 'bool',
        'plugin_langflow': 'bool',
        'plugin_python_profiler': 'bool',
        'plugin_sweeps': 'bool',
        'pricing_updates': 'bool',
        'product_generator': 'bool',
        'product_license': 'bool',
        'project_selector': 'bool',
        'publish_pipelines': 'bool',
        'reserved_machines_tab': 'bool',
        'restartable_jobs': 'bool',
        'runnable_public_studio_page': 'bool',
        'security_docs': 'bool',
        'show_dev_admin': 'bool',
        'slurm': 'bool',
        'specialised_studios': 'bool',
        'storage_overuse_deletion': 'bool',
        'studio_config': 'bool',
        'studio_sharing_v2': 'bool',
        'studio_version_visibility': 'bool',
        'vultr': 'bool',
        'weka': 'bool',
        'writable_s3_connections': 'bool'
    }

    attribute_map = {
        'affiliate_links': 'affiliateLinks',
        'agents_v2': 'agentsV2',
        'ai_hub_monetization': 'aiHubMonetization',
        'auto_fast_load': 'autoFastLoad',
        'b2c_experience': 'b2cExperience',
        'byo_machine_type': 'byoMachineType',
        'cap_add': 'capAdd',
        'cap_drop': 'capDrop',
        'capacity_reservation_byoc': 'capacityReservationByoc',
        'capacity_reservation_dry_run': 'capacityReservationDryRun',
        'chat_models': 'chatModels',
        'cloudspace_schedules': 'cloudspaceSchedules',
        'code_tab': 'codeTab',
        'collab_screen_sharing': 'collabScreenSharing',
        'control_center_monitoring': 'controlCenterMonitoring',
        'cost_attribution_settings': 'costAttributionSettings',
        'custom_app_domain': 'customAppDomain',
        'datasets': 'datasets',
        'default_one_cluster': 'defaultOneCluster',
        'deployment_persistent_disk': 'deploymentPersistentDisk',
        'drive_v2': 'driveV2',
        'enterprise_compute_admin': 'enterpriseComputeAdmin',
        'f227': 'f227',
        'f234': 'f234',
        'f236': 'f236',
        'f239': 'f239',
        'f240': 'f240',
        'f241': 'f241',
        'f243': 'f243',
        'f245': 'f245',
        'f247': 'f247',
        'f248': 'f248',
        'f250': 'f250',
        'f252': 'f252',
        'f253': 'f253',
        'f254': 'f254',
        'f255': 'f255',
        'f257': 'f257',
        'f258': 'f258',
        'f259': 'f259',
        'f260': 'f260',
        'f261': 'f261',
        'f262': 'f262',
        'f263': 'f263',
        'f264': 'f264',
        'f265': 'f265',
        'f266': 'f266',
        'fair_share': 'fairShare',
        'featured_studios_admin': 'featuredStudiosAdmin',
        'gcs_connections_optimized': 'gcsConnectionsOptimized',
        'job_artifacts_v2': 'jobArtifactsV2',
        'kubernetes_cluster_ui': 'kubernetesClusterUi',
        'kubernetes_clusters': 'kubernetesClusters',
        'landing_studios': 'landingStudios',
        'lit_logger': 'litLogger',
        'marketplace': 'marketplace',
        'mmt_fault_tolerance': 'mmtFaultTolerance',
        'mmt_strategy_selector': 'mmtStrategySelector',
        'model_api_dashboard': 'modelApiDashboard',
        'multiple_studio_versions': 'multipleStudioVersions',
        'nerf_fs_nonpaying': 'nerfFsNonpaying',
        'org_level_member_permissions': 'orgLevelMemberPermissions',
        'org_usage_limits': 'orgUsageLimits',
        'persistent_disk': 'persistentDisk',
        'plugin_distributed': 'pluginDistributed',
        'plugin_inference': 'pluginInference',
        'plugin_label_studio': 'pluginLabelStudio',
        'plugin_langflow': 'pluginLangflow',
        'plugin_python_profiler': 'pluginPythonProfiler',
        'plugin_sweeps': 'pluginSweeps',
        'pricing_updates': 'pricingUpdates',
        'product_generator': 'productGenerator',
        'product_license': 'productLicense',
        'project_selector': 'projectSelector',
        'publish_pipelines': 'publishPipelines',
        'reserved_machines_tab': 'reservedMachinesTab',
        'restartable_jobs': 'restartableJobs',
        'runnable_public_studio_page': 'runnablePublicStudioPage',
        'security_docs': 'securityDocs',
        'show_dev_admin': 'showDevAdmin',
        'slurm': 'slurm',
        'specialised_studios': 'specialisedStudios',
        'storage_overuse_deletion': 'storageOveruseDeletion',
        'studio_config': 'studioConfig',
        'studio_sharing_v2': 'studioSharingV2',
        'studio_version_visibility': 'studioVersionVisibility',
        'vultr': 'vultr',
        'weka': 'weka',
        'writable_s3_connections': 'writableS3Connections'
    }

    def __init__(self, affiliate_links: 'bool' =None, agents_v2: 'bool' =None, ai_hub_monetization: 'bool' =None, auto_fast_load: 'bool' =None, b2c_experience: 'bool' =None, byo_machine_type: 'bool' =None, cap_add: 'list[str]' =None, cap_drop: 'list[str]' =None, capacity_reservation_byoc: 'bool' =None, capacity_reservation_dry_run: 'bool' =None, chat_models: 'bool' =None, cloudspace_schedules: 'bool' =None, code_tab: 'bool' =None, collab_screen_sharing: 'bool' =None, control_center_monitoring: 'bool' =None, cost_attribution_settings: 'bool' =None, custom_app_domain: 'bool' =None, datasets: 'bool' =None, default_one_cluster: 'bool' =None, deployment_persistent_disk: 'bool' =None, drive_v2: 'bool' =None, enterprise_compute_admin: 'bool' =None, f227: 'bool' =None, f234: 'bool' =None, f236: 'bool' =None, f239: 'bool' =None, f240: 'bool' =None, f241: 'bool' =None, f243: 'bool' =None, f245: 'bool' =None, f247: 'bool' =None, f248: 'bool' =None, f250: 'bool' =None, f252: 'bool' =None, f253: 'bool' =None, f254: 'bool' =None, f255: 'bool' =None, f257: 'bool' =None, f258: 'bool' =None, f259: 'bool' =None, f260: 'bool' =None, f261: 'bool' =None, f262: 'bool' =None, f263: 'bool' =None, f264: 'bool' =None, f265: 'bool' =None, f266: 'bool' =None, fair_share: 'bool' =None, featured_studios_admin: 'bool' =None, gcs_connections_optimized: 'bool' =None, job_artifacts_v2: 'bool' =None, kubernetes_cluster_ui: 'bool' =None, kubernetes_clusters: 'bool' =None, landing_studios: 'bool' =None, lit_logger: 'bool' =None, marketplace: 'bool' =None, mmt_fault_tolerance: 'bool' =None, mmt_strategy_selector: 'bool' =None, model_api_dashboard: 'bool' =None, multiple_studio_versions: 'bool' =None, nerf_fs_nonpaying: 'bool' =None, org_level_member_permissions: 'bool' =None, org_usage_limits: 'bool' =None, persistent_disk: 'bool' =None, plugin_distributed: 'bool' =None, plugin_inference: 'bool' =None, plugin_label_studio: 'bool' =None, plugin_langflow: 'bool' =None, plugin_python_profiler: 'bool' =None, plugin_sweeps: 'bool' =None, pricing_updates: 'bool' =None, product_generator: 'bool' =None, product_license: 'bool' =None, project_selector: 'bool' =None, publish_pipelines: 'bool' =None, reserved_machines_tab: 'bool' =None, restartable_jobs: 'bool' =None, runnable_public_studio_page: 'bool' =None, security_docs: 'bool' =None, show_dev_admin: 'bool' =None, slurm: 'bool' =None, specialised_studios: 'bool' =None, storage_overuse_deletion: 'bool' =None, studio_config: 'bool' =None, studio_sharing_v2: 'bool' =None, studio_version_visibility: 'bool' =None, vultr: 'bool' =None, weka: 'bool' =None, writable_s3_connections: 'bool' =None):  # noqa: E501
        """V1UserFeatures - a model defined in Swagger"""  # noqa: E501
        self._affiliate_links = None
        self._agents_v2 = None
        self._ai_hub_monetization = None
        self._auto_fast_load = None
        self._b2c_experience = None
        self._byo_machine_type = None
        self._cap_add = None
        self._cap_drop = None
        self._capacity_reservation_byoc = None
        self._capacity_reservation_dry_run = None
        self._chat_models = None
        self._cloudspace_schedules = None
        self._code_tab = None
        self._collab_screen_sharing = None
        self._control_center_monitoring = None
        self._cost_attribution_settings = None
        self._custom_app_domain = None
        self._datasets = None
        self._default_one_cluster = None
        self._deployment_persistent_disk = None
        self._drive_v2 = None
        self._enterprise_compute_admin = None
        self._f227 = None
        self._f234 = None
        self._f236 = None
        self._f239 = None
        self._f240 = None
        self._f241 = None
        self._f243 = None
        self._f245 = None
        self._f247 = None
        self._f248 = None
        self._f250 = None
        self._f252 = None
        self._f253 = None
        self._f254 = None
        self._f255 = None
        self._f257 = None
        self._f258 = None
        self._f259 = None
        self._f260 = None
        self._f261 = None
        self._f262 = None
        self._f263 = None
        self._f264 = None
        self._f265 = None
        self._f266 = None
        self._fair_share = None
        self._featured_studios_admin = None
        self._gcs_connections_optimized = None
        self._job_artifacts_v2 = None
        self._kubernetes_cluster_ui = None
        self._kubernetes_clusters = None
        self._landing_studios = None
        self._lit_logger = None
        self._marketplace = None
        self._mmt_fault_tolerance = None
        self._mmt_strategy_selector = None
        self._model_api_dashboard = None
        self._multiple_studio_versions = None
        self._nerf_fs_nonpaying = None
        self._org_level_member_permissions = None
        self._org_usage_limits = None
        self._persistent_disk = None
        self._plugin_distributed = None
        self._plugin_inference = None
        self._plugin_label_studio = None
        self._plugin_langflow = None
        self._plugin_python_profiler = None
        self._plugin_sweeps = None
        self._pricing_updates = None
        self._product_generator = None
        self._product_license = None
        self._project_selector = None
        self._publish_pipelines = None
        self._reserved_machines_tab = None
        self._restartable_jobs = None
        self._runnable_public_studio_page = None
        self._security_docs = None
        self._show_dev_admin = None
        self._slurm = None
        self._specialised_studios = None
        self._storage_overuse_deletion = None
        self._studio_config = None
        self._studio_sharing_v2 = None
        self._studio_version_visibility = None
        self._vultr = None
        self._weka = None
        self._writable_s3_connections = None
        self.discriminator = None
        if affiliate_links is not None:
            self.affiliate_links = affiliate_links
        if agents_v2 is not None:
            self.agents_v2 = agents_v2
        if ai_hub_monetization is not None:
            self.ai_hub_monetization = ai_hub_monetization
        if auto_fast_load is not None:
            self.auto_fast_load = auto_fast_load
        if b2c_experience is not None:
            self.b2c_experience = b2c_experience
        if byo_machine_type is not None:
            self.byo_machine_type = byo_machine_type
        if cap_add is not None:
            self.cap_add = cap_add
        if cap_drop is not None:
            self.cap_drop = cap_drop
        if capacity_reservation_byoc is not None:
            self.capacity_reservation_byoc = capacity_reservation_byoc
        if capacity_reservation_dry_run is not None:
            self.capacity_reservation_dry_run = capacity_reservation_dry_run
        if chat_models is not None:
            self.chat_models = chat_models
        if cloudspace_schedules is not None:
            self.cloudspace_schedules = cloudspace_schedules
        if code_tab is not None:
            self.code_tab = code_tab
        if collab_screen_sharing is not None:
            self.collab_screen_sharing = collab_screen_sharing
        if control_center_monitoring is not None:
            self.control_center_monitoring = control_center_monitoring
        if cost_attribution_settings is not None:
            self.cost_attribution_settings = cost_attribution_settings
        if custom_app_domain is not None:
            self.custom_app_domain = custom_app_domain
        if datasets is not None:
            self.datasets = datasets
        if default_one_cluster is not None:
            self.default_one_cluster = default_one_cluster
        if deployment_persistent_disk is not None:
            self.deployment_persistent_disk = deployment_persistent_disk
        if drive_v2 is not None:
            self.drive_v2 = drive_v2
        if enterprise_compute_admin is not None:
            self.enterprise_compute_admin = enterprise_compute_admin
        if f227 is not None:
            self.f227 = f227
        if f234 is not None:
            self.f234 = f234
        if f236 is not None:
            self.f236 = f236
        if f239 is not None:
            self.f239 = f239
        if f240 is not None:
            self.f240 = f240
        if f241 is not None:
            self.f241 = f241
        if f243 is not None:
            self.f243 = f243
        if f245 is not None:
            self.f245 = f245
        if f247 is not None:
            self.f247 = f247
        if f248 is not None:
            self.f248 = f248
        if f250 is not None:
            self.f250 = f250
        if f252 is not None:
            self.f252 = f252
        if f253 is not None:
            self.f253 = f253
        if f254 is not None:
            self.f254 = f254
        if f255 is not None:
            self.f255 = f255
        if f257 is not None:
            self.f257 = f257
        if f258 is not None:
            self.f258 = f258
        if f259 is not None:
            self.f259 = f259
        if f260 is not None:
            self.f260 = f260
        if f261 is not None:
            self.f261 = f261
        if f262 is not None:
            self.f262 = f262
        if f263 is not None:
            self.f263 = f263
        if f264 is not None:
            self.f264 = f264
        if f265 is not None:
            self.f265 = f265
        if f266 is not None:
            self.f266 = f266
        if fair_share is not None:
            self.fair_share = fair_share
        if featured_studios_admin is not None:
            self.featured_studios_admin = featured_studios_admin
        if gcs_connections_optimized is not None:
            self.gcs_connections_optimized = gcs_connections_optimized
        if job_artifacts_v2 is not None:
            self.job_artifacts_v2 = job_artifacts_v2
        if kubernetes_cluster_ui is not None:
            self.kubernetes_cluster_ui = kubernetes_cluster_ui
        if kubernetes_clusters is not None:
            self.kubernetes_clusters = kubernetes_clusters
        if landing_studios is not None:
            self.landing_studios = landing_studios
        if lit_logger is not None:
            self.lit_logger = lit_logger
        if marketplace is not None:
            self.marketplace = marketplace
        if mmt_fault_tolerance is not None:
            self.mmt_fault_tolerance = mmt_fault_tolerance
        if mmt_strategy_selector is not None:
            self.mmt_strategy_selector = mmt_strategy_selector
        if model_api_dashboard is not None:
            self.model_api_dashboard = model_api_dashboard
        if multiple_studio_versions is not None:
            self.multiple_studio_versions = multiple_studio_versions
        if nerf_fs_nonpaying is not None:
            self.nerf_fs_nonpaying = nerf_fs_nonpaying
        if org_level_member_permissions is not None:
            self.org_level_member_permissions = org_level_member_permissions
        if org_usage_limits is not None:
            self.org_usage_limits = org_usage_limits
        if persistent_disk is not None:
            self.persistent_disk = persistent_disk
        if plugin_distributed is not None:
            self.plugin_distributed = plugin_distributed
        if plugin_inference is not None:
            self.plugin_inference = plugin_inference
        if plugin_label_studio is not None:
            self.plugin_label_studio = plugin_label_studio
        if plugin_langflow is not None:
            self.plugin_langflow = plugin_langflow
        if plugin_python_profiler is not None:
            self.plugin_python_profiler = plugin_python_profiler
        if plugin_sweeps is not None:
            self.plugin_sweeps = plugin_sweeps
        if pricing_updates is not None:
            self.pricing_updates = pricing_updates
        if product_generator is not None:
            self.product_generator = product_generator
        if product_license is not None:
            self.product_license = product_license
        if project_selector is not None:
            self.project_selector = project_selector
        if publish_pipelines is not None:
            self.publish_pipelines = publish_pipelines
        if reserved_machines_tab is not None:
            self.reserved_machines_tab = reserved_machines_tab
        if restartable_jobs is not None:
            self.restartable_jobs = restartable_jobs
        if runnable_public_studio_page is not None:
            self.runnable_public_studio_page = runnable_public_studio_page
        if security_docs is not None:
            self.security_docs = security_docs
        if show_dev_admin is not None:
            self.show_dev_admin = show_dev_admin
        if slurm is not None:
            self.slurm = slurm
        if specialised_studios is not None:
            self.specialised_studios = specialised_studios
        if storage_overuse_deletion is not None:
            self.storage_overuse_deletion = storage_overuse_deletion
        if studio_config is not None:
            self.studio_config = studio_config
        if studio_sharing_v2 is not None:
            self.studio_sharing_v2 = studio_sharing_v2
        if studio_version_visibility is not None:
            self.studio_version_visibility = studio_version_visibility
        if vultr is not None:
            self.vultr = vultr
        if weka is not None:
            self.weka = weka
        if writable_s3_connections is not None:
            self.writable_s3_connections = writable_s3_connections

    @property
    def affiliate_links(self) -> 'bool':
        """Gets the affiliate_links of this V1UserFeatures.  # noqa: E501


        :return: The affiliate_links of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._affiliate_links

    @affiliate_links.setter
    def affiliate_links(self, affiliate_links: 'bool'):
        """Sets the affiliate_links of this V1UserFeatures.


        :param affiliate_links: The affiliate_links of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._affiliate_links = affiliate_links

    @property
    def agents_v2(self) -> 'bool':
        """Gets the agents_v2 of this V1UserFeatures.  # noqa: E501


        :return: The agents_v2 of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._agents_v2

    @agents_v2.setter
    def agents_v2(self, agents_v2: 'bool'):
        """Sets the agents_v2 of this V1UserFeatures.


        :param agents_v2: The agents_v2 of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._agents_v2 = agents_v2

    @property
    def ai_hub_monetization(self) -> 'bool':
        """Gets the ai_hub_monetization of this V1UserFeatures.  # noqa: E501


        :return: The ai_hub_monetization of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._ai_hub_monetization

    @ai_hub_monetization.setter
    def ai_hub_monetization(self, ai_hub_monetization: 'bool'):
        """Sets the ai_hub_monetization of this V1UserFeatures.


        :param ai_hub_monetization: The ai_hub_monetization of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._ai_hub_monetization = ai_hub_monetization

    @property
    def auto_fast_load(self) -> 'bool':
        """Gets the auto_fast_load of this V1UserFeatures.  # noqa: E501


        :return: The auto_fast_load of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._auto_fast_load

    @auto_fast_load.setter
    def auto_fast_load(self, auto_fast_load: 'bool'):
        """Sets the auto_fast_load of this V1UserFeatures.


        :param auto_fast_load: The auto_fast_load of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._auto_fast_load = auto_fast_load

    @property
    def b2c_experience(self) -> 'bool':
        """Gets the b2c_experience of this V1UserFeatures.  # noqa: E501


        :return: The b2c_experience of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._b2c_experience

    @b2c_experience.setter
    def b2c_experience(self, b2c_experience: 'bool'):
        """Sets the b2c_experience of this V1UserFeatures.


        :param b2c_experience: The b2c_experience of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._b2c_experience = b2c_experience

    @property
    def byo_machine_type(self) -> 'bool':
        """Gets the byo_machine_type of this V1UserFeatures.  # noqa: E501


        :return: The byo_machine_type of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._byo_machine_type

    @byo_machine_type.setter
    def byo_machine_type(self, byo_machine_type: 'bool'):
        """Sets the byo_machine_type of this V1UserFeatures.


        :param byo_machine_type: The byo_machine_type of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._byo_machine_type = byo_machine_type

    @property
    def cap_add(self) -> 'list[str]':
        """Gets the cap_add of this V1UserFeatures.  # noqa: E501


        :return: The cap_add of this V1UserFeatures.  # noqa: E501
        :rtype: list[str]
        """
        return self._cap_add

    @cap_add.setter
    def cap_add(self, cap_add: 'list[str]'):
        """Sets the cap_add of this V1UserFeatures.


        :param cap_add: The cap_add of this V1UserFeatures.  # noqa: E501
        :type: list[str]
        """

        self._cap_add = cap_add

    @property
    def cap_drop(self) -> 'list[str]':
        """Gets the cap_drop of this V1UserFeatures.  # noqa: E501


        :return: The cap_drop of this V1UserFeatures.  # noqa: E501
        :rtype: list[str]
        """
        return self._cap_drop

    @cap_drop.setter
    def cap_drop(self, cap_drop: 'list[str]'):
        """Sets the cap_drop of this V1UserFeatures.


        :param cap_drop: The cap_drop of this V1UserFeatures.  # noqa: E501
        :type: list[str]
        """

        self._cap_drop = cap_drop

    @property
    def capacity_reservation_byoc(self) -> 'bool':
        """Gets the capacity_reservation_byoc of this V1UserFeatures.  # noqa: E501


        :return: The capacity_reservation_byoc of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._capacity_reservation_byoc

    @capacity_reservation_byoc.setter
    def capacity_reservation_byoc(self, capacity_reservation_byoc: 'bool'):
        """Sets the capacity_reservation_byoc of this V1UserFeatures.


        :param capacity_reservation_byoc: The capacity_reservation_byoc of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._capacity_reservation_byoc = capacity_reservation_byoc

    @property
    def capacity_reservation_dry_run(self) -> 'bool':
        """Gets the capacity_reservation_dry_run of this V1UserFeatures.  # noqa: E501


        :return: The capacity_reservation_dry_run of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._capacity_reservation_dry_run

    @capacity_reservation_dry_run.setter
    def capacity_reservation_dry_run(self, capacity_reservation_dry_run: 'bool'):
        """Sets the capacity_reservation_dry_run of this V1UserFeatures.


        :param capacity_reservation_dry_run: The capacity_reservation_dry_run of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._capacity_reservation_dry_run = capacity_reservation_dry_run

    @property
    def chat_models(self) -> 'bool':
        """Gets the chat_models of this V1UserFeatures.  # noqa: E501


        :return: The chat_models of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._chat_models

    @chat_models.setter
    def chat_models(self, chat_models: 'bool'):
        """Sets the chat_models of this V1UserFeatures.


        :param chat_models: The chat_models of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._chat_models = chat_models

    @property
    def cloudspace_schedules(self) -> 'bool':
        """Gets the cloudspace_schedules of this V1UserFeatures.  # noqa: E501


        :return: The cloudspace_schedules of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._cloudspace_schedules

    @cloudspace_schedules.setter
    def cloudspace_schedules(self, cloudspace_schedules: 'bool'):
        """Sets the cloudspace_schedules of this V1UserFeatures.


        :param cloudspace_schedules: The cloudspace_schedules of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._cloudspace_schedules = cloudspace_schedules

    @property
    def code_tab(self) -> 'bool':
        """Gets the code_tab of this V1UserFeatures.  # noqa: E501


        :return: The code_tab of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._code_tab

    @code_tab.setter
    def code_tab(self, code_tab: 'bool'):
        """Sets the code_tab of this V1UserFeatures.


        :param code_tab: The code_tab of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._code_tab = code_tab

    @property
    def collab_screen_sharing(self) -> 'bool':
        """Gets the collab_screen_sharing of this V1UserFeatures.  # noqa: E501


        :return: The collab_screen_sharing of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._collab_screen_sharing

    @collab_screen_sharing.setter
    def collab_screen_sharing(self, collab_screen_sharing: 'bool'):
        """Sets the collab_screen_sharing of this V1UserFeatures.


        :param collab_screen_sharing: The collab_screen_sharing of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._collab_screen_sharing = collab_screen_sharing

    @property
    def control_center_monitoring(self) -> 'bool':
        """Gets the control_center_monitoring of this V1UserFeatures.  # noqa: E501


        :return: The control_center_monitoring of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._control_center_monitoring

    @control_center_monitoring.setter
    def control_center_monitoring(self, control_center_monitoring: 'bool'):
        """Sets the control_center_monitoring of this V1UserFeatures.


        :param control_center_monitoring: The control_center_monitoring of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._control_center_monitoring = control_center_monitoring

    @property
    def cost_attribution_settings(self) -> 'bool':
        """Gets the cost_attribution_settings of this V1UserFeatures.  # noqa: E501


        :return: The cost_attribution_settings of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._cost_attribution_settings

    @cost_attribution_settings.setter
    def cost_attribution_settings(self, cost_attribution_settings: 'bool'):
        """Sets the cost_attribution_settings of this V1UserFeatures.


        :param cost_attribution_settings: The cost_attribution_settings of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._cost_attribution_settings = cost_attribution_settings

    @property
    def custom_app_domain(self) -> 'bool':
        """Gets the custom_app_domain of this V1UserFeatures.  # noqa: E501


        :return: The custom_app_domain of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._custom_app_domain

    @custom_app_domain.setter
    def custom_app_domain(self, custom_app_domain: 'bool'):
        """Sets the custom_app_domain of this V1UserFeatures.


        :param custom_app_domain: The custom_app_domain of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._custom_app_domain = custom_app_domain

    @property
    def datasets(self) -> 'bool':
        """Gets the datasets of this V1UserFeatures.  # noqa: E501


        :return: The datasets of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._datasets

    @datasets.setter
    def datasets(self, datasets: 'bool'):
        """Sets the datasets of this V1UserFeatures.


        :param datasets: The datasets of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._datasets = datasets

    @property
    def default_one_cluster(self) -> 'bool':
        """Gets the default_one_cluster of this V1UserFeatures.  # noqa: E501


        :return: The default_one_cluster of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._default_one_cluster

    @default_one_cluster.setter
    def default_one_cluster(self, default_one_cluster: 'bool'):
        """Sets the default_one_cluster of this V1UserFeatures.


        :param default_one_cluster: The default_one_cluster of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._default_one_cluster = default_one_cluster

    @property
    def deployment_persistent_disk(self) -> 'bool':
        """Gets the deployment_persistent_disk of this V1UserFeatures.  # noqa: E501


        :return: The deployment_persistent_disk of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._deployment_persistent_disk

    @deployment_persistent_disk.setter
    def deployment_persistent_disk(self, deployment_persistent_disk: 'bool'):
        """Sets the deployment_persistent_disk of this V1UserFeatures.


        :param deployment_persistent_disk: The deployment_persistent_disk of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._deployment_persistent_disk = deployment_persistent_disk

    @property
    def drive_v2(self) -> 'bool':
        """Gets the drive_v2 of this V1UserFeatures.  # noqa: E501


        :return: The drive_v2 of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._drive_v2

    @drive_v2.setter
    def drive_v2(self, drive_v2: 'bool'):
        """Sets the drive_v2 of this V1UserFeatures.


        :param drive_v2: The drive_v2 of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._drive_v2 = drive_v2

    @property
    def enterprise_compute_admin(self) -> 'bool':
        """Gets the enterprise_compute_admin of this V1UserFeatures.  # noqa: E501


        :return: The enterprise_compute_admin of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._enterprise_compute_admin

    @enterprise_compute_admin.setter
    def enterprise_compute_admin(self, enterprise_compute_admin: 'bool'):
        """Sets the enterprise_compute_admin of this V1UserFeatures.


        :param enterprise_compute_admin: The enterprise_compute_admin of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._enterprise_compute_admin = enterprise_compute_admin

    @property
    def f227(self) -> 'bool':
        """Gets the f227 of this V1UserFeatures.  # noqa: E501


        :return: The f227 of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._f227

    @f227.setter
    def f227(self, f227: 'bool'):
        """Sets the f227 of this V1UserFeatures.


        :param f227: The f227 of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._f227 = f227

    @property
    def f234(self) -> 'bool':
        """Gets the f234 of this V1UserFeatures.  # noqa: E501


        :return: The f234 of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._f234

    @f234.setter
    def f234(self, f234: 'bool'):
        """Sets the f234 of this V1UserFeatures.


        :param f234: The f234 of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._f234 = f234

    @property
    def f236(self) -> 'bool':
        """Gets the f236 of this V1UserFeatures.  # noqa: E501


        :return: The f236 of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._f236

    @f236.setter
    def f236(self, f236: 'bool'):
        """Sets the f236 of this V1UserFeatures.


        :param f236: The f236 of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._f236 = f236

    @property
    def f239(self) -> 'bool':
        """Gets the f239 of this V1UserFeatures.  # noqa: E501


        :return: The f239 of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._f239

    @f239.setter
    def f239(self, f239: 'bool'):
        """Sets the f239 of this V1UserFeatures.


        :param f239: The f239 of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._f239 = f239

    @property
    def f240(self) -> 'bool':
        """Gets the f240 of this V1UserFeatures.  # noqa: E501


        :return: The f240 of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._f240

    @f240.setter
    def f240(self, f240: 'bool'):
        """Sets the f240 of this V1UserFeatures.


        :param f240: The f240 of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._f240 = f240

    @property
    def f241(self) -> 'bool':
        """Gets the f241 of this V1UserFeatures.  # noqa: E501


        :return: The f241 of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._f241

    @f241.setter
    def f241(self, f241: 'bool'):
        """Sets the f241 of this V1UserFeatures.


        :param f241: The f241 of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._f241 = f241

    @property
    def f243(self) -> 'bool':
        """Gets the f243 of this V1UserFeatures.  # noqa: E501


        :return: The f243 of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._f243

    @f243.setter
    def f243(self, f243: 'bool'):
        """Sets the f243 of this V1UserFeatures.


        :param f243: The f243 of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._f243 = f243

    @property
    def f245(self) -> 'bool':
        """Gets the f245 of this V1UserFeatures.  # noqa: E501


        :return: The f245 of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._f245

    @f245.setter
    def f245(self, f245: 'bool'):
        """Sets the f245 of this V1UserFeatures.


        :param f245: The f245 of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._f245 = f245

    @property
    def f247(self) -> 'bool':
        """Gets the f247 of this V1UserFeatures.  # noqa: E501


        :return: The f247 of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._f247

    @f247.setter
    def f247(self, f247: 'bool'):
        """Sets the f247 of this V1UserFeatures.


        :param f247: The f247 of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._f247 = f247

    @property
    def f248(self) -> 'bool':
        """Gets the f248 of this V1UserFeatures.  # noqa: E501


        :return: The f248 of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._f248

    @f248.setter
    def f248(self, f248: 'bool'):
        """Sets the f248 of this V1UserFeatures.


        :param f248: The f248 of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._f248 = f248

    @property
    def f250(self) -> 'bool':
        """Gets the f250 of this V1UserFeatures.  # noqa: E501


        :return: The f250 of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._f250

    @f250.setter
    def f250(self, f250: 'bool'):
        """Sets the f250 of this V1UserFeatures.


        :param f250: The f250 of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._f250 = f250

    @property
    def f252(self) -> 'bool':
        """Gets the f252 of this V1UserFeatures.  # noqa: E501


        :return: The f252 of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._f252

    @f252.setter
    def f252(self, f252: 'bool'):
        """Sets the f252 of this V1UserFeatures.


        :param f252: The f252 of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._f252 = f252

    @property
    def f253(self) -> 'bool':
        """Gets the f253 of this V1UserFeatures.  # noqa: E501


        :return: The f253 of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._f253

    @f253.setter
    def f253(self, f253: 'bool'):
        """Sets the f253 of this V1UserFeatures.


        :param f253: The f253 of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._f253 = f253

    @property
    def f254(self) -> 'bool':
        """Gets the f254 of this V1UserFeatures.  # noqa: E501


        :return: The f254 of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._f254

    @f254.setter
    def f254(self, f254: 'bool'):
        """Sets the f254 of this V1UserFeatures.


        :param f254: The f254 of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._f254 = f254

    @property
    def f255(self) -> 'bool':
        """Gets the f255 of this V1UserFeatures.  # noqa: E501


        :return: The f255 of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._f255

    @f255.setter
    def f255(self, f255: 'bool'):
        """Sets the f255 of this V1UserFeatures.


        :param f255: The f255 of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._f255 = f255

    @property
    def f257(self) -> 'bool':
        """Gets the f257 of this V1UserFeatures.  # noqa: E501


        :return: The f257 of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._f257

    @f257.setter
    def f257(self, f257: 'bool'):
        """Sets the f257 of this V1UserFeatures.


        :param f257: The f257 of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._f257 = f257

    @property
    def f258(self) -> 'bool':
        """Gets the f258 of this V1UserFeatures.  # noqa: E501


        :return: The f258 of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._f258

    @f258.setter
    def f258(self, f258: 'bool'):
        """Sets the f258 of this V1UserFeatures.


        :param f258: The f258 of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._f258 = f258

    @property
    def f259(self) -> 'bool':
        """Gets the f259 of this V1UserFeatures.  # noqa: E501


        :return: The f259 of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._f259

    @f259.setter
    def f259(self, f259: 'bool'):
        """Sets the f259 of this V1UserFeatures.


        :param f259: The f259 of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._f259 = f259

    @property
    def f260(self) -> 'bool':
        """Gets the f260 of this V1UserFeatures.  # noqa: E501


        :return: The f260 of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._f260

    @f260.setter
    def f260(self, f260: 'bool'):
        """Sets the f260 of this V1UserFeatures.


        :param f260: The f260 of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._f260 = f260

    @property
    def f261(self) -> 'bool':
        """Gets the f261 of this V1UserFeatures.  # noqa: E501


        :return: The f261 of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._f261

    @f261.setter
    def f261(self, f261: 'bool'):
        """Sets the f261 of this V1UserFeatures.


        :param f261: The f261 of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._f261 = f261

    @property
    def f262(self) -> 'bool':
        """Gets the f262 of this V1UserFeatures.  # noqa: E501


        :return: The f262 of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._f262

    @f262.setter
    def f262(self, f262: 'bool'):
        """Sets the f262 of this V1UserFeatures.


        :param f262: The f262 of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._f262 = f262

    @property
    def f263(self) -> 'bool':
        """Gets the f263 of this V1UserFeatures.  # noqa: E501


        :return: The f263 of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._f263

    @f263.setter
    def f263(self, f263: 'bool'):
        """Sets the f263 of this V1UserFeatures.


        :param f263: The f263 of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._f263 = f263

    @property
    def f264(self) -> 'bool':
        """Gets the f264 of this V1UserFeatures.  # noqa: E501


        :return: The f264 of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._f264

    @f264.setter
    def f264(self, f264: 'bool'):
        """Sets the f264 of this V1UserFeatures.


        :param f264: The f264 of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._f264 = f264

    @property
    def f265(self) -> 'bool':
        """Gets the f265 of this V1UserFeatures.  # noqa: E501


        :return: The f265 of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._f265

    @f265.setter
    def f265(self, f265: 'bool'):
        """Sets the f265 of this V1UserFeatures.


        :param f265: The f265 of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._f265 = f265

    @property
    def f266(self) -> 'bool':
        """Gets the f266 of this V1UserFeatures.  # noqa: E501


        :return: The f266 of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._f266

    @f266.setter
    def f266(self, f266: 'bool'):
        """Sets the f266 of this V1UserFeatures.


        :param f266: The f266 of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._f266 = f266

    @property
    def fair_share(self) -> 'bool':
        """Gets the fair_share of this V1UserFeatures.  # noqa: E501


        :return: The fair_share of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._fair_share

    @fair_share.setter
    def fair_share(self, fair_share: 'bool'):
        """Sets the fair_share of this V1UserFeatures.


        :param fair_share: The fair_share of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._fair_share = fair_share

    @property
    def featured_studios_admin(self) -> 'bool':
        """Gets the featured_studios_admin of this V1UserFeatures.  # noqa: E501


        :return: The featured_studios_admin of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._featured_studios_admin

    @featured_studios_admin.setter
    def featured_studios_admin(self, featured_studios_admin: 'bool'):
        """Sets the featured_studios_admin of this V1UserFeatures.


        :param featured_studios_admin: The featured_studios_admin of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._featured_studios_admin = featured_studios_admin

    @property
    def gcs_connections_optimized(self) -> 'bool':
        """Gets the gcs_connections_optimized of this V1UserFeatures.  # noqa: E501


        :return: The gcs_connections_optimized of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._gcs_connections_optimized

    @gcs_connections_optimized.setter
    def gcs_connections_optimized(self, gcs_connections_optimized: 'bool'):
        """Sets the gcs_connections_optimized of this V1UserFeatures.


        :param gcs_connections_optimized: The gcs_connections_optimized of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._gcs_connections_optimized = gcs_connections_optimized

    @property
    def job_artifacts_v2(self) -> 'bool':
        """Gets the job_artifacts_v2 of this V1UserFeatures.  # noqa: E501


        :return: The job_artifacts_v2 of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._job_artifacts_v2

    @job_artifacts_v2.setter
    def job_artifacts_v2(self, job_artifacts_v2: 'bool'):
        """Sets the job_artifacts_v2 of this V1UserFeatures.


        :param job_artifacts_v2: The job_artifacts_v2 of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._job_artifacts_v2 = job_artifacts_v2

    @property
    def kubernetes_cluster_ui(self) -> 'bool':
        """Gets the kubernetes_cluster_ui of this V1UserFeatures.  # noqa: E501


        :return: The kubernetes_cluster_ui of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._kubernetes_cluster_ui

    @kubernetes_cluster_ui.setter
    def kubernetes_cluster_ui(self, kubernetes_cluster_ui: 'bool'):
        """Sets the kubernetes_cluster_ui of this V1UserFeatures.


        :param kubernetes_cluster_ui: The kubernetes_cluster_ui of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._kubernetes_cluster_ui = kubernetes_cluster_ui

    @property
    def kubernetes_clusters(self) -> 'bool':
        """Gets the kubernetes_clusters of this V1UserFeatures.  # noqa: E501


        :return: The kubernetes_clusters of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._kubernetes_clusters

    @kubernetes_clusters.setter
    def kubernetes_clusters(self, kubernetes_clusters: 'bool'):
        """Sets the kubernetes_clusters of this V1UserFeatures.


        :param kubernetes_clusters: The kubernetes_clusters of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._kubernetes_clusters = kubernetes_clusters

    @property
    def landing_studios(self) -> 'bool':
        """Gets the landing_studios of this V1UserFeatures.  # noqa: E501


        :return: The landing_studios of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._landing_studios

    @landing_studios.setter
    def landing_studios(self, landing_studios: 'bool'):
        """Sets the landing_studios of this V1UserFeatures.


        :param landing_studios: The landing_studios of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._landing_studios = landing_studios

    @property
    def lit_logger(self) -> 'bool':
        """Gets the lit_logger of this V1UserFeatures.  # noqa: E501


        :return: The lit_logger of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._lit_logger

    @lit_logger.setter
    def lit_logger(self, lit_logger: 'bool'):
        """Sets the lit_logger of this V1UserFeatures.


        :param lit_logger: The lit_logger of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._lit_logger = lit_logger

    @property
    def marketplace(self) -> 'bool':
        """Gets the marketplace of this V1UserFeatures.  # noqa: E501


        :return: The marketplace of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._marketplace

    @marketplace.setter
    def marketplace(self, marketplace: 'bool'):
        """Sets the marketplace of this V1UserFeatures.


        :param marketplace: The marketplace of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._marketplace = marketplace

    @property
    def mmt_fault_tolerance(self) -> 'bool':
        """Gets the mmt_fault_tolerance of this V1UserFeatures.  # noqa: E501


        :return: The mmt_fault_tolerance of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._mmt_fault_tolerance

    @mmt_fault_tolerance.setter
    def mmt_fault_tolerance(self, mmt_fault_tolerance: 'bool'):
        """Sets the mmt_fault_tolerance of this V1UserFeatures.


        :param mmt_fault_tolerance: The mmt_fault_tolerance of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._mmt_fault_tolerance = mmt_fault_tolerance

    @property
    def mmt_strategy_selector(self) -> 'bool':
        """Gets the mmt_strategy_selector of this V1UserFeatures.  # noqa: E501


        :return: The mmt_strategy_selector of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._mmt_strategy_selector

    @mmt_strategy_selector.setter
    def mmt_strategy_selector(self, mmt_strategy_selector: 'bool'):
        """Sets the mmt_strategy_selector of this V1UserFeatures.


        :param mmt_strategy_selector: The mmt_strategy_selector of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._mmt_strategy_selector = mmt_strategy_selector

    @property
    def model_api_dashboard(self) -> 'bool':
        """Gets the model_api_dashboard of this V1UserFeatures.  # noqa: E501


        :return: The model_api_dashboard of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._model_api_dashboard

    @model_api_dashboard.setter
    def model_api_dashboard(self, model_api_dashboard: 'bool'):
        """Sets the model_api_dashboard of this V1UserFeatures.


        :param model_api_dashboard: The model_api_dashboard of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._model_api_dashboard = model_api_dashboard

    @property
    def multiple_studio_versions(self) -> 'bool':
        """Gets the multiple_studio_versions of this V1UserFeatures.  # noqa: E501


        :return: The multiple_studio_versions of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._multiple_studio_versions

    @multiple_studio_versions.setter
    def multiple_studio_versions(self, multiple_studio_versions: 'bool'):
        """Sets the multiple_studio_versions of this V1UserFeatures.


        :param multiple_studio_versions: The multiple_studio_versions of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._multiple_studio_versions = multiple_studio_versions

    @property
    def nerf_fs_nonpaying(self) -> 'bool':
        """Gets the nerf_fs_nonpaying of this V1UserFeatures.  # noqa: E501


        :return: The nerf_fs_nonpaying of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._nerf_fs_nonpaying

    @nerf_fs_nonpaying.setter
    def nerf_fs_nonpaying(self, nerf_fs_nonpaying: 'bool'):
        """Sets the nerf_fs_nonpaying of this V1UserFeatures.


        :param nerf_fs_nonpaying: The nerf_fs_nonpaying of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._nerf_fs_nonpaying = nerf_fs_nonpaying

    @property
    def org_level_member_permissions(self) -> 'bool':
        """Gets the org_level_member_permissions of this V1UserFeatures.  # noqa: E501


        :return: The org_level_member_permissions of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._org_level_member_permissions

    @org_level_member_permissions.setter
    def org_level_member_permissions(self, org_level_member_permissions: 'bool'):
        """Sets the org_level_member_permissions of this V1UserFeatures.


        :param org_level_member_permissions: The org_level_member_permissions of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._org_level_member_permissions = org_level_member_permissions

    @property
    def org_usage_limits(self) -> 'bool':
        """Gets the org_usage_limits of this V1UserFeatures.  # noqa: E501


        :return: The org_usage_limits of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._org_usage_limits

    @org_usage_limits.setter
    def org_usage_limits(self, org_usage_limits: 'bool'):
        """Sets the org_usage_limits of this V1UserFeatures.


        :param org_usage_limits: The org_usage_limits of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._org_usage_limits = org_usage_limits

    @property
    def persistent_disk(self) -> 'bool':
        """Gets the persistent_disk of this V1UserFeatures.  # noqa: E501


        :return: The persistent_disk of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._persistent_disk

    @persistent_disk.setter
    def persistent_disk(self, persistent_disk: 'bool'):
        """Sets the persistent_disk of this V1UserFeatures.


        :param persistent_disk: The persistent_disk of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._persistent_disk = persistent_disk

    @property
    def plugin_distributed(self) -> 'bool':
        """Gets the plugin_distributed of this V1UserFeatures.  # noqa: E501


        :return: The plugin_distributed of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._plugin_distributed

    @plugin_distributed.setter
    def plugin_distributed(self, plugin_distributed: 'bool'):
        """Sets the plugin_distributed of this V1UserFeatures.


        :param plugin_distributed: The plugin_distributed of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._plugin_distributed = plugin_distributed

    @property
    def plugin_inference(self) -> 'bool':
        """Gets the plugin_inference of this V1UserFeatures.  # noqa: E501


        :return: The plugin_inference of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._plugin_inference

    @plugin_inference.setter
    def plugin_inference(self, plugin_inference: 'bool'):
        """Sets the plugin_inference of this V1UserFeatures.


        :param plugin_inference: The plugin_inference of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._plugin_inference = plugin_inference

    @property
    def plugin_label_studio(self) -> 'bool':
        """Gets the plugin_label_studio of this V1UserFeatures.  # noqa: E501


        :return: The plugin_label_studio of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._plugin_label_studio

    @plugin_label_studio.setter
    def plugin_label_studio(self, plugin_label_studio: 'bool'):
        """Sets the plugin_label_studio of this V1UserFeatures.


        :param plugin_label_studio: The plugin_label_studio of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._plugin_label_studio = plugin_label_studio

    @property
    def plugin_langflow(self) -> 'bool':
        """Gets the plugin_langflow of this V1UserFeatures.  # noqa: E501


        :return: The plugin_langflow of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._plugin_langflow

    @plugin_langflow.setter
    def plugin_langflow(self, plugin_langflow: 'bool'):
        """Sets the plugin_langflow of this V1UserFeatures.


        :param plugin_langflow: The plugin_langflow of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._plugin_langflow = plugin_langflow

    @property
    def plugin_python_profiler(self) -> 'bool':
        """Gets the plugin_python_profiler of this V1UserFeatures.  # noqa: E501


        :return: The plugin_python_profiler of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._plugin_python_profiler

    @plugin_python_profiler.setter
    def plugin_python_profiler(self, plugin_python_profiler: 'bool'):
        """Sets the plugin_python_profiler of this V1UserFeatures.


        :param plugin_python_profiler: The plugin_python_profiler of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._plugin_python_profiler = plugin_python_profiler

    @property
    def plugin_sweeps(self) -> 'bool':
        """Gets the plugin_sweeps of this V1UserFeatures.  # noqa: E501


        :return: The plugin_sweeps of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._plugin_sweeps

    @plugin_sweeps.setter
    def plugin_sweeps(self, plugin_sweeps: 'bool'):
        """Sets the plugin_sweeps of this V1UserFeatures.


        :param plugin_sweeps: The plugin_sweeps of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._plugin_sweeps = plugin_sweeps

    @property
    def pricing_updates(self) -> 'bool':
        """Gets the pricing_updates of this V1UserFeatures.  # noqa: E501


        :return: The pricing_updates of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._pricing_updates

    @pricing_updates.setter
    def pricing_updates(self, pricing_updates: 'bool'):
        """Sets the pricing_updates of this V1UserFeatures.


        :param pricing_updates: The pricing_updates of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._pricing_updates = pricing_updates

    @property
    def product_generator(self) -> 'bool':
        """Gets the product_generator of this V1UserFeatures.  # noqa: E501


        :return: The product_generator of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._product_generator

    @product_generator.setter
    def product_generator(self, product_generator: 'bool'):
        """Sets the product_generator of this V1UserFeatures.


        :param product_generator: The product_generator of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._product_generator = product_generator

    @property
    def product_license(self) -> 'bool':
        """Gets the product_license of this V1UserFeatures.  # noqa: E501


        :return: The product_license of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._product_license

    @product_license.setter
    def product_license(self, product_license: 'bool'):
        """Sets the product_license of this V1UserFeatures.


        :param product_license: The product_license of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._product_license = product_license

    @property
    def project_selector(self) -> 'bool':
        """Gets the project_selector of this V1UserFeatures.  # noqa: E501


        :return: The project_selector of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._project_selector

    @project_selector.setter
    def project_selector(self, project_selector: 'bool'):
        """Sets the project_selector of this V1UserFeatures.


        :param project_selector: The project_selector of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._project_selector = project_selector

    @property
    def publish_pipelines(self) -> 'bool':
        """Gets the publish_pipelines of this V1UserFeatures.  # noqa: E501


        :return: The publish_pipelines of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._publish_pipelines

    @publish_pipelines.setter
    def publish_pipelines(self, publish_pipelines: 'bool'):
        """Sets the publish_pipelines of this V1UserFeatures.


        :param publish_pipelines: The publish_pipelines of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._publish_pipelines = publish_pipelines

    @property
    def reserved_machines_tab(self) -> 'bool':
        """Gets the reserved_machines_tab of this V1UserFeatures.  # noqa: E501


        :return: The reserved_machines_tab of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._reserved_machines_tab

    @reserved_machines_tab.setter
    def reserved_machines_tab(self, reserved_machines_tab: 'bool'):
        """Sets the reserved_machines_tab of this V1UserFeatures.


        :param reserved_machines_tab: The reserved_machines_tab of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._reserved_machines_tab = reserved_machines_tab

    @property
    def restartable_jobs(self) -> 'bool':
        """Gets the restartable_jobs of this V1UserFeatures.  # noqa: E501


        :return: The restartable_jobs of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._restartable_jobs

    @restartable_jobs.setter
    def restartable_jobs(self, restartable_jobs: 'bool'):
        """Sets the restartable_jobs of this V1UserFeatures.


        :param restartable_jobs: The restartable_jobs of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._restartable_jobs = restartable_jobs

    @property
    def runnable_public_studio_page(self) -> 'bool':
        """Gets the runnable_public_studio_page of this V1UserFeatures.  # noqa: E501


        :return: The runnable_public_studio_page of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._runnable_public_studio_page

    @runnable_public_studio_page.setter
    def runnable_public_studio_page(self, runnable_public_studio_page: 'bool'):
        """Sets the runnable_public_studio_page of this V1UserFeatures.


        :param runnable_public_studio_page: The runnable_public_studio_page of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._runnable_public_studio_page = runnable_public_studio_page

    @property
    def security_docs(self) -> 'bool':
        """Gets the security_docs of this V1UserFeatures.  # noqa: E501


        :return: The security_docs of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._security_docs

    @security_docs.setter
    def security_docs(self, security_docs: 'bool'):
        """Sets the security_docs of this V1UserFeatures.


        :param security_docs: The security_docs of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._security_docs = security_docs

    @property
    def show_dev_admin(self) -> 'bool':
        """Gets the show_dev_admin of this V1UserFeatures.  # noqa: E501


        :return: The show_dev_admin of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._show_dev_admin

    @show_dev_admin.setter
    def show_dev_admin(self, show_dev_admin: 'bool'):
        """Sets the show_dev_admin of this V1UserFeatures.


        :param show_dev_admin: The show_dev_admin of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._show_dev_admin = show_dev_admin

    @property
    def slurm(self) -> 'bool':
        """Gets the slurm of this V1UserFeatures.  # noqa: E501


        :return: The slurm of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._slurm

    @slurm.setter
    def slurm(self, slurm: 'bool'):
        """Sets the slurm of this V1UserFeatures.


        :param slurm: The slurm of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._slurm = slurm

    @property
    def specialised_studios(self) -> 'bool':
        """Gets the specialised_studios of this V1UserFeatures.  # noqa: E501


        :return: The specialised_studios of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._specialised_studios

    @specialised_studios.setter
    def specialised_studios(self, specialised_studios: 'bool'):
        """Sets the specialised_studios of this V1UserFeatures.


        :param specialised_studios: The specialised_studios of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._specialised_studios = specialised_studios

    @property
    def storage_overuse_deletion(self) -> 'bool':
        """Gets the storage_overuse_deletion of this V1UserFeatures.  # noqa: E501


        :return: The storage_overuse_deletion of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._storage_overuse_deletion

    @storage_overuse_deletion.setter
    def storage_overuse_deletion(self, storage_overuse_deletion: 'bool'):
        """Sets the storage_overuse_deletion of this V1UserFeatures.


        :param storage_overuse_deletion: The storage_overuse_deletion of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._storage_overuse_deletion = storage_overuse_deletion

    @property
    def studio_config(self) -> 'bool':
        """Gets the studio_config of this V1UserFeatures.  # noqa: E501


        :return: The studio_config of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._studio_config

    @studio_config.setter
    def studio_config(self, studio_config: 'bool'):
        """Sets the studio_config of this V1UserFeatures.


        :param studio_config: The studio_config of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._studio_config = studio_config

    @property
    def studio_sharing_v2(self) -> 'bool':
        """Gets the studio_sharing_v2 of this V1UserFeatures.  # noqa: E501


        :return: The studio_sharing_v2 of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._studio_sharing_v2

    @studio_sharing_v2.setter
    def studio_sharing_v2(self, studio_sharing_v2: 'bool'):
        """Sets the studio_sharing_v2 of this V1UserFeatures.


        :param studio_sharing_v2: The studio_sharing_v2 of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._studio_sharing_v2 = studio_sharing_v2

    @property
    def studio_version_visibility(self) -> 'bool':
        """Gets the studio_version_visibility of this V1UserFeatures.  # noqa: E501


        :return: The studio_version_visibility of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._studio_version_visibility

    @studio_version_visibility.setter
    def studio_version_visibility(self, studio_version_visibility: 'bool'):
        """Sets the studio_version_visibility of this V1UserFeatures.


        :param studio_version_visibility: The studio_version_visibility of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._studio_version_visibility = studio_version_visibility

    @property
    def vultr(self) -> 'bool':
        """Gets the vultr of this V1UserFeatures.  # noqa: E501


        :return: The vultr of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._vultr

    @vultr.setter
    def vultr(self, vultr: 'bool'):
        """Sets the vultr of this V1UserFeatures.


        :param vultr: The vultr of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._vultr = vultr

    @property
    def weka(self) -> 'bool':
        """Gets the weka of this V1UserFeatures.  # noqa: E501


        :return: The weka of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._weka

    @weka.setter
    def weka(self, weka: 'bool'):
        """Sets the weka of this V1UserFeatures.


        :param weka: The weka of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._weka = weka

    @property
    def writable_s3_connections(self) -> 'bool':
        """Gets the writable_s3_connections of this V1UserFeatures.  # noqa: E501


        :return: The writable_s3_connections of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._writable_s3_connections

    @writable_s3_connections.setter
    def writable_s3_connections(self, writable_s3_connections: 'bool'):
        """Sets the writable_s3_connections of this V1UserFeatures.


        :param writable_s3_connections: The writable_s3_connections of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._writable_s3_connections = writable_s3_connections

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1UserFeatures, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1UserFeatures') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1UserFeatures):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1UserFeatures') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
