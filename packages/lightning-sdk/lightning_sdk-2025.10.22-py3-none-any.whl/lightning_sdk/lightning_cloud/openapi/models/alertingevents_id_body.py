# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class AlertingeventsIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alerting_policy_id': 'str',
        'created_at': 'datetime',
        'description': 'str',
        'frequency': 'V1DeploymentAlertingPolicyFrequency',
        'limit': 'float',
        'message': 'str',
        'name': 'str',
        'operation': 'V1DeploymentAlertingPolicyOperation',
        'severity': 'V1DeploymentAlertingPolicySeverity',
        'type': 'V1DeploymentAlertingPolicyType',
        'value': 'float',
        'viewed': 'bool'
    }

    attribute_map = {
        'alerting_policy_id': 'alertingPolicyId',
        'created_at': 'createdAt',
        'description': 'description',
        'frequency': 'frequency',
        'limit': 'limit',
        'message': 'message',
        'name': 'name',
        'operation': 'operation',
        'severity': 'severity',
        'type': 'type',
        'value': 'value',
        'viewed': 'viewed'
    }

    def __init__(self, alerting_policy_id: 'str' =None, created_at: 'datetime' =None, description: 'str' =None, frequency: 'V1DeploymentAlertingPolicyFrequency' =None, limit: 'float' =None, message: 'str' =None, name: 'str' =None, operation: 'V1DeploymentAlertingPolicyOperation' =None, severity: 'V1DeploymentAlertingPolicySeverity' =None, type: 'V1DeploymentAlertingPolicyType' =None, value: 'float' =None, viewed: 'bool' =None):  # noqa: E501
        """AlertingeventsIdBody - a model defined in Swagger"""  # noqa: E501
        self._alerting_policy_id = None
        self._created_at = None
        self._description = None
        self._frequency = None
        self._limit = None
        self._message = None
        self._name = None
        self._operation = None
        self._severity = None
        self._type = None
        self._value = None
        self._viewed = None
        self.discriminator = None
        if alerting_policy_id is not None:
            self.alerting_policy_id = alerting_policy_id
        if created_at is not None:
            self.created_at = created_at
        if description is not None:
            self.description = description
        if frequency is not None:
            self.frequency = frequency
        if limit is not None:
            self.limit = limit
        if message is not None:
            self.message = message
        if name is not None:
            self.name = name
        if operation is not None:
            self.operation = operation
        if severity is not None:
            self.severity = severity
        if type is not None:
            self.type = type
        if value is not None:
            self.value = value
        if viewed is not None:
            self.viewed = viewed

    @property
    def alerting_policy_id(self) -> 'str':
        """Gets the alerting_policy_id of this AlertingeventsIdBody.  # noqa: E501


        :return: The alerting_policy_id of this AlertingeventsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._alerting_policy_id

    @alerting_policy_id.setter
    def alerting_policy_id(self, alerting_policy_id: 'str'):
        """Sets the alerting_policy_id of this AlertingeventsIdBody.


        :param alerting_policy_id: The alerting_policy_id of this AlertingeventsIdBody.  # noqa: E501
        :type: str
        """

        self._alerting_policy_id = alerting_policy_id

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this AlertingeventsIdBody.  # noqa: E501


        :return: The created_at of this AlertingeventsIdBody.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this AlertingeventsIdBody.


        :param created_at: The created_at of this AlertingeventsIdBody.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def description(self) -> 'str':
        """Gets the description of this AlertingeventsIdBody.  # noqa: E501


        :return: The description of this AlertingeventsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: 'str'):
        """Sets the description of this AlertingeventsIdBody.


        :param description: The description of this AlertingeventsIdBody.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def frequency(self) -> 'V1DeploymentAlertingPolicyFrequency':
        """Gets the frequency of this AlertingeventsIdBody.  # noqa: E501


        :return: The frequency of this AlertingeventsIdBody.  # noqa: E501
        :rtype: V1DeploymentAlertingPolicyFrequency
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency: 'V1DeploymentAlertingPolicyFrequency'):
        """Sets the frequency of this AlertingeventsIdBody.


        :param frequency: The frequency of this AlertingeventsIdBody.  # noqa: E501
        :type: V1DeploymentAlertingPolicyFrequency
        """

        self._frequency = frequency

    @property
    def limit(self) -> 'float':
        """Gets the limit of this AlertingeventsIdBody.  # noqa: E501


        :return: The limit of this AlertingeventsIdBody.  # noqa: E501
        :rtype: float
        """
        return self._limit

    @limit.setter
    def limit(self, limit: 'float'):
        """Sets the limit of this AlertingeventsIdBody.


        :param limit: The limit of this AlertingeventsIdBody.  # noqa: E501
        :type: float
        """

        self._limit = limit

    @property
    def message(self) -> 'str':
        """Gets the message of this AlertingeventsIdBody.  # noqa: E501


        :return: The message of this AlertingeventsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: 'str'):
        """Sets the message of this AlertingeventsIdBody.


        :param message: The message of this AlertingeventsIdBody.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def name(self) -> 'str':
        """Gets the name of this AlertingeventsIdBody.  # noqa: E501


        :return: The name of this AlertingeventsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this AlertingeventsIdBody.


        :param name: The name of this AlertingeventsIdBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def operation(self) -> 'V1DeploymentAlertingPolicyOperation':
        """Gets the operation of this AlertingeventsIdBody.  # noqa: E501


        :return: The operation of this AlertingeventsIdBody.  # noqa: E501
        :rtype: V1DeploymentAlertingPolicyOperation
        """
        return self._operation

    @operation.setter
    def operation(self, operation: 'V1DeploymentAlertingPolicyOperation'):
        """Sets the operation of this AlertingeventsIdBody.


        :param operation: The operation of this AlertingeventsIdBody.  # noqa: E501
        :type: V1DeploymentAlertingPolicyOperation
        """

        self._operation = operation

    @property
    def severity(self) -> 'V1DeploymentAlertingPolicySeverity':
        """Gets the severity of this AlertingeventsIdBody.  # noqa: E501


        :return: The severity of this AlertingeventsIdBody.  # noqa: E501
        :rtype: V1DeploymentAlertingPolicySeverity
        """
        return self._severity

    @severity.setter
    def severity(self, severity: 'V1DeploymentAlertingPolicySeverity'):
        """Sets the severity of this AlertingeventsIdBody.


        :param severity: The severity of this AlertingeventsIdBody.  # noqa: E501
        :type: V1DeploymentAlertingPolicySeverity
        """

        self._severity = severity

    @property
    def type(self) -> 'V1DeploymentAlertingPolicyType':
        """Gets the type of this AlertingeventsIdBody.  # noqa: E501


        :return: The type of this AlertingeventsIdBody.  # noqa: E501
        :rtype: V1DeploymentAlertingPolicyType
        """
        return self._type

    @type.setter
    def type(self, type: 'V1DeploymentAlertingPolicyType'):
        """Sets the type of this AlertingeventsIdBody.


        :param type: The type of this AlertingeventsIdBody.  # noqa: E501
        :type: V1DeploymentAlertingPolicyType
        """

        self._type = type

    @property
    def value(self) -> 'float':
        """Gets the value of this AlertingeventsIdBody.  # noqa: E501


        :return: The value of this AlertingeventsIdBody.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value: 'float'):
        """Sets the value of this AlertingeventsIdBody.


        :param value: The value of this AlertingeventsIdBody.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def viewed(self) -> 'bool':
        """Gets the viewed of this AlertingeventsIdBody.  # noqa: E501


        :return: The viewed of this AlertingeventsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._viewed

    @viewed.setter
    def viewed(self, viewed: 'bool'):
        """Sets the viewed of this AlertingeventsIdBody.


        :param viewed: The viewed of this AlertingeventsIdBody.  # noqa: E501
        :type: bool
        """

        self._viewed = viewed

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertingeventsIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'AlertingeventsIdBody') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertingeventsIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'AlertingeventsIdBody') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
