# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1FilesystemMMT(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'artifacts_type': 'V1JobArtifactsType',
        'cloud_space_id': 'str',
        'id': 'str',
        'jobs': 'list[V1FilesystemJob]',
        'name': 'str'
    }

    attribute_map = {
        'artifacts_type': 'artifactsType',
        'cloud_space_id': 'cloudSpaceId',
        'id': 'id',
        'jobs': 'jobs',
        'name': 'name'
    }

    def __init__(self, artifacts_type: 'V1JobArtifactsType' =None, cloud_space_id: 'str' =None, id: 'str' =None, jobs: 'list[V1FilesystemJob]' =None, name: 'str' =None):  # noqa: E501
        """V1FilesystemMMT - a model defined in Swagger"""  # noqa: E501
        self._artifacts_type = None
        self._cloud_space_id = None
        self._id = None
        self._jobs = None
        self._name = None
        self.discriminator = None
        if artifacts_type is not None:
            self.artifacts_type = artifacts_type
        if cloud_space_id is not None:
            self.cloud_space_id = cloud_space_id
        if id is not None:
            self.id = id
        if jobs is not None:
            self.jobs = jobs
        if name is not None:
            self.name = name

    @property
    def artifacts_type(self) -> 'V1JobArtifactsType':
        """Gets the artifacts_type of this V1FilesystemMMT.  # noqa: E501


        :return: The artifacts_type of this V1FilesystemMMT.  # noqa: E501
        :rtype: V1JobArtifactsType
        """
        return self._artifacts_type

    @artifacts_type.setter
    def artifacts_type(self, artifacts_type: 'V1JobArtifactsType'):
        """Sets the artifacts_type of this V1FilesystemMMT.


        :param artifacts_type: The artifacts_type of this V1FilesystemMMT.  # noqa: E501
        :type: V1JobArtifactsType
        """

        self._artifacts_type = artifacts_type

    @property
    def cloud_space_id(self) -> 'str':
        """Gets the cloud_space_id of this V1FilesystemMMT.  # noqa: E501


        :return: The cloud_space_id of this V1FilesystemMMT.  # noqa: E501
        :rtype: str
        """
        return self._cloud_space_id

    @cloud_space_id.setter
    def cloud_space_id(self, cloud_space_id: 'str'):
        """Sets the cloud_space_id of this V1FilesystemMMT.


        :param cloud_space_id: The cloud_space_id of this V1FilesystemMMT.  # noqa: E501
        :type: str
        """

        self._cloud_space_id = cloud_space_id

    @property
    def id(self) -> 'str':
        """Gets the id of this V1FilesystemMMT.  # noqa: E501


        :return: The id of this V1FilesystemMMT.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1FilesystemMMT.


        :param id: The id of this V1FilesystemMMT.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def jobs(self) -> 'list[V1FilesystemJob]':
        """Gets the jobs of this V1FilesystemMMT.  # noqa: E501


        :return: The jobs of this V1FilesystemMMT.  # noqa: E501
        :rtype: list[V1FilesystemJob]
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs: 'list[V1FilesystemJob]'):
        """Sets the jobs of this V1FilesystemMMT.


        :param jobs: The jobs of this V1FilesystemMMT.  # noqa: E501
        :type: list[V1FilesystemJob]
        """

        self._jobs = jobs

    @property
    def name(self) -> 'str':
        """Gets the name of this V1FilesystemMMT.  # noqa: E501


        :return: The name of this V1FilesystemMMT.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1FilesystemMMT.


        :param name: The name of this V1FilesystemMMT.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1FilesystemMMT, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1FilesystemMMT') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1FilesystemMMT):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1FilesystemMMT') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
