# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1StorageAsset(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'created_by': 'str',
        'id': 'str',
        'name': 'str',
        'read_cost_daily': 'float',
        'storage_bytes': 'str',
        'storage_cost_daily': 'float',
        'sub_type': 'str',
        'total_daily_read_bytes': 'str',
        'total_daily_write_bytes': 'str',
        'type': 'V1StorageAssetType',
        'write_cost_daily': 'float'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'created_by': 'createdBy',
        'id': 'id',
        'name': 'name',
        'read_cost_daily': 'readCostDaily',
        'storage_bytes': 'storageBytes',
        'storage_cost_daily': 'storageCostDaily',
        'sub_type': 'subType',
        'total_daily_read_bytes': 'totalDailyReadBytes',
        'total_daily_write_bytes': 'totalDailyWriteBytes',
        'type': 'type',
        'write_cost_daily': 'writeCostDaily'
    }

    def __init__(self, created_at: 'datetime' =None, created_by: 'str' =None, id: 'str' =None, name: 'str' =None, read_cost_daily: 'float' =None, storage_bytes: 'str' =None, storage_cost_daily: 'float' =None, sub_type: 'str' =None, total_daily_read_bytes: 'str' =None, total_daily_write_bytes: 'str' =None, type: 'V1StorageAssetType' =None, write_cost_daily: 'float' =None):  # noqa: E501
        """V1StorageAsset - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._created_by = None
        self._id = None
        self._name = None
        self._read_cost_daily = None
        self._storage_bytes = None
        self._storage_cost_daily = None
        self._sub_type = None
        self._total_daily_read_bytes = None
        self._total_daily_write_bytes = None
        self._type = None
        self._write_cost_daily = None
        self.discriminator = None
        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if read_cost_daily is not None:
            self.read_cost_daily = read_cost_daily
        if storage_bytes is not None:
            self.storage_bytes = storage_bytes
        if storage_cost_daily is not None:
            self.storage_cost_daily = storage_cost_daily
        if sub_type is not None:
            self.sub_type = sub_type
        if total_daily_read_bytes is not None:
            self.total_daily_read_bytes = total_daily_read_bytes
        if total_daily_write_bytes is not None:
            self.total_daily_write_bytes = total_daily_write_bytes
        if type is not None:
            self.type = type
        if write_cost_daily is not None:
            self.write_cost_daily = write_cost_daily

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this V1StorageAsset.  # noqa: E501


        :return: The created_at of this V1StorageAsset.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this V1StorageAsset.


        :param created_at: The created_at of this V1StorageAsset.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self) -> 'str':
        """Gets the created_by of this V1StorageAsset.  # noqa: E501


        :return: The created_by of this V1StorageAsset.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by: 'str'):
        """Sets the created_by of this V1StorageAsset.


        :param created_by: The created_by of this V1StorageAsset.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def id(self) -> 'str':
        """Gets the id of this V1StorageAsset.  # noqa: E501


        :return: The id of this V1StorageAsset.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1StorageAsset.


        :param id: The id of this V1StorageAsset.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self) -> 'str':
        """Gets the name of this V1StorageAsset.  # noqa: E501


        :return: The name of this V1StorageAsset.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1StorageAsset.


        :param name: The name of this V1StorageAsset.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def read_cost_daily(self) -> 'float':
        """Gets the read_cost_daily of this V1StorageAsset.  # noqa: E501


        :return: The read_cost_daily of this V1StorageAsset.  # noqa: E501
        :rtype: float
        """
        return self._read_cost_daily

    @read_cost_daily.setter
    def read_cost_daily(self, read_cost_daily: 'float'):
        """Sets the read_cost_daily of this V1StorageAsset.


        :param read_cost_daily: The read_cost_daily of this V1StorageAsset.  # noqa: E501
        :type: float
        """

        self._read_cost_daily = read_cost_daily

    @property
    def storage_bytes(self) -> 'str':
        """Gets the storage_bytes of this V1StorageAsset.  # noqa: E501


        :return: The storage_bytes of this V1StorageAsset.  # noqa: E501
        :rtype: str
        """
        return self._storage_bytes

    @storage_bytes.setter
    def storage_bytes(self, storage_bytes: 'str'):
        """Sets the storage_bytes of this V1StorageAsset.


        :param storage_bytes: The storage_bytes of this V1StorageAsset.  # noqa: E501
        :type: str
        """

        self._storage_bytes = storage_bytes

    @property
    def storage_cost_daily(self) -> 'float':
        """Gets the storage_cost_daily of this V1StorageAsset.  # noqa: E501


        :return: The storage_cost_daily of this V1StorageAsset.  # noqa: E501
        :rtype: float
        """
        return self._storage_cost_daily

    @storage_cost_daily.setter
    def storage_cost_daily(self, storage_cost_daily: 'float'):
        """Sets the storage_cost_daily of this V1StorageAsset.


        :param storage_cost_daily: The storage_cost_daily of this V1StorageAsset.  # noqa: E501
        :type: float
        """

        self._storage_cost_daily = storage_cost_daily

    @property
    def sub_type(self) -> 'str':
        """Gets the sub_type of this V1StorageAsset.  # noqa: E501


        :return: The sub_type of this V1StorageAsset.  # noqa: E501
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type: 'str'):
        """Sets the sub_type of this V1StorageAsset.


        :param sub_type: The sub_type of this V1StorageAsset.  # noqa: E501
        :type: str
        """

        self._sub_type = sub_type

    @property
    def total_daily_read_bytes(self) -> 'str':
        """Gets the total_daily_read_bytes of this V1StorageAsset.  # noqa: E501


        :return: The total_daily_read_bytes of this V1StorageAsset.  # noqa: E501
        :rtype: str
        """
        return self._total_daily_read_bytes

    @total_daily_read_bytes.setter
    def total_daily_read_bytes(self, total_daily_read_bytes: 'str'):
        """Sets the total_daily_read_bytes of this V1StorageAsset.


        :param total_daily_read_bytes: The total_daily_read_bytes of this V1StorageAsset.  # noqa: E501
        :type: str
        """

        self._total_daily_read_bytes = total_daily_read_bytes

    @property
    def total_daily_write_bytes(self) -> 'str':
        """Gets the total_daily_write_bytes of this V1StorageAsset.  # noqa: E501


        :return: The total_daily_write_bytes of this V1StorageAsset.  # noqa: E501
        :rtype: str
        """
        return self._total_daily_write_bytes

    @total_daily_write_bytes.setter
    def total_daily_write_bytes(self, total_daily_write_bytes: 'str'):
        """Sets the total_daily_write_bytes of this V1StorageAsset.


        :param total_daily_write_bytes: The total_daily_write_bytes of this V1StorageAsset.  # noqa: E501
        :type: str
        """

        self._total_daily_write_bytes = total_daily_write_bytes

    @property
    def type(self) -> 'V1StorageAssetType':
        """Gets the type of this V1StorageAsset.  # noqa: E501


        :return: The type of this V1StorageAsset.  # noqa: E501
        :rtype: V1StorageAssetType
        """
        return self._type

    @type.setter
    def type(self, type: 'V1StorageAssetType'):
        """Sets the type of this V1StorageAsset.


        :param type: The type of this V1StorageAsset.  # noqa: E501
        :type: V1StorageAssetType
        """

        self._type = type

    @property
    def write_cost_daily(self) -> 'float':
        """Gets the write_cost_daily of this V1StorageAsset.  # noqa: E501


        :return: The write_cost_daily of this V1StorageAsset.  # noqa: E501
        :rtype: float
        """
        return self._write_cost_daily

    @write_cost_daily.setter
    def write_cost_daily(self, write_cost_daily: 'float'):
        """Sets the write_cost_daily of this V1StorageAsset.


        :param write_cost_daily: The write_cost_daily of this V1StorageAsset.  # noqa: E501
        :type: float
        """

        self._write_cost_daily = write_cost_daily

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1StorageAsset, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1StorageAsset') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1StorageAsset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1StorageAsset') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
