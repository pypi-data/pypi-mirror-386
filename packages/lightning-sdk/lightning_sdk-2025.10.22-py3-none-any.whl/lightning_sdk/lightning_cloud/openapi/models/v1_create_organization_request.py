# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1CreateOrganizationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_credits_auto_replenish': 'bool',
        'allow_marketplace': 'bool',
        'auto_invite_by_domain': 'bool',
        'auto_join_domains': 'list[str]',
        'auto_replenish_amount': 'float',
        'auto_replenish_threshold': 'float',
        'description': 'str',
        'display_name': 'str',
        'domain': 'str',
        'email': 'str',
        'featured_gallery': 'bool',
        'location': 'str',
        'preferred_cluster': 'str',
        'start_studios_on_spot_instance': 'bool',
        'twitter_username': 'str',
        'type': 'str'
    }

    attribute_map = {
        'allow_credits_auto_replenish': 'allowCreditsAutoReplenish',
        'allow_marketplace': 'allowMarketplace',
        'auto_invite_by_domain': 'autoInviteByDomain',
        'auto_join_domains': 'autoJoinDomains',
        'auto_replenish_amount': 'autoReplenishAmount',
        'auto_replenish_threshold': 'autoReplenishThreshold',
        'description': 'description',
        'display_name': 'displayName',
        'domain': 'domain',
        'email': 'email',
        'featured_gallery': 'featuredGallery',
        'location': 'location',
        'preferred_cluster': 'preferredCluster',
        'start_studios_on_spot_instance': 'startStudiosOnSpotInstance',
        'twitter_username': 'twitterUsername',
        'type': 'type'
    }

    def __init__(self, allow_credits_auto_replenish: 'bool' =None, allow_marketplace: 'bool' =None, auto_invite_by_domain: 'bool' =None, auto_join_domains: 'list[str]' =None, auto_replenish_amount: 'float' =None, auto_replenish_threshold: 'float' =None, description: 'str' =None, display_name: 'str' =None, domain: 'str' =None, email: 'str' =None, featured_gallery: 'bool' =None, location: 'str' =None, preferred_cluster: 'str' =None, start_studios_on_spot_instance: 'bool' =None, twitter_username: 'str' =None, type: 'str' =None):  # noqa: E501
        """V1CreateOrganizationRequest - a model defined in Swagger"""  # noqa: E501
        self._allow_credits_auto_replenish = None
        self._allow_marketplace = None
        self._auto_invite_by_domain = None
        self._auto_join_domains = None
        self._auto_replenish_amount = None
        self._auto_replenish_threshold = None
        self._description = None
        self._display_name = None
        self._domain = None
        self._email = None
        self._featured_gallery = None
        self._location = None
        self._preferred_cluster = None
        self._start_studios_on_spot_instance = None
        self._twitter_username = None
        self._type = None
        self.discriminator = None
        if allow_credits_auto_replenish is not None:
            self.allow_credits_auto_replenish = allow_credits_auto_replenish
        if allow_marketplace is not None:
            self.allow_marketplace = allow_marketplace
        if auto_invite_by_domain is not None:
            self.auto_invite_by_domain = auto_invite_by_domain
        if auto_join_domains is not None:
            self.auto_join_domains = auto_join_domains
        if auto_replenish_amount is not None:
            self.auto_replenish_amount = auto_replenish_amount
        if auto_replenish_threshold is not None:
            self.auto_replenish_threshold = auto_replenish_threshold
        if description is not None:
            self.description = description
        if display_name is not None:
            self.display_name = display_name
        if domain is not None:
            self.domain = domain
        if email is not None:
            self.email = email
        if featured_gallery is not None:
            self.featured_gallery = featured_gallery
        if location is not None:
            self.location = location
        if preferred_cluster is not None:
            self.preferred_cluster = preferred_cluster
        if start_studios_on_spot_instance is not None:
            self.start_studios_on_spot_instance = start_studios_on_spot_instance
        if twitter_username is not None:
            self.twitter_username = twitter_username
        if type is not None:
            self.type = type

    @property
    def allow_credits_auto_replenish(self) -> 'bool':
        """Gets the allow_credits_auto_replenish of this V1CreateOrganizationRequest.  # noqa: E501


        :return: The allow_credits_auto_replenish of this V1CreateOrganizationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._allow_credits_auto_replenish

    @allow_credits_auto_replenish.setter
    def allow_credits_auto_replenish(self, allow_credits_auto_replenish: 'bool'):
        """Sets the allow_credits_auto_replenish of this V1CreateOrganizationRequest.


        :param allow_credits_auto_replenish: The allow_credits_auto_replenish of this V1CreateOrganizationRequest.  # noqa: E501
        :type: bool
        """

        self._allow_credits_auto_replenish = allow_credits_auto_replenish

    @property
    def allow_marketplace(self) -> 'bool':
        """Gets the allow_marketplace of this V1CreateOrganizationRequest.  # noqa: E501


        :return: The allow_marketplace of this V1CreateOrganizationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._allow_marketplace

    @allow_marketplace.setter
    def allow_marketplace(self, allow_marketplace: 'bool'):
        """Sets the allow_marketplace of this V1CreateOrganizationRequest.


        :param allow_marketplace: The allow_marketplace of this V1CreateOrganizationRequest.  # noqa: E501
        :type: bool
        """

        self._allow_marketplace = allow_marketplace

    @property
    def auto_invite_by_domain(self) -> 'bool':
        """Gets the auto_invite_by_domain of this V1CreateOrganizationRequest.  # noqa: E501


        :return: The auto_invite_by_domain of this V1CreateOrganizationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._auto_invite_by_domain

    @auto_invite_by_domain.setter
    def auto_invite_by_domain(self, auto_invite_by_domain: 'bool'):
        """Sets the auto_invite_by_domain of this V1CreateOrganizationRequest.


        :param auto_invite_by_domain: The auto_invite_by_domain of this V1CreateOrganizationRequest.  # noqa: E501
        :type: bool
        """

        self._auto_invite_by_domain = auto_invite_by_domain

    @property
    def auto_join_domains(self) -> 'list[str]':
        """Gets the auto_join_domains of this V1CreateOrganizationRequest.  # noqa: E501


        :return: The auto_join_domains of this V1CreateOrganizationRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._auto_join_domains

    @auto_join_domains.setter
    def auto_join_domains(self, auto_join_domains: 'list[str]'):
        """Sets the auto_join_domains of this V1CreateOrganizationRequest.


        :param auto_join_domains: The auto_join_domains of this V1CreateOrganizationRequest.  # noqa: E501
        :type: list[str]
        """

        self._auto_join_domains = auto_join_domains

    @property
    def auto_replenish_amount(self) -> 'float':
        """Gets the auto_replenish_amount of this V1CreateOrganizationRequest.  # noqa: E501


        :return: The auto_replenish_amount of this V1CreateOrganizationRequest.  # noqa: E501
        :rtype: float
        """
        return self._auto_replenish_amount

    @auto_replenish_amount.setter
    def auto_replenish_amount(self, auto_replenish_amount: 'float'):
        """Sets the auto_replenish_amount of this V1CreateOrganizationRequest.


        :param auto_replenish_amount: The auto_replenish_amount of this V1CreateOrganizationRequest.  # noqa: E501
        :type: float
        """

        self._auto_replenish_amount = auto_replenish_amount

    @property
    def auto_replenish_threshold(self) -> 'float':
        """Gets the auto_replenish_threshold of this V1CreateOrganizationRequest.  # noqa: E501


        :return: The auto_replenish_threshold of this V1CreateOrganizationRequest.  # noqa: E501
        :rtype: float
        """
        return self._auto_replenish_threshold

    @auto_replenish_threshold.setter
    def auto_replenish_threshold(self, auto_replenish_threshold: 'float'):
        """Sets the auto_replenish_threshold of this V1CreateOrganizationRequest.


        :param auto_replenish_threshold: The auto_replenish_threshold of this V1CreateOrganizationRequest.  # noqa: E501
        :type: float
        """

        self._auto_replenish_threshold = auto_replenish_threshold

    @property
    def description(self) -> 'str':
        """Gets the description of this V1CreateOrganizationRequest.  # noqa: E501


        :return: The description of this V1CreateOrganizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: 'str'):
        """Sets the description of this V1CreateOrganizationRequest.


        :param description: The description of this V1CreateOrganizationRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def display_name(self) -> 'str':
        """Gets the display_name of this V1CreateOrganizationRequest.  # noqa: E501


        :return: The display_name of this V1CreateOrganizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: 'str'):
        """Sets the display_name of this V1CreateOrganizationRequest.


        :param display_name: The display_name of this V1CreateOrganizationRequest.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def domain(self) -> 'str':
        """Gets the domain of this V1CreateOrganizationRequest.  # noqa: E501


        :return: The domain of this V1CreateOrganizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain: 'str'):
        """Sets the domain of this V1CreateOrganizationRequest.


        :param domain: The domain of this V1CreateOrganizationRequest.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def email(self) -> 'str':
        """Gets the email of this V1CreateOrganizationRequest.  # noqa: E501


        :return: The email of this V1CreateOrganizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: 'str'):
        """Sets the email of this V1CreateOrganizationRequest.


        :param email: The email of this V1CreateOrganizationRequest.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def featured_gallery(self) -> 'bool':
        """Gets the featured_gallery of this V1CreateOrganizationRequest.  # noqa: E501


        :return: The featured_gallery of this V1CreateOrganizationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._featured_gallery

    @featured_gallery.setter
    def featured_gallery(self, featured_gallery: 'bool'):
        """Sets the featured_gallery of this V1CreateOrganizationRequest.


        :param featured_gallery: The featured_gallery of this V1CreateOrganizationRequest.  # noqa: E501
        :type: bool
        """

        self._featured_gallery = featured_gallery

    @property
    def location(self) -> 'str':
        """Gets the location of this V1CreateOrganizationRequest.  # noqa: E501


        :return: The location of this V1CreateOrganizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location: 'str'):
        """Sets the location of this V1CreateOrganizationRequest.


        :param location: The location of this V1CreateOrganizationRequest.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def preferred_cluster(self) -> 'str':
        """Gets the preferred_cluster of this V1CreateOrganizationRequest.  # noqa: E501


        :return: The preferred_cluster of this V1CreateOrganizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._preferred_cluster

    @preferred_cluster.setter
    def preferred_cluster(self, preferred_cluster: 'str'):
        """Sets the preferred_cluster of this V1CreateOrganizationRequest.


        :param preferred_cluster: The preferred_cluster of this V1CreateOrganizationRequest.  # noqa: E501
        :type: str
        """

        self._preferred_cluster = preferred_cluster

    @property
    def start_studios_on_spot_instance(self) -> 'bool':
        """Gets the start_studios_on_spot_instance of this V1CreateOrganizationRequest.  # noqa: E501


        :return: The start_studios_on_spot_instance of this V1CreateOrganizationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._start_studios_on_spot_instance

    @start_studios_on_spot_instance.setter
    def start_studios_on_spot_instance(self, start_studios_on_spot_instance: 'bool'):
        """Sets the start_studios_on_spot_instance of this V1CreateOrganizationRequest.


        :param start_studios_on_spot_instance: The start_studios_on_spot_instance of this V1CreateOrganizationRequest.  # noqa: E501
        :type: bool
        """

        self._start_studios_on_spot_instance = start_studios_on_spot_instance

    @property
    def twitter_username(self) -> 'str':
        """Gets the twitter_username of this V1CreateOrganizationRequest.  # noqa: E501


        :return: The twitter_username of this V1CreateOrganizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._twitter_username

    @twitter_username.setter
    def twitter_username(self, twitter_username: 'str'):
        """Sets the twitter_username of this V1CreateOrganizationRequest.


        :param twitter_username: The twitter_username of this V1CreateOrganizationRequest.  # noqa: E501
        :type: str
        """

        self._twitter_username = twitter_username

    @property
    def type(self) -> 'str':
        """Gets the type of this V1CreateOrganizationRequest.  # noqa: E501


        :return: The type of this V1CreateOrganizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: 'str'):
        """Sets the type of this V1CreateOrganizationRequest.


        :param type: The type of this V1CreateOrganizationRequest.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1CreateOrganizationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1CreateOrganizationRequest') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1CreateOrganizationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1CreateOrganizationRequest') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
