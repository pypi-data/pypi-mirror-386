# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_standard': 'str',
        'apis': 'list[V1DeploymentAPI]',
        'autoscaling': 'V1AutoscalingSpec',
        'cloudspace_id': 'str',
        'cluster_id': 'str',
        'endpoint': 'V1Endpoint',
        'from_litserve': 'bool',
        'from_onboarding': 'bool',
        'name': 'str',
        'parameter_spec': 'V1ParameterizationSpec',
        'parent_template_id': 'str',
        'pipeline_reuse_deployment_between_runs': 'bool',
        'recipients': 'V1DeploymentAlertingRecipients',
        'replicas': 'int',
        'spec': 'V1JobSpec',
        'strategy': 'V1DeploymentStrategy'
    }

    attribute_map = {
        'api_standard': 'apiStandard',
        'apis': 'apis',
        'autoscaling': 'autoscaling',
        'cloudspace_id': 'cloudspaceId',
        'cluster_id': 'clusterId',
        'endpoint': 'endpoint',
        'from_litserve': 'fromLitserve',
        'from_onboarding': 'fromOnboarding',
        'name': 'name',
        'parameter_spec': 'parameterSpec',
        'parent_template_id': 'parentTemplateId',
        'pipeline_reuse_deployment_between_runs': 'pipelineReuseDeploymentBetweenRuns',
        'recipients': 'recipients',
        'replicas': 'replicas',
        'spec': 'spec',
        'strategy': 'strategy'
    }

    def __init__(self, api_standard: 'str' =None, apis: 'list[V1DeploymentAPI]' =None, autoscaling: 'V1AutoscalingSpec' =None, cloudspace_id: 'str' =None, cluster_id: 'str' =None, endpoint: 'V1Endpoint' =None, from_litserve: 'bool' =None, from_onboarding: 'bool' =None, name: 'str' =None, parameter_spec: 'V1ParameterizationSpec' =None, parent_template_id: 'str' =None, pipeline_reuse_deployment_between_runs: 'bool' =None, recipients: 'V1DeploymentAlertingRecipients' =None, replicas: 'int' =None, spec: 'V1JobSpec' =None, strategy: 'V1DeploymentStrategy' =None):  # noqa: E501
        """CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs - a model defined in Swagger"""  # noqa: E501
        self._api_standard = None
        self._apis = None
        self._autoscaling = None
        self._cloudspace_id = None
        self._cluster_id = None
        self._endpoint = None
        self._from_litserve = None
        self._from_onboarding = None
        self._name = None
        self._parameter_spec = None
        self._parent_template_id = None
        self._pipeline_reuse_deployment_between_runs = None
        self._recipients = None
        self._replicas = None
        self._spec = None
        self._strategy = None
        self.discriminator = None
        if api_standard is not None:
            self.api_standard = api_standard
        if apis is not None:
            self.apis = apis
        if autoscaling is not None:
            self.autoscaling = autoscaling
        if cloudspace_id is not None:
            self.cloudspace_id = cloudspace_id
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if endpoint is not None:
            self.endpoint = endpoint
        if from_litserve is not None:
            self.from_litserve = from_litserve
        if from_onboarding is not None:
            self.from_onboarding = from_onboarding
        if name is not None:
            self.name = name
        if parameter_spec is not None:
            self.parameter_spec = parameter_spec
        if parent_template_id is not None:
            self.parent_template_id = parent_template_id
        if pipeline_reuse_deployment_between_runs is not None:
            self.pipeline_reuse_deployment_between_runs = pipeline_reuse_deployment_between_runs
        if recipients is not None:
            self.recipients = recipients
        if replicas is not None:
            self.replicas = replicas
        if spec is not None:
            self.spec = spec
        if strategy is not None:
            self.strategy = strategy

    @property
    def api_standard(self) -> 'str':
        """Gets the api_standard of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501


        :return: The api_standard of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501
        :rtype: str
        """
        return self._api_standard

    @api_standard.setter
    def api_standard(self, api_standard: 'str'):
        """Sets the api_standard of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.


        :param api_standard: The api_standard of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501
        :type: str
        """

        self._api_standard = api_standard

    @property
    def apis(self) -> 'list[V1DeploymentAPI]':
        """Gets the apis of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501


        :return: The apis of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501
        :rtype: list[V1DeploymentAPI]
        """
        return self._apis

    @apis.setter
    def apis(self, apis: 'list[V1DeploymentAPI]'):
        """Sets the apis of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.


        :param apis: The apis of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501
        :type: list[V1DeploymentAPI]
        """

        self._apis = apis

    @property
    def autoscaling(self) -> 'V1AutoscalingSpec':
        """Gets the autoscaling of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501


        :return: The autoscaling of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501
        :rtype: V1AutoscalingSpec
        """
        return self._autoscaling

    @autoscaling.setter
    def autoscaling(self, autoscaling: 'V1AutoscalingSpec'):
        """Sets the autoscaling of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.


        :param autoscaling: The autoscaling of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501
        :type: V1AutoscalingSpec
        """

        self._autoscaling = autoscaling

    @property
    def cloudspace_id(self) -> 'str':
        """Gets the cloudspace_id of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501


        :return: The cloudspace_id of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501
        :rtype: str
        """
        return self._cloudspace_id

    @cloudspace_id.setter
    def cloudspace_id(self, cloudspace_id: 'str'):
        """Sets the cloudspace_id of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.


        :param cloudspace_id: The cloudspace_id of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501
        :type: str
        """

        self._cloudspace_id = cloudspace_id

    @property
    def cluster_id(self) -> 'str':
        """Gets the cluster_id of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501


        :return: The cluster_id of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id: 'str'):
        """Sets the cluster_id of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.


        :param cluster_id: The cluster_id of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def endpoint(self) -> 'V1Endpoint':
        """Gets the endpoint of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501


        :return: The endpoint of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501
        :rtype: V1Endpoint
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint: 'V1Endpoint'):
        """Sets the endpoint of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.


        :param endpoint: The endpoint of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501
        :type: V1Endpoint
        """

        self._endpoint = endpoint

    @property
    def from_litserve(self) -> 'bool':
        """Gets the from_litserve of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501


        :return: The from_litserve of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501
        :rtype: bool
        """
        return self._from_litserve

    @from_litserve.setter
    def from_litserve(self, from_litserve: 'bool'):
        """Sets the from_litserve of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.


        :param from_litserve: The from_litserve of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501
        :type: bool
        """

        self._from_litserve = from_litserve

    @property
    def from_onboarding(self) -> 'bool':
        """Gets the from_onboarding of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501


        :return: The from_onboarding of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501
        :rtype: bool
        """
        return self._from_onboarding

    @from_onboarding.setter
    def from_onboarding(self, from_onboarding: 'bool'):
        """Sets the from_onboarding of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.


        :param from_onboarding: The from_onboarding of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501
        :type: bool
        """

        self._from_onboarding = from_onboarding

    @property
    def name(self) -> 'str':
        """Gets the name of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501


        :return: The name of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.


        :param name: The name of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def parameter_spec(self) -> 'V1ParameterizationSpec':
        """Gets the parameter_spec of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501


        :return: The parameter_spec of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501
        :rtype: V1ParameterizationSpec
        """
        return self._parameter_spec

    @parameter_spec.setter
    def parameter_spec(self, parameter_spec: 'V1ParameterizationSpec'):
        """Sets the parameter_spec of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.


        :param parameter_spec: The parameter_spec of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501
        :type: V1ParameterizationSpec
        """

        self._parameter_spec = parameter_spec

    @property
    def parent_template_id(self) -> 'str':
        """Gets the parent_template_id of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501


        :return: The parent_template_id of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501
        :rtype: str
        """
        return self._parent_template_id

    @parent_template_id.setter
    def parent_template_id(self, parent_template_id: 'str'):
        """Sets the parent_template_id of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.


        :param parent_template_id: The parent_template_id of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501
        :type: str
        """

        self._parent_template_id = parent_template_id

    @property
    def pipeline_reuse_deployment_between_runs(self) -> 'bool':
        """Gets the pipeline_reuse_deployment_between_runs of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501


        :return: The pipeline_reuse_deployment_between_runs of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501
        :rtype: bool
        """
        return self._pipeline_reuse_deployment_between_runs

    @pipeline_reuse_deployment_between_runs.setter
    def pipeline_reuse_deployment_between_runs(self, pipeline_reuse_deployment_between_runs: 'bool'):
        """Sets the pipeline_reuse_deployment_between_runs of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.


        :param pipeline_reuse_deployment_between_runs: The pipeline_reuse_deployment_between_runs of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501
        :type: bool
        """

        self._pipeline_reuse_deployment_between_runs = pipeline_reuse_deployment_between_runs

    @property
    def recipients(self) -> 'V1DeploymentAlertingRecipients':
        """Gets the recipients of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501


        :return: The recipients of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501
        :rtype: V1DeploymentAlertingRecipients
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients: 'V1DeploymentAlertingRecipients'):
        """Sets the recipients of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.


        :param recipients: The recipients of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501
        :type: V1DeploymentAlertingRecipients
        """

        self._recipients = recipients

    @property
    def replicas(self) -> 'int':
        """Gets the replicas of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501


        :return: The replicas of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas: 'int'):
        """Sets the replicas of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.


        :param replicas: The replicas of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501
        :type: int
        """

        self._replicas = replicas

    @property
    def spec(self) -> 'V1JobSpec':
        """Gets the spec of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501


        :return: The spec of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501
        :rtype: V1JobSpec
        """
        return self._spec

    @spec.setter
    def spec(self, spec: 'V1JobSpec'):
        """Sets the spec of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.


        :param spec: The spec of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501
        :type: V1JobSpec
        """

        self._spec = spec

    @property
    def strategy(self) -> 'V1DeploymentStrategy':
        """Gets the strategy of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501


        :return: The strategy of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501
        :rtype: V1DeploymentStrategy
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy: 'V1DeploymentStrategy'):
        """Sets the strategy of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.


        :param strategy: The strategy of this CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs.  # noqa: E501
        :type: V1DeploymentStrategy
        """

        self._strategy = strategy

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
