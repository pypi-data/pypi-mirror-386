# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1DeploymentPerformance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cold_start': 'int',
        'cold_start_description': 'str',
        'latency': 'int',
        'latency_description': 'str',
        'requests_per_dollar': 'str',
        'requests_per_dollar_description': 'str',
        'throughput': 'str',
        'throughput_description': 'str'
    }

    attribute_map = {
        'cold_start': 'coldStart',
        'cold_start_description': 'coldStartDescription',
        'latency': 'latency',
        'latency_description': 'latencyDescription',
        'requests_per_dollar': 'requestsPerDollar',
        'requests_per_dollar_description': 'requestsPerDollarDescription',
        'throughput': 'throughput',
        'throughput_description': 'throughputDescription'
    }

    def __init__(self, cold_start: 'int' =None, cold_start_description: 'str' =None, latency: 'int' =None, latency_description: 'str' =None, requests_per_dollar: 'str' =None, requests_per_dollar_description: 'str' =None, throughput: 'str' =None, throughput_description: 'str' =None):  # noqa: E501
        """V1DeploymentPerformance - a model defined in Swagger"""  # noqa: E501
        self._cold_start = None
        self._cold_start_description = None
        self._latency = None
        self._latency_description = None
        self._requests_per_dollar = None
        self._requests_per_dollar_description = None
        self._throughput = None
        self._throughput_description = None
        self.discriminator = None
        if cold_start is not None:
            self.cold_start = cold_start
        if cold_start_description is not None:
            self.cold_start_description = cold_start_description
        if latency is not None:
            self.latency = latency
        if latency_description is not None:
            self.latency_description = latency_description
        if requests_per_dollar is not None:
            self.requests_per_dollar = requests_per_dollar
        if requests_per_dollar_description is not None:
            self.requests_per_dollar_description = requests_per_dollar_description
        if throughput is not None:
            self.throughput = throughput
        if throughput_description is not None:
            self.throughput_description = throughput_description

    @property
    def cold_start(self) -> 'int':
        """Gets the cold_start of this V1DeploymentPerformance.  # noqa: E501


        :return: The cold_start of this V1DeploymentPerformance.  # noqa: E501
        :rtype: int
        """
        return self._cold_start

    @cold_start.setter
    def cold_start(self, cold_start: 'int'):
        """Sets the cold_start of this V1DeploymentPerformance.


        :param cold_start: The cold_start of this V1DeploymentPerformance.  # noqa: E501
        :type: int
        """

        self._cold_start = cold_start

    @property
    def cold_start_description(self) -> 'str':
        """Gets the cold_start_description of this V1DeploymentPerformance.  # noqa: E501


        :return: The cold_start_description of this V1DeploymentPerformance.  # noqa: E501
        :rtype: str
        """
        return self._cold_start_description

    @cold_start_description.setter
    def cold_start_description(self, cold_start_description: 'str'):
        """Sets the cold_start_description of this V1DeploymentPerformance.


        :param cold_start_description: The cold_start_description of this V1DeploymentPerformance.  # noqa: E501
        :type: str
        """

        self._cold_start_description = cold_start_description

    @property
    def latency(self) -> 'int':
        """Gets the latency of this V1DeploymentPerformance.  # noqa: E501


        :return: The latency of this V1DeploymentPerformance.  # noqa: E501
        :rtype: int
        """
        return self._latency

    @latency.setter
    def latency(self, latency: 'int'):
        """Sets the latency of this V1DeploymentPerformance.


        :param latency: The latency of this V1DeploymentPerformance.  # noqa: E501
        :type: int
        """

        self._latency = latency

    @property
    def latency_description(self) -> 'str':
        """Gets the latency_description of this V1DeploymentPerformance.  # noqa: E501


        :return: The latency_description of this V1DeploymentPerformance.  # noqa: E501
        :rtype: str
        """
        return self._latency_description

    @latency_description.setter
    def latency_description(self, latency_description: 'str'):
        """Sets the latency_description of this V1DeploymentPerformance.


        :param latency_description: The latency_description of this V1DeploymentPerformance.  # noqa: E501
        :type: str
        """

        self._latency_description = latency_description

    @property
    def requests_per_dollar(self) -> 'str':
        """Gets the requests_per_dollar of this V1DeploymentPerformance.  # noqa: E501


        :return: The requests_per_dollar of this V1DeploymentPerformance.  # noqa: E501
        :rtype: str
        """
        return self._requests_per_dollar

    @requests_per_dollar.setter
    def requests_per_dollar(self, requests_per_dollar: 'str'):
        """Sets the requests_per_dollar of this V1DeploymentPerformance.


        :param requests_per_dollar: The requests_per_dollar of this V1DeploymentPerformance.  # noqa: E501
        :type: str
        """

        self._requests_per_dollar = requests_per_dollar

    @property
    def requests_per_dollar_description(self) -> 'str':
        """Gets the requests_per_dollar_description of this V1DeploymentPerformance.  # noqa: E501


        :return: The requests_per_dollar_description of this V1DeploymentPerformance.  # noqa: E501
        :rtype: str
        """
        return self._requests_per_dollar_description

    @requests_per_dollar_description.setter
    def requests_per_dollar_description(self, requests_per_dollar_description: 'str'):
        """Sets the requests_per_dollar_description of this V1DeploymentPerformance.


        :param requests_per_dollar_description: The requests_per_dollar_description of this V1DeploymentPerformance.  # noqa: E501
        :type: str
        """

        self._requests_per_dollar_description = requests_per_dollar_description

    @property
    def throughput(self) -> 'str':
        """Gets the throughput of this V1DeploymentPerformance.  # noqa: E501


        :return: The throughput of this V1DeploymentPerformance.  # noqa: E501
        :rtype: str
        """
        return self._throughput

    @throughput.setter
    def throughput(self, throughput: 'str'):
        """Sets the throughput of this V1DeploymentPerformance.


        :param throughput: The throughput of this V1DeploymentPerformance.  # noqa: E501
        :type: str
        """

        self._throughput = throughput

    @property
    def throughput_description(self) -> 'str':
        """Gets the throughput_description of this V1DeploymentPerformance.  # noqa: E501


        :return: The throughput_description of this V1DeploymentPerformance.  # noqa: E501
        :rtype: str
        """
        return self._throughput_description

    @throughput_description.setter
    def throughput_description(self, throughput_description: 'str'):
        """Sets the throughput_description of this V1DeploymentPerformance.


        :param throughput_description: The throughput_description of this V1DeploymentPerformance.  # noqa: E501
        :type: str
        """

        self._throughput_description = throughput_description

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1DeploymentPerformance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1DeploymentPerformance') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1DeploymentPerformance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1DeploymentPerformance') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
