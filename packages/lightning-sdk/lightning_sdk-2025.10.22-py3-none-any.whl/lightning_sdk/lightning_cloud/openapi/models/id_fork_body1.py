# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class IdForkBody1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'new_name': 'str',
        'target_cluster_id': 'str',
        'target_project_id': 'str',
        'version_id': 'str'
    }

    attribute_map = {
        'new_name': 'newName',
        'target_cluster_id': 'targetClusterId',
        'target_project_id': 'targetProjectId',
        'version_id': 'versionId'
    }

    def __init__(self, new_name: 'str' =None, target_cluster_id: 'str' =None, target_project_id: 'str' =None, version_id: 'str' =None):  # noqa: E501
        """IdForkBody1 - a model defined in Swagger"""  # noqa: E501
        self._new_name = None
        self._target_cluster_id = None
        self._target_project_id = None
        self._version_id = None
        self.discriminator = None
        if new_name is not None:
            self.new_name = new_name
        if target_cluster_id is not None:
            self.target_cluster_id = target_cluster_id
        if target_project_id is not None:
            self.target_project_id = target_project_id
        if version_id is not None:
            self.version_id = version_id

    @property
    def new_name(self) -> 'str':
        """Gets the new_name of this IdForkBody1.  # noqa: E501


        :return: The new_name of this IdForkBody1.  # noqa: E501
        :rtype: str
        """
        return self._new_name

    @new_name.setter
    def new_name(self, new_name: 'str'):
        """Sets the new_name of this IdForkBody1.


        :param new_name: The new_name of this IdForkBody1.  # noqa: E501
        :type: str
        """

        self._new_name = new_name

    @property
    def target_cluster_id(self) -> 'str':
        """Gets the target_cluster_id of this IdForkBody1.  # noqa: E501


        :return: The target_cluster_id of this IdForkBody1.  # noqa: E501
        :rtype: str
        """
        return self._target_cluster_id

    @target_cluster_id.setter
    def target_cluster_id(self, target_cluster_id: 'str'):
        """Sets the target_cluster_id of this IdForkBody1.


        :param target_cluster_id: The target_cluster_id of this IdForkBody1.  # noqa: E501
        :type: str
        """

        self._target_cluster_id = target_cluster_id

    @property
    def target_project_id(self) -> 'str':
        """Gets the target_project_id of this IdForkBody1.  # noqa: E501


        :return: The target_project_id of this IdForkBody1.  # noqa: E501
        :rtype: str
        """
        return self._target_project_id

    @target_project_id.setter
    def target_project_id(self, target_project_id: 'str'):
        """Sets the target_project_id of this IdForkBody1.


        :param target_project_id: The target_project_id of this IdForkBody1.  # noqa: E501
        :type: str
        """

        self._target_project_id = target_project_id

    @property
    def version_id(self) -> 'str':
        """Gets the version_id of this IdForkBody1.  # noqa: E501


        :return: The version_id of this IdForkBody1.  # noqa: E501
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id: 'str'):
        """Sets the version_id of this IdForkBody1.


        :param version_id: The version_id of this IdForkBody1.  # noqa: E501
        :type: str
        """

        self._version_id = version_id

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IdForkBody1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'IdForkBody1') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, IdForkBody1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'IdForkBody1') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
