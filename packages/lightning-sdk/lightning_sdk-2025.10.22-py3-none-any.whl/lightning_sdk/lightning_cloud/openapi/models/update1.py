# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class Update1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aws': 'V1AwsDataConnection',
        'efs': 'V1EfsConfig',
        'gcp': 'V1GcpDataConnection',
        'gcs_folder': 'V1GCSFolderDataConnection',
        'name': 'str',
        'r2': 'V1R2DataConnection',
        'run_cmds': 'list[str]',
        's3_folder': 'V1S3FolderDataConnection',
        'snowflake': 'V1SnowflakeDataConnection',
        'writable': 'bool'
    }

    attribute_map = {
        'aws': 'aws',
        'efs': 'efs',
        'gcp': 'gcp',
        'gcs_folder': 'gcsFolder',
        'name': 'name',
        'r2': 'r2',
        'run_cmds': 'runCmds',
        's3_folder': 's3Folder',
        'snowflake': 'snowflake',
        'writable': 'writable'
    }

    def __init__(self, aws: 'V1AwsDataConnection' =None, efs: 'V1EfsConfig' =None, gcp: 'V1GcpDataConnection' =None, gcs_folder: 'V1GCSFolderDataConnection' =None, name: 'str' =None, r2: 'V1R2DataConnection' =None, run_cmds: 'list[str]' =None, s3_folder: 'V1S3FolderDataConnection' =None, snowflake: 'V1SnowflakeDataConnection' =None, writable: 'bool' =None):  # noqa: E501
        """Update1 - a model defined in Swagger"""  # noqa: E501
        self._aws = None
        self._efs = None
        self._gcp = None
        self._gcs_folder = None
        self._name = None
        self._r2 = None
        self._run_cmds = None
        self._s3_folder = None
        self._snowflake = None
        self._writable = None
        self.discriminator = None
        if aws is not None:
            self.aws = aws
        if efs is not None:
            self.efs = efs
        if gcp is not None:
            self.gcp = gcp
        if gcs_folder is not None:
            self.gcs_folder = gcs_folder
        if name is not None:
            self.name = name
        if r2 is not None:
            self.r2 = r2
        if run_cmds is not None:
            self.run_cmds = run_cmds
        if s3_folder is not None:
            self.s3_folder = s3_folder
        if snowflake is not None:
            self.snowflake = snowflake
        if writable is not None:
            self.writable = writable

    @property
    def aws(self) -> 'V1AwsDataConnection':
        """Gets the aws of this Update1.  # noqa: E501


        :return: The aws of this Update1.  # noqa: E501
        :rtype: V1AwsDataConnection
        """
        return self._aws

    @aws.setter
    def aws(self, aws: 'V1AwsDataConnection'):
        """Sets the aws of this Update1.


        :param aws: The aws of this Update1.  # noqa: E501
        :type: V1AwsDataConnection
        """

        self._aws = aws

    @property
    def efs(self) -> 'V1EfsConfig':
        """Gets the efs of this Update1.  # noqa: E501


        :return: The efs of this Update1.  # noqa: E501
        :rtype: V1EfsConfig
        """
        return self._efs

    @efs.setter
    def efs(self, efs: 'V1EfsConfig'):
        """Sets the efs of this Update1.


        :param efs: The efs of this Update1.  # noqa: E501
        :type: V1EfsConfig
        """

        self._efs = efs

    @property
    def gcp(self) -> 'V1GcpDataConnection':
        """Gets the gcp of this Update1.  # noqa: E501


        :return: The gcp of this Update1.  # noqa: E501
        :rtype: V1GcpDataConnection
        """
        return self._gcp

    @gcp.setter
    def gcp(self, gcp: 'V1GcpDataConnection'):
        """Sets the gcp of this Update1.


        :param gcp: The gcp of this Update1.  # noqa: E501
        :type: V1GcpDataConnection
        """

        self._gcp = gcp

    @property
    def gcs_folder(self) -> 'V1GCSFolderDataConnection':
        """Gets the gcs_folder of this Update1.  # noqa: E501


        :return: The gcs_folder of this Update1.  # noqa: E501
        :rtype: V1GCSFolderDataConnection
        """
        return self._gcs_folder

    @gcs_folder.setter
    def gcs_folder(self, gcs_folder: 'V1GCSFolderDataConnection'):
        """Sets the gcs_folder of this Update1.


        :param gcs_folder: The gcs_folder of this Update1.  # noqa: E501
        :type: V1GCSFolderDataConnection
        """

        self._gcs_folder = gcs_folder

    @property
    def name(self) -> 'str':
        """Gets the name of this Update1.  # noqa: E501


        :return: The name of this Update1.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this Update1.


        :param name: The name of this Update1.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def r2(self) -> 'V1R2DataConnection':
        """Gets the r2 of this Update1.  # noqa: E501


        :return: The r2 of this Update1.  # noqa: E501
        :rtype: V1R2DataConnection
        """
        return self._r2

    @r2.setter
    def r2(self, r2: 'V1R2DataConnection'):
        """Sets the r2 of this Update1.


        :param r2: The r2 of this Update1.  # noqa: E501
        :type: V1R2DataConnection
        """

        self._r2 = r2

    @property
    def run_cmds(self) -> 'list[str]':
        """Gets the run_cmds of this Update1.  # noqa: E501


        :return: The run_cmds of this Update1.  # noqa: E501
        :rtype: list[str]
        """
        return self._run_cmds

    @run_cmds.setter
    def run_cmds(self, run_cmds: 'list[str]'):
        """Sets the run_cmds of this Update1.


        :param run_cmds: The run_cmds of this Update1.  # noqa: E501
        :type: list[str]
        """

        self._run_cmds = run_cmds

    @property
    def s3_folder(self) -> 'V1S3FolderDataConnection':
        """Gets the s3_folder of this Update1.  # noqa: E501


        :return: The s3_folder of this Update1.  # noqa: E501
        :rtype: V1S3FolderDataConnection
        """
        return self._s3_folder

    @s3_folder.setter
    def s3_folder(self, s3_folder: 'V1S3FolderDataConnection'):
        """Sets the s3_folder of this Update1.


        :param s3_folder: The s3_folder of this Update1.  # noqa: E501
        :type: V1S3FolderDataConnection
        """

        self._s3_folder = s3_folder

    @property
    def snowflake(self) -> 'V1SnowflakeDataConnection':
        """Gets the snowflake of this Update1.  # noqa: E501


        :return: The snowflake of this Update1.  # noqa: E501
        :rtype: V1SnowflakeDataConnection
        """
        return self._snowflake

    @snowflake.setter
    def snowflake(self, snowflake: 'V1SnowflakeDataConnection'):
        """Sets the snowflake of this Update1.


        :param snowflake: The snowflake of this Update1.  # noqa: E501
        :type: V1SnowflakeDataConnection
        """

        self._snowflake = snowflake

    @property
    def writable(self) -> 'bool':
        """Gets the writable of this Update1.  # noqa: E501


        :return: The writable of this Update1.  # noqa: E501
        :rtype: bool
        """
        return self._writable

    @writable.setter
    def writable(self, writable: 'bool'):
        """Sets the writable of this Update1.


        :param writable: The writable of this Update1.  # noqa: E501
        :type: bool
        """

        self._writable = writable

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Update1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'Update1') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, Update1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'Update1') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
