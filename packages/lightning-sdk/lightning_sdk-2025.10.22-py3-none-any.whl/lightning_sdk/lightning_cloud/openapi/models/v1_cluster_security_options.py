# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1ClusterSecurityOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bucket_kms_key': 'str',
        'cloud_init_boot_cmds': 'list[str]',
        'cloud_init_run_cmds': 'list[str]',
        'containers_non_privileged': 'bool',
        'disable_public_ip': 'bool',
        'disabled_services': 'list[str]',
        'encrypt_cluster_bucket': 'bool',
        'encrypt_instance_volumes': 'bool',
        'exposed_ports': 'list[str]',
        'extra_firewall_cidr_ranges': 'list[str]',
        'extra_firewall_rules': 'list[V1FirewallRule]',
        'extra_policy': 'str',
        'extra_sa_scopes': 'list[str]',
        'kms_key_id': 'str',
        'protect_instance_metadata': 'bool',
        'rootless_docker': 'bool',
        'setup_network_load_balancer': 'bool',
        'ssh_disabled': 'bool'
    }

    attribute_map = {
        'bucket_kms_key': 'bucketKmsKey',
        'cloud_init_boot_cmds': 'cloudInitBootCmds',
        'cloud_init_run_cmds': 'cloudInitRunCmds',
        'containers_non_privileged': 'containersNonPrivileged',
        'disable_public_ip': 'disablePublicIp',
        'disabled_services': 'disabledServices',
        'encrypt_cluster_bucket': 'encryptClusterBucket',
        'encrypt_instance_volumes': 'encryptInstanceVolumes',
        'exposed_ports': 'exposedPorts',
        'extra_firewall_cidr_ranges': 'extraFirewallCidrRanges',
        'extra_firewall_rules': 'extraFirewallRules',
        'extra_policy': 'extraPolicy',
        'extra_sa_scopes': 'extraSaScopes',
        'kms_key_id': 'kmsKeyId',
        'protect_instance_metadata': 'protectInstanceMetadata',
        'rootless_docker': 'rootlessDocker',
        'setup_network_load_balancer': 'setupNetworkLoadBalancer',
        'ssh_disabled': 'sshDisabled'
    }

    def __init__(self, bucket_kms_key: 'str' =None, cloud_init_boot_cmds: 'list[str]' =None, cloud_init_run_cmds: 'list[str]' =None, containers_non_privileged: 'bool' =None, disable_public_ip: 'bool' =None, disabled_services: 'list[str]' =None, encrypt_cluster_bucket: 'bool' =None, encrypt_instance_volumes: 'bool' =None, exposed_ports: 'list[str]' =None, extra_firewall_cidr_ranges: 'list[str]' =None, extra_firewall_rules: 'list[V1FirewallRule]' =None, extra_policy: 'str' =None, extra_sa_scopes: 'list[str]' =None, kms_key_id: 'str' =None, protect_instance_metadata: 'bool' =None, rootless_docker: 'bool' =None, setup_network_load_balancer: 'bool' =None, ssh_disabled: 'bool' =None):  # noqa: E501
        """V1ClusterSecurityOptions - a model defined in Swagger"""  # noqa: E501
        self._bucket_kms_key = None
        self._cloud_init_boot_cmds = None
        self._cloud_init_run_cmds = None
        self._containers_non_privileged = None
        self._disable_public_ip = None
        self._disabled_services = None
        self._encrypt_cluster_bucket = None
        self._encrypt_instance_volumes = None
        self._exposed_ports = None
        self._extra_firewall_cidr_ranges = None
        self._extra_firewall_rules = None
        self._extra_policy = None
        self._extra_sa_scopes = None
        self._kms_key_id = None
        self._protect_instance_metadata = None
        self._rootless_docker = None
        self._setup_network_load_balancer = None
        self._ssh_disabled = None
        self.discriminator = None
        if bucket_kms_key is not None:
            self.bucket_kms_key = bucket_kms_key
        if cloud_init_boot_cmds is not None:
            self.cloud_init_boot_cmds = cloud_init_boot_cmds
        if cloud_init_run_cmds is not None:
            self.cloud_init_run_cmds = cloud_init_run_cmds
        if containers_non_privileged is not None:
            self.containers_non_privileged = containers_non_privileged
        if disable_public_ip is not None:
            self.disable_public_ip = disable_public_ip
        if disabled_services is not None:
            self.disabled_services = disabled_services
        if encrypt_cluster_bucket is not None:
            self.encrypt_cluster_bucket = encrypt_cluster_bucket
        if encrypt_instance_volumes is not None:
            self.encrypt_instance_volumes = encrypt_instance_volumes
        if exposed_ports is not None:
            self.exposed_ports = exposed_ports
        if extra_firewall_cidr_ranges is not None:
            self.extra_firewall_cidr_ranges = extra_firewall_cidr_ranges
        if extra_firewall_rules is not None:
            self.extra_firewall_rules = extra_firewall_rules
        if extra_policy is not None:
            self.extra_policy = extra_policy
        if extra_sa_scopes is not None:
            self.extra_sa_scopes = extra_sa_scopes
        if kms_key_id is not None:
            self.kms_key_id = kms_key_id
        if protect_instance_metadata is not None:
            self.protect_instance_metadata = protect_instance_metadata
        if rootless_docker is not None:
            self.rootless_docker = rootless_docker
        if setup_network_load_balancer is not None:
            self.setup_network_load_balancer = setup_network_load_balancer
        if ssh_disabled is not None:
            self.ssh_disabled = ssh_disabled

    @property
    def bucket_kms_key(self) -> 'str':
        """Gets the bucket_kms_key of this V1ClusterSecurityOptions.  # noqa: E501


        :return: The bucket_kms_key of this V1ClusterSecurityOptions.  # noqa: E501
        :rtype: str
        """
        return self._bucket_kms_key

    @bucket_kms_key.setter
    def bucket_kms_key(self, bucket_kms_key: 'str'):
        """Sets the bucket_kms_key of this V1ClusterSecurityOptions.


        :param bucket_kms_key: The bucket_kms_key of this V1ClusterSecurityOptions.  # noqa: E501
        :type: str
        """

        self._bucket_kms_key = bucket_kms_key

    @property
    def cloud_init_boot_cmds(self) -> 'list[str]':
        """Gets the cloud_init_boot_cmds of this V1ClusterSecurityOptions.  # noqa: E501


        :return: The cloud_init_boot_cmds of this V1ClusterSecurityOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._cloud_init_boot_cmds

    @cloud_init_boot_cmds.setter
    def cloud_init_boot_cmds(self, cloud_init_boot_cmds: 'list[str]'):
        """Sets the cloud_init_boot_cmds of this V1ClusterSecurityOptions.


        :param cloud_init_boot_cmds: The cloud_init_boot_cmds of this V1ClusterSecurityOptions.  # noqa: E501
        :type: list[str]
        """

        self._cloud_init_boot_cmds = cloud_init_boot_cmds

    @property
    def cloud_init_run_cmds(self) -> 'list[str]':
        """Gets the cloud_init_run_cmds of this V1ClusterSecurityOptions.  # noqa: E501


        :return: The cloud_init_run_cmds of this V1ClusterSecurityOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._cloud_init_run_cmds

    @cloud_init_run_cmds.setter
    def cloud_init_run_cmds(self, cloud_init_run_cmds: 'list[str]'):
        """Sets the cloud_init_run_cmds of this V1ClusterSecurityOptions.


        :param cloud_init_run_cmds: The cloud_init_run_cmds of this V1ClusterSecurityOptions.  # noqa: E501
        :type: list[str]
        """

        self._cloud_init_run_cmds = cloud_init_run_cmds

    @property
    def containers_non_privileged(self) -> 'bool':
        """Gets the containers_non_privileged of this V1ClusterSecurityOptions.  # noqa: E501


        :return: The containers_non_privileged of this V1ClusterSecurityOptions.  # noqa: E501
        :rtype: bool
        """
        return self._containers_non_privileged

    @containers_non_privileged.setter
    def containers_non_privileged(self, containers_non_privileged: 'bool'):
        """Sets the containers_non_privileged of this V1ClusterSecurityOptions.


        :param containers_non_privileged: The containers_non_privileged of this V1ClusterSecurityOptions.  # noqa: E501
        :type: bool
        """

        self._containers_non_privileged = containers_non_privileged

    @property
    def disable_public_ip(self) -> 'bool':
        """Gets the disable_public_ip of this V1ClusterSecurityOptions.  # noqa: E501


        :return: The disable_public_ip of this V1ClusterSecurityOptions.  # noqa: E501
        :rtype: bool
        """
        return self._disable_public_ip

    @disable_public_ip.setter
    def disable_public_ip(self, disable_public_ip: 'bool'):
        """Sets the disable_public_ip of this V1ClusterSecurityOptions.


        :param disable_public_ip: The disable_public_ip of this V1ClusterSecurityOptions.  # noqa: E501
        :type: bool
        """

        self._disable_public_ip = disable_public_ip

    @property
    def disabled_services(self) -> 'list[str]':
        """Gets the disabled_services of this V1ClusterSecurityOptions.  # noqa: E501


        :return: The disabled_services of this V1ClusterSecurityOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._disabled_services

    @disabled_services.setter
    def disabled_services(self, disabled_services: 'list[str]'):
        """Sets the disabled_services of this V1ClusterSecurityOptions.


        :param disabled_services: The disabled_services of this V1ClusterSecurityOptions.  # noqa: E501
        :type: list[str]
        """

        self._disabled_services = disabled_services

    @property
    def encrypt_cluster_bucket(self) -> 'bool':
        """Gets the encrypt_cluster_bucket of this V1ClusterSecurityOptions.  # noqa: E501


        :return: The encrypt_cluster_bucket of this V1ClusterSecurityOptions.  # noqa: E501
        :rtype: bool
        """
        return self._encrypt_cluster_bucket

    @encrypt_cluster_bucket.setter
    def encrypt_cluster_bucket(self, encrypt_cluster_bucket: 'bool'):
        """Sets the encrypt_cluster_bucket of this V1ClusterSecurityOptions.


        :param encrypt_cluster_bucket: The encrypt_cluster_bucket of this V1ClusterSecurityOptions.  # noqa: E501
        :type: bool
        """

        self._encrypt_cluster_bucket = encrypt_cluster_bucket

    @property
    def encrypt_instance_volumes(self) -> 'bool':
        """Gets the encrypt_instance_volumes of this V1ClusterSecurityOptions.  # noqa: E501


        :return: The encrypt_instance_volumes of this V1ClusterSecurityOptions.  # noqa: E501
        :rtype: bool
        """
        return self._encrypt_instance_volumes

    @encrypt_instance_volumes.setter
    def encrypt_instance_volumes(self, encrypt_instance_volumes: 'bool'):
        """Sets the encrypt_instance_volumes of this V1ClusterSecurityOptions.


        :param encrypt_instance_volumes: The encrypt_instance_volumes of this V1ClusterSecurityOptions.  # noqa: E501
        :type: bool
        """

        self._encrypt_instance_volumes = encrypt_instance_volumes

    @property
    def exposed_ports(self) -> 'list[str]':
        """Gets the exposed_ports of this V1ClusterSecurityOptions.  # noqa: E501


        :return: The exposed_ports of this V1ClusterSecurityOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._exposed_ports

    @exposed_ports.setter
    def exposed_ports(self, exposed_ports: 'list[str]'):
        """Sets the exposed_ports of this V1ClusterSecurityOptions.


        :param exposed_ports: The exposed_ports of this V1ClusterSecurityOptions.  # noqa: E501
        :type: list[str]
        """

        self._exposed_ports = exposed_ports

    @property
    def extra_firewall_cidr_ranges(self) -> 'list[str]':
        """Gets the extra_firewall_cidr_ranges of this V1ClusterSecurityOptions.  # noqa: E501


        :return: The extra_firewall_cidr_ranges of this V1ClusterSecurityOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._extra_firewall_cidr_ranges

    @extra_firewall_cidr_ranges.setter
    def extra_firewall_cidr_ranges(self, extra_firewall_cidr_ranges: 'list[str]'):
        """Sets the extra_firewall_cidr_ranges of this V1ClusterSecurityOptions.


        :param extra_firewall_cidr_ranges: The extra_firewall_cidr_ranges of this V1ClusterSecurityOptions.  # noqa: E501
        :type: list[str]
        """

        self._extra_firewall_cidr_ranges = extra_firewall_cidr_ranges

    @property
    def extra_firewall_rules(self) -> 'list[V1FirewallRule]':
        """Gets the extra_firewall_rules of this V1ClusterSecurityOptions.  # noqa: E501


        :return: The extra_firewall_rules of this V1ClusterSecurityOptions.  # noqa: E501
        :rtype: list[V1FirewallRule]
        """
        return self._extra_firewall_rules

    @extra_firewall_rules.setter
    def extra_firewall_rules(self, extra_firewall_rules: 'list[V1FirewallRule]'):
        """Sets the extra_firewall_rules of this V1ClusterSecurityOptions.


        :param extra_firewall_rules: The extra_firewall_rules of this V1ClusterSecurityOptions.  # noqa: E501
        :type: list[V1FirewallRule]
        """

        self._extra_firewall_rules = extra_firewall_rules

    @property
    def extra_policy(self) -> 'str':
        """Gets the extra_policy of this V1ClusterSecurityOptions.  # noqa: E501


        :return: The extra_policy of this V1ClusterSecurityOptions.  # noqa: E501
        :rtype: str
        """
        return self._extra_policy

    @extra_policy.setter
    def extra_policy(self, extra_policy: 'str'):
        """Sets the extra_policy of this V1ClusterSecurityOptions.


        :param extra_policy: The extra_policy of this V1ClusterSecurityOptions.  # noqa: E501
        :type: str
        """

        self._extra_policy = extra_policy

    @property
    def extra_sa_scopes(self) -> 'list[str]':
        """Gets the extra_sa_scopes of this V1ClusterSecurityOptions.  # noqa: E501


        :return: The extra_sa_scopes of this V1ClusterSecurityOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._extra_sa_scopes

    @extra_sa_scopes.setter
    def extra_sa_scopes(self, extra_sa_scopes: 'list[str]'):
        """Sets the extra_sa_scopes of this V1ClusterSecurityOptions.


        :param extra_sa_scopes: The extra_sa_scopes of this V1ClusterSecurityOptions.  # noqa: E501
        :type: list[str]
        """

        self._extra_sa_scopes = extra_sa_scopes

    @property
    def kms_key_id(self) -> 'str':
        """Gets the kms_key_id of this V1ClusterSecurityOptions.  # noqa: E501


        :return: The kms_key_id of this V1ClusterSecurityOptions.  # noqa: E501
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id: 'str'):
        """Sets the kms_key_id of this V1ClusterSecurityOptions.


        :param kms_key_id: The kms_key_id of this V1ClusterSecurityOptions.  # noqa: E501
        :type: str
        """

        self._kms_key_id = kms_key_id

    @property
    def protect_instance_metadata(self) -> 'bool':
        """Gets the protect_instance_metadata of this V1ClusterSecurityOptions.  # noqa: E501


        :return: The protect_instance_metadata of this V1ClusterSecurityOptions.  # noqa: E501
        :rtype: bool
        """
        return self._protect_instance_metadata

    @protect_instance_metadata.setter
    def protect_instance_metadata(self, protect_instance_metadata: 'bool'):
        """Sets the protect_instance_metadata of this V1ClusterSecurityOptions.


        :param protect_instance_metadata: The protect_instance_metadata of this V1ClusterSecurityOptions.  # noqa: E501
        :type: bool
        """

        self._protect_instance_metadata = protect_instance_metadata

    @property
    def rootless_docker(self) -> 'bool':
        """Gets the rootless_docker of this V1ClusterSecurityOptions.  # noqa: E501


        :return: The rootless_docker of this V1ClusterSecurityOptions.  # noqa: E501
        :rtype: bool
        """
        return self._rootless_docker

    @rootless_docker.setter
    def rootless_docker(self, rootless_docker: 'bool'):
        """Sets the rootless_docker of this V1ClusterSecurityOptions.


        :param rootless_docker: The rootless_docker of this V1ClusterSecurityOptions.  # noqa: E501
        :type: bool
        """

        self._rootless_docker = rootless_docker

    @property
    def setup_network_load_balancer(self) -> 'bool':
        """Gets the setup_network_load_balancer of this V1ClusterSecurityOptions.  # noqa: E501


        :return: The setup_network_load_balancer of this V1ClusterSecurityOptions.  # noqa: E501
        :rtype: bool
        """
        return self._setup_network_load_balancer

    @setup_network_load_balancer.setter
    def setup_network_load_balancer(self, setup_network_load_balancer: 'bool'):
        """Sets the setup_network_load_balancer of this V1ClusterSecurityOptions.


        :param setup_network_load_balancer: The setup_network_load_balancer of this V1ClusterSecurityOptions.  # noqa: E501
        :type: bool
        """

        self._setup_network_load_balancer = setup_network_load_balancer

    @property
    def ssh_disabled(self) -> 'bool':
        """Gets the ssh_disabled of this V1ClusterSecurityOptions.  # noqa: E501


        :return: The ssh_disabled of this V1ClusterSecurityOptions.  # noqa: E501
        :rtype: bool
        """
        return self._ssh_disabled

    @ssh_disabled.setter
    def ssh_disabled(self, ssh_disabled: 'bool'):
        """Sets the ssh_disabled of this V1ClusterSecurityOptions.


        :param ssh_disabled: The ssh_disabled of this V1ClusterSecurityOptions.  # noqa: E501
        :type: bool
        """

        self._ssh_disabled = ssh_disabled

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1ClusterSecurityOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1ClusterSecurityOptions') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ClusterSecurityOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1ClusterSecurityOptions') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
