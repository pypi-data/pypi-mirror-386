# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1FilesystemMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device': 'str',
        'fstype': 'str',
        'mountpoint': 'str',
        'total': 'float',
        'utilisation': 'float'
    }

    attribute_map = {
        'device': 'device',
        'fstype': 'fstype',
        'mountpoint': 'mountpoint',
        'total': 'total',
        'utilisation': 'utilisation'
    }

    def __init__(self, device: 'str' =None, fstype: 'str' =None, mountpoint: 'str' =None, total: 'float' =None, utilisation: 'float' =None):  # noqa: E501
        """V1FilesystemMetrics - a model defined in Swagger"""  # noqa: E501
        self._device = None
        self._fstype = None
        self._mountpoint = None
        self._total = None
        self._utilisation = None
        self.discriminator = None
        if device is not None:
            self.device = device
        if fstype is not None:
            self.fstype = fstype
        if mountpoint is not None:
            self.mountpoint = mountpoint
        if total is not None:
            self.total = total
        if utilisation is not None:
            self.utilisation = utilisation

    @property
    def device(self) -> 'str':
        """Gets the device of this V1FilesystemMetrics.  # noqa: E501


        :return: The device of this V1FilesystemMetrics.  # noqa: E501
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device: 'str'):
        """Sets the device of this V1FilesystemMetrics.


        :param device: The device of this V1FilesystemMetrics.  # noqa: E501
        :type: str
        """

        self._device = device

    @property
    def fstype(self) -> 'str':
        """Gets the fstype of this V1FilesystemMetrics.  # noqa: E501


        :return: The fstype of this V1FilesystemMetrics.  # noqa: E501
        :rtype: str
        """
        return self._fstype

    @fstype.setter
    def fstype(self, fstype: 'str'):
        """Sets the fstype of this V1FilesystemMetrics.


        :param fstype: The fstype of this V1FilesystemMetrics.  # noqa: E501
        :type: str
        """

        self._fstype = fstype

    @property
    def mountpoint(self) -> 'str':
        """Gets the mountpoint of this V1FilesystemMetrics.  # noqa: E501


        :return: The mountpoint of this V1FilesystemMetrics.  # noqa: E501
        :rtype: str
        """
        return self._mountpoint

    @mountpoint.setter
    def mountpoint(self, mountpoint: 'str'):
        """Sets the mountpoint of this V1FilesystemMetrics.


        :param mountpoint: The mountpoint of this V1FilesystemMetrics.  # noqa: E501
        :type: str
        """

        self._mountpoint = mountpoint

    @property
    def total(self) -> 'float':
        """Gets the total of this V1FilesystemMetrics.  # noqa: E501


        :return: The total of this V1FilesystemMetrics.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total: 'float'):
        """Sets the total of this V1FilesystemMetrics.


        :param total: The total of this V1FilesystemMetrics.  # noqa: E501
        :type: float
        """

        self._total = total

    @property
    def utilisation(self) -> 'float':
        """Gets the utilisation of this V1FilesystemMetrics.  # noqa: E501


        :return: The utilisation of this V1FilesystemMetrics.  # noqa: E501
        :rtype: float
        """
        return self._utilisation

    @utilisation.setter
    def utilisation(self, utilisation: 'float'):
        """Sets the utilisation of this V1FilesystemMetrics.


        :param utilisation: The utilisation of this V1FilesystemMetrics.  # noqa: E501
        :type: float
        """

        self._utilisation = utilisation

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1FilesystemMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1FilesystemMetrics') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1FilesystemMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1FilesystemMetrics') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
