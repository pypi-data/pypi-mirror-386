# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1Message(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'assistant_id': 'str',
        'author': 'V1MessageAuthor',
        'completion_tokens': 'str',
        'content': 'list[V1MessageContent]',
        'conversation_id': 'str',
        'created_at': 'datetime',
        'executable': 'bool',
        'id': 'str',
        'internal_message': 'bool',
        'like': 'V1LikeStatus',
        'metadata': 'dict(str, str)',
        'model': 'str',
        'parent_message_id': 'str',
        'prompt_tokens': 'str',
        'throughput': 'float'
    }

    attribute_map = {
        'account_id': 'accountId',
        'assistant_id': 'assistantId',
        'author': 'author',
        'completion_tokens': 'completionTokens',
        'content': 'content',
        'conversation_id': 'conversationId',
        'created_at': 'createdAt',
        'executable': 'executable',
        'id': 'id',
        'internal_message': 'internalMessage',
        'like': 'like',
        'metadata': 'metadata',
        'model': 'model',
        'parent_message_id': 'parentMessageId',
        'prompt_tokens': 'promptTokens',
        'throughput': 'throughput'
    }

    def __init__(self, account_id: 'str' =None, assistant_id: 'str' =None, author: 'V1MessageAuthor' =None, completion_tokens: 'str' =None, content: 'list[V1MessageContent]' =None, conversation_id: 'str' =None, created_at: 'datetime' =None, executable: 'bool' =None, id: 'str' =None, internal_message: 'bool' =None, like: 'V1LikeStatus' =None, metadata: 'dict(str, str)' =None, model: 'str' =None, parent_message_id: 'str' =None, prompt_tokens: 'str' =None, throughput: 'float' =None):  # noqa: E501
        """V1Message - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._assistant_id = None
        self._author = None
        self._completion_tokens = None
        self._content = None
        self._conversation_id = None
        self._created_at = None
        self._executable = None
        self._id = None
        self._internal_message = None
        self._like = None
        self._metadata = None
        self._model = None
        self._parent_message_id = None
        self._prompt_tokens = None
        self._throughput = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if assistant_id is not None:
            self.assistant_id = assistant_id
        if author is not None:
            self.author = author
        if completion_tokens is not None:
            self.completion_tokens = completion_tokens
        if content is not None:
            self.content = content
        if conversation_id is not None:
            self.conversation_id = conversation_id
        if created_at is not None:
            self.created_at = created_at
        if executable is not None:
            self.executable = executable
        if id is not None:
            self.id = id
        if internal_message is not None:
            self.internal_message = internal_message
        if like is not None:
            self.like = like
        if metadata is not None:
            self.metadata = metadata
        if model is not None:
            self.model = model
        if parent_message_id is not None:
            self.parent_message_id = parent_message_id
        if prompt_tokens is not None:
            self.prompt_tokens = prompt_tokens
        if throughput is not None:
            self.throughput = throughput

    @property
    def account_id(self) -> 'str':
        """Gets the account_id of this V1Message.  # noqa: E501


        :return: The account_id of this V1Message.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id: 'str'):
        """Sets the account_id of this V1Message.


        :param account_id: The account_id of this V1Message.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def assistant_id(self) -> 'str':
        """Gets the assistant_id of this V1Message.  # noqa: E501


        :return: The assistant_id of this V1Message.  # noqa: E501
        :rtype: str
        """
        return self._assistant_id

    @assistant_id.setter
    def assistant_id(self, assistant_id: 'str'):
        """Sets the assistant_id of this V1Message.


        :param assistant_id: The assistant_id of this V1Message.  # noqa: E501
        :type: str
        """

        self._assistant_id = assistant_id

    @property
    def author(self) -> 'V1MessageAuthor':
        """Gets the author of this V1Message.  # noqa: E501


        :return: The author of this V1Message.  # noqa: E501
        :rtype: V1MessageAuthor
        """
        return self._author

    @author.setter
    def author(self, author: 'V1MessageAuthor'):
        """Sets the author of this V1Message.


        :param author: The author of this V1Message.  # noqa: E501
        :type: V1MessageAuthor
        """

        self._author = author

    @property
    def completion_tokens(self) -> 'str':
        """Gets the completion_tokens of this V1Message.  # noqa: E501


        :return: The completion_tokens of this V1Message.  # noqa: E501
        :rtype: str
        """
        return self._completion_tokens

    @completion_tokens.setter
    def completion_tokens(self, completion_tokens: 'str'):
        """Sets the completion_tokens of this V1Message.


        :param completion_tokens: The completion_tokens of this V1Message.  # noqa: E501
        :type: str
        """

        self._completion_tokens = completion_tokens

    @property
    def content(self) -> 'list[V1MessageContent]':
        """Gets the content of this V1Message.  # noqa: E501


        :return: The content of this V1Message.  # noqa: E501
        :rtype: list[V1MessageContent]
        """
        return self._content

    @content.setter
    def content(self, content: 'list[V1MessageContent]'):
        """Sets the content of this V1Message.


        :param content: The content of this V1Message.  # noqa: E501
        :type: list[V1MessageContent]
        """

        self._content = content

    @property
    def conversation_id(self) -> 'str':
        """Gets the conversation_id of this V1Message.  # noqa: E501


        :return: The conversation_id of this V1Message.  # noqa: E501
        :rtype: str
        """
        return self._conversation_id

    @conversation_id.setter
    def conversation_id(self, conversation_id: 'str'):
        """Sets the conversation_id of this V1Message.


        :param conversation_id: The conversation_id of this V1Message.  # noqa: E501
        :type: str
        """

        self._conversation_id = conversation_id

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this V1Message.  # noqa: E501


        :return: The created_at of this V1Message.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this V1Message.


        :param created_at: The created_at of this V1Message.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def executable(self) -> 'bool':
        """Gets the executable of this V1Message.  # noqa: E501


        :return: The executable of this V1Message.  # noqa: E501
        :rtype: bool
        """
        return self._executable

    @executable.setter
    def executable(self, executable: 'bool'):
        """Sets the executable of this V1Message.


        :param executable: The executable of this V1Message.  # noqa: E501
        :type: bool
        """

        self._executable = executable

    @property
    def id(self) -> 'str':
        """Gets the id of this V1Message.  # noqa: E501


        :return: The id of this V1Message.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1Message.


        :param id: The id of this V1Message.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def internal_message(self) -> 'bool':
        """Gets the internal_message of this V1Message.  # noqa: E501


        :return: The internal_message of this V1Message.  # noqa: E501
        :rtype: bool
        """
        return self._internal_message

    @internal_message.setter
    def internal_message(self, internal_message: 'bool'):
        """Sets the internal_message of this V1Message.


        :param internal_message: The internal_message of this V1Message.  # noqa: E501
        :type: bool
        """

        self._internal_message = internal_message

    @property
    def like(self) -> 'V1LikeStatus':
        """Gets the like of this V1Message.  # noqa: E501


        :return: The like of this V1Message.  # noqa: E501
        :rtype: V1LikeStatus
        """
        return self._like

    @like.setter
    def like(self, like: 'V1LikeStatus'):
        """Sets the like of this V1Message.


        :param like: The like of this V1Message.  # noqa: E501
        :type: V1LikeStatus
        """

        self._like = like

    @property
    def metadata(self) -> 'dict(str, str)':
        """Gets the metadata of this V1Message.  # noqa: E501


        :return: The metadata of this V1Message.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: 'dict(str, str)'):
        """Sets the metadata of this V1Message.


        :param metadata: The metadata of this V1Message.  # noqa: E501
        :type: dict(str, str)
        """

        self._metadata = metadata

    @property
    def model(self) -> 'str':
        """Gets the model of this V1Message.  # noqa: E501


        :return: The model of this V1Message.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model: 'str'):
        """Sets the model of this V1Message.


        :param model: The model of this V1Message.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def parent_message_id(self) -> 'str':
        """Gets the parent_message_id of this V1Message.  # noqa: E501


        :return: The parent_message_id of this V1Message.  # noqa: E501
        :rtype: str
        """
        return self._parent_message_id

    @parent_message_id.setter
    def parent_message_id(self, parent_message_id: 'str'):
        """Sets the parent_message_id of this V1Message.


        :param parent_message_id: The parent_message_id of this V1Message.  # noqa: E501
        :type: str
        """

        self._parent_message_id = parent_message_id

    @property
    def prompt_tokens(self) -> 'str':
        """Gets the prompt_tokens of this V1Message.  # noqa: E501


        :return: The prompt_tokens of this V1Message.  # noqa: E501
        :rtype: str
        """
        return self._prompt_tokens

    @prompt_tokens.setter
    def prompt_tokens(self, prompt_tokens: 'str'):
        """Sets the prompt_tokens of this V1Message.


        :param prompt_tokens: The prompt_tokens of this V1Message.  # noqa: E501
        :type: str
        """

        self._prompt_tokens = prompt_tokens

    @property
    def throughput(self) -> 'float':
        """Gets the throughput of this V1Message.  # noqa: E501


        :return: The throughput of this V1Message.  # noqa: E501
        :rtype: float
        """
        return self._throughput

    @throughput.setter
    def throughput(self, throughput: 'float'):
        """Sets the throughput of this V1Message.


        :param throughput: The throughput of this V1Message.  # noqa: E501
        :type: float
        """

        self._throughput = throughput

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1Message, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1Message') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Message):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1Message') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
