# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1CreateClusterCapacityReservationResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cloud_provider_capacity_reservation_id': 'str',
        'full_cloud_provider_reservation_string': 'str',
        'id': 'str',
        'match_pattern': 'str'
    }

    attribute_map = {
        'cloud_provider_capacity_reservation_id': 'cloudProviderCapacityReservationId',
        'full_cloud_provider_reservation_string': 'fullCloudProviderReservationString',
        'id': 'id',
        'match_pattern': 'matchPattern'
    }

    def __init__(self, cloud_provider_capacity_reservation_id: 'str' =None, full_cloud_provider_reservation_string: 'str' =None, id: 'str' =None, match_pattern: 'str' =None):  # noqa: E501
        """V1CreateClusterCapacityReservationResponse - a model defined in Swagger"""  # noqa: E501
        self._cloud_provider_capacity_reservation_id = None
        self._full_cloud_provider_reservation_string = None
        self._id = None
        self._match_pattern = None
        self.discriminator = None
        if cloud_provider_capacity_reservation_id is not None:
            self.cloud_provider_capacity_reservation_id = cloud_provider_capacity_reservation_id
        if full_cloud_provider_reservation_string is not None:
            self.full_cloud_provider_reservation_string = full_cloud_provider_reservation_string
        if id is not None:
            self.id = id
        if match_pattern is not None:
            self.match_pattern = match_pattern

    @property
    def cloud_provider_capacity_reservation_id(self) -> 'str':
        """Gets the cloud_provider_capacity_reservation_id of this V1CreateClusterCapacityReservationResponse.  # noqa: E501


        :return: The cloud_provider_capacity_reservation_id of this V1CreateClusterCapacityReservationResponse.  # noqa: E501
        :rtype: str
        """
        return self._cloud_provider_capacity_reservation_id

    @cloud_provider_capacity_reservation_id.setter
    def cloud_provider_capacity_reservation_id(self, cloud_provider_capacity_reservation_id: 'str'):
        """Sets the cloud_provider_capacity_reservation_id of this V1CreateClusterCapacityReservationResponse.


        :param cloud_provider_capacity_reservation_id: The cloud_provider_capacity_reservation_id of this V1CreateClusterCapacityReservationResponse.  # noqa: E501
        :type: str
        """

        self._cloud_provider_capacity_reservation_id = cloud_provider_capacity_reservation_id

    @property
    def full_cloud_provider_reservation_string(self) -> 'str':
        """Gets the full_cloud_provider_reservation_string of this V1CreateClusterCapacityReservationResponse.  # noqa: E501


        :return: The full_cloud_provider_reservation_string of this V1CreateClusterCapacityReservationResponse.  # noqa: E501
        :rtype: str
        """
        return self._full_cloud_provider_reservation_string

    @full_cloud_provider_reservation_string.setter
    def full_cloud_provider_reservation_string(self, full_cloud_provider_reservation_string: 'str'):
        """Sets the full_cloud_provider_reservation_string of this V1CreateClusterCapacityReservationResponse.


        :param full_cloud_provider_reservation_string: The full_cloud_provider_reservation_string of this V1CreateClusterCapacityReservationResponse.  # noqa: E501
        :type: str
        """

        self._full_cloud_provider_reservation_string = full_cloud_provider_reservation_string

    @property
    def id(self) -> 'str':
        """Gets the id of this V1CreateClusterCapacityReservationResponse.  # noqa: E501


        :return: The id of this V1CreateClusterCapacityReservationResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1CreateClusterCapacityReservationResponse.


        :param id: The id of this V1CreateClusterCapacityReservationResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def match_pattern(self) -> 'str':
        """Gets the match_pattern of this V1CreateClusterCapacityReservationResponse.  # noqa: E501


        :return: The match_pattern of this V1CreateClusterCapacityReservationResponse.  # noqa: E501
        :rtype: str
        """
        return self._match_pattern

    @match_pattern.setter
    def match_pattern(self, match_pattern: 'str'):
        """Sets the match_pattern of this V1CreateClusterCapacityReservationResponse.


        :param match_pattern: The match_pattern of this V1CreateClusterCapacityReservationResponse.  # noqa: E501
        :type: str
        """

        self._match_pattern = match_pattern

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1CreateClusterCapacityReservationResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1CreateClusterCapacityReservationResponse') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1CreateClusterCapacityReservationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1CreateClusterCapacityReservationResponse') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
