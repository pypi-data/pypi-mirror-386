# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class ProjectIdEndpointsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth': 'V1EndpointAuth',
        'cloudspace': 'V1UpstreamCloudSpace',
        'custom_domain': 'str',
        'name': 'str',
        'openai': 'V1UpstreamOpenAI',
        'ports': 'list[str]'
    }

    attribute_map = {
        'auth': 'auth',
        'cloudspace': 'cloudspace',
        'custom_domain': 'customDomain',
        'name': 'name',
        'openai': 'openai',
        'ports': 'ports'
    }

    def __init__(self, auth: 'V1EndpointAuth' =None, cloudspace: 'V1UpstreamCloudSpace' =None, custom_domain: 'str' =None, name: 'str' =None, openai: 'V1UpstreamOpenAI' =None, ports: 'list[str]' =None):  # noqa: E501
        """ProjectIdEndpointsBody - a model defined in Swagger"""  # noqa: E501
        self._auth = None
        self._cloudspace = None
        self._custom_domain = None
        self._name = None
        self._openai = None
        self._ports = None
        self.discriminator = None
        if auth is not None:
            self.auth = auth
        if cloudspace is not None:
            self.cloudspace = cloudspace
        if custom_domain is not None:
            self.custom_domain = custom_domain
        if name is not None:
            self.name = name
        if openai is not None:
            self.openai = openai
        if ports is not None:
            self.ports = ports

    @property
    def auth(self) -> 'V1EndpointAuth':
        """Gets the auth of this ProjectIdEndpointsBody.  # noqa: E501


        :return: The auth of this ProjectIdEndpointsBody.  # noqa: E501
        :rtype: V1EndpointAuth
        """
        return self._auth

    @auth.setter
    def auth(self, auth: 'V1EndpointAuth'):
        """Sets the auth of this ProjectIdEndpointsBody.


        :param auth: The auth of this ProjectIdEndpointsBody.  # noqa: E501
        :type: V1EndpointAuth
        """

        self._auth = auth

    @property
    def cloudspace(self) -> 'V1UpstreamCloudSpace':
        """Gets the cloudspace of this ProjectIdEndpointsBody.  # noqa: E501


        :return: The cloudspace of this ProjectIdEndpointsBody.  # noqa: E501
        :rtype: V1UpstreamCloudSpace
        """
        return self._cloudspace

    @cloudspace.setter
    def cloudspace(self, cloudspace: 'V1UpstreamCloudSpace'):
        """Sets the cloudspace of this ProjectIdEndpointsBody.


        :param cloudspace: The cloudspace of this ProjectIdEndpointsBody.  # noqa: E501
        :type: V1UpstreamCloudSpace
        """

        self._cloudspace = cloudspace

    @property
    def custom_domain(self) -> 'str':
        """Gets the custom_domain of this ProjectIdEndpointsBody.  # noqa: E501


        :return: The custom_domain of this ProjectIdEndpointsBody.  # noqa: E501
        :rtype: str
        """
        return self._custom_domain

    @custom_domain.setter
    def custom_domain(self, custom_domain: 'str'):
        """Sets the custom_domain of this ProjectIdEndpointsBody.


        :param custom_domain: The custom_domain of this ProjectIdEndpointsBody.  # noqa: E501
        :type: str
        """

        self._custom_domain = custom_domain

    @property
    def name(self) -> 'str':
        """Gets the name of this ProjectIdEndpointsBody.  # noqa: E501


        :return: The name of this ProjectIdEndpointsBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this ProjectIdEndpointsBody.


        :param name: The name of this ProjectIdEndpointsBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def openai(self) -> 'V1UpstreamOpenAI':
        """Gets the openai of this ProjectIdEndpointsBody.  # noqa: E501


        :return: The openai of this ProjectIdEndpointsBody.  # noqa: E501
        :rtype: V1UpstreamOpenAI
        """
        return self._openai

    @openai.setter
    def openai(self, openai: 'V1UpstreamOpenAI'):
        """Sets the openai of this ProjectIdEndpointsBody.


        :param openai: The openai of this ProjectIdEndpointsBody.  # noqa: E501
        :type: V1UpstreamOpenAI
        """

        self._openai = openai

    @property
    def ports(self) -> 'list[str]':
        """Gets the ports of this ProjectIdEndpointsBody.  # noqa: E501


        :return: The ports of this ProjectIdEndpointsBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._ports

    @ports.setter
    def ports(self, ports: 'list[str]'):
        """Sets the ports of this ProjectIdEndpointsBody.


        :param ports: The ports of this ProjectIdEndpointsBody.  # noqa: E501
        :type: list[str]
        """

        self._ports = ports

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectIdEndpointsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'ProjectIdEndpointsBody') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectIdEndpointsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'ProjectIdEndpointsBody') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
