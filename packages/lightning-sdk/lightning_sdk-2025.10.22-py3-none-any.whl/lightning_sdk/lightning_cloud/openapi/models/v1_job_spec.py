# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1JobSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'artifacts_destination': 'str',
        'artifacts_source': 'str',
        'cloudspace_id': 'str',
        'cluster_id': 'str',
        'command': 'str',
        'data_paths': 'list[V1DataPath]',
        'disable_artifacts_persistence': 'bool',
        'entrypoint': 'str',
        'env': 'list[V1EnvVar]',
        'image': 'str',
        'image_cluster_credentials': 'bool',
        'image_secret_ref': 'str',
        'include_credentials': 'bool',
        'instance_name': 'str',
        'instance_type': 'str',
        'machine_image_version': 'str',
        'modified_volume': 'bool',
        'path_mappings': 'list[V1PathMapping]',
        'pipeline_id': 'str',
        'quantity': 'int',
        'rank': 'int',
        'readiness_probe': 'V1JobHealthCheckConfig',
        'regions': 'list[str]',
        'requested_run_duration_seconds': 'str',
        'resources': 'V1Resources',
        'restart_policy': 'str',
        'run_id': 'str',
        'spot': 'bool',
        'use_tls': 'bool',
        'volumes': 'list[V1Volume]'
    }

    attribute_map = {
        'artifacts_destination': 'artifactsDestination',
        'artifacts_source': 'artifactsSource',
        'cloudspace_id': 'cloudspaceId',
        'cluster_id': 'clusterId',
        'command': 'command',
        'data_paths': 'dataPaths',
        'disable_artifacts_persistence': 'disableArtifactsPersistence',
        'entrypoint': 'entrypoint',
        'env': 'env',
        'image': 'image',
        'image_cluster_credentials': 'imageClusterCredentials',
        'image_secret_ref': 'imageSecretRef',
        'include_credentials': 'includeCredentials',
        'instance_name': 'instanceName',
        'instance_type': 'instanceType',
        'machine_image_version': 'machineImageVersion',
        'modified_volume': 'modifiedVolume',
        'path_mappings': 'pathMappings',
        'pipeline_id': 'pipelineId',
        'quantity': 'quantity',
        'rank': 'rank',
        'readiness_probe': 'readinessProbe',
        'regions': 'regions',
        'requested_run_duration_seconds': 'requestedRunDurationSeconds',
        'resources': 'resources',
        'restart_policy': 'restartPolicy',
        'run_id': 'runId',
        'spot': 'spot',
        'use_tls': 'useTls',
        'volumes': 'volumes'
    }

    def __init__(self, artifacts_destination: 'str' =None, artifacts_source: 'str' =None, cloudspace_id: 'str' =None, cluster_id: 'str' =None, command: 'str' =None, data_paths: 'list[V1DataPath]' =None, disable_artifacts_persistence: 'bool' =None, entrypoint: 'str' =None, env: 'list[V1EnvVar]' =None, image: 'str' =None, image_cluster_credentials: 'bool' =None, image_secret_ref: 'str' =None, include_credentials: 'bool' =None, instance_name: 'str' =None, instance_type: 'str' =None, machine_image_version: 'str' =None, modified_volume: 'bool' =None, path_mappings: 'list[V1PathMapping]' =None, pipeline_id: 'str' =None, quantity: 'int' =None, rank: 'int' =None, readiness_probe: 'V1JobHealthCheckConfig' =None, regions: 'list[str]' =None, requested_run_duration_seconds: 'str' =None, resources: 'V1Resources' =None, restart_policy: 'str' =None, run_id: 'str' =None, spot: 'bool' =None, use_tls: 'bool' =None, volumes: 'list[V1Volume]' =None):  # noqa: E501
        """V1JobSpec - a model defined in Swagger"""  # noqa: E501
        self._artifacts_destination = None
        self._artifacts_source = None
        self._cloudspace_id = None
        self._cluster_id = None
        self._command = None
        self._data_paths = None
        self._disable_artifacts_persistence = None
        self._entrypoint = None
        self._env = None
        self._image = None
        self._image_cluster_credentials = None
        self._image_secret_ref = None
        self._include_credentials = None
        self._instance_name = None
        self._instance_type = None
        self._machine_image_version = None
        self._modified_volume = None
        self._path_mappings = None
        self._pipeline_id = None
        self._quantity = None
        self._rank = None
        self._readiness_probe = None
        self._regions = None
        self._requested_run_duration_seconds = None
        self._resources = None
        self._restart_policy = None
        self._run_id = None
        self._spot = None
        self._use_tls = None
        self._volumes = None
        self.discriminator = None
        if artifacts_destination is not None:
            self.artifacts_destination = artifacts_destination
        if artifacts_source is not None:
            self.artifacts_source = artifacts_source
        if cloudspace_id is not None:
            self.cloudspace_id = cloudspace_id
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if command is not None:
            self.command = command
        if data_paths is not None:
            self.data_paths = data_paths
        if disable_artifacts_persistence is not None:
            self.disable_artifacts_persistence = disable_artifacts_persistence
        if entrypoint is not None:
            self.entrypoint = entrypoint
        if env is not None:
            self.env = env
        if image is not None:
            self.image = image
        if image_cluster_credentials is not None:
            self.image_cluster_credentials = image_cluster_credentials
        if image_secret_ref is not None:
            self.image_secret_ref = image_secret_ref
        if include_credentials is not None:
            self.include_credentials = include_credentials
        if instance_name is not None:
            self.instance_name = instance_name
        if instance_type is not None:
            self.instance_type = instance_type
        if machine_image_version is not None:
            self.machine_image_version = machine_image_version
        if modified_volume is not None:
            self.modified_volume = modified_volume
        if path_mappings is not None:
            self.path_mappings = path_mappings
        if pipeline_id is not None:
            self.pipeline_id = pipeline_id
        if quantity is not None:
            self.quantity = quantity
        if rank is not None:
            self.rank = rank
        if readiness_probe is not None:
            self.readiness_probe = readiness_probe
        if regions is not None:
            self.regions = regions
        if requested_run_duration_seconds is not None:
            self.requested_run_duration_seconds = requested_run_duration_seconds
        if resources is not None:
            self.resources = resources
        if restart_policy is not None:
            self.restart_policy = restart_policy
        if run_id is not None:
            self.run_id = run_id
        if spot is not None:
            self.spot = spot
        if use_tls is not None:
            self.use_tls = use_tls
        if volumes is not None:
            self.volumes = volumes

    @property
    def artifacts_destination(self) -> 'str':
        """Gets the artifacts_destination of this V1JobSpec.  # noqa: E501


        :return: The artifacts_destination of this V1JobSpec.  # noqa: E501
        :rtype: str
        """
        return self._artifacts_destination

    @artifacts_destination.setter
    def artifacts_destination(self, artifacts_destination: 'str'):
        """Sets the artifacts_destination of this V1JobSpec.


        :param artifacts_destination: The artifacts_destination of this V1JobSpec.  # noqa: E501
        :type: str
        """

        self._artifacts_destination = artifacts_destination

    @property
    def artifacts_source(self) -> 'str':
        """Gets the artifacts_source of this V1JobSpec.  # noqa: E501


        :return: The artifacts_source of this V1JobSpec.  # noqa: E501
        :rtype: str
        """
        return self._artifacts_source

    @artifacts_source.setter
    def artifacts_source(self, artifacts_source: 'str'):
        """Sets the artifacts_source of this V1JobSpec.


        :param artifacts_source: The artifacts_source of this V1JobSpec.  # noqa: E501
        :type: str
        """

        self._artifacts_source = artifacts_source

    @property
    def cloudspace_id(self) -> 'str':
        """Gets the cloudspace_id of this V1JobSpec.  # noqa: E501


        :return: The cloudspace_id of this V1JobSpec.  # noqa: E501
        :rtype: str
        """
        return self._cloudspace_id

    @cloudspace_id.setter
    def cloudspace_id(self, cloudspace_id: 'str'):
        """Sets the cloudspace_id of this V1JobSpec.


        :param cloudspace_id: The cloudspace_id of this V1JobSpec.  # noqa: E501
        :type: str
        """

        self._cloudspace_id = cloudspace_id

    @property
    def cluster_id(self) -> 'str':
        """Gets the cluster_id of this V1JobSpec.  # noqa: E501


        :return: The cluster_id of this V1JobSpec.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id: 'str'):
        """Sets the cluster_id of this V1JobSpec.


        :param cluster_id: The cluster_id of this V1JobSpec.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def command(self) -> 'str':
        """Gets the command of this V1JobSpec.  # noqa: E501


        :return: The command of this V1JobSpec.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command: 'str'):
        """Sets the command of this V1JobSpec.


        :param command: The command of this V1JobSpec.  # noqa: E501
        :type: str
        """

        self._command = command

    @property
    def data_paths(self) -> 'list[V1DataPath]':
        """Gets the data_paths of this V1JobSpec.  # noqa: E501


        :return: The data_paths of this V1JobSpec.  # noqa: E501
        :rtype: list[V1DataPath]
        """
        return self._data_paths

    @data_paths.setter
    def data_paths(self, data_paths: 'list[V1DataPath]'):
        """Sets the data_paths of this V1JobSpec.


        :param data_paths: The data_paths of this V1JobSpec.  # noqa: E501
        :type: list[V1DataPath]
        """

        self._data_paths = data_paths

    @property
    def disable_artifacts_persistence(self) -> 'bool':
        """Gets the disable_artifacts_persistence of this V1JobSpec.  # noqa: E501


        :return: The disable_artifacts_persistence of this V1JobSpec.  # noqa: E501
        :rtype: bool
        """
        return self._disable_artifacts_persistence

    @disable_artifacts_persistence.setter
    def disable_artifacts_persistence(self, disable_artifacts_persistence: 'bool'):
        """Sets the disable_artifacts_persistence of this V1JobSpec.


        :param disable_artifacts_persistence: The disable_artifacts_persistence of this V1JobSpec.  # noqa: E501
        :type: bool
        """

        self._disable_artifacts_persistence = disable_artifacts_persistence

    @property
    def entrypoint(self) -> 'str':
        """Gets the entrypoint of this V1JobSpec.  # noqa: E501


        :return: The entrypoint of this V1JobSpec.  # noqa: E501
        :rtype: str
        """
        return self._entrypoint

    @entrypoint.setter
    def entrypoint(self, entrypoint: 'str'):
        """Sets the entrypoint of this V1JobSpec.


        :param entrypoint: The entrypoint of this V1JobSpec.  # noqa: E501
        :type: str
        """

        self._entrypoint = entrypoint

    @property
    def env(self) -> 'list[V1EnvVar]':
        """Gets the env of this V1JobSpec.  # noqa: E501


        :return: The env of this V1JobSpec.  # noqa: E501
        :rtype: list[V1EnvVar]
        """
        return self._env

    @env.setter
    def env(self, env: 'list[V1EnvVar]'):
        """Sets the env of this V1JobSpec.


        :param env: The env of this V1JobSpec.  # noqa: E501
        :type: list[V1EnvVar]
        """

        self._env = env

    @property
    def image(self) -> 'str':
        """Gets the image of this V1JobSpec.  # noqa: E501


        :return: The image of this V1JobSpec.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image: 'str'):
        """Sets the image of this V1JobSpec.


        :param image: The image of this V1JobSpec.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def image_cluster_credentials(self) -> 'bool':
        """Gets the image_cluster_credentials of this V1JobSpec.  # noqa: E501


        :return: The image_cluster_credentials of this V1JobSpec.  # noqa: E501
        :rtype: bool
        """
        return self._image_cluster_credentials

    @image_cluster_credentials.setter
    def image_cluster_credentials(self, image_cluster_credentials: 'bool'):
        """Sets the image_cluster_credentials of this V1JobSpec.


        :param image_cluster_credentials: The image_cluster_credentials of this V1JobSpec.  # noqa: E501
        :type: bool
        """

        self._image_cluster_credentials = image_cluster_credentials

    @property
    def image_secret_ref(self) -> 'str':
        """Gets the image_secret_ref of this V1JobSpec.  # noqa: E501


        :return: The image_secret_ref of this V1JobSpec.  # noqa: E501
        :rtype: str
        """
        return self._image_secret_ref

    @image_secret_ref.setter
    def image_secret_ref(self, image_secret_ref: 'str'):
        """Sets the image_secret_ref of this V1JobSpec.


        :param image_secret_ref: The image_secret_ref of this V1JobSpec.  # noqa: E501
        :type: str
        """

        self._image_secret_ref = image_secret_ref

    @property
    def include_credentials(self) -> 'bool':
        """Gets the include_credentials of this V1JobSpec.  # noqa: E501


        :return: The include_credentials of this V1JobSpec.  # noqa: E501
        :rtype: bool
        """
        return self._include_credentials

    @include_credentials.setter
    def include_credentials(self, include_credentials: 'bool'):
        """Sets the include_credentials of this V1JobSpec.


        :param include_credentials: The include_credentials of this V1JobSpec.  # noqa: E501
        :type: bool
        """

        self._include_credentials = include_credentials

    @property
    def instance_name(self) -> 'str':
        """Gets the instance_name of this V1JobSpec.  # noqa: E501


        :return: The instance_name of this V1JobSpec.  # noqa: E501
        :rtype: str
        """
        return self._instance_name

    @instance_name.setter
    def instance_name(self, instance_name: 'str'):
        """Sets the instance_name of this V1JobSpec.


        :param instance_name: The instance_name of this V1JobSpec.  # noqa: E501
        :type: str
        """

        self._instance_name = instance_name

    @property
    def instance_type(self) -> 'str':
        """Gets the instance_type of this V1JobSpec.  # noqa: E501


        :return: The instance_type of this V1JobSpec.  # noqa: E501
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type: 'str'):
        """Sets the instance_type of this V1JobSpec.


        :param instance_type: The instance_type of this V1JobSpec.  # noqa: E501
        :type: str
        """

        self._instance_type = instance_type

    @property
    def machine_image_version(self) -> 'str':
        """Gets the machine_image_version of this V1JobSpec.  # noqa: E501


        :return: The machine_image_version of this V1JobSpec.  # noqa: E501
        :rtype: str
        """
        return self._machine_image_version

    @machine_image_version.setter
    def machine_image_version(self, machine_image_version: 'str'):
        """Sets the machine_image_version of this V1JobSpec.


        :param machine_image_version: The machine_image_version of this V1JobSpec.  # noqa: E501
        :type: str
        """

        self._machine_image_version = machine_image_version

    @property
    def modified_volume(self) -> 'bool':
        """Gets the modified_volume of this V1JobSpec.  # noqa: E501


        :return: The modified_volume of this V1JobSpec.  # noqa: E501
        :rtype: bool
        """
        return self._modified_volume

    @modified_volume.setter
    def modified_volume(self, modified_volume: 'bool'):
        """Sets the modified_volume of this V1JobSpec.


        :param modified_volume: The modified_volume of this V1JobSpec.  # noqa: E501
        :type: bool
        """

        self._modified_volume = modified_volume

    @property
    def path_mappings(self) -> 'list[V1PathMapping]':
        """Gets the path_mappings of this V1JobSpec.  # noqa: E501


        :return: The path_mappings of this V1JobSpec.  # noqa: E501
        :rtype: list[V1PathMapping]
        """
        return self._path_mappings

    @path_mappings.setter
    def path_mappings(self, path_mappings: 'list[V1PathMapping]'):
        """Sets the path_mappings of this V1JobSpec.


        :param path_mappings: The path_mappings of this V1JobSpec.  # noqa: E501
        :type: list[V1PathMapping]
        """

        self._path_mappings = path_mappings

    @property
    def pipeline_id(self) -> 'str':
        """Gets the pipeline_id of this V1JobSpec.  # noqa: E501


        :return: The pipeline_id of this V1JobSpec.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id: 'str'):
        """Sets the pipeline_id of this V1JobSpec.


        :param pipeline_id: The pipeline_id of this V1JobSpec.  # noqa: E501
        :type: str
        """

        self._pipeline_id = pipeline_id

    @property
    def quantity(self) -> 'int':
        """Gets the quantity of this V1JobSpec.  # noqa: E501


        :return: The quantity of this V1JobSpec.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: 'int'):
        """Sets the quantity of this V1JobSpec.


        :param quantity: The quantity of this V1JobSpec.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def rank(self) -> 'int':
        """Gets the rank of this V1JobSpec.  # noqa: E501


        :return: The rank of this V1JobSpec.  # noqa: E501
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank: 'int'):
        """Sets the rank of this V1JobSpec.


        :param rank: The rank of this V1JobSpec.  # noqa: E501
        :type: int
        """

        self._rank = rank

    @property
    def readiness_probe(self) -> 'V1JobHealthCheckConfig':
        """Gets the readiness_probe of this V1JobSpec.  # noqa: E501


        :return: The readiness_probe of this V1JobSpec.  # noqa: E501
        :rtype: V1JobHealthCheckConfig
        """
        return self._readiness_probe

    @readiness_probe.setter
    def readiness_probe(self, readiness_probe: 'V1JobHealthCheckConfig'):
        """Sets the readiness_probe of this V1JobSpec.


        :param readiness_probe: The readiness_probe of this V1JobSpec.  # noqa: E501
        :type: V1JobHealthCheckConfig
        """

        self._readiness_probe = readiness_probe

    @property
    def regions(self) -> 'list[str]':
        """Gets the regions of this V1JobSpec.  # noqa: E501


        :return: The regions of this V1JobSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._regions

    @regions.setter
    def regions(self, regions: 'list[str]'):
        """Sets the regions of this V1JobSpec.


        :param regions: The regions of this V1JobSpec.  # noqa: E501
        :type: list[str]
        """

        self._regions = regions

    @property
    def requested_run_duration_seconds(self) -> 'str':
        """Gets the requested_run_duration_seconds of this V1JobSpec.  # noqa: E501


        :return: The requested_run_duration_seconds of this V1JobSpec.  # noqa: E501
        :rtype: str
        """
        return self._requested_run_duration_seconds

    @requested_run_duration_seconds.setter
    def requested_run_duration_seconds(self, requested_run_duration_seconds: 'str'):
        """Sets the requested_run_duration_seconds of this V1JobSpec.


        :param requested_run_duration_seconds: The requested_run_duration_seconds of this V1JobSpec.  # noqa: E501
        :type: str
        """

        self._requested_run_duration_seconds = requested_run_duration_seconds

    @property
    def resources(self) -> 'V1Resources':
        """Gets the resources of this V1JobSpec.  # noqa: E501


        :return: The resources of this V1JobSpec.  # noqa: E501
        :rtype: V1Resources
        """
        return self._resources

    @resources.setter
    def resources(self, resources: 'V1Resources'):
        """Sets the resources of this V1JobSpec.


        :param resources: The resources of this V1JobSpec.  # noqa: E501
        :type: V1Resources
        """

        self._resources = resources

    @property
    def restart_policy(self) -> 'str':
        """Gets the restart_policy of this V1JobSpec.  # noqa: E501


        :return: The restart_policy of this V1JobSpec.  # noqa: E501
        :rtype: str
        """
        return self._restart_policy

    @restart_policy.setter
    def restart_policy(self, restart_policy: 'str'):
        """Sets the restart_policy of this V1JobSpec.


        :param restart_policy: The restart_policy of this V1JobSpec.  # noqa: E501
        :type: str
        """

        self._restart_policy = restart_policy

    @property
    def run_id(self) -> 'str':
        """Gets the run_id of this V1JobSpec.  # noqa: E501


        :return: The run_id of this V1JobSpec.  # noqa: E501
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id: 'str'):
        """Sets the run_id of this V1JobSpec.


        :param run_id: The run_id of this V1JobSpec.  # noqa: E501
        :type: str
        """

        self._run_id = run_id

    @property
    def spot(self) -> 'bool':
        """Gets the spot of this V1JobSpec.  # noqa: E501


        :return: The spot of this V1JobSpec.  # noqa: E501
        :rtype: bool
        """
        return self._spot

    @spot.setter
    def spot(self, spot: 'bool'):
        """Sets the spot of this V1JobSpec.


        :param spot: The spot of this V1JobSpec.  # noqa: E501
        :type: bool
        """

        self._spot = spot

    @property
    def use_tls(self) -> 'bool':
        """Gets the use_tls of this V1JobSpec.  # noqa: E501


        :return: The use_tls of this V1JobSpec.  # noqa: E501
        :rtype: bool
        """
        return self._use_tls

    @use_tls.setter
    def use_tls(self, use_tls: 'bool'):
        """Sets the use_tls of this V1JobSpec.


        :param use_tls: The use_tls of this V1JobSpec.  # noqa: E501
        :type: bool
        """

        self._use_tls = use_tls

    @property
    def volumes(self) -> 'list[V1Volume]':
        """Gets the volumes of this V1JobSpec.  # noqa: E501


        :return: The volumes of this V1JobSpec.  # noqa: E501
        :rtype: list[V1Volume]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes: 'list[V1Volume]'):
        """Sets the volumes of this V1JobSpec.


        :param volumes: The volumes of this V1JobSpec.  # noqa: E501
        :type: list[V1Volume]
        """

        self._volumes = volumes

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1JobSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1JobSpec') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1JobSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1JobSpec') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
