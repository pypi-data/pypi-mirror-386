# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1JobResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent_job': 'V1AgentJob',
        'app_instance': 'Externalv1LightningappInstance',
        'batch_job': 'V1Job',
        'deployment': 'V1Deployment',
        'multi_machine_job': 'V1MultiMachineJob',
        'pipeline': 'V1Pipeline',
        'project_id': 'str'
    }

    attribute_map = {
        'agent_job': 'agentJob',
        'app_instance': 'appInstance',
        'batch_job': 'batchJob',
        'deployment': 'deployment',
        'multi_machine_job': 'multiMachineJob',
        'pipeline': 'pipeline',
        'project_id': 'projectId'
    }

    def __init__(self, agent_job: 'V1AgentJob' =None, app_instance: 'Externalv1LightningappInstance' =None, batch_job: 'V1Job' =None, deployment: 'V1Deployment' =None, multi_machine_job: 'V1MultiMachineJob' =None, pipeline: 'V1Pipeline' =None, project_id: 'str' =None):  # noqa: E501
        """V1JobResource - a model defined in Swagger"""  # noqa: E501
        self._agent_job = None
        self._app_instance = None
        self._batch_job = None
        self._deployment = None
        self._multi_machine_job = None
        self._pipeline = None
        self._project_id = None
        self.discriminator = None
        if agent_job is not None:
            self.agent_job = agent_job
        if app_instance is not None:
            self.app_instance = app_instance
        if batch_job is not None:
            self.batch_job = batch_job
        if deployment is not None:
            self.deployment = deployment
        if multi_machine_job is not None:
            self.multi_machine_job = multi_machine_job
        if pipeline is not None:
            self.pipeline = pipeline
        if project_id is not None:
            self.project_id = project_id

    @property
    def agent_job(self) -> 'V1AgentJob':
        """Gets the agent_job of this V1JobResource.  # noqa: E501


        :return: The agent_job of this V1JobResource.  # noqa: E501
        :rtype: V1AgentJob
        """
        return self._agent_job

    @agent_job.setter
    def agent_job(self, agent_job: 'V1AgentJob'):
        """Sets the agent_job of this V1JobResource.


        :param agent_job: The agent_job of this V1JobResource.  # noqa: E501
        :type: V1AgentJob
        """

        self._agent_job = agent_job

    @property
    def app_instance(self) -> 'Externalv1LightningappInstance':
        """Gets the app_instance of this V1JobResource.  # noqa: E501


        :return: The app_instance of this V1JobResource.  # noqa: E501
        :rtype: Externalv1LightningappInstance
        """
        return self._app_instance

    @app_instance.setter
    def app_instance(self, app_instance: 'Externalv1LightningappInstance'):
        """Sets the app_instance of this V1JobResource.


        :param app_instance: The app_instance of this V1JobResource.  # noqa: E501
        :type: Externalv1LightningappInstance
        """

        self._app_instance = app_instance

    @property
    def batch_job(self) -> 'V1Job':
        """Gets the batch_job of this V1JobResource.  # noqa: E501


        :return: The batch_job of this V1JobResource.  # noqa: E501
        :rtype: V1Job
        """
        return self._batch_job

    @batch_job.setter
    def batch_job(self, batch_job: 'V1Job'):
        """Sets the batch_job of this V1JobResource.


        :param batch_job: The batch_job of this V1JobResource.  # noqa: E501
        :type: V1Job
        """

        self._batch_job = batch_job

    @property
    def deployment(self) -> 'V1Deployment':
        """Gets the deployment of this V1JobResource.  # noqa: E501


        :return: The deployment of this V1JobResource.  # noqa: E501
        :rtype: V1Deployment
        """
        return self._deployment

    @deployment.setter
    def deployment(self, deployment: 'V1Deployment'):
        """Sets the deployment of this V1JobResource.


        :param deployment: The deployment of this V1JobResource.  # noqa: E501
        :type: V1Deployment
        """

        self._deployment = deployment

    @property
    def multi_machine_job(self) -> 'V1MultiMachineJob':
        """Gets the multi_machine_job of this V1JobResource.  # noqa: E501


        :return: The multi_machine_job of this V1JobResource.  # noqa: E501
        :rtype: V1MultiMachineJob
        """
        return self._multi_machine_job

    @multi_machine_job.setter
    def multi_machine_job(self, multi_machine_job: 'V1MultiMachineJob'):
        """Sets the multi_machine_job of this V1JobResource.


        :param multi_machine_job: The multi_machine_job of this V1JobResource.  # noqa: E501
        :type: V1MultiMachineJob
        """

        self._multi_machine_job = multi_machine_job

    @property
    def pipeline(self) -> 'V1Pipeline':
        """Gets the pipeline of this V1JobResource.  # noqa: E501


        :return: The pipeline of this V1JobResource.  # noqa: E501
        :rtype: V1Pipeline
        """
        return self._pipeline

    @pipeline.setter
    def pipeline(self, pipeline: 'V1Pipeline'):
        """Sets the pipeline of this V1JobResource.


        :param pipeline: The pipeline of this V1JobResource.  # noqa: E501
        :type: V1Pipeline
        """

        self._pipeline = pipeline

    @property
    def project_id(self) -> 'str':
        """Gets the project_id of this V1JobResource.  # noqa: E501


        :return: The project_id of this V1JobResource.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: 'str'):
        """Sets the project_id of this V1JobResource.


        :param project_id: The project_id of this V1JobResource.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1JobResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1JobResource') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1JobResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1JobResource') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
