# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1InstanceOverprovisioningSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instance_type': 'str',
        'is_spot': 'bool',
        'machine_image_version': 'str',
        'maximum_count': 'int',
        'minimum_count': 'int',
        'region': 'str',
        'volume_size': 'int'
    }

    attribute_map = {
        'instance_type': 'instanceType',
        'is_spot': 'isSpot',
        'machine_image_version': 'machineImageVersion',
        'maximum_count': 'maximumCount',
        'minimum_count': 'minimumCount',
        'region': 'region',
        'volume_size': 'volumeSize'
    }

    def __init__(self, instance_type: 'str' =None, is_spot: 'bool' =None, machine_image_version: 'str' =None, maximum_count: 'int' =None, minimum_count: 'int' =None, region: 'str' =None, volume_size: 'int' =None):  # noqa: E501
        """V1InstanceOverprovisioningSpec - a model defined in Swagger"""  # noqa: E501
        self._instance_type = None
        self._is_spot = None
        self._machine_image_version = None
        self._maximum_count = None
        self._minimum_count = None
        self._region = None
        self._volume_size = None
        self.discriminator = None
        if instance_type is not None:
            self.instance_type = instance_type
        if is_spot is not None:
            self.is_spot = is_spot
        if machine_image_version is not None:
            self.machine_image_version = machine_image_version
        if maximum_count is not None:
            self.maximum_count = maximum_count
        if minimum_count is not None:
            self.minimum_count = minimum_count
        if region is not None:
            self.region = region
        if volume_size is not None:
            self.volume_size = volume_size

    @property
    def instance_type(self) -> 'str':
        """Gets the instance_type of this V1InstanceOverprovisioningSpec.  # noqa: E501


        :return: The instance_type of this V1InstanceOverprovisioningSpec.  # noqa: E501
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type: 'str'):
        """Sets the instance_type of this V1InstanceOverprovisioningSpec.


        :param instance_type: The instance_type of this V1InstanceOverprovisioningSpec.  # noqa: E501
        :type: str
        """

        self._instance_type = instance_type

    @property
    def is_spot(self) -> 'bool':
        """Gets the is_spot of this V1InstanceOverprovisioningSpec.  # noqa: E501


        :return: The is_spot of this V1InstanceOverprovisioningSpec.  # noqa: E501
        :rtype: bool
        """
        return self._is_spot

    @is_spot.setter
    def is_spot(self, is_spot: 'bool'):
        """Sets the is_spot of this V1InstanceOverprovisioningSpec.


        :param is_spot: The is_spot of this V1InstanceOverprovisioningSpec.  # noqa: E501
        :type: bool
        """

        self._is_spot = is_spot

    @property
    def machine_image_version(self) -> 'str':
        """Gets the machine_image_version of this V1InstanceOverprovisioningSpec.  # noqa: E501

        Version of the images, Ubuntu 20.04, etc.  # noqa: E501

        :return: The machine_image_version of this V1InstanceOverprovisioningSpec.  # noqa: E501
        :rtype: str
        """
        return self._machine_image_version

    @machine_image_version.setter
    def machine_image_version(self, machine_image_version: 'str'):
        """Sets the machine_image_version of this V1InstanceOverprovisioningSpec.

        Version of the images, Ubuntu 20.04, etc.  # noqa: E501

        :param machine_image_version: The machine_image_version of this V1InstanceOverprovisioningSpec.  # noqa: E501
        :type: str
        """

        self._machine_image_version = machine_image_version

    @property
    def maximum_count(self) -> 'int':
        """Gets the maximum_count of this V1InstanceOverprovisioningSpec.  # noqa: E501


        :return: The maximum_count of this V1InstanceOverprovisioningSpec.  # noqa: E501
        :rtype: int
        """
        return self._maximum_count

    @maximum_count.setter
    def maximum_count(self, maximum_count: 'int'):
        """Sets the maximum_count of this V1InstanceOverprovisioningSpec.


        :param maximum_count: The maximum_count of this V1InstanceOverprovisioningSpec.  # noqa: E501
        :type: int
        """

        self._maximum_count = maximum_count

    @property
    def minimum_count(self) -> 'int':
        """Gets the minimum_count of this V1InstanceOverprovisioningSpec.  # noqa: E501


        :return: The minimum_count of this V1InstanceOverprovisioningSpec.  # noqa: E501
        :rtype: int
        """
        return self._minimum_count

    @minimum_count.setter
    def minimum_count(self, minimum_count: 'int'):
        """Sets the minimum_count of this V1InstanceOverprovisioningSpec.


        :param minimum_count: The minimum_count of this V1InstanceOverprovisioningSpec.  # noqa: E501
        :type: int
        """

        self._minimum_count = minimum_count

    @property
    def region(self) -> 'str':
        """Gets the region of this V1InstanceOverprovisioningSpec.  # noqa: E501


        :return: The region of this V1InstanceOverprovisioningSpec.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region: 'str'):
        """Sets the region of this V1InstanceOverprovisioningSpec.


        :param region: The region of this V1InstanceOverprovisioningSpec.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def volume_size(self) -> 'int':
        """Gets the volume_size of this V1InstanceOverprovisioningSpec.  # noqa: E501


        :return: The volume_size of this V1InstanceOverprovisioningSpec.  # noqa: E501
        :rtype: int
        """
        return self._volume_size

    @volume_size.setter
    def volume_size(self, volume_size: 'int'):
        """Sets the volume_size of this V1InstanceOverprovisioningSpec.


        :param volume_size: The volume_size of this V1InstanceOverprovisioningSpec.  # noqa: E501
        :type: int
        """

        self._volume_size = volume_size

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1InstanceOverprovisioningSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1InstanceOverprovisioningSpec') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1InstanceOverprovisioningSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1InstanceOverprovisioningSpec') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
