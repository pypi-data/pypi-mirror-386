# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1TransferUserBalanceRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'org_dst_id': 'str',
        'project_dst_id': 'str',
        'project_src_id': 'str',
        'user_dst': 'bool',
        'user_src': 'bool'
    }

    attribute_map = {
        'amount': 'amount',
        'org_dst_id': 'orgDstId',
        'project_dst_id': 'projectDstId',
        'project_src_id': 'projectSrcId',
        'user_dst': 'userDst',
        'user_src': 'userSrc'
    }

    def __init__(self, amount: 'float' =None, org_dst_id: 'str' =None, project_dst_id: 'str' =None, project_src_id: 'str' =None, user_dst: 'bool' =None, user_src: 'bool' =None):  # noqa: E501
        """V1TransferUserBalanceRequest - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._org_dst_id = None
        self._project_dst_id = None
        self._project_src_id = None
        self._user_dst = None
        self._user_src = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if org_dst_id is not None:
            self.org_dst_id = org_dst_id
        if project_dst_id is not None:
            self.project_dst_id = project_dst_id
        if project_src_id is not None:
            self.project_src_id = project_src_id
        if user_dst is not None:
            self.user_dst = user_dst
        if user_src is not None:
            self.user_src = user_src

    @property
    def amount(self) -> 'float':
        """Gets the amount of this V1TransferUserBalanceRequest.  # noqa: E501


        :return: The amount of this V1TransferUserBalanceRequest.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount: 'float'):
        """Sets the amount of this V1TransferUserBalanceRequest.


        :param amount: The amount of this V1TransferUserBalanceRequest.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def org_dst_id(self) -> 'str':
        """Gets the org_dst_id of this V1TransferUserBalanceRequest.  # noqa: E501


        :return: The org_dst_id of this V1TransferUserBalanceRequest.  # noqa: E501
        :rtype: str
        """
        return self._org_dst_id

    @org_dst_id.setter
    def org_dst_id(self, org_dst_id: 'str'):
        """Sets the org_dst_id of this V1TransferUserBalanceRequest.


        :param org_dst_id: The org_dst_id of this V1TransferUserBalanceRequest.  # noqa: E501
        :type: str
        """

        self._org_dst_id = org_dst_id

    @property
    def project_dst_id(self) -> 'str':
        """Gets the project_dst_id of this V1TransferUserBalanceRequest.  # noqa: E501


        :return: The project_dst_id of this V1TransferUserBalanceRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_dst_id

    @project_dst_id.setter
    def project_dst_id(self, project_dst_id: 'str'):
        """Sets the project_dst_id of this V1TransferUserBalanceRequest.


        :param project_dst_id: The project_dst_id of this V1TransferUserBalanceRequest.  # noqa: E501
        :type: str
        """

        self._project_dst_id = project_dst_id

    @property
    def project_src_id(self) -> 'str':
        """Gets the project_src_id of this V1TransferUserBalanceRequest.  # noqa: E501


        :return: The project_src_id of this V1TransferUserBalanceRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_src_id

    @project_src_id.setter
    def project_src_id(self, project_src_id: 'str'):
        """Sets the project_src_id of this V1TransferUserBalanceRequest.


        :param project_src_id: The project_src_id of this V1TransferUserBalanceRequest.  # noqa: E501
        :type: str
        """

        self._project_src_id = project_src_id

    @property
    def user_dst(self) -> 'bool':
        """Gets the user_dst of this V1TransferUserBalanceRequest.  # noqa: E501


        :return: The user_dst of this V1TransferUserBalanceRequest.  # noqa: E501
        :rtype: bool
        """
        return self._user_dst

    @user_dst.setter
    def user_dst(self, user_dst: 'bool'):
        """Sets the user_dst of this V1TransferUserBalanceRequest.


        :param user_dst: The user_dst of this V1TransferUserBalanceRequest.  # noqa: E501
        :type: bool
        """

        self._user_dst = user_dst

    @property
    def user_src(self) -> 'bool':
        """Gets the user_src of this V1TransferUserBalanceRequest.  # noqa: E501


        :return: The user_src of this V1TransferUserBalanceRequest.  # noqa: E501
        :rtype: bool
        """
        return self._user_src

    @user_src.setter
    def user_src(self, user_src: 'bool'):
        """Sets the user_src of this V1TransferUserBalanceRequest.


        :param user_src: The user_src of this V1TransferUserBalanceRequest.  # noqa: E501
        :type: bool
        """

        self._user_src = user_src

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1TransferUserBalanceRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1TransferUserBalanceRequest') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1TransferUserBalanceRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1TransferUserBalanceRequest') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
