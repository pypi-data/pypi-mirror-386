# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1License(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'license_key': 'str',
        'owner_id': 'str',
        'owner_type': 'V1TokenOwnerType',
        'product_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'license_key': 'licenseKey',
        'owner_id': 'ownerId',
        'owner_type': 'ownerType',
        'product_id': 'productId'
    }

    def __init__(self, id: 'str' =None, license_key: 'str' =None, owner_id: 'str' =None, owner_type: 'V1TokenOwnerType' =None, product_id: 'str' =None):  # noqa: E501
        """V1License - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._license_key = None
        self._owner_id = None
        self._owner_type = None
        self._product_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if license_key is not None:
            self.license_key = license_key
        if owner_id is not None:
            self.owner_id = owner_id
        if owner_type is not None:
            self.owner_type = owner_type
        if product_id is not None:
            self.product_id = product_id

    @property
    def id(self) -> 'str':
        """Gets the id of this V1License.  # noqa: E501


        :return: The id of this V1License.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1License.


        :param id: The id of this V1License.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def license_key(self) -> 'str':
        """Gets the license_key of this V1License.  # noqa: E501


        :return: The license_key of this V1License.  # noqa: E501
        :rtype: str
        """
        return self._license_key

    @license_key.setter
    def license_key(self, license_key: 'str'):
        """Sets the license_key of this V1License.


        :param license_key: The license_key of this V1License.  # noqa: E501
        :type: str
        """

        self._license_key = license_key

    @property
    def owner_id(self) -> 'str':
        """Gets the owner_id of this V1License.  # noqa: E501


        :return: The owner_id of this V1License.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id: 'str'):
        """Sets the owner_id of this V1License.


        :param owner_id: The owner_id of this V1License.  # noqa: E501
        :type: str
        """

        self._owner_id = owner_id

    @property
    def owner_type(self) -> 'V1TokenOwnerType':
        """Gets the owner_type of this V1License.  # noqa: E501


        :return: The owner_type of this V1License.  # noqa: E501
        :rtype: V1TokenOwnerType
        """
        return self._owner_type

    @owner_type.setter
    def owner_type(self, owner_type: 'V1TokenOwnerType'):
        """Sets the owner_type of this V1License.


        :param owner_type: The owner_type of this V1License.  # noqa: E501
        :type: V1TokenOwnerType
        """

        self._owner_type = owner_type

    @property
    def product_id(self) -> 'str':
        """Gets the product_id of this V1License.  # noqa: E501


        :return: The product_id of this V1License.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id: 'str'):
        """Sets the product_id of this V1License.


        :param product_id: The product_id of this V1License.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1License, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1License') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1License):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1License') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
