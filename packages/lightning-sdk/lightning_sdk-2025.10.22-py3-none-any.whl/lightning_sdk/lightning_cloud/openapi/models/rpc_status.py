# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class RpcStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'int',
        'details': 'list[ProtobufAny]',
        'message': 'str'
    }

    attribute_map = {
        'code': 'code',
        'details': 'details',
        'message': 'message'
    }

    def __init__(self, code: 'int' =None, details: 'list[ProtobufAny]' =None, message: 'str' =None):  # noqa: E501
        """RpcStatus - a model defined in Swagger"""  # noqa: E501
        self._code = None
        self._details = None
        self._message = None
        self.discriminator = None
        if code is not None:
            self.code = code
        if details is not None:
            self.details = details
        if message is not None:
            self.message = message

    @property
    def code(self) -> 'int':
        """Gets the code of this RpcStatus.  # noqa: E501

        The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].  # noqa: E501

        :return: The code of this RpcStatus.  # noqa: E501
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code: 'int'):
        """Sets the code of this RpcStatus.

        The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].  # noqa: E501

        :param code: The code of this RpcStatus.  # noqa: E501
        :type: int
        """

        self._code = code

    @property
    def details(self) -> 'list[ProtobufAny]':
        """Gets the details of this RpcStatus.  # noqa: E501

        A list of messages that carry the error details.  There is a common set of message types for APIs to use.  # noqa: E501

        :return: The details of this RpcStatus.  # noqa: E501
        :rtype: list[ProtobufAny]
        """
        return self._details

    @details.setter
    def details(self, details: 'list[ProtobufAny]'):
        """Sets the details of this RpcStatus.

        A list of messages that carry the error details.  There is a common set of message types for APIs to use.  # noqa: E501

        :param details: The details of this RpcStatus.  # noqa: E501
        :type: list[ProtobufAny]
        """

        self._details = details

    @property
    def message(self) -> 'str':
        """Gets the message of this RpcStatus.  # noqa: E501

        A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.  # noqa: E501

        :return: The message of this RpcStatus.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: 'str'):
        """Sets the message of this RpcStatus.

        A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.  # noqa: E501

        :param message: The message of this RpcStatus.  # noqa: E501
        :type: str
        """

        self._message = message

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RpcStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'RpcStatus') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, RpcStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'RpcStatus') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
