# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1EndpointPrewarm(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expected_body_contains': 'str',
        'expected_status_codes': 'list[str]',
        'headers': 'dict(str, str)',
        'method': 'str',
        'path': 'str',
        'payload': 'str'
    }

    attribute_map = {
        'expected_body_contains': 'expectedBodyContains',
        'expected_status_codes': 'expectedStatusCodes',
        'headers': 'headers',
        'method': 'method',
        'path': 'path',
        'payload': 'payload'
    }

    def __init__(self, expected_body_contains: 'str' =None, expected_status_codes: 'list[str]' =None, headers: 'dict(str, str)' =None, method: 'str' =None, path: 'str' =None, payload: 'str' =None):  # noqa: E501
        """V1EndpointPrewarm - a model defined in Swagger"""  # noqa: E501
        self._expected_body_contains = None
        self._expected_status_codes = None
        self._headers = None
        self._method = None
        self._path = None
        self._payload = None
        self.discriminator = None
        if expected_body_contains is not None:
            self.expected_body_contains = expected_body_contains
        if expected_status_codes is not None:
            self.expected_status_codes = expected_status_codes
        if headers is not None:
            self.headers = headers
        if method is not None:
            self.method = method
        if path is not None:
            self.path = path
        if payload is not None:
            self.payload = payload

    @property
    def expected_body_contains(self) -> 'str':
        """Gets the expected_body_contains of this V1EndpointPrewarm.  # noqa: E501


        :return: The expected_body_contains of this V1EndpointPrewarm.  # noqa: E501
        :rtype: str
        """
        return self._expected_body_contains

    @expected_body_contains.setter
    def expected_body_contains(self, expected_body_contains: 'str'):
        """Sets the expected_body_contains of this V1EndpointPrewarm.


        :param expected_body_contains: The expected_body_contains of this V1EndpointPrewarm.  # noqa: E501
        :type: str
        """

        self._expected_body_contains = expected_body_contains

    @property
    def expected_status_codes(self) -> 'list[str]':
        """Gets the expected_status_codes of this V1EndpointPrewarm.  # noqa: E501


        :return: The expected_status_codes of this V1EndpointPrewarm.  # noqa: E501
        :rtype: list[str]
        """
        return self._expected_status_codes

    @expected_status_codes.setter
    def expected_status_codes(self, expected_status_codes: 'list[str]'):
        """Sets the expected_status_codes of this V1EndpointPrewarm.


        :param expected_status_codes: The expected_status_codes of this V1EndpointPrewarm.  # noqa: E501
        :type: list[str]
        """

        self._expected_status_codes = expected_status_codes

    @property
    def headers(self) -> 'dict(str, str)':
        """Gets the headers of this V1EndpointPrewarm.  # noqa: E501


        :return: The headers of this V1EndpointPrewarm.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._headers

    @headers.setter
    def headers(self, headers: 'dict(str, str)'):
        """Sets the headers of this V1EndpointPrewarm.


        :param headers: The headers of this V1EndpointPrewarm.  # noqa: E501
        :type: dict(str, str)
        """

        self._headers = headers

    @property
    def method(self) -> 'str':
        """Gets the method of this V1EndpointPrewarm.  # noqa: E501


        :return: The method of this V1EndpointPrewarm.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method: 'str'):
        """Sets the method of this V1EndpointPrewarm.


        :param method: The method of this V1EndpointPrewarm.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def path(self) -> 'str':
        """Gets the path of this V1EndpointPrewarm.  # noqa: E501


        :return: The path of this V1EndpointPrewarm.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: 'str'):
        """Sets the path of this V1EndpointPrewarm.


        :param path: The path of this V1EndpointPrewarm.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def payload(self) -> 'str':
        """Gets the payload of this V1EndpointPrewarm.  # noqa: E501


        :return: The payload of this V1EndpointPrewarm.  # noqa: E501
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload: 'str'):
        """Sets the payload of this V1EndpointPrewarm.


        :param payload: The payload of this V1EndpointPrewarm.  # noqa: E501
        :type: str
        """

        self._payload = payload

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1EndpointPrewarm, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1EndpointPrewarm') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1EndpointPrewarm):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1EndpointPrewarm') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
