# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1AssistantKnowledgeItemStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message': 'str',
        'path': 'str',
        'project_id': 'str',
        'project_name': 'str',
        'status': 'str',
        'url': 'str'
    }

    attribute_map = {
        'message': 'message',
        'path': 'path',
        'project_id': 'projectId',
        'project_name': 'projectName',
        'status': 'status',
        'url': 'url'
    }

    def __init__(self, message: 'str' =None, path: 'str' =None, project_id: 'str' =None, project_name: 'str' =None, status: 'str' =None, url: 'str' =None):  # noqa: E501
        """V1AssistantKnowledgeItemStatus - a model defined in Swagger"""  # noqa: E501
        self._message = None
        self._path = None
        self._project_id = None
        self._project_name = None
        self._status = None
        self._url = None
        self.discriminator = None
        if message is not None:
            self.message = message
        if path is not None:
            self.path = path
        if project_id is not None:
            self.project_id = project_id
        if project_name is not None:
            self.project_name = project_name
        if status is not None:
            self.status = status
        if url is not None:
            self.url = url

    @property
    def message(self) -> 'str':
        """Gets the message of this V1AssistantKnowledgeItemStatus.  # noqa: E501


        :return: The message of this V1AssistantKnowledgeItemStatus.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: 'str'):
        """Sets the message of this V1AssistantKnowledgeItemStatus.


        :param message: The message of this V1AssistantKnowledgeItemStatus.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def path(self) -> 'str':
        """Gets the path of this V1AssistantKnowledgeItemStatus.  # noqa: E501


        :return: The path of this V1AssistantKnowledgeItemStatus.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: 'str'):
        """Sets the path of this V1AssistantKnowledgeItemStatus.


        :param path: The path of this V1AssistantKnowledgeItemStatus.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def project_id(self) -> 'str':
        """Gets the project_id of this V1AssistantKnowledgeItemStatus.  # noqa: E501


        :return: The project_id of this V1AssistantKnowledgeItemStatus.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: 'str'):
        """Sets the project_id of this V1AssistantKnowledgeItemStatus.


        :param project_id: The project_id of this V1AssistantKnowledgeItemStatus.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def project_name(self) -> 'str':
        """Gets the project_name of this V1AssistantKnowledgeItemStatus.  # noqa: E501


        :return: The project_name of this V1AssistantKnowledgeItemStatus.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name: 'str'):
        """Sets the project_name of this V1AssistantKnowledgeItemStatus.


        :param project_name: The project_name of this V1AssistantKnowledgeItemStatus.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def status(self) -> 'str':
        """Gets the status of this V1AssistantKnowledgeItemStatus.  # noqa: E501


        :return: The status of this V1AssistantKnowledgeItemStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: 'str'):
        """Sets the status of this V1AssistantKnowledgeItemStatus.


        :param status: The status of this V1AssistantKnowledgeItemStatus.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def url(self) -> 'str':
        """Gets the url of this V1AssistantKnowledgeItemStatus.  # noqa: E501


        :return: The url of this V1AssistantKnowledgeItemStatus.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: 'str'):
        """Sets the url of this V1AssistantKnowledgeItemStatus.


        :param url: The url of this V1AssistantKnowledgeItemStatus.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1AssistantKnowledgeItemStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1AssistantKnowledgeItemStatus') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1AssistantKnowledgeItemStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1AssistantKnowledgeItemStatus') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
