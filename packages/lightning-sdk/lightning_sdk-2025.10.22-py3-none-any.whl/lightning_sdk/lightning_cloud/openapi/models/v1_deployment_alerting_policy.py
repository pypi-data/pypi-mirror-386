# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1DeploymentAlertingPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deployment_id': 'str',
        'description': 'str',
        'frequency': 'V1DeploymentAlertingPolicyFrequency',
        'id': 'str',
        'limit': 'float',
        'name': 'str',
        'operation': 'V1DeploymentAlertingPolicyOperation',
        'project_id': 'str',
        'recipients': 'V1DeploymentAlertingRecipients',
        'severity': 'V1DeploymentAlertingPolicySeverity',
        'type': 'V1DeploymentAlertingPolicyType',
        'value': 'float'
    }

    attribute_map = {
        'deployment_id': 'deploymentId',
        'description': 'description',
        'frequency': 'frequency',
        'id': 'id',
        'limit': 'limit',
        'name': 'name',
        'operation': 'operation',
        'project_id': 'projectId',
        'recipients': 'recipients',
        'severity': 'severity',
        'type': 'type',
        'value': 'value'
    }

    def __init__(self, deployment_id: 'str' =None, description: 'str' =None, frequency: 'V1DeploymentAlertingPolicyFrequency' =None, id: 'str' =None, limit: 'float' =None, name: 'str' =None, operation: 'V1DeploymentAlertingPolicyOperation' =None, project_id: 'str' =None, recipients: 'V1DeploymentAlertingRecipients' =None, severity: 'V1DeploymentAlertingPolicySeverity' =None, type: 'V1DeploymentAlertingPolicyType' =None, value: 'float' =None):  # noqa: E501
        """V1DeploymentAlertingPolicy - a model defined in Swagger"""  # noqa: E501
        self._deployment_id = None
        self._description = None
        self._frequency = None
        self._id = None
        self._limit = None
        self._name = None
        self._operation = None
        self._project_id = None
        self._recipients = None
        self._severity = None
        self._type = None
        self._value = None
        self.discriminator = None
        if deployment_id is not None:
            self.deployment_id = deployment_id
        if description is not None:
            self.description = description
        if frequency is not None:
            self.frequency = frequency
        if id is not None:
            self.id = id
        if limit is not None:
            self.limit = limit
        if name is not None:
            self.name = name
        if operation is not None:
            self.operation = operation
        if project_id is not None:
            self.project_id = project_id
        if recipients is not None:
            self.recipients = recipients
        if severity is not None:
            self.severity = severity
        if type is not None:
            self.type = type
        if value is not None:
            self.value = value

    @property
    def deployment_id(self) -> 'str':
        """Gets the deployment_id of this V1DeploymentAlertingPolicy.  # noqa: E501


        :return: The deployment_id of this V1DeploymentAlertingPolicy.  # noqa: E501
        :rtype: str
        """
        return self._deployment_id

    @deployment_id.setter
    def deployment_id(self, deployment_id: 'str'):
        """Sets the deployment_id of this V1DeploymentAlertingPolicy.


        :param deployment_id: The deployment_id of this V1DeploymentAlertingPolicy.  # noqa: E501
        :type: str
        """

        self._deployment_id = deployment_id

    @property
    def description(self) -> 'str':
        """Gets the description of this V1DeploymentAlertingPolicy.  # noqa: E501


        :return: The description of this V1DeploymentAlertingPolicy.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: 'str'):
        """Sets the description of this V1DeploymentAlertingPolicy.


        :param description: The description of this V1DeploymentAlertingPolicy.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def frequency(self) -> 'V1DeploymentAlertingPolicyFrequency':
        """Gets the frequency of this V1DeploymentAlertingPolicy.  # noqa: E501


        :return: The frequency of this V1DeploymentAlertingPolicy.  # noqa: E501
        :rtype: V1DeploymentAlertingPolicyFrequency
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency: 'V1DeploymentAlertingPolicyFrequency'):
        """Sets the frequency of this V1DeploymentAlertingPolicy.


        :param frequency: The frequency of this V1DeploymentAlertingPolicy.  # noqa: E501
        :type: V1DeploymentAlertingPolicyFrequency
        """

        self._frequency = frequency

    @property
    def id(self) -> 'str':
        """Gets the id of this V1DeploymentAlertingPolicy.  # noqa: E501


        :return: The id of this V1DeploymentAlertingPolicy.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1DeploymentAlertingPolicy.


        :param id: The id of this V1DeploymentAlertingPolicy.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def limit(self) -> 'float':
        """Gets the limit of this V1DeploymentAlertingPolicy.  # noqa: E501


        :return: The limit of this V1DeploymentAlertingPolicy.  # noqa: E501
        :rtype: float
        """
        return self._limit

    @limit.setter
    def limit(self, limit: 'float'):
        """Sets the limit of this V1DeploymentAlertingPolicy.


        :param limit: The limit of this V1DeploymentAlertingPolicy.  # noqa: E501
        :type: float
        """

        self._limit = limit

    @property
    def name(self) -> 'str':
        """Gets the name of this V1DeploymentAlertingPolicy.  # noqa: E501


        :return: The name of this V1DeploymentAlertingPolicy.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1DeploymentAlertingPolicy.


        :param name: The name of this V1DeploymentAlertingPolicy.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def operation(self) -> 'V1DeploymentAlertingPolicyOperation':
        """Gets the operation of this V1DeploymentAlertingPolicy.  # noqa: E501


        :return: The operation of this V1DeploymentAlertingPolicy.  # noqa: E501
        :rtype: V1DeploymentAlertingPolicyOperation
        """
        return self._operation

    @operation.setter
    def operation(self, operation: 'V1DeploymentAlertingPolicyOperation'):
        """Sets the operation of this V1DeploymentAlertingPolicy.


        :param operation: The operation of this V1DeploymentAlertingPolicy.  # noqa: E501
        :type: V1DeploymentAlertingPolicyOperation
        """

        self._operation = operation

    @property
    def project_id(self) -> 'str':
        """Gets the project_id of this V1DeploymentAlertingPolicy.  # noqa: E501


        :return: The project_id of this V1DeploymentAlertingPolicy.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: 'str'):
        """Sets the project_id of this V1DeploymentAlertingPolicy.


        :param project_id: The project_id of this V1DeploymentAlertingPolicy.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def recipients(self) -> 'V1DeploymentAlertingRecipients':
        """Gets the recipients of this V1DeploymentAlertingPolicy.  # noqa: E501


        :return: The recipients of this V1DeploymentAlertingPolicy.  # noqa: E501
        :rtype: V1DeploymentAlertingRecipients
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients: 'V1DeploymentAlertingRecipients'):
        """Sets the recipients of this V1DeploymentAlertingPolicy.


        :param recipients: The recipients of this V1DeploymentAlertingPolicy.  # noqa: E501
        :type: V1DeploymentAlertingRecipients
        """

        self._recipients = recipients

    @property
    def severity(self) -> 'V1DeploymentAlertingPolicySeverity':
        """Gets the severity of this V1DeploymentAlertingPolicy.  # noqa: E501


        :return: The severity of this V1DeploymentAlertingPolicy.  # noqa: E501
        :rtype: V1DeploymentAlertingPolicySeverity
        """
        return self._severity

    @severity.setter
    def severity(self, severity: 'V1DeploymentAlertingPolicySeverity'):
        """Sets the severity of this V1DeploymentAlertingPolicy.


        :param severity: The severity of this V1DeploymentAlertingPolicy.  # noqa: E501
        :type: V1DeploymentAlertingPolicySeverity
        """

        self._severity = severity

    @property
    def type(self) -> 'V1DeploymentAlertingPolicyType':
        """Gets the type of this V1DeploymentAlertingPolicy.  # noqa: E501


        :return: The type of this V1DeploymentAlertingPolicy.  # noqa: E501
        :rtype: V1DeploymentAlertingPolicyType
        """
        return self._type

    @type.setter
    def type(self, type: 'V1DeploymentAlertingPolicyType'):
        """Sets the type of this V1DeploymentAlertingPolicy.


        :param type: The type of this V1DeploymentAlertingPolicy.  # noqa: E501
        :type: V1DeploymentAlertingPolicyType
        """

        self._type = type

    @property
    def value(self) -> 'float':
        """Gets the value of this V1DeploymentAlertingPolicy.  # noqa: E501


        :return: The value of this V1DeploymentAlertingPolicy.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value: 'float'):
        """Sets the value of this V1DeploymentAlertingPolicy.


        :param value: The value of this V1DeploymentAlertingPolicy.  # noqa: E501
        :type: float
        """

        self._value = value

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1DeploymentAlertingPolicy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1DeploymentAlertingPolicy') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1DeploymentAlertingPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1DeploymentAlertingPolicy') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
