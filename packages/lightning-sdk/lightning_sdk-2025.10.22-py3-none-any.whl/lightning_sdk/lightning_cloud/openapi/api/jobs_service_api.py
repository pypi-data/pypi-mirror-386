# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

from __future__ import absolute_import

import re  # noqa: F401
from typing import TYPE_CHECKING, Any

# python 2 and python 3 compatibility library
import six

from lightning_sdk.lightning_cloud.openapi.api_client import ApiClient

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class JobsServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def jobs_service_add_job_timing(self, project_id: 'str', id: 'str', **kwargs) -> 'V1AddJobTimingResponse':  # noqa: E501
        """jobs_service_add_job_timing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_add_job_timing(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :return: V1AddJobTimingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_add_job_timing_with_http_info(project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_add_job_timing_with_http_info(project_id, id, **kwargs)  # noqa: E501
            return data

    def jobs_service_add_job_timing_with_http_info(self, project_id: 'str', id: 'str', **kwargs) -> 'V1AddJobTimingResponse':  # noqa: E501
        """jobs_service_add_job_timing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_add_job_timing_with_http_info(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :return: V1AddJobTimingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_add_job_timing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_add_job_timing`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_service_add_job_timing`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/jobs/{id}/timings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1AddJobTimingResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_create_deployment(self, body: 'CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs', project_id: 'str', **kwargs) -> 'V1Deployment':  # noqa: E501
        """jobs_service_create_deployment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_create_deployment(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs body: (required)
        :param str project_id: (required)
        :return: V1Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_create_deployment_with_http_info(body, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_create_deployment_with_http_info(body, project_id, **kwargs)  # noqa: E501
            return data

    def jobs_service_create_deployment_with_http_info(self, body: 'CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs', project_id: 'str', **kwargs) -> 'V1Deployment':  # noqa: E501
        """jobs_service_create_deployment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_create_deployment_with_http_info(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateDeploymentRequestDefinesASpecForTheJobThatAllowsForAutoscalingJobs body: (required)
        :param str project_id: (required)
        :return: V1Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_create_deployment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `jobs_service_create_deployment`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_create_deployment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/deployments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1Deployment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_create_deployment_alerting_policy(self, body: 'DeploymentIdAlertingpoliciesBody1', project_id: 'str', deployment_id: 'str', **kwargs) -> 'V1DeploymentAlertingPolicy':  # noqa: E501
        """CreateDeploymentAlertingPolicy creates a policy to monitor potential issues with deployment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_create_deployment_alerting_policy(body, project_id, deployment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeploymentIdAlertingpoliciesBody1 body: (required)
        :param str project_id: (required)
        :param str deployment_id: (required)
        :return: V1DeploymentAlertingPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_create_deployment_alerting_policy_with_http_info(body, project_id, deployment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_create_deployment_alerting_policy_with_http_info(body, project_id, deployment_id, **kwargs)  # noqa: E501
            return data

    def jobs_service_create_deployment_alerting_policy_with_http_info(self, body: 'DeploymentIdAlertingpoliciesBody1', project_id: 'str', deployment_id: 'str', **kwargs) -> 'V1DeploymentAlertingPolicy':  # noqa: E501
        """CreateDeploymentAlertingPolicy creates a policy to monitor potential issues with deployment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_create_deployment_alerting_policy_with_http_info(body, project_id, deployment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeploymentIdAlertingpoliciesBody1 body: (required)
        :param str project_id: (required)
        :param str deployment_id: (required)
        :return: V1DeploymentAlertingPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'deployment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_create_deployment_alerting_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `jobs_service_create_deployment_alerting_policy`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_create_deployment_alerting_policy`")  # noqa: E501
        # verify the required parameter 'deployment_id' is set
        if ('deployment_id' not in params or
                params['deployment_id'] is None):
            raise ValueError("Missing the required parameter `deployment_id` when calling `jobs_service_create_deployment_alerting_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'deployment_id' in params:
            path_params['deploymentId'] = params['deployment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/deployments/{deploymentId}/alerting-policies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DeploymentAlertingPolicy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_create_job(self, body: 'ProjectIdJobsBody', project_id: 'str', **kwargs) -> 'V1Job':  # noqa: E501
        """jobs_service_create_job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_create_job(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectIdJobsBody body: (required)
        :param str project_id: (required)
        :return: V1Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_create_job_with_http_info(body, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_create_job_with_http_info(body, project_id, **kwargs)  # noqa: E501
            return data

    def jobs_service_create_job_with_http_info(self, body: 'ProjectIdJobsBody', project_id: 'str', **kwargs) -> 'V1Job':  # noqa: E501
        """jobs_service_create_job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_create_job_with_http_info(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectIdJobsBody body: (required)
        :param str project_id: (required)
        :return: V1Job
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_create_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `jobs_service_create_job`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_create_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/jobs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1Job',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_create_multi_machine_job(self, body: 'ProjectIdMultimachinejobsBody', project_id: 'str', **kwargs) -> 'V1MultiMachineJob':  # noqa: E501
        """MultiMachineJob  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_create_multi_machine_job(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectIdMultimachinejobsBody body: (required)
        :param str project_id: (required)
        :return: V1MultiMachineJob
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_create_multi_machine_job_with_http_info(body, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_create_multi_machine_job_with_http_info(body, project_id, **kwargs)  # noqa: E501
            return data

    def jobs_service_create_multi_machine_job_with_http_info(self, body: 'ProjectIdMultimachinejobsBody', project_id: 'str', **kwargs) -> 'V1MultiMachineJob':  # noqa: E501
        """MultiMachineJob  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_create_multi_machine_job_with_http_info(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectIdMultimachinejobsBody body: (required)
        :param str project_id: (required)
        :return: V1MultiMachineJob
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_create_multi_machine_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `jobs_service_create_multi_machine_job`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_create_multi_machine_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/multi-machine-jobs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1MultiMachineJob',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_delete_deployment(self, project_id: 'str', id: 'str', **kwargs) -> 'V1DeleteDeploymentResponse':  # noqa: E501
        """jobs_service_delete_deployment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_delete_deployment(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :param bool delete_templates:
        :return: V1DeleteDeploymentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_delete_deployment_with_http_info(project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_delete_deployment_with_http_info(project_id, id, **kwargs)  # noqa: E501
            return data

    def jobs_service_delete_deployment_with_http_info(self, project_id: 'str', id: 'str', **kwargs) -> 'V1DeleteDeploymentResponse':  # noqa: E501
        """jobs_service_delete_deployment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_delete_deployment_with_http_info(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :param bool delete_templates:
        :return: V1DeleteDeploymentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id', 'delete_templates']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_delete_deployment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_delete_deployment`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_service_delete_deployment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'delete_templates' in params:
            query_params.append(('deleteTemplates', params['delete_templates']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/deployments/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DeleteDeploymentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_delete_deployment_alerting_policy(self, project_id: 'str', deployment_id: 'str', id: 'str', **kwargs) -> 'V1DeleteDeploymentAlertingPolicyResponse':  # noqa: E501
        """jobs_service_delete_deployment_alerting_policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_delete_deployment_alerting_policy(project_id, deployment_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str deployment_id: (required)
        :param str id: (required)
        :return: V1DeleteDeploymentAlertingPolicyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_delete_deployment_alerting_policy_with_http_info(project_id, deployment_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_delete_deployment_alerting_policy_with_http_info(project_id, deployment_id, id, **kwargs)  # noqa: E501
            return data

    def jobs_service_delete_deployment_alerting_policy_with_http_info(self, project_id: 'str', deployment_id: 'str', id: 'str', **kwargs) -> 'V1DeleteDeploymentAlertingPolicyResponse':  # noqa: E501
        """jobs_service_delete_deployment_alerting_policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_delete_deployment_alerting_policy_with_http_info(project_id, deployment_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str deployment_id: (required)
        :param str id: (required)
        :return: V1DeleteDeploymentAlertingPolicyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'deployment_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_delete_deployment_alerting_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_delete_deployment_alerting_policy`")  # noqa: E501
        # verify the required parameter 'deployment_id' is set
        if ('deployment_id' not in params or
                params['deployment_id'] is None):
            raise ValueError("Missing the required parameter `deployment_id` when calling `jobs_service_delete_deployment_alerting_policy`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_service_delete_deployment_alerting_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'deployment_id' in params:
            path_params['deploymentId'] = params['deployment_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/deployments/{deploymentId}/alerting-policies/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DeleteDeploymentAlertingPolicyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_delete_deployment_release(self, project_id: 'str', deployment_id: 'str', id: 'str', **kwargs) -> 'V1DeleteDeploymentReleaseResponse':  # noqa: E501
        """jobs_service_delete_deployment_release  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_delete_deployment_release(project_id, deployment_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str deployment_id: (required)
        :param str id: (required)
        :return: V1DeleteDeploymentReleaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_delete_deployment_release_with_http_info(project_id, deployment_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_delete_deployment_release_with_http_info(project_id, deployment_id, id, **kwargs)  # noqa: E501
            return data

    def jobs_service_delete_deployment_release_with_http_info(self, project_id: 'str', deployment_id: 'str', id: 'str', **kwargs) -> 'V1DeleteDeploymentReleaseResponse':  # noqa: E501
        """jobs_service_delete_deployment_release  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_delete_deployment_release_with_http_info(project_id, deployment_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str deployment_id: (required)
        :param str id: (required)
        :return: V1DeleteDeploymentReleaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'deployment_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_delete_deployment_release" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_delete_deployment_release`")  # noqa: E501
        # verify the required parameter 'deployment_id' is set
        if ('deployment_id' not in params or
                params['deployment_id'] is None):
            raise ValueError("Missing the required parameter `deployment_id` when calling `jobs_service_delete_deployment_release`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_service_delete_deployment_release`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'deployment_id' in params:
            path_params['deploymentId'] = params['deployment_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/deployments/{deploymentId}/releases/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DeleteDeploymentReleaseResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_delete_job(self, project_id: 'str', id: 'str', **kwargs) -> 'V1DeleteJobResponse':  # noqa: E501
        """jobs_service_delete_job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_delete_job(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :param str cloudspace_id:
        :return: V1DeleteJobResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_delete_job_with_http_info(project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_delete_job_with_http_info(project_id, id, **kwargs)  # noqa: E501
            return data

    def jobs_service_delete_job_with_http_info(self, project_id: 'str', id: 'str', **kwargs) -> 'V1DeleteJobResponse':  # noqa: E501
        """jobs_service_delete_job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_delete_job_with_http_info(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :param str cloudspace_id:
        :return: V1DeleteJobResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id', 'cloudspace_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_delete_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_delete_job`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_service_delete_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'cloudspace_id' in params:
            query_params.append(('cloudspaceId', params['cloudspace_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/jobs/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DeleteJobResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_delete_job_index(self, project_id: 'str', id: 'str', **kwargs) -> 'V1DeleteIndexResponse':  # noqa: E501
        """jobs_service_delete_job_index  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_delete_job_index(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :return: V1DeleteIndexResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_delete_job_index_with_http_info(project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_delete_job_index_with_http_info(project_id, id, **kwargs)  # noqa: E501
            return data

    def jobs_service_delete_job_index_with_http_info(self, project_id: 'str', id: 'str', **kwargs) -> 'V1DeleteIndexResponse':  # noqa: E501
        """jobs_service_delete_job_index  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_delete_job_index_with_http_info(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :return: V1DeleteIndexResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_delete_job_index" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_delete_job_index`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_service_delete_job_index`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/jobs/{id}/index', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DeleteIndexResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_delete_multi_machine_job(self, project_id: 'str', id: 'str', **kwargs) -> 'V1DeleteMultiMachineJobResponse':  # noqa: E501
        """jobs_service_delete_multi_machine_job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_delete_multi_machine_job(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :return: V1DeleteMultiMachineJobResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_delete_multi_machine_job_with_http_info(project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_delete_multi_machine_job_with_http_info(project_id, id, **kwargs)  # noqa: E501
            return data

    def jobs_service_delete_multi_machine_job_with_http_info(self, project_id: 'str', id: 'str', **kwargs) -> 'V1DeleteMultiMachineJobResponse':  # noqa: E501
        """jobs_service_delete_multi_machine_job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_delete_multi_machine_job_with_http_info(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :return: V1DeleteMultiMachineJobResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_delete_multi_machine_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_delete_multi_machine_job`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_service_delete_multi_machine_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/multi-machine-jobs/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DeleteMultiMachineJobResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_download_job_logs(self, project_id: 'str', id: 'str', **kwargs) -> 'V1DownloadJobLogsResponse':  # noqa: E501
        """jobs_service_download_job_logs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_download_job_logs(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :param str cloudspace_id:
        :param str deployment_id:
        :return: V1DownloadJobLogsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_download_job_logs_with_http_info(project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_download_job_logs_with_http_info(project_id, id, **kwargs)  # noqa: E501
            return data

    def jobs_service_download_job_logs_with_http_info(self, project_id: 'str', id: 'str', **kwargs) -> 'V1DownloadJobLogsResponse':  # noqa: E501
        """jobs_service_download_job_logs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_download_job_logs_with_http_info(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :param str cloudspace_id:
        :param str deployment_id:
        :return: V1DownloadJobLogsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id', 'cloudspace_id', 'deployment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_download_job_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_download_job_logs`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_service_download_job_logs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'cloudspace_id' in params:
            query_params.append(('cloudspaceId', params['cloudspace_id']))  # noqa: E501
        if 'deployment_id' in params:
            query_params.append(('deploymentId', params['deployment_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/jobs/{id}/download-logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DownloadJobLogsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_find_job(self, project_id: 'str', **kwargs) -> 'V1Job':  # noqa: E501
        """jobs_service_find_job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_find_job(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str name:
        :return: V1Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_find_job_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_find_job_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def jobs_service_find_job_with_http_info(self, project_id: 'str', **kwargs) -> 'V1Job':  # noqa: E501
        """jobs_service_find_job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_find_job_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str name:
        :return: V1Job
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_find_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_find_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/jobs/find', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1Job',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_get_deployment(self, project_id: 'str', id: 'str', **kwargs) -> 'V1Deployment':  # noqa: E501
        """jobs_service_get_deployment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_get_deployment(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :return: V1Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_get_deployment_with_http_info(project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_get_deployment_with_http_info(project_id, id, **kwargs)  # noqa: E501
            return data

    def jobs_service_get_deployment_with_http_info(self, project_id: 'str', id: 'str', **kwargs) -> 'V1Deployment':  # noqa: E501
        """jobs_service_get_deployment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_get_deployment_with_http_info(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :return: V1Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_get_deployment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_get_deployment`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_service_get_deployment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/deployments/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1Deployment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_get_deployment_by_name(self, project_id: 'str', name: 'str', **kwargs) -> 'V1Deployment':  # noqa: E501
        """jobs_service_get_deployment_by_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_get_deployment_by_name(project_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str name: (required)
        :return: V1Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_get_deployment_by_name_with_http_info(project_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_get_deployment_by_name_with_http_info(project_id, name, **kwargs)  # noqa: E501
            return data

    def jobs_service_get_deployment_by_name_with_http_info(self, project_id: 'str', name: 'str', **kwargs) -> 'V1Deployment':  # noqa: E501
        """jobs_service_get_deployment_by_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_get_deployment_by_name_with_http_info(project_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str name: (required)
        :return: V1Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_get_deployment_by_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_get_deployment_by_name`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `jobs_service_get_deployment_by_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/deployments/{name}/getbyname', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1Deployment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_get_deployment_by_slugs(self, project_owner_name: 'str', project_name: 'str', deployment_name: 'str', **kwargs) -> 'V1Deployment':  # noqa: E501
        """jobs_service_get_deployment_by_slugs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_get_deployment_by_slugs(project_owner_name, project_name, deployment_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_owner_name: (required)
        :param str project_name: (required)
        :param str deployment_name: (required)
        :return: V1Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_get_deployment_by_slugs_with_http_info(project_owner_name, project_name, deployment_name, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_get_deployment_by_slugs_with_http_info(project_owner_name, project_name, deployment_name, **kwargs)  # noqa: E501
            return data

    def jobs_service_get_deployment_by_slugs_with_http_info(self, project_owner_name: 'str', project_name: 'str', deployment_name: 'str', **kwargs) -> 'V1Deployment':  # noqa: E501
        """jobs_service_get_deployment_by_slugs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_get_deployment_by_slugs_with_http_info(project_owner_name, project_name, deployment_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_owner_name: (required)
        :param str project_name: (required)
        :param str deployment_name: (required)
        :return: V1Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_owner_name', 'project_name', 'deployment_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_get_deployment_by_slugs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_owner_name' is set
        if ('project_owner_name' not in params or
                params['project_owner_name'] is None):
            raise ValueError("Missing the required parameter `project_owner_name` when calling `jobs_service_get_deployment_by_slugs`")  # noqa: E501
        # verify the required parameter 'project_name' is set
        if ('project_name' not in params or
                params['project_name'] is None):
            raise ValueError("Missing the required parameter `project_name` when calling `jobs_service_get_deployment_by_slugs`")  # noqa: E501
        # verify the required parameter 'deployment_name' is set
        if ('deployment_name' not in params or
                params['deployment_name'] is None):
            raise ValueError("Missing the required parameter `deployment_name` when calling `jobs_service_get_deployment_by_slugs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_owner_name' in params:
            path_params['projectOwnerName'] = params['project_owner_name']  # noqa: E501
        if 'project_name' in params:
            path_params['projectName'] = params['project_name']  # noqa: E501
        if 'deployment_name' in params:
            path_params['deploymentName'] = params['deployment_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectOwnerName}/{projectName}/deployments/{deploymentName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1Deployment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_get_deployment_routing_telemetry(self, project_id: 'str', id: 'str', **kwargs) -> 'V1GetDeploymentRoutingTelemetryResponse':  # noqa: E501
        """Deployment Telemetry  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_get_deployment_routing_telemetry(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :param datetime start:
        :param datetime end:
        :param str path:
        :param int status_code:
        :param bool group_by_resource:
        :param str resolution:
        :return: V1GetDeploymentRoutingTelemetryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_get_deployment_routing_telemetry_with_http_info(project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_get_deployment_routing_telemetry_with_http_info(project_id, id, **kwargs)  # noqa: E501
            return data

    def jobs_service_get_deployment_routing_telemetry_with_http_info(self, project_id: 'str', id: 'str', **kwargs) -> 'V1GetDeploymentRoutingTelemetryResponse':  # noqa: E501
        """Deployment Telemetry  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_get_deployment_routing_telemetry_with_http_info(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :param datetime start:
        :param datetime end:
        :param str path:
        :param int status_code:
        :param bool group_by_resource:
        :param str resolution:
        :return: V1GetDeploymentRoutingTelemetryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id', 'start', 'end', 'path', 'status_code', 'group_by_resource', 'resolution']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_get_deployment_routing_telemetry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_get_deployment_routing_telemetry`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_service_get_deployment_routing_telemetry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'path' in params:
            query_params.append(('path', params['path']))  # noqa: E501
        if 'status_code' in params:
            query_params.append(('statusCode', params['status_code']))  # noqa: E501
        if 'group_by_resource' in params:
            query_params.append(('groupByResource', params['group_by_resource']))  # noqa: E501
        if 'resolution' in params:
            query_params.append(('resolution', params['resolution']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/deployments/{id}/telemetry', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1GetDeploymentRoutingTelemetryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_get_deployment_routing_telemetry_aggregated(self, project_id: 'str', id: 'str', **kwargs) -> 'V1GetDeploymentRoutingTelemetryAggregatedResponse':  # noqa: E501
        """Deployment Telemetry aggregated to display global monitor metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_get_deployment_routing_telemetry_aggregated(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :param datetime start:
        :param datetime end:
        :param list[str] paths:
        :param list[str] status_codes:
        :param str resolution:
        :return: V1GetDeploymentRoutingTelemetryAggregatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_get_deployment_routing_telemetry_aggregated_with_http_info(project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_get_deployment_routing_telemetry_aggregated_with_http_info(project_id, id, **kwargs)  # noqa: E501
            return data

    def jobs_service_get_deployment_routing_telemetry_aggregated_with_http_info(self, project_id: 'str', id: 'str', **kwargs) -> 'V1GetDeploymentRoutingTelemetryAggregatedResponse':  # noqa: E501
        """Deployment Telemetry aggregated to display global monitor metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_get_deployment_routing_telemetry_aggregated_with_http_info(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :param datetime start:
        :param datetime end:
        :param list[str] paths:
        :param list[str] status_codes:
        :param str resolution:
        :return: V1GetDeploymentRoutingTelemetryAggregatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id', 'start', 'end', 'paths', 'status_codes', 'resolution']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_get_deployment_routing_telemetry_aggregated" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_get_deployment_routing_telemetry_aggregated`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_service_get_deployment_routing_telemetry_aggregated`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'paths' in params:
            query_params.append(('paths', params['paths']))  # noqa: E501
            collection_formats['paths'] = 'multi'  # noqa: E501
        if 'status_codes' in params:
            query_params.append(('statusCodes', params['status_codes']))  # noqa: E501
            collection_formats['statusCodes'] = 'multi'  # noqa: E501
        if 'resolution' in params:
            query_params.append(('resolution', params['resolution']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/deployments/{id}/telemetry-aggregated', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1GetDeploymentRoutingTelemetryAggregatedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_get_deployment_routing_telemetry_content(self, project_id: 'str', id: 'str', **kwargs) -> 'V1GetDeploymentRoutingTelemetryContentResponse':  # noqa: E501
        """jobs_service_get_deployment_routing_telemetry_content  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_get_deployment_routing_telemetry_content(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :param str request_id:
        :return: V1GetDeploymentRoutingTelemetryContentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_get_deployment_routing_telemetry_content_with_http_info(project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_get_deployment_routing_telemetry_content_with_http_info(project_id, id, **kwargs)  # noqa: E501
            return data

    def jobs_service_get_deployment_routing_telemetry_content_with_http_info(self, project_id: 'str', id: 'str', **kwargs) -> 'V1GetDeploymentRoutingTelemetryContentResponse':  # noqa: E501
        """jobs_service_get_deployment_routing_telemetry_content  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_get_deployment_routing_telemetry_content_with_http_info(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :param str request_id:
        :return: V1GetDeploymentRoutingTelemetryContentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id', 'request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_get_deployment_routing_telemetry_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_get_deployment_routing_telemetry_content`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_service_get_deployment_routing_telemetry_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'request_id' in params:
            query_params.append(('requestId', params['request_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/deployments/{id}/routing-telemetry-content', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1GetDeploymentRoutingTelemetryContentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_get_deployment_status(self, project_id: 'str', id: 'str', **kwargs) -> 'V1DeploymentStatus':  # noqa: E501
        """jobs_service_get_deployment_status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_get_deployment_status(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :return: V1DeploymentStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_get_deployment_status_with_http_info(project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_get_deployment_status_with_http_info(project_id, id, **kwargs)  # noqa: E501
            return data

    def jobs_service_get_deployment_status_with_http_info(self, project_id: 'str', id: 'str', **kwargs) -> 'V1DeploymentStatus':  # noqa: E501
        """jobs_service_get_deployment_status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_get_deployment_status_with_http_info(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :return: V1DeploymentStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_get_deployment_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_get_deployment_status`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_service_get_deployment_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/deployments/{id}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DeploymentStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_get_job(self, project_id: 'str', id: 'str', **kwargs) -> 'V1Job':  # noqa: E501
        """jobs_service_get_job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_get_job(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :param str cloudspace_id:
        :return: V1Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_get_job_with_http_info(project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_get_job_with_http_info(project_id, id, **kwargs)  # noqa: E501
            return data

    def jobs_service_get_job_with_http_info(self, project_id: 'str', id: 'str', **kwargs) -> 'V1Job':  # noqa: E501
        """jobs_service_get_job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_get_job_with_http_info(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :param str cloudspace_id:
        :return: V1Job
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id', 'cloudspace_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_get_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_get_job`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_service_get_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'cloudspace_id' in params:
            query_params.append(('cloudspaceId', params['cloudspace_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/jobs/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1Job',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_get_job_by_name(self, project_owner_name: 'str', project_name: 'str', job_name: 'str', **kwargs) -> 'V1Job':  # noqa: E501
        """jobs_service_get_job_by_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_get_job_by_name(project_owner_name, project_name, job_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_owner_name: (required)
        :param str project_name: (required)
        :param str job_name: (required)
        :return: V1Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_get_job_by_name_with_http_info(project_owner_name, project_name, job_name, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_get_job_by_name_with_http_info(project_owner_name, project_name, job_name, **kwargs)  # noqa: E501
            return data

    def jobs_service_get_job_by_name_with_http_info(self, project_owner_name: 'str', project_name: 'str', job_name: 'str', **kwargs) -> 'V1Job':  # noqa: E501
        """jobs_service_get_job_by_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_get_job_by_name_with_http_info(project_owner_name, project_name, job_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_owner_name: (required)
        :param str project_name: (required)
        :param str job_name: (required)
        :return: V1Job
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_owner_name', 'project_name', 'job_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_get_job_by_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_owner_name' is set
        if ('project_owner_name' not in params or
                params['project_owner_name'] is None):
            raise ValueError("Missing the required parameter `project_owner_name` when calling `jobs_service_get_job_by_name`")  # noqa: E501
        # verify the required parameter 'project_name' is set
        if ('project_name' not in params or
                params['project_name'] is None):
            raise ValueError("Missing the required parameter `project_name` when calling `jobs_service_get_job_by_name`")  # noqa: E501
        # verify the required parameter 'job_name' is set
        if ('job_name' not in params or
                params['job_name'] is None):
            raise ValueError("Missing the required parameter `job_name` when calling `jobs_service_get_job_by_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_owner_name' in params:
            path_params['projectOwnerName'] = params['project_owner_name']  # noqa: E501
        if 'project_name' in params:
            path_params['projectName'] = params['project_name']  # noqa: E501
        if 'job_name' in params:
            path_params['jobName'] = params['job_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectOwnerName}/{projectName}/jobs/{jobName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1Job',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_get_job_logs(self, project_id: 'str', id: 'str', **kwargs) -> 'V1JobLogsResponse':  # noqa: E501
        """jobs_service_get_job_logs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_get_job_logs(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :param str cloudspace_id:
        :param str since:
        :param str until:
        :param str deployment_id:
        :param int rank:
        :return: V1JobLogsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_get_job_logs_with_http_info(project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_get_job_logs_with_http_info(project_id, id, **kwargs)  # noqa: E501
            return data

    def jobs_service_get_job_logs_with_http_info(self, project_id: 'str', id: 'str', **kwargs) -> 'V1JobLogsResponse':  # noqa: E501
        """jobs_service_get_job_logs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_get_job_logs_with_http_info(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :param str cloudspace_id:
        :param str since:
        :param str until:
        :param str deployment_id:
        :param int rank:
        :return: V1JobLogsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id', 'cloudspace_id', 'since', 'until', 'deployment_id', 'rank']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_get_job_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_get_job_logs`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_service_get_job_logs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'cloudspace_id' in params:
            query_params.append(('cloudspaceId', params['cloudspace_id']))  # noqa: E501
        if 'since' in params:
            query_params.append(('since', params['since']))  # noqa: E501
        if 'until' in params:
            query_params.append(('until', params['until']))  # noqa: E501
        if 'deployment_id' in params:
            query_params.append(('deploymentId', params['deployment_id']))  # noqa: E501
        if 'rank' in params:
            query_params.append(('rank', params['rank']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/jobs/{id}/page-logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1JobLogsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_get_job_stats(self, **kwargs) -> 'V1GetJobStatsResponse':  # noqa: E501
        """jobs_service_get_job_stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_get_job_stats(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id:
        :param str project_id:
        :param list[str] job_types:
        :return: V1GetJobStatsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_get_job_stats_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_get_job_stats_with_http_info(**kwargs)  # noqa: E501
            return data

    def jobs_service_get_job_stats_with_http_info(self, **kwargs) -> 'V1GetJobStatsResponse':  # noqa: E501
        """jobs_service_get_job_stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_get_job_stats_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id:
        :param str project_id:
        :param list[str] job_types:
        :return: V1GetJobStatsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_id', 'project_id', 'job_types']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_get_job_stats" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'org_id' in params:
            query_params.append(('orgId', params['org_id']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'job_types' in params:
            query_params.append(('jobTypes', params['job_types']))  # noqa: E501
            collection_formats['jobTypes'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/stats/jobs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1GetJobStatsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_get_job_system_metrics(self, project_id: 'str', **kwargs) -> 'V1GetJobSystemMetricsResponse':  # noqa: E501
        """jobs_service_get_job_system_metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_get_job_system_metrics(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cloudspace_id:
        :param list[str] ids:
        :param datetime start:
        :param datetime end:
        :param str frequency:
        :param bool first_query:
        :param str deployment_id:
        :param int rank:
        :return: V1GetJobSystemMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_get_job_system_metrics_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_get_job_system_metrics_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def jobs_service_get_job_system_metrics_with_http_info(self, project_id: 'str', **kwargs) -> 'V1GetJobSystemMetricsResponse':  # noqa: E501
        """jobs_service_get_job_system_metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_get_job_system_metrics_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cloudspace_id:
        :param list[str] ids:
        :param datetime start:
        :param datetime end:
        :param str frequency:
        :param bool first_query:
        :param str deployment_id:
        :param int rank:
        :return: V1GetJobSystemMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'cloudspace_id', 'ids', 'start', 'end', 'frequency', 'first_query', 'deployment_id', 'rank']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_get_job_system_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_get_job_system_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'cloudspace_id' in params:
            query_params.append(('cloudspaceId', params['cloudspace_id']))  # noqa: E501
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'multi'  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'frequency' in params:
            query_params.append(('frequency', params['frequency']))  # noqa: E501
        if 'first_query' in params:
            query_params.append(('firstQuery', params['first_query']))  # noqa: E501
        if 'deployment_id' in params:
            query_params.append(('deploymentId', params['deployment_id']))  # noqa: E501
        if 'rank' in params:
            query_params.append(('rank', params['rank']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/jobs/system-metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1GetJobSystemMetricsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_get_multi_machine_job(self, project_id: 'str', id: 'str', **kwargs) -> 'V1MultiMachineJob':  # noqa: E501
        """jobs_service_get_multi_machine_job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_get_multi_machine_job(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :return: V1MultiMachineJob
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_get_multi_machine_job_with_http_info(project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_get_multi_machine_job_with_http_info(project_id, id, **kwargs)  # noqa: E501
            return data

    def jobs_service_get_multi_machine_job_with_http_info(self, project_id: 'str', id: 'str', **kwargs) -> 'V1MultiMachineJob':  # noqa: E501
        """jobs_service_get_multi_machine_job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_get_multi_machine_job_with_http_info(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :return: V1MultiMachineJob
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_get_multi_machine_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_get_multi_machine_job`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_service_get_multi_machine_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/multi-machine-jobs/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1MultiMachineJob',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_get_multi_machine_job_by_name(self, project_id: 'str', name: 'str', **kwargs) -> 'V1MultiMachineJob':  # noqa: E501
        """jobs_service_get_multi_machine_job_by_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_get_multi_machine_job_by_name(project_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str name: (required)
        :return: V1MultiMachineJob
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_get_multi_machine_job_by_name_with_http_info(project_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_get_multi_machine_job_by_name_with_http_info(project_id, name, **kwargs)  # noqa: E501
            return data

    def jobs_service_get_multi_machine_job_by_name_with_http_info(self, project_id: 'str', name: 'str', **kwargs) -> 'V1MultiMachineJob':  # noqa: E501
        """jobs_service_get_multi_machine_job_by_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_get_multi_machine_job_by_name_with_http_info(project_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str name: (required)
        :return: V1MultiMachineJob
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_get_multi_machine_job_by_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_get_multi_machine_job_by_name`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `jobs_service_get_multi_machine_job_by_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/multi-machine-jobs/{name}/getbyname', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1MultiMachineJob',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_list_deployment_alerting_events(self, project_id: 'str', deployment_id: 'str', **kwargs) -> 'V1ListDeploymentAlertingEventsResponse':  # noqa: E501
        """ListDeploymentAlertingEvents lists the deployment alert events  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_list_deployment_alerting_events(project_id, deployment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str deployment_id: (required)
        :return: V1ListDeploymentAlertingEventsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_list_deployment_alerting_events_with_http_info(project_id, deployment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_list_deployment_alerting_events_with_http_info(project_id, deployment_id, **kwargs)  # noqa: E501
            return data

    def jobs_service_list_deployment_alerting_events_with_http_info(self, project_id: 'str', deployment_id: 'str', **kwargs) -> 'V1ListDeploymentAlertingEventsResponse':  # noqa: E501
        """ListDeploymentAlertingEvents lists the deployment alert events  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_list_deployment_alerting_events_with_http_info(project_id, deployment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str deployment_id: (required)
        :return: V1ListDeploymentAlertingEventsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'deployment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_list_deployment_alerting_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_list_deployment_alerting_events`")  # noqa: E501
        # verify the required parameter 'deployment_id' is set
        if ('deployment_id' not in params or
                params['deployment_id'] is None):
            raise ValueError("Missing the required parameter `deployment_id` when calling `jobs_service_list_deployment_alerting_events`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'deployment_id' in params:
            path_params['deploymentId'] = params['deployment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/deployments/{deploymentId}/alerting-events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListDeploymentAlertingEventsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_list_deployment_alerting_policies(self, project_id: 'str', deployment_id: 'str', **kwargs) -> 'V1ListDeploymentAlertingPoliciesResponse':  # noqa: E501
        """ListDeploymentAlertPolicies lists the deployment alert policies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_list_deployment_alerting_policies(project_id, deployment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str deployment_id: (required)
        :return: V1ListDeploymentAlertingPoliciesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_list_deployment_alerting_policies_with_http_info(project_id, deployment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_list_deployment_alerting_policies_with_http_info(project_id, deployment_id, **kwargs)  # noqa: E501
            return data

    def jobs_service_list_deployment_alerting_policies_with_http_info(self, project_id: 'str', deployment_id: 'str', **kwargs) -> 'V1ListDeploymentAlertingPoliciesResponse':  # noqa: E501
        """ListDeploymentAlertPolicies lists the deployment alert policies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_list_deployment_alerting_policies_with_http_info(project_id, deployment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str deployment_id: (required)
        :return: V1ListDeploymentAlertingPoliciesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'deployment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_list_deployment_alerting_policies" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_list_deployment_alerting_policies`")  # noqa: E501
        # verify the required parameter 'deployment_id' is set
        if ('deployment_id' not in params or
                params['deployment_id'] is None):
            raise ValueError("Missing the required parameter `deployment_id` when calling `jobs_service_list_deployment_alerting_policies`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'deployment_id' in params:
            path_params['deploymentId'] = params['deployment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/deployments/{deploymentId}/alerting-policies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListDeploymentAlertingPoliciesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_list_deployment_events(self, project_id: 'str', id: 'str', **kwargs) -> 'V1ListDeploymentEventsResponse':  # noqa: E501
        """Deployment events  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_list_deployment_events(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :param str release_id:
        :param str limit:
        :return: V1ListDeploymentEventsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_list_deployment_events_with_http_info(project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_list_deployment_events_with_http_info(project_id, id, **kwargs)  # noqa: E501
            return data

    def jobs_service_list_deployment_events_with_http_info(self, project_id: 'str', id: 'str', **kwargs) -> 'V1ListDeploymentEventsResponse':  # noqa: E501
        """Deployment events  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_list_deployment_events_with_http_info(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :param str release_id:
        :param str limit:
        :return: V1ListDeploymentEventsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id', 'release_id', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_list_deployment_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_list_deployment_events`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_service_list_deployment_events`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'release_id' in params:
            query_params.append(('releaseId', params['release_id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/deployments/{id}/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListDeploymentEventsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_list_deployment_releases(self, project_id: 'str', deployment_id: 'str', **kwargs) -> 'V1ListDeploymentReleasesResponse':  # noqa: E501
        """jobs_service_list_deployment_releases  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_list_deployment_releases(project_id, deployment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str deployment_id: (required)
        :param bool include_archived:
        :return: V1ListDeploymentReleasesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_list_deployment_releases_with_http_info(project_id, deployment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_list_deployment_releases_with_http_info(project_id, deployment_id, **kwargs)  # noqa: E501
            return data

    def jobs_service_list_deployment_releases_with_http_info(self, project_id: 'str', deployment_id: 'str', **kwargs) -> 'V1ListDeploymentReleasesResponse':  # noqa: E501
        """jobs_service_list_deployment_releases  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_list_deployment_releases_with_http_info(project_id, deployment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str deployment_id: (required)
        :param bool include_archived:
        :return: V1ListDeploymentReleasesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'deployment_id', 'include_archived']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_list_deployment_releases" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_list_deployment_releases`")  # noqa: E501
        # verify the required parameter 'deployment_id' is set
        if ('deployment_id' not in params or
                params['deployment_id'] is None):
            raise ValueError("Missing the required parameter `deployment_id` when calling `jobs_service_list_deployment_releases`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'deployment_id' in params:
            path_params['deploymentId'] = params['deployment_id']  # noqa: E501

        query_params = []
        if 'include_archived' in params:
            query_params.append(('includeArchived', params['include_archived']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/deployments/{deploymentId}/releases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListDeploymentReleasesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_list_deployment_routing_telemetry(self, project_id: 'str', id: 'str', **kwargs) -> 'V1GeListDeploymentRoutingTelemetryResponse':  # noqa: E501
        """Deployment Telemetry aggregated to display global monitor metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_list_deployment_routing_telemetry(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :param str first_request_id:
        :param str last_request_id:
        :param datetime start:
        :param datetime end:
        :param list[str] path:
        :param list[int] status_code:
        :param int limit:
        :return: V1GeListDeploymentRoutingTelemetryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_list_deployment_routing_telemetry_with_http_info(project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_list_deployment_routing_telemetry_with_http_info(project_id, id, **kwargs)  # noqa: E501
            return data

    def jobs_service_list_deployment_routing_telemetry_with_http_info(self, project_id: 'str', id: 'str', **kwargs) -> 'V1GeListDeploymentRoutingTelemetryResponse':  # noqa: E501
        """Deployment Telemetry aggregated to display global monitor metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_list_deployment_routing_telemetry_with_http_info(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :param str first_request_id:
        :param str last_request_id:
        :param datetime start:
        :param datetime end:
        :param list[str] path:
        :param list[int] status_code:
        :param int limit:
        :return: V1GeListDeploymentRoutingTelemetryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id', 'first_request_id', 'last_request_id', 'start', 'end', 'path', 'status_code', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_list_deployment_routing_telemetry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_list_deployment_routing_telemetry`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_service_list_deployment_routing_telemetry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'first_request_id' in params:
            query_params.append(('firstRequestId', params['first_request_id']))  # noqa: E501
        if 'last_request_id' in params:
            query_params.append(('lastRequestId', params['last_request_id']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'path' in params:
            query_params.append(('path', params['path']))  # noqa: E501
            collection_formats['path'] = 'multi'  # noqa: E501
        if 'status_code' in params:
            query_params.append(('statusCode', params['status_code']))  # noqa: E501
            collection_formats['statusCode'] = 'multi'  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/deployments/{id}/list-routing-telemetry', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1GeListDeploymentRoutingTelemetryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_list_deployments(self, project_id: 'str', **kwargs) -> 'V1ListDeploymentsResponse':  # noqa: E501
        """jobs_service_list_deployments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_list_deployments(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cloudspace_id:
        :param list[str] user_ids:
        :param bool standalone:
        :return: V1ListDeploymentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_list_deployments_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_list_deployments_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def jobs_service_list_deployments_with_http_info(self, project_id: 'str', **kwargs) -> 'V1ListDeploymentsResponse':  # noqa: E501
        """jobs_service_list_deployments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_list_deployments_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cloudspace_id:
        :param list[str] user_ids:
        :param bool standalone:
        :return: V1ListDeploymentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'cloudspace_id', 'user_ids', 'standalone']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_list_deployments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_list_deployments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'cloudspace_id' in params:
            query_params.append(('cloudspaceId', params['cloudspace_id']))  # noqa: E501
        if 'user_ids' in params:
            query_params.append(('userIds', params['user_ids']))  # noqa: E501
            collection_formats['userIds'] = 'multi'  # noqa: E501
        if 'standalone' in params:
            query_params.append(('standalone', params['standalone']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/deployments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListDeploymentsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_list_job_resources(self, **kwargs) -> 'V1ListJobResourcesResponse':  # noqa: E501
        """jobs_service_list_job_resources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_list_job_resources(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] project_ids:
        :param list[str] user_ids:
        :param str org_id:
        :param str state:
        :param list[str] job_types:
        :param datetime end_time:
        :param str page_token:
        :param int limit:
        :param str cloudspace_id:
        :param bool standalone: fields specific to deployments.
        :param str parent_pipeline_id: fields specific to pipelines.
        :return: V1ListJobResourcesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_list_job_resources_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_list_job_resources_with_http_info(**kwargs)  # noqa: E501
            return data

    def jobs_service_list_job_resources_with_http_info(self, **kwargs) -> 'V1ListJobResourcesResponse':  # noqa: E501
        """jobs_service_list_job_resources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_list_job_resources_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] project_ids:
        :param list[str] user_ids:
        :param str org_id:
        :param str state:
        :param list[str] job_types:
        :param datetime end_time:
        :param str page_token:
        :param int limit:
        :param str cloudspace_id:
        :param bool standalone: fields specific to deployments.
        :param str parent_pipeline_id: fields specific to pipelines.
        :return: V1ListJobResourcesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_ids', 'user_ids', 'org_id', 'state', 'job_types', 'end_time', 'page_token', 'limit', 'cloudspace_id', 'standalone', 'parent_pipeline_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_list_job_resources" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'project_ids' in params:
            query_params.append(('projectIds', params['project_ids']))  # noqa: E501
            collection_formats['projectIds'] = 'multi'  # noqa: E501
        if 'user_ids' in params:
            query_params.append(('userIds', params['user_ids']))  # noqa: E501
            collection_formats['userIds'] = 'multi'  # noqa: E501
        if 'org_id' in params:
            query_params.append(('orgId', params['org_id']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
        if 'job_types' in params:
            query_params.append(('jobTypes', params['job_types']))  # noqa: E501
            collection_formats['jobTypes'] = 'multi'  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('pageToken', params['page_token']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'cloudspace_id' in params:
            query_params.append(('cloudspaceId', params['cloudspace_id']))  # noqa: E501
        if 'standalone' in params:
            query_params.append(('standalone', params['standalone']))  # noqa: E501
        if 'parent_pipeline_id' in params:
            query_params.append(('parentPipelineId', params['parent_pipeline_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/jobs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListJobResourcesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_list_jobs(self, project_id: 'str', **kwargs) -> 'V1ListJobsResponse':  # noqa: E501
        """jobs_service_list_jobs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_list_jobs(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cloudspace_id:
        :param str user_id:
        :param str deployment_id:
        :param str multi_machine_job_id:
        :param bool standalone: Whether to list standalone jobs, not part of a deployment or mmt.
        :param str page_token:
        :param int limit:
        :param str state:
        :return: V1ListJobsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_list_jobs_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_list_jobs_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def jobs_service_list_jobs_with_http_info(self, project_id: 'str', **kwargs) -> 'V1ListJobsResponse':  # noqa: E501
        """jobs_service_list_jobs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_list_jobs_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cloudspace_id:
        :param str user_id:
        :param str deployment_id:
        :param str multi_machine_job_id:
        :param bool standalone: Whether to list standalone jobs, not part of a deployment or mmt.
        :param str page_token:
        :param int limit:
        :param str state:
        :return: V1ListJobsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'cloudspace_id', 'user_id', 'deployment_id', 'multi_machine_job_id', 'standalone', 'page_token', 'limit', 'state']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_list_jobs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_list_jobs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'cloudspace_id' in params:
            query_params.append(('cloudspaceId', params['cloudspace_id']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'deployment_id' in params:
            query_params.append(('deploymentId', params['deployment_id']))  # noqa: E501
        if 'multi_machine_job_id' in params:
            query_params.append(('multiMachineJobId', params['multi_machine_job_id']))  # noqa: E501
        if 'standalone' in params:
            query_params.append(('standalone', params['standalone']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('pageToken', params['page_token']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/jobs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListJobsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_list_multi_machine_job_events(self, project_id: 'str', id: 'str', **kwargs) -> 'V1ListMultiMachineJobEventsResponse':  # noqa: E501
        """jobs_service_list_multi_machine_job_events  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_list_multi_machine_job_events(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :param str release_id:
        :param str limit:
        :return: V1ListMultiMachineJobEventsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_list_multi_machine_job_events_with_http_info(project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_list_multi_machine_job_events_with_http_info(project_id, id, **kwargs)  # noqa: E501
            return data

    def jobs_service_list_multi_machine_job_events_with_http_info(self, project_id: 'str', id: 'str', **kwargs) -> 'V1ListMultiMachineJobEventsResponse':  # noqa: E501
        """jobs_service_list_multi_machine_job_events  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_list_multi_machine_job_events_with_http_info(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :param str release_id:
        :param str limit:
        :return: V1ListMultiMachineJobEventsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id', 'release_id', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_list_multi_machine_job_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_list_multi_machine_job_events`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_service_list_multi_machine_job_events`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'release_id' in params:
            query_params.append(('releaseId', params['release_id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/multi-machine-jobs/{id}/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListMultiMachineJobEventsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_list_multi_machine_jobs(self, project_id: 'str', **kwargs) -> 'V1ListMultiMachineJobsResponse':  # noqa: E501
        """jobs_service_list_multi_machine_jobs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_list_multi_machine_jobs(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cloudspace_id:
        :param str user_id:
        :param bool standalone:
        :return: V1ListMultiMachineJobsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_list_multi_machine_jobs_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_list_multi_machine_jobs_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def jobs_service_list_multi_machine_jobs_with_http_info(self, project_id: 'str', **kwargs) -> 'V1ListMultiMachineJobsResponse':  # noqa: E501
        """jobs_service_list_multi_machine_jobs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_list_multi_machine_jobs_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cloudspace_id:
        :param str user_id:
        :param bool standalone:
        :return: V1ListMultiMachineJobsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'cloudspace_id', 'user_id', 'standalone']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_list_multi_machine_jobs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_list_multi_machine_jobs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'cloudspace_id' in params:
            query_params.append(('cloudspaceId', params['cloudspace_id']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'standalone' in params:
            query_params.append(('standalone', params['standalone']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/multi-machine-jobs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListMultiMachineJobsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_report_deployment_routing_telemetry(self, body: 'JobIdReportroutingtelemetryBody', project_id: 'str', deployment_id: 'str', job_id: 'str', **kwargs) -> 'V1ReportDeploymentRoutingTelemetryResponse':  # noqa: E501
        """The tired proxy collects the requests sent to the resource and inform the CP  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_report_deployment_routing_telemetry(body, project_id, deployment_id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JobIdReportroutingtelemetryBody body: (required)
        :param str project_id: (required)
        :param str deployment_id: (required)
        :param str job_id: (required)
        :return: V1ReportDeploymentRoutingTelemetryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_report_deployment_routing_telemetry_with_http_info(body, project_id, deployment_id, job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_report_deployment_routing_telemetry_with_http_info(body, project_id, deployment_id, job_id, **kwargs)  # noqa: E501
            return data

    def jobs_service_report_deployment_routing_telemetry_with_http_info(self, body: 'JobIdReportroutingtelemetryBody', project_id: 'str', deployment_id: 'str', job_id: 'str', **kwargs) -> 'V1ReportDeploymentRoutingTelemetryResponse':  # noqa: E501
        """The tired proxy collects the requests sent to the resource and inform the CP  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_report_deployment_routing_telemetry_with_http_info(body, project_id, deployment_id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JobIdReportroutingtelemetryBody body: (required)
        :param str project_id: (required)
        :param str deployment_id: (required)
        :param str job_id: (required)
        :return: V1ReportDeploymentRoutingTelemetryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'deployment_id', 'job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_report_deployment_routing_telemetry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `jobs_service_report_deployment_routing_telemetry`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_report_deployment_routing_telemetry`")  # noqa: E501
        # verify the required parameter 'deployment_id' is set
        if ('deployment_id' not in params or
                params['deployment_id'] is None):
            raise ValueError("Missing the required parameter `deployment_id` when calling `jobs_service_report_deployment_routing_telemetry`")  # noqa: E501
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `jobs_service_report_deployment_routing_telemetry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'deployment_id' in params:
            path_params['deploymentId'] = params['deployment_id']  # noqa: E501
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/deployment/{deploymentId}/jobs/{jobId}/report-routing-telemetry', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ReportDeploymentRoutingTelemetryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_report_logs_activity(self, body: 'IdReportlogsactivityBody', project_id: 'str', id: 'str', **kwargs) -> 'V1ReportLogsActivityResponse':  # noqa: E501
        """The tired proxy collects the time at which the user logs started and inform the CP  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_report_logs_activity(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdReportlogsactivityBody body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1ReportLogsActivityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_report_logs_activity_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_report_logs_activity_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
            return data

    def jobs_service_report_logs_activity_with_http_info(self, body: 'IdReportlogsactivityBody', project_id: 'str', id: 'str', **kwargs) -> 'V1ReportLogsActivityResponse':  # noqa: E501
        """The tired proxy collects the time at which the user logs started and inform the CP  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_report_logs_activity_with_http_info(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdReportlogsactivityBody body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1ReportLogsActivityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_report_logs_activity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `jobs_service_report_logs_activity`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_report_logs_activity`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_service_report_logs_activity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/jobs/{id}/report-logs-activity', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ReportLogsActivityResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_report_restart_timings(self, body: 'IdReportrestarttimingsBody', project_id: 'str', id: 'str', **kwargs) -> 'V1ReportRestartTimingsResponse':  # noqa: E501
        """The tired proxy collects the time at which the user logs started and inform the CP  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_report_restart_timings(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdReportrestarttimingsBody body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1ReportRestartTimingsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_report_restart_timings_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_report_restart_timings_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
            return data

    def jobs_service_report_restart_timings_with_http_info(self, body: 'IdReportrestarttimingsBody', project_id: 'str', id: 'str', **kwargs) -> 'V1ReportRestartTimingsResponse':  # noqa: E501
        """The tired proxy collects the time at which the user logs started and inform the CP  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_report_restart_timings_with_http_info(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdReportrestarttimingsBody body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1ReportRestartTimingsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_report_restart_timings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `jobs_service_report_restart_timings`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_report_restart_timings`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_service_report_restart_timings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/jobs/{id}/report-restart-timings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ReportRestartTimingsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_restore_deployment_release(self, body: 'object', project_id: 'str', deployment_id: 'str', id: 'str', **kwargs) -> 'V1RestoreDeploymentReleaseResponse':  # noqa: E501
        """jobs_service_restore_deployment_release  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_restore_deployment_release(body, project_id, deployment_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param str project_id: (required)
        :param str deployment_id: (required)
        :param str id: (required)
        :return: V1RestoreDeploymentReleaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_restore_deployment_release_with_http_info(body, project_id, deployment_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_restore_deployment_release_with_http_info(body, project_id, deployment_id, id, **kwargs)  # noqa: E501
            return data

    def jobs_service_restore_deployment_release_with_http_info(self, body: 'object', project_id: 'str', deployment_id: 'str', id: 'str', **kwargs) -> 'V1RestoreDeploymentReleaseResponse':  # noqa: E501
        """jobs_service_restore_deployment_release  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_restore_deployment_release_with_http_info(body, project_id, deployment_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param str project_id: (required)
        :param str deployment_id: (required)
        :param str id: (required)
        :return: V1RestoreDeploymentReleaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'deployment_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_restore_deployment_release" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `jobs_service_restore_deployment_release`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_restore_deployment_release`")  # noqa: E501
        # verify the required parameter 'deployment_id' is set
        if ('deployment_id' not in params or
                params['deployment_id'] is None):
            raise ValueError("Missing the required parameter `deployment_id` when calling `jobs_service_restore_deployment_release`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_service_restore_deployment_release`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'deployment_id' in params:
            path_params['deploymentId'] = params['deployment_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/deployments/{deploymentId}/releases/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1RestoreDeploymentReleaseResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_search_job_logs(self, project_id: 'str', **kwargs) -> 'V1SearchJobLogsResponse':  # noqa: E501
        """jobs_service_search_job_logs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_search_job_logs(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id:
        :param str deployment_id:
        :param datetime since:
        :param datetime until:
        :param str query:
        :param str page_size:
        :param str page_token:
        :return: V1SearchJobLogsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_search_job_logs_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_search_job_logs_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def jobs_service_search_job_logs_with_http_info(self, project_id: 'str', **kwargs) -> 'V1SearchJobLogsResponse':  # noqa: E501
        """jobs_service_search_job_logs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_search_job_logs_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id:
        :param str deployment_id:
        :param datetime since:
        :param datetime until:
        :param str query:
        :param str page_size:
        :param str page_token:
        :return: V1SearchJobLogsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id', 'deployment_id', 'since', 'until', 'query', 'page_size', 'page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_search_job_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_search_job_logs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'deployment_id' in params:
            query_params.append(('deploymentId', params['deployment_id']))  # noqa: E501
        if 'since' in params:
            query_params.append(('since', params['since']))  # noqa: E501
        if 'until' in params:
            query_params.append(('until', params['until']))  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('pageToken', params['page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/jobs/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1SearchJobLogsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_update_deployment(self, body: 'DeploymentsIdBody', project_id: 'str', id: 'str', **kwargs) -> 'V1Deployment':  # noqa: E501
        """jobs_service_update_deployment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_update_deployment(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeploymentsIdBody body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_update_deployment_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_update_deployment_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
            return data

    def jobs_service_update_deployment_with_http_info(self, body: 'DeploymentsIdBody', project_id: 'str', id: 'str', **kwargs) -> 'V1Deployment':  # noqa: E501
        """jobs_service_update_deployment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_update_deployment_with_http_info(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeploymentsIdBody body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_update_deployment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `jobs_service_update_deployment`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_update_deployment`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_service_update_deployment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/deployments/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1Deployment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_update_deployment_alerting_event(self, body: 'AlertingeventsIdBody', project_id: 'str', deployment_id: 'str', id: 'str', **kwargs) -> 'V1DeploymentAlertingEvent':  # noqa: E501
        """UpdateDeploymentAlertingEvent lists the deployment alert events  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_update_deployment_alerting_event(body, project_id, deployment_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AlertingeventsIdBody body: (required)
        :param str project_id: (required)
        :param str deployment_id: (required)
        :param str id: (required)
        :return: V1DeploymentAlertingEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_update_deployment_alerting_event_with_http_info(body, project_id, deployment_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_update_deployment_alerting_event_with_http_info(body, project_id, deployment_id, id, **kwargs)  # noqa: E501
            return data

    def jobs_service_update_deployment_alerting_event_with_http_info(self, body: 'AlertingeventsIdBody', project_id: 'str', deployment_id: 'str', id: 'str', **kwargs) -> 'V1DeploymentAlertingEvent':  # noqa: E501
        """UpdateDeploymentAlertingEvent lists the deployment alert events  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_update_deployment_alerting_event_with_http_info(body, project_id, deployment_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AlertingeventsIdBody body: (required)
        :param str project_id: (required)
        :param str deployment_id: (required)
        :param str id: (required)
        :return: V1DeploymentAlertingEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'deployment_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_update_deployment_alerting_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `jobs_service_update_deployment_alerting_event`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_update_deployment_alerting_event`")  # noqa: E501
        # verify the required parameter 'deployment_id' is set
        if ('deployment_id' not in params or
                params['deployment_id'] is None):
            raise ValueError("Missing the required parameter `deployment_id` when calling `jobs_service_update_deployment_alerting_event`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_service_update_deployment_alerting_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'deployment_id' in params:
            path_params['deploymentId'] = params['deployment_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/deployments/{deploymentId}/alerting-events/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DeploymentAlertingEvent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_update_deployment_alerting_policy(self, body: 'DeploymentIdAlertingpoliciesBody', project_id: 'str', deployment_id: 'str', **kwargs) -> 'V1DeploymentAlertingPolicy':  # noqa: E501
        """jobs_service_update_deployment_alerting_policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_update_deployment_alerting_policy(body, project_id, deployment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeploymentIdAlertingpoliciesBody body: (required)
        :param str project_id: (required)
        :param str deployment_id: (required)
        :return: V1DeploymentAlertingPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_update_deployment_alerting_policy_with_http_info(body, project_id, deployment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_update_deployment_alerting_policy_with_http_info(body, project_id, deployment_id, **kwargs)  # noqa: E501
            return data

    def jobs_service_update_deployment_alerting_policy_with_http_info(self, body: 'DeploymentIdAlertingpoliciesBody', project_id: 'str', deployment_id: 'str', **kwargs) -> 'V1DeploymentAlertingPolicy':  # noqa: E501
        """jobs_service_update_deployment_alerting_policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_update_deployment_alerting_policy_with_http_info(body, project_id, deployment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeploymentIdAlertingpoliciesBody body: (required)
        :param str project_id: (required)
        :param str deployment_id: (required)
        :return: V1DeploymentAlertingPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'deployment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_update_deployment_alerting_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `jobs_service_update_deployment_alerting_policy`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_update_deployment_alerting_policy`")  # noqa: E501
        # verify the required parameter 'deployment_id' is set
        if ('deployment_id' not in params or
                params['deployment_id'] is None):
            raise ValueError("Missing the required parameter `deployment_id` when calling `jobs_service_update_deployment_alerting_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'deployment_id' in params:
            path_params['deploymentId'] = params['deployment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/deployments/{deploymentId}/alerting-policies', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DeploymentAlertingPolicy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_update_deployment_visibility(self, body: 'IdVisibilityBody', project_id: 'str', id: 'str', **kwargs) -> 'V1UpdateDeploymentVisibilityResponse':  # noqa: E501
        """UpdateDeploymentVisibility updates the deployment visibility, mainly switch between public and private  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_update_deployment_visibility(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdVisibilityBody body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1UpdateDeploymentVisibilityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_update_deployment_visibility_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_update_deployment_visibility_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
            return data

    def jobs_service_update_deployment_visibility_with_http_info(self, body: 'IdVisibilityBody', project_id: 'str', id: 'str', **kwargs) -> 'V1UpdateDeploymentVisibilityResponse':  # noqa: E501
        """UpdateDeploymentVisibility updates the deployment visibility, mainly switch between public and private  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_update_deployment_visibility_with_http_info(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdVisibilityBody body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1UpdateDeploymentVisibilityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_update_deployment_visibility" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `jobs_service_update_deployment_visibility`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_update_deployment_visibility`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_service_update_deployment_visibility`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/deployments/{id}/visibility', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1UpdateDeploymentVisibilityResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_update_job(self, body: 'JobsIdBody1', project_id: 'str', id: 'str', **kwargs) -> 'V1Job':  # noqa: E501
        """jobs_service_update_job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_update_job(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JobsIdBody1 body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_update_job_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_update_job_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
            return data

    def jobs_service_update_job_with_http_info(self, body: 'JobsIdBody1', project_id: 'str', id: 'str', **kwargs) -> 'V1Job':  # noqa: E501
        """jobs_service_update_job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_update_job_with_http_info(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JobsIdBody1 body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1Job
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_update_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `jobs_service_update_job`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_update_job`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_service_update_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/jobs/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1Job',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_update_job_index(self, body: 'IdIndexBody3', project_id: 'str', id: 'str', **kwargs) -> 'V1UpdateIndexResponse':  # noqa: E501
        """jobs_service_update_job_index  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_update_job_index(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdIndexBody3 body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1UpdateIndexResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_update_job_index_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_update_job_index_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
            return data

    def jobs_service_update_job_index_with_http_info(self, body: 'IdIndexBody3', project_id: 'str', id: 'str', **kwargs) -> 'V1UpdateIndexResponse':  # noqa: E501
        """jobs_service_update_job_index  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_update_job_index_with_http_info(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdIndexBody3 body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1UpdateIndexResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_update_job_index" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `jobs_service_update_job_index`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_update_job_index`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_service_update_job_index`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/jobs/{id}/index', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1UpdateIndexResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_update_job_visibility(self, body: 'IdVisibilityBody1', project_id: 'str', id: 'str', **kwargs) -> 'V1UpdateJobVisibilityResponse':  # noqa: E501
        """UpdateJobVisibility updates the jobs visibility, mainly switch between public and private  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_update_job_visibility(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdVisibilityBody1 body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1UpdateJobVisibilityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_update_job_visibility_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_update_job_visibility_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
            return data

    def jobs_service_update_job_visibility_with_http_info(self, body: 'IdVisibilityBody1', project_id: 'str', id: 'str', **kwargs) -> 'V1UpdateJobVisibilityResponse':  # noqa: E501
        """UpdateJobVisibility updates the jobs visibility, mainly switch between public and private  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_update_job_visibility_with_http_info(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdVisibilityBody1 body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1UpdateJobVisibilityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_update_job_visibility" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `jobs_service_update_job_visibility`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_update_job_visibility`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_service_update_job_visibility`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/jobs/{id}/visibility', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1UpdateJobVisibilityResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_update_multi_machine_job(self, body: 'MultimachinejobsIdBody', project_id: 'str', id: 'str', **kwargs) -> 'V1MultiMachineJob':  # noqa: E501
        """jobs_service_update_multi_machine_job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_update_multi_machine_job(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MultimachinejobsIdBody body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1MultiMachineJob
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_update_multi_machine_job_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_update_multi_machine_job_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
            return data

    def jobs_service_update_multi_machine_job_with_http_info(self, body: 'MultimachinejobsIdBody', project_id: 'str', id: 'str', **kwargs) -> 'V1MultiMachineJob':  # noqa: E501
        """jobs_service_update_multi_machine_job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_update_multi_machine_job_with_http_info(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MultimachinejobsIdBody body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1MultiMachineJob
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_update_multi_machine_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `jobs_service_update_multi_machine_job`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `jobs_service_update_multi_machine_job`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `jobs_service_update_multi_machine_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/multi-machine-jobs/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1MultiMachineJob',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_service_validate_deployment_image(self, body: 'V1ValidateDeploymentImageRequest', **kwargs) -> 'V1ValidateDeploymentImageResponse':  # noqa: E501
        """Job deployments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_validate_deployment_image(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1ValidateDeploymentImageRequest body: (required)
        :return: V1ValidateDeploymentImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_service_validate_deployment_image_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_service_validate_deployment_image_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def jobs_service_validate_deployment_image_with_http_info(self, body: 'V1ValidateDeploymentImageRequest', **kwargs) -> 'V1ValidateDeploymentImageResponse':  # noqa: E501
        """Job deployments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_service_validate_deployment_image_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1ValidateDeploymentImageRequest body: (required)
        :return: V1ValidateDeploymentImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_service_validate_deployment_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `jobs_service_validate_deployment_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/deployments/validate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ValidateDeploymentImageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
