# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

from __future__ import absolute_import

import re  # noqa: F401
from typing import TYPE_CHECKING, Any

# python 2 and python 3 compatibility library
import six

from lightning_sdk.lightning_cloud.openapi.api_client import ApiClient

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class SnowflakeServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def snowflake_service_check_snowflake_connection(self, project_id: 'str', **kwargs) -> 'V1CheckSnowflakeConnectionResponse':  # noqa: E501
        """snowflake_service_check_snowflake_connection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snowflake_service_check_snowflake_connection(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str username:
        :param str password:
        :param str account:
        :param str private_key_file:
        :param str private_key_password:
        :return: V1CheckSnowflakeConnectionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.snowflake_service_check_snowflake_connection_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.snowflake_service_check_snowflake_connection_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def snowflake_service_check_snowflake_connection_with_http_info(self, project_id: 'str', **kwargs) -> 'V1CheckSnowflakeConnectionResponse':  # noqa: E501
        """snowflake_service_check_snowflake_connection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snowflake_service_check_snowflake_connection_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str username:
        :param str password:
        :param str account:
        :param str private_key_file:
        :param str private_key_password:
        :return: V1CheckSnowflakeConnectionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'username', 'password', 'account', 'private_key_file', 'private_key_password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method snowflake_service_check_snowflake_connection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `snowflake_service_check_snowflake_connection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'username' in params:
            query_params.append(('username', params['username']))  # noqa: E501
        if 'password' in params:
            query_params.append(('password', params['password']))  # noqa: E501
        if 'account' in params:
            query_params.append(('account', params['account']))  # noqa: E501
        if 'private_key_file' in params:
            query_params.append(('privateKeyFile', params['private_key_file']))  # noqa: E501
        if 'private_key_password' in params:
            query_params.append(('privateKeyPassword', params['private_key_password']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/snowflake', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1CheckSnowflakeConnectionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def snowflake_service_create_snowflake_connection(self, body: 'ProjectIdSnowflakeBody', project_id: 'str', **kwargs) -> 'V1CreateSnowflakeConnectionResponse':  # noqa: E501
        """snowflake_service_create_snowflake_connection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snowflake_service_create_snowflake_connection(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectIdSnowflakeBody body: (required)
        :param str project_id: (required)
        :return: V1CreateSnowflakeConnectionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.snowflake_service_create_snowflake_connection_with_http_info(body, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.snowflake_service_create_snowflake_connection_with_http_info(body, project_id, **kwargs)  # noqa: E501
            return data

    def snowflake_service_create_snowflake_connection_with_http_info(self, body: 'ProjectIdSnowflakeBody', project_id: 'str', **kwargs) -> 'V1CreateSnowflakeConnectionResponse':  # noqa: E501
        """snowflake_service_create_snowflake_connection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snowflake_service_create_snowflake_connection_with_http_info(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectIdSnowflakeBody body: (required)
        :param str project_id: (required)
        :return: V1CreateSnowflakeConnectionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method snowflake_service_create_snowflake_connection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `snowflake_service_create_snowflake_connection`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `snowflake_service_create_snowflake_connection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/snowflake', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1CreateSnowflakeConnectionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def snowflake_service_execute_snowflake_query(self, body: 'SnowflakeQueryBody', project_id: 'str', **kwargs) -> 'V1ExecuteSnowflakeQueryResponse':  # noqa: E501
        """snowflake_service_execute_snowflake_query  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snowflake_service_execute_snowflake_query(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SnowflakeQueryBody body: (required)
        :param str project_id: (required)
        :return: V1ExecuteSnowflakeQueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.snowflake_service_execute_snowflake_query_with_http_info(body, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.snowflake_service_execute_snowflake_query_with_http_info(body, project_id, **kwargs)  # noqa: E501
            return data

    def snowflake_service_execute_snowflake_query_with_http_info(self, body: 'SnowflakeQueryBody', project_id: 'str', **kwargs) -> 'V1ExecuteSnowflakeQueryResponse':  # noqa: E501
        """snowflake_service_execute_snowflake_query  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snowflake_service_execute_snowflake_query_with_http_info(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SnowflakeQueryBody body: (required)
        :param str project_id: (required)
        :return: V1ExecuteSnowflakeQueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method snowflake_service_execute_snowflake_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `snowflake_service_execute_snowflake_query`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `snowflake_service_execute_snowflake_query`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/snowflake/query', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ExecuteSnowflakeQueryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def snowflake_service_export_snowflake_query(self, body: 'SnowflakeExportBody', project_id: 'str', **kwargs) -> 'V1ExportSnowflakeQueryResponse':  # noqa: E501
        """snowflake_service_export_snowflake_query  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snowflake_service_export_snowflake_query(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SnowflakeExportBody body: (required)
        :param str project_id: (required)
        :return: V1ExportSnowflakeQueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.snowflake_service_export_snowflake_query_with_http_info(body, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.snowflake_service_export_snowflake_query_with_http_info(body, project_id, **kwargs)  # noqa: E501
            return data

    def snowflake_service_export_snowflake_query_with_http_info(self, body: 'SnowflakeExportBody', project_id: 'str', **kwargs) -> 'V1ExportSnowflakeQueryResponse':  # noqa: E501
        """snowflake_service_export_snowflake_query  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snowflake_service_export_snowflake_query_with_http_info(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SnowflakeExportBody body: (required)
        :param str project_id: (required)
        :return: V1ExportSnowflakeQueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method snowflake_service_export_snowflake_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `snowflake_service_export_snowflake_query`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `snowflake_service_export_snowflake_query`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/snowflake/export', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ExportSnowflakeQueryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def snowflake_service_get_snowflake_query(self, project_id: 'str', query_id: 'str', **kwargs) -> 'V1GetSnowflakeQueryResponse':  # noqa: E501
        """snowflake_service_get_snowflake_query  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snowflake_service_get_snowflake_query(project_id, query_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str query_id: (required)
        :return: V1GetSnowflakeQueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.snowflake_service_get_snowflake_query_with_http_info(project_id, query_id, **kwargs)  # noqa: E501
        else:
            (data) = self.snowflake_service_get_snowflake_query_with_http_info(project_id, query_id, **kwargs)  # noqa: E501
            return data

    def snowflake_service_get_snowflake_query_with_http_info(self, project_id: 'str', query_id: 'str', **kwargs) -> 'V1GetSnowflakeQueryResponse':  # noqa: E501
        """snowflake_service_get_snowflake_query  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snowflake_service_get_snowflake_query_with_http_info(project_id, query_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str query_id: (required)
        :return: V1GetSnowflakeQueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'query_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method snowflake_service_get_snowflake_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `snowflake_service_get_snowflake_query`")  # noqa: E501
        # verify the required parameter 'query_id' is set
        if ('query_id' not in params or
                params['query_id'] is None):
            raise ValueError("Missing the required parameter `query_id` when calling `snowflake_service_get_snowflake_query`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'query_id' in params:
            path_params['queryId'] = params['query_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/snowflake/query/{queryId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1GetSnowflakeQueryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def snowflake_service_update_snowflake_query(self, body: 'QueryQueryIdBody', project_id: 'str', query_id: 'str', **kwargs) -> 'V1UpdateSnowflakeQueryResponse':  # noqa: E501
        """snowflake_service_update_snowflake_query  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snowflake_service_update_snowflake_query(body, project_id, query_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QueryQueryIdBody body: (required)
        :param str project_id: (required)
        :param str query_id: (required)
        :return: V1UpdateSnowflakeQueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.snowflake_service_update_snowflake_query_with_http_info(body, project_id, query_id, **kwargs)  # noqa: E501
        else:
            (data) = self.snowflake_service_update_snowflake_query_with_http_info(body, project_id, query_id, **kwargs)  # noqa: E501
            return data

    def snowflake_service_update_snowflake_query_with_http_info(self, body: 'QueryQueryIdBody', project_id: 'str', query_id: 'str', **kwargs) -> 'V1UpdateSnowflakeQueryResponse':  # noqa: E501
        """snowflake_service_update_snowflake_query  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snowflake_service_update_snowflake_query_with_http_info(body, project_id, query_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QueryQueryIdBody body: (required)
        :param str project_id: (required)
        :param str query_id: (required)
        :return: V1UpdateSnowflakeQueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'query_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method snowflake_service_update_snowflake_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `snowflake_service_update_snowflake_query`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `snowflake_service_update_snowflake_query`")  # noqa: E501
        # verify the required parameter 'query_id' is set
        if ('query_id' not in params or
                params['query_id'] is None):
            raise ValueError("Missing the required parameter `query_id` when calling `snowflake_service_update_snowflake_query`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'query_id' in params:
            path_params['queryId'] = params['query_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/snowflake/query/{queryId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1UpdateSnowflakeQueryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
