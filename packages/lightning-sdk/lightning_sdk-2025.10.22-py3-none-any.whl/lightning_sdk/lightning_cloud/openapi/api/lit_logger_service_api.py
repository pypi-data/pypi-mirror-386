# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

from __future__ import absolute_import

import re  # noqa: F401
from typing import TYPE_CHECKING, Any

# python 2 and python 3 compatibility library
import six

from lightning_sdk.lightning_cloud.openapi.api_client import ApiClient

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class LitLoggerServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def lit_logger_service_append_logger_metrics(self, body: 'LoggermetricsIdBody', project_id: 'str', id: 'str', **kwargs) -> 'V1AppendLoggerMetricsResponse':  # noqa: E501
        """lit_logger_service_append_logger_metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_logger_service_append_logger_metrics(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LoggermetricsIdBody body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1AppendLoggerMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_logger_service_append_logger_metrics_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_logger_service_append_logger_metrics_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
            return data

    def lit_logger_service_append_logger_metrics_with_http_info(self, body: 'LoggermetricsIdBody', project_id: 'str', id: 'str', **kwargs) -> 'V1AppendLoggerMetricsResponse':  # noqa: E501
        """lit_logger_service_append_logger_metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_logger_service_append_logger_metrics_with_http_info(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LoggermetricsIdBody body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1AppendLoggerMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_logger_service_append_logger_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `lit_logger_service_append_logger_metrics`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_logger_service_append_logger_metrics`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `lit_logger_service_append_logger_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/logger-metrics/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1AppendLoggerMetricsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_logger_service_count_metrics_streams(self, project_id: 'str', **kwargs) -> 'V1CountMetricsStreamsResponse':  # noqa: E501
        """Used to avoid fetching all the metrics in the UI when not needed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_logger_service_count_metrics_streams(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str user_id:
        :param str cloud_space_id:
        :param str app_id:
        :return: V1CountMetricsStreamsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_logger_service_count_metrics_streams_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_logger_service_count_metrics_streams_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def lit_logger_service_count_metrics_streams_with_http_info(self, project_id: 'str', **kwargs) -> 'V1CountMetricsStreamsResponse':  # noqa: E501
        """Used to avoid fetching all the metrics in the UI when not needed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_logger_service_count_metrics_streams_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str user_id:
        :param str cloud_space_id:
        :param str app_id:
        :return: V1CountMetricsStreamsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'user_id', 'cloud_space_id', 'app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_logger_service_count_metrics_streams" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_logger_service_count_metrics_streams`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'cloud_space_id' in params:
            query_params.append(('cloudSpaceId', params['cloud_space_id']))  # noqa: E501
        if 'app_id' in params:
            query_params.append(('appId', params['app_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/metrics-stream/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1CountMetricsStreamsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_logger_service_create_logger_artifact(self, body: 'MetricsStreamIdLoggerartifactsBody', project_id: 'str', metrics_stream_id: 'str', **kwargs) -> 'V1LoggerArtifact':  # noqa: E501
        """Artifact tracking  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_logger_service_create_logger_artifact(body, project_id, metrics_stream_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MetricsStreamIdLoggerartifactsBody body: (required)
        :param str project_id: (required)
        :param str metrics_stream_id: (required)
        :return: V1LoggerArtifact
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_logger_service_create_logger_artifact_with_http_info(body, project_id, metrics_stream_id, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_logger_service_create_logger_artifact_with_http_info(body, project_id, metrics_stream_id, **kwargs)  # noqa: E501
            return data

    def lit_logger_service_create_logger_artifact_with_http_info(self, body: 'MetricsStreamIdLoggerartifactsBody', project_id: 'str', metrics_stream_id: 'str', **kwargs) -> 'V1LoggerArtifact':  # noqa: E501
        """Artifact tracking  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_logger_service_create_logger_artifact_with_http_info(body, project_id, metrics_stream_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MetricsStreamIdLoggerartifactsBody body: (required)
        :param str project_id: (required)
        :param str metrics_stream_id: (required)
        :return: V1LoggerArtifact
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'metrics_stream_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_logger_service_create_logger_artifact" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `lit_logger_service_create_logger_artifact`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_logger_service_create_logger_artifact`")  # noqa: E501
        # verify the required parameter 'metrics_stream_id' is set
        if ('metrics_stream_id' not in params or
                params['metrics_stream_id'] is None):
            raise ValueError("Missing the required parameter `metrics_stream_id` when calling `lit_logger_service_create_logger_artifact`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'metrics_stream_id' in params:
            path_params['metricsStreamId'] = params['metrics_stream_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/metrics-streams/{metricsStreamId}/logger-artifacts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1LoggerArtifact',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_logger_service_create_metrics_stream(self, body: 'MetricsstreamCreateBody', project_id: 'str', **kwargs) -> 'V1MetricsStream':  # noqa: E501
        """lit_logger_service_create_metrics_stream  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_logger_service_create_metrics_stream(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MetricsstreamCreateBody body: (required)
        :param str project_id: (required)
        :return: V1MetricsStream
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_logger_service_create_metrics_stream_with_http_info(body, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_logger_service_create_metrics_stream_with_http_info(body, project_id, **kwargs)  # noqa: E501
            return data

    def lit_logger_service_create_metrics_stream_with_http_info(self, body: 'MetricsstreamCreateBody', project_id: 'str', **kwargs) -> 'V1MetricsStream':  # noqa: E501
        """lit_logger_service_create_metrics_stream  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_logger_service_create_metrics_stream_with_http_info(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MetricsstreamCreateBody body: (required)
        :param str project_id: (required)
        :return: V1MetricsStream
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_logger_service_create_metrics_stream" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `lit_logger_service_create_metrics_stream`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_logger_service_create_metrics_stream`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/metrics-stream/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1MetricsStream',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_logger_service_create_shared_metrics_stream(self, body: 'V1CreateSharedMetricsStreamRequest', **kwargs) -> 'V1CreateSharedMetricsStreamResponse':  # noqa: E501
        """lit_logger_service_create_shared_metrics_stream  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_logger_service_create_shared_metrics_stream(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CreateSharedMetricsStreamRequest body: (required)
        :return: V1CreateSharedMetricsStreamResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_logger_service_create_shared_metrics_stream_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_logger_service_create_shared_metrics_stream_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def lit_logger_service_create_shared_metrics_stream_with_http_info(self, body: 'V1CreateSharedMetricsStreamRequest', **kwargs) -> 'V1CreateSharedMetricsStreamResponse':  # noqa: E501
        """lit_logger_service_create_shared_metrics_stream  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_logger_service_create_shared_metrics_stream_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CreateSharedMetricsStreamRequest body: (required)
        :return: V1CreateSharedMetricsStreamResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_logger_service_create_shared_metrics_stream" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `lit_logger_service_create_shared_metrics_stream`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/share/litlogger-metrics', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1CreateSharedMetricsStreamResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_logger_service_delete_logger_artifact(self, project_id: 'str', metrics_stream_id: 'str', id: 'str', **kwargs) -> 'V1DeleteLoggerArtifactResponse':  # noqa: E501
        """lit_logger_service_delete_logger_artifact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_logger_service_delete_logger_artifact(project_id, metrics_stream_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str metrics_stream_id: (required)
        :param str id: (required)
        :return: V1DeleteLoggerArtifactResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_logger_service_delete_logger_artifact_with_http_info(project_id, metrics_stream_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_logger_service_delete_logger_artifact_with_http_info(project_id, metrics_stream_id, id, **kwargs)  # noqa: E501
            return data

    def lit_logger_service_delete_logger_artifact_with_http_info(self, project_id: 'str', metrics_stream_id: 'str', id: 'str', **kwargs) -> 'V1DeleteLoggerArtifactResponse':  # noqa: E501
        """lit_logger_service_delete_logger_artifact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_logger_service_delete_logger_artifact_with_http_info(project_id, metrics_stream_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str metrics_stream_id: (required)
        :param str id: (required)
        :return: V1DeleteLoggerArtifactResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'metrics_stream_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_logger_service_delete_logger_artifact" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_logger_service_delete_logger_artifact`")  # noqa: E501
        # verify the required parameter 'metrics_stream_id' is set
        if ('metrics_stream_id' not in params or
                params['metrics_stream_id'] is None):
            raise ValueError("Missing the required parameter `metrics_stream_id` when calling `lit_logger_service_delete_logger_artifact`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `lit_logger_service_delete_logger_artifact`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'metrics_stream_id' in params:
            path_params['metricsStreamId'] = params['metrics_stream_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/metrics-streams/{metricsStreamId}/logger-artifacts/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DeleteLoggerArtifactResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_logger_service_delete_metrics_stream(self, body: 'MetricsstreamDeleteBody', project_id: 'str', **kwargs) -> 'V1DeleteMetricsStreamResponse':  # noqa: E501
        """lit_logger_service_delete_metrics_stream  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_logger_service_delete_metrics_stream(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MetricsstreamDeleteBody body: (required)
        :param str project_id: (required)
        :return: V1DeleteMetricsStreamResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_logger_service_delete_metrics_stream_with_http_info(body, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_logger_service_delete_metrics_stream_with_http_info(body, project_id, **kwargs)  # noqa: E501
            return data

    def lit_logger_service_delete_metrics_stream_with_http_info(self, body: 'MetricsstreamDeleteBody', project_id: 'str', **kwargs) -> 'V1DeleteMetricsStreamResponse':  # noqa: E501
        """lit_logger_service_delete_metrics_stream  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_logger_service_delete_metrics_stream_with_http_info(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MetricsstreamDeleteBody body: (required)
        :param str project_id: (required)
        :return: V1DeleteMetricsStreamResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_logger_service_delete_metrics_stream" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `lit_logger_service_delete_metrics_stream`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_logger_service_delete_metrics_stream`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/metrics-stream/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DeleteMetricsStreamResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_logger_service_delete_shared_metrics_stream(self, id: 'str', **kwargs) -> 'V1DeleteSharedMetricsStreamResponse':  # noqa: E501
        """lit_logger_service_delete_shared_metrics_stream  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_logger_service_delete_shared_metrics_stream(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: V1DeleteSharedMetricsStreamResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_logger_service_delete_shared_metrics_stream_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_logger_service_delete_shared_metrics_stream_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def lit_logger_service_delete_shared_metrics_stream_with_http_info(self, id: 'str', **kwargs) -> 'V1DeleteSharedMetricsStreamResponse':  # noqa: E501
        """lit_logger_service_delete_shared_metrics_stream  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_logger_service_delete_shared_metrics_stream_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: V1DeleteSharedMetricsStreamResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_logger_service_delete_shared_metrics_stream" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `lit_logger_service_delete_shared_metrics_stream`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/share/litlogger-metrics/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DeleteSharedMetricsStreamResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_logger_service_get_logger_metrics(self, project_id: 'str', **kwargs) -> 'V1GetLoggerMetricsResponse':  # noqa: E501
        """lit_logger_service_get_logger_metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_logger_service_get_logger_metrics(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param list[str] user_ids:
        :param list[str] cloudspace_ids:
        :param list[str] app_ids:
        :param list[str] ids:
        :param list[str] names:
        :param datetime start:
        :param datetime end:
        :return: V1GetLoggerMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_logger_service_get_logger_metrics_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_logger_service_get_logger_metrics_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def lit_logger_service_get_logger_metrics_with_http_info(self, project_id: 'str', **kwargs) -> 'V1GetLoggerMetricsResponse':  # noqa: E501
        """lit_logger_service_get_logger_metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_logger_service_get_logger_metrics_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param list[str] user_ids:
        :param list[str] cloudspace_ids:
        :param list[str] app_ids:
        :param list[str] ids:
        :param list[str] names:
        :param datetime start:
        :param datetime end:
        :return: V1GetLoggerMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'user_ids', 'cloudspace_ids', 'app_ids', 'ids', 'names', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_logger_service_get_logger_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_logger_service_get_logger_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'user_ids' in params:
            query_params.append(('userIds', params['user_ids']))  # noqa: E501
            collection_formats['userIds'] = 'multi'  # noqa: E501
        if 'cloudspace_ids' in params:
            query_params.append(('cloudspaceIds', params['cloudspace_ids']))  # noqa: E501
            collection_formats['cloudspaceIds'] = 'multi'  # noqa: E501
        if 'app_ids' in params:
            query_params.append(('appIds', params['app_ids']))  # noqa: E501
            collection_formats['appIds'] = 'multi'  # noqa: E501
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'multi'  # noqa: E501
        if 'names' in params:
            query_params.append(('names', params['names']))  # noqa: E501
            collection_formats['names'] = 'multi'  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/logger-metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1GetLoggerMetricsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_logger_service_get_metrics_stream(self, **kwargs) -> 'V1MetricsStream':  # noqa: E501
        """lit_logger_service_get_metrics_stream  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_logger_service_get_metrics_stream(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_name:
        :param str project_owner_name:
        :param str name:
        :param str id:
        :param int version_number:
        :return: V1MetricsStream
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_logger_service_get_metrics_stream_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.lit_logger_service_get_metrics_stream_with_http_info(**kwargs)  # noqa: E501
            return data

    def lit_logger_service_get_metrics_stream_with_http_info(self, **kwargs) -> 'V1MetricsStream':  # noqa: E501
        """lit_logger_service_get_metrics_stream  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_logger_service_get_metrics_stream_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_name:
        :param str project_owner_name:
        :param str name:
        :param str id:
        :param int version_number:
        :return: V1MetricsStream
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_name', 'project_owner_name', 'name', 'id', 'version_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_logger_service_get_metrics_stream" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'project_name' in params:
            query_params.append(('projectName', params['project_name']))  # noqa: E501
        if 'project_owner_name' in params:
            query_params.append(('projectOwnerName', params['project_owner_name']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'version_number' in params:
            query_params.append(('versionNumber', params['version_number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/metrics-streams', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1MetricsStream',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_logger_service_get_shared_metrics_stream(self, id: 'str', **kwargs) -> 'V1MetricsStream':  # noqa: E501
        """lit_logger_service_get_shared_metrics_stream  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_logger_service_get_shared_metrics_stream(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str org_id:
        :param str user_id:
        :return: V1MetricsStream
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_logger_service_get_shared_metrics_stream_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_logger_service_get_shared_metrics_stream_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def lit_logger_service_get_shared_metrics_stream_with_http_info(self, id: 'str', **kwargs) -> 'V1MetricsStream':  # noqa: E501
        """lit_logger_service_get_shared_metrics_stream  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_logger_service_get_shared_metrics_stream_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str org_id:
        :param str user_id:
        :return: V1MetricsStream
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'org_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_logger_service_get_shared_metrics_stream" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `lit_logger_service_get_shared_metrics_stream`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'org_id' in params:
            query_params.append(('orgId', params['org_id']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/share/litlogger-metrics/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1MetricsStream',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_logger_service_list_logger_artifacts(self, project_id: 'str', metrics_stream_id: 'str', **kwargs) -> 'V1ListLoggerArtifactResponse':  # noqa: E501
        """lit_logger_service_list_logger_artifacts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_logger_service_list_logger_artifacts(project_id, metrics_stream_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str metrics_stream_id: (required)
        :return: V1ListLoggerArtifactResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_logger_service_list_logger_artifacts_with_http_info(project_id, metrics_stream_id, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_logger_service_list_logger_artifacts_with_http_info(project_id, metrics_stream_id, **kwargs)  # noqa: E501
            return data

    def lit_logger_service_list_logger_artifacts_with_http_info(self, project_id: 'str', metrics_stream_id: 'str', **kwargs) -> 'V1ListLoggerArtifactResponse':  # noqa: E501
        """lit_logger_service_list_logger_artifacts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_logger_service_list_logger_artifacts_with_http_info(project_id, metrics_stream_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str metrics_stream_id: (required)
        :return: V1ListLoggerArtifactResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'metrics_stream_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_logger_service_list_logger_artifacts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_logger_service_list_logger_artifacts`")  # noqa: E501
        # verify the required parameter 'metrics_stream_id' is set
        if ('metrics_stream_id' not in params or
                params['metrics_stream_id'] is None):
            raise ValueError("Missing the required parameter `metrics_stream_id` when calling `lit_logger_service_list_logger_artifacts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'metrics_stream_id' in params:
            path_params['metricsStreamId'] = params['metrics_stream_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/metrics-streams/{metricsStreamId}/logger-artifacts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListLoggerArtifactResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_logger_service_list_metrics_streams(self, project_id: 'str', **kwargs) -> 'V1ListMetricsStreamsResponse':  # noqa: E501
        """lit_logger_service_list_metrics_streams  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_logger_service_list_metrics_streams(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str user_id:
        :param str cloud_space_id:
        :param str app_id:
        :param int limit:
        :param int offset:
        :param str order_by:
        :return: V1ListMetricsStreamsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_logger_service_list_metrics_streams_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_logger_service_list_metrics_streams_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def lit_logger_service_list_metrics_streams_with_http_info(self, project_id: 'str', **kwargs) -> 'V1ListMetricsStreamsResponse':  # noqa: E501
        """lit_logger_service_list_metrics_streams  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_logger_service_list_metrics_streams_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str user_id:
        :param str cloud_space_id:
        :param str app_id:
        :param int limit:
        :param int offset:
        :param str order_by:
        :return: V1ListMetricsStreamsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'user_id', 'cloud_space_id', 'app_id', 'limit', 'offset', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_logger_service_list_metrics_streams" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_logger_service_list_metrics_streams`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'cloud_space_id' in params:
            query_params.append(('cloudSpaceId', params['cloud_space_id']))  # noqa: E501
        if 'app_id' in params:
            query_params.append(('appId', params['app_id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/metrics-stream/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListMetricsStreamsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_logger_service_update_metrics_stream(self, body: 'MetricsstreamIdBody', project_id: 'str', id: 'str', **kwargs) -> 'V1MetricsStream':  # noqa: E501
        """lit_logger_service_update_metrics_stream  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_logger_service_update_metrics_stream(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MetricsstreamIdBody body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1MetricsStream
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_logger_service_update_metrics_stream_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_logger_service_update_metrics_stream_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
            return data

    def lit_logger_service_update_metrics_stream_with_http_info(self, body: 'MetricsstreamIdBody', project_id: 'str', id: 'str', **kwargs) -> 'V1MetricsStream':  # noqa: E501
        """lit_logger_service_update_metrics_stream  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_logger_service_update_metrics_stream_with_http_info(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MetricsstreamIdBody body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1MetricsStream
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_logger_service_update_metrics_stream" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `lit_logger_service_update_metrics_stream`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_logger_service_update_metrics_stream`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `lit_logger_service_update_metrics_stream`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/metrics-stream/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1MetricsStream',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_logger_service_update_metrics_stream_visibility(self, body: 'IdVisibilityBody2', project_id: 'str', id: 'str', **kwargs) -> 'V1UpdateMetricsStreamVisibilityResponse':  # noqa: E501
        """lit_logger_service_update_metrics_stream_visibility  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_logger_service_update_metrics_stream_visibility(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdVisibilityBody2 body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1UpdateMetricsStreamVisibilityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_logger_service_update_metrics_stream_visibility_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_logger_service_update_metrics_stream_visibility_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
            return data

    def lit_logger_service_update_metrics_stream_visibility_with_http_info(self, body: 'IdVisibilityBody2', project_id: 'str', id: 'str', **kwargs) -> 'V1UpdateMetricsStreamVisibilityResponse':  # noqa: E501
        """lit_logger_service_update_metrics_stream_visibility  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_logger_service_update_metrics_stream_visibility_with_http_info(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdVisibilityBody2 body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1UpdateMetricsStreamVisibilityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_logger_service_update_metrics_stream_visibility" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `lit_logger_service_update_metrics_stream_visibility`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_logger_service_update_metrics_stream_visibility`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `lit_logger_service_update_metrics_stream_visibility`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/metrics-streams/{id}/visibility', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1UpdateMetricsStreamVisibilityResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_logger_service_update_shared_metrics_stream(self, body: 'LitloggermetricsIdBody', id: 'str', **kwargs) -> 'V1UpdateSharedMetricsStreamResponse':  # noqa: E501
        """lit_logger_service_update_shared_metrics_stream  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_logger_service_update_shared_metrics_stream(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LitloggermetricsIdBody body: (required)
        :param str id: (required)
        :return: V1UpdateSharedMetricsStreamResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_logger_service_update_shared_metrics_stream_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_logger_service_update_shared_metrics_stream_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def lit_logger_service_update_shared_metrics_stream_with_http_info(self, body: 'LitloggermetricsIdBody', id: 'str', **kwargs) -> 'V1UpdateSharedMetricsStreamResponse':  # noqa: E501
        """lit_logger_service_update_shared_metrics_stream  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_logger_service_update_shared_metrics_stream_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LitloggermetricsIdBody body: (required)
        :param str id: (required)
        :return: V1UpdateSharedMetricsStreamResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_logger_service_update_shared_metrics_stream" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `lit_logger_service_update_shared_metrics_stream`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `lit_logger_service_update_shared_metrics_stream`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/share/litlogger-metrics/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1UpdateSharedMetricsStreamResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
