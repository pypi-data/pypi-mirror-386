# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

from __future__ import absolute_import

import re  # noqa: F401
from typing import TYPE_CHECKING, Any

# python 2 and python 3 compatibility library
import six

from lightning_sdk.lightning_cloud.openapi.api_client import ApiClient

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class LitDatasetServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def lit_dataset_service_complete_lit_dataset_multi_part_upload(self, body: 'UploadIdCompleteBody', project_id: 'str', dataset_id: 'str', version: 'str', upload_id: 'str', **kwargs) -> 'V1CompleteLitDatasetMultiPartUploadResponse':  # noqa: E501
        """CompleteMultiPartUpload marks the given file-parts as completed/uploaded. Once all parts of a file are completed, the file will materialize in S3 storage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_dataset_service_complete_lit_dataset_multi_part_upload(body, project_id, dataset_id, version, upload_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UploadIdCompleteBody body: (required)
        :param str project_id: (required)
        :param str dataset_id: (required)
        :param str version: (required)
        :param str upload_id: (required)
        :return: V1CompleteLitDatasetMultiPartUploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_dataset_service_complete_lit_dataset_multi_part_upload_with_http_info(body, project_id, dataset_id, version, upload_id, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_dataset_service_complete_lit_dataset_multi_part_upload_with_http_info(body, project_id, dataset_id, version, upload_id, **kwargs)  # noqa: E501
            return data

    def lit_dataset_service_complete_lit_dataset_multi_part_upload_with_http_info(self, body: 'UploadIdCompleteBody', project_id: 'str', dataset_id: 'str', version: 'str', upload_id: 'str', **kwargs) -> 'V1CompleteLitDatasetMultiPartUploadResponse':  # noqa: E501
        """CompleteMultiPartUpload marks the given file-parts as completed/uploaded. Once all parts of a file are completed, the file will materialize in S3 storage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_dataset_service_complete_lit_dataset_multi_part_upload_with_http_info(body, project_id, dataset_id, version, upload_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UploadIdCompleteBody body: (required)
        :param str project_id: (required)
        :param str dataset_id: (required)
        :param str version: (required)
        :param str upload_id: (required)
        :return: V1CompleteLitDatasetMultiPartUploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'dataset_id', 'version', 'upload_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_dataset_service_complete_lit_dataset_multi_part_upload" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `lit_dataset_service_complete_lit_dataset_multi_part_upload`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_dataset_service_complete_lit_dataset_multi_part_upload`")  # noqa: E501
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params or
                params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `lit_dataset_service_complete_lit_dataset_multi_part_upload`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `lit_dataset_service_complete_lit_dataset_multi_part_upload`")  # noqa: E501
        # verify the required parameter 'upload_id' is set
        if ('upload_id' not in params or
                params['upload_id'] is None):
            raise ValueError("Missing the required parameter `upload_id` when calling `lit_dataset_service_complete_lit_dataset_multi_part_upload`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'dataset_id' in params:
            path_params['datasetId'] = params['dataset_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501
        if 'upload_id' in params:
            path_params['uploadId'] = params['upload_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/lit-datasets/{datasetId}/versions/{version}/uploads/{uploadId}/complete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1CompleteLitDatasetMultiPartUploadResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_dataset_service_complete_lit_dataset_upload(self, body: 'object', project_id: 'str', dataset_id: 'str', version: 'str', **kwargs) -> 'V1CompleteLitDatasetUploadResponse':  # noqa: E501
        """CompleteLitDatasetUpload marks the dataset upload as complete after all files have been uploaded. This marks the dataset as visible for list, delete, etc. operations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_dataset_service_complete_lit_dataset_upload(body, project_id, dataset_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param str project_id: (required)
        :param str dataset_id: (required)
        :param str version: (required)
        :return: V1CompleteLitDatasetUploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_dataset_service_complete_lit_dataset_upload_with_http_info(body, project_id, dataset_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_dataset_service_complete_lit_dataset_upload_with_http_info(body, project_id, dataset_id, version, **kwargs)  # noqa: E501
            return data

    def lit_dataset_service_complete_lit_dataset_upload_with_http_info(self, body: 'object', project_id: 'str', dataset_id: 'str', version: 'str', **kwargs) -> 'V1CompleteLitDatasetUploadResponse':  # noqa: E501
        """CompleteLitDatasetUpload marks the dataset upload as complete after all files have been uploaded. This marks the dataset as visible for list, delete, etc. operations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_dataset_service_complete_lit_dataset_upload_with_http_info(body, project_id, dataset_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param str project_id: (required)
        :param str dataset_id: (required)
        :param str version: (required)
        :return: V1CompleteLitDatasetUploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'dataset_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_dataset_service_complete_lit_dataset_upload" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `lit_dataset_service_complete_lit_dataset_upload`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_dataset_service_complete_lit_dataset_upload`")  # noqa: E501
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params or
                params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `lit_dataset_service_complete_lit_dataset_upload`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `lit_dataset_service_complete_lit_dataset_upload`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'dataset_id' in params:
            path_params['datasetId'] = params['dataset_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/lit-datasets/{datasetId}/versions/{version}/complete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1CompleteLitDatasetUploadResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_dataset_service_create_lit_dataset(self, body: 'ProjectIdLitdatasetsBody', project_id: 'str', **kwargs) -> 'V1LitDataset':  # noqa: E501
        """CreateLitDataset creates a new dataset.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_dataset_service_create_lit_dataset(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectIdLitdatasetsBody body: (required)
        :param str project_id: (required)
        :return: V1LitDataset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_dataset_service_create_lit_dataset_with_http_info(body, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_dataset_service_create_lit_dataset_with_http_info(body, project_id, **kwargs)  # noqa: E501
            return data

    def lit_dataset_service_create_lit_dataset_with_http_info(self, body: 'ProjectIdLitdatasetsBody', project_id: 'str', **kwargs) -> 'V1LitDataset':  # noqa: E501
        """CreateLitDataset creates a new dataset.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_dataset_service_create_lit_dataset_with_http_info(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectIdLitdatasetsBody body: (required)
        :param str project_id: (required)
        :return: V1LitDataset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_dataset_service_create_lit_dataset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `lit_dataset_service_create_lit_dataset`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_dataset_service_create_lit_dataset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/lit-datasets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1LitDataset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_dataset_service_create_lit_dataset_multi_part_upload(self, body: 'VersionUploadsBody', project_id: 'str', dataset_id: 'str', version: 'str', **kwargs) -> 'V1CreateLitDatasetMultiPartUploadResponse':  # noqa: E501
        """CreateMultiPartUpload initiates the multi-part upload of a file. Multiple requests can be sent to upload different files.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_dataset_service_create_lit_dataset_multi_part_upload(body, project_id, dataset_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VersionUploadsBody body: (required)
        :param str project_id: (required)
        :param str dataset_id: (required)
        :param str version: (required)
        :return: V1CreateLitDatasetMultiPartUploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_dataset_service_create_lit_dataset_multi_part_upload_with_http_info(body, project_id, dataset_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_dataset_service_create_lit_dataset_multi_part_upload_with_http_info(body, project_id, dataset_id, version, **kwargs)  # noqa: E501
            return data

    def lit_dataset_service_create_lit_dataset_multi_part_upload_with_http_info(self, body: 'VersionUploadsBody', project_id: 'str', dataset_id: 'str', version: 'str', **kwargs) -> 'V1CreateLitDatasetMultiPartUploadResponse':  # noqa: E501
        """CreateMultiPartUpload initiates the multi-part upload of a file. Multiple requests can be sent to upload different files.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_dataset_service_create_lit_dataset_multi_part_upload_with_http_info(body, project_id, dataset_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VersionUploadsBody body: (required)
        :param str project_id: (required)
        :param str dataset_id: (required)
        :param str version: (required)
        :return: V1CreateLitDatasetMultiPartUploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'dataset_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_dataset_service_create_lit_dataset_multi_part_upload" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `lit_dataset_service_create_lit_dataset_multi_part_upload`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_dataset_service_create_lit_dataset_multi_part_upload`")  # noqa: E501
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params or
                params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `lit_dataset_service_create_lit_dataset_multi_part_upload`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `lit_dataset_service_create_lit_dataset_multi_part_upload`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'dataset_id' in params:
            path_params['datasetId'] = params['dataset_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/lit-datasets/{datasetId}/versions/{version}/uploads', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1CreateLitDatasetMultiPartUploadResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_dataset_service_create_lit_dataset_version(self, body: 'DatasetIdVersionsBody', project_id: 'str', dataset_id: 'str', **kwargs) -> 'V1LitDatasetVersionArchive':  # noqa: E501
        """CreateLitDatasetVersion creates a new version of a dataset and marks the upload as incomplete. Files are expected to be uploaded using the multi-part upload APIs below, followed by a completion request after which the dataset will be fully visible (can list, delete etc.)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_dataset_service_create_lit_dataset_version(body, project_id, dataset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DatasetIdVersionsBody body: (required)
        :param str project_id: (required)
        :param str dataset_id: (required)
        :return: V1LitDatasetVersionArchive
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_dataset_service_create_lit_dataset_version_with_http_info(body, project_id, dataset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_dataset_service_create_lit_dataset_version_with_http_info(body, project_id, dataset_id, **kwargs)  # noqa: E501
            return data

    def lit_dataset_service_create_lit_dataset_version_with_http_info(self, body: 'DatasetIdVersionsBody', project_id: 'str', dataset_id: 'str', **kwargs) -> 'V1LitDatasetVersionArchive':  # noqa: E501
        """CreateLitDatasetVersion creates a new version of a dataset and marks the upload as incomplete. Files are expected to be uploaded using the multi-part upload APIs below, followed by a completion request after which the dataset will be fully visible (can list, delete etc.)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_dataset_service_create_lit_dataset_version_with_http_info(body, project_id, dataset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DatasetIdVersionsBody body: (required)
        :param str project_id: (required)
        :param str dataset_id: (required)
        :return: V1LitDatasetVersionArchive
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'dataset_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_dataset_service_create_lit_dataset_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `lit_dataset_service_create_lit_dataset_version`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_dataset_service_create_lit_dataset_version`")  # noqa: E501
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params or
                params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `lit_dataset_service_create_lit_dataset_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'dataset_id' in params:
            path_params['datasetId'] = params['dataset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/lit-datasets/{datasetId}/versions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1LitDatasetVersionArchive',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_dataset_service_delete_lit_dataset(self, project_id: 'str', dataset_id: 'str', **kwargs) -> 'V1DeleteLitDatasetResponse':  # noqa: E501
        """DeleteLitDataset is used to delete the dataset and all uploaded archives  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_dataset_service_delete_lit_dataset(project_id, dataset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str dataset_id: (required)
        :return: V1DeleteLitDatasetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_dataset_service_delete_lit_dataset_with_http_info(project_id, dataset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_dataset_service_delete_lit_dataset_with_http_info(project_id, dataset_id, **kwargs)  # noqa: E501
            return data

    def lit_dataset_service_delete_lit_dataset_with_http_info(self, project_id: 'str', dataset_id: 'str', **kwargs) -> 'V1DeleteLitDatasetResponse':  # noqa: E501
        """DeleteLitDataset is used to delete the dataset and all uploaded archives  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_dataset_service_delete_lit_dataset_with_http_info(project_id, dataset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str dataset_id: (required)
        :return: V1DeleteLitDatasetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'dataset_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_dataset_service_delete_lit_dataset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_dataset_service_delete_lit_dataset`")  # noqa: E501
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params or
                params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `lit_dataset_service_delete_lit_dataset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'dataset_id' in params:
            path_params['datasetId'] = params['dataset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/lit-datasets/{datasetId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DeleteLitDatasetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_dataset_service_delete_lit_dataset_version(self, project_id: 'str', dataset_id: 'str', version: 'str', **kwargs) -> 'V1DeleteLitDatasetVersionResponse':  # noqa: E501
        """DeleteLitDatasetVersion is used to delete a specific dataset version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_dataset_service_delete_lit_dataset_version(project_id, dataset_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str dataset_id: (required)
        :param str version: (required)
        :return: V1DeleteLitDatasetVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_dataset_service_delete_lit_dataset_version_with_http_info(project_id, dataset_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_dataset_service_delete_lit_dataset_version_with_http_info(project_id, dataset_id, version, **kwargs)  # noqa: E501
            return data

    def lit_dataset_service_delete_lit_dataset_version_with_http_info(self, project_id: 'str', dataset_id: 'str', version: 'str', **kwargs) -> 'V1DeleteLitDatasetVersionResponse':  # noqa: E501
        """DeleteLitDatasetVersion is used to delete a specific dataset version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_dataset_service_delete_lit_dataset_version_with_http_info(project_id, dataset_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str dataset_id: (required)
        :param str version: (required)
        :return: V1DeleteLitDatasetVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'dataset_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_dataset_service_delete_lit_dataset_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_dataset_service_delete_lit_dataset_version`")  # noqa: E501
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params or
                params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `lit_dataset_service_delete_lit_dataset_version`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `lit_dataset_service_delete_lit_dataset_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'dataset_id' in params:
            path_params['datasetId'] = params['dataset_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/lit-datasets/{datasetId}/versions/{version}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DeleteLitDatasetVersionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_dataset_service_get_lit_dataset_by_name(self, project_owner_name: 'str', project_name: 'str', dataset_name: 'str', **kwargs) -> 'V1LitDataset':  # noqa: E501
        """lit_dataset_service_get_lit_dataset_by_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_dataset_service_get_lit_dataset_by_name(project_owner_name, project_name, dataset_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_owner_name: (required)
        :param str project_name: (required)
        :param str dataset_name: (required)
        :return: V1LitDataset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_dataset_service_get_lit_dataset_by_name_with_http_info(project_owner_name, project_name, dataset_name, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_dataset_service_get_lit_dataset_by_name_with_http_info(project_owner_name, project_name, dataset_name, **kwargs)  # noqa: E501
            return data

    def lit_dataset_service_get_lit_dataset_by_name_with_http_info(self, project_owner_name: 'str', project_name: 'str', dataset_name: 'str', **kwargs) -> 'V1LitDataset':  # noqa: E501
        """lit_dataset_service_get_lit_dataset_by_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_dataset_service_get_lit_dataset_by_name_with_http_info(project_owner_name, project_name, dataset_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_owner_name: (required)
        :param str project_name: (required)
        :param str dataset_name: (required)
        :return: V1LitDataset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_owner_name', 'project_name', 'dataset_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_dataset_service_get_lit_dataset_by_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_owner_name' is set
        if ('project_owner_name' not in params or
                params['project_owner_name'] is None):
            raise ValueError("Missing the required parameter `project_owner_name` when calling `lit_dataset_service_get_lit_dataset_by_name`")  # noqa: E501
        # verify the required parameter 'project_name' is set
        if ('project_name' not in params or
                params['project_name'] is None):
            raise ValueError("Missing the required parameter `project_name` when calling `lit_dataset_service_get_lit_dataset_by_name`")  # noqa: E501
        # verify the required parameter 'dataset_name' is set
        if ('dataset_name' not in params or
                params['dataset_name'] is None):
            raise ValueError("Missing the required parameter `dataset_name` when calling `lit_dataset_service_get_lit_dataset_by_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_owner_name' in params:
            path_params['projectOwnerName'] = params['project_owner_name']  # noqa: E501
        if 'project_name' in params:
            path_params['projectName'] = params['project_name']  # noqa: E501
        if 'dataset_name' in params:
            path_params['datasetName'] = params['dataset_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectOwnerName}/{projectName}/lit-datasets/{datasetName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1LitDataset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_dataset_service_get_lit_dataset_file_upload_urls(self, body: 'UploadIdPartsBody', project_id: 'str', dataset_id: 'str', version: 'str', upload_id: 'str', **kwargs) -> 'V1GetLitDatasetFileUploadUrlsResponse':  # noqa: E501
        """GetLitDatasetFileUploadUrls requests pre-signed URLs for a given number of file parts.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_dataset_service_get_lit_dataset_file_upload_urls(body, project_id, dataset_id, version, upload_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UploadIdPartsBody body: (required)
        :param str project_id: (required)
        :param str dataset_id: (required)
        :param str version: (required)
        :param str upload_id: (required)
        :return: V1GetLitDatasetFileUploadUrlsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_dataset_service_get_lit_dataset_file_upload_urls_with_http_info(body, project_id, dataset_id, version, upload_id, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_dataset_service_get_lit_dataset_file_upload_urls_with_http_info(body, project_id, dataset_id, version, upload_id, **kwargs)  # noqa: E501
            return data

    def lit_dataset_service_get_lit_dataset_file_upload_urls_with_http_info(self, body: 'UploadIdPartsBody', project_id: 'str', dataset_id: 'str', version: 'str', upload_id: 'str', **kwargs) -> 'V1GetLitDatasetFileUploadUrlsResponse':  # noqa: E501
        """GetLitDatasetFileUploadUrls requests pre-signed URLs for a given number of file parts.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_dataset_service_get_lit_dataset_file_upload_urls_with_http_info(body, project_id, dataset_id, version, upload_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UploadIdPartsBody body: (required)
        :param str project_id: (required)
        :param str dataset_id: (required)
        :param str version: (required)
        :param str upload_id: (required)
        :return: V1GetLitDatasetFileUploadUrlsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'dataset_id', 'version', 'upload_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_dataset_service_get_lit_dataset_file_upload_urls" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `lit_dataset_service_get_lit_dataset_file_upload_urls`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_dataset_service_get_lit_dataset_file_upload_urls`")  # noqa: E501
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params or
                params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `lit_dataset_service_get_lit_dataset_file_upload_urls`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `lit_dataset_service_get_lit_dataset_file_upload_urls`")  # noqa: E501
        # verify the required parameter 'upload_id' is set
        if ('upload_id' not in params or
                params['upload_id'] is None):
            raise ValueError("Missing the required parameter `upload_id` when calling `lit_dataset_service_get_lit_dataset_file_upload_urls`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'dataset_id' in params:
            path_params['datasetId'] = params['dataset_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501
        if 'upload_id' in params:
            path_params['uploadId'] = params['upload_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/lit-datasets/{datasetId}/versions/{version}/uploads/{uploadId}/parts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1GetLitDatasetFileUploadUrlsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_dataset_service_get_lit_dataset_files_url(self, project_id: 'str', dataset_id: 'str', version: 'str', **kwargs) -> 'V1GetLitDatasetFilesUrlResponse':  # noqa: E501
        """GetLitDatasetFileUrl responds with a pre-signed url for a given file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_dataset_service_get_lit_dataset_files_url(project_id, dataset_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str dataset_id: (required)
        :param str version: (required)
        :param str page_size:
        :param str offset:
        :return: V1GetLitDatasetFilesUrlResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_dataset_service_get_lit_dataset_files_url_with_http_info(project_id, dataset_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_dataset_service_get_lit_dataset_files_url_with_http_info(project_id, dataset_id, version, **kwargs)  # noqa: E501
            return data

    def lit_dataset_service_get_lit_dataset_files_url_with_http_info(self, project_id: 'str', dataset_id: 'str', version: 'str', **kwargs) -> 'V1GetLitDatasetFilesUrlResponse':  # noqa: E501
        """GetLitDatasetFileUrl responds with a pre-signed url for a given file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_dataset_service_get_lit_dataset_files_url_with_http_info(project_id, dataset_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str dataset_id: (required)
        :param str version: (required)
        :param str page_size:
        :param str offset:
        :return: V1GetLitDatasetFilesUrlResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'dataset_id', 'version', 'page_size', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_dataset_service_get_lit_dataset_files_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_dataset_service_get_lit_dataset_files_url`")  # noqa: E501
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params or
                params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `lit_dataset_service_get_lit_dataset_files_url`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `lit_dataset_service_get_lit_dataset_files_url`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'dataset_id' in params:
            path_params['datasetId'] = params['dataset_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/lit-datasets/{datasetId}/versions/{version}/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1GetLitDatasetFilesUrlResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_dataset_service_get_lit_dataset_version(self, project_id: 'str', dataset_id: 'str', version: 'str', **kwargs) -> 'V1LitDatasetVersionArchive':  # noqa: E501
        """lit_dataset_service_get_lit_dataset_version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_dataset_service_get_lit_dataset_version(project_id, dataset_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str dataset_id: (required)
        :param str version: (required)
        :return: V1LitDatasetVersionArchive
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_dataset_service_get_lit_dataset_version_with_http_info(project_id, dataset_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_dataset_service_get_lit_dataset_version_with_http_info(project_id, dataset_id, version, **kwargs)  # noqa: E501
            return data

    def lit_dataset_service_get_lit_dataset_version_with_http_info(self, project_id: 'str', dataset_id: 'str', version: 'str', **kwargs) -> 'V1LitDatasetVersionArchive':  # noqa: E501
        """lit_dataset_service_get_lit_dataset_version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_dataset_service_get_lit_dataset_version_with_http_info(project_id, dataset_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str dataset_id: (required)
        :param str version: (required)
        :return: V1LitDatasetVersionArchive
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'dataset_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_dataset_service_get_lit_dataset_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_dataset_service_get_lit_dataset_version`")  # noqa: E501
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params or
                params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `lit_dataset_service_get_lit_dataset_version`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `lit_dataset_service_get_lit_dataset_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'dataset_id' in params:
            path_params['datasetId'] = params['dataset_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/lit-datasets/{datasetId}/versions/{version}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1LitDatasetVersionArchive',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_dataset_service_list_lit_dataset_versions(self, project_id: 'str', dataset_id: 'str', **kwargs) -> 'V1ListLitDatasetVersionsResponse':  # noqa: E501
        """lit_dataset_service_list_lit_dataset_versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_dataset_service_list_lit_dataset_versions(project_id, dataset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str dataset_id: (required)
        :return: V1ListLitDatasetVersionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_dataset_service_list_lit_dataset_versions_with_http_info(project_id, dataset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_dataset_service_list_lit_dataset_versions_with_http_info(project_id, dataset_id, **kwargs)  # noqa: E501
            return data

    def lit_dataset_service_list_lit_dataset_versions_with_http_info(self, project_id: 'str', dataset_id: 'str', **kwargs) -> 'V1ListLitDatasetVersionsResponse':  # noqa: E501
        """lit_dataset_service_list_lit_dataset_versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_dataset_service_list_lit_dataset_versions_with_http_info(project_id, dataset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str dataset_id: (required)
        :return: V1ListLitDatasetVersionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'dataset_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_dataset_service_list_lit_dataset_versions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_dataset_service_list_lit_dataset_versions`")  # noqa: E501
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params or
                params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `lit_dataset_service_list_lit_dataset_versions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'dataset_id' in params:
            path_params['datasetId'] = params['dataset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/lit-datasets/{datasetId}/versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListLitDatasetVersionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_dataset_service_list_lit_datasets(self, project_id: 'str', **kwargs) -> 'V1ListLitDatasetsResponse':  # noqa: E501
        """lit_dataset_service_list_lit_datasets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_dataset_service_list_lit_datasets(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str name:
        :return: V1ListLitDatasetsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_dataset_service_list_lit_datasets_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_dataset_service_list_lit_datasets_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def lit_dataset_service_list_lit_datasets_with_http_info(self, project_id: 'str', **kwargs) -> 'V1ListLitDatasetsResponse':  # noqa: E501
        """lit_dataset_service_list_lit_datasets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_dataset_service_list_lit_datasets_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str name:
        :return: V1ListLitDatasetsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_dataset_service_list_lit_datasets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_dataset_service_list_lit_datasets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/lit-datasets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListLitDatasetsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_dataset_service_set_lit_dataset_default_version(self, body: 'VersionDefaultBody', project_id: 'str', dataset_id: 'str', version: 'str', **kwargs) -> 'V1LitDataset':  # noqa: E501
        """lit_dataset_service_set_lit_dataset_default_version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_dataset_service_set_lit_dataset_default_version(body, project_id, dataset_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VersionDefaultBody body: (required)
        :param str project_id: (required)
        :param str dataset_id: (required)
        :param str version: (required)
        :return: V1LitDataset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_dataset_service_set_lit_dataset_default_version_with_http_info(body, project_id, dataset_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_dataset_service_set_lit_dataset_default_version_with_http_info(body, project_id, dataset_id, version, **kwargs)  # noqa: E501
            return data

    def lit_dataset_service_set_lit_dataset_default_version_with_http_info(self, body: 'VersionDefaultBody', project_id: 'str', dataset_id: 'str', version: 'str', **kwargs) -> 'V1LitDataset':  # noqa: E501
        """lit_dataset_service_set_lit_dataset_default_version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_dataset_service_set_lit_dataset_default_version_with_http_info(body, project_id, dataset_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VersionDefaultBody body: (required)
        :param str project_id: (required)
        :param str dataset_id: (required)
        :param str version: (required)
        :return: V1LitDataset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'dataset_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_dataset_service_set_lit_dataset_default_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `lit_dataset_service_set_lit_dataset_default_version`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_dataset_service_set_lit_dataset_default_version`")  # noqa: E501
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params or
                params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `lit_dataset_service_set_lit_dataset_default_version`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `lit_dataset_service_set_lit_dataset_default_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'dataset_id' in params:
            path_params['datasetId'] = params['dataset_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/lit-datasets/{datasetId}/versions/{version}/default', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1LitDataset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_dataset_service_update_lit_dataset(self, body: 'LitdatasetsDatasetIdBody', project_id: 'str', dataset_id: 'str', **kwargs) -> 'V1LitDataset':  # noqa: E501
        """UpdateLitDataset updates the dataset, in particular the dataset's name.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_dataset_service_update_lit_dataset(body, project_id, dataset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LitdatasetsDatasetIdBody body: (required)
        :param str project_id: (required)
        :param str dataset_id: (required)
        :return: V1LitDataset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_dataset_service_update_lit_dataset_with_http_info(body, project_id, dataset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_dataset_service_update_lit_dataset_with_http_info(body, project_id, dataset_id, **kwargs)  # noqa: E501
            return data

    def lit_dataset_service_update_lit_dataset_with_http_info(self, body: 'LitdatasetsDatasetIdBody', project_id: 'str', dataset_id: 'str', **kwargs) -> 'V1LitDataset':  # noqa: E501
        """UpdateLitDataset updates the dataset, in particular the dataset's name.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_dataset_service_update_lit_dataset_with_http_info(body, project_id, dataset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LitdatasetsDatasetIdBody body: (required)
        :param str project_id: (required)
        :param str dataset_id: (required)
        :return: V1LitDataset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'dataset_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_dataset_service_update_lit_dataset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `lit_dataset_service_update_lit_dataset`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_dataset_service_update_lit_dataset`")  # noqa: E501
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params or
                params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `lit_dataset_service_update_lit_dataset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'dataset_id' in params:
            path_params['datasetId'] = params['dataset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/lit-datasets/{datasetId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1LitDataset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_dataset_service_update_lit_dataset_version(self, body: 'VersionsVersionBody', project_id: 'str', dataset_id: 'str', version: 'str', **kwargs) -> 'V1LitDatasetVersionArchive':  # noqa: E501
        """UpdateLitDatasetVersion updates the dataset version, in particular the dataset version's name.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_dataset_service_update_lit_dataset_version(body, project_id, dataset_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VersionsVersionBody body: (required)
        :param str project_id: (required)
        :param str dataset_id: (required)
        :param str version: (required)
        :return: V1LitDatasetVersionArchive
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_dataset_service_update_lit_dataset_version_with_http_info(body, project_id, dataset_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_dataset_service_update_lit_dataset_version_with_http_info(body, project_id, dataset_id, version, **kwargs)  # noqa: E501
            return data

    def lit_dataset_service_update_lit_dataset_version_with_http_info(self, body: 'VersionsVersionBody', project_id: 'str', dataset_id: 'str', version: 'str', **kwargs) -> 'V1LitDatasetVersionArchive':  # noqa: E501
        """UpdateLitDatasetVersion updates the dataset version, in particular the dataset version's name.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_dataset_service_update_lit_dataset_version_with_http_info(body, project_id, dataset_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VersionsVersionBody body: (required)
        :param str project_id: (required)
        :param str dataset_id: (required)
        :param str version: (required)
        :return: V1LitDatasetVersionArchive
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'dataset_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_dataset_service_update_lit_dataset_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `lit_dataset_service_update_lit_dataset_version`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_dataset_service_update_lit_dataset_version`")  # noqa: E501
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params or
                params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `lit_dataset_service_update_lit_dataset_version`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `lit_dataset_service_update_lit_dataset_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'dataset_id' in params:
            path_params['datasetId'] = params['dataset_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/lit-datasets/{datasetId}/versions/{version}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1LitDatasetVersionArchive',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_dataset_service_update_lit_dataset_visibility(self, body: 'DatasetIdVisibilityBody', project_id: 'str', dataset_id: 'str', **kwargs) -> 'V1UpdateLitDatasetVisibilityResponse':  # noqa: E501
        """UpdateLitDatasetVisibility updates the dataset version, mainly switch between public and private  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_dataset_service_update_lit_dataset_visibility(body, project_id, dataset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DatasetIdVisibilityBody body: (required)
        :param str project_id: (required)
        :param str dataset_id: (required)
        :return: V1UpdateLitDatasetVisibilityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_dataset_service_update_lit_dataset_visibility_with_http_info(body, project_id, dataset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_dataset_service_update_lit_dataset_visibility_with_http_info(body, project_id, dataset_id, **kwargs)  # noqa: E501
            return data

    def lit_dataset_service_update_lit_dataset_visibility_with_http_info(self, body: 'DatasetIdVisibilityBody', project_id: 'str', dataset_id: 'str', **kwargs) -> 'V1UpdateLitDatasetVisibilityResponse':  # noqa: E501
        """UpdateLitDatasetVisibility updates the dataset version, mainly switch between public and private  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_dataset_service_update_lit_dataset_visibility_with_http_info(body, project_id, dataset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DatasetIdVisibilityBody body: (required)
        :param str project_id: (required)
        :param str dataset_id: (required)
        :return: V1UpdateLitDatasetVisibilityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'dataset_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_dataset_service_update_lit_dataset_visibility" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `lit_dataset_service_update_lit_dataset_visibility`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_dataset_service_update_lit_dataset_visibility`")  # noqa: E501
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params or
                params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `lit_dataset_service_update_lit_dataset_visibility`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'dataset_id' in params:
            path_params['datasetId'] = params['dataset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/lit-datasets/{datasetId}/visibility', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1UpdateLitDatasetVisibilityResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
