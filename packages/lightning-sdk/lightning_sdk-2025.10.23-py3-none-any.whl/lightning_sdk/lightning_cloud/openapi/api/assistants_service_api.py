# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

from __future__ import absolute_import

import re  # noqa: F401
from typing import TYPE_CHECKING, Any

# python 2 and python 3 compatibility library
import six

from lightning_sdk.lightning_cloud.openapi.api_client import ApiClient

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class AssistantsServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def assistants_service_contact_assistant_owner(self, body: 'IdContactownerBody', id: 'str', **kwargs) -> 'V1ContactAssistantOwnerResponse':  # noqa: E501
        """assistants_service_contact_assistant_owner  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_contact_assistant_owner(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdContactownerBody body: (required)
        :param str id: (required)
        :return: V1ContactAssistantOwnerResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assistants_service_contact_assistant_owner_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.assistants_service_contact_assistant_owner_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def assistants_service_contact_assistant_owner_with_http_info(self, body: 'IdContactownerBody', id: 'str', **kwargs) -> 'V1ContactAssistantOwnerResponse':  # noqa: E501
        """assistants_service_contact_assistant_owner  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_contact_assistant_owner_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdContactownerBody body: (required)
        :param str id: (required)
        :return: V1ContactAssistantOwnerResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assistants_service_contact_assistant_owner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `assistants_service_contact_assistant_owner`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assistants_service_contact_assistant_owner`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/agents/{id}/contact-owner', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ContactAssistantOwnerResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assistants_service_create_assistant(self, body: 'ProjectIdAgentsBody', project_id: 'str', **kwargs) -> 'V1Assistant':  # noqa: E501
        """assistants_service_create_assistant  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_create_assistant(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectIdAgentsBody body: (required)
        :param str project_id: (required)
        :return: V1Assistant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assistants_service_create_assistant_with_http_info(body, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assistants_service_create_assistant_with_http_info(body, project_id, **kwargs)  # noqa: E501
            return data

    def assistants_service_create_assistant_with_http_info(self, body: 'ProjectIdAgentsBody', project_id: 'str', **kwargs) -> 'V1Assistant':  # noqa: E501
        """assistants_service_create_assistant  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_create_assistant_with_http_info(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectIdAgentsBody body: (required)
        :param str project_id: (required)
        :return: V1Assistant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assistants_service_create_assistant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `assistants_service_create_assistant`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `assistants_service_create_assistant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/agents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1Assistant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assistants_service_create_assistant_managed_endpoint(self, body: 'ProjectIdAgentmanagedendpointsBody', project_id: 'str', **kwargs) -> 'V1CreateManagedEndpointResponse':  # noqa: E501
        """assistants_service_create_assistant_managed_endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_create_assistant_managed_endpoint(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectIdAgentmanagedendpointsBody body: (required)
        :param str project_id: (required)
        :return: V1CreateManagedEndpointResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assistants_service_create_assistant_managed_endpoint_with_http_info(body, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assistants_service_create_assistant_managed_endpoint_with_http_info(body, project_id, **kwargs)  # noqa: E501
            return data

    def assistants_service_create_assistant_managed_endpoint_with_http_info(self, body: 'ProjectIdAgentmanagedendpointsBody', project_id: 'str', **kwargs) -> 'V1CreateManagedEndpointResponse':  # noqa: E501
        """assistants_service_create_assistant_managed_endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_create_assistant_managed_endpoint_with_http_info(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectIdAgentmanagedendpointsBody body: (required)
        :param str project_id: (required)
        :return: V1CreateManagedEndpointResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assistants_service_create_assistant_managed_endpoint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `assistants_service_create_assistant_managed_endpoint`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `assistants_service_create_assistant_managed_endpoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/agent-managed-endpoints', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1CreateManagedEndpointResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assistants_service_create_model_metrics(self, body: 'ModelsModelIdBody', model_id: 'str', **kwargs) -> 'V1CreateModelMetricsResponse':  # noqa: E501
        """assistants_service_create_model_metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_create_model_metrics(body, model_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelsModelIdBody body: (required)
        :param str model_id: (required)
        :return: V1CreateModelMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assistants_service_create_model_metrics_with_http_info(body, model_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assistants_service_create_model_metrics_with_http_info(body, model_id, **kwargs)  # noqa: E501
            return data

    def assistants_service_create_model_metrics_with_http_info(self, body: 'ModelsModelIdBody', model_id: 'str', **kwargs) -> 'V1CreateModelMetricsResponse':  # noqa: E501
        """assistants_service_create_model_metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_create_model_metrics_with_http_info(body, model_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelsModelIdBody body: (required)
        :param str model_id: (required)
        :return: V1CreateModelMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'model_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assistants_service_create_model_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `assistants_service_create_model_metrics`")  # noqa: E501
        # verify the required parameter 'model_id' is set
        if ('model_id' not in params or
                params['model_id'] is None):
            raise ValueError("Missing the required parameter `model_id` when calling `assistants_service_create_model_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model_id' in params:
            path_params['modelId'] = params['model_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/agents/metrics/models/{modelId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1CreateModelMetricsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assistants_service_delete_assistant(self, project_id: 'str', id: 'str', **kwargs) -> 'V1DeleteAssistantResponse':  # noqa: E501
        """assistants_service_delete_assistant  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_delete_assistant(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :return: V1DeleteAssistantResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assistants_service_delete_assistant_with_http_info(project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.assistants_service_delete_assistant_with_http_info(project_id, id, **kwargs)  # noqa: E501
            return data

    def assistants_service_delete_assistant_with_http_info(self, project_id: 'str', id: 'str', **kwargs) -> 'V1DeleteAssistantResponse':  # noqa: E501
        """assistants_service_delete_assistant  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_delete_assistant_with_http_info(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :return: V1DeleteAssistantResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assistants_service_delete_assistant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `assistants_service_delete_assistant`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assistants_service_delete_assistant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/agents/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DeleteAssistantResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assistants_service_delete_assistant_managed_endpoint(self, project_id: 'str', id: 'str', **kwargs) -> 'V1DeleteManagedEndpointResponse':  # noqa: E501
        """assistants_service_delete_assistant_managed_endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_delete_assistant_managed_endpoint(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :return: V1DeleteManagedEndpointResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assistants_service_delete_assistant_managed_endpoint_with_http_info(project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.assistants_service_delete_assistant_managed_endpoint_with_http_info(project_id, id, **kwargs)  # noqa: E501
            return data

    def assistants_service_delete_assistant_managed_endpoint_with_http_info(self, project_id: 'str', id: 'str', **kwargs) -> 'V1DeleteManagedEndpointResponse':  # noqa: E501
        """assistants_service_delete_assistant_managed_endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_delete_assistant_managed_endpoint_with_http_info(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :return: V1DeleteManagedEndpointResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assistants_service_delete_assistant_managed_endpoint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `assistants_service_delete_assistant_managed_endpoint`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assistants_service_delete_assistant_managed_endpoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/agent-managed-endpoints/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DeleteManagedEndpointResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assistants_service_delete_conversation(self, assistant_id: 'str', id: 'str', **kwargs) -> 'V1DeleteConversationResponse':  # noqa: E501
        """assistants_service_delete_conversation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_delete_conversation(assistant_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assistant_id: (required)
        :param str id: (required)
        :param bool delete_data:
        :return: V1DeleteConversationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assistants_service_delete_conversation_with_http_info(assistant_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.assistants_service_delete_conversation_with_http_info(assistant_id, id, **kwargs)  # noqa: E501
            return data

    def assistants_service_delete_conversation_with_http_info(self, assistant_id: 'str', id: 'str', **kwargs) -> 'V1DeleteConversationResponse':  # noqa: E501
        """assistants_service_delete_conversation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_delete_conversation_with_http_info(assistant_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assistant_id: (required)
        :param str id: (required)
        :param bool delete_data:
        :return: V1DeleteConversationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['assistant_id', 'id', 'delete_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assistants_service_delete_conversation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'assistant_id' is set
        if ('assistant_id' not in params or
                params['assistant_id'] is None):
            raise ValueError("Missing the required parameter `assistant_id` when calling `assistants_service_delete_conversation`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assistants_service_delete_conversation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'assistant_id' in params:
            path_params['assistantId'] = params['assistant_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'delete_data' in params:
            query_params.append(('deleteData', params['delete_data']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/agents/{assistantId}/conversations/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DeleteConversationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assistants_service_get_assistant(self, id: 'str', **kwargs) -> 'V1Assistant':  # noqa: E501
        """assistants_service_get_assistant  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_get_assistant(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: V1Assistant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assistants_service_get_assistant_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.assistants_service_get_assistant_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def assistants_service_get_assistant_with_http_info(self, id: 'str', **kwargs) -> 'V1Assistant':  # noqa: E501
        """assistants_service_get_assistant  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_get_assistant_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: V1Assistant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assistants_service_get_assistant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assistants_service_get_assistant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/agents/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1Assistant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assistants_service_get_assistant_knowledge_status(self, id: 'str', **kwargs) -> 'V1AssistantKnowledgeStatus':  # noqa: E501
        """GetAssistantKnowledgeStatus get the status of current uploads. For new uploads (direct binary uploads ) there is a dedicated HTTP handler registered on POST /v1/agents/{id}/knowledge  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_get_assistant_knowledge_status(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: V1AssistantKnowledgeStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assistants_service_get_assistant_knowledge_status_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.assistants_service_get_assistant_knowledge_status_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def assistants_service_get_assistant_knowledge_status_with_http_info(self, id: 'str', **kwargs) -> 'V1AssistantKnowledgeStatus':  # noqa: E501
        """GetAssistantKnowledgeStatus get the status of current uploads. For new uploads (direct binary uploads ) there is a dedicated HTTP handler registered on POST /v1/agents/{id}/knowledge  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_get_assistant_knowledge_status_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: V1AssistantKnowledgeStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assistants_service_get_assistant_knowledge_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assistants_service_get_assistant_knowledge_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/agents/{id}/knowledge', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1AssistantKnowledgeStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assistants_service_get_conversation(self, assistant_id: 'str', id: 'str', **kwargs) -> 'V1Conversation':  # noqa: E501
        """assistants_service_get_conversation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_get_conversation(assistant_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assistant_id: (required)
        :param str id: (required)
        :return: V1Conversation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assistants_service_get_conversation_with_http_info(assistant_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.assistants_service_get_conversation_with_http_info(assistant_id, id, **kwargs)  # noqa: E501
            return data

    def assistants_service_get_conversation_with_http_info(self, assistant_id: 'str', id: 'str', **kwargs) -> 'V1Conversation':  # noqa: E501
        """assistants_service_get_conversation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_get_conversation_with_http_info(assistant_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assistant_id: (required)
        :param str id: (required)
        :return: V1Conversation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['assistant_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assistants_service_get_conversation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'assistant_id' is set
        if ('assistant_id' not in params or
                params['assistant_id'] is None):
            raise ValueError("Missing the required parameter `assistant_id` when calling `assistants_service_get_conversation`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assistants_service_get_conversation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'assistant_id' in params:
            path_params['assistantId'] = params['assistant_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/agents/{assistantId}/conversations/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1Conversation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assistants_service_get_latest_model_metrics(self, **kwargs) -> 'V1GetLatestModelMetricsResponse':  # noqa: E501
        """model metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_get_latest_model_metrics(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model_id:
        :return: V1GetLatestModelMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assistants_service_get_latest_model_metrics_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.assistants_service_get_latest_model_metrics_with_http_info(**kwargs)  # noqa: E501
            return data

    def assistants_service_get_latest_model_metrics_with_http_info(self, **kwargs) -> 'V1GetLatestModelMetricsResponse':  # noqa: E501
        """model metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_get_latest_model_metrics_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model_id:
        :return: V1GetLatestModelMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assistants_service_get_latest_model_metrics" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'model_id' in params:
            query_params.append(('modelId', params['model_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/agents/latest-metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1GetLatestModelMetricsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assistants_service_get_managed_model_assistant(self, model_name: 'str', **kwargs) -> 'V1Assistant':  # noqa: E501
        """Each managed model has a dedicated assistant for direct interaction. By using user_name, org_name, or model_provider as query parameters,  this endpoint retrieves that specific assistant only—excluding any other assistants that may use the same model.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_get_managed_model_assistant(model_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model_name: (required)
        :param str user_name:
        :param str org_name:
        :param str model_provider:
        :param str model_display_name:
        :return: V1Assistant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assistants_service_get_managed_model_assistant_with_http_info(model_name, **kwargs)  # noqa: E501
        else:
            (data) = self.assistants_service_get_managed_model_assistant_with_http_info(model_name, **kwargs)  # noqa: E501
            return data

    def assistants_service_get_managed_model_assistant_with_http_info(self, model_name: 'str', **kwargs) -> 'V1Assistant':  # noqa: E501
        """Each managed model has a dedicated assistant for direct interaction. By using user_name, org_name, or model_provider as query parameters,  this endpoint retrieves that specific assistant only—excluding any other assistants that may use the same model.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_get_managed_model_assistant_with_http_info(model_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model_name: (required)
        :param str user_name:
        :param str org_name:
        :param str model_provider:
        :param str model_display_name:
        :return: V1Assistant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model_name', 'user_name', 'org_name', 'model_provider', 'model_display_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assistants_service_get_managed_model_assistant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model_name' is set
        if ('model_name' not in params or
                params['model_name'] is None):
            raise ValueError("Missing the required parameter `model_name` when calling `assistants_service_get_managed_model_assistant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model_name' in params:
            path_params['modelName'] = params['model_name']  # noqa: E501

        query_params = []
        if 'user_name' in params:
            query_params.append(('userName', params['user_name']))  # noqa: E501
        if 'org_name' in params:
            query_params.append(('orgName', params['org_name']))  # noqa: E501
        if 'model_provider' in params:
            query_params.append(('modelProvider', params['model_provider']))  # noqa: E501
        if 'model_display_name' in params:
            query_params.append(('modelDisplayName', params['model_display_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/agents/managed-model/{modelName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1Assistant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assistants_service_get_managed_model_assistant2(self, **kwargs) -> 'V1Assistant':  # noqa: E501
        """Each managed model has a dedicated assistant for direct interaction. By using user_name, org_name, or model_provider as query parameters,  this endpoint retrieves that specific assistant only—excluding any other assistants that may use the same model.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_get_managed_model_assistant2(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_name:
        :param str org_name:
        :param str model_provider:
        :param str model_name:
        :param str model_display_name:
        :return: V1Assistant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assistants_service_get_managed_model_assistant2_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.assistants_service_get_managed_model_assistant2_with_http_info(**kwargs)  # noqa: E501
            return data

    def assistants_service_get_managed_model_assistant2_with_http_info(self, **kwargs) -> 'V1Assistant':  # noqa: E501
        """Each managed model has a dedicated assistant for direct interaction. By using user_name, org_name, or model_provider as query parameters,  this endpoint retrieves that specific assistant only—excluding any other assistants that may use the same model.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_get_managed_model_assistant2_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_name:
        :param str org_name:
        :param str model_provider:
        :param str model_name:
        :param str model_display_name:
        :return: V1Assistant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_name', 'org_name', 'model_provider', 'model_name', 'model_display_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assistants_service_get_managed_model_assistant2" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_name' in params:
            query_params.append(('userName', params['user_name']))  # noqa: E501
        if 'org_name' in params:
            query_params.append(('orgName', params['org_name']))  # noqa: E501
        if 'model_provider' in params:
            query_params.append(('modelProvider', params['model_provider']))  # noqa: E501
        if 'model_name' in params:
            query_params.append(('modelName', params['model_name']))  # noqa: E501
        if 'model_display_name' in params:
            query_params.append(('modelDisplayName', params['model_display_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/agents/managed-model', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1Assistant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assistants_service_get_managed_model_by_name(self, project_id: 'str', managed_endpoint_id: 'str', name: 'str', **kwargs) -> 'V1ManagedModel':  # noqa: E501
        """assistants_service_get_managed_model_by_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_get_managed_model_by_name(project_id, managed_endpoint_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str managed_endpoint_id: (required)
        :param str name: (required)
        :return: V1ManagedModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assistants_service_get_managed_model_by_name_with_http_info(project_id, managed_endpoint_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.assistants_service_get_managed_model_by_name_with_http_info(project_id, managed_endpoint_id, name, **kwargs)  # noqa: E501
            return data

    def assistants_service_get_managed_model_by_name_with_http_info(self, project_id: 'str', managed_endpoint_id: 'str', name: 'str', **kwargs) -> 'V1ManagedModel':  # noqa: E501
        """assistants_service_get_managed_model_by_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_get_managed_model_by_name_with_http_info(project_id, managed_endpoint_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str managed_endpoint_id: (required)
        :param str name: (required)
        :return: V1ManagedModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'managed_endpoint_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assistants_service_get_managed_model_by_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `assistants_service_get_managed_model_by_name`")  # noqa: E501
        # verify the required parameter 'managed_endpoint_id' is set
        if ('managed_endpoint_id' not in params or
                params['managed_endpoint_id'] is None):
            raise ValueError("Missing the required parameter `managed_endpoint_id` when calling `assistants_service_get_managed_model_by_name`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `assistants_service_get_managed_model_by_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'managed_endpoint_id' in params:
            path_params['managedEndpointId'] = params['managed_endpoint_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/agent-managed-endpoints/{managedEndpointId}/model/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ManagedModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assistants_service_get_model_metrics(self, model_id: 'str', **kwargs) -> 'V1GetModelMetricsResponse':  # noqa: E501
        """assistants_service_get_model_metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_get_model_metrics(model_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model_id: (required)
        :param datetime _from:
        :param datetime to:
        :return: V1GetModelMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assistants_service_get_model_metrics_with_http_info(model_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assistants_service_get_model_metrics_with_http_info(model_id, **kwargs)  # noqa: E501
            return data

    def assistants_service_get_model_metrics_with_http_info(self, model_id: 'str', **kwargs) -> 'V1GetModelMetricsResponse':  # noqa: E501
        """assistants_service_get_model_metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_get_model_metrics_with_http_info(model_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model_id: (required)
        :param datetime _from:
        :param datetime to:
        :return: V1GetModelMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model_id', '_from', 'to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assistants_service_get_model_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model_id' is set
        if ('model_id' not in params or
                params['model_id'] is None):
            raise ValueError("Missing the required parameter `model_id` when calling `assistants_service_get_model_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model_id' in params:
            path_params['modelId'] = params['model_id']  # noqa: E501

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/agents/metrics/models/{modelId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1GetModelMetricsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assistants_service_get_published_managed_endpoint(self, **kwargs) -> 'V1ManagedEndpoint':  # noqa: E501
        """GetPublishedManagedEndpoint returns a managed endpoint with a single specific managed endpoint model included in modelsMetadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_get_published_managed_endpoint(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:
        :param str name:
        :return: V1ManagedEndpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assistants_service_get_published_managed_endpoint_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.assistants_service_get_published_managed_endpoint_with_http_info(**kwargs)  # noqa: E501
            return data

    def assistants_service_get_published_managed_endpoint_with_http_info(self, **kwargs) -> 'V1ManagedEndpoint':  # noqa: E501
        """GetPublishedManagedEndpoint returns a managed endpoint with a single specific managed endpoint model included in modelsMetadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_get_published_managed_endpoint_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:
        :param str name:
        :return: V1ManagedEndpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assistants_service_get_published_managed_endpoint" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/agent-published-managed-model', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ManagedEndpoint',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assistants_service_list_assistant_managed_endpoints(self, **kwargs) -> 'V1ListManagedEndpointsResponse':  # noqa: E501
        """ListAssistantManagedEndpoints returns a list of managed endpoint that users can use when creating their own assistant. These are served and managed by Lightning or 3rd parties  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_list_assistant_managed_endpoints(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id:
        :param str org_id:
        :return: V1ListManagedEndpointsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assistants_service_list_assistant_managed_endpoints_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.assistants_service_list_assistant_managed_endpoints_with_http_info(**kwargs)  # noqa: E501
            return data

    def assistants_service_list_assistant_managed_endpoints_with_http_info(self, **kwargs) -> 'V1ListManagedEndpointsResponse':  # noqa: E501
        """ListAssistantManagedEndpoints returns a list of managed endpoint that users can use when creating their own assistant. These are served and managed by Lightning or 3rd parties  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_list_assistant_managed_endpoints_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id:
        :param str org_id:
        :return: V1ListManagedEndpointsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'org_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assistants_service_list_assistant_managed_endpoints" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'org_id' in params:
            query_params.append(('orgId', params['org_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/agent-managed-endpoints', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListManagedEndpointsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assistants_service_list_assistants(self, **kwargs) -> 'V1ListAssistantsResponse':  # noqa: E501
        """assistants_service_list_assistants  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_list_assistants(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id:
        :param str project_id:
        :param str cloudspace_id:
        :param bool published:
        :param str internal_name:
        :param str user_id:
        :param bool cloudy_compatible:
        :param bool model_assistants_only:
        :return: V1ListAssistantsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assistants_service_list_assistants_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.assistants_service_list_assistants_with_http_info(**kwargs)  # noqa: E501
            return data

    def assistants_service_list_assistants_with_http_info(self, **kwargs) -> 'V1ListAssistantsResponse':  # noqa: E501
        """assistants_service_list_assistants  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_list_assistants_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id:
        :param str project_id:
        :param str cloudspace_id:
        :param bool published:
        :param str internal_name:
        :param str user_id:
        :param bool cloudy_compatible:
        :param bool model_assistants_only:
        :return: V1ListAssistantsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_id', 'project_id', 'cloudspace_id', 'published', 'internal_name', 'user_id', 'cloudy_compatible', 'model_assistants_only']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assistants_service_list_assistants" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'org_id' in params:
            query_params.append(('orgId', params['org_id']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'cloudspace_id' in params:
            query_params.append(('cloudspaceId', params['cloudspace_id']))  # noqa: E501
        if 'published' in params:
            query_params.append(('published', params['published']))  # noqa: E501
        if 'internal_name' in params:
            query_params.append(('internalName', params['internal_name']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'cloudy_compatible' in params:
            query_params.append(('cloudyCompatible', params['cloudy_compatible']))  # noqa: E501
        if 'model_assistants_only' in params:
            query_params.append(('modelAssistantsOnly', params['model_assistants_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/agents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListAssistantsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assistants_service_list_conversations(self, assistant_id: 'str', **kwargs) -> 'V1ListConversationsResponse':  # noqa: E501
        """Conversations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_list_conversations(assistant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assistant_id: (required)
        :param str page_token:
        :param bool filter_internal:
        :return: V1ListConversationsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assistants_service_list_conversations_with_http_info(assistant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assistants_service_list_conversations_with_http_info(assistant_id, **kwargs)  # noqa: E501
            return data

    def assistants_service_list_conversations_with_http_info(self, assistant_id: 'str', **kwargs) -> 'V1ListConversationsResponse':  # noqa: E501
        """Conversations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_list_conversations_with_http_info(assistant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assistant_id: (required)
        :param str page_token:
        :param bool filter_internal:
        :return: V1ListConversationsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['assistant_id', 'page_token', 'filter_internal']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assistants_service_list_conversations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'assistant_id' is set
        if ('assistant_id' not in params or
                params['assistant_id'] is None):
            raise ValueError("Missing the required parameter `assistant_id` when calling `assistants_service_list_conversations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'assistant_id' in params:
            path_params['assistantId'] = params['assistant_id']  # noqa: E501

        query_params = []
        if 'page_token' in params:
            query_params.append(('pageToken', params['page_token']))  # noqa: E501
        if 'filter_internal' in params:
            query_params.append(('filterInternal', params['filter_internal']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/agents/{assistantId}/conversations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListConversationsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assistants_service_list_published_managed_endpoints(self, **kwargs) -> 'V1ListPublishedManagedEndpointsResponse':  # noqa: E501
        """ListPublishedManagedEndpoints returns a list of all available managed endpoints that are published as Models  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_list_published_managed_endpoints(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id:
        :return: V1ListPublishedManagedEndpointsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assistants_service_list_published_managed_endpoints_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.assistants_service_list_published_managed_endpoints_with_http_info(**kwargs)  # noqa: E501
            return data

    def assistants_service_list_published_managed_endpoints_with_http_info(self, **kwargs) -> 'V1ListPublishedManagedEndpointsResponse':  # noqa: E501
        """ListPublishedManagedEndpoints returns a list of all available managed endpoints that are published as Models  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_list_published_managed_endpoints_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id:
        :return: V1ListPublishedManagedEndpointsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assistants_service_list_published_managed_endpoints" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'org_id' in params:
            query_params.append(('orgId', params['org_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/agent-published-managed-endpoints', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListPublishedManagedEndpointsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assistants_service_start_conversation(self, body: 'AssistantIdConversationsBody', assistant_id: 'str', **kwargs) -> 'StreamResultOfV1ConversationResponseChunk':  # noqa: E501
        """assistants_service_start_conversation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_start_conversation(body, assistant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssistantIdConversationsBody body: (required)
        :param str assistant_id: (required)
        :return: StreamResultOfV1ConversationResponseChunk
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assistants_service_start_conversation_with_http_info(body, assistant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assistants_service_start_conversation_with_http_info(body, assistant_id, **kwargs)  # noqa: E501
            return data

    def assistants_service_start_conversation_with_http_info(self, body: 'AssistantIdConversationsBody', assistant_id: 'str', **kwargs) -> 'StreamResultOfV1ConversationResponseChunk':  # noqa: E501
        """assistants_service_start_conversation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_start_conversation_with_http_info(body, assistant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssistantIdConversationsBody body: (required)
        :param str assistant_id: (required)
        :return: StreamResultOfV1ConversationResponseChunk
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'assistant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assistants_service_start_conversation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `assistants_service_start_conversation`")  # noqa: E501
        # verify the required parameter 'assistant_id' is set
        if ('assistant_id' not in params or
                params['assistant_id'] is None):
            raise ValueError("Missing the required parameter `assistant_id` when calling `assistants_service_start_conversation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'assistant_id' in params:
            path_params['assistantId'] = params['assistant_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/agents/{assistantId}/conversations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StreamResultOfV1ConversationResponseChunk',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assistants_service_update_assistant(self, body: 'AgentsIdBody', project_id: 'str', id: 'str', **kwargs) -> 'V1Assistant':  # noqa: E501
        """assistants_service_update_assistant  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_update_assistant(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AgentsIdBody body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1Assistant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assistants_service_update_assistant_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.assistants_service_update_assistant_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
            return data

    def assistants_service_update_assistant_with_http_info(self, body: 'AgentsIdBody', project_id: 'str', id: 'str', **kwargs) -> 'V1Assistant':  # noqa: E501
        """assistants_service_update_assistant  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_update_assistant_with_http_info(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AgentsIdBody body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1Assistant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assistants_service_update_assistant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `assistants_service_update_assistant`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `assistants_service_update_assistant`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assistants_service_update_assistant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/agents/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1Assistant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assistants_service_update_assistant_managed_endpoint(self, body: 'AgentmanagedendpointsIdBody', project_id: 'str', id: 'str', **kwargs) -> 'V1ManagedEndpoint':  # noqa: E501
        """assistants_service_update_assistant_managed_endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_update_assistant_managed_endpoint(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AgentmanagedendpointsIdBody body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1ManagedEndpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assistants_service_update_assistant_managed_endpoint_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.assistants_service_update_assistant_managed_endpoint_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
            return data

    def assistants_service_update_assistant_managed_endpoint_with_http_info(self, body: 'AgentmanagedendpointsIdBody', project_id: 'str', id: 'str', **kwargs) -> 'V1ManagedEndpoint':  # noqa: E501
        """assistants_service_update_assistant_managed_endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_update_assistant_managed_endpoint_with_http_info(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AgentmanagedendpointsIdBody body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1ManagedEndpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assistants_service_update_assistant_managed_endpoint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `assistants_service_update_assistant_managed_endpoint`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `assistants_service_update_assistant_managed_endpoint`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assistants_service_update_assistant_managed_endpoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/agent-managed-endpoints/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ManagedEndpoint',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assistants_service_update_assistant_managed_endpoint_model(self, body: 'ModelsIdBody', project_id: 'str', managed_endpoint_id: 'str', id: 'str', **kwargs) -> 'V1ManagedModel':  # noqa: E501
        """assistants_service_update_assistant_managed_endpoint_model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_update_assistant_managed_endpoint_model(body, project_id, managed_endpoint_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelsIdBody body: (required)
        :param str project_id: (required)
        :param str managed_endpoint_id: (required)
        :param str id: (required)
        :return: V1ManagedModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assistants_service_update_assistant_managed_endpoint_model_with_http_info(body, project_id, managed_endpoint_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.assistants_service_update_assistant_managed_endpoint_model_with_http_info(body, project_id, managed_endpoint_id, id, **kwargs)  # noqa: E501
            return data

    def assistants_service_update_assistant_managed_endpoint_model_with_http_info(self, body: 'ModelsIdBody', project_id: 'str', managed_endpoint_id: 'str', id: 'str', **kwargs) -> 'V1ManagedModel':  # noqa: E501
        """assistants_service_update_assistant_managed_endpoint_model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_update_assistant_managed_endpoint_model_with_http_info(body, project_id, managed_endpoint_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelsIdBody body: (required)
        :param str project_id: (required)
        :param str managed_endpoint_id: (required)
        :param str id: (required)
        :return: V1ManagedModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'managed_endpoint_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assistants_service_update_assistant_managed_endpoint_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `assistants_service_update_assistant_managed_endpoint_model`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `assistants_service_update_assistant_managed_endpoint_model`")  # noqa: E501
        # verify the required parameter 'managed_endpoint_id' is set
        if ('managed_endpoint_id' not in params or
                params['managed_endpoint_id'] is None):
            raise ValueError("Missing the required parameter `managed_endpoint_id` when calling `assistants_service_update_assistant_managed_endpoint_model`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assistants_service_update_assistant_managed_endpoint_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'managed_endpoint_id' in params:
            path_params['managedEndpointId'] = params['managed_endpoint_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/agent-managed-endpoints/{managedEndpointId}/models/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ManagedModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assistants_service_update_conversation(self, body: 'ConversationsIdBody', assistant_id: 'str', id: 'str', **kwargs) -> 'V1Conversation':  # noqa: E501
        """assistants_service_update_conversation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_update_conversation(body, assistant_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationsIdBody body: (required)
        :param str assistant_id: (required)
        :param str id: (required)
        :return: V1Conversation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assistants_service_update_conversation_with_http_info(body, assistant_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.assistants_service_update_conversation_with_http_info(body, assistant_id, id, **kwargs)  # noqa: E501
            return data

    def assistants_service_update_conversation_with_http_info(self, body: 'ConversationsIdBody', assistant_id: 'str', id: 'str', **kwargs) -> 'V1Conversation':  # noqa: E501
        """assistants_service_update_conversation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_update_conversation_with_http_info(body, assistant_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationsIdBody body: (required)
        :param str assistant_id: (required)
        :param str id: (required)
        :return: V1Conversation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'assistant_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assistants_service_update_conversation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `assistants_service_update_conversation`")  # noqa: E501
        # verify the required parameter 'assistant_id' is set
        if ('assistant_id' not in params or
                params['assistant_id'] is None):
            raise ValueError("Missing the required parameter `assistant_id` when calling `assistants_service_update_conversation`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assistants_service_update_conversation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'assistant_id' in params:
            path_params['assistantId'] = params['assistant_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/agents/{assistantId}/conversations/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1Conversation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assistants_service_update_conversation_like(self, body: 'ConversationsIdBody1', project_id: 'str', assistant_id: 'str', id: 'str', **kwargs) -> 'V1UpdateConversationLikeResponse':  # noqa: E501
        """assistants_service_update_conversation_like  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_update_conversation_like(body, project_id, assistant_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationsIdBody1 body: (required)
        :param str project_id: (required)
        :param str assistant_id: (required)
        :param str id: (required)
        :return: V1UpdateConversationLikeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assistants_service_update_conversation_like_with_http_info(body, project_id, assistant_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.assistants_service_update_conversation_like_with_http_info(body, project_id, assistant_id, id, **kwargs)  # noqa: E501
            return data

    def assistants_service_update_conversation_like_with_http_info(self, body: 'ConversationsIdBody1', project_id: 'str', assistant_id: 'str', id: 'str', **kwargs) -> 'V1UpdateConversationLikeResponse':  # noqa: E501
        """assistants_service_update_conversation_like  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_update_conversation_like_with_http_info(body, project_id, assistant_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationsIdBody1 body: (required)
        :param str project_id: (required)
        :param str assistant_id: (required)
        :param str id: (required)
        :return: V1UpdateConversationLikeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'assistant_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assistants_service_update_conversation_like" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `assistants_service_update_conversation_like`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `assistants_service_update_conversation_like`")  # noqa: E501
        # verify the required parameter 'assistant_id' is set
        if ('assistant_id' not in params or
                params['assistant_id'] is None):
            raise ValueError("Missing the required parameter `assistant_id` when calling `assistants_service_update_conversation_like`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assistants_service_update_conversation_like`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'assistant_id' in params:
            path_params['assistantId'] = params['assistant_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/agents/{assistantId}/conversations/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1UpdateConversationLikeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assistants_service_update_conversation_message_like(self, body: 'MessagesIdBody', project_id: 'str', assistant_id: 'str', conversation_id: 'str', id: 'str', **kwargs) -> 'V1UpdateConversationMessageLikeResponse':  # noqa: E501
        """assistants_service_update_conversation_message_like  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_update_conversation_message_like(body, project_id, assistant_id, conversation_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessagesIdBody body: (required)
        :param str project_id: (required)
        :param str assistant_id: (required)
        :param str conversation_id: (required)
        :param str id: (required)
        :return: V1UpdateConversationMessageLikeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assistants_service_update_conversation_message_like_with_http_info(body, project_id, assistant_id, conversation_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.assistants_service_update_conversation_message_like_with_http_info(body, project_id, assistant_id, conversation_id, id, **kwargs)  # noqa: E501
            return data

    def assistants_service_update_conversation_message_like_with_http_info(self, body: 'MessagesIdBody', project_id: 'str', assistant_id: 'str', conversation_id: 'str', id: 'str', **kwargs) -> 'V1UpdateConversationMessageLikeResponse':  # noqa: E501
        """assistants_service_update_conversation_message_like  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_update_conversation_message_like_with_http_info(body, project_id, assistant_id, conversation_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessagesIdBody body: (required)
        :param str project_id: (required)
        :param str assistant_id: (required)
        :param str conversation_id: (required)
        :param str id: (required)
        :return: V1UpdateConversationMessageLikeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'assistant_id', 'conversation_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assistants_service_update_conversation_message_like" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `assistants_service_update_conversation_message_like`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `assistants_service_update_conversation_message_like`")  # noqa: E501
        # verify the required parameter 'assistant_id' is set
        if ('assistant_id' not in params or
                params['assistant_id'] is None):
            raise ValueError("Missing the required parameter `assistant_id` when calling `assistants_service_update_conversation_message_like`")  # noqa: E501
        # verify the required parameter 'conversation_id' is set
        if ('conversation_id' not in params or
                params['conversation_id'] is None):
            raise ValueError("Missing the required parameter `conversation_id` when calling `assistants_service_update_conversation_message_like`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assistants_service_update_conversation_message_like`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'assistant_id' in params:
            path_params['assistantId'] = params['assistant_id']  # noqa: E501
        if 'conversation_id' in params:
            path_params['conversationId'] = params['conversation_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/agents/{assistantId}/conversations/{conversationId}/messages/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1UpdateConversationMessageLikeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assistants_service_validate_assistant_managed_endpoint(self, body: 'V1ValidateManagedEndpointRequest', **kwargs) -> 'V1ValidateManagedEndpointResponse':  # noqa: E501
        """assistants_service_validate_assistant_managed_endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_validate_assistant_managed_endpoint(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1ValidateManagedEndpointRequest body: (required)
        :return: V1ValidateManagedEndpointResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assistants_service_validate_assistant_managed_endpoint_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.assistants_service_validate_assistant_managed_endpoint_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def assistants_service_validate_assistant_managed_endpoint_with_http_info(self, body: 'V1ValidateManagedEndpointRequest', **kwargs) -> 'V1ValidateManagedEndpointResponse':  # noqa: E501
        """assistants_service_validate_assistant_managed_endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_validate_assistant_managed_endpoint_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1ValidateManagedEndpointRequest body: (required)
        :return: V1ValidateManagedEndpointResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assistants_service_validate_assistant_managed_endpoint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `assistants_service_validate_assistant_managed_endpoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/agent-managed-endpoints/valid', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ValidateManagedEndpointResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assistants_service_validate_assistant_status(self, body: 'object', id: 'str', **kwargs) -> 'V1ValidateAssistantStatusResponse':  # noqa: E501
        """ValidateAssistantStatus validates the status of the assistant This is used to check if the assistant is online and ready to be used or not  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_validate_assistant_status(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param str id: (required)
        :return: V1ValidateAssistantStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assistants_service_validate_assistant_status_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.assistants_service_validate_assistant_status_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def assistants_service_validate_assistant_status_with_http_info(self, body: 'object', id: 'str', **kwargs) -> 'V1ValidateAssistantStatusResponse':  # noqa: E501
        """ValidateAssistantStatus validates the status of the assistant This is used to check if the assistant is online and ready to be used or not  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_validate_assistant_status_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param str id: (required)
        :return: V1ValidateAssistantStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assistants_service_validate_assistant_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `assistants_service_validate_assistant_status`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assistants_service_validate_assistant_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/agents/{id}/valid', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ValidateAssistantStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assistants_service_validate_managed_model(self, body: 'object', project_id: 'str', id: 'str', model_id: 'str', **kwargs) -> 'V1ValidateManagedModelResponse':  # noqa: E501
        """assistants_service_validate_managed_model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_validate_managed_model(body, project_id, id, model_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :param str model_id: (required)
        :return: V1ValidateManagedModelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assistants_service_validate_managed_model_with_http_info(body, project_id, id, model_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assistants_service_validate_managed_model_with_http_info(body, project_id, id, model_id, **kwargs)  # noqa: E501
            return data

    def assistants_service_validate_managed_model_with_http_info(self, body: 'object', project_id: 'str', id: 'str', model_id: 'str', **kwargs) -> 'V1ValidateManagedModelResponse':  # noqa: E501
        """assistants_service_validate_managed_model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assistants_service_validate_managed_model_with_http_info(body, project_id, id, model_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :param str model_id: (required)
        :return: V1ValidateManagedModelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'id', 'model_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assistants_service_validate_managed_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `assistants_service_validate_managed_model`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `assistants_service_validate_managed_model`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assistants_service_validate_managed_model`")  # noqa: E501
        # verify the required parameter 'model_id' is set
        if ('model_id' not in params or
                params['model_id'] is None):
            raise ValueError("Missing the required parameter `model_id` when calling `assistants_service_validate_managed_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'model_id' in params:
            path_params['modelId'] = params['model_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/agent-managed-models/{id}/model/{modelId}/valid', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ValidateManagedModelResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
