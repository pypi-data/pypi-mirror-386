# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

from __future__ import absolute_import

import re  # noqa: F401
from typing import TYPE_CHECKING, Any

# python 2 and python 3 compatibility library
import six

from lightning_sdk.lightning_cloud.openapi.api_client import ApiClient

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class StorageServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def storage_service_abort_storage_transfer(self, body: 'object', project_id: 'str', id: 'str', **kwargs) -> 'V1AbortStorageTransferResponse':  # noqa: E501
        """storage_service_abort_storage_transfer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_abort_storage_transfer(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1AbortStorageTransferResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_service_abort_storage_transfer_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_service_abort_storage_transfer_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
            return data

    def storage_service_abort_storage_transfer_with_http_info(self, body: 'object', project_id: 'str', id: 'str', **kwargs) -> 'V1AbortStorageTransferResponse':  # noqa: E501
        """storage_service_abort_storage_transfer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_abort_storage_transfer_with_http_info(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1AbortStorageTransferResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_service_abort_storage_transfer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `storage_service_abort_storage_transfer`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `storage_service_abort_storage_transfer`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `storage_service_abort_storage_transfer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/storage-transfers/{id}/abort', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1AbortStorageTransferResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_service_complete_upload_project_artifact(self, body: 'StorageCompleteBody', project_id: 'str', **kwargs) -> 'V1CompleteUploadProjectArtifactResponse':  # noqa: E501
        """storage_service_complete_upload_project_artifact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_complete_upload_project_artifact(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StorageCompleteBody body: (required)
        :param str project_id: (required)
        :return: V1CompleteUploadProjectArtifactResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_service_complete_upload_project_artifact_with_http_info(body, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_service_complete_upload_project_artifact_with_http_info(body, project_id, **kwargs)  # noqa: E501
            return data

    def storage_service_complete_upload_project_artifact_with_http_info(self, body: 'StorageCompleteBody', project_id: 'str', **kwargs) -> 'V1CompleteUploadProjectArtifactResponse':  # noqa: E501
        """storage_service_complete_upload_project_artifact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_complete_upload_project_artifact_with_http_info(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StorageCompleteBody body: (required)
        :param str project_id: (required)
        :return: V1CompleteUploadProjectArtifactResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_service_complete_upload_project_artifact" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `storage_service_complete_upload_project_artifact`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `storage_service_complete_upload_project_artifact`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/storage/complete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1CompleteUploadProjectArtifactResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_service_complete_upload_temporary_artifact(self, body: 'V1CompleteUploadTemporaryArtifactRequest', **kwargs) -> 'V1CompleteUploadProjectArtifactResponse':  # noqa: E501
        """storage_service_complete_upload_temporary_artifact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_complete_upload_temporary_artifact(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CompleteUploadTemporaryArtifactRequest body: (required)
        :return: V1CompleteUploadProjectArtifactResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_service_complete_upload_temporary_artifact_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_service_complete_upload_temporary_artifact_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def storage_service_complete_upload_temporary_artifact_with_http_info(self, body: 'V1CompleteUploadTemporaryArtifactRequest', **kwargs) -> 'V1CompleteUploadProjectArtifactResponse':  # noqa: E501
        """storage_service_complete_upload_temporary_artifact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_complete_upload_temporary_artifact_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CompleteUploadTemporaryArtifactRequest body: (required)
        :return: V1CompleteUploadProjectArtifactResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_service_complete_upload_temporary_artifact" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `storage_service_complete_upload_temporary_artifact`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/temporary_storage/complete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1CompleteUploadProjectArtifactResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_service_create_storage_transfer(self, body: 'ProjectIdStoragetransfersBody', project_id: 'str', **kwargs) -> 'V1StorageTransfer':  # noqa: E501
        """storage_service_create_storage_transfer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_create_storage_transfer(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectIdStoragetransfersBody body: (required)
        :param str project_id: (required)
        :return: V1StorageTransfer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_service_create_storage_transfer_with_http_info(body, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_service_create_storage_transfer_with_http_info(body, project_id, **kwargs)  # noqa: E501
            return data

    def storage_service_create_storage_transfer_with_http_info(self, body: 'ProjectIdStoragetransfersBody', project_id: 'str', **kwargs) -> 'V1StorageTransfer':  # noqa: E501
        """storage_service_create_storage_transfer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_create_storage_transfer_with_http_info(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectIdStoragetransfersBody body: (required)
        :param str project_id: (required)
        :return: V1StorageTransfer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_service_create_storage_transfer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `storage_service_create_storage_transfer`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `storage_service_create_storage_transfer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/storage-transfers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1StorageTransfer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_service_delete_project_artifact(self, project_id: 'str', **kwargs) -> 'V1DeleteProjectArtifactResponse':  # noqa: E501
        """storage_service_delete_project_artifact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_delete_project_artifact(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cluster_id:
        :param str filename:
        :param str data_connection_id:
        :return: V1DeleteProjectArtifactResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_service_delete_project_artifact_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_service_delete_project_artifact_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def storage_service_delete_project_artifact_with_http_info(self, project_id: 'str', **kwargs) -> 'V1DeleteProjectArtifactResponse':  # noqa: E501
        """storage_service_delete_project_artifact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_delete_project_artifact_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cluster_id:
        :param str filename:
        :param str data_connection_id:
        :return: V1DeleteProjectArtifactResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'cluster_id', 'filename', 'data_connection_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_service_delete_project_artifact" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `storage_service_delete_project_artifact`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501
        if 'filename' in params:
            query_params.append(('filename', params['filename']))  # noqa: E501
        if 'data_connection_id' in params:
            query_params.append(('dataConnectionId', params['data_connection_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/storage', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DeleteProjectArtifactResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_service_get_org_storage_metadata(self, org_id: 'str', **kwargs) -> 'V1GetOrganizationStorageMetadataResponse':  # noqa: E501
        """storage_service_get_org_storage_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_get_org_storage_metadata(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: (required)
        :return: V1GetOrganizationStorageMetadataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_service_get_org_storage_metadata_with_http_info(org_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_service_get_org_storage_metadata_with_http_info(org_id, **kwargs)  # noqa: E501
            return data

    def storage_service_get_org_storage_metadata_with_http_info(self, org_id: 'str', **kwargs) -> 'V1GetOrganizationStorageMetadataResponse':  # noqa: E501
        """storage_service_get_org_storage_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_get_org_storage_metadata_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: (required)
        :return: V1GetOrganizationStorageMetadataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_service_get_org_storage_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_id' is set
        if ('org_id' not in params or
                params['org_id'] is None):
            raise ValueError("Missing the required parameter `org_id` when calling `storage_service_get_org_storage_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_id' in params:
            path_params['orgId'] = params['org_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/orgs/{orgId}/storage/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1GetOrganizationStorageMetadataResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_service_get_project_artifact(self, project_id: 'str', **kwargs) -> 'V1GetProjectArtifactResponse':  # noqa: E501
        """storage_service_get_project_artifact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_get_project_artifact(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cluster_id:
        :param str filename:
        :return: V1GetProjectArtifactResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_service_get_project_artifact_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_service_get_project_artifact_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def storage_service_get_project_artifact_with_http_info(self, project_id: 'str', **kwargs) -> 'V1GetProjectArtifactResponse':  # noqa: E501
        """storage_service_get_project_artifact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_get_project_artifact_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cluster_id:
        :param str filename:
        :return: V1GetProjectArtifactResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'cluster_id', 'filename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_service_get_project_artifact" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `storage_service_get_project_artifact`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501
        if 'filename' in params:
            query_params.append(('filename', params['filename']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/storage/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1GetProjectArtifactResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_service_get_project_storage_metadata(self, project_id: 'str', **kwargs) -> 'V1GetProjectStorageMetadataResponse':  # noqa: E501
        """storage_service_get_project_storage_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_get_project_storage_metadata(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :return: V1GetProjectStorageMetadataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_service_get_project_storage_metadata_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_service_get_project_storage_metadata_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def storage_service_get_project_storage_metadata_with_http_info(self, project_id: 'str', **kwargs) -> 'V1GetProjectStorageMetadataResponse':  # noqa: E501
        """storage_service_get_project_storage_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_get_project_storage_metadata_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :return: V1GetProjectStorageMetadataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_service_get_project_storage_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `storage_service_get_project_storage_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/storage/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1GetProjectStorageMetadataResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_service_get_project_uploads_artifacts_page(self, project_id: 'str', **kwargs) -> 'V1GetArtifactsPageResponse':  # noqa: E501
        """storage_service_get_project_uploads_artifacts_page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_get_project_uploads_artifacts_page(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id:
        :param str page_number:
        :param str prefix:
        :param bool include_download_url:
        :param str cluster_id:
        :param bool local_index:
        :return: V1GetArtifactsPageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_service_get_project_uploads_artifacts_page_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_service_get_project_uploads_artifacts_page_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def storage_service_get_project_uploads_artifacts_page_with_http_info(self, project_id: 'str', **kwargs) -> 'V1GetArtifactsPageResponse':  # noqa: E501
        """storage_service_get_project_uploads_artifacts_page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_get_project_uploads_artifacts_page_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id:
        :param str page_number:
        :param str prefix:
        :param bool include_download_url:
        :param str cluster_id:
        :param bool local_index:
        :return: V1GetArtifactsPageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id', 'page_number', 'prefix', 'include_download_url', 'cluster_id', 'local_index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_service_get_project_uploads_artifacts_page" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `storage_service_get_project_uploads_artifacts_page`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'prefix' in params:
            query_params.append(('prefix', params['prefix']))  # noqa: E501
        if 'include_download_url' in params:
            query_params.append(('includeDownloadUrl', params['include_download_url']))  # noqa: E501
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501
        if 'local_index' in params:
            query_params.append(('localIndex', params['local_index']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/storage/uploads/artifacts/page', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1GetArtifactsPageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_service_get_project_uploads_folder_index(self, project_id: 'str', **kwargs) -> 'V1GetFolderIndexResponse':  # noqa: E501
        """storage_service_get_project_uploads_folder_index  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_get_project_uploads_folder_index(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id:
        :param str prefix:
        :param str cluster_id:
        :param bool local_index:
        :return: V1GetFolderIndexResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_service_get_project_uploads_folder_index_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_service_get_project_uploads_folder_index_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def storage_service_get_project_uploads_folder_index_with_http_info(self, project_id: 'str', **kwargs) -> 'V1GetFolderIndexResponse':  # noqa: E501
        """storage_service_get_project_uploads_folder_index  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_get_project_uploads_folder_index_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id:
        :param str prefix:
        :param str cluster_id:
        :param bool local_index:
        :return: V1GetFolderIndexResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id', 'prefix', 'cluster_id', 'local_index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_service_get_project_uploads_folder_index" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `storage_service_get_project_uploads_folder_index`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'prefix' in params:
            query_params.append(('prefix', params['prefix']))  # noqa: E501
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501
        if 'local_index' in params:
            query_params.append(('localIndex', params['local_index']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/storage/uploads/folder-index', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1GetFolderIndexResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_service_get_storage_transfer(self, project_id: 'str', id: 'str', **kwargs) -> 'V1StorageTransfer':  # noqa: E501
        """storage_service_get_storage_transfer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_get_storage_transfer(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :return: V1StorageTransfer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_service_get_storage_transfer_with_http_info(project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_service_get_storage_transfer_with_http_info(project_id, id, **kwargs)  # noqa: E501
            return data

    def storage_service_get_storage_transfer_with_http_info(self, project_id: 'str', id: 'str', **kwargs) -> 'V1StorageTransfer':  # noqa: E501
        """storage_service_get_storage_transfer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_get_storage_transfer_with_http_info(project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str id: (required)
        :return: V1StorageTransfer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_service_get_storage_transfer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `storage_service_get_storage_transfer`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `storage_service_get_storage_transfer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/storage-transfers/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1StorageTransfer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_service_list_project_artifacts(self, project_id: 'str', **kwargs) -> 'V1ListProjectArtifactsResponse':  # noqa: E501
        """storage_service_list_project_artifacts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_list_project_artifacts(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cluster_id:
        :param str page_token:
        :param str page_size:
        :param str prefix:
        :param bool include_download_url:
        :return: V1ListProjectArtifactsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_service_list_project_artifacts_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_service_list_project_artifacts_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def storage_service_list_project_artifacts_with_http_info(self, project_id: 'str', **kwargs) -> 'V1ListProjectArtifactsResponse':  # noqa: E501
        """storage_service_list_project_artifacts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_list_project_artifacts_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cluster_id:
        :param str page_token:
        :param str page_size:
        :param str prefix:
        :param bool include_download_url:
        :return: V1ListProjectArtifactsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'cluster_id', 'page_token', 'page_size', 'prefix', 'include_download_url']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_service_list_project_artifacts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `storage_service_list_project_artifacts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('pageToken', params['page_token']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'prefix' in params:
            query_params.append(('prefix', params['prefix']))  # noqa: E501
        if 'include_download_url' in params:
            query_params.append(('includeDownloadUrl', params['include_download_url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/storage', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListProjectArtifactsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_service_list_project_locked_resources(self, project_id: 'str', **kwargs) -> 'V1ListProjectLockedResourcesResponse':  # noqa: E501
        """storage_service_list_project_locked_resources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_list_project_locked_resources(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :return: V1ListProjectLockedResourcesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_service_list_project_locked_resources_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_service_list_project_locked_resources_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def storage_service_list_project_locked_resources_with_http_info(self, project_id: 'str', **kwargs) -> 'V1ListProjectLockedResourcesResponse':  # noqa: E501
        """storage_service_list_project_locked_resources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_list_project_locked_resources_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :return: V1ListProjectLockedResourcesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_service_list_project_locked_resources" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `storage_service_list_project_locked_resources`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/locked-resources', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListProjectLockedResourcesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_service_list_storage_transfers(self, project_id: 'str', **kwargs) -> 'V1ListStorageTransfersResponse':  # noqa: E501
        """storage_service_list_storage_transfers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_list_storage_transfers(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param list[str] status_in:
        :param str creator_id:
        :param str source_data_connection_id:
        :param str target_data_connection_id:
        :return: V1ListStorageTransfersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_service_list_storage_transfers_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_service_list_storage_transfers_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def storage_service_list_storage_transfers_with_http_info(self, project_id: 'str', **kwargs) -> 'V1ListStorageTransfersResponse':  # noqa: E501
        """storage_service_list_storage_transfers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_list_storage_transfers_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param list[str] status_in:
        :param str creator_id:
        :param str source_data_connection_id:
        :param str target_data_connection_id:
        :return: V1ListStorageTransfersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'status_in', 'creator_id', 'source_data_connection_id', 'target_data_connection_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_service_list_storage_transfers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `storage_service_list_storage_transfers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'status_in' in params:
            query_params.append(('statusIn', params['status_in']))  # noqa: E501
            collection_formats['statusIn'] = 'multi'  # noqa: E501
        if 'creator_id' in params:
            query_params.append(('creatorId', params['creator_id']))  # noqa: E501
        if 'source_data_connection_id' in params:
            query_params.append(('sourceDataConnectionId', params['source_data_connection_id']))  # noqa: E501
        if 'target_data_connection_id' in params:
            query_params.append(('targetDataConnectionId', params['target_data_connection_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/storage-transfers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListStorageTransfersResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_service_pause_storage_transfer(self, body: 'object', project_id: 'str', id: 'str', **kwargs) -> 'V1PauseStorageTransferResponse':  # noqa: E501
        """storage_service_pause_storage_transfer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_pause_storage_transfer(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1PauseStorageTransferResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_service_pause_storage_transfer_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_service_pause_storage_transfer_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
            return data

    def storage_service_pause_storage_transfer_with_http_info(self, body: 'object', project_id: 'str', id: 'str', **kwargs) -> 'V1PauseStorageTransferResponse':  # noqa: E501
        """storage_service_pause_storage_transfer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_pause_storage_transfer_with_http_info(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1PauseStorageTransferResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_service_pause_storage_transfer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `storage_service_pause_storage_transfer`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `storage_service_pause_storage_transfer`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `storage_service_pause_storage_transfer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/storage-transfers/{id}/pause', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1PauseStorageTransferResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_service_post_cloud_space_artifact_events(self, project_id: 'str', cloud_space_id: 'str', **kwargs) -> 'V1PostCloudSpaceArtifactEventsResponse':  # noqa: E501
        """storage_service_post_cloud_space_artifact_events  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_post_cloud_space_artifact_events(project_id, cloud_space_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cloud_space_id: (required)
        :return: V1PostCloudSpaceArtifactEventsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_service_post_cloud_space_artifact_events_with_http_info(project_id, cloud_space_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_service_post_cloud_space_artifact_events_with_http_info(project_id, cloud_space_id, **kwargs)  # noqa: E501
            return data

    def storage_service_post_cloud_space_artifact_events_with_http_info(self, project_id: 'str', cloud_space_id: 'str', **kwargs) -> 'V1PostCloudSpaceArtifactEventsResponse':  # noqa: E501
        """storage_service_post_cloud_space_artifact_events  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_post_cloud_space_artifact_events_with_http_info(project_id, cloud_space_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str cloud_space_id: (required)
        :return: V1PostCloudSpaceArtifactEventsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'cloud_space_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_service_post_cloud_space_artifact_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `storage_service_post_cloud_space_artifact_events`")  # noqa: E501
        # verify the required parameter 'cloud_space_id' is set
        if ('cloud_space_id' not in params or
                params['cloud_space_id'] is None):
            raise ValueError("Missing the required parameter `cloud_space_id` when calling `storage_service_post_cloud_space_artifact_events`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'cloud_space_id' in params:
            path_params['cloudSpaceId'] = params['cloud_space_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/cloudspaces/{cloudSpaceId}/artifacts/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1PostCloudSpaceArtifactEventsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_service_resume_storage_transfer(self, body: 'object', project_id: 'str', id: 'str', **kwargs) -> 'V1ResumeStorageTransferResponse':  # noqa: E501
        """storage_service_resume_storage_transfer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_resume_storage_transfer(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1ResumeStorageTransferResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_service_resume_storage_transfer_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_service_resume_storage_transfer_with_http_info(body, project_id, id, **kwargs)  # noqa: E501
            return data

    def storage_service_resume_storage_transfer_with_http_info(self, body: 'object', project_id: 'str', id: 'str', **kwargs) -> 'V1ResumeStorageTransferResponse':  # noqa: E501
        """storage_service_resume_storage_transfer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_resume_storage_transfer_with_http_info(body, project_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: V1ResumeStorageTransferResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_service_resume_storage_transfer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `storage_service_resume_storage_transfer`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `storage_service_resume_storage_transfer`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `storage_service_resume_storage_transfer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/storage-transfers/{id}/resume', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ResumeStorageTransferResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_service_upload_project_artifact(self, body: 'ProjectIdStorageBody', project_id: 'str', **kwargs) -> 'V1UploadProjectArtifactResponse':  # noqa: E501
        """UploadProjectArtifact - starts the multipart upload process and returns the upload ID. You will then need to use the upload ID with UploadProjectArtifactParts to get the upload URLs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_upload_project_artifact(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectIdStorageBody body: (required)
        :param str project_id: (required)
        :return: V1UploadProjectArtifactResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_service_upload_project_artifact_with_http_info(body, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_service_upload_project_artifact_with_http_info(body, project_id, **kwargs)  # noqa: E501
            return data

    def storage_service_upload_project_artifact_with_http_info(self, body: 'ProjectIdStorageBody', project_id: 'str', **kwargs) -> 'V1UploadProjectArtifactResponse':  # noqa: E501
        """UploadProjectArtifact - starts the multipart upload process and returns the upload ID. You will then need to use the upload ID with UploadProjectArtifactParts to get the upload URLs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_upload_project_artifact_with_http_info(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectIdStorageBody body: (required)
        :param str project_id: (required)
        :return: V1UploadProjectArtifactResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_service_upload_project_artifact" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `storage_service_upload_project_artifact`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `storage_service_upload_project_artifact`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/storage', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1UploadProjectArtifactResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_service_upload_project_artifact_parts(self, body: 'UploadsUploadIdBody1', project_id: 'str', upload_id: 'str', **kwargs) -> 'V1UploadProjectArtifactPartsResponse':  # noqa: E501
        """storage_service_upload_project_artifact_parts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_upload_project_artifact_parts(body, project_id, upload_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UploadsUploadIdBody1 body: (required)
        :param str project_id: (required)
        :param str upload_id: (required)
        :return: V1UploadProjectArtifactPartsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_service_upload_project_artifact_parts_with_http_info(body, project_id, upload_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_service_upload_project_artifact_parts_with_http_info(body, project_id, upload_id, **kwargs)  # noqa: E501
            return data

    def storage_service_upload_project_artifact_parts_with_http_info(self, body: 'UploadsUploadIdBody1', project_id: 'str', upload_id: 'str', **kwargs) -> 'V1UploadProjectArtifactPartsResponse':  # noqa: E501
        """storage_service_upload_project_artifact_parts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_upload_project_artifact_parts_with_http_info(body, project_id, upload_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UploadsUploadIdBody1 body: (required)
        :param str project_id: (required)
        :param str upload_id: (required)
        :return: V1UploadProjectArtifactPartsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'upload_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_service_upload_project_artifact_parts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `storage_service_upload_project_artifact_parts`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `storage_service_upload_project_artifact_parts`")  # noqa: E501
        # verify the required parameter 'upload_id' is set
        if ('upload_id' not in params or
                params['upload_id'] is None):
            raise ValueError("Missing the required parameter `upload_id` when calling `storage_service_upload_project_artifact_parts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'upload_id' in params:
            path_params['uploadId'] = params['upload_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/storage/uploads/{uploadId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1UploadProjectArtifactPartsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_service_upload_temporary_artifact(self, body: 'V1UploadTemporaryArtifactRequest', **kwargs) -> 'V1UploadProjectArtifactResponse':  # noqa: E501
        """storage_service_upload_temporary_artifact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_upload_temporary_artifact(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1UploadTemporaryArtifactRequest body: (required)
        :return: V1UploadProjectArtifactResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_service_upload_temporary_artifact_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_service_upload_temporary_artifact_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def storage_service_upload_temporary_artifact_with_http_info(self, body: 'V1UploadTemporaryArtifactRequest', **kwargs) -> 'V1UploadProjectArtifactResponse':  # noqa: E501
        """storage_service_upload_temporary_artifact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_upload_temporary_artifact_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1UploadTemporaryArtifactRequest body: (required)
        :return: V1UploadProjectArtifactResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_service_upload_temporary_artifact" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `storage_service_upload_temporary_artifact`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/temporary_storage', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1UploadProjectArtifactResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_service_upload_temporary_artifact_parts(self, body: 'UploadsUploadIdBody', upload_id: 'str', **kwargs) -> 'V1UploadProjectArtifactPartsResponse':  # noqa: E501
        """storage_service_upload_temporary_artifact_parts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_upload_temporary_artifact_parts(body, upload_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UploadsUploadIdBody body: (required)
        :param str upload_id: (required)
        :return: V1UploadProjectArtifactPartsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_service_upload_temporary_artifact_parts_with_http_info(body, upload_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_service_upload_temporary_artifact_parts_with_http_info(body, upload_id, **kwargs)  # noqa: E501
            return data

    def storage_service_upload_temporary_artifact_parts_with_http_info(self, body: 'UploadsUploadIdBody', upload_id: 'str', **kwargs) -> 'V1UploadProjectArtifactPartsResponse':  # noqa: E501
        """storage_service_upload_temporary_artifact_parts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_service_upload_temporary_artifact_parts_with_http_info(body, upload_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UploadsUploadIdBody body: (required)
        :param str upload_id: (required)
        :return: V1UploadProjectArtifactPartsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'upload_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_service_upload_temporary_artifact_parts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `storage_service_upload_temporary_artifact_parts`")  # noqa: E501
        # verify the required parameter 'upload_id' is set
        if ('upload_id' not in params or
                params['upload_id'] is None):
            raise ValueError("Missing the required parameter `upload_id` when calling `storage_service_upload_temporary_artifact_parts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'upload_id' in params:
            path_params['uploadId'] = params['upload_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/temporary_storage/uploads/{uploadId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1UploadProjectArtifactPartsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
