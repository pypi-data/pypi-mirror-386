# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

from __future__ import absolute_import

import re  # noqa: F401
from typing import TYPE_CHECKING, Any

# python 2 and python 3 compatibility library
import six

from lightning_sdk.lightning_cloud.openapi.api_client import ApiClient

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class FileSystemServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def file_system_service_list_filesystem_apps(self, project_id: 'str', current_id: 'str', **kwargs) -> 'V1ListFilesystemAppsResponse':  # noqa: E501
        """file_system_service_list_filesystem_apps  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_system_service_list_filesystem_apps(project_id, current_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str current_id: (required)
        :param str cluster_id:
        :return: V1ListFilesystemAppsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.file_system_service_list_filesystem_apps_with_http_info(project_id, current_id, **kwargs)  # noqa: E501
        else:
            (data) = self.file_system_service_list_filesystem_apps_with_http_info(project_id, current_id, **kwargs)  # noqa: E501
            return data

    def file_system_service_list_filesystem_apps_with_http_info(self, project_id: 'str', current_id: 'str', **kwargs) -> 'V1ListFilesystemAppsResponse':  # noqa: E501
        """file_system_service_list_filesystem_apps  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_system_service_list_filesystem_apps_with_http_info(project_id, current_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str current_id: (required)
        :param str cluster_id:
        :return: V1ListFilesystemAppsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'current_id', 'cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_system_service_list_filesystem_apps" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `file_system_service_list_filesystem_apps`")  # noqa: E501
        # verify the required parameter 'current_id' is set
        if ('current_id' not in params or
                params['current_id'] is None):
            raise ValueError("Missing the required parameter `current_id` when calling `file_system_service_list_filesystem_apps`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'current_id' in params:
            path_params['currentId'] = params['current_id']  # noqa: E501

        query_params = []
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/filesystem/{projectId}/apps/{currentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListFilesystemAppsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def file_system_service_list_filesystem_cloud_spaces(self, project_id: 'str', current_id: 'str', **kwargs) -> 'V1ListFilesystemCloudSpacesResponse':  # noqa: E501
        """file_system_service_list_filesystem_cloud_spaces  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_system_service_list_filesystem_cloud_spaces(project_id, current_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str current_id: (required)
        :param str cluster_id:
        :return: V1ListFilesystemCloudSpacesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.file_system_service_list_filesystem_cloud_spaces_with_http_info(project_id, current_id, **kwargs)  # noqa: E501
        else:
            (data) = self.file_system_service_list_filesystem_cloud_spaces_with_http_info(project_id, current_id, **kwargs)  # noqa: E501
            return data

    def file_system_service_list_filesystem_cloud_spaces_with_http_info(self, project_id: 'str', current_id: 'str', **kwargs) -> 'V1ListFilesystemCloudSpacesResponse':  # noqa: E501
        """file_system_service_list_filesystem_cloud_spaces  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_system_service_list_filesystem_cloud_spaces_with_http_info(project_id, current_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str current_id: (required)
        :param str cluster_id:
        :return: V1ListFilesystemCloudSpacesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'current_id', 'cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_system_service_list_filesystem_cloud_spaces" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `file_system_service_list_filesystem_cloud_spaces`")  # noqa: E501
        # verify the required parameter 'current_id' is set
        if ('current_id' not in params or
                params['current_id'] is None):
            raise ValueError("Missing the required parameter `current_id` when calling `file_system_service_list_filesystem_cloud_spaces`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'current_id' in params:
            path_params['currentId'] = params['current_id']  # noqa: E501

        query_params = []
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/filesystem/{projectId}/cloudspaces/{currentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListFilesystemCloudSpacesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def file_system_service_list_filesystem_datasets(self, project_id: 'str', current_id: 'str', **kwargs) -> 'V1ListFilesystemDatasetsResponse':  # noqa: E501
        """file_system_service_list_filesystem_datasets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_system_service_list_filesystem_datasets(project_id, current_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str current_id: (required)
        :param str cluster_id:
        :return: V1ListFilesystemDatasetsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.file_system_service_list_filesystem_datasets_with_http_info(project_id, current_id, **kwargs)  # noqa: E501
        else:
            (data) = self.file_system_service_list_filesystem_datasets_with_http_info(project_id, current_id, **kwargs)  # noqa: E501
            return data

    def file_system_service_list_filesystem_datasets_with_http_info(self, project_id: 'str', current_id: 'str', **kwargs) -> 'V1ListFilesystemDatasetsResponse':  # noqa: E501
        """file_system_service_list_filesystem_datasets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_system_service_list_filesystem_datasets_with_http_info(project_id, current_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str current_id: (required)
        :param str cluster_id:
        :return: V1ListFilesystemDatasetsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'current_id', 'cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_system_service_list_filesystem_datasets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `file_system_service_list_filesystem_datasets`")  # noqa: E501
        # verify the required parameter 'current_id' is set
        if ('current_id' not in params or
                params['current_id'] is None):
            raise ValueError("Missing the required parameter `current_id` when calling `file_system_service_list_filesystem_datasets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'current_id' in params:
            path_params['currentId'] = params['current_id']  # noqa: E501

        query_params = []
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/filesystem/{projectId}/datasets/{currentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListFilesystemDatasetsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def file_system_service_list_filesystem_jobs(self, project_id: 'str', current_id: 'str', **kwargs) -> 'V1ListFilesystemJobsResponse':  # noqa: E501
        """file_system_service_list_filesystem_jobs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_system_service_list_filesystem_jobs(project_id, current_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str current_id: (required)
        :param str cluster_id:
        :return: V1ListFilesystemJobsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.file_system_service_list_filesystem_jobs_with_http_info(project_id, current_id, **kwargs)  # noqa: E501
        else:
            (data) = self.file_system_service_list_filesystem_jobs_with_http_info(project_id, current_id, **kwargs)  # noqa: E501
            return data

    def file_system_service_list_filesystem_jobs_with_http_info(self, project_id: 'str', current_id: 'str', **kwargs) -> 'V1ListFilesystemJobsResponse':  # noqa: E501
        """file_system_service_list_filesystem_jobs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_system_service_list_filesystem_jobs_with_http_info(project_id, current_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str current_id: (required)
        :param str cluster_id:
        :return: V1ListFilesystemJobsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'current_id', 'cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_system_service_list_filesystem_jobs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `file_system_service_list_filesystem_jobs`")  # noqa: E501
        # verify the required parameter 'current_id' is set
        if ('current_id' not in params or
                params['current_id'] is None):
            raise ValueError("Missing the required parameter `current_id` when calling `file_system_service_list_filesystem_jobs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'current_id' in params:
            path_params['currentId'] = params['current_id']  # noqa: E501

        query_params = []
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/filesystem/{projectId}/jobs/{currentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListFilesystemJobsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def file_system_service_list_filesystem_mm_ts(self, project_id: 'str', current_id: 'str', **kwargs) -> 'V1ListFilesystemMMTsResponse':  # noqa: E501
        """file_system_service_list_filesystem_mm_ts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_system_service_list_filesystem_mm_ts(project_id, current_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str current_id: (required)
        :param str cluster_id:
        :return: V1ListFilesystemMMTsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.file_system_service_list_filesystem_mm_ts_with_http_info(project_id, current_id, **kwargs)  # noqa: E501
        else:
            (data) = self.file_system_service_list_filesystem_mm_ts_with_http_info(project_id, current_id, **kwargs)  # noqa: E501
            return data

    def file_system_service_list_filesystem_mm_ts_with_http_info(self, project_id: 'str', current_id: 'str', **kwargs) -> 'V1ListFilesystemMMTsResponse':  # noqa: E501
        """file_system_service_list_filesystem_mm_ts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_system_service_list_filesystem_mm_ts_with_http_info(project_id, current_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str current_id: (required)
        :param str cluster_id:
        :return: V1ListFilesystemMMTsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'current_id', 'cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_system_service_list_filesystem_mm_ts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `file_system_service_list_filesystem_mm_ts`")  # noqa: E501
        # verify the required parameter 'current_id' is set
        if ('current_id' not in params or
                params['current_id'] is None):
            raise ValueError("Missing the required parameter `current_id` when calling `file_system_service_list_filesystem_mm_ts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'current_id' in params:
            path_params['currentId'] = params['current_id']  # noqa: E501

        query_params = []
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/filesystem/{projectId}/mmts/{currentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListFilesystemMMTsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def file_system_service_list_filesystem_slurm_jobs(self, project_id: 'str', current_id: 'str', **kwargs) -> 'V1ListFilesystemSlurmJobsResponse':  # noqa: E501
        """file_system_service_list_filesystem_slurm_jobs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_system_service_list_filesystem_slurm_jobs(project_id, current_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str current_id: (required)
        :param str cluster_id:
        :return: V1ListFilesystemSlurmJobsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.file_system_service_list_filesystem_slurm_jobs_with_http_info(project_id, current_id, **kwargs)  # noqa: E501
        else:
            (data) = self.file_system_service_list_filesystem_slurm_jobs_with_http_info(project_id, current_id, **kwargs)  # noqa: E501
            return data

    def file_system_service_list_filesystem_slurm_jobs_with_http_info(self, project_id: 'str', current_id: 'str', **kwargs) -> 'V1ListFilesystemSlurmJobsResponse':  # noqa: E501
        """file_system_service_list_filesystem_slurm_jobs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_system_service_list_filesystem_slurm_jobs_with_http_info(project_id, current_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str current_id: (required)
        :param str cluster_id:
        :return: V1ListFilesystemSlurmJobsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'current_id', 'cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_system_service_list_filesystem_slurm_jobs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `file_system_service_list_filesystem_slurm_jobs`")  # noqa: E501
        # verify the required parameter 'current_id' is set
        if ('current_id' not in params or
                params['current_id'] is None):
            raise ValueError("Missing the required parameter `current_id` when calling `file_system_service_list_filesystem_slurm_jobs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'current_id' in params:
            path_params['currentId'] = params['current_id']  # noqa: E501

        query_params = []
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/filesystem/{projectId}/slurm/{currentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListFilesystemSlurmJobsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def file_system_service_list_filesystem_snowflake(self, project_id: 'str', current_id: 'str', **kwargs) -> 'V1ListFilesystemSnowflakeResponse':  # noqa: E501
        """file_system_service_list_filesystem_snowflake  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_system_service_list_filesystem_snowflake(project_id, current_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str current_id: (required)
        :param str cluster_id:
        :return: V1ListFilesystemSnowflakeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.file_system_service_list_filesystem_snowflake_with_http_info(project_id, current_id, **kwargs)  # noqa: E501
        else:
            (data) = self.file_system_service_list_filesystem_snowflake_with_http_info(project_id, current_id, **kwargs)  # noqa: E501
            return data

    def file_system_service_list_filesystem_snowflake_with_http_info(self, project_id: 'str', current_id: 'str', **kwargs) -> 'V1ListFilesystemSnowflakeResponse':  # noqa: E501
        """file_system_service_list_filesystem_snowflake  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_system_service_list_filesystem_snowflake_with_http_info(project_id, current_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str current_id: (required)
        :param str cluster_id:
        :return: V1ListFilesystemSnowflakeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'current_id', 'cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_system_service_list_filesystem_snowflake" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `file_system_service_list_filesystem_snowflake`")  # noqa: E501
        # verify the required parameter 'current_id' is set
        if ('current_id' not in params or
                params['current_id'] is None):
            raise ValueError("Missing the required parameter `current_id` when calling `file_system_service_list_filesystem_snowflake`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'current_id' in params:
            path_params['currentId'] = params['current_id']  # noqa: E501

        query_params = []
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/filesystem/{projectId}/snowflake/{currentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListFilesystemSnowflakeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def file_system_service_modify_filesystem_volume(self, project_id: 'str', **kwargs) -> 'V1ModifyFilesystemVolumeResponse':  # noqa: E501
        """file_system_service_modify_filesystem_volume  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_system_service_modify_filesystem_volume(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :return: V1ModifyFilesystemVolumeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.file_system_service_modify_filesystem_volume_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.file_system_service_modify_filesystem_volume_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def file_system_service_modify_filesystem_volume_with_http_info(self, project_id: 'str', **kwargs) -> 'V1ModifyFilesystemVolumeResponse':  # noqa: E501
        """file_system_service_modify_filesystem_volume  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_system_service_modify_filesystem_volume_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :return: V1ModifyFilesystemVolumeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_system_service_modify_filesystem_volume" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `file_system_service_modify_filesystem_volume`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/filesystem/{projectId}/volumes', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ModifyFilesystemVolumeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def file_system_service_trigger_filesystem_upgrade(self, **kwargs) -> 'V1TriggerFilesystemUpgradeResponse':  # noqa: E501
        """file_system_service_trigger_filesystem_upgrade  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_system_service_trigger_filesystem_upgrade(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: V1TriggerFilesystemUpgradeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.file_system_service_trigger_filesystem_upgrade_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.file_system_service_trigger_filesystem_upgrade_with_http_info(**kwargs)  # noqa: E501
            return data

    def file_system_service_trigger_filesystem_upgrade_with_http_info(self, **kwargs) -> 'V1TriggerFilesystemUpgradeResponse':  # noqa: E501
        """file_system_service_trigger_filesystem_upgrade  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_system_service_trigger_filesystem_upgrade_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: V1TriggerFilesystemUpgradeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_system_service_trigger_filesystem_upgrade" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/filesystem/trigger-upgrade', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1TriggerFilesystemUpgradeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
