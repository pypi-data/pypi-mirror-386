# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

from __future__ import absolute_import

import re  # noqa: F401
from typing import TYPE_CHECKING, Any

# python 2 and python 3 compatibility library
import six

from lightning_sdk.lightning_cloud.openapi.api_client import ApiClient

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class LitRegistryServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def lit_registry_service_create_lit_project_registry(self, body: 'ProjectIdLitregistryBody', project_id: 'str', **kwargs) -> 'V1LitRegistryProject':  # noqa: E501
        """lit_registry_service_create_lit_project_registry  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_registry_service_create_lit_project_registry(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectIdLitregistryBody body: (required)
        :param str project_id: The teamspace project_id (required)
        :return: V1LitRegistryProject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_registry_service_create_lit_project_registry_with_http_info(body, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_registry_service_create_lit_project_registry_with_http_info(body, project_id, **kwargs)  # noqa: E501
            return data

    def lit_registry_service_create_lit_project_registry_with_http_info(self, body: 'ProjectIdLitregistryBody', project_id: 'str', **kwargs) -> 'V1LitRegistryProject':  # noqa: E501
        """lit_registry_service_create_lit_project_registry  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_registry_service_create_lit_project_registry_with_http_info(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectIdLitregistryBody body: (required)
        :param str project_id: The teamspace project_id (required)
        :return: V1LitRegistryProject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_registry_service_create_lit_project_registry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `lit_registry_service_create_lit_project_registry`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_registry_service_create_lit_project_registry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/lit-registry', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1LitRegistryProject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_registry_service_delete_lit_registry_repository_image_artifact_version_by_digest(self, project_id: 'str', lit_repo_name: 'str', full_hash_digest: 'str', **kwargs) -> 'V1DeleteLitRegistryRepositoryImageArtifactVersionByDigestResponse':  # noqa: E501
        """lit_registry_service_delete_lit_registry_repository_image_artifact_version_by_digest  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_registry_service_delete_lit_registry_repository_image_artifact_version_by_digest(project_id, lit_repo_name, full_hash_digest, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str lit_repo_name: (required)
        :param str full_hash_digest: (required)
        :param str cluster_id:
        :return: V1DeleteLitRegistryRepositoryImageArtifactVersionByDigestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_registry_service_delete_lit_registry_repository_image_artifact_version_by_digest_with_http_info(project_id, lit_repo_name, full_hash_digest, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_registry_service_delete_lit_registry_repository_image_artifact_version_by_digest_with_http_info(project_id, lit_repo_name, full_hash_digest, **kwargs)  # noqa: E501
            return data

    def lit_registry_service_delete_lit_registry_repository_image_artifact_version_by_digest_with_http_info(self, project_id: 'str', lit_repo_name: 'str', full_hash_digest: 'str', **kwargs) -> 'V1DeleteLitRegistryRepositoryImageArtifactVersionByDigestResponse':  # noqa: E501
        """lit_registry_service_delete_lit_registry_repository_image_artifact_version_by_digest  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_registry_service_delete_lit_registry_repository_image_artifact_version_by_digest_with_http_info(project_id, lit_repo_name, full_hash_digest, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str lit_repo_name: (required)
        :param str full_hash_digest: (required)
        :param str cluster_id:
        :return: V1DeleteLitRegistryRepositoryImageArtifactVersionByDigestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'lit_repo_name', 'full_hash_digest', 'cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_registry_service_delete_lit_registry_repository_image_artifact_version_by_digest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_registry_service_delete_lit_registry_repository_image_artifact_version_by_digest`")  # noqa: E501
        # verify the required parameter 'lit_repo_name' is set
        if ('lit_repo_name' not in params or
                params['lit_repo_name'] is None):
            raise ValueError("Missing the required parameter `lit_repo_name` when calling `lit_registry_service_delete_lit_registry_repository_image_artifact_version_by_digest`")  # noqa: E501
        # verify the required parameter 'full_hash_digest' is set
        if ('full_hash_digest' not in params or
                params['full_hash_digest'] is None):
            raise ValueError("Missing the required parameter `full_hash_digest` when calling `lit_registry_service_delete_lit_registry_repository_image_artifact_version_by_digest`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'lit_repo_name' in params:
            path_params['litRepoName'] = params['lit_repo_name']  # noqa: E501
        if 'full_hash_digest' in params:
            path_params['fullHashDigest'] = params['full_hash_digest']  # noqa: E501

        query_params = []
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/lit-registry/{litRepoName}/artifacts/{fullHashDigest}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DeleteLitRegistryRepositoryImageArtifactVersionByDigestResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_registry_service_delete_lit_repository(self, project_id: 'str', lit_repo_name: 'str', **kwargs) -> 'V1DeleteLitRepositoryResponse':  # noqa: E501
        """lit_registry_service_delete_lit_repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_registry_service_delete_lit_repository(project_id, lit_repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str lit_repo_name: (required)
        :param str cluster_id:
        :return: V1DeleteLitRepositoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_registry_service_delete_lit_repository_with_http_info(project_id, lit_repo_name, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_registry_service_delete_lit_repository_with_http_info(project_id, lit_repo_name, **kwargs)  # noqa: E501
            return data

    def lit_registry_service_delete_lit_repository_with_http_info(self, project_id: 'str', lit_repo_name: 'str', **kwargs) -> 'V1DeleteLitRepositoryResponse':  # noqa: E501
        """lit_registry_service_delete_lit_repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_registry_service_delete_lit_repository_with_http_info(project_id, lit_repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str lit_repo_name: (required)
        :param str cluster_id:
        :return: V1DeleteLitRepositoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'lit_repo_name', 'cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_registry_service_delete_lit_repository" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_registry_service_delete_lit_repository`")  # noqa: E501
        # verify the required parameter 'lit_repo_name' is set
        if ('lit_repo_name' not in params or
                params['lit_repo_name'] is None):
            raise ValueError("Missing the required parameter `lit_repo_name` when calling `lit_registry_service_delete_lit_repository`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'lit_repo_name' in params:
            path_params['litRepoName'] = params['lit_repo_name']  # noqa: E501

        query_params = []
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/lit-registry/{litRepoName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DeleteLitRepositoryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_registry_service_get_lit_project_registry(self, project_id: 'str', **kwargs) -> 'V1LitRegistryProject':  # noqa: E501
        """lit_registry_service_get_lit_project_registry  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_registry_service_get_lit_project_registry(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param bool latest_only:
        :param str filter_for_repo: Use this to filter for a single repository. Useful when selecting a subset of the same data from various context.
        :param str cluster_id:
        :return: V1LitRegistryProject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_registry_service_get_lit_project_registry_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_registry_service_get_lit_project_registry_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def lit_registry_service_get_lit_project_registry_with_http_info(self, project_id: 'str', **kwargs) -> 'V1LitRegistryProject':  # noqa: E501
        """lit_registry_service_get_lit_project_registry  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_registry_service_get_lit_project_registry_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param bool latest_only:
        :param str filter_for_repo: Use this to filter for a single repository. Useful when selecting a subset of the same data from various context.
        :param str cluster_id:
        :return: V1LitRegistryProject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'latest_only', 'filter_for_repo', 'cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_registry_service_get_lit_project_registry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_registry_service_get_lit_project_registry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'latest_only' in params:
            query_params.append(('latestOnly', params['latest_only']))  # noqa: E501
        if 'filter_for_repo' in params:
            query_params.append(('filterForRepo', params['filter_for_repo']))  # noqa: E501
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/lit-registry', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1LitRegistryProject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_registry_service_get_lit_registry_repository_image_artifact_version_by_digest(self, project_id: 'str', lit_repo_name: 'str', full_hash_digest: 'str', **kwargs) -> 'V1LitRegistryArtifact':  # noqa: E501
        """lit_registry_service_get_lit_registry_repository_image_artifact_version_by_digest  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_registry_service_get_lit_registry_repository_image_artifact_version_by_digest(project_id, lit_repo_name, full_hash_digest, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str lit_repo_name: (required)
        :param str full_hash_digest: (required)
        :return: V1LitRegistryArtifact
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_registry_service_get_lit_registry_repository_image_artifact_version_by_digest_with_http_info(project_id, lit_repo_name, full_hash_digest, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_registry_service_get_lit_registry_repository_image_artifact_version_by_digest_with_http_info(project_id, lit_repo_name, full_hash_digest, **kwargs)  # noqa: E501
            return data

    def lit_registry_service_get_lit_registry_repository_image_artifact_version_by_digest_with_http_info(self, project_id: 'str', lit_repo_name: 'str', full_hash_digest: 'str', **kwargs) -> 'V1LitRegistryArtifact':  # noqa: E501
        """lit_registry_service_get_lit_registry_repository_image_artifact_version_by_digest  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_registry_service_get_lit_registry_repository_image_artifact_version_by_digest_with_http_info(project_id, lit_repo_name, full_hash_digest, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str lit_repo_name: (required)
        :param str full_hash_digest: (required)
        :return: V1LitRegistryArtifact
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'lit_repo_name', 'full_hash_digest']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_registry_service_get_lit_registry_repository_image_artifact_version_by_digest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_registry_service_get_lit_registry_repository_image_artifact_version_by_digest`")  # noqa: E501
        # verify the required parameter 'lit_repo_name' is set
        if ('lit_repo_name' not in params or
                params['lit_repo_name'] is None):
            raise ValueError("Missing the required parameter `lit_repo_name` when calling `lit_registry_service_get_lit_registry_repository_image_artifact_version_by_digest`")  # noqa: E501
        # verify the required parameter 'full_hash_digest' is set
        if ('full_hash_digest' not in params or
                params['full_hash_digest'] is None):
            raise ValueError("Missing the required parameter `full_hash_digest` when calling `lit_registry_service_get_lit_registry_repository_image_artifact_version_by_digest`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'lit_repo_name' in params:
            path_params['litRepoName'] = params['lit_repo_name']  # noqa: E501
        if 'full_hash_digest' in params:
            path_params['fullHashDigest'] = params['full_hash_digest']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/lit-registry/{litRepoName}/artifacts/{fullHashDigest}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1LitRegistryArtifact',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_registry_service_get_lit_repository(self, project_id: 'str', lit_repo_name: 'str', **kwargs) -> 'V1LitRepository':  # noqa: E501
        """lit_registry_service_get_lit_repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_registry_service_get_lit_repository(project_id, lit_repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str lit_repo_name: (required)
        :param bool latest_only:
        :param str cluster_id:
        :return: V1LitRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_registry_service_get_lit_repository_with_http_info(project_id, lit_repo_name, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_registry_service_get_lit_repository_with_http_info(project_id, lit_repo_name, **kwargs)  # noqa: E501
            return data

    def lit_registry_service_get_lit_repository_with_http_info(self, project_id: 'str', lit_repo_name: 'str', **kwargs) -> 'V1LitRepository':  # noqa: E501
        """lit_registry_service_get_lit_repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_registry_service_get_lit_repository_with_http_info(project_id, lit_repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str lit_repo_name: (required)
        :param bool latest_only:
        :param str cluster_id:
        :return: V1LitRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'lit_repo_name', 'latest_only', 'cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_registry_service_get_lit_repository" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_registry_service_get_lit_repository`")  # noqa: E501
        # verify the required parameter 'lit_repo_name' is set
        if ('lit_repo_name' not in params or
                params['lit_repo_name'] is None):
            raise ValueError("Missing the required parameter `lit_repo_name` when calling `lit_registry_service_get_lit_repository`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'lit_repo_name' in params:
            path_params['litRepoName'] = params['lit_repo_name']  # noqa: E501

        query_params = []
        if 'latest_only' in params:
            query_params.append(('latestOnly', params['latest_only']))  # noqa: E501
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/lit-registry/{litRepoName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1LitRepository',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_registry_service_list_lit_registry_repository_image_artifact_versions(self, project_id: 'str', lit_repo_name: 'str', **kwargs) -> 'V1ListLitRegistryRepositoryImageArtifactVersionsResponse':  # noqa: E501
        """lit_registry_service_list_lit_registry_repository_image_artifact_versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_registry_service_list_lit_registry_repository_image_artifact_versions(project_id, lit_repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str lit_repo_name: (required)
        :param bool latest_only:
        :param str cluster_id:
        :return: V1ListLitRegistryRepositoryImageArtifactVersionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_registry_service_list_lit_registry_repository_image_artifact_versions_with_http_info(project_id, lit_repo_name, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_registry_service_list_lit_registry_repository_image_artifact_versions_with_http_info(project_id, lit_repo_name, **kwargs)  # noqa: E501
            return data

    def lit_registry_service_list_lit_registry_repository_image_artifact_versions_with_http_info(self, project_id: 'str', lit_repo_name: 'str', **kwargs) -> 'V1ListLitRegistryRepositoryImageArtifactVersionsResponse':  # noqa: E501
        """lit_registry_service_list_lit_registry_repository_image_artifact_versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_registry_service_list_lit_registry_repository_image_artifact_versions_with_http_info(project_id, lit_repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str lit_repo_name: (required)
        :param bool latest_only:
        :param str cluster_id:
        :return: V1ListLitRegistryRepositoryImageArtifactVersionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'lit_repo_name', 'latest_only', 'cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_registry_service_list_lit_registry_repository_image_artifact_versions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_registry_service_list_lit_registry_repository_image_artifact_versions`")  # noqa: E501
        # verify the required parameter 'lit_repo_name' is set
        if ('lit_repo_name' not in params or
                params['lit_repo_name'] is None):
            raise ValueError("Missing the required parameter `lit_repo_name` when calling `lit_registry_service_list_lit_registry_repository_image_artifact_versions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'lit_repo_name' in params:
            path_params['litRepoName'] = params['lit_repo_name']  # noqa: E501

        query_params = []
        if 'latest_only' in params:
            query_params.append(('latestOnly', params['latest_only']))  # noqa: E501
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/lit-registry/{litRepoName}/artifacts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListLitRegistryRepositoryImageArtifactVersionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lit_registry_service_update_lit_repository_metadata(self, body: 'LitregistryLitRepoNameBody', project_id: 'str', lit_repo_name: 'str', **kwargs) -> 'V1UpdateLitRepositoryResponse':  # noqa: E501
        """lit_registry_service_update_lit_repository_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_registry_service_update_lit_repository_metadata(body, project_id, lit_repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LitregistryLitRepoNameBody body: (required)
        :param str project_id: (required)
        :param str lit_repo_name: (required)
        :return: V1UpdateLitRepositoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lit_registry_service_update_lit_repository_metadata_with_http_info(body, project_id, lit_repo_name, **kwargs)  # noqa: E501
        else:
            (data) = self.lit_registry_service_update_lit_repository_metadata_with_http_info(body, project_id, lit_repo_name, **kwargs)  # noqa: E501
            return data

    def lit_registry_service_update_lit_repository_metadata_with_http_info(self, body: 'LitregistryLitRepoNameBody', project_id: 'str', lit_repo_name: 'str', **kwargs) -> 'V1UpdateLitRepositoryResponse':  # noqa: E501
        """lit_registry_service_update_lit_repository_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lit_registry_service_update_lit_repository_metadata_with_http_info(body, project_id, lit_repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LitregistryLitRepoNameBody body: (required)
        :param str project_id: (required)
        :param str lit_repo_name: (required)
        :return: V1UpdateLitRepositoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'lit_repo_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lit_registry_service_update_lit_repository_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `lit_registry_service_update_lit_repository_metadata`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `lit_registry_service_update_lit_repository_metadata`")  # noqa: E501
        # verify the required parameter 'lit_repo_name' is set
        if ('lit_repo_name' not in params or
                params['lit_repo_name'] is None):
            raise ValueError("Missing the required parameter `lit_repo_name` when calling `lit_registry_service_update_lit_repository_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'lit_repo_name' in params:
            path_params['litRepoName'] = params['lit_repo_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/projects/{projectId}/lit-registry/{litRepoName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1UpdateLitRepositoryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
