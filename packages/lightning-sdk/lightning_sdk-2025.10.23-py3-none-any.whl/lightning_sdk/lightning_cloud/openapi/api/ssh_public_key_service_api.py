# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

from __future__ import absolute_import

import re  # noqa: F401
from typing import TYPE_CHECKING, Any

# python 2 and python 3 compatibility library
import six

from lightning_sdk.lightning_cloud.openapi.api_client import ApiClient

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class SSHPublicKeyServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def s_sh_public_key_service_create_ssh_public_key(self, body: 'V1CreateSSHPublicKeyRequest', **kwargs) -> 'V1SSHPublicKey':  # noqa: E501
        """s_sh_public_key_service_create_ssh_public_key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_sh_public_key_service_create_ssh_public_key(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CreateSSHPublicKeyRequest body: (required)
        :return: V1SSHPublicKey
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.s_sh_public_key_service_create_ssh_public_key_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.s_sh_public_key_service_create_ssh_public_key_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def s_sh_public_key_service_create_ssh_public_key_with_http_info(self, body: 'V1CreateSSHPublicKeyRequest', **kwargs) -> 'V1SSHPublicKey':  # noqa: E501
        """s_sh_public_key_service_create_ssh_public_key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_sh_public_key_service_create_ssh_public_key_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CreateSSHPublicKeyRequest body: (required)
        :return: V1SSHPublicKey
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method s_sh_public_key_service_create_ssh_public_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `s_sh_public_key_service_create_ssh_public_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/ssh-keys', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1SSHPublicKey',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def s_sh_public_key_service_delete_ssh_public_key(self, id: 'str', **kwargs) -> 'V1DeleteSSHPublicKeyResponse':  # noqa: E501
        """s_sh_public_key_service_delete_ssh_public_key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_sh_public_key_service_delete_ssh_public_key(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: V1DeleteSSHPublicKeyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.s_sh_public_key_service_delete_ssh_public_key_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.s_sh_public_key_service_delete_ssh_public_key_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def s_sh_public_key_service_delete_ssh_public_key_with_http_info(self, id: 'str', **kwargs) -> 'V1DeleteSSHPublicKeyResponse':  # noqa: E501
        """s_sh_public_key_service_delete_ssh_public_key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_sh_public_key_service_delete_ssh_public_key_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: V1DeleteSSHPublicKeyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method s_sh_public_key_service_delete_ssh_public_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `s_sh_public_key_service_delete_ssh_public_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/ssh-keys/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DeleteSSHPublicKeyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def s_sh_public_key_service_generate_ssh_key_pair(self, body: 'V1GenerateSSHKeyPairRequest', **kwargs) -> 'V1SSHKeyPair':  # noqa: E501
        """GenerateSSHKeyPair generates a new SSH key pair for the user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_sh_public_key_service_generate_ssh_key_pair(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1GenerateSSHKeyPairRequest body: (required)
        :return: V1SSHKeyPair
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.s_sh_public_key_service_generate_ssh_key_pair_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.s_sh_public_key_service_generate_ssh_key_pair_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def s_sh_public_key_service_generate_ssh_key_pair_with_http_info(self, body: 'V1GenerateSSHKeyPairRequest', **kwargs) -> 'V1SSHKeyPair':  # noqa: E501
        """GenerateSSHKeyPair generates a new SSH key pair for the user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_sh_public_key_service_generate_ssh_key_pair_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1GenerateSSHKeyPairRequest body: (required)
        :return: V1SSHKeyPair
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method s_sh_public_key_service_generate_ssh_key_pair" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `s_sh_public_key_service_generate_ssh_key_pair`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/ssh-keys/generate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1SSHKeyPair',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def s_sh_public_key_service_get_ssh_public_key(self, id: 'str', **kwargs) -> 'V1SSHPublicKey':  # noqa: E501
        """s_sh_public_key_service_get_ssh_public_key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_sh_public_key_service_get_ssh_public_key(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: V1SSHPublicKey
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.s_sh_public_key_service_get_ssh_public_key_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.s_sh_public_key_service_get_ssh_public_key_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def s_sh_public_key_service_get_ssh_public_key_with_http_info(self, id: 'str', **kwargs) -> 'V1SSHPublicKey':  # noqa: E501
        """s_sh_public_key_service_get_ssh_public_key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_sh_public_key_service_get_ssh_public_key_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: V1SSHPublicKey
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method s_sh_public_key_service_get_ssh_public_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `s_sh_public_key_service_get_ssh_public_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/ssh-keys/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1SSHPublicKey',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def s_sh_public_key_service_list_ssh_public_keys(self, **kwargs) -> 'V1ListSSHPublicKeysResponse':  # noqa: E501
        """s_sh_public_key_service_list_ssh_public_keys  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_sh_public_key_service_list_ssh_public_keys(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str continue_token:
        :param str limit:
        :return: V1ListSSHPublicKeysResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.s_sh_public_key_service_list_ssh_public_keys_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.s_sh_public_key_service_list_ssh_public_keys_with_http_info(**kwargs)  # noqa: E501
            return data

    def s_sh_public_key_service_list_ssh_public_keys_with_http_info(self, **kwargs) -> 'V1ListSSHPublicKeysResponse':  # noqa: E501
        """s_sh_public_key_service_list_ssh_public_keys  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_sh_public_key_service_list_ssh_public_keys_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str continue_token:
        :param str limit:
        :return: V1ListSSHPublicKeysResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['continue_token', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method s_sh_public_key_service_list_ssh_public_keys" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'continue_token' in params:
            query_params.append(('continueToken', params['continue_token']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/ssh-keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListSSHPublicKeysResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def s_sh_public_key_service_setup_confirmed_ssh_public_key(self, id: 'str', **kwargs) -> 'V1SetupConfirmedSSHPublicKeyResponse':  # noqa: E501
        """s_sh_public_key_service_setup_confirmed_ssh_public_key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_sh_public_key_service_setup_confirmed_ssh_public_key(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: V1SetupConfirmedSSHPublicKeyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.s_sh_public_key_service_setup_confirmed_ssh_public_key_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.s_sh_public_key_service_setup_confirmed_ssh_public_key_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def s_sh_public_key_service_setup_confirmed_ssh_public_key_with_http_info(self, id: 'str', **kwargs) -> 'V1SetupConfirmedSSHPublicKeyResponse':  # noqa: E501
        """s_sh_public_key_service_setup_confirmed_ssh_public_key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_sh_public_key_service_setup_confirmed_ssh_public_key_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: V1SetupConfirmedSSHPublicKeyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method s_sh_public_key_service_setup_confirmed_ssh_public_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `s_sh_public_key_service_setup_confirmed_ssh_public_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/ssh-keys/{id}/confirm', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1SetupConfirmedSSHPublicKeyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
