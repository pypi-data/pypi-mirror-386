# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1DeploymentAPI(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'body': 'V1Body',
        'description': 'str',
        'headers': 'list[V1Header]',
        'id': 'str',
        'method': 'str',
        'name': 'str',
        'path': 'str',
        'port': 'int',
        '_query_params': 'list[V1QueryParam]'
    }

    attribute_map = {
        'body': 'body',
        'description': 'description',
        'headers': 'headers',
        'id': 'id',
        'method': 'method',
        'name': 'name',
        'path': 'path',
        'port': 'port',
        '_query_params': 'queryParams'
    }

    def __init__(self, body: 'V1Body' =None, description: 'str' =None, headers: 'list[V1Header]' =None, id: 'str' =None, method: 'str' =None, name: 'str' =None, path: 'str' =None, port: 'int' =None, _query_params: 'list[V1QueryParam]' =None):  # noqa: E501
        """V1DeploymentAPI - a model defined in Swagger"""  # noqa: E501
        self._body = None
        self._description = None
        self._headers = None
        self._id = None
        self._method = None
        self._name = None
        self._path = None
        self._port = None
        self.__query_params = None
        self.discriminator = None
        if body is not None:
            self.body = body
        if description is not None:
            self.description = description
        if headers is not None:
            self.headers = headers
        if id is not None:
            self.id = id
        if method is not None:
            self.method = method
        if name is not None:
            self.name = name
        if path is not None:
            self.path = path
        if port is not None:
            self.port = port
        if _query_params is not None:
            self._query_params = _query_params

    @property
    def body(self) -> 'V1Body':
        """Gets the body of this V1DeploymentAPI.  # noqa: E501


        :return: The body of this V1DeploymentAPI.  # noqa: E501
        :rtype: V1Body
        """
        return self._body

    @body.setter
    def body(self, body: 'V1Body'):
        """Sets the body of this V1DeploymentAPI.


        :param body: The body of this V1DeploymentAPI.  # noqa: E501
        :type: V1Body
        """

        self._body = body

    @property
    def description(self) -> 'str':
        """Gets the description of this V1DeploymentAPI.  # noqa: E501


        :return: The description of this V1DeploymentAPI.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: 'str'):
        """Sets the description of this V1DeploymentAPI.


        :param description: The description of this V1DeploymentAPI.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def headers(self) -> 'list[V1Header]':
        """Gets the headers of this V1DeploymentAPI.  # noqa: E501


        :return: The headers of this V1DeploymentAPI.  # noqa: E501
        :rtype: list[V1Header]
        """
        return self._headers

    @headers.setter
    def headers(self, headers: 'list[V1Header]'):
        """Sets the headers of this V1DeploymentAPI.


        :param headers: The headers of this V1DeploymentAPI.  # noqa: E501
        :type: list[V1Header]
        """

        self._headers = headers

    @property
    def id(self) -> 'str':
        """Gets the id of this V1DeploymentAPI.  # noqa: E501


        :return: The id of this V1DeploymentAPI.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1DeploymentAPI.


        :param id: The id of this V1DeploymentAPI.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def method(self) -> 'str':
        """Gets the method of this V1DeploymentAPI.  # noqa: E501


        :return: The method of this V1DeploymentAPI.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method: 'str'):
        """Sets the method of this V1DeploymentAPI.


        :param method: The method of this V1DeploymentAPI.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def name(self) -> 'str':
        """Gets the name of this V1DeploymentAPI.  # noqa: E501


        :return: The name of this V1DeploymentAPI.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1DeploymentAPI.


        :param name: The name of this V1DeploymentAPI.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def path(self) -> 'str':
        """Gets the path of this V1DeploymentAPI.  # noqa: E501


        :return: The path of this V1DeploymentAPI.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: 'str'):
        """Sets the path of this V1DeploymentAPI.


        :param path: The path of this V1DeploymentAPI.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def port(self) -> 'int':
        """Gets the port of this V1DeploymentAPI.  # noqa: E501


        :return: The port of this V1DeploymentAPI.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port: 'int'):
        """Sets the port of this V1DeploymentAPI.


        :param port: The port of this V1DeploymentAPI.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def _query_params(self) -> 'list[V1QueryParam]':
        """Gets the _query_params of this V1DeploymentAPI.  # noqa: E501


        :return: The _query_params of this V1DeploymentAPI.  # noqa: E501
        :rtype: list[V1QueryParam]
        """
        return self.__query_params

    @_query_params.setter
    def _query_params(self, _query_params: 'list[V1QueryParam]'):
        """Sets the _query_params of this V1DeploymentAPI.


        :param _query_params: The _query_params of this V1DeploymentAPI.  # noqa: E501
        :type: list[V1QueryParam]
        """

        self.__query_params = _query_params

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1DeploymentAPI, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1DeploymentAPI') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1DeploymentAPI):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1DeploymentAPI') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
