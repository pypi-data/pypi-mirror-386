# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1Telemetry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count': 'int',
        'duration25': 'float',
        'duration50': 'float',
        'duration75': 'float',
        'duration90': 'float',
        'duration95': 'float',
        'duration99': 'float',
        'duration999': 'float',
        'success_count': 'int'
    }

    attribute_map = {
        'count': 'count',
        'duration25': 'duration25',
        'duration50': 'duration50',
        'duration75': 'duration75',
        'duration90': 'duration90',
        'duration95': 'duration95',
        'duration99': 'duration99',
        'duration999': 'duration999',
        'success_count': 'successCount'
    }

    def __init__(self, count: 'int' =None, duration25: 'float' =None, duration50: 'float' =None, duration75: 'float' =None, duration90: 'float' =None, duration95: 'float' =None, duration99: 'float' =None, duration999: 'float' =None, success_count: 'int' =None):  # noqa: E501
        """V1Telemetry - a model defined in Swagger"""  # noqa: E501
        self._count = None
        self._duration25 = None
        self._duration50 = None
        self._duration75 = None
        self._duration90 = None
        self._duration95 = None
        self._duration99 = None
        self._duration999 = None
        self._success_count = None
        self.discriminator = None
        if count is not None:
            self.count = count
        if duration25 is not None:
            self.duration25 = duration25
        if duration50 is not None:
            self.duration50 = duration50
        if duration75 is not None:
            self.duration75 = duration75
        if duration90 is not None:
            self.duration90 = duration90
        if duration95 is not None:
            self.duration95 = duration95
        if duration99 is not None:
            self.duration99 = duration99
        if duration999 is not None:
            self.duration999 = duration999
        if success_count is not None:
            self.success_count = success_count

    @property
    def count(self) -> 'int':
        """Gets the count of this V1Telemetry.  # noqa: E501


        :return: The count of this V1Telemetry.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count: 'int'):
        """Sets the count of this V1Telemetry.


        :param count: The count of this V1Telemetry.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def duration25(self) -> 'float':
        """Gets the duration25 of this V1Telemetry.  # noqa: E501


        :return: The duration25 of this V1Telemetry.  # noqa: E501
        :rtype: float
        """
        return self._duration25

    @duration25.setter
    def duration25(self, duration25: 'float'):
        """Sets the duration25 of this V1Telemetry.


        :param duration25: The duration25 of this V1Telemetry.  # noqa: E501
        :type: float
        """

        self._duration25 = duration25

    @property
    def duration50(self) -> 'float':
        """Gets the duration50 of this V1Telemetry.  # noqa: E501


        :return: The duration50 of this V1Telemetry.  # noqa: E501
        :rtype: float
        """
        return self._duration50

    @duration50.setter
    def duration50(self, duration50: 'float'):
        """Sets the duration50 of this V1Telemetry.


        :param duration50: The duration50 of this V1Telemetry.  # noqa: E501
        :type: float
        """

        self._duration50 = duration50

    @property
    def duration75(self) -> 'float':
        """Gets the duration75 of this V1Telemetry.  # noqa: E501


        :return: The duration75 of this V1Telemetry.  # noqa: E501
        :rtype: float
        """
        return self._duration75

    @duration75.setter
    def duration75(self, duration75: 'float'):
        """Sets the duration75 of this V1Telemetry.


        :param duration75: The duration75 of this V1Telemetry.  # noqa: E501
        :type: float
        """

        self._duration75 = duration75

    @property
    def duration90(self) -> 'float':
        """Gets the duration90 of this V1Telemetry.  # noqa: E501


        :return: The duration90 of this V1Telemetry.  # noqa: E501
        :rtype: float
        """
        return self._duration90

    @duration90.setter
    def duration90(self, duration90: 'float'):
        """Sets the duration90 of this V1Telemetry.


        :param duration90: The duration90 of this V1Telemetry.  # noqa: E501
        :type: float
        """

        self._duration90 = duration90

    @property
    def duration95(self) -> 'float':
        """Gets the duration95 of this V1Telemetry.  # noqa: E501


        :return: The duration95 of this V1Telemetry.  # noqa: E501
        :rtype: float
        """
        return self._duration95

    @duration95.setter
    def duration95(self, duration95: 'float'):
        """Sets the duration95 of this V1Telemetry.


        :param duration95: The duration95 of this V1Telemetry.  # noqa: E501
        :type: float
        """

        self._duration95 = duration95

    @property
    def duration99(self) -> 'float':
        """Gets the duration99 of this V1Telemetry.  # noqa: E501


        :return: The duration99 of this V1Telemetry.  # noqa: E501
        :rtype: float
        """
        return self._duration99

    @duration99.setter
    def duration99(self, duration99: 'float'):
        """Sets the duration99 of this V1Telemetry.


        :param duration99: The duration99 of this V1Telemetry.  # noqa: E501
        :type: float
        """

        self._duration99 = duration99

    @property
    def duration999(self) -> 'float':
        """Gets the duration999 of this V1Telemetry.  # noqa: E501


        :return: The duration999 of this V1Telemetry.  # noqa: E501
        :rtype: float
        """
        return self._duration999

    @duration999.setter
    def duration999(self, duration999: 'float'):
        """Sets the duration999 of this V1Telemetry.


        :param duration999: The duration999 of this V1Telemetry.  # noqa: E501
        :type: float
        """

        self._duration999 = duration999

    @property
    def success_count(self) -> 'int':
        """Gets the success_count of this V1Telemetry.  # noqa: E501


        :return: The success_count of this V1Telemetry.  # noqa: E501
        :rtype: int
        """
        return self._success_count

    @success_count.setter
    def success_count(self, success_count: 'int'):
        """Sets the success_count of this V1Telemetry.


        :param success_count: The success_count of this V1Telemetry.  # noqa: E501
        :type: int
        """

        self._success_count = success_count

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1Telemetry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1Telemetry') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Telemetry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1Telemetry') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
