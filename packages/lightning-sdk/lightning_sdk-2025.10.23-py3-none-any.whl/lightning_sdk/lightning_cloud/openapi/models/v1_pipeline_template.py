# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1PipelineTemplate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'about_page_content': 'str',
        'about_page_id': 'str',
        'created_at': 'datetime',
        'description': 'str',
        'featured': 'bool',
        'id': 'str',
        'image_url': 'str',
        'name': 'str',
        'org_id': 'str',
        'pipeline_id': 'str',
        'project_id': 'str',
        'steps': 'list[V1PipelineStep]',
        'thumbnail_updated_at': 'datetime',
        'thumbnail_url': 'str',
        'updated_at': 'datetime',
        'user_id': 'str'
    }

    attribute_map = {
        'about_page_content': 'aboutPageContent',
        'about_page_id': 'aboutPageId',
        'created_at': 'createdAt',
        'description': 'description',
        'featured': 'featured',
        'id': 'id',
        'image_url': 'imageUrl',
        'name': 'name',
        'org_id': 'orgId',
        'pipeline_id': 'pipelineId',
        'project_id': 'projectId',
        'steps': 'steps',
        'thumbnail_updated_at': 'thumbnailUpdatedAt',
        'thumbnail_url': 'thumbnailUrl',
        'updated_at': 'updatedAt',
        'user_id': 'userId'
    }

    def __init__(self, about_page_content: 'str' =None, about_page_id: 'str' =None, created_at: 'datetime' =None, description: 'str' =None, featured: 'bool' =None, id: 'str' =None, image_url: 'str' =None, name: 'str' =None, org_id: 'str' =None, pipeline_id: 'str' =None, project_id: 'str' =None, steps: 'list[V1PipelineStep]' =None, thumbnail_updated_at: 'datetime' =None, thumbnail_url: 'str' =None, updated_at: 'datetime' =None, user_id: 'str' =None):  # noqa: E501
        """V1PipelineTemplate - a model defined in Swagger"""  # noqa: E501
        self._about_page_content = None
        self._about_page_id = None
        self._created_at = None
        self._description = None
        self._featured = None
        self._id = None
        self._image_url = None
        self._name = None
        self._org_id = None
        self._pipeline_id = None
        self._project_id = None
        self._steps = None
        self._thumbnail_updated_at = None
        self._thumbnail_url = None
        self._updated_at = None
        self._user_id = None
        self.discriminator = None
        if about_page_content is not None:
            self.about_page_content = about_page_content
        if about_page_id is not None:
            self.about_page_id = about_page_id
        if created_at is not None:
            self.created_at = created_at
        if description is not None:
            self.description = description
        if featured is not None:
            self.featured = featured
        if id is not None:
            self.id = id
        if image_url is not None:
            self.image_url = image_url
        if name is not None:
            self.name = name
        if org_id is not None:
            self.org_id = org_id
        if pipeline_id is not None:
            self.pipeline_id = pipeline_id
        if project_id is not None:
            self.project_id = project_id
        if steps is not None:
            self.steps = steps
        if thumbnail_updated_at is not None:
            self.thumbnail_updated_at = thumbnail_updated_at
        if thumbnail_url is not None:
            self.thumbnail_url = thumbnail_url
        if updated_at is not None:
            self.updated_at = updated_at
        if user_id is not None:
            self.user_id = user_id

    @property
    def about_page_content(self) -> 'str':
        """Gets the about_page_content of this V1PipelineTemplate.  # noqa: E501


        :return: The about_page_content of this V1PipelineTemplate.  # noqa: E501
        :rtype: str
        """
        return self._about_page_content

    @about_page_content.setter
    def about_page_content(self, about_page_content: 'str'):
        """Sets the about_page_content of this V1PipelineTemplate.


        :param about_page_content: The about_page_content of this V1PipelineTemplate.  # noqa: E501
        :type: str
        """

        self._about_page_content = about_page_content

    @property
    def about_page_id(self) -> 'str':
        """Gets the about_page_id of this V1PipelineTemplate.  # noqa: E501


        :return: The about_page_id of this V1PipelineTemplate.  # noqa: E501
        :rtype: str
        """
        return self._about_page_id

    @about_page_id.setter
    def about_page_id(self, about_page_id: 'str'):
        """Sets the about_page_id of this V1PipelineTemplate.


        :param about_page_id: The about_page_id of this V1PipelineTemplate.  # noqa: E501
        :type: str
        """

        self._about_page_id = about_page_id

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this V1PipelineTemplate.  # noqa: E501


        :return: The created_at of this V1PipelineTemplate.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this V1PipelineTemplate.


        :param created_at: The created_at of this V1PipelineTemplate.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def description(self) -> 'str':
        """Gets the description of this V1PipelineTemplate.  # noqa: E501


        :return: The description of this V1PipelineTemplate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: 'str'):
        """Sets the description of this V1PipelineTemplate.


        :param description: The description of this V1PipelineTemplate.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def featured(self) -> 'bool':
        """Gets the featured of this V1PipelineTemplate.  # noqa: E501


        :return: The featured of this V1PipelineTemplate.  # noqa: E501
        :rtype: bool
        """
        return self._featured

    @featured.setter
    def featured(self, featured: 'bool'):
        """Sets the featured of this V1PipelineTemplate.


        :param featured: The featured of this V1PipelineTemplate.  # noqa: E501
        :type: bool
        """

        self._featured = featured

    @property
    def id(self) -> 'str':
        """Gets the id of this V1PipelineTemplate.  # noqa: E501


        :return: The id of this V1PipelineTemplate.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1PipelineTemplate.


        :param id: The id of this V1PipelineTemplate.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def image_url(self) -> 'str':
        """Gets the image_url of this V1PipelineTemplate.  # noqa: E501


        :return: The image_url of this V1PipelineTemplate.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url: 'str'):
        """Sets the image_url of this V1PipelineTemplate.


        :param image_url: The image_url of this V1PipelineTemplate.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def name(self) -> 'str':
        """Gets the name of this V1PipelineTemplate.  # noqa: E501


        :return: The name of this V1PipelineTemplate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1PipelineTemplate.


        :param name: The name of this V1PipelineTemplate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def org_id(self) -> 'str':
        """Gets the org_id of this V1PipelineTemplate.  # noqa: E501


        :return: The org_id of this V1PipelineTemplate.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id: 'str'):
        """Sets the org_id of this V1PipelineTemplate.


        :param org_id: The org_id of this V1PipelineTemplate.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def pipeline_id(self) -> 'str':
        """Gets the pipeline_id of this V1PipelineTemplate.  # noqa: E501


        :return: The pipeline_id of this V1PipelineTemplate.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id: 'str'):
        """Sets the pipeline_id of this V1PipelineTemplate.


        :param pipeline_id: The pipeline_id of this V1PipelineTemplate.  # noqa: E501
        :type: str
        """

        self._pipeline_id = pipeline_id

    @property
    def project_id(self) -> 'str':
        """Gets the project_id of this V1PipelineTemplate.  # noqa: E501


        :return: The project_id of this V1PipelineTemplate.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: 'str'):
        """Sets the project_id of this V1PipelineTemplate.


        :param project_id: The project_id of this V1PipelineTemplate.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def steps(self) -> 'list[V1PipelineStep]':
        """Gets the steps of this V1PipelineTemplate.  # noqa: E501


        :return: The steps of this V1PipelineTemplate.  # noqa: E501
        :rtype: list[V1PipelineStep]
        """
        return self._steps

    @steps.setter
    def steps(self, steps: 'list[V1PipelineStep]'):
        """Sets the steps of this V1PipelineTemplate.


        :param steps: The steps of this V1PipelineTemplate.  # noqa: E501
        :type: list[V1PipelineStep]
        """

        self._steps = steps

    @property
    def thumbnail_updated_at(self) -> 'datetime':
        """Gets the thumbnail_updated_at of this V1PipelineTemplate.  # noqa: E501


        :return: The thumbnail_updated_at of this V1PipelineTemplate.  # noqa: E501
        :rtype: datetime
        """
        return self._thumbnail_updated_at

    @thumbnail_updated_at.setter
    def thumbnail_updated_at(self, thumbnail_updated_at: 'datetime'):
        """Sets the thumbnail_updated_at of this V1PipelineTemplate.


        :param thumbnail_updated_at: The thumbnail_updated_at of this V1PipelineTemplate.  # noqa: E501
        :type: datetime
        """

        self._thumbnail_updated_at = thumbnail_updated_at

    @property
    def thumbnail_url(self) -> 'str':
        """Gets the thumbnail_url of this V1PipelineTemplate.  # noqa: E501


        :return: The thumbnail_url of this V1PipelineTemplate.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url: 'str'):
        """Sets the thumbnail_url of this V1PipelineTemplate.


        :param thumbnail_url: The thumbnail_url of this V1PipelineTemplate.  # noqa: E501
        :type: str
        """

        self._thumbnail_url = thumbnail_url

    @property
    def updated_at(self) -> 'datetime':
        """Gets the updated_at of this V1PipelineTemplate.  # noqa: E501


        :return: The updated_at of this V1PipelineTemplate.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: 'datetime'):
        """Sets the updated_at of this V1PipelineTemplate.


        :param updated_at: The updated_at of this V1PipelineTemplate.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def user_id(self) -> 'str':
        """Gets the user_id of this V1PipelineTemplate.  # noqa: E501


        :return: The user_id of this V1PipelineTemplate.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: 'str'):
        """Sets the user_id of this V1PipelineTemplate.


        :param user_id: The user_id of this V1PipelineTemplate.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1PipelineTemplate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1PipelineTemplate') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1PipelineTemplate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1PipelineTemplate') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
