# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1CreateProjectRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_credits_auto_replenish': 'bool',
        'auto_replenish_amount': 'float',
        'auto_replenish_threshold': 'float',
        'default_machine_image_version': 'str',
        'default_machine_type': 'str',
        'description': 'str',
        'display_name': 'str',
        'layout_config': 'list[V1ProjectTab]',
        'name': 'str',
        'organization_billing_enabled': 'bool',
        'organization_id': 'str',
        'preferred_cluster': 'str',
        'quotas': 'V1Quotas'
    }

    attribute_map = {
        'allow_credits_auto_replenish': 'allowCreditsAutoReplenish',
        'auto_replenish_amount': 'autoReplenishAmount',
        'auto_replenish_threshold': 'autoReplenishThreshold',
        'default_machine_image_version': 'defaultMachineImageVersion',
        'default_machine_type': 'defaultMachineType',
        'description': 'description',
        'display_name': 'displayName',
        'layout_config': 'layoutConfig',
        'name': 'name',
        'organization_billing_enabled': 'organizationBillingEnabled',
        'organization_id': 'organizationId',
        'preferred_cluster': 'preferredCluster',
        'quotas': 'quotas'
    }

    def __init__(self, allow_credits_auto_replenish: 'bool' =None, auto_replenish_amount: 'float' =None, auto_replenish_threshold: 'float' =None, default_machine_image_version: 'str' =None, default_machine_type: 'str' =None, description: 'str' =None, display_name: 'str' =None, layout_config: 'list[V1ProjectTab]' =None, name: 'str' =None, organization_billing_enabled: 'bool' =None, organization_id: 'str' =None, preferred_cluster: 'str' =None, quotas: 'V1Quotas' =None):  # noqa: E501
        """V1CreateProjectRequest - a model defined in Swagger"""  # noqa: E501
        self._allow_credits_auto_replenish = None
        self._auto_replenish_amount = None
        self._auto_replenish_threshold = None
        self._default_machine_image_version = None
        self._default_machine_type = None
        self._description = None
        self._display_name = None
        self._layout_config = None
        self._name = None
        self._organization_billing_enabled = None
        self._organization_id = None
        self._preferred_cluster = None
        self._quotas = None
        self.discriminator = None
        if allow_credits_auto_replenish is not None:
            self.allow_credits_auto_replenish = allow_credits_auto_replenish
        if auto_replenish_amount is not None:
            self.auto_replenish_amount = auto_replenish_amount
        if auto_replenish_threshold is not None:
            self.auto_replenish_threshold = auto_replenish_threshold
        if default_machine_image_version is not None:
            self.default_machine_image_version = default_machine_image_version
        if default_machine_type is not None:
            self.default_machine_type = default_machine_type
        if description is not None:
            self.description = description
        if display_name is not None:
            self.display_name = display_name
        if layout_config is not None:
            self.layout_config = layout_config
        if name is not None:
            self.name = name
        if organization_billing_enabled is not None:
            self.organization_billing_enabled = organization_billing_enabled
        if organization_id is not None:
            self.organization_id = organization_id
        if preferred_cluster is not None:
            self.preferred_cluster = preferred_cluster
        if quotas is not None:
            self.quotas = quotas

    @property
    def allow_credits_auto_replenish(self) -> 'bool':
        """Gets the allow_credits_auto_replenish of this V1CreateProjectRequest.  # noqa: E501


        :return: The allow_credits_auto_replenish of this V1CreateProjectRequest.  # noqa: E501
        :rtype: bool
        """
        return self._allow_credits_auto_replenish

    @allow_credits_auto_replenish.setter
    def allow_credits_auto_replenish(self, allow_credits_auto_replenish: 'bool'):
        """Sets the allow_credits_auto_replenish of this V1CreateProjectRequest.


        :param allow_credits_auto_replenish: The allow_credits_auto_replenish of this V1CreateProjectRequest.  # noqa: E501
        :type: bool
        """

        self._allow_credits_auto_replenish = allow_credits_auto_replenish

    @property
    def auto_replenish_amount(self) -> 'float':
        """Gets the auto_replenish_amount of this V1CreateProjectRequest.  # noqa: E501


        :return: The auto_replenish_amount of this V1CreateProjectRequest.  # noqa: E501
        :rtype: float
        """
        return self._auto_replenish_amount

    @auto_replenish_amount.setter
    def auto_replenish_amount(self, auto_replenish_amount: 'float'):
        """Sets the auto_replenish_amount of this V1CreateProjectRequest.


        :param auto_replenish_amount: The auto_replenish_amount of this V1CreateProjectRequest.  # noqa: E501
        :type: float
        """

        self._auto_replenish_amount = auto_replenish_amount

    @property
    def auto_replenish_threshold(self) -> 'float':
        """Gets the auto_replenish_threshold of this V1CreateProjectRequest.  # noqa: E501


        :return: The auto_replenish_threshold of this V1CreateProjectRequest.  # noqa: E501
        :rtype: float
        """
        return self._auto_replenish_threshold

    @auto_replenish_threshold.setter
    def auto_replenish_threshold(self, auto_replenish_threshold: 'float'):
        """Sets the auto_replenish_threshold of this V1CreateProjectRequest.


        :param auto_replenish_threshold: The auto_replenish_threshold of this V1CreateProjectRequest.  # noqa: E501
        :type: float
        """

        self._auto_replenish_threshold = auto_replenish_threshold

    @property
    def default_machine_image_version(self) -> 'str':
        """Gets the default_machine_image_version of this V1CreateProjectRequest.  # noqa: E501


        :return: The default_machine_image_version of this V1CreateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._default_machine_image_version

    @default_machine_image_version.setter
    def default_machine_image_version(self, default_machine_image_version: 'str'):
        """Sets the default_machine_image_version of this V1CreateProjectRequest.


        :param default_machine_image_version: The default_machine_image_version of this V1CreateProjectRequest.  # noqa: E501
        :type: str
        """

        self._default_machine_image_version = default_machine_image_version

    @property
    def default_machine_type(self) -> 'str':
        """Gets the default_machine_type of this V1CreateProjectRequest.  # noqa: E501


        :return: The default_machine_type of this V1CreateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._default_machine_type

    @default_machine_type.setter
    def default_machine_type(self, default_machine_type: 'str'):
        """Sets the default_machine_type of this V1CreateProjectRequest.


        :param default_machine_type: The default_machine_type of this V1CreateProjectRequest.  # noqa: E501
        :type: str
        """

        self._default_machine_type = default_machine_type

    @property
    def description(self) -> 'str':
        """Gets the description of this V1CreateProjectRequest.  # noqa: E501


        :return: The description of this V1CreateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: 'str'):
        """Sets the description of this V1CreateProjectRequest.


        :param description: The description of this V1CreateProjectRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def display_name(self) -> 'str':
        """Gets the display_name of this V1CreateProjectRequest.  # noqa: E501


        :return: The display_name of this V1CreateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: 'str'):
        """Sets the display_name of this V1CreateProjectRequest.


        :param display_name: The display_name of this V1CreateProjectRequest.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def layout_config(self) -> 'list[V1ProjectTab]':
        """Gets the layout_config of this V1CreateProjectRequest.  # noqa: E501


        :return: The layout_config of this V1CreateProjectRequest.  # noqa: E501
        :rtype: list[V1ProjectTab]
        """
        return self._layout_config

    @layout_config.setter
    def layout_config(self, layout_config: 'list[V1ProjectTab]'):
        """Sets the layout_config of this V1CreateProjectRequest.


        :param layout_config: The layout_config of this V1CreateProjectRequest.  # noqa: E501
        :type: list[V1ProjectTab]
        """

        self._layout_config = layout_config

    @property
    def name(self) -> 'str':
        """Gets the name of this V1CreateProjectRequest.  # noqa: E501


        :return: The name of this V1CreateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1CreateProjectRequest.


        :param name: The name of this V1CreateProjectRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def organization_billing_enabled(self) -> 'bool':
        """Gets the organization_billing_enabled of this V1CreateProjectRequest.  # noqa: E501


        :return: The organization_billing_enabled of this V1CreateProjectRequest.  # noqa: E501
        :rtype: bool
        """
        return self._organization_billing_enabled

    @organization_billing_enabled.setter
    def organization_billing_enabled(self, organization_billing_enabled: 'bool'):
        """Sets the organization_billing_enabled of this V1CreateProjectRequest.


        :param organization_billing_enabled: The organization_billing_enabled of this V1CreateProjectRequest.  # noqa: E501
        :type: bool
        """

        self._organization_billing_enabled = organization_billing_enabled

    @property
    def organization_id(self) -> 'str':
        """Gets the organization_id of this V1CreateProjectRequest.  # noqa: E501


        :return: The organization_id of this V1CreateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id: 'str'):
        """Sets the organization_id of this V1CreateProjectRequest.


        :param organization_id: The organization_id of this V1CreateProjectRequest.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def preferred_cluster(self) -> 'str':
        """Gets the preferred_cluster of this V1CreateProjectRequest.  # noqa: E501


        :return: The preferred_cluster of this V1CreateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._preferred_cluster

    @preferred_cluster.setter
    def preferred_cluster(self, preferred_cluster: 'str'):
        """Sets the preferred_cluster of this V1CreateProjectRequest.


        :param preferred_cluster: The preferred_cluster of this V1CreateProjectRequest.  # noqa: E501
        :type: str
        """

        self._preferred_cluster = preferred_cluster

    @property
    def quotas(self) -> 'V1Quotas':
        """Gets the quotas of this V1CreateProjectRequest.  # noqa: E501


        :return: The quotas of this V1CreateProjectRequest.  # noqa: E501
        :rtype: V1Quotas
        """
        return self._quotas

    @quotas.setter
    def quotas(self, quotas: 'V1Quotas'):
        """Sets the quotas of this V1CreateProjectRequest.


        :param quotas: The quotas of this V1CreateProjectRequest.  # noqa: E501
        :type: V1Quotas
        """

        self._quotas = quotas

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1CreateProjectRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1CreateProjectRequest') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1CreateProjectRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1CreateProjectRequest') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
