# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class ProjectIdSchedulesBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_type': 'V1ScheduleActionType',
        'command': 'str',
        'cron_expression': 'str',
        'display_name': 'str',
        'parallel_runs': 'bool',
        'parent_resource_id': 'str',
        'resource_id': 'str',
        'resource_type': 'V1ScheduleResourceType',
        'timezone': 'str'
    }

    attribute_map = {
        'action_type': 'actionType',
        'command': 'command',
        'cron_expression': 'cronExpression',
        'display_name': 'displayName',
        'parallel_runs': 'parallelRuns',
        'parent_resource_id': 'parentResourceId',
        'resource_id': 'resourceId',
        'resource_type': 'resourceType',
        'timezone': 'timezone'
    }

    def __init__(self, action_type: 'V1ScheduleActionType' =None, command: 'str' =None, cron_expression: 'str' =None, display_name: 'str' =None, parallel_runs: 'bool' =None, parent_resource_id: 'str' =None, resource_id: 'str' =None, resource_type: 'V1ScheduleResourceType' =None, timezone: 'str' =None):  # noqa: E501
        """ProjectIdSchedulesBody - a model defined in Swagger"""  # noqa: E501
        self._action_type = None
        self._command = None
        self._cron_expression = None
        self._display_name = None
        self._parallel_runs = None
        self._parent_resource_id = None
        self._resource_id = None
        self._resource_type = None
        self._timezone = None
        self.discriminator = None
        if action_type is not None:
            self.action_type = action_type
        if command is not None:
            self.command = command
        if cron_expression is not None:
            self.cron_expression = cron_expression
        if display_name is not None:
            self.display_name = display_name
        if parallel_runs is not None:
            self.parallel_runs = parallel_runs
        if parent_resource_id is not None:
            self.parent_resource_id = parent_resource_id
        if resource_id is not None:
            self.resource_id = resource_id
        if resource_type is not None:
            self.resource_type = resource_type
        if timezone is not None:
            self.timezone = timezone

    @property
    def action_type(self) -> 'V1ScheduleActionType':
        """Gets the action_type of this ProjectIdSchedulesBody.  # noqa: E501


        :return: The action_type of this ProjectIdSchedulesBody.  # noqa: E501
        :rtype: V1ScheduleActionType
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type: 'V1ScheduleActionType'):
        """Sets the action_type of this ProjectIdSchedulesBody.


        :param action_type: The action_type of this ProjectIdSchedulesBody.  # noqa: E501
        :type: V1ScheduleActionType
        """

        self._action_type = action_type

    @property
    def command(self) -> 'str':
        """Gets the command of this ProjectIdSchedulesBody.  # noqa: E501


        :return: The command of this ProjectIdSchedulesBody.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command: 'str'):
        """Sets the command of this ProjectIdSchedulesBody.


        :param command: The command of this ProjectIdSchedulesBody.  # noqa: E501
        :type: str
        """

        self._command = command

    @property
    def cron_expression(self) -> 'str':
        """Gets the cron_expression of this ProjectIdSchedulesBody.  # noqa: E501


        :return: The cron_expression of this ProjectIdSchedulesBody.  # noqa: E501
        :rtype: str
        """
        return self._cron_expression

    @cron_expression.setter
    def cron_expression(self, cron_expression: 'str'):
        """Sets the cron_expression of this ProjectIdSchedulesBody.


        :param cron_expression: The cron_expression of this ProjectIdSchedulesBody.  # noqa: E501
        :type: str
        """

        self._cron_expression = cron_expression

    @property
    def display_name(self) -> 'str':
        """Gets the display_name of this ProjectIdSchedulesBody.  # noqa: E501


        :return: The display_name of this ProjectIdSchedulesBody.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: 'str'):
        """Sets the display_name of this ProjectIdSchedulesBody.


        :param display_name: The display_name of this ProjectIdSchedulesBody.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def parallel_runs(self) -> 'bool':
        """Gets the parallel_runs of this ProjectIdSchedulesBody.  # noqa: E501


        :return: The parallel_runs of this ProjectIdSchedulesBody.  # noqa: E501
        :rtype: bool
        """
        return self._parallel_runs

    @parallel_runs.setter
    def parallel_runs(self, parallel_runs: 'bool'):
        """Sets the parallel_runs of this ProjectIdSchedulesBody.


        :param parallel_runs: The parallel_runs of this ProjectIdSchedulesBody.  # noqa: E501
        :type: bool
        """

        self._parallel_runs = parallel_runs

    @property
    def parent_resource_id(self) -> 'str':
        """Gets the parent_resource_id of this ProjectIdSchedulesBody.  # noqa: E501


        :return: The parent_resource_id of this ProjectIdSchedulesBody.  # noqa: E501
        :rtype: str
        """
        return self._parent_resource_id

    @parent_resource_id.setter
    def parent_resource_id(self, parent_resource_id: 'str'):
        """Sets the parent_resource_id of this ProjectIdSchedulesBody.


        :param parent_resource_id: The parent_resource_id of this ProjectIdSchedulesBody.  # noqa: E501
        :type: str
        """

        self._parent_resource_id = parent_resource_id

    @property
    def resource_id(self) -> 'str':
        """Gets the resource_id of this ProjectIdSchedulesBody.  # noqa: E501


        :return: The resource_id of this ProjectIdSchedulesBody.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id: 'str'):
        """Sets the resource_id of this ProjectIdSchedulesBody.


        :param resource_id: The resource_id of this ProjectIdSchedulesBody.  # noqa: E501
        :type: str
        """

        self._resource_id = resource_id

    @property
    def resource_type(self) -> 'V1ScheduleResourceType':
        """Gets the resource_type of this ProjectIdSchedulesBody.  # noqa: E501


        :return: The resource_type of this ProjectIdSchedulesBody.  # noqa: E501
        :rtype: V1ScheduleResourceType
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type: 'V1ScheduleResourceType'):
        """Sets the resource_type of this ProjectIdSchedulesBody.


        :param resource_type: The resource_type of this ProjectIdSchedulesBody.  # noqa: E501
        :type: V1ScheduleResourceType
        """

        self._resource_type = resource_type

    @property
    def timezone(self) -> 'str':
        """Gets the timezone of this ProjectIdSchedulesBody.  # noqa: E501


        :return: The timezone of this ProjectIdSchedulesBody.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone: 'str'):
        """Sets the timezone of this ProjectIdSchedulesBody.


        :param timezone: The timezone of this ProjectIdSchedulesBody.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectIdSchedulesBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'ProjectIdSchedulesBody') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectIdSchedulesBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'ProjectIdSchedulesBody') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
