# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1BlogPost(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'author': 'V1Author',
        'author_id': 'str',
        'category': 'str',
        'created_at': 'datetime',
        'customer_logo_url': 'str',
        'customer_name': 'str',
        'description': 'str',
        'id': 'str',
        'image_url': 'str',
        'lit_page': 'V1LitPage',
        'lit_page_id': 'str',
        'title': 'str',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'author': 'author',
        'author_id': 'authorId',
        'category': 'category',
        'created_at': 'createdAt',
        'customer_logo_url': 'customerLogoUrl',
        'customer_name': 'customerName',
        'description': 'description',
        'id': 'id',
        'image_url': 'imageUrl',
        'lit_page': 'litPage',
        'lit_page_id': 'litPageId',
        'title': 'title',
        'updated_at': 'updatedAt'
    }

    def __init__(self, author: 'V1Author' =None, author_id: 'str' =None, category: 'str' =None, created_at: 'datetime' =None, customer_logo_url: 'str' =None, customer_name: 'str' =None, description: 'str' =None, id: 'str' =None, image_url: 'str' =None, lit_page: 'V1LitPage' =None, lit_page_id: 'str' =None, title: 'str' =None, updated_at: 'datetime' =None):  # noqa: E501
        """V1BlogPost - a model defined in Swagger"""  # noqa: E501
        self._author = None
        self._author_id = None
        self._category = None
        self._created_at = None
        self._customer_logo_url = None
        self._customer_name = None
        self._description = None
        self._id = None
        self._image_url = None
        self._lit_page = None
        self._lit_page_id = None
        self._title = None
        self._updated_at = None
        self.discriminator = None
        if author is not None:
            self.author = author
        if author_id is not None:
            self.author_id = author_id
        if category is not None:
            self.category = category
        if created_at is not None:
            self.created_at = created_at
        if customer_logo_url is not None:
            self.customer_logo_url = customer_logo_url
        if customer_name is not None:
            self.customer_name = customer_name
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if image_url is not None:
            self.image_url = image_url
        if lit_page is not None:
            self.lit_page = lit_page
        if lit_page_id is not None:
            self.lit_page_id = lit_page_id
        if title is not None:
            self.title = title
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def author(self) -> 'V1Author':
        """Gets the author of this V1BlogPost.  # noqa: E501


        :return: The author of this V1BlogPost.  # noqa: E501
        :rtype: V1Author
        """
        return self._author

    @author.setter
    def author(self, author: 'V1Author'):
        """Sets the author of this V1BlogPost.


        :param author: The author of this V1BlogPost.  # noqa: E501
        :type: V1Author
        """

        self._author = author

    @property
    def author_id(self) -> 'str':
        """Gets the author_id of this V1BlogPost.  # noqa: E501


        :return: The author_id of this V1BlogPost.  # noqa: E501
        :rtype: str
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id: 'str'):
        """Sets the author_id of this V1BlogPost.


        :param author_id: The author_id of this V1BlogPost.  # noqa: E501
        :type: str
        """

        self._author_id = author_id

    @property
    def category(self) -> 'str':
        """Gets the category of this V1BlogPost.  # noqa: E501


        :return: The category of this V1BlogPost.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category: 'str'):
        """Sets the category of this V1BlogPost.


        :param category: The category of this V1BlogPost.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this V1BlogPost.  # noqa: E501


        :return: The created_at of this V1BlogPost.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this V1BlogPost.


        :param created_at: The created_at of this V1BlogPost.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def customer_logo_url(self) -> 'str':
        """Gets the customer_logo_url of this V1BlogPost.  # noqa: E501


        :return: The customer_logo_url of this V1BlogPost.  # noqa: E501
        :rtype: str
        """
        return self._customer_logo_url

    @customer_logo_url.setter
    def customer_logo_url(self, customer_logo_url: 'str'):
        """Sets the customer_logo_url of this V1BlogPost.


        :param customer_logo_url: The customer_logo_url of this V1BlogPost.  # noqa: E501
        :type: str
        """

        self._customer_logo_url = customer_logo_url

    @property
    def customer_name(self) -> 'str':
        """Gets the customer_name of this V1BlogPost.  # noqa: E501


        :return: The customer_name of this V1BlogPost.  # noqa: E501
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name: 'str'):
        """Sets the customer_name of this V1BlogPost.


        :param customer_name: The customer_name of this V1BlogPost.  # noqa: E501
        :type: str
        """

        self._customer_name = customer_name

    @property
    def description(self) -> 'str':
        """Gets the description of this V1BlogPost.  # noqa: E501


        :return: The description of this V1BlogPost.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: 'str'):
        """Sets the description of this V1BlogPost.


        :param description: The description of this V1BlogPost.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self) -> 'str':
        """Gets the id of this V1BlogPost.  # noqa: E501


        :return: The id of this V1BlogPost.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1BlogPost.


        :param id: The id of this V1BlogPost.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def image_url(self) -> 'str':
        """Gets the image_url of this V1BlogPost.  # noqa: E501


        :return: The image_url of this V1BlogPost.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url: 'str'):
        """Sets the image_url of this V1BlogPost.


        :param image_url: The image_url of this V1BlogPost.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def lit_page(self) -> 'V1LitPage':
        """Gets the lit_page of this V1BlogPost.  # noqa: E501


        :return: The lit_page of this V1BlogPost.  # noqa: E501
        :rtype: V1LitPage
        """
        return self._lit_page

    @lit_page.setter
    def lit_page(self, lit_page: 'V1LitPage'):
        """Sets the lit_page of this V1BlogPost.


        :param lit_page: The lit_page of this V1BlogPost.  # noqa: E501
        :type: V1LitPage
        """

        self._lit_page = lit_page

    @property
    def lit_page_id(self) -> 'str':
        """Gets the lit_page_id of this V1BlogPost.  # noqa: E501


        :return: The lit_page_id of this V1BlogPost.  # noqa: E501
        :rtype: str
        """
        return self._lit_page_id

    @lit_page_id.setter
    def lit_page_id(self, lit_page_id: 'str'):
        """Sets the lit_page_id of this V1BlogPost.


        :param lit_page_id: The lit_page_id of this V1BlogPost.  # noqa: E501
        :type: str
        """

        self._lit_page_id = lit_page_id

    @property
    def title(self) -> 'str':
        """Gets the title of this V1BlogPost.  # noqa: E501


        :return: The title of this V1BlogPost.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: 'str'):
        """Sets the title of this V1BlogPost.


        :param title: The title of this V1BlogPost.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def updated_at(self) -> 'datetime':
        """Gets the updated_at of this V1BlogPost.  # noqa: E501


        :return: The updated_at of this V1BlogPost.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: 'datetime'):
        """Sets the updated_at of this V1BlogPost.


        :param updated_at: The updated_at of this V1BlogPost.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1BlogPost, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1BlogPost') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1BlogPost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1BlogPost') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
