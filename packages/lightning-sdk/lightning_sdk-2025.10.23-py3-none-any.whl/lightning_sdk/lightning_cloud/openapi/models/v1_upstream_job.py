# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1UpstreamJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_start': 'bool',
        'idle_shutdown': 'bool',
        'idle_shutdown_seconds': 'str',
        'job_id': 'str',
        'port': 'str'
    }

    attribute_map = {
        'auto_start': 'autoStart',
        'idle_shutdown': 'idleShutdown',
        'idle_shutdown_seconds': 'idleShutdownSeconds',
        'job_id': 'jobId',
        'port': 'port'
    }

    def __init__(self, auto_start: 'bool' =None, idle_shutdown: 'bool' =None, idle_shutdown_seconds: 'str' =None, job_id: 'str' =None, port: 'str' =None):  # noqa: E501
        """V1UpstreamJob - a model defined in Swagger"""  # noqa: E501
        self._auto_start = None
        self._idle_shutdown = None
        self._idle_shutdown_seconds = None
        self._job_id = None
        self._port = None
        self.discriminator = None
        if auto_start is not None:
            self.auto_start = auto_start
        if idle_shutdown is not None:
            self.idle_shutdown = idle_shutdown
        if idle_shutdown_seconds is not None:
            self.idle_shutdown_seconds = idle_shutdown_seconds
        if job_id is not None:
            self.job_id = job_id
        if port is not None:
            self.port = port

    @property
    def auto_start(self) -> 'bool':
        """Gets the auto_start of this V1UpstreamJob.  # noqa: E501


        :return: The auto_start of this V1UpstreamJob.  # noqa: E501
        :rtype: bool
        """
        return self._auto_start

    @auto_start.setter
    def auto_start(self, auto_start: 'bool'):
        """Sets the auto_start of this V1UpstreamJob.


        :param auto_start: The auto_start of this V1UpstreamJob.  # noqa: E501
        :type: bool
        """

        self._auto_start = auto_start

    @property
    def idle_shutdown(self) -> 'bool':
        """Gets the idle_shutdown of this V1UpstreamJob.  # noqa: E501


        :return: The idle_shutdown of this V1UpstreamJob.  # noqa: E501
        :rtype: bool
        """
        return self._idle_shutdown

    @idle_shutdown.setter
    def idle_shutdown(self, idle_shutdown: 'bool'):
        """Sets the idle_shutdown of this V1UpstreamJob.


        :param idle_shutdown: The idle_shutdown of this V1UpstreamJob.  # noqa: E501
        :type: bool
        """

        self._idle_shutdown = idle_shutdown

    @property
    def idle_shutdown_seconds(self) -> 'str':
        """Gets the idle_shutdown_seconds of this V1UpstreamJob.  # noqa: E501


        :return: The idle_shutdown_seconds of this V1UpstreamJob.  # noqa: E501
        :rtype: str
        """
        return self._idle_shutdown_seconds

    @idle_shutdown_seconds.setter
    def idle_shutdown_seconds(self, idle_shutdown_seconds: 'str'):
        """Sets the idle_shutdown_seconds of this V1UpstreamJob.


        :param idle_shutdown_seconds: The idle_shutdown_seconds of this V1UpstreamJob.  # noqa: E501
        :type: str
        """

        self._idle_shutdown_seconds = idle_shutdown_seconds

    @property
    def job_id(self) -> 'str':
        """Gets the job_id of this V1UpstreamJob.  # noqa: E501


        :return: The job_id of this V1UpstreamJob.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id: 'str'):
        """Sets the job_id of this V1UpstreamJob.


        :param job_id: The job_id of this V1UpstreamJob.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def port(self) -> 'str':
        """Gets the port of this V1UpstreamJob.  # noqa: E501


        :return: The port of this V1UpstreamJob.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port: 'str'):
        """Sets the port of this V1UpstreamJob.


        :param port: The port of this V1UpstreamJob.  # noqa: E501
        :type: str
        """

        self._port = port

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1UpstreamJob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1UpstreamJob') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1UpstreamJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1UpstreamJob') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
