# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1GalleryComponent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'author': 'str',
        'authors': 'list[str]',
        'auto_start': 'bool',
        'categories': 'list[str]',
        'description': 'str',
        'display_name': 'str',
        'entrypoint_file': 'str',
        'example_code': 'str',
        'flow_servers': 'list[V1Flowserver]',
        'git_url': 'str',
        'hardware': 'str',
        'id': 'str',
        'installation_code': 'str',
        'license': 'str',
        'name': 'str',
        'open_url': 'str',
        'org_logo': 'str',
        'organization': 'str',
        'readme': 'str',
        'requirements_path': 'str',
        'short_description': 'str',
        'source_type': 'str',
        'source_url': 'str',
        'tags': 'list[str]',
        'thumbnail': 'str',
        'version': 'str',
        'video': 'str',
        'visibility': 'str',
        'works': 'list[V1Work]'
    }

    attribute_map = {
        'author': 'author',
        'authors': 'authors',
        'auto_start': 'autoStart',
        'categories': 'categories',
        'description': 'description',
        'display_name': 'displayName',
        'entrypoint_file': 'entrypointFile',
        'example_code': 'exampleCode',
        'flow_servers': 'flowServers',
        'git_url': 'gitUrl',
        'hardware': 'hardware',
        'id': 'id',
        'installation_code': 'installationCode',
        'license': 'license',
        'name': 'name',
        'open_url': 'openUrl',
        'org_logo': 'orgLogo',
        'organization': 'organization',
        'readme': 'readme',
        'requirements_path': 'requirementsPath',
        'short_description': 'shortDescription',
        'source_type': 'sourceType',
        'source_url': 'sourceUrl',
        'tags': 'tags',
        'thumbnail': 'thumbnail',
        'version': 'version',
        'video': 'video',
        'visibility': 'visibility',
        'works': 'works'
    }

    def __init__(self, author: 'str' =None, authors: 'list[str]' =None, auto_start: 'bool' =None, categories: 'list[str]' =None, description: 'str' =None, display_name: 'str' =None, entrypoint_file: 'str' =None, example_code: 'str' =None, flow_servers: 'list[V1Flowserver]' =None, git_url: 'str' =None, hardware: 'str' =None, id: 'str' =None, installation_code: 'str' =None, license: 'str' =None, name: 'str' =None, open_url: 'str' =None, org_logo: 'str' =None, organization: 'str' =None, readme: 'str' =None, requirements_path: 'str' =None, short_description: 'str' =None, source_type: 'str' =None, source_url: 'str' =None, tags: 'list[str]' =None, thumbnail: 'str' =None, version: 'str' =None, video: 'str' =None, visibility: 'str' =None, works: 'list[V1Work]' =None):  # noqa: E501
        """V1GalleryComponent - a model defined in Swagger"""  # noqa: E501
        self._author = None
        self._authors = None
        self._auto_start = None
        self._categories = None
        self._description = None
        self._display_name = None
        self._entrypoint_file = None
        self._example_code = None
        self._flow_servers = None
        self._git_url = None
        self._hardware = None
        self._id = None
        self._installation_code = None
        self._license = None
        self._name = None
        self._open_url = None
        self._org_logo = None
        self._organization = None
        self._readme = None
        self._requirements_path = None
        self._short_description = None
        self._source_type = None
        self._source_url = None
        self._tags = None
        self._thumbnail = None
        self._version = None
        self._video = None
        self._visibility = None
        self._works = None
        self.discriminator = None
        if author is not None:
            self.author = author
        if authors is not None:
            self.authors = authors
        if auto_start is not None:
            self.auto_start = auto_start
        if categories is not None:
            self.categories = categories
        if description is not None:
            self.description = description
        if display_name is not None:
            self.display_name = display_name
        if entrypoint_file is not None:
            self.entrypoint_file = entrypoint_file
        if example_code is not None:
            self.example_code = example_code
        if flow_servers is not None:
            self.flow_servers = flow_servers
        if git_url is not None:
            self.git_url = git_url
        if hardware is not None:
            self.hardware = hardware
        if id is not None:
            self.id = id
        if installation_code is not None:
            self.installation_code = installation_code
        if license is not None:
            self.license = license
        if name is not None:
            self.name = name
        if open_url is not None:
            self.open_url = open_url
        if org_logo is not None:
            self.org_logo = org_logo
        if organization is not None:
            self.organization = organization
        if readme is not None:
            self.readme = readme
        if requirements_path is not None:
            self.requirements_path = requirements_path
        if short_description is not None:
            self.short_description = short_description
        if source_type is not None:
            self.source_type = source_type
        if source_url is not None:
            self.source_url = source_url
        if tags is not None:
            self.tags = tags
        if thumbnail is not None:
            self.thumbnail = thumbnail
        if version is not None:
            self.version = version
        if video is not None:
            self.video = video
        if visibility is not None:
            self.visibility = visibility
        if works is not None:
            self.works = works

    @property
    def author(self) -> 'str':
        """Gets the author of this V1GalleryComponent.  # noqa: E501


        :return: The author of this V1GalleryComponent.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author: 'str'):
        """Sets the author of this V1GalleryComponent.


        :param author: The author of this V1GalleryComponent.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def authors(self) -> 'list[str]':
        """Gets the authors of this V1GalleryComponent.  # noqa: E501


        :return: The authors of this V1GalleryComponent.  # noqa: E501
        :rtype: list[str]
        """
        return self._authors

    @authors.setter
    def authors(self, authors: 'list[str]'):
        """Sets the authors of this V1GalleryComponent.


        :param authors: The authors of this V1GalleryComponent.  # noqa: E501
        :type: list[str]
        """

        self._authors = authors

    @property
    def auto_start(self) -> 'bool':
        """Gets the auto_start of this V1GalleryComponent.  # noqa: E501


        :return: The auto_start of this V1GalleryComponent.  # noqa: E501
        :rtype: bool
        """
        return self._auto_start

    @auto_start.setter
    def auto_start(self, auto_start: 'bool'):
        """Sets the auto_start of this V1GalleryComponent.


        :param auto_start: The auto_start of this V1GalleryComponent.  # noqa: E501
        :type: bool
        """

        self._auto_start = auto_start

    @property
    def categories(self) -> 'list[str]':
        """Gets the categories of this V1GalleryComponent.  # noqa: E501


        :return: The categories of this V1GalleryComponent.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories: 'list[str]'):
        """Sets the categories of this V1GalleryComponent.


        :param categories: The categories of this V1GalleryComponent.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def description(self) -> 'str':
        """Gets the description of this V1GalleryComponent.  # noqa: E501


        :return: The description of this V1GalleryComponent.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: 'str'):
        """Sets the description of this V1GalleryComponent.


        :param description: The description of this V1GalleryComponent.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def display_name(self) -> 'str':
        """Gets the display_name of this V1GalleryComponent.  # noqa: E501


        :return: The display_name of this V1GalleryComponent.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: 'str'):
        """Sets the display_name of this V1GalleryComponent.


        :param display_name: The display_name of this V1GalleryComponent.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def entrypoint_file(self) -> 'str':
        """Gets the entrypoint_file of this V1GalleryComponent.  # noqa: E501


        :return: The entrypoint_file of this V1GalleryComponent.  # noqa: E501
        :rtype: str
        """
        return self._entrypoint_file

    @entrypoint_file.setter
    def entrypoint_file(self, entrypoint_file: 'str'):
        """Sets the entrypoint_file of this V1GalleryComponent.


        :param entrypoint_file: The entrypoint_file of this V1GalleryComponent.  # noqa: E501
        :type: str
        """

        self._entrypoint_file = entrypoint_file

    @property
    def example_code(self) -> 'str':
        """Gets the example_code of this V1GalleryComponent.  # noqa: E501


        :return: The example_code of this V1GalleryComponent.  # noqa: E501
        :rtype: str
        """
        return self._example_code

    @example_code.setter
    def example_code(self, example_code: 'str'):
        """Sets the example_code of this V1GalleryComponent.


        :param example_code: The example_code of this V1GalleryComponent.  # noqa: E501
        :type: str
        """

        self._example_code = example_code

    @property
    def flow_servers(self) -> 'list[V1Flowserver]':
        """Gets the flow_servers of this V1GalleryComponent.  # noqa: E501


        :return: The flow_servers of this V1GalleryComponent.  # noqa: E501
        :rtype: list[V1Flowserver]
        """
        return self._flow_servers

    @flow_servers.setter
    def flow_servers(self, flow_servers: 'list[V1Flowserver]'):
        """Sets the flow_servers of this V1GalleryComponent.


        :param flow_servers: The flow_servers of this V1GalleryComponent.  # noqa: E501
        :type: list[V1Flowserver]
        """

        self._flow_servers = flow_servers

    @property
    def git_url(self) -> 'str':
        """Gets the git_url of this V1GalleryComponent.  # noqa: E501


        :return: The git_url of this V1GalleryComponent.  # noqa: E501
        :rtype: str
        """
        return self._git_url

    @git_url.setter
    def git_url(self, git_url: 'str'):
        """Sets the git_url of this V1GalleryComponent.


        :param git_url: The git_url of this V1GalleryComponent.  # noqa: E501
        :type: str
        """

        self._git_url = git_url

    @property
    def hardware(self) -> 'str':
        """Gets the hardware of this V1GalleryComponent.  # noqa: E501


        :return: The hardware of this V1GalleryComponent.  # noqa: E501
        :rtype: str
        """
        return self._hardware

    @hardware.setter
    def hardware(self, hardware: 'str'):
        """Sets the hardware of this V1GalleryComponent.


        :param hardware: The hardware of this V1GalleryComponent.  # noqa: E501
        :type: str
        """

        self._hardware = hardware

    @property
    def id(self) -> 'str':
        """Gets the id of this V1GalleryComponent.  # noqa: E501


        :return: The id of this V1GalleryComponent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1GalleryComponent.


        :param id: The id of this V1GalleryComponent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def installation_code(self) -> 'str':
        """Gets the installation_code of this V1GalleryComponent.  # noqa: E501


        :return: The installation_code of this V1GalleryComponent.  # noqa: E501
        :rtype: str
        """
        return self._installation_code

    @installation_code.setter
    def installation_code(self, installation_code: 'str'):
        """Sets the installation_code of this V1GalleryComponent.


        :param installation_code: The installation_code of this V1GalleryComponent.  # noqa: E501
        :type: str
        """

        self._installation_code = installation_code

    @property
    def license(self) -> 'str':
        """Gets the license of this V1GalleryComponent.  # noqa: E501


        :return: The license of this V1GalleryComponent.  # noqa: E501
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license: 'str'):
        """Sets the license of this V1GalleryComponent.


        :param license: The license of this V1GalleryComponent.  # noqa: E501
        :type: str
        """

        self._license = license

    @property
    def name(self) -> 'str':
        """Gets the name of this V1GalleryComponent.  # noqa: E501


        :return: The name of this V1GalleryComponent.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1GalleryComponent.


        :param name: The name of this V1GalleryComponent.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def open_url(self) -> 'str':
        """Gets the open_url of this V1GalleryComponent.  # noqa: E501


        :return: The open_url of this V1GalleryComponent.  # noqa: E501
        :rtype: str
        """
        return self._open_url

    @open_url.setter
    def open_url(self, open_url: 'str'):
        """Sets the open_url of this V1GalleryComponent.


        :param open_url: The open_url of this V1GalleryComponent.  # noqa: E501
        :type: str
        """

        self._open_url = open_url

    @property
    def org_logo(self) -> 'str':
        """Gets the org_logo of this V1GalleryComponent.  # noqa: E501


        :return: The org_logo of this V1GalleryComponent.  # noqa: E501
        :rtype: str
        """
        return self._org_logo

    @org_logo.setter
    def org_logo(self, org_logo: 'str'):
        """Sets the org_logo of this V1GalleryComponent.


        :param org_logo: The org_logo of this V1GalleryComponent.  # noqa: E501
        :type: str
        """

        self._org_logo = org_logo

    @property
    def organization(self) -> 'str':
        """Gets the organization of this V1GalleryComponent.  # noqa: E501


        :return: The organization of this V1GalleryComponent.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization: 'str'):
        """Sets the organization of this V1GalleryComponent.


        :param organization: The organization of this V1GalleryComponent.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def readme(self) -> 'str':
        """Gets the readme of this V1GalleryComponent.  # noqa: E501


        :return: The readme of this V1GalleryComponent.  # noqa: E501
        :rtype: str
        """
        return self._readme

    @readme.setter
    def readme(self, readme: 'str'):
        """Sets the readme of this V1GalleryComponent.


        :param readme: The readme of this V1GalleryComponent.  # noqa: E501
        :type: str
        """

        self._readme = readme

    @property
    def requirements_path(self) -> 'str':
        """Gets the requirements_path of this V1GalleryComponent.  # noqa: E501


        :return: The requirements_path of this V1GalleryComponent.  # noqa: E501
        :rtype: str
        """
        return self._requirements_path

    @requirements_path.setter
    def requirements_path(self, requirements_path: 'str'):
        """Sets the requirements_path of this V1GalleryComponent.


        :param requirements_path: The requirements_path of this V1GalleryComponent.  # noqa: E501
        :type: str
        """

        self._requirements_path = requirements_path

    @property
    def short_description(self) -> 'str':
        """Gets the short_description of this V1GalleryComponent.  # noqa: E501


        :return: The short_description of this V1GalleryComponent.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description: 'str'):
        """Sets the short_description of this V1GalleryComponent.


        :param short_description: The short_description of this V1GalleryComponent.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def source_type(self) -> 'str':
        """Gets the source_type of this V1GalleryComponent.  # noqa: E501


        :return: The source_type of this V1GalleryComponent.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type: 'str'):
        """Sets the source_type of this V1GalleryComponent.


        :param source_type: The source_type of this V1GalleryComponent.  # noqa: E501
        :type: str
        """

        self._source_type = source_type

    @property
    def source_url(self) -> 'str':
        """Gets the source_url of this V1GalleryComponent.  # noqa: E501


        :return: The source_url of this V1GalleryComponent.  # noqa: E501
        :rtype: str
        """
        return self._source_url

    @source_url.setter
    def source_url(self, source_url: 'str'):
        """Sets the source_url of this V1GalleryComponent.


        :param source_url: The source_url of this V1GalleryComponent.  # noqa: E501
        :type: str
        """

        self._source_url = source_url

    @property
    def tags(self) -> 'list[str]':
        """Gets the tags of this V1GalleryComponent.  # noqa: E501


        :return: The tags of this V1GalleryComponent.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: 'list[str]'):
        """Sets the tags of this V1GalleryComponent.


        :param tags: The tags of this V1GalleryComponent.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def thumbnail(self) -> 'str':
        """Gets the thumbnail of this V1GalleryComponent.  # noqa: E501


        :return: The thumbnail of this V1GalleryComponent.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail: 'str'):
        """Sets the thumbnail of this V1GalleryComponent.


        :param thumbnail: The thumbnail of this V1GalleryComponent.  # noqa: E501
        :type: str
        """

        self._thumbnail = thumbnail

    @property
    def version(self) -> 'str':
        """Gets the version of this V1GalleryComponent.  # noqa: E501


        :return: The version of this V1GalleryComponent.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: 'str'):
        """Sets the version of this V1GalleryComponent.


        :param version: The version of this V1GalleryComponent.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def video(self) -> 'str':
        """Gets the video of this V1GalleryComponent.  # noqa: E501


        :return: The video of this V1GalleryComponent.  # noqa: E501
        :rtype: str
        """
        return self._video

    @video.setter
    def video(self, video: 'str'):
        """Sets the video of this V1GalleryComponent.


        :param video: The video of this V1GalleryComponent.  # noqa: E501
        :type: str
        """

        self._video = video

    @property
    def visibility(self) -> 'str':
        """Gets the visibility of this V1GalleryComponent.  # noqa: E501


        :return: The visibility of this V1GalleryComponent.  # noqa: E501
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility: 'str'):
        """Sets the visibility of this V1GalleryComponent.


        :param visibility: The visibility of this V1GalleryComponent.  # noqa: E501
        :type: str
        """

        self._visibility = visibility

    @property
    def works(self) -> 'list[V1Work]':
        """Gets the works of this V1GalleryComponent.  # noqa: E501


        :return: The works of this V1GalleryComponent.  # noqa: E501
        :rtype: list[V1Work]
        """
        return self._works

    @works.setter
    def works(self, works: 'list[V1Work]'):
        """Sets the works of this V1GalleryComponent.


        :param works: The works of this V1GalleryComponent.  # noqa: E501
        :type: list[V1Work]
        """

        self._works = works

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1GalleryComponent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1GalleryComponent') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1GalleryComponent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1GalleryComponent') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
