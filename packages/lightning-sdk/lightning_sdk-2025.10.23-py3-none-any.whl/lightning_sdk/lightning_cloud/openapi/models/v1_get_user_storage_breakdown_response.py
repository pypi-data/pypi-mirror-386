# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1GetUserStorageBreakdownResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cloudspace_storage_bytes': 'str',
        'data_connection_storage_bytes': 'str',
        'folder_storage_bytes': 'str',
        'job_storage_bytes': 'str',
        'limit_bytes': 'str',
        'projects': 'list[V1ProjectStorage]',
        'total_billable_bytes': 'str',
        'total_free_bytes': 'str',
        'total_model_storage_bytes': 'str',
        'total_storage_bytes': 'str',
        'upload_storage_bytes': 'str'
    }

    attribute_map = {
        'cloudspace_storage_bytes': 'cloudspaceStorageBytes',
        'data_connection_storage_bytes': 'dataConnectionStorageBytes',
        'folder_storage_bytes': 'folderStorageBytes',
        'job_storage_bytes': 'jobStorageBytes',
        'limit_bytes': 'limitBytes',
        'projects': 'projects',
        'total_billable_bytes': 'totalBillableBytes',
        'total_free_bytes': 'totalFreeBytes',
        'total_model_storage_bytes': 'totalModelStorageBytes',
        'total_storage_bytes': 'totalStorageBytes',
        'upload_storage_bytes': 'uploadStorageBytes'
    }

    def __init__(self, cloudspace_storage_bytes: 'str' =None, data_connection_storage_bytes: 'str' =None, folder_storage_bytes: 'str' =None, job_storage_bytes: 'str' =None, limit_bytes: 'str' =None, projects: 'list[V1ProjectStorage]' =None, total_billable_bytes: 'str' =None, total_free_bytes: 'str' =None, total_model_storage_bytes: 'str' =None, total_storage_bytes: 'str' =None, upload_storage_bytes: 'str' =None):  # noqa: E501
        """V1GetUserStorageBreakdownResponse - a model defined in Swagger"""  # noqa: E501
        self._cloudspace_storage_bytes = None
        self._data_connection_storage_bytes = None
        self._folder_storage_bytes = None
        self._job_storage_bytes = None
        self._limit_bytes = None
        self._projects = None
        self._total_billable_bytes = None
        self._total_free_bytes = None
        self._total_model_storage_bytes = None
        self._total_storage_bytes = None
        self._upload_storage_bytes = None
        self.discriminator = None
        if cloudspace_storage_bytes is not None:
            self.cloudspace_storage_bytes = cloudspace_storage_bytes
        if data_connection_storage_bytes is not None:
            self.data_connection_storage_bytes = data_connection_storage_bytes
        if folder_storage_bytes is not None:
            self.folder_storage_bytes = folder_storage_bytes
        if job_storage_bytes is not None:
            self.job_storage_bytes = job_storage_bytes
        if limit_bytes is not None:
            self.limit_bytes = limit_bytes
        if projects is not None:
            self.projects = projects
        if total_billable_bytes is not None:
            self.total_billable_bytes = total_billable_bytes
        if total_free_bytes is not None:
            self.total_free_bytes = total_free_bytes
        if total_model_storage_bytes is not None:
            self.total_model_storage_bytes = total_model_storage_bytes
        if total_storage_bytes is not None:
            self.total_storage_bytes = total_storage_bytes
        if upload_storage_bytes is not None:
            self.upload_storage_bytes = upload_storage_bytes

    @property
    def cloudspace_storage_bytes(self) -> 'str':
        """Gets the cloudspace_storage_bytes of this V1GetUserStorageBreakdownResponse.  # noqa: E501


        :return: The cloudspace_storage_bytes of this V1GetUserStorageBreakdownResponse.  # noqa: E501
        :rtype: str
        """
        return self._cloudspace_storage_bytes

    @cloudspace_storage_bytes.setter
    def cloudspace_storage_bytes(self, cloudspace_storage_bytes: 'str'):
        """Sets the cloudspace_storage_bytes of this V1GetUserStorageBreakdownResponse.


        :param cloudspace_storage_bytes: The cloudspace_storage_bytes of this V1GetUserStorageBreakdownResponse.  # noqa: E501
        :type: str
        """

        self._cloudspace_storage_bytes = cloudspace_storage_bytes

    @property
    def data_connection_storage_bytes(self) -> 'str':
        """Gets the data_connection_storage_bytes of this V1GetUserStorageBreakdownResponse.  # noqa: E501


        :return: The data_connection_storage_bytes of this V1GetUserStorageBreakdownResponse.  # noqa: E501
        :rtype: str
        """
        return self._data_connection_storage_bytes

    @data_connection_storage_bytes.setter
    def data_connection_storage_bytes(self, data_connection_storage_bytes: 'str'):
        """Sets the data_connection_storage_bytes of this V1GetUserStorageBreakdownResponse.


        :param data_connection_storage_bytes: The data_connection_storage_bytes of this V1GetUserStorageBreakdownResponse.  # noqa: E501
        :type: str
        """

        self._data_connection_storage_bytes = data_connection_storage_bytes

    @property
    def folder_storage_bytes(self) -> 'str':
        """Gets the folder_storage_bytes of this V1GetUserStorageBreakdownResponse.  # noqa: E501


        :return: The folder_storage_bytes of this V1GetUserStorageBreakdownResponse.  # noqa: E501
        :rtype: str
        """
        return self._folder_storage_bytes

    @folder_storage_bytes.setter
    def folder_storage_bytes(self, folder_storage_bytes: 'str'):
        """Sets the folder_storage_bytes of this V1GetUserStorageBreakdownResponse.


        :param folder_storage_bytes: The folder_storage_bytes of this V1GetUserStorageBreakdownResponse.  # noqa: E501
        :type: str
        """

        self._folder_storage_bytes = folder_storage_bytes

    @property
    def job_storage_bytes(self) -> 'str':
        """Gets the job_storage_bytes of this V1GetUserStorageBreakdownResponse.  # noqa: E501


        :return: The job_storage_bytes of this V1GetUserStorageBreakdownResponse.  # noqa: E501
        :rtype: str
        """
        return self._job_storage_bytes

    @job_storage_bytes.setter
    def job_storage_bytes(self, job_storage_bytes: 'str'):
        """Sets the job_storage_bytes of this V1GetUserStorageBreakdownResponse.


        :param job_storage_bytes: The job_storage_bytes of this V1GetUserStorageBreakdownResponse.  # noqa: E501
        :type: str
        """

        self._job_storage_bytes = job_storage_bytes

    @property
    def limit_bytes(self) -> 'str':
        """Gets the limit_bytes of this V1GetUserStorageBreakdownResponse.  # noqa: E501


        :return: The limit_bytes of this V1GetUserStorageBreakdownResponse.  # noqa: E501
        :rtype: str
        """
        return self._limit_bytes

    @limit_bytes.setter
    def limit_bytes(self, limit_bytes: 'str'):
        """Sets the limit_bytes of this V1GetUserStorageBreakdownResponse.


        :param limit_bytes: The limit_bytes of this V1GetUserStorageBreakdownResponse.  # noqa: E501
        :type: str
        """

        self._limit_bytes = limit_bytes

    @property
    def projects(self) -> 'list[V1ProjectStorage]':
        """Gets the projects of this V1GetUserStorageBreakdownResponse.  # noqa: E501


        :return: The projects of this V1GetUserStorageBreakdownResponse.  # noqa: E501
        :rtype: list[V1ProjectStorage]
        """
        return self._projects

    @projects.setter
    def projects(self, projects: 'list[V1ProjectStorage]'):
        """Sets the projects of this V1GetUserStorageBreakdownResponse.


        :param projects: The projects of this V1GetUserStorageBreakdownResponse.  # noqa: E501
        :type: list[V1ProjectStorage]
        """

        self._projects = projects

    @property
    def total_billable_bytes(self) -> 'str':
        """Gets the total_billable_bytes of this V1GetUserStorageBreakdownResponse.  # noqa: E501


        :return: The total_billable_bytes of this V1GetUserStorageBreakdownResponse.  # noqa: E501
        :rtype: str
        """
        return self._total_billable_bytes

    @total_billable_bytes.setter
    def total_billable_bytes(self, total_billable_bytes: 'str'):
        """Sets the total_billable_bytes of this V1GetUserStorageBreakdownResponse.


        :param total_billable_bytes: The total_billable_bytes of this V1GetUserStorageBreakdownResponse.  # noqa: E501
        :type: str
        """

        self._total_billable_bytes = total_billable_bytes

    @property
    def total_free_bytes(self) -> 'str':
        """Gets the total_free_bytes of this V1GetUserStorageBreakdownResponse.  # noqa: E501


        :return: The total_free_bytes of this V1GetUserStorageBreakdownResponse.  # noqa: E501
        :rtype: str
        """
        return self._total_free_bytes

    @total_free_bytes.setter
    def total_free_bytes(self, total_free_bytes: 'str'):
        """Sets the total_free_bytes of this V1GetUserStorageBreakdownResponse.


        :param total_free_bytes: The total_free_bytes of this V1GetUserStorageBreakdownResponse.  # noqa: E501
        :type: str
        """

        self._total_free_bytes = total_free_bytes

    @property
    def total_model_storage_bytes(self) -> 'str':
        """Gets the total_model_storage_bytes of this V1GetUserStorageBreakdownResponse.  # noqa: E501


        :return: The total_model_storage_bytes of this V1GetUserStorageBreakdownResponse.  # noqa: E501
        :rtype: str
        """
        return self._total_model_storage_bytes

    @total_model_storage_bytes.setter
    def total_model_storage_bytes(self, total_model_storage_bytes: 'str'):
        """Sets the total_model_storage_bytes of this V1GetUserStorageBreakdownResponse.


        :param total_model_storage_bytes: The total_model_storage_bytes of this V1GetUserStorageBreakdownResponse.  # noqa: E501
        :type: str
        """

        self._total_model_storage_bytes = total_model_storage_bytes

    @property
    def total_storage_bytes(self) -> 'str':
        """Gets the total_storage_bytes of this V1GetUserStorageBreakdownResponse.  # noqa: E501


        :return: The total_storage_bytes of this V1GetUserStorageBreakdownResponse.  # noqa: E501
        :rtype: str
        """
        return self._total_storage_bytes

    @total_storage_bytes.setter
    def total_storage_bytes(self, total_storage_bytes: 'str'):
        """Sets the total_storage_bytes of this V1GetUserStorageBreakdownResponse.


        :param total_storage_bytes: The total_storage_bytes of this V1GetUserStorageBreakdownResponse.  # noqa: E501
        :type: str
        """

        self._total_storage_bytes = total_storage_bytes

    @property
    def upload_storage_bytes(self) -> 'str':
        """Gets the upload_storage_bytes of this V1GetUserStorageBreakdownResponse.  # noqa: E501


        :return: The upload_storage_bytes of this V1GetUserStorageBreakdownResponse.  # noqa: E501
        :rtype: str
        """
        return self._upload_storage_bytes

    @upload_storage_bytes.setter
    def upload_storage_bytes(self, upload_storage_bytes: 'str'):
        """Sets the upload_storage_bytes of this V1GetUserStorageBreakdownResponse.


        :param upload_storage_bytes: The upload_storage_bytes of this V1GetUserStorageBreakdownResponse.  # noqa: E501
        :type: str
        """

        self._upload_storage_bytes = upload_storage_bytes

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1GetUserStorageBreakdownResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1GetUserStorageBreakdownResponse') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1GetUserStorageBreakdownResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1GetUserStorageBreakdownResponse') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
