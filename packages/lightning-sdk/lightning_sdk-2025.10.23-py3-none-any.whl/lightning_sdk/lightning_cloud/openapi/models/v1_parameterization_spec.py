# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1ParameterizationSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'command': 'str',
        'entrypoint': 'str',
        'env': 'list[V1EnvVar]',
        'image': 'str',
        'parameters': 'list[V1DeploymentTemplateParameter]'
    }

    attribute_map = {
        'command': 'command',
        'entrypoint': 'entrypoint',
        'env': 'env',
        'image': 'image',
        'parameters': 'parameters'
    }

    def __init__(self, command: 'str' =None, entrypoint: 'str' =None, env: 'list[V1EnvVar]' =None, image: 'str' =None, parameters: 'list[V1DeploymentTemplateParameter]' =None):  # noqa: E501
        """V1ParameterizationSpec - a model defined in Swagger"""  # noqa: E501
        self._command = None
        self._entrypoint = None
        self._env = None
        self._image = None
        self._parameters = None
        self.discriminator = None
        if command is not None:
            self.command = command
        if entrypoint is not None:
            self.entrypoint = entrypoint
        if env is not None:
            self.env = env
        if image is not None:
            self.image = image
        if parameters is not None:
            self.parameters = parameters

    @property
    def command(self) -> 'str':
        """Gets the command of this V1ParameterizationSpec.  # noqa: E501


        :return: The command of this V1ParameterizationSpec.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command: 'str'):
        """Sets the command of this V1ParameterizationSpec.


        :param command: The command of this V1ParameterizationSpec.  # noqa: E501
        :type: str
        """

        self._command = command

    @property
    def entrypoint(self) -> 'str':
        """Gets the entrypoint of this V1ParameterizationSpec.  # noqa: E501


        :return: The entrypoint of this V1ParameterizationSpec.  # noqa: E501
        :rtype: str
        """
        return self._entrypoint

    @entrypoint.setter
    def entrypoint(self, entrypoint: 'str'):
        """Sets the entrypoint of this V1ParameterizationSpec.


        :param entrypoint: The entrypoint of this V1ParameterizationSpec.  # noqa: E501
        :type: str
        """

        self._entrypoint = entrypoint

    @property
    def env(self) -> 'list[V1EnvVar]':
        """Gets the env of this V1ParameterizationSpec.  # noqa: E501


        :return: The env of this V1ParameterizationSpec.  # noqa: E501
        :rtype: list[V1EnvVar]
        """
        return self._env

    @env.setter
    def env(self, env: 'list[V1EnvVar]'):
        """Sets the env of this V1ParameterizationSpec.


        :param env: The env of this V1ParameterizationSpec.  # noqa: E501
        :type: list[V1EnvVar]
        """

        self._env = env

    @property
    def image(self) -> 'str':
        """Gets the image of this V1ParameterizationSpec.  # noqa: E501


        :return: The image of this V1ParameterizationSpec.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image: 'str'):
        """Sets the image of this V1ParameterizationSpec.


        :param image: The image of this V1ParameterizationSpec.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def parameters(self) -> 'list[V1DeploymentTemplateParameter]':
        """Gets the parameters of this V1ParameterizationSpec.  # noqa: E501


        :return: The parameters of this V1ParameterizationSpec.  # noqa: E501
        :rtype: list[V1DeploymentTemplateParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: 'list[V1DeploymentTemplateParameter]'):
        """Sets the parameters of this V1ParameterizationSpec.


        :param parameters: The parameters of this V1ParameterizationSpec.  # noqa: E501
        :type: list[V1DeploymentTemplateParameter]
        """

        self._parameters = parameters

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1ParameterizationSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1ParameterizationSpec') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ParameterizationSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1ParameterizationSpec') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
