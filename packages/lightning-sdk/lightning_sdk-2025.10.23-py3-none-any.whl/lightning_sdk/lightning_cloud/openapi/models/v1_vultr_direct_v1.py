# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1VultrDirectV1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'credentials_secret_id': 'str',
        'primary_region': 'str',
        'regions': 'list[str]'
    }

    attribute_map = {
        'credentials_secret_id': 'credentialsSecretId',
        'primary_region': 'primaryRegion',
        'regions': 'regions'
    }

    def __init__(self, credentials_secret_id: 'str' =None, primary_region: 'str' =None, regions: 'list[str]' =None):  # noqa: E501
        """V1VultrDirectV1 - a model defined in Swagger"""  # noqa: E501
        self._credentials_secret_id = None
        self._primary_region = None
        self._regions = None
        self.discriminator = None
        if credentials_secret_id is not None:
            self.credentials_secret_id = credentials_secret_id
        if primary_region is not None:
            self.primary_region = primary_region
        if regions is not None:
            self.regions = regions

    @property
    def credentials_secret_id(self) -> 'str':
        """Gets the credentials_secret_id of this V1VultrDirectV1.  # noqa: E501

        ID of the secret that contains the Vultr API key.  # noqa: E501

        :return: The credentials_secret_id of this V1VultrDirectV1.  # noqa: E501
        :rtype: str
        """
        return self._credentials_secret_id

    @credentials_secret_id.setter
    def credentials_secret_id(self, credentials_secret_id: 'str'):
        """Sets the credentials_secret_id of this V1VultrDirectV1.

        ID of the secret that contains the Vultr API key.  # noqa: E501

        :param credentials_secret_id: The credentials_secret_id of this V1VultrDirectV1.  # noqa: E501
        :type: str
        """

        self._credentials_secret_id = credentials_secret_id

    @property
    def primary_region(self) -> 'str':
        """Gets the primary_region of this V1VultrDirectV1.  # noqa: E501


        :return: The primary_region of this V1VultrDirectV1.  # noqa: E501
        :rtype: str
        """
        return self._primary_region

    @primary_region.setter
    def primary_region(self, primary_region: 'str'):
        """Sets the primary_region of this V1VultrDirectV1.


        :param primary_region: The primary_region of this V1VultrDirectV1.  # noqa: E501
        :type: str
        """

        self._primary_region = primary_region

    @property
    def regions(self) -> 'list[str]':
        """Gets the regions of this V1VultrDirectV1.  # noqa: E501


        :return: The regions of this V1VultrDirectV1.  # noqa: E501
        :rtype: list[str]
        """
        return self._regions

    @regions.setter
    def regions(self, regions: 'list[str]'):
        """Sets the regions of this V1VultrDirectV1.


        :param regions: The regions of this V1VultrDirectV1.  # noqa: E501
        :type: list[str]
        """

        self._regions = regions

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1VultrDirectV1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1VultrDirectV1') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1VultrDirectV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1VultrDirectV1') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
