# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1Usage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'billed_time_seconds': 'str',
        'cluster_id': 'str',
        'cost': 'float',
        'created_at': 'datetime',
        'deleted_at': 'datetime',
        'free': 'bool',
        'id': 'str',
        'instance_type': 'str',
        'name': 'str',
        'project_id': 'str',
        'resource_type': 'str',
        'saved_cost': 'float',
        'session_ended_at': 'datetime',
        'session_started_at': 'datetime',
        'spot': 'bool',
        'total_completion_tokens': 'str',
        'total_num_messages': 'str',
        'total_prompt_tokens': 'str',
        'user_id': 'str'
    }

    attribute_map = {
        'billed_time_seconds': 'billedTimeSeconds',
        'cluster_id': 'clusterId',
        'cost': 'cost',
        'created_at': 'createdAt',
        'deleted_at': 'deletedAt',
        'free': 'free',
        'id': 'id',
        'instance_type': 'instanceType',
        'name': 'name',
        'project_id': 'projectId',
        'resource_type': 'resourceType',
        'saved_cost': 'savedCost',
        'session_ended_at': 'sessionEndedAt',
        'session_started_at': 'sessionStartedAt',
        'spot': 'spot',
        'total_completion_tokens': 'totalCompletionTokens',
        'total_num_messages': 'totalNumMessages',
        'total_prompt_tokens': 'totalPromptTokens',
        'user_id': 'userId'
    }

    def __init__(self, billed_time_seconds: 'str' =None, cluster_id: 'str' =None, cost: 'float' =None, created_at: 'datetime' =None, deleted_at: 'datetime' =None, free: 'bool' =None, id: 'str' =None, instance_type: 'str' =None, name: 'str' =None, project_id: 'str' =None, resource_type: 'str' =None, saved_cost: 'float' =None, session_ended_at: 'datetime' =None, session_started_at: 'datetime' =None, spot: 'bool' =None, total_completion_tokens: 'str' =None, total_num_messages: 'str' =None, total_prompt_tokens: 'str' =None, user_id: 'str' =None):  # noqa: E501
        """V1Usage - a model defined in Swagger"""  # noqa: E501
        self._billed_time_seconds = None
        self._cluster_id = None
        self._cost = None
        self._created_at = None
        self._deleted_at = None
        self._free = None
        self._id = None
        self._instance_type = None
        self._name = None
        self._project_id = None
        self._resource_type = None
        self._saved_cost = None
        self._session_ended_at = None
        self._session_started_at = None
        self._spot = None
        self._total_completion_tokens = None
        self._total_num_messages = None
        self._total_prompt_tokens = None
        self._user_id = None
        self.discriminator = None
        if billed_time_seconds is not None:
            self.billed_time_seconds = billed_time_seconds
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if cost is not None:
            self.cost = cost
        if created_at is not None:
            self.created_at = created_at
        if deleted_at is not None:
            self.deleted_at = deleted_at
        if free is not None:
            self.free = free
        if id is not None:
            self.id = id
        if instance_type is not None:
            self.instance_type = instance_type
        if name is not None:
            self.name = name
        if project_id is not None:
            self.project_id = project_id
        if resource_type is not None:
            self.resource_type = resource_type
        if saved_cost is not None:
            self.saved_cost = saved_cost
        if session_ended_at is not None:
            self.session_ended_at = session_ended_at
        if session_started_at is not None:
            self.session_started_at = session_started_at
        if spot is not None:
            self.spot = spot
        if total_completion_tokens is not None:
            self.total_completion_tokens = total_completion_tokens
        if total_num_messages is not None:
            self.total_num_messages = total_num_messages
        if total_prompt_tokens is not None:
            self.total_prompt_tokens = total_prompt_tokens
        if user_id is not None:
            self.user_id = user_id

    @property
    def billed_time_seconds(self) -> 'str':
        """Gets the billed_time_seconds of this V1Usage.  # noqa: E501


        :return: The billed_time_seconds of this V1Usage.  # noqa: E501
        :rtype: str
        """
        return self._billed_time_seconds

    @billed_time_seconds.setter
    def billed_time_seconds(self, billed_time_seconds: 'str'):
        """Sets the billed_time_seconds of this V1Usage.


        :param billed_time_seconds: The billed_time_seconds of this V1Usage.  # noqa: E501
        :type: str
        """

        self._billed_time_seconds = billed_time_seconds

    @property
    def cluster_id(self) -> 'str':
        """Gets the cluster_id of this V1Usage.  # noqa: E501


        :return: The cluster_id of this V1Usage.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id: 'str'):
        """Sets the cluster_id of this V1Usage.


        :param cluster_id: The cluster_id of this V1Usage.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def cost(self) -> 'float':
        """Gets the cost of this V1Usage.  # noqa: E501


        :return: The cost of this V1Usage.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost: 'float'):
        """Sets the cost of this V1Usage.


        :param cost: The cost of this V1Usage.  # noqa: E501
        :type: float
        """

        self._cost = cost

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this V1Usage.  # noqa: E501


        :return: The created_at of this V1Usage.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this V1Usage.


        :param created_at: The created_at of this V1Usage.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def deleted_at(self) -> 'datetime':
        """Gets the deleted_at of this V1Usage.  # noqa: E501


        :return: The deleted_at of this V1Usage.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at: 'datetime'):
        """Sets the deleted_at of this V1Usage.


        :param deleted_at: The deleted_at of this V1Usage.  # noqa: E501
        :type: datetime
        """

        self._deleted_at = deleted_at

    @property
    def free(self) -> 'bool':
        """Gets the free of this V1Usage.  # noqa: E501


        :return: The free of this V1Usage.  # noqa: E501
        :rtype: bool
        """
        return self._free

    @free.setter
    def free(self, free: 'bool'):
        """Sets the free of this V1Usage.


        :param free: The free of this V1Usage.  # noqa: E501
        :type: bool
        """

        self._free = free

    @property
    def id(self) -> 'str':
        """Gets the id of this V1Usage.  # noqa: E501


        :return: The id of this V1Usage.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1Usage.


        :param id: The id of this V1Usage.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def instance_type(self) -> 'str':
        """Gets the instance_type of this V1Usage.  # noqa: E501


        :return: The instance_type of this V1Usage.  # noqa: E501
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type: 'str'):
        """Sets the instance_type of this V1Usage.


        :param instance_type: The instance_type of this V1Usage.  # noqa: E501
        :type: str
        """

        self._instance_type = instance_type

    @property
    def name(self) -> 'str':
        """Gets the name of this V1Usage.  # noqa: E501


        :return: The name of this V1Usage.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1Usage.


        :param name: The name of this V1Usage.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def project_id(self) -> 'str':
        """Gets the project_id of this V1Usage.  # noqa: E501


        :return: The project_id of this V1Usage.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: 'str'):
        """Sets the project_id of this V1Usage.


        :param project_id: The project_id of this V1Usage.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def resource_type(self) -> 'str':
        """Gets the resource_type of this V1Usage.  # noqa: E501


        :return: The resource_type of this V1Usage.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type: 'str'):
        """Sets the resource_type of this V1Usage.


        :param resource_type: The resource_type of this V1Usage.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def saved_cost(self) -> 'float':
        """Gets the saved_cost of this V1Usage.  # noqa: E501


        :return: The saved_cost of this V1Usage.  # noqa: E501
        :rtype: float
        """
        return self._saved_cost

    @saved_cost.setter
    def saved_cost(self, saved_cost: 'float'):
        """Sets the saved_cost of this V1Usage.


        :param saved_cost: The saved_cost of this V1Usage.  # noqa: E501
        :type: float
        """

        self._saved_cost = saved_cost

    @property
    def session_ended_at(self) -> 'datetime':
        """Gets the session_ended_at of this V1Usage.  # noqa: E501


        :return: The session_ended_at of this V1Usage.  # noqa: E501
        :rtype: datetime
        """
        return self._session_ended_at

    @session_ended_at.setter
    def session_ended_at(self, session_ended_at: 'datetime'):
        """Sets the session_ended_at of this V1Usage.


        :param session_ended_at: The session_ended_at of this V1Usage.  # noqa: E501
        :type: datetime
        """

        self._session_ended_at = session_ended_at

    @property
    def session_started_at(self) -> 'datetime':
        """Gets the session_started_at of this V1Usage.  # noqa: E501


        :return: The session_started_at of this V1Usage.  # noqa: E501
        :rtype: datetime
        """
        return self._session_started_at

    @session_started_at.setter
    def session_started_at(self, session_started_at: 'datetime'):
        """Sets the session_started_at of this V1Usage.


        :param session_started_at: The session_started_at of this V1Usage.  # noqa: E501
        :type: datetime
        """

        self._session_started_at = session_started_at

    @property
    def spot(self) -> 'bool':
        """Gets the spot of this V1Usage.  # noqa: E501


        :return: The spot of this V1Usage.  # noqa: E501
        :rtype: bool
        """
        return self._spot

    @spot.setter
    def spot(self, spot: 'bool'):
        """Sets the spot of this V1Usage.


        :param spot: The spot of this V1Usage.  # noqa: E501
        :type: bool
        """

        self._spot = spot

    @property
    def total_completion_tokens(self) -> 'str':
        """Gets the total_completion_tokens of this V1Usage.  # noqa: E501


        :return: The total_completion_tokens of this V1Usage.  # noqa: E501
        :rtype: str
        """
        return self._total_completion_tokens

    @total_completion_tokens.setter
    def total_completion_tokens(self, total_completion_tokens: 'str'):
        """Sets the total_completion_tokens of this V1Usage.


        :param total_completion_tokens: The total_completion_tokens of this V1Usage.  # noqa: E501
        :type: str
        """

        self._total_completion_tokens = total_completion_tokens

    @property
    def total_num_messages(self) -> 'str':
        """Gets the total_num_messages of this V1Usage.  # noqa: E501


        :return: The total_num_messages of this V1Usage.  # noqa: E501
        :rtype: str
        """
        return self._total_num_messages

    @total_num_messages.setter
    def total_num_messages(self, total_num_messages: 'str'):
        """Sets the total_num_messages of this V1Usage.


        :param total_num_messages: The total_num_messages of this V1Usage.  # noqa: E501
        :type: str
        """

        self._total_num_messages = total_num_messages

    @property
    def total_prompt_tokens(self) -> 'str':
        """Gets the total_prompt_tokens of this V1Usage.  # noqa: E501


        :return: The total_prompt_tokens of this V1Usage.  # noqa: E501
        :rtype: str
        """
        return self._total_prompt_tokens

    @total_prompt_tokens.setter
    def total_prompt_tokens(self, total_prompt_tokens: 'str'):
        """Sets the total_prompt_tokens of this V1Usage.


        :param total_prompt_tokens: The total_prompt_tokens of this V1Usage.  # noqa: E501
        :type: str
        """

        self._total_prompt_tokens = total_prompt_tokens

    @property
    def user_id(self) -> 'str':
        """Gets the user_id of this V1Usage.  # noqa: E501


        :return: The user_id of this V1Usage.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: 'str'):
        """Sets the user_id of this V1Usage.


        :param user_id: The user_id of this V1Usage.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1Usage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1Usage') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Usage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1Usage') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
