# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class MetricsstreamCreateBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_id': 'str',
        'cloudspace_id': 'str',
        'dark_color': 'str',
        'experiment_project_name': 'str',
        'guest': 'bool',
        'job_id': 'str',
        'light_color': 'str',
        'name': 'str',
        'store_created_at': 'bool',
        'store_step': 'bool',
        'system_info': 'V1SystemInfo',
        'tags': 'list[V1MetricsTags]',
        'version': 'datetime',
        'work_id': 'str'
    }

    attribute_map = {
        'app_id': 'appId',
        'cloudspace_id': 'cloudspaceId',
        'dark_color': 'darkColor',
        'experiment_project_name': 'experimentProjectName',
        'guest': 'guest',
        'job_id': 'jobId',
        'light_color': 'lightColor',
        'name': 'name',
        'store_created_at': 'storeCreatedAt',
        'store_step': 'storeStep',
        'system_info': 'systemInfo',
        'tags': 'tags',
        'version': 'version',
        'work_id': 'workId'
    }

    def __init__(self, app_id: 'str' =None, cloudspace_id: 'str' =None, dark_color: 'str' =None, experiment_project_name: 'str' =None, guest: 'bool' =None, job_id: 'str' =None, light_color: 'str' =None, name: 'str' =None, store_created_at: 'bool' =None, store_step: 'bool' =None, system_info: 'V1SystemInfo' =None, tags: 'list[V1MetricsTags]' =None, version: 'datetime' =None, work_id: 'str' =None):  # noqa: E501
        """MetricsstreamCreateBody - a model defined in Swagger"""  # noqa: E501
        self._app_id = None
        self._cloudspace_id = None
        self._dark_color = None
        self._experiment_project_name = None
        self._guest = None
        self._job_id = None
        self._light_color = None
        self._name = None
        self._store_created_at = None
        self._store_step = None
        self._system_info = None
        self._tags = None
        self._version = None
        self._work_id = None
        self.discriminator = None
        if app_id is not None:
            self.app_id = app_id
        if cloudspace_id is not None:
            self.cloudspace_id = cloudspace_id
        if dark_color is not None:
            self.dark_color = dark_color
        if experiment_project_name is not None:
            self.experiment_project_name = experiment_project_name
        if guest is not None:
            self.guest = guest
        if job_id is not None:
            self.job_id = job_id
        if light_color is not None:
            self.light_color = light_color
        if name is not None:
            self.name = name
        if store_created_at is not None:
            self.store_created_at = store_created_at
        if store_step is not None:
            self.store_step = store_step
        if system_info is not None:
            self.system_info = system_info
        if tags is not None:
            self.tags = tags
        if version is not None:
            self.version = version
        if work_id is not None:
            self.work_id = work_id

    @property
    def app_id(self) -> 'str':
        """Gets the app_id of this MetricsstreamCreateBody.  # noqa: E501


        :return: The app_id of this MetricsstreamCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id: 'str'):
        """Sets the app_id of this MetricsstreamCreateBody.


        :param app_id: The app_id of this MetricsstreamCreateBody.  # noqa: E501
        :type: str
        """

        self._app_id = app_id

    @property
    def cloudspace_id(self) -> 'str':
        """Gets the cloudspace_id of this MetricsstreamCreateBody.  # noqa: E501


        :return: The cloudspace_id of this MetricsstreamCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._cloudspace_id

    @cloudspace_id.setter
    def cloudspace_id(self, cloudspace_id: 'str'):
        """Sets the cloudspace_id of this MetricsstreamCreateBody.


        :param cloudspace_id: The cloudspace_id of this MetricsstreamCreateBody.  # noqa: E501
        :type: str
        """

        self._cloudspace_id = cloudspace_id

    @property
    def dark_color(self) -> 'str':
        """Gets the dark_color of this MetricsstreamCreateBody.  # noqa: E501


        :return: The dark_color of this MetricsstreamCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._dark_color

    @dark_color.setter
    def dark_color(self, dark_color: 'str'):
        """Sets the dark_color of this MetricsstreamCreateBody.


        :param dark_color: The dark_color of this MetricsstreamCreateBody.  # noqa: E501
        :type: str
        """

        self._dark_color = dark_color

    @property
    def experiment_project_name(self) -> 'str':
        """Gets the experiment_project_name of this MetricsstreamCreateBody.  # noqa: E501


        :return: The experiment_project_name of this MetricsstreamCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._experiment_project_name

    @experiment_project_name.setter
    def experiment_project_name(self, experiment_project_name: 'str'):
        """Sets the experiment_project_name of this MetricsstreamCreateBody.


        :param experiment_project_name: The experiment_project_name of this MetricsstreamCreateBody.  # noqa: E501
        :type: str
        """

        self._experiment_project_name = experiment_project_name

    @property
    def guest(self) -> 'bool':
        """Gets the guest of this MetricsstreamCreateBody.  # noqa: E501


        :return: The guest of this MetricsstreamCreateBody.  # noqa: E501
        :rtype: bool
        """
        return self._guest

    @guest.setter
    def guest(self, guest: 'bool'):
        """Sets the guest of this MetricsstreamCreateBody.


        :param guest: The guest of this MetricsstreamCreateBody.  # noqa: E501
        :type: bool
        """

        self._guest = guest

    @property
    def job_id(self) -> 'str':
        """Gets the job_id of this MetricsstreamCreateBody.  # noqa: E501


        :return: The job_id of this MetricsstreamCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id: 'str'):
        """Sets the job_id of this MetricsstreamCreateBody.


        :param job_id: The job_id of this MetricsstreamCreateBody.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def light_color(self) -> 'str':
        """Gets the light_color of this MetricsstreamCreateBody.  # noqa: E501


        :return: The light_color of this MetricsstreamCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._light_color

    @light_color.setter
    def light_color(self, light_color: 'str'):
        """Sets the light_color of this MetricsstreamCreateBody.


        :param light_color: The light_color of this MetricsstreamCreateBody.  # noqa: E501
        :type: str
        """

        self._light_color = light_color

    @property
    def name(self) -> 'str':
        """Gets the name of this MetricsstreamCreateBody.  # noqa: E501


        :return: The name of this MetricsstreamCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this MetricsstreamCreateBody.


        :param name: The name of this MetricsstreamCreateBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def store_created_at(self) -> 'bool':
        """Gets the store_created_at of this MetricsstreamCreateBody.  # noqa: E501


        :return: The store_created_at of this MetricsstreamCreateBody.  # noqa: E501
        :rtype: bool
        """
        return self._store_created_at

    @store_created_at.setter
    def store_created_at(self, store_created_at: 'bool'):
        """Sets the store_created_at of this MetricsstreamCreateBody.


        :param store_created_at: The store_created_at of this MetricsstreamCreateBody.  # noqa: E501
        :type: bool
        """

        self._store_created_at = store_created_at

    @property
    def store_step(self) -> 'bool':
        """Gets the store_step of this MetricsstreamCreateBody.  # noqa: E501


        :return: The store_step of this MetricsstreamCreateBody.  # noqa: E501
        :rtype: bool
        """
        return self._store_step

    @store_step.setter
    def store_step(self, store_step: 'bool'):
        """Sets the store_step of this MetricsstreamCreateBody.


        :param store_step: The store_step of this MetricsstreamCreateBody.  # noqa: E501
        :type: bool
        """

        self._store_step = store_step

    @property
    def system_info(self) -> 'V1SystemInfo':
        """Gets the system_info of this MetricsstreamCreateBody.  # noqa: E501


        :return: The system_info of this MetricsstreamCreateBody.  # noqa: E501
        :rtype: V1SystemInfo
        """
        return self._system_info

    @system_info.setter
    def system_info(self, system_info: 'V1SystemInfo'):
        """Sets the system_info of this MetricsstreamCreateBody.


        :param system_info: The system_info of this MetricsstreamCreateBody.  # noqa: E501
        :type: V1SystemInfo
        """

        self._system_info = system_info

    @property
    def tags(self) -> 'list[V1MetricsTags]':
        """Gets the tags of this MetricsstreamCreateBody.  # noqa: E501


        :return: The tags of this MetricsstreamCreateBody.  # noqa: E501
        :rtype: list[V1MetricsTags]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: 'list[V1MetricsTags]'):
        """Sets the tags of this MetricsstreamCreateBody.


        :param tags: The tags of this MetricsstreamCreateBody.  # noqa: E501
        :type: list[V1MetricsTags]
        """

        self._tags = tags

    @property
    def version(self) -> 'datetime':
        """Gets the version of this MetricsstreamCreateBody.  # noqa: E501


        :return: The version of this MetricsstreamCreateBody.  # noqa: E501
        :rtype: datetime
        """
        return self._version

    @version.setter
    def version(self, version: 'datetime'):
        """Sets the version of this MetricsstreamCreateBody.


        :param version: The version of this MetricsstreamCreateBody.  # noqa: E501
        :type: datetime
        """

        self._version = version

    @property
    def work_id(self) -> 'str':
        """Gets the work_id of this MetricsstreamCreateBody.  # noqa: E501


        :return: The work_id of this MetricsstreamCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._work_id

    @work_id.setter
    def work_id(self, work_id: 'str'):
        """Sets the work_id of this MetricsstreamCreateBody.


        :param work_id: The work_id of this MetricsstreamCreateBody.  # noqa: E501
        :type: str
        """

        self._work_id = work_id

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetricsstreamCreateBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'MetricsstreamCreateBody') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, MetricsstreamCreateBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'MetricsstreamCreateBody') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
