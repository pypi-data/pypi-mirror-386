# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1Deployment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source': 'str',
        'api_standard': 'str',
        'apis': 'list[V1DeploymentAPI]',
        'assistant_id': 'str',
        'autoscaling': 'V1AutoscalingSpec',
        'cloudspace_id': 'str',
        'created_at': 'datetime',
        'current_state': 'V1DeploymentState',
        'debug': 'bool',
        'desired_state': 'V1DeploymentState',
        'endpoint': 'V1Endpoint',
        'id': 'str',
        'is_published': 'bool',
        'managed': 'bool',
        'managed_endpoint_id': 'str',
        'name': 'str',
        'oncall_notification': 'bool',
        'parameter_spec': 'V1ParameterizationSpec',
        'pipeline_id': 'str',
        'project_id': 'str',
        'recipients': 'V1DeploymentAlertingRecipients',
        'release_id': 'str',
        'replicas': 'int',
        'reuse_servers': 'bool',
        'spec': 'V1JobSpec',
        'status': 'V1DeploymentStatus',
        'strategy': 'V1DeploymentStrategy',
        'template_id': 'str',
        'total_cost': 'float',
        'updated_at': 'datetime',
        'user_id': 'str',
        'visibility': 'V1ResourceVisibility'
    }

    attribute_map = {
        'source': 'Source',
        'api_standard': 'apiStandard',
        'apis': 'apis',
        'assistant_id': 'assistantId',
        'autoscaling': 'autoscaling',
        'cloudspace_id': 'cloudspaceId',
        'created_at': 'createdAt',
        'current_state': 'currentState',
        'debug': 'debug',
        'desired_state': 'desiredState',
        'endpoint': 'endpoint',
        'id': 'id',
        'is_published': 'isPublished',
        'managed': 'managed',
        'managed_endpoint_id': 'managedEndpointId',
        'name': 'name',
        'oncall_notification': 'oncallNotification',
        'parameter_spec': 'parameterSpec',
        'pipeline_id': 'pipelineId',
        'project_id': 'projectId',
        'recipients': 'recipients',
        'release_id': 'releaseId',
        'replicas': 'replicas',
        'reuse_servers': 'reuseServers',
        'spec': 'spec',
        'status': 'status',
        'strategy': 'strategy',
        'template_id': 'templateId',
        'total_cost': 'totalCost',
        'updated_at': 'updatedAt',
        'user_id': 'userId',
        'visibility': 'visibility'
    }

    def __init__(self, source: 'str' =None, api_standard: 'str' =None, apis: 'list[V1DeploymentAPI]' =None, assistant_id: 'str' =None, autoscaling: 'V1AutoscalingSpec' =None, cloudspace_id: 'str' =None, created_at: 'datetime' =None, current_state: 'V1DeploymentState' =None, debug: 'bool' =None, desired_state: 'V1DeploymentState' =None, endpoint: 'V1Endpoint' =None, id: 'str' =None, is_published: 'bool' =None, managed: 'bool' =None, managed_endpoint_id: 'str' =None, name: 'str' =None, oncall_notification: 'bool' =None, parameter_spec: 'V1ParameterizationSpec' =None, pipeline_id: 'str' =None, project_id: 'str' =None, recipients: 'V1DeploymentAlertingRecipients' =None, release_id: 'str' =None, replicas: 'int' =None, reuse_servers: 'bool' =None, spec: 'V1JobSpec' =None, status: 'V1DeploymentStatus' =None, strategy: 'V1DeploymentStrategy' =None, template_id: 'str' =None, total_cost: 'float' =None, updated_at: 'datetime' =None, user_id: 'str' =None, visibility: 'V1ResourceVisibility' =None):  # noqa: E501
        """V1Deployment - a model defined in Swagger"""  # noqa: E501
        self._source = None
        self._api_standard = None
        self._apis = None
        self._assistant_id = None
        self._autoscaling = None
        self._cloudspace_id = None
        self._created_at = None
        self._current_state = None
        self._debug = None
        self._desired_state = None
        self._endpoint = None
        self._id = None
        self._is_published = None
        self._managed = None
        self._managed_endpoint_id = None
        self._name = None
        self._oncall_notification = None
        self._parameter_spec = None
        self._pipeline_id = None
        self._project_id = None
        self._recipients = None
        self._release_id = None
        self._replicas = None
        self._reuse_servers = None
        self._spec = None
        self._status = None
        self._strategy = None
        self._template_id = None
        self._total_cost = None
        self._updated_at = None
        self._user_id = None
        self._visibility = None
        self.discriminator = None
        if source is not None:
            self.source = source
        if api_standard is not None:
            self.api_standard = api_standard
        if apis is not None:
            self.apis = apis
        if assistant_id is not None:
            self.assistant_id = assistant_id
        if autoscaling is not None:
            self.autoscaling = autoscaling
        if cloudspace_id is not None:
            self.cloudspace_id = cloudspace_id
        if created_at is not None:
            self.created_at = created_at
        if current_state is not None:
            self.current_state = current_state
        if debug is not None:
            self.debug = debug
        if desired_state is not None:
            self.desired_state = desired_state
        if endpoint is not None:
            self.endpoint = endpoint
        if id is not None:
            self.id = id
        if is_published is not None:
            self.is_published = is_published
        if managed is not None:
            self.managed = managed
        if managed_endpoint_id is not None:
            self.managed_endpoint_id = managed_endpoint_id
        if name is not None:
            self.name = name
        if oncall_notification is not None:
            self.oncall_notification = oncall_notification
        if parameter_spec is not None:
            self.parameter_spec = parameter_spec
        if pipeline_id is not None:
            self.pipeline_id = pipeline_id
        if project_id is not None:
            self.project_id = project_id
        if recipients is not None:
            self.recipients = recipients
        if release_id is not None:
            self.release_id = release_id
        if replicas is not None:
            self.replicas = replicas
        if reuse_servers is not None:
            self.reuse_servers = reuse_servers
        if spec is not None:
            self.spec = spec
        if status is not None:
            self.status = status
        if strategy is not None:
            self.strategy = strategy
        if template_id is not None:
            self.template_id = template_id
        if total_cost is not None:
            self.total_cost = total_cost
        if updated_at is not None:
            self.updated_at = updated_at
        if user_id is not None:
            self.user_id = user_id
        if visibility is not None:
            self.visibility = visibility

    @property
    def source(self) -> 'str':
        """Gets the source of this V1Deployment.  # noqa: E501


        :return: The source of this V1Deployment.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source: 'str'):
        """Sets the source of this V1Deployment.


        :param source: The source of this V1Deployment.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def api_standard(self) -> 'str':
        """Gets the api_standard of this V1Deployment.  # noqa: E501


        :return: The api_standard of this V1Deployment.  # noqa: E501
        :rtype: str
        """
        return self._api_standard

    @api_standard.setter
    def api_standard(self, api_standard: 'str'):
        """Sets the api_standard of this V1Deployment.


        :param api_standard: The api_standard of this V1Deployment.  # noqa: E501
        :type: str
        """

        self._api_standard = api_standard

    @property
    def apis(self) -> 'list[V1DeploymentAPI]':
        """Gets the apis of this V1Deployment.  # noqa: E501


        :return: The apis of this V1Deployment.  # noqa: E501
        :rtype: list[V1DeploymentAPI]
        """
        return self._apis

    @apis.setter
    def apis(self, apis: 'list[V1DeploymentAPI]'):
        """Sets the apis of this V1Deployment.


        :param apis: The apis of this V1Deployment.  # noqa: E501
        :type: list[V1DeploymentAPI]
        """

        self._apis = apis

    @property
    def assistant_id(self) -> 'str':
        """Gets the assistant_id of this V1Deployment.  # noqa: E501


        :return: The assistant_id of this V1Deployment.  # noqa: E501
        :rtype: str
        """
        return self._assistant_id

    @assistant_id.setter
    def assistant_id(self, assistant_id: 'str'):
        """Sets the assistant_id of this V1Deployment.


        :param assistant_id: The assistant_id of this V1Deployment.  # noqa: E501
        :type: str
        """

        self._assistant_id = assistant_id

    @property
    def autoscaling(self) -> 'V1AutoscalingSpec':
        """Gets the autoscaling of this V1Deployment.  # noqa: E501


        :return: The autoscaling of this V1Deployment.  # noqa: E501
        :rtype: V1AutoscalingSpec
        """
        return self._autoscaling

    @autoscaling.setter
    def autoscaling(self, autoscaling: 'V1AutoscalingSpec'):
        """Sets the autoscaling of this V1Deployment.


        :param autoscaling: The autoscaling of this V1Deployment.  # noqa: E501
        :type: V1AutoscalingSpec
        """

        self._autoscaling = autoscaling

    @property
    def cloudspace_id(self) -> 'str':
        """Gets the cloudspace_id of this V1Deployment.  # noqa: E501


        :return: The cloudspace_id of this V1Deployment.  # noqa: E501
        :rtype: str
        """
        return self._cloudspace_id

    @cloudspace_id.setter
    def cloudspace_id(self, cloudspace_id: 'str'):
        """Sets the cloudspace_id of this V1Deployment.


        :param cloudspace_id: The cloudspace_id of this V1Deployment.  # noqa: E501
        :type: str
        """

        self._cloudspace_id = cloudspace_id

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this V1Deployment.  # noqa: E501


        :return: The created_at of this V1Deployment.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this V1Deployment.


        :param created_at: The created_at of this V1Deployment.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def current_state(self) -> 'V1DeploymentState':
        """Gets the current_state of this V1Deployment.  # noqa: E501


        :return: The current_state of this V1Deployment.  # noqa: E501
        :rtype: V1DeploymentState
        """
        return self._current_state

    @current_state.setter
    def current_state(self, current_state: 'V1DeploymentState'):
        """Sets the current_state of this V1Deployment.


        :param current_state: The current_state of this V1Deployment.  # noqa: E501
        :type: V1DeploymentState
        """

        self._current_state = current_state

    @property
    def debug(self) -> 'bool':
        """Gets the debug of this V1Deployment.  # noqa: E501


        :return: The debug of this V1Deployment.  # noqa: E501
        :rtype: bool
        """
        return self._debug

    @debug.setter
    def debug(self, debug: 'bool'):
        """Sets the debug of this V1Deployment.


        :param debug: The debug of this V1Deployment.  # noqa: E501
        :type: bool
        """

        self._debug = debug

    @property
    def desired_state(self) -> 'V1DeploymentState':
        """Gets the desired_state of this V1Deployment.  # noqa: E501


        :return: The desired_state of this V1Deployment.  # noqa: E501
        :rtype: V1DeploymentState
        """
        return self._desired_state

    @desired_state.setter
    def desired_state(self, desired_state: 'V1DeploymentState'):
        """Sets the desired_state of this V1Deployment.


        :param desired_state: The desired_state of this V1Deployment.  # noqa: E501
        :type: V1DeploymentState
        """

        self._desired_state = desired_state

    @property
    def endpoint(self) -> 'V1Endpoint':
        """Gets the endpoint of this V1Deployment.  # noqa: E501


        :return: The endpoint of this V1Deployment.  # noqa: E501
        :rtype: V1Endpoint
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint: 'V1Endpoint'):
        """Sets the endpoint of this V1Deployment.


        :param endpoint: The endpoint of this V1Deployment.  # noqa: E501
        :type: V1Endpoint
        """

        self._endpoint = endpoint

    @property
    def id(self) -> 'str':
        """Gets the id of this V1Deployment.  # noqa: E501


        :return: The id of this V1Deployment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1Deployment.


        :param id: The id of this V1Deployment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_published(self) -> 'bool':
        """Gets the is_published of this V1Deployment.  # noqa: E501


        :return: The is_published of this V1Deployment.  # noqa: E501
        :rtype: bool
        """
        return self._is_published

    @is_published.setter
    def is_published(self, is_published: 'bool'):
        """Sets the is_published of this V1Deployment.


        :param is_published: The is_published of this V1Deployment.  # noqa: E501
        :type: bool
        """

        self._is_published = is_published

    @property
    def managed(self) -> 'bool':
        """Gets the managed of this V1Deployment.  # noqa: E501


        :return: The managed of this V1Deployment.  # noqa: E501
        :rtype: bool
        """
        return self._managed

    @managed.setter
    def managed(self, managed: 'bool'):
        """Sets the managed of this V1Deployment.


        :param managed: The managed of this V1Deployment.  # noqa: E501
        :type: bool
        """

        self._managed = managed

    @property
    def managed_endpoint_id(self) -> 'str':
        """Gets the managed_endpoint_id of this V1Deployment.  # noqa: E501


        :return: The managed_endpoint_id of this V1Deployment.  # noqa: E501
        :rtype: str
        """
        return self._managed_endpoint_id

    @managed_endpoint_id.setter
    def managed_endpoint_id(self, managed_endpoint_id: 'str'):
        """Sets the managed_endpoint_id of this V1Deployment.


        :param managed_endpoint_id: The managed_endpoint_id of this V1Deployment.  # noqa: E501
        :type: str
        """

        self._managed_endpoint_id = managed_endpoint_id

    @property
    def name(self) -> 'str':
        """Gets the name of this V1Deployment.  # noqa: E501


        :return: The name of this V1Deployment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1Deployment.


        :param name: The name of this V1Deployment.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def oncall_notification(self) -> 'bool':
        """Gets the oncall_notification of this V1Deployment.  # noqa: E501


        :return: The oncall_notification of this V1Deployment.  # noqa: E501
        :rtype: bool
        """
        return self._oncall_notification

    @oncall_notification.setter
    def oncall_notification(self, oncall_notification: 'bool'):
        """Sets the oncall_notification of this V1Deployment.


        :param oncall_notification: The oncall_notification of this V1Deployment.  # noqa: E501
        :type: bool
        """

        self._oncall_notification = oncall_notification

    @property
    def parameter_spec(self) -> 'V1ParameterizationSpec':
        """Gets the parameter_spec of this V1Deployment.  # noqa: E501


        :return: The parameter_spec of this V1Deployment.  # noqa: E501
        :rtype: V1ParameterizationSpec
        """
        return self._parameter_spec

    @parameter_spec.setter
    def parameter_spec(self, parameter_spec: 'V1ParameterizationSpec'):
        """Sets the parameter_spec of this V1Deployment.


        :param parameter_spec: The parameter_spec of this V1Deployment.  # noqa: E501
        :type: V1ParameterizationSpec
        """

        self._parameter_spec = parameter_spec

    @property
    def pipeline_id(self) -> 'str':
        """Gets the pipeline_id of this V1Deployment.  # noqa: E501


        :return: The pipeline_id of this V1Deployment.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id: 'str'):
        """Sets the pipeline_id of this V1Deployment.


        :param pipeline_id: The pipeline_id of this V1Deployment.  # noqa: E501
        :type: str
        """

        self._pipeline_id = pipeline_id

    @property
    def project_id(self) -> 'str':
        """Gets the project_id of this V1Deployment.  # noqa: E501


        :return: The project_id of this V1Deployment.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: 'str'):
        """Sets the project_id of this V1Deployment.


        :param project_id: The project_id of this V1Deployment.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def recipients(self) -> 'V1DeploymentAlertingRecipients':
        """Gets the recipients of this V1Deployment.  # noqa: E501


        :return: The recipients of this V1Deployment.  # noqa: E501
        :rtype: V1DeploymentAlertingRecipients
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients: 'V1DeploymentAlertingRecipients'):
        """Sets the recipients of this V1Deployment.


        :param recipients: The recipients of this V1Deployment.  # noqa: E501
        :type: V1DeploymentAlertingRecipients
        """

        self._recipients = recipients

    @property
    def release_id(self) -> 'str':
        """Gets the release_id of this V1Deployment.  # noqa: E501


        :return: The release_id of this V1Deployment.  # noqa: E501
        :rtype: str
        """
        return self._release_id

    @release_id.setter
    def release_id(self, release_id: 'str'):
        """Sets the release_id of this V1Deployment.


        :param release_id: The release_id of this V1Deployment.  # noqa: E501
        :type: str
        """

        self._release_id = release_id

    @property
    def replicas(self) -> 'int':
        """Gets the replicas of this V1Deployment.  # noqa: E501


        :return: The replicas of this V1Deployment.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas: 'int'):
        """Sets the replicas of this V1Deployment.


        :param replicas: The replicas of this V1Deployment.  # noqa: E501
        :type: int
        """

        self._replicas = replicas

    @property
    def reuse_servers(self) -> 'bool':
        """Gets the reuse_servers of this V1Deployment.  # noqa: E501


        :return: The reuse_servers of this V1Deployment.  # noqa: E501
        :rtype: bool
        """
        return self._reuse_servers

    @reuse_servers.setter
    def reuse_servers(self, reuse_servers: 'bool'):
        """Sets the reuse_servers of this V1Deployment.


        :param reuse_servers: The reuse_servers of this V1Deployment.  # noqa: E501
        :type: bool
        """

        self._reuse_servers = reuse_servers

    @property
    def spec(self) -> 'V1JobSpec':
        """Gets the spec of this V1Deployment.  # noqa: E501


        :return: The spec of this V1Deployment.  # noqa: E501
        :rtype: V1JobSpec
        """
        return self._spec

    @spec.setter
    def spec(self, spec: 'V1JobSpec'):
        """Sets the spec of this V1Deployment.


        :param spec: The spec of this V1Deployment.  # noqa: E501
        :type: V1JobSpec
        """

        self._spec = spec

    @property
    def status(self) -> 'V1DeploymentStatus':
        """Gets the status of this V1Deployment.  # noqa: E501


        :return: The status of this V1Deployment.  # noqa: E501
        :rtype: V1DeploymentStatus
        """
        return self._status

    @status.setter
    def status(self, status: 'V1DeploymentStatus'):
        """Sets the status of this V1Deployment.


        :param status: The status of this V1Deployment.  # noqa: E501
        :type: V1DeploymentStatus
        """

        self._status = status

    @property
    def strategy(self) -> 'V1DeploymentStrategy':
        """Gets the strategy of this V1Deployment.  # noqa: E501


        :return: The strategy of this V1Deployment.  # noqa: E501
        :rtype: V1DeploymentStrategy
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy: 'V1DeploymentStrategy'):
        """Sets the strategy of this V1Deployment.


        :param strategy: The strategy of this V1Deployment.  # noqa: E501
        :type: V1DeploymentStrategy
        """

        self._strategy = strategy

    @property
    def template_id(self) -> 'str':
        """Gets the template_id of this V1Deployment.  # noqa: E501


        :return: The template_id of this V1Deployment.  # noqa: E501
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id: 'str'):
        """Sets the template_id of this V1Deployment.


        :param template_id: The template_id of this V1Deployment.  # noqa: E501
        :type: str
        """

        self._template_id = template_id

    @property
    def total_cost(self) -> 'float':
        """Gets the total_cost of this V1Deployment.  # noqa: E501


        :return: The total_cost of this V1Deployment.  # noqa: E501
        :rtype: float
        """
        return self._total_cost

    @total_cost.setter
    def total_cost(self, total_cost: 'float'):
        """Sets the total_cost of this V1Deployment.


        :param total_cost: The total_cost of this V1Deployment.  # noqa: E501
        :type: float
        """

        self._total_cost = total_cost

    @property
    def updated_at(self) -> 'datetime':
        """Gets the updated_at of this V1Deployment.  # noqa: E501


        :return: The updated_at of this V1Deployment.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: 'datetime'):
        """Sets the updated_at of this V1Deployment.


        :param updated_at: The updated_at of this V1Deployment.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def user_id(self) -> 'str':
        """Gets the user_id of this V1Deployment.  # noqa: E501


        :return: The user_id of this V1Deployment.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: 'str'):
        """Sets the user_id of this V1Deployment.


        :param user_id: The user_id of this V1Deployment.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def visibility(self) -> 'V1ResourceVisibility':
        """Gets the visibility of this V1Deployment.  # noqa: E501


        :return: The visibility of this V1Deployment.  # noqa: E501
        :rtype: V1ResourceVisibility
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility: 'V1ResourceVisibility'):
        """Sets the visibility of this V1Deployment.


        :param visibility: The visibility of this V1Deployment.  # noqa: E501
        :type: V1ResourceVisibility
        """

        self._visibility = visibility

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1Deployment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1Deployment') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Deployment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1Deployment') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
