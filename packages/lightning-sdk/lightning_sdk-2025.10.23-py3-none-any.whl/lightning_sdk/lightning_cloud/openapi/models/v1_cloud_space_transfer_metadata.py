# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1CloudSpaceTransferMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expected_completion_time': 'datetime',
        'initial_transfer_started_at': 'datetime',
        'requested_code_config': 'V1UpdateCloudSpaceInstanceConfigRequest',
        'source_cluster_id': 'str',
        'source_deletion_started_at': 'datetime',
        'start_after_transfer': 'bool',
        'target_cloud_provider': 'str',
        'target_cluster_id': 'str',
        'top_up_transfer_started_at': 'datetime'
    }

    attribute_map = {
        'expected_completion_time': 'expectedCompletionTime',
        'initial_transfer_started_at': 'initialTransferStartedAt',
        'requested_code_config': 'requestedCodeConfig',
        'source_cluster_id': 'sourceClusterId',
        'source_deletion_started_at': 'sourceDeletionStartedAt',
        'start_after_transfer': 'startAfterTransfer',
        'target_cloud_provider': 'targetCloudProvider',
        'target_cluster_id': 'targetClusterId',
        'top_up_transfer_started_at': 'topUpTransferStartedAt'
    }

    def __init__(self, expected_completion_time: 'datetime' =None, initial_transfer_started_at: 'datetime' =None, requested_code_config: 'V1UpdateCloudSpaceInstanceConfigRequest' =None, source_cluster_id: 'str' =None, source_deletion_started_at: 'datetime' =None, start_after_transfer: 'bool' =None, target_cloud_provider: 'str' =None, target_cluster_id: 'str' =None, top_up_transfer_started_at: 'datetime' =None):  # noqa: E501
        """V1CloudSpaceTransferMetadata - a model defined in Swagger"""  # noqa: E501
        self._expected_completion_time = None
        self._initial_transfer_started_at = None
        self._requested_code_config = None
        self._source_cluster_id = None
        self._source_deletion_started_at = None
        self._start_after_transfer = None
        self._target_cloud_provider = None
        self._target_cluster_id = None
        self._top_up_transfer_started_at = None
        self.discriminator = None
        if expected_completion_time is not None:
            self.expected_completion_time = expected_completion_time
        if initial_transfer_started_at is not None:
            self.initial_transfer_started_at = initial_transfer_started_at
        if requested_code_config is not None:
            self.requested_code_config = requested_code_config
        if source_cluster_id is not None:
            self.source_cluster_id = source_cluster_id
        if source_deletion_started_at is not None:
            self.source_deletion_started_at = source_deletion_started_at
        if start_after_transfer is not None:
            self.start_after_transfer = start_after_transfer
        if target_cloud_provider is not None:
            self.target_cloud_provider = target_cloud_provider
        if target_cluster_id is not None:
            self.target_cluster_id = target_cluster_id
        if top_up_transfer_started_at is not None:
            self.top_up_transfer_started_at = top_up_transfer_started_at

    @property
    def expected_completion_time(self) -> 'datetime':
        """Gets the expected_completion_time of this V1CloudSpaceTransferMetadata.  # noqa: E501


        :return: The expected_completion_time of this V1CloudSpaceTransferMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._expected_completion_time

    @expected_completion_time.setter
    def expected_completion_time(self, expected_completion_time: 'datetime'):
        """Sets the expected_completion_time of this V1CloudSpaceTransferMetadata.


        :param expected_completion_time: The expected_completion_time of this V1CloudSpaceTransferMetadata.  # noqa: E501
        :type: datetime
        """

        self._expected_completion_time = expected_completion_time

    @property
    def initial_transfer_started_at(self) -> 'datetime':
        """Gets the initial_transfer_started_at of this V1CloudSpaceTransferMetadata.  # noqa: E501


        :return: The initial_transfer_started_at of this V1CloudSpaceTransferMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._initial_transfer_started_at

    @initial_transfer_started_at.setter
    def initial_transfer_started_at(self, initial_transfer_started_at: 'datetime'):
        """Sets the initial_transfer_started_at of this V1CloudSpaceTransferMetadata.


        :param initial_transfer_started_at: The initial_transfer_started_at of this V1CloudSpaceTransferMetadata.  # noqa: E501
        :type: datetime
        """

        self._initial_transfer_started_at = initial_transfer_started_at

    @property
    def requested_code_config(self) -> 'V1UpdateCloudSpaceInstanceConfigRequest':
        """Gets the requested_code_config of this V1CloudSpaceTransferMetadata.  # noqa: E501


        :return: The requested_code_config of this V1CloudSpaceTransferMetadata.  # noqa: E501
        :rtype: V1UpdateCloudSpaceInstanceConfigRequest
        """
        return self._requested_code_config

    @requested_code_config.setter
    def requested_code_config(self, requested_code_config: 'V1UpdateCloudSpaceInstanceConfigRequest'):
        """Sets the requested_code_config of this V1CloudSpaceTransferMetadata.


        :param requested_code_config: The requested_code_config of this V1CloudSpaceTransferMetadata.  # noqa: E501
        :type: V1UpdateCloudSpaceInstanceConfigRequest
        """

        self._requested_code_config = requested_code_config

    @property
    def source_cluster_id(self) -> 'str':
        """Gets the source_cluster_id of this V1CloudSpaceTransferMetadata.  # noqa: E501


        :return: The source_cluster_id of this V1CloudSpaceTransferMetadata.  # noqa: E501
        :rtype: str
        """
        return self._source_cluster_id

    @source_cluster_id.setter
    def source_cluster_id(self, source_cluster_id: 'str'):
        """Sets the source_cluster_id of this V1CloudSpaceTransferMetadata.


        :param source_cluster_id: The source_cluster_id of this V1CloudSpaceTransferMetadata.  # noqa: E501
        :type: str
        """

        self._source_cluster_id = source_cluster_id

    @property
    def source_deletion_started_at(self) -> 'datetime':
        """Gets the source_deletion_started_at of this V1CloudSpaceTransferMetadata.  # noqa: E501


        :return: The source_deletion_started_at of this V1CloudSpaceTransferMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._source_deletion_started_at

    @source_deletion_started_at.setter
    def source_deletion_started_at(self, source_deletion_started_at: 'datetime'):
        """Sets the source_deletion_started_at of this V1CloudSpaceTransferMetadata.


        :param source_deletion_started_at: The source_deletion_started_at of this V1CloudSpaceTransferMetadata.  # noqa: E501
        :type: datetime
        """

        self._source_deletion_started_at = source_deletion_started_at

    @property
    def start_after_transfer(self) -> 'bool':
        """Gets the start_after_transfer of this V1CloudSpaceTransferMetadata.  # noqa: E501


        :return: The start_after_transfer of this V1CloudSpaceTransferMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._start_after_transfer

    @start_after_transfer.setter
    def start_after_transfer(self, start_after_transfer: 'bool'):
        """Sets the start_after_transfer of this V1CloudSpaceTransferMetadata.


        :param start_after_transfer: The start_after_transfer of this V1CloudSpaceTransferMetadata.  # noqa: E501
        :type: bool
        """

        self._start_after_transfer = start_after_transfer

    @property
    def target_cloud_provider(self) -> 'str':
        """Gets the target_cloud_provider of this V1CloudSpaceTransferMetadata.  # noqa: E501


        :return: The target_cloud_provider of this V1CloudSpaceTransferMetadata.  # noqa: E501
        :rtype: str
        """
        return self._target_cloud_provider

    @target_cloud_provider.setter
    def target_cloud_provider(self, target_cloud_provider: 'str'):
        """Sets the target_cloud_provider of this V1CloudSpaceTransferMetadata.


        :param target_cloud_provider: The target_cloud_provider of this V1CloudSpaceTransferMetadata.  # noqa: E501
        :type: str
        """

        self._target_cloud_provider = target_cloud_provider

    @property
    def target_cluster_id(self) -> 'str':
        """Gets the target_cluster_id of this V1CloudSpaceTransferMetadata.  # noqa: E501


        :return: The target_cluster_id of this V1CloudSpaceTransferMetadata.  # noqa: E501
        :rtype: str
        """
        return self._target_cluster_id

    @target_cluster_id.setter
    def target_cluster_id(self, target_cluster_id: 'str'):
        """Sets the target_cluster_id of this V1CloudSpaceTransferMetadata.


        :param target_cluster_id: The target_cluster_id of this V1CloudSpaceTransferMetadata.  # noqa: E501
        :type: str
        """

        self._target_cluster_id = target_cluster_id

    @property
    def top_up_transfer_started_at(self) -> 'datetime':
        """Gets the top_up_transfer_started_at of this V1CloudSpaceTransferMetadata.  # noqa: E501


        :return: The top_up_transfer_started_at of this V1CloudSpaceTransferMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._top_up_transfer_started_at

    @top_up_transfer_started_at.setter
    def top_up_transfer_started_at(self, top_up_transfer_started_at: 'datetime'):
        """Sets the top_up_transfer_started_at of this V1CloudSpaceTransferMetadata.


        :param top_up_transfer_started_at: The top_up_transfer_started_at of this V1CloudSpaceTransferMetadata.  # noqa: E501
        :type: datetime
        """

        self._top_up_transfer_started_at = top_up_transfer_started_at

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1CloudSpaceTransferMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1CloudSpaceTransferMetadata') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1CloudSpaceTransferMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1CloudSpaceTransferMetadata') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
