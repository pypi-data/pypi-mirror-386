# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1Machine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'cluster_id': 'str',
        'created_at': 'datetime',
        'id': 'str',
        'instance_type': 'str',
        'management_api_url': 'str',
        'name': 'str',
        'org_id': 'str',
        'provider': 'str',
        'provider_instance_id': 'str',
        'provider_region': 'str',
        'provisioning_method': 'str',
        'ready_at': 'datetime',
        'resource_id': 'str',
        'resource_type': 'str',
        'resources': 'V1Resources',
        'status': 'str',
        'unschedulable': 'bool',
        'updated_at': 'datetime',
        'warning_message': 'str'
    }

    attribute_map = {
        'address': 'address',
        'cluster_id': 'clusterId',
        'created_at': 'createdAt',
        'id': 'id',
        'instance_type': 'instanceType',
        'management_api_url': 'managementApiUrl',
        'name': 'name',
        'org_id': 'orgId',
        'provider': 'provider',
        'provider_instance_id': 'providerInstanceId',
        'provider_region': 'providerRegion',
        'provisioning_method': 'provisioningMethod',
        'ready_at': 'readyAt',
        'resource_id': 'resourceId',
        'resource_type': 'resourceType',
        'resources': 'resources',
        'status': 'status',
        'unschedulable': 'unschedulable',
        'updated_at': 'updatedAt',
        'warning_message': 'warningMessage'
    }

    def __init__(self, address: 'str' =None, cluster_id: 'str' =None, created_at: 'datetime' =None, id: 'str' =None, instance_type: 'str' =None, management_api_url: 'str' =None, name: 'str' =None, org_id: 'str' =None, provider: 'str' =None, provider_instance_id: 'str' =None, provider_region: 'str' =None, provisioning_method: 'str' =None, ready_at: 'datetime' =None, resource_id: 'str' =None, resource_type: 'str' =None, resources: 'V1Resources' =None, status: 'str' =None, unschedulable: 'bool' =None, updated_at: 'datetime' =None, warning_message: 'str' =None):  # noqa: E501
        """V1Machine - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._cluster_id = None
        self._created_at = None
        self._id = None
        self._instance_type = None
        self._management_api_url = None
        self._name = None
        self._org_id = None
        self._provider = None
        self._provider_instance_id = None
        self._provider_region = None
        self._provisioning_method = None
        self._ready_at = None
        self._resource_id = None
        self._resource_type = None
        self._resources = None
        self._status = None
        self._unschedulable = None
        self._updated_at = None
        self._warning_message = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if created_at is not None:
            self.created_at = created_at
        if id is not None:
            self.id = id
        if instance_type is not None:
            self.instance_type = instance_type
        if management_api_url is not None:
            self.management_api_url = management_api_url
        if name is not None:
            self.name = name
        if org_id is not None:
            self.org_id = org_id
        if provider is not None:
            self.provider = provider
        if provider_instance_id is not None:
            self.provider_instance_id = provider_instance_id
        if provider_region is not None:
            self.provider_region = provider_region
        if provisioning_method is not None:
            self.provisioning_method = provisioning_method
        if ready_at is not None:
            self.ready_at = ready_at
        if resource_id is not None:
            self.resource_id = resource_id
        if resource_type is not None:
            self.resource_type = resource_type
        if resources is not None:
            self.resources = resources
        if status is not None:
            self.status = status
        if unschedulable is not None:
            self.unschedulable = unschedulable
        if updated_at is not None:
            self.updated_at = updated_at
        if warning_message is not None:
            self.warning_message = warning_message

    @property
    def address(self) -> 'str':
        """Gets the address of this V1Machine.  # noqa: E501


        :return: The address of this V1Machine.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: 'str'):
        """Sets the address of this V1Machine.


        :param address: The address of this V1Machine.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def cluster_id(self) -> 'str':
        """Gets the cluster_id of this V1Machine.  # noqa: E501


        :return: The cluster_id of this V1Machine.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id: 'str'):
        """Sets the cluster_id of this V1Machine.


        :param cluster_id: The cluster_id of this V1Machine.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this V1Machine.  # noqa: E501


        :return: The created_at of this V1Machine.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this V1Machine.


        :param created_at: The created_at of this V1Machine.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def id(self) -> 'str':
        """Gets the id of this V1Machine.  # noqa: E501


        :return: The id of this V1Machine.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1Machine.


        :param id: The id of this V1Machine.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def instance_type(self) -> 'str':
        """Gets the instance_type of this V1Machine.  # noqa: E501


        :return: The instance_type of this V1Machine.  # noqa: E501
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type: 'str'):
        """Sets the instance_type of this V1Machine.


        :param instance_type: The instance_type of this V1Machine.  # noqa: E501
        :type: str
        """

        self._instance_type = instance_type

    @property
    def management_api_url(self) -> 'str':
        """Gets the management_api_url of this V1Machine.  # noqa: E501


        :return: The management_api_url of this V1Machine.  # noqa: E501
        :rtype: str
        """
        return self._management_api_url

    @management_api_url.setter
    def management_api_url(self, management_api_url: 'str'):
        """Sets the management_api_url of this V1Machine.


        :param management_api_url: The management_api_url of this V1Machine.  # noqa: E501
        :type: str
        """

        self._management_api_url = management_api_url

    @property
    def name(self) -> 'str':
        """Gets the name of this V1Machine.  # noqa: E501


        :return: The name of this V1Machine.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1Machine.


        :param name: The name of this V1Machine.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def org_id(self) -> 'str':
        """Gets the org_id of this V1Machine.  # noqa: E501


        :return: The org_id of this V1Machine.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id: 'str'):
        """Sets the org_id of this V1Machine.


        :param org_id: The org_id of this V1Machine.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def provider(self) -> 'str':
        """Gets the provider of this V1Machine.  # noqa: E501


        :return: The provider of this V1Machine.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider: 'str'):
        """Sets the provider of this V1Machine.


        :param provider: The provider of this V1Machine.  # noqa: E501
        :type: str
        """

        self._provider = provider

    @property
    def provider_instance_id(self) -> 'str':
        """Gets the provider_instance_id of this V1Machine.  # noqa: E501


        :return: The provider_instance_id of this V1Machine.  # noqa: E501
        :rtype: str
        """
        return self._provider_instance_id

    @provider_instance_id.setter
    def provider_instance_id(self, provider_instance_id: 'str'):
        """Sets the provider_instance_id of this V1Machine.


        :param provider_instance_id: The provider_instance_id of this V1Machine.  # noqa: E501
        :type: str
        """

        self._provider_instance_id = provider_instance_id

    @property
    def provider_region(self) -> 'str':
        """Gets the provider_region of this V1Machine.  # noqa: E501


        :return: The provider_region of this V1Machine.  # noqa: E501
        :rtype: str
        """
        return self._provider_region

    @provider_region.setter
    def provider_region(self, provider_region: 'str'):
        """Sets the provider_region of this V1Machine.


        :param provider_region: The provider_region of this V1Machine.  # noqa: E501
        :type: str
        """

        self._provider_region = provider_region

    @property
    def provisioning_method(self) -> 'str':
        """Gets the provisioning_method of this V1Machine.  # noqa: E501


        :return: The provisioning_method of this V1Machine.  # noqa: E501
        :rtype: str
        """
        return self._provisioning_method

    @provisioning_method.setter
    def provisioning_method(self, provisioning_method: 'str'):
        """Sets the provisioning_method of this V1Machine.


        :param provisioning_method: The provisioning_method of this V1Machine.  # noqa: E501
        :type: str
        """

        self._provisioning_method = provisioning_method

    @property
    def ready_at(self) -> 'datetime':
        """Gets the ready_at of this V1Machine.  # noqa: E501


        :return: The ready_at of this V1Machine.  # noqa: E501
        :rtype: datetime
        """
        return self._ready_at

    @ready_at.setter
    def ready_at(self, ready_at: 'datetime'):
        """Sets the ready_at of this V1Machine.


        :param ready_at: The ready_at of this V1Machine.  # noqa: E501
        :type: datetime
        """

        self._ready_at = ready_at

    @property
    def resource_id(self) -> 'str':
        """Gets the resource_id of this V1Machine.  # noqa: E501


        :return: The resource_id of this V1Machine.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id: 'str'):
        """Sets the resource_id of this V1Machine.


        :param resource_id: The resource_id of this V1Machine.  # noqa: E501
        :type: str
        """

        self._resource_id = resource_id

    @property
    def resource_type(self) -> 'str':
        """Gets the resource_type of this V1Machine.  # noqa: E501


        :return: The resource_type of this V1Machine.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type: 'str'):
        """Sets the resource_type of this V1Machine.


        :param resource_type: The resource_type of this V1Machine.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def resources(self) -> 'V1Resources':
        """Gets the resources of this V1Machine.  # noqa: E501


        :return: The resources of this V1Machine.  # noqa: E501
        :rtype: V1Resources
        """
        return self._resources

    @resources.setter
    def resources(self, resources: 'V1Resources'):
        """Sets the resources of this V1Machine.


        :param resources: The resources of this V1Machine.  # noqa: E501
        :type: V1Resources
        """

        self._resources = resources

    @property
    def status(self) -> 'str':
        """Gets the status of this V1Machine.  # noqa: E501


        :return: The status of this V1Machine.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: 'str'):
        """Sets the status of this V1Machine.


        :param status: The status of this V1Machine.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def unschedulable(self) -> 'bool':
        """Gets the unschedulable of this V1Machine.  # noqa: E501


        :return: The unschedulable of this V1Machine.  # noqa: E501
        :rtype: bool
        """
        return self._unschedulable

    @unschedulable.setter
    def unschedulable(self, unschedulable: 'bool'):
        """Sets the unschedulable of this V1Machine.


        :param unschedulable: The unschedulable of this V1Machine.  # noqa: E501
        :type: bool
        """

        self._unschedulable = unschedulable

    @property
    def updated_at(self) -> 'datetime':
        """Gets the updated_at of this V1Machine.  # noqa: E501


        :return: The updated_at of this V1Machine.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: 'datetime'):
        """Sets the updated_at of this V1Machine.


        :param updated_at: The updated_at of this V1Machine.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def warning_message(self) -> 'str':
        """Gets the warning_message of this V1Machine.  # noqa: E501


        :return: The warning_message of this V1Machine.  # noqa: E501
        :rtype: str
        """
        return self._warning_message

    @warning_message.setter
    def warning_message(self, warning_message: 'str'):
        """Sets the warning_message of this V1Machine.


        :param warning_message: The warning_message of this V1Machine.  # noqa: E501
        :type: str
        """

        self._warning_message = warning_message

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1Machine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1Machine') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Machine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1Machine') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
