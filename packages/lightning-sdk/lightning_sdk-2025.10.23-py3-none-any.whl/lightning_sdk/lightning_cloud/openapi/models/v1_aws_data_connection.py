# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1AwsDataConnection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'destination': 'str',
        'kms_arn': 'str',
        'region': 'str',
        'secret_arn_name': 'str',
        'secret_arn_value': 'str',
        'secret_id_access_key_id': 'str',
        'secret_id_secret_access_key': 'str',
        'secret_value_access_key_id': 'str',
        'secret_value_secret_access_key': 'str',
        'source': 'str'
    }

    attribute_map = {
        'destination': 'destination',
        'kms_arn': 'kmsArn',
        'region': 'region',
        'secret_arn_name': 'secretArnName',
        'secret_arn_value': 'secretArnValue',
        'secret_id_access_key_id': 'secretIdAccessKeyId',
        'secret_id_secret_access_key': 'secretIdSecretAccessKey',
        'secret_value_access_key_id': 'secretValueAccessKeyId',
        'secret_value_secret_access_key': 'secretValueSecretAccessKey',
        'source': 'source'
    }

    def __init__(self, destination: 'str' =None, kms_arn: 'str' =None, region: 'str' =None, secret_arn_name: 'str' =None, secret_arn_value: 'str' =None, secret_id_access_key_id: 'str' =None, secret_id_secret_access_key: 'str' =None, secret_value_access_key_id: 'str' =None, secret_value_secret_access_key: 'str' =None, source: 'str' =None):  # noqa: E501
        """V1AwsDataConnection - a model defined in Swagger"""  # noqa: E501
        self._destination = None
        self._kms_arn = None
        self._region = None
        self._secret_arn_name = None
        self._secret_arn_value = None
        self._secret_id_access_key_id = None
        self._secret_id_secret_access_key = None
        self._secret_value_access_key_id = None
        self._secret_value_secret_access_key = None
        self._source = None
        self.discriminator = None
        if destination is not None:
            self.destination = destination
        if kms_arn is not None:
            self.kms_arn = kms_arn
        if region is not None:
            self.region = region
        if secret_arn_name is not None:
            self.secret_arn_name = secret_arn_name
        if secret_arn_value is not None:
            self.secret_arn_value = secret_arn_value
        if secret_id_access_key_id is not None:
            self.secret_id_access_key_id = secret_id_access_key_id
        if secret_id_secret_access_key is not None:
            self.secret_id_secret_access_key = secret_id_secret_access_key
        if secret_value_access_key_id is not None:
            self.secret_value_access_key_id = secret_value_access_key_id
        if secret_value_secret_access_key is not None:
            self.secret_value_secret_access_key = secret_value_secret_access_key
        if source is not None:
            self.source = source

    @property
    def destination(self) -> 'str':
        """Gets the destination of this V1AwsDataConnection.  # noqa: E501


        :return: The destination of this V1AwsDataConnection.  # noqa: E501
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination: 'str'):
        """Sets the destination of this V1AwsDataConnection.


        :param destination: The destination of this V1AwsDataConnection.  # noqa: E501
        :type: str
        """

        self._destination = destination

    @property
    def kms_arn(self) -> 'str':
        """Gets the kms_arn of this V1AwsDataConnection.  # noqa: E501


        :return: The kms_arn of this V1AwsDataConnection.  # noqa: E501
        :rtype: str
        """
        return self._kms_arn

    @kms_arn.setter
    def kms_arn(self, kms_arn: 'str'):
        """Sets the kms_arn of this V1AwsDataConnection.


        :param kms_arn: The kms_arn of this V1AwsDataConnection.  # noqa: E501
        :type: str
        """

        self._kms_arn = kms_arn

    @property
    def region(self) -> 'str':
        """Gets the region of this V1AwsDataConnection.  # noqa: E501


        :return: The region of this V1AwsDataConnection.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region: 'str'):
        """Sets the region of this V1AwsDataConnection.


        :param region: The region of this V1AwsDataConnection.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def secret_arn_name(self) -> 'str':
        """Gets the secret_arn_name of this V1AwsDataConnection.  # noqa: E501


        :return: The secret_arn_name of this V1AwsDataConnection.  # noqa: E501
        :rtype: str
        """
        return self._secret_arn_name

    @secret_arn_name.setter
    def secret_arn_name(self, secret_arn_name: 'str'):
        """Sets the secret_arn_name of this V1AwsDataConnection.


        :param secret_arn_name: The secret_arn_name of this V1AwsDataConnection.  # noqa: E501
        :type: str
        """

        self._secret_arn_name = secret_arn_name

    @property
    def secret_arn_value(self) -> 'str':
        """Gets the secret_arn_value of this V1AwsDataConnection.  # noqa: E501


        :return: The secret_arn_value of this V1AwsDataConnection.  # noqa: E501
        :rtype: str
        """
        return self._secret_arn_value

    @secret_arn_value.setter
    def secret_arn_value(self, secret_arn_value: 'str'):
        """Sets the secret_arn_value of this V1AwsDataConnection.


        :param secret_arn_value: The secret_arn_value of this V1AwsDataConnection.  # noqa: E501
        :type: str
        """

        self._secret_arn_value = secret_arn_value

    @property
    def secret_id_access_key_id(self) -> 'str':
        """Gets the secret_id_access_key_id of this V1AwsDataConnection.  # noqa: E501


        :return: The secret_id_access_key_id of this V1AwsDataConnection.  # noqa: E501
        :rtype: str
        """
        return self._secret_id_access_key_id

    @secret_id_access_key_id.setter
    def secret_id_access_key_id(self, secret_id_access_key_id: 'str'):
        """Sets the secret_id_access_key_id of this V1AwsDataConnection.


        :param secret_id_access_key_id: The secret_id_access_key_id of this V1AwsDataConnection.  # noqa: E501
        :type: str
        """

        self._secret_id_access_key_id = secret_id_access_key_id

    @property
    def secret_id_secret_access_key(self) -> 'str':
        """Gets the secret_id_secret_access_key of this V1AwsDataConnection.  # noqa: E501


        :return: The secret_id_secret_access_key of this V1AwsDataConnection.  # noqa: E501
        :rtype: str
        """
        return self._secret_id_secret_access_key

    @secret_id_secret_access_key.setter
    def secret_id_secret_access_key(self, secret_id_secret_access_key: 'str'):
        """Sets the secret_id_secret_access_key of this V1AwsDataConnection.


        :param secret_id_secret_access_key: The secret_id_secret_access_key of this V1AwsDataConnection.  # noqa: E501
        :type: str
        """

        self._secret_id_secret_access_key = secret_id_secret_access_key

    @property
    def secret_value_access_key_id(self) -> 'str':
        """Gets the secret_value_access_key_id of this V1AwsDataConnection.  # noqa: E501


        :return: The secret_value_access_key_id of this V1AwsDataConnection.  # noqa: E501
        :rtype: str
        """
        return self._secret_value_access_key_id

    @secret_value_access_key_id.setter
    def secret_value_access_key_id(self, secret_value_access_key_id: 'str'):
        """Sets the secret_value_access_key_id of this V1AwsDataConnection.


        :param secret_value_access_key_id: The secret_value_access_key_id of this V1AwsDataConnection.  # noqa: E501
        :type: str
        """

        self._secret_value_access_key_id = secret_value_access_key_id

    @property
    def secret_value_secret_access_key(self) -> 'str':
        """Gets the secret_value_secret_access_key of this V1AwsDataConnection.  # noqa: E501


        :return: The secret_value_secret_access_key of this V1AwsDataConnection.  # noqa: E501
        :rtype: str
        """
        return self._secret_value_secret_access_key

    @secret_value_secret_access_key.setter
    def secret_value_secret_access_key(self, secret_value_secret_access_key: 'str'):
        """Sets the secret_value_secret_access_key of this V1AwsDataConnection.


        :param secret_value_secret_access_key: The secret_value_secret_access_key of this V1AwsDataConnection.  # noqa: E501
        :type: str
        """

        self._secret_value_secret_access_key = secret_value_secret_access_key

    @property
    def source(self) -> 'str':
        """Gets the source of this V1AwsDataConnection.  # noqa: E501


        :return: The source of this V1AwsDataConnection.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source: 'str'):
        """Sets the source of this V1AwsDataConnection.


        :param source: The source of this V1AwsDataConnection.  # noqa: E501
        :type: str
        """

        self._source = source

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1AwsDataConnection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1AwsDataConnection') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1AwsDataConnection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1AwsDataConnection') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
