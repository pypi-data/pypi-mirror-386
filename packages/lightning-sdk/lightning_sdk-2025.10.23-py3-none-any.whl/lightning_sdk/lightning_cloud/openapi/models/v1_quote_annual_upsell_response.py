# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1QuoteAnnualUpsellResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'academic': 'bool',
        'additional_months': 'int',
        'annual_amount': 'int',
        'discounted_amount': 'int',
        'included_credits': 'int'
    }

    attribute_map = {
        'academic': 'academic',
        'additional_months': 'additionalMonths',
        'annual_amount': 'annualAmount',
        'discounted_amount': 'discountedAmount',
        'included_credits': 'includedCredits'
    }

    def __init__(self, academic: 'bool' =None, additional_months: 'int' =None, annual_amount: 'int' =None, discounted_amount: 'int' =None, included_credits: 'int' =None):  # noqa: E501
        """V1QuoteAnnualUpsellResponse - a model defined in Swagger"""  # noqa: E501
        self._academic = None
        self._additional_months = None
        self._annual_amount = None
        self._discounted_amount = None
        self._included_credits = None
        self.discriminator = None
        if academic is not None:
            self.academic = academic
        if additional_months is not None:
            self.additional_months = additional_months
        if annual_amount is not None:
            self.annual_amount = annual_amount
        if discounted_amount is not None:
            self.discounted_amount = discounted_amount
        if included_credits is not None:
            self.included_credits = included_credits

    @property
    def academic(self) -> 'bool':
        """Gets the academic of this V1QuoteAnnualUpsellResponse.  # noqa: E501


        :return: The academic of this V1QuoteAnnualUpsellResponse.  # noqa: E501
        :rtype: bool
        """
        return self._academic

    @academic.setter
    def academic(self, academic: 'bool'):
        """Sets the academic of this V1QuoteAnnualUpsellResponse.


        :param academic: The academic of this V1QuoteAnnualUpsellResponse.  # noqa: E501
        :type: bool
        """

        self._academic = academic

    @property
    def additional_months(self) -> 'int':
        """Gets the additional_months of this V1QuoteAnnualUpsellResponse.  # noqa: E501


        :return: The additional_months of this V1QuoteAnnualUpsellResponse.  # noqa: E501
        :rtype: int
        """
        return self._additional_months

    @additional_months.setter
    def additional_months(self, additional_months: 'int'):
        """Sets the additional_months of this V1QuoteAnnualUpsellResponse.


        :param additional_months: The additional_months of this V1QuoteAnnualUpsellResponse.  # noqa: E501
        :type: int
        """

        self._additional_months = additional_months

    @property
    def annual_amount(self) -> 'int':
        """Gets the annual_amount of this V1QuoteAnnualUpsellResponse.  # noqa: E501


        :return: The annual_amount of this V1QuoteAnnualUpsellResponse.  # noqa: E501
        :rtype: int
        """
        return self._annual_amount

    @annual_amount.setter
    def annual_amount(self, annual_amount: 'int'):
        """Sets the annual_amount of this V1QuoteAnnualUpsellResponse.


        :param annual_amount: The annual_amount of this V1QuoteAnnualUpsellResponse.  # noqa: E501
        :type: int
        """

        self._annual_amount = annual_amount

    @property
    def discounted_amount(self) -> 'int':
        """Gets the discounted_amount of this V1QuoteAnnualUpsellResponse.  # noqa: E501


        :return: The discounted_amount of this V1QuoteAnnualUpsellResponse.  # noqa: E501
        :rtype: int
        """
        return self._discounted_amount

    @discounted_amount.setter
    def discounted_amount(self, discounted_amount: 'int'):
        """Sets the discounted_amount of this V1QuoteAnnualUpsellResponse.


        :param discounted_amount: The discounted_amount of this V1QuoteAnnualUpsellResponse.  # noqa: E501
        :type: int
        """

        self._discounted_amount = discounted_amount

    @property
    def included_credits(self) -> 'int':
        """Gets the included_credits of this V1QuoteAnnualUpsellResponse.  # noqa: E501


        :return: The included_credits of this V1QuoteAnnualUpsellResponse.  # noqa: E501
        :rtype: int
        """
        return self._included_credits

    @included_credits.setter
    def included_credits(self, included_credits: 'int'):
        """Sets the included_credits of this V1QuoteAnnualUpsellResponse.


        :param included_credits: The included_credits of this V1QuoteAnnualUpsellResponse.  # noqa: E501
        :type: int
        """

        self._included_credits = included_credits

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1QuoteAnnualUpsellResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1QuoteAnnualUpsellResponse') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1QuoteAnnualUpsellResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1QuoteAnnualUpsellResponse') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
