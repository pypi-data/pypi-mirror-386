# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1CloudSpace(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_switch_machine': 'bool',
        'cache_data_connection_id': 'str',
        'can_download_source_code': 'bool',
        'cluster_id': 'str',
        'code_config': 'V1CloudSpaceInstanceConfig',
        'code_status': 'V1GetCloudSpaceInstanceStatusResponse',
        'code_url': 'str',
        'created_at': 'datetime',
        'data_connection_mounts': 'list[V1DataConnectionMount]',
        'description': 'str',
        'disable_secrets': 'bool',
        'display_name': 'str',
        'engagement_counts': 'dict(str, str)',
        'env': 'list[V1EnvVar]',
        'environment_config': 'V1CloudSpaceEnvironmentConfig',
        'environment_template_id': 'str',
        'featured': 'bool',
        'hide_files': 'bool',
        'id': 'str',
        'image_status': 'V1ImageState',
        'is_cloudspace_private': 'bool',
        'is_code_private': 'bool',
        'is_favorite': 'bool',
        'is_published': 'bool',
        'license': 'str',
        'license_url': 'str',
        'lock_out': 'bool',
        'machine_image_version': 'str',
        'max_run_duration': 'str',
        'message': 'str',
        'multi_user_edit': 'bool',
        'name': 'str',
        'number_of_files': 'str',
        'operating_cost': 'str',
        'paper_authors': 'str',
        'paper_org': 'str',
        'paper_org_avatar_url': 'str',
        'paper_url': 'str',
        'persistent_disk_id': 'str',
        'project_id': 'str',
        'publications': 'list[V1CloudSpaceVersionPublication]',
        'published_at': 'datetime',
        'published_to_org_at': 'datetime',
        'sandbox': 'bool',
        'state': 'V1CloudSpaceState',
        'switch_to_default_machine_on_idle': 'bool',
        'sync_duration': 'str',
        'sync_percentage': 'str',
        'tags': 'list[V1ResourceTag]',
        'thumbnail_file_type': 'str',
        'thumbnail_updated_at': 'datetime',
        'thumbnail_url': 'str',
        'total_size_bytes': 'str',
        'transfer_metadata': 'V1CloudSpaceTransferMetadata',
        'updated_at': 'datetime',
        'user_id': 'str',
        'user_metadata': 'str',
        'visibility': 'V1ResourceVisibility',
        'web_path': 'str'
    }

    attribute_map = {
        'auto_switch_machine': 'autoSwitchMachine',
        'cache_data_connection_id': 'cacheDataConnectionId',
        'can_download_source_code': 'canDownloadSourceCode',
        'cluster_id': 'clusterId',
        'code_config': 'codeConfig',
        'code_status': 'codeStatus',
        'code_url': 'codeUrl',
        'created_at': 'createdAt',
        'data_connection_mounts': 'dataConnectionMounts',
        'description': 'description',
        'disable_secrets': 'disableSecrets',
        'display_name': 'displayName',
        'engagement_counts': 'engagementCounts',
        'env': 'env',
        'environment_config': 'environmentConfig',
        'environment_template_id': 'environmentTemplateId',
        'featured': 'featured',
        'hide_files': 'hideFiles',
        'id': 'id',
        'image_status': 'imageStatus',
        'is_cloudspace_private': 'isCloudspacePrivate',
        'is_code_private': 'isCodePrivate',
        'is_favorite': 'isFavorite',
        'is_published': 'isPublished',
        'license': 'license',
        'license_url': 'licenseUrl',
        'lock_out': 'lockOut',
        'machine_image_version': 'machineImageVersion',
        'max_run_duration': 'maxRunDuration',
        'message': 'message',
        'multi_user_edit': 'multiUserEdit',
        'name': 'name',
        'number_of_files': 'numberOfFiles',
        'operating_cost': 'operatingCost',
        'paper_authors': 'paperAuthors',
        'paper_org': 'paperOrg',
        'paper_org_avatar_url': 'paperOrgAvatarUrl',
        'paper_url': 'paperUrl',
        'persistent_disk_id': 'persistentDiskId',
        'project_id': 'projectId',
        'publications': 'publications',
        'published_at': 'publishedAt',
        'published_to_org_at': 'publishedToOrgAt',
        'sandbox': 'sandbox',
        'state': 'state',
        'switch_to_default_machine_on_idle': 'switchToDefaultMachineOnIdle',
        'sync_duration': 'syncDuration',
        'sync_percentage': 'syncPercentage',
        'tags': 'tags',
        'thumbnail_file_type': 'thumbnailFileType',
        'thumbnail_updated_at': 'thumbnailUpdatedAt',
        'thumbnail_url': 'thumbnailUrl',
        'total_size_bytes': 'totalSizeBytes',
        'transfer_metadata': 'transferMetadata',
        'updated_at': 'updatedAt',
        'user_id': 'userId',
        'user_metadata': 'userMetadata',
        'visibility': 'visibility',
        'web_path': 'webPath'
    }

    def __init__(self, auto_switch_machine: 'bool' =None, cache_data_connection_id: 'str' =None, can_download_source_code: 'bool' =None, cluster_id: 'str' =None, code_config: 'V1CloudSpaceInstanceConfig' =None, code_status: 'V1GetCloudSpaceInstanceStatusResponse' =None, code_url: 'str' =None, created_at: 'datetime' =None, data_connection_mounts: 'list[V1DataConnectionMount]' =None, description: 'str' =None, disable_secrets: 'bool' =None, display_name: 'str' =None, engagement_counts: 'dict(str, str)' =None, env: 'list[V1EnvVar]' =None, environment_config: 'V1CloudSpaceEnvironmentConfig' =None, environment_template_id: 'str' =None, featured: 'bool' =None, hide_files: 'bool' =None, id: 'str' =None, image_status: 'V1ImageState' =None, is_cloudspace_private: 'bool' =None, is_code_private: 'bool' =None, is_favorite: 'bool' =None, is_published: 'bool' =None, license: 'str' =None, license_url: 'str' =None, lock_out: 'bool' =None, machine_image_version: 'str' =None, max_run_duration: 'str' =None, message: 'str' =None, multi_user_edit: 'bool' =None, name: 'str' =None, number_of_files: 'str' =None, operating_cost: 'str' =None, paper_authors: 'str' =None, paper_org: 'str' =None, paper_org_avatar_url: 'str' =None, paper_url: 'str' =None, persistent_disk_id: 'str' =None, project_id: 'str' =None, publications: 'list[V1CloudSpaceVersionPublication]' =None, published_at: 'datetime' =None, published_to_org_at: 'datetime' =None, sandbox: 'bool' =None, state: 'V1CloudSpaceState' =None, switch_to_default_machine_on_idle: 'bool' =None, sync_duration: 'str' =None, sync_percentage: 'str' =None, tags: 'list[V1ResourceTag]' =None, thumbnail_file_type: 'str' =None, thumbnail_updated_at: 'datetime' =None, thumbnail_url: 'str' =None, total_size_bytes: 'str' =None, transfer_metadata: 'V1CloudSpaceTransferMetadata' =None, updated_at: 'datetime' =None, user_id: 'str' =None, user_metadata: 'str' =None, visibility: 'V1ResourceVisibility' =None, web_path: 'str' =None):  # noqa: E501
        """V1CloudSpace - a model defined in Swagger"""  # noqa: E501
        self._auto_switch_machine = None
        self._cache_data_connection_id = None
        self._can_download_source_code = None
        self._cluster_id = None
        self._code_config = None
        self._code_status = None
        self._code_url = None
        self._created_at = None
        self._data_connection_mounts = None
        self._description = None
        self._disable_secrets = None
        self._display_name = None
        self._engagement_counts = None
        self._env = None
        self._environment_config = None
        self._environment_template_id = None
        self._featured = None
        self._hide_files = None
        self._id = None
        self._image_status = None
        self._is_cloudspace_private = None
        self._is_code_private = None
        self._is_favorite = None
        self._is_published = None
        self._license = None
        self._license_url = None
        self._lock_out = None
        self._machine_image_version = None
        self._max_run_duration = None
        self._message = None
        self._multi_user_edit = None
        self._name = None
        self._number_of_files = None
        self._operating_cost = None
        self._paper_authors = None
        self._paper_org = None
        self._paper_org_avatar_url = None
        self._paper_url = None
        self._persistent_disk_id = None
        self._project_id = None
        self._publications = None
        self._published_at = None
        self._published_to_org_at = None
        self._sandbox = None
        self._state = None
        self._switch_to_default_machine_on_idle = None
        self._sync_duration = None
        self._sync_percentage = None
        self._tags = None
        self._thumbnail_file_type = None
        self._thumbnail_updated_at = None
        self._thumbnail_url = None
        self._total_size_bytes = None
        self._transfer_metadata = None
        self._updated_at = None
        self._user_id = None
        self._user_metadata = None
        self._visibility = None
        self._web_path = None
        self.discriminator = None
        if auto_switch_machine is not None:
            self.auto_switch_machine = auto_switch_machine
        if cache_data_connection_id is not None:
            self.cache_data_connection_id = cache_data_connection_id
        if can_download_source_code is not None:
            self.can_download_source_code = can_download_source_code
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if code_config is not None:
            self.code_config = code_config
        if code_status is not None:
            self.code_status = code_status
        if code_url is not None:
            self.code_url = code_url
        if created_at is not None:
            self.created_at = created_at
        if data_connection_mounts is not None:
            self.data_connection_mounts = data_connection_mounts
        if description is not None:
            self.description = description
        if disable_secrets is not None:
            self.disable_secrets = disable_secrets
        if display_name is not None:
            self.display_name = display_name
        if engagement_counts is not None:
            self.engagement_counts = engagement_counts
        if env is not None:
            self.env = env
        if environment_config is not None:
            self.environment_config = environment_config
        if environment_template_id is not None:
            self.environment_template_id = environment_template_id
        if featured is not None:
            self.featured = featured
        if hide_files is not None:
            self.hide_files = hide_files
        if id is not None:
            self.id = id
        if image_status is not None:
            self.image_status = image_status
        if is_cloudspace_private is not None:
            self.is_cloudspace_private = is_cloudspace_private
        if is_code_private is not None:
            self.is_code_private = is_code_private
        if is_favorite is not None:
            self.is_favorite = is_favorite
        if is_published is not None:
            self.is_published = is_published
        if license is not None:
            self.license = license
        if license_url is not None:
            self.license_url = license_url
        if lock_out is not None:
            self.lock_out = lock_out
        if machine_image_version is not None:
            self.machine_image_version = machine_image_version
        if max_run_duration is not None:
            self.max_run_duration = max_run_duration
        if message is not None:
            self.message = message
        if multi_user_edit is not None:
            self.multi_user_edit = multi_user_edit
        if name is not None:
            self.name = name
        if number_of_files is not None:
            self.number_of_files = number_of_files
        if operating_cost is not None:
            self.operating_cost = operating_cost
        if paper_authors is not None:
            self.paper_authors = paper_authors
        if paper_org is not None:
            self.paper_org = paper_org
        if paper_org_avatar_url is not None:
            self.paper_org_avatar_url = paper_org_avatar_url
        if paper_url is not None:
            self.paper_url = paper_url
        if persistent_disk_id is not None:
            self.persistent_disk_id = persistent_disk_id
        if project_id is not None:
            self.project_id = project_id
        if publications is not None:
            self.publications = publications
        if published_at is not None:
            self.published_at = published_at
        if published_to_org_at is not None:
            self.published_to_org_at = published_to_org_at
        if sandbox is not None:
            self.sandbox = sandbox
        if state is not None:
            self.state = state
        if switch_to_default_machine_on_idle is not None:
            self.switch_to_default_machine_on_idle = switch_to_default_machine_on_idle
        if sync_duration is not None:
            self.sync_duration = sync_duration
        if sync_percentage is not None:
            self.sync_percentage = sync_percentage
        if tags is not None:
            self.tags = tags
        if thumbnail_file_type is not None:
            self.thumbnail_file_type = thumbnail_file_type
        if thumbnail_updated_at is not None:
            self.thumbnail_updated_at = thumbnail_updated_at
        if thumbnail_url is not None:
            self.thumbnail_url = thumbnail_url
        if total_size_bytes is not None:
            self.total_size_bytes = total_size_bytes
        if transfer_metadata is not None:
            self.transfer_metadata = transfer_metadata
        if updated_at is not None:
            self.updated_at = updated_at
        if user_id is not None:
            self.user_id = user_id
        if user_metadata is not None:
            self.user_metadata = user_metadata
        if visibility is not None:
            self.visibility = visibility
        if web_path is not None:
            self.web_path = web_path

    @property
    def auto_switch_machine(self) -> 'bool':
        """Gets the auto_switch_machine of this V1CloudSpace.  # noqa: E501


        :return: The auto_switch_machine of this V1CloudSpace.  # noqa: E501
        :rtype: bool
        """
        return self._auto_switch_machine

    @auto_switch_machine.setter
    def auto_switch_machine(self, auto_switch_machine: 'bool'):
        """Sets the auto_switch_machine of this V1CloudSpace.


        :param auto_switch_machine: The auto_switch_machine of this V1CloudSpace.  # noqa: E501
        :type: bool
        """

        self._auto_switch_machine = auto_switch_machine

    @property
    def cache_data_connection_id(self) -> 'str':
        """Gets the cache_data_connection_id of this V1CloudSpace.  # noqa: E501


        :return: The cache_data_connection_id of this V1CloudSpace.  # noqa: E501
        :rtype: str
        """
        return self._cache_data_connection_id

    @cache_data_connection_id.setter
    def cache_data_connection_id(self, cache_data_connection_id: 'str'):
        """Sets the cache_data_connection_id of this V1CloudSpace.


        :param cache_data_connection_id: The cache_data_connection_id of this V1CloudSpace.  # noqa: E501
        :type: str
        """

        self._cache_data_connection_id = cache_data_connection_id

    @property
    def can_download_source_code(self) -> 'bool':
        """Gets the can_download_source_code of this V1CloudSpace.  # noqa: E501


        :return: The can_download_source_code of this V1CloudSpace.  # noqa: E501
        :rtype: bool
        """
        return self._can_download_source_code

    @can_download_source_code.setter
    def can_download_source_code(self, can_download_source_code: 'bool'):
        """Sets the can_download_source_code of this V1CloudSpace.


        :param can_download_source_code: The can_download_source_code of this V1CloudSpace.  # noqa: E501
        :type: bool
        """

        self._can_download_source_code = can_download_source_code

    @property
    def cluster_id(self) -> 'str':
        """Gets the cluster_id of this V1CloudSpace.  # noqa: E501


        :return: The cluster_id of this V1CloudSpace.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id: 'str'):
        """Sets the cluster_id of this V1CloudSpace.


        :param cluster_id: The cluster_id of this V1CloudSpace.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def code_config(self) -> 'V1CloudSpaceInstanceConfig':
        """Gets the code_config of this V1CloudSpace.  # noqa: E501


        :return: The code_config of this V1CloudSpace.  # noqa: E501
        :rtype: V1CloudSpaceInstanceConfig
        """
        return self._code_config

    @code_config.setter
    def code_config(self, code_config: 'V1CloudSpaceInstanceConfig'):
        """Sets the code_config of this V1CloudSpace.


        :param code_config: The code_config of this V1CloudSpace.  # noqa: E501
        :type: V1CloudSpaceInstanceConfig
        """

        self._code_config = code_config

    @property
    def code_status(self) -> 'V1GetCloudSpaceInstanceStatusResponse':
        """Gets the code_status of this V1CloudSpace.  # noqa: E501


        :return: The code_status of this V1CloudSpace.  # noqa: E501
        :rtype: V1GetCloudSpaceInstanceStatusResponse
        """
        return self._code_status

    @code_status.setter
    def code_status(self, code_status: 'V1GetCloudSpaceInstanceStatusResponse'):
        """Sets the code_status of this V1CloudSpace.


        :param code_status: The code_status of this V1CloudSpace.  # noqa: E501
        :type: V1GetCloudSpaceInstanceStatusResponse
        """

        self._code_status = code_status

    @property
    def code_url(self) -> 'str':
        """Gets the code_url of this V1CloudSpace.  # noqa: E501


        :return: The code_url of this V1CloudSpace.  # noqa: E501
        :rtype: str
        """
        return self._code_url

    @code_url.setter
    def code_url(self, code_url: 'str'):
        """Sets the code_url of this V1CloudSpace.


        :param code_url: The code_url of this V1CloudSpace.  # noqa: E501
        :type: str
        """

        self._code_url = code_url

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this V1CloudSpace.  # noqa: E501


        :return: The created_at of this V1CloudSpace.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this V1CloudSpace.


        :param created_at: The created_at of this V1CloudSpace.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def data_connection_mounts(self) -> 'list[V1DataConnectionMount]':
        """Gets the data_connection_mounts of this V1CloudSpace.  # noqa: E501


        :return: The data_connection_mounts of this V1CloudSpace.  # noqa: E501
        :rtype: list[V1DataConnectionMount]
        """
        return self._data_connection_mounts

    @data_connection_mounts.setter
    def data_connection_mounts(self, data_connection_mounts: 'list[V1DataConnectionMount]'):
        """Sets the data_connection_mounts of this V1CloudSpace.


        :param data_connection_mounts: The data_connection_mounts of this V1CloudSpace.  # noqa: E501
        :type: list[V1DataConnectionMount]
        """

        self._data_connection_mounts = data_connection_mounts

    @property
    def description(self) -> 'str':
        """Gets the description of this V1CloudSpace.  # noqa: E501


        :return: The description of this V1CloudSpace.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: 'str'):
        """Sets the description of this V1CloudSpace.


        :param description: The description of this V1CloudSpace.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def disable_secrets(self) -> 'bool':
        """Gets the disable_secrets of this V1CloudSpace.  # noqa: E501


        :return: The disable_secrets of this V1CloudSpace.  # noqa: E501
        :rtype: bool
        """
        return self._disable_secrets

    @disable_secrets.setter
    def disable_secrets(self, disable_secrets: 'bool'):
        """Sets the disable_secrets of this V1CloudSpace.


        :param disable_secrets: The disable_secrets of this V1CloudSpace.  # noqa: E501
        :type: bool
        """

        self._disable_secrets = disable_secrets

    @property
    def display_name(self) -> 'str':
        """Gets the display_name of this V1CloudSpace.  # noqa: E501


        :return: The display_name of this V1CloudSpace.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: 'str'):
        """Sets the display_name of this V1CloudSpace.


        :param display_name: The display_name of this V1CloudSpace.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def engagement_counts(self) -> 'dict(str, str)':
        """Gets the engagement_counts of this V1CloudSpace.  # noqa: E501


        :return: The engagement_counts of this V1CloudSpace.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._engagement_counts

    @engagement_counts.setter
    def engagement_counts(self, engagement_counts: 'dict(str, str)'):
        """Sets the engagement_counts of this V1CloudSpace.


        :param engagement_counts: The engagement_counts of this V1CloudSpace.  # noqa: E501
        :type: dict(str, str)
        """

        self._engagement_counts = engagement_counts

    @property
    def env(self) -> 'list[V1EnvVar]':
        """Gets the env of this V1CloudSpace.  # noqa: E501


        :return: The env of this V1CloudSpace.  # noqa: E501
        :rtype: list[V1EnvVar]
        """
        return self._env

    @env.setter
    def env(self, env: 'list[V1EnvVar]'):
        """Sets the env of this V1CloudSpace.


        :param env: The env of this V1CloudSpace.  # noqa: E501
        :type: list[V1EnvVar]
        """

        self._env = env

    @property
    def environment_config(self) -> 'V1CloudSpaceEnvironmentConfig':
        """Gets the environment_config of this V1CloudSpace.  # noqa: E501


        :return: The environment_config of this V1CloudSpace.  # noqa: E501
        :rtype: V1CloudSpaceEnvironmentConfig
        """
        return self._environment_config

    @environment_config.setter
    def environment_config(self, environment_config: 'V1CloudSpaceEnvironmentConfig'):
        """Sets the environment_config of this V1CloudSpace.


        :param environment_config: The environment_config of this V1CloudSpace.  # noqa: E501
        :type: V1CloudSpaceEnvironmentConfig
        """

        self._environment_config = environment_config

    @property
    def environment_template_id(self) -> 'str':
        """Gets the environment_template_id of this V1CloudSpace.  # noqa: E501


        :return: The environment_template_id of this V1CloudSpace.  # noqa: E501
        :rtype: str
        """
        return self._environment_template_id

    @environment_template_id.setter
    def environment_template_id(self, environment_template_id: 'str'):
        """Sets the environment_template_id of this V1CloudSpace.


        :param environment_template_id: The environment_template_id of this V1CloudSpace.  # noqa: E501
        :type: str
        """

        self._environment_template_id = environment_template_id

    @property
    def featured(self) -> 'bool':
        """Gets the featured of this V1CloudSpace.  # noqa: E501


        :return: The featured of this V1CloudSpace.  # noqa: E501
        :rtype: bool
        """
        return self._featured

    @featured.setter
    def featured(self, featured: 'bool'):
        """Sets the featured of this V1CloudSpace.


        :param featured: The featured of this V1CloudSpace.  # noqa: E501
        :type: bool
        """

        self._featured = featured

    @property
    def hide_files(self) -> 'bool':
        """Gets the hide_files of this V1CloudSpace.  # noqa: E501


        :return: The hide_files of this V1CloudSpace.  # noqa: E501
        :rtype: bool
        """
        return self._hide_files

    @hide_files.setter
    def hide_files(self, hide_files: 'bool'):
        """Sets the hide_files of this V1CloudSpace.


        :param hide_files: The hide_files of this V1CloudSpace.  # noqa: E501
        :type: bool
        """

        self._hide_files = hide_files

    @property
    def id(self) -> 'str':
        """Gets the id of this V1CloudSpace.  # noqa: E501


        :return: The id of this V1CloudSpace.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1CloudSpace.


        :param id: The id of this V1CloudSpace.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def image_status(self) -> 'V1ImageState':
        """Gets the image_status of this V1CloudSpace.  # noqa: E501


        :return: The image_status of this V1CloudSpace.  # noqa: E501
        :rtype: V1ImageState
        """
        return self._image_status

    @image_status.setter
    def image_status(self, image_status: 'V1ImageState'):
        """Sets the image_status of this V1CloudSpace.


        :param image_status: The image_status of this V1CloudSpace.  # noqa: E501
        :type: V1ImageState
        """

        self._image_status = image_status

    @property
    def is_cloudspace_private(self) -> 'bool':
        """Gets the is_cloudspace_private of this V1CloudSpace.  # noqa: E501


        :return: The is_cloudspace_private of this V1CloudSpace.  # noqa: E501
        :rtype: bool
        """
        return self._is_cloudspace_private

    @is_cloudspace_private.setter
    def is_cloudspace_private(self, is_cloudspace_private: 'bool'):
        """Sets the is_cloudspace_private of this V1CloudSpace.


        :param is_cloudspace_private: The is_cloudspace_private of this V1CloudSpace.  # noqa: E501
        :type: bool
        """

        self._is_cloudspace_private = is_cloudspace_private

    @property
    def is_code_private(self) -> 'bool':
        """Gets the is_code_private of this V1CloudSpace.  # noqa: E501


        :return: The is_code_private of this V1CloudSpace.  # noqa: E501
        :rtype: bool
        """
        return self._is_code_private

    @is_code_private.setter
    def is_code_private(self, is_code_private: 'bool'):
        """Sets the is_code_private of this V1CloudSpace.


        :param is_code_private: The is_code_private of this V1CloudSpace.  # noqa: E501
        :type: bool
        """

        self._is_code_private = is_code_private

    @property
    def is_favorite(self) -> 'bool':
        """Gets the is_favorite of this V1CloudSpace.  # noqa: E501


        :return: The is_favorite of this V1CloudSpace.  # noqa: E501
        :rtype: bool
        """
        return self._is_favorite

    @is_favorite.setter
    def is_favorite(self, is_favorite: 'bool'):
        """Sets the is_favorite of this V1CloudSpace.


        :param is_favorite: The is_favorite of this V1CloudSpace.  # noqa: E501
        :type: bool
        """

        self._is_favorite = is_favorite

    @property
    def is_published(self) -> 'bool':
        """Gets the is_published of this V1CloudSpace.  # noqa: E501


        :return: The is_published of this V1CloudSpace.  # noqa: E501
        :rtype: bool
        """
        return self._is_published

    @is_published.setter
    def is_published(self, is_published: 'bool'):
        """Sets the is_published of this V1CloudSpace.


        :param is_published: The is_published of this V1CloudSpace.  # noqa: E501
        :type: bool
        """

        self._is_published = is_published

    @property
    def license(self) -> 'str':
        """Gets the license of this V1CloudSpace.  # noqa: E501


        :return: The license of this V1CloudSpace.  # noqa: E501
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license: 'str'):
        """Sets the license of this V1CloudSpace.


        :param license: The license of this V1CloudSpace.  # noqa: E501
        :type: str
        """

        self._license = license

    @property
    def license_url(self) -> 'str':
        """Gets the license_url of this V1CloudSpace.  # noqa: E501


        :return: The license_url of this V1CloudSpace.  # noqa: E501
        :rtype: str
        """
        return self._license_url

    @license_url.setter
    def license_url(self, license_url: 'str'):
        """Sets the license_url of this V1CloudSpace.


        :param license_url: The license_url of this V1CloudSpace.  # noqa: E501
        :type: str
        """

        self._license_url = license_url

    @property
    def lock_out(self) -> 'bool':
        """Gets the lock_out of this V1CloudSpace.  # noqa: E501


        :return: The lock_out of this V1CloudSpace.  # noqa: E501
        :rtype: bool
        """
        return self._lock_out

    @lock_out.setter
    def lock_out(self, lock_out: 'bool'):
        """Sets the lock_out of this V1CloudSpace.


        :param lock_out: The lock_out of this V1CloudSpace.  # noqa: E501
        :type: bool
        """

        self._lock_out = lock_out

    @property
    def machine_image_version(self) -> 'str':
        """Gets the machine_image_version of this V1CloudSpace.  # noqa: E501


        :return: The machine_image_version of this V1CloudSpace.  # noqa: E501
        :rtype: str
        """
        return self._machine_image_version

    @machine_image_version.setter
    def machine_image_version(self, machine_image_version: 'str'):
        """Sets the machine_image_version of this V1CloudSpace.


        :param machine_image_version: The machine_image_version of this V1CloudSpace.  # noqa: E501
        :type: str
        """

        self._machine_image_version = machine_image_version

    @property
    def max_run_duration(self) -> 'str':
        """Gets the max_run_duration of this V1CloudSpace.  # noqa: E501


        :return: The max_run_duration of this V1CloudSpace.  # noqa: E501
        :rtype: str
        """
        return self._max_run_duration

    @max_run_duration.setter
    def max_run_duration(self, max_run_duration: 'str'):
        """Sets the max_run_duration of this V1CloudSpace.


        :param max_run_duration: The max_run_duration of this V1CloudSpace.  # noqa: E501
        :type: str
        """

        self._max_run_duration = max_run_duration

    @property
    def message(self) -> 'str':
        """Gets the message of this V1CloudSpace.  # noqa: E501


        :return: The message of this V1CloudSpace.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: 'str'):
        """Sets the message of this V1CloudSpace.


        :param message: The message of this V1CloudSpace.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def multi_user_edit(self) -> 'bool':
        """Gets the multi_user_edit of this V1CloudSpace.  # noqa: E501


        :return: The multi_user_edit of this V1CloudSpace.  # noqa: E501
        :rtype: bool
        """
        return self._multi_user_edit

    @multi_user_edit.setter
    def multi_user_edit(self, multi_user_edit: 'bool'):
        """Sets the multi_user_edit of this V1CloudSpace.


        :param multi_user_edit: The multi_user_edit of this V1CloudSpace.  # noqa: E501
        :type: bool
        """

        self._multi_user_edit = multi_user_edit

    @property
    def name(self) -> 'str':
        """Gets the name of this V1CloudSpace.  # noqa: E501


        :return: The name of this V1CloudSpace.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1CloudSpace.


        :param name: The name of this V1CloudSpace.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def number_of_files(self) -> 'str':
        """Gets the number_of_files of this V1CloudSpace.  # noqa: E501


        :return: The number_of_files of this V1CloudSpace.  # noqa: E501
        :rtype: str
        """
        return self._number_of_files

    @number_of_files.setter
    def number_of_files(self, number_of_files: 'str'):
        """Sets the number_of_files of this V1CloudSpace.


        :param number_of_files: The number_of_files of this V1CloudSpace.  # noqa: E501
        :type: str
        """

        self._number_of_files = number_of_files

    @property
    def operating_cost(self) -> 'str':
        """Gets the operating_cost of this V1CloudSpace.  # noqa: E501


        :return: The operating_cost of this V1CloudSpace.  # noqa: E501
        :rtype: str
        """
        return self._operating_cost

    @operating_cost.setter
    def operating_cost(self, operating_cost: 'str'):
        """Sets the operating_cost of this V1CloudSpace.


        :param operating_cost: The operating_cost of this V1CloudSpace.  # noqa: E501
        :type: str
        """

        self._operating_cost = operating_cost

    @property
    def paper_authors(self) -> 'str':
        """Gets the paper_authors of this V1CloudSpace.  # noqa: E501


        :return: The paper_authors of this V1CloudSpace.  # noqa: E501
        :rtype: str
        """
        return self._paper_authors

    @paper_authors.setter
    def paper_authors(self, paper_authors: 'str'):
        """Sets the paper_authors of this V1CloudSpace.


        :param paper_authors: The paper_authors of this V1CloudSpace.  # noqa: E501
        :type: str
        """

        self._paper_authors = paper_authors

    @property
    def paper_org(self) -> 'str':
        """Gets the paper_org of this V1CloudSpace.  # noqa: E501


        :return: The paper_org of this V1CloudSpace.  # noqa: E501
        :rtype: str
        """
        return self._paper_org

    @paper_org.setter
    def paper_org(self, paper_org: 'str'):
        """Sets the paper_org of this V1CloudSpace.


        :param paper_org: The paper_org of this V1CloudSpace.  # noqa: E501
        :type: str
        """

        self._paper_org = paper_org

    @property
    def paper_org_avatar_url(self) -> 'str':
        """Gets the paper_org_avatar_url of this V1CloudSpace.  # noqa: E501


        :return: The paper_org_avatar_url of this V1CloudSpace.  # noqa: E501
        :rtype: str
        """
        return self._paper_org_avatar_url

    @paper_org_avatar_url.setter
    def paper_org_avatar_url(self, paper_org_avatar_url: 'str'):
        """Sets the paper_org_avatar_url of this V1CloudSpace.


        :param paper_org_avatar_url: The paper_org_avatar_url of this V1CloudSpace.  # noqa: E501
        :type: str
        """

        self._paper_org_avatar_url = paper_org_avatar_url

    @property
    def paper_url(self) -> 'str':
        """Gets the paper_url of this V1CloudSpace.  # noqa: E501


        :return: The paper_url of this V1CloudSpace.  # noqa: E501
        :rtype: str
        """
        return self._paper_url

    @paper_url.setter
    def paper_url(self, paper_url: 'str'):
        """Sets the paper_url of this V1CloudSpace.


        :param paper_url: The paper_url of this V1CloudSpace.  # noqa: E501
        :type: str
        """

        self._paper_url = paper_url

    @property
    def persistent_disk_id(self) -> 'str':
        """Gets the persistent_disk_id of this V1CloudSpace.  # noqa: E501


        :return: The persistent_disk_id of this V1CloudSpace.  # noqa: E501
        :rtype: str
        """
        return self._persistent_disk_id

    @persistent_disk_id.setter
    def persistent_disk_id(self, persistent_disk_id: 'str'):
        """Sets the persistent_disk_id of this V1CloudSpace.


        :param persistent_disk_id: The persistent_disk_id of this V1CloudSpace.  # noqa: E501
        :type: str
        """

        self._persistent_disk_id = persistent_disk_id

    @property
    def project_id(self) -> 'str':
        """Gets the project_id of this V1CloudSpace.  # noqa: E501


        :return: The project_id of this V1CloudSpace.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: 'str'):
        """Sets the project_id of this V1CloudSpace.


        :param project_id: The project_id of this V1CloudSpace.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def publications(self) -> 'list[V1CloudSpaceVersionPublication]':
        """Gets the publications of this V1CloudSpace.  # noqa: E501


        :return: The publications of this V1CloudSpace.  # noqa: E501
        :rtype: list[V1CloudSpaceVersionPublication]
        """
        return self._publications

    @publications.setter
    def publications(self, publications: 'list[V1CloudSpaceVersionPublication]'):
        """Sets the publications of this V1CloudSpace.


        :param publications: The publications of this V1CloudSpace.  # noqa: E501
        :type: list[V1CloudSpaceVersionPublication]
        """

        self._publications = publications

    @property
    def published_at(self) -> 'datetime':
        """Gets the published_at of this V1CloudSpace.  # noqa: E501


        :return: The published_at of this V1CloudSpace.  # noqa: E501
        :rtype: datetime
        """
        return self._published_at

    @published_at.setter
    def published_at(self, published_at: 'datetime'):
        """Sets the published_at of this V1CloudSpace.


        :param published_at: The published_at of this V1CloudSpace.  # noqa: E501
        :type: datetime
        """

        self._published_at = published_at

    @property
    def published_to_org_at(self) -> 'datetime':
        """Gets the published_to_org_at of this V1CloudSpace.  # noqa: E501


        :return: The published_to_org_at of this V1CloudSpace.  # noqa: E501
        :rtype: datetime
        """
        return self._published_to_org_at

    @published_to_org_at.setter
    def published_to_org_at(self, published_to_org_at: 'datetime'):
        """Sets the published_to_org_at of this V1CloudSpace.


        :param published_to_org_at: The published_to_org_at of this V1CloudSpace.  # noqa: E501
        :type: datetime
        """

        self._published_to_org_at = published_to_org_at

    @property
    def sandbox(self) -> 'bool':
        """Gets the sandbox of this V1CloudSpace.  # noqa: E501


        :return: The sandbox of this V1CloudSpace.  # noqa: E501
        :rtype: bool
        """
        return self._sandbox

    @sandbox.setter
    def sandbox(self, sandbox: 'bool'):
        """Sets the sandbox of this V1CloudSpace.


        :param sandbox: The sandbox of this V1CloudSpace.  # noqa: E501
        :type: bool
        """

        self._sandbox = sandbox

    @property
    def state(self) -> 'V1CloudSpaceState':
        """Gets the state of this V1CloudSpace.  # noqa: E501


        :return: The state of this V1CloudSpace.  # noqa: E501
        :rtype: V1CloudSpaceState
        """
        return self._state

    @state.setter
    def state(self, state: 'V1CloudSpaceState'):
        """Sets the state of this V1CloudSpace.


        :param state: The state of this V1CloudSpace.  # noqa: E501
        :type: V1CloudSpaceState
        """

        self._state = state

    @property
    def switch_to_default_machine_on_idle(self) -> 'bool':
        """Gets the switch_to_default_machine_on_idle of this V1CloudSpace.  # noqa: E501


        :return: The switch_to_default_machine_on_idle of this V1CloudSpace.  # noqa: E501
        :rtype: bool
        """
        return self._switch_to_default_machine_on_idle

    @switch_to_default_machine_on_idle.setter
    def switch_to_default_machine_on_idle(self, switch_to_default_machine_on_idle: 'bool'):
        """Sets the switch_to_default_machine_on_idle of this V1CloudSpace.


        :param switch_to_default_machine_on_idle: The switch_to_default_machine_on_idle of this V1CloudSpace.  # noqa: E501
        :type: bool
        """

        self._switch_to_default_machine_on_idle = switch_to_default_machine_on_idle

    @property
    def sync_duration(self) -> 'str':
        """Gets the sync_duration of this V1CloudSpace.  # noqa: E501


        :return: The sync_duration of this V1CloudSpace.  # noqa: E501
        :rtype: str
        """
        return self._sync_duration

    @sync_duration.setter
    def sync_duration(self, sync_duration: 'str'):
        """Sets the sync_duration of this V1CloudSpace.


        :param sync_duration: The sync_duration of this V1CloudSpace.  # noqa: E501
        :type: str
        """

        self._sync_duration = sync_duration

    @property
    def sync_percentage(self) -> 'str':
        """Gets the sync_percentage of this V1CloudSpace.  # noqa: E501


        :return: The sync_percentage of this V1CloudSpace.  # noqa: E501
        :rtype: str
        """
        return self._sync_percentage

    @sync_percentage.setter
    def sync_percentage(self, sync_percentage: 'str'):
        """Sets the sync_percentage of this V1CloudSpace.


        :param sync_percentage: The sync_percentage of this V1CloudSpace.  # noqa: E501
        :type: str
        """

        self._sync_percentage = sync_percentage

    @property
    def tags(self) -> 'list[V1ResourceTag]':
        """Gets the tags of this V1CloudSpace.  # noqa: E501


        :return: The tags of this V1CloudSpace.  # noqa: E501
        :rtype: list[V1ResourceTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: 'list[V1ResourceTag]'):
        """Sets the tags of this V1CloudSpace.


        :param tags: The tags of this V1CloudSpace.  # noqa: E501
        :type: list[V1ResourceTag]
        """

        self._tags = tags

    @property
    def thumbnail_file_type(self) -> 'str':
        """Gets the thumbnail_file_type of this V1CloudSpace.  # noqa: E501


        :return: The thumbnail_file_type of this V1CloudSpace.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_file_type

    @thumbnail_file_type.setter
    def thumbnail_file_type(self, thumbnail_file_type: 'str'):
        """Sets the thumbnail_file_type of this V1CloudSpace.


        :param thumbnail_file_type: The thumbnail_file_type of this V1CloudSpace.  # noqa: E501
        :type: str
        """

        self._thumbnail_file_type = thumbnail_file_type

    @property
    def thumbnail_updated_at(self) -> 'datetime':
        """Gets the thumbnail_updated_at of this V1CloudSpace.  # noqa: E501


        :return: The thumbnail_updated_at of this V1CloudSpace.  # noqa: E501
        :rtype: datetime
        """
        return self._thumbnail_updated_at

    @thumbnail_updated_at.setter
    def thumbnail_updated_at(self, thumbnail_updated_at: 'datetime'):
        """Sets the thumbnail_updated_at of this V1CloudSpace.


        :param thumbnail_updated_at: The thumbnail_updated_at of this V1CloudSpace.  # noqa: E501
        :type: datetime
        """

        self._thumbnail_updated_at = thumbnail_updated_at

    @property
    def thumbnail_url(self) -> 'str':
        """Gets the thumbnail_url of this V1CloudSpace.  # noqa: E501


        :return: The thumbnail_url of this V1CloudSpace.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url: 'str'):
        """Sets the thumbnail_url of this V1CloudSpace.


        :param thumbnail_url: The thumbnail_url of this V1CloudSpace.  # noqa: E501
        :type: str
        """

        self._thumbnail_url = thumbnail_url

    @property
    def total_size_bytes(self) -> 'str':
        """Gets the total_size_bytes of this V1CloudSpace.  # noqa: E501


        :return: The total_size_bytes of this V1CloudSpace.  # noqa: E501
        :rtype: str
        """
        return self._total_size_bytes

    @total_size_bytes.setter
    def total_size_bytes(self, total_size_bytes: 'str'):
        """Sets the total_size_bytes of this V1CloudSpace.


        :param total_size_bytes: The total_size_bytes of this V1CloudSpace.  # noqa: E501
        :type: str
        """

        self._total_size_bytes = total_size_bytes

    @property
    def transfer_metadata(self) -> 'V1CloudSpaceTransferMetadata':
        """Gets the transfer_metadata of this V1CloudSpace.  # noqa: E501


        :return: The transfer_metadata of this V1CloudSpace.  # noqa: E501
        :rtype: V1CloudSpaceTransferMetadata
        """
        return self._transfer_metadata

    @transfer_metadata.setter
    def transfer_metadata(self, transfer_metadata: 'V1CloudSpaceTransferMetadata'):
        """Sets the transfer_metadata of this V1CloudSpace.


        :param transfer_metadata: The transfer_metadata of this V1CloudSpace.  # noqa: E501
        :type: V1CloudSpaceTransferMetadata
        """

        self._transfer_metadata = transfer_metadata

    @property
    def updated_at(self) -> 'datetime':
        """Gets the updated_at of this V1CloudSpace.  # noqa: E501


        :return: The updated_at of this V1CloudSpace.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: 'datetime'):
        """Sets the updated_at of this V1CloudSpace.


        :param updated_at: The updated_at of this V1CloudSpace.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def user_id(self) -> 'str':
        """Gets the user_id of this V1CloudSpace.  # noqa: E501


        :return: The user_id of this V1CloudSpace.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: 'str'):
        """Sets the user_id of this V1CloudSpace.


        :param user_id: The user_id of this V1CloudSpace.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def user_metadata(self) -> 'str':
        """Gets the user_metadata of this V1CloudSpace.  # noqa: E501


        :return: The user_metadata of this V1CloudSpace.  # noqa: E501
        :rtype: str
        """
        return self._user_metadata

    @user_metadata.setter
    def user_metadata(self, user_metadata: 'str'):
        """Sets the user_metadata of this V1CloudSpace.


        :param user_metadata: The user_metadata of this V1CloudSpace.  # noqa: E501
        :type: str
        """

        self._user_metadata = user_metadata

    @property
    def visibility(self) -> 'V1ResourceVisibility':
        """Gets the visibility of this V1CloudSpace.  # noqa: E501


        :return: The visibility of this V1CloudSpace.  # noqa: E501
        :rtype: V1ResourceVisibility
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility: 'V1ResourceVisibility'):
        """Sets the visibility of this V1CloudSpace.


        :param visibility: The visibility of this V1CloudSpace.  # noqa: E501
        :type: V1ResourceVisibility
        """

        self._visibility = visibility

    @property
    def web_path(self) -> 'str':
        """Gets the web_path of this V1CloudSpace.  # noqa: E501


        :return: The web_path of this V1CloudSpace.  # noqa: E501
        :rtype: str
        """
        return self._web_path

    @web_path.setter
    def web_path(self, web_path: 'str'):
        """Sets the web_path of this V1CloudSpace.


        :param web_path: The web_path of this V1CloudSpace.  # noqa: E501
        :type: str
        """

        self._web_path = web_path

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1CloudSpace, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1CloudSpace') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1CloudSpace):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1CloudSpace') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
