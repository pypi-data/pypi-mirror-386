# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1MetricsStream(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_id': 'str',
        'cloudspace_id': 'str',
        'cluster_id': 'str',
        'created_at': 'datetime',
        'dark_color': 'str',
        'experiment_project_name': 'str',
        'guest': 'bool',
        'id': 'str',
        'job_id': 'str',
        'job_name': 'str',
        'light_color': 'str',
        'name': 'str',
        'persisted': 'bool',
        'phase': 'V1PhaseType',
        'plugin_id': 'str',
        'project_id': 'str',
        'source_id': 'str',
        'stopped_at': 'datetime',
        'store_created_at': 'bool',
        'store_step': 'bool',
        'system_info': 'V1SystemInfo',
        'tags': 'list[V1MetricsTags]',
        'trackers': 'dict(str, V1MetricsTracker)',
        'updated_at': 'datetime',
        'updates_counter': 'int',
        'user_id': 'str',
        'version': 'datetime',
        'version_number': 'int',
        'visibility': 'V1ResourceVisibility',
        'work_id': 'str'
    }

    attribute_map = {
        'app_id': 'appId',
        'cloudspace_id': 'cloudspaceId',
        'cluster_id': 'clusterId',
        'created_at': 'createdAt',
        'dark_color': 'darkColor',
        'experiment_project_name': 'experimentProjectName',
        'guest': 'guest',
        'id': 'id',
        'job_id': 'jobId',
        'job_name': 'jobName',
        'light_color': 'lightColor',
        'name': 'name',
        'persisted': 'persisted',
        'phase': 'phase',
        'plugin_id': 'pluginId',
        'project_id': 'projectId',
        'source_id': 'sourceId',
        'stopped_at': 'stoppedAt',
        'store_created_at': 'storeCreatedAt',
        'store_step': 'storeStep',
        'system_info': 'systemInfo',
        'tags': 'tags',
        'trackers': 'trackers',
        'updated_at': 'updatedAt',
        'updates_counter': 'updatesCounter',
        'user_id': 'userId',
        'version': 'version',
        'version_number': 'versionNumber',
        'visibility': 'visibility',
        'work_id': 'workId'
    }

    def __init__(self, app_id: 'str' =None, cloudspace_id: 'str' =None, cluster_id: 'str' =None, created_at: 'datetime' =None, dark_color: 'str' =None, experiment_project_name: 'str' =None, guest: 'bool' =None, id: 'str' =None, job_id: 'str' =None, job_name: 'str' =None, light_color: 'str' =None, name: 'str' =None, persisted: 'bool' =None, phase: 'V1PhaseType' =None, plugin_id: 'str' =None, project_id: 'str' =None, source_id: 'str' =None, stopped_at: 'datetime' =None, store_created_at: 'bool' =None, store_step: 'bool' =None, system_info: 'V1SystemInfo' =None, tags: 'list[V1MetricsTags]' =None, trackers: 'dict(str, V1MetricsTracker)' =None, updated_at: 'datetime' =None, updates_counter: 'int' =None, user_id: 'str' =None, version: 'datetime' =None, version_number: 'int' =None, visibility: 'V1ResourceVisibility' =None, work_id: 'str' =None):  # noqa: E501
        """V1MetricsStream - a model defined in Swagger"""  # noqa: E501
        self._app_id = None
        self._cloudspace_id = None
        self._cluster_id = None
        self._created_at = None
        self._dark_color = None
        self._experiment_project_name = None
        self._guest = None
        self._id = None
        self._job_id = None
        self._job_name = None
        self._light_color = None
        self._name = None
        self._persisted = None
        self._phase = None
        self._plugin_id = None
        self._project_id = None
        self._source_id = None
        self._stopped_at = None
        self._store_created_at = None
        self._store_step = None
        self._system_info = None
        self._tags = None
        self._trackers = None
        self._updated_at = None
        self._updates_counter = None
        self._user_id = None
        self._version = None
        self._version_number = None
        self._visibility = None
        self._work_id = None
        self.discriminator = None
        if app_id is not None:
            self.app_id = app_id
        if cloudspace_id is not None:
            self.cloudspace_id = cloudspace_id
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if created_at is not None:
            self.created_at = created_at
        if dark_color is not None:
            self.dark_color = dark_color
        if experiment_project_name is not None:
            self.experiment_project_name = experiment_project_name
        if guest is not None:
            self.guest = guest
        if id is not None:
            self.id = id
        if job_id is not None:
            self.job_id = job_id
        if job_name is not None:
            self.job_name = job_name
        if light_color is not None:
            self.light_color = light_color
        if name is not None:
            self.name = name
        if persisted is not None:
            self.persisted = persisted
        if phase is not None:
            self.phase = phase
        if plugin_id is not None:
            self.plugin_id = plugin_id
        if project_id is not None:
            self.project_id = project_id
        if source_id is not None:
            self.source_id = source_id
        if stopped_at is not None:
            self.stopped_at = stopped_at
        if store_created_at is not None:
            self.store_created_at = store_created_at
        if store_step is not None:
            self.store_step = store_step
        if system_info is not None:
            self.system_info = system_info
        if tags is not None:
            self.tags = tags
        if trackers is not None:
            self.trackers = trackers
        if updated_at is not None:
            self.updated_at = updated_at
        if updates_counter is not None:
            self.updates_counter = updates_counter
        if user_id is not None:
            self.user_id = user_id
        if version is not None:
            self.version = version
        if version_number is not None:
            self.version_number = version_number
        if visibility is not None:
            self.visibility = visibility
        if work_id is not None:
            self.work_id = work_id

    @property
    def app_id(self) -> 'str':
        """Gets the app_id of this V1MetricsStream.  # noqa: E501


        :return: The app_id of this V1MetricsStream.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id: 'str'):
        """Sets the app_id of this V1MetricsStream.


        :param app_id: The app_id of this V1MetricsStream.  # noqa: E501
        :type: str
        """

        self._app_id = app_id

    @property
    def cloudspace_id(self) -> 'str':
        """Gets the cloudspace_id of this V1MetricsStream.  # noqa: E501


        :return: The cloudspace_id of this V1MetricsStream.  # noqa: E501
        :rtype: str
        """
        return self._cloudspace_id

    @cloudspace_id.setter
    def cloudspace_id(self, cloudspace_id: 'str'):
        """Sets the cloudspace_id of this V1MetricsStream.


        :param cloudspace_id: The cloudspace_id of this V1MetricsStream.  # noqa: E501
        :type: str
        """

        self._cloudspace_id = cloudspace_id

    @property
    def cluster_id(self) -> 'str':
        """Gets the cluster_id of this V1MetricsStream.  # noqa: E501


        :return: The cluster_id of this V1MetricsStream.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id: 'str'):
        """Sets the cluster_id of this V1MetricsStream.


        :param cluster_id: The cluster_id of this V1MetricsStream.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this V1MetricsStream.  # noqa: E501


        :return: The created_at of this V1MetricsStream.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this V1MetricsStream.


        :param created_at: The created_at of this V1MetricsStream.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def dark_color(self) -> 'str':
        """Gets the dark_color of this V1MetricsStream.  # noqa: E501


        :return: The dark_color of this V1MetricsStream.  # noqa: E501
        :rtype: str
        """
        return self._dark_color

    @dark_color.setter
    def dark_color(self, dark_color: 'str'):
        """Sets the dark_color of this V1MetricsStream.


        :param dark_color: The dark_color of this V1MetricsStream.  # noqa: E501
        :type: str
        """

        self._dark_color = dark_color

    @property
    def experiment_project_name(self) -> 'str':
        """Gets the experiment_project_name of this V1MetricsStream.  # noqa: E501


        :return: The experiment_project_name of this V1MetricsStream.  # noqa: E501
        :rtype: str
        """
        return self._experiment_project_name

    @experiment_project_name.setter
    def experiment_project_name(self, experiment_project_name: 'str'):
        """Sets the experiment_project_name of this V1MetricsStream.


        :param experiment_project_name: The experiment_project_name of this V1MetricsStream.  # noqa: E501
        :type: str
        """

        self._experiment_project_name = experiment_project_name

    @property
    def guest(self) -> 'bool':
        """Gets the guest of this V1MetricsStream.  # noqa: E501


        :return: The guest of this V1MetricsStream.  # noqa: E501
        :rtype: bool
        """
        return self._guest

    @guest.setter
    def guest(self, guest: 'bool'):
        """Sets the guest of this V1MetricsStream.


        :param guest: The guest of this V1MetricsStream.  # noqa: E501
        :type: bool
        """

        self._guest = guest

    @property
    def id(self) -> 'str':
        """Gets the id of this V1MetricsStream.  # noqa: E501


        :return: The id of this V1MetricsStream.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1MetricsStream.


        :param id: The id of this V1MetricsStream.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def job_id(self) -> 'str':
        """Gets the job_id of this V1MetricsStream.  # noqa: E501


        :return: The job_id of this V1MetricsStream.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id: 'str'):
        """Sets the job_id of this V1MetricsStream.


        :param job_id: The job_id of this V1MetricsStream.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def job_name(self) -> 'str':
        """Gets the job_name of this V1MetricsStream.  # noqa: E501


        :return: The job_name of this V1MetricsStream.  # noqa: E501
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name: 'str'):
        """Sets the job_name of this V1MetricsStream.


        :param job_name: The job_name of this V1MetricsStream.  # noqa: E501
        :type: str
        """

        self._job_name = job_name

    @property
    def light_color(self) -> 'str':
        """Gets the light_color of this V1MetricsStream.  # noqa: E501


        :return: The light_color of this V1MetricsStream.  # noqa: E501
        :rtype: str
        """
        return self._light_color

    @light_color.setter
    def light_color(self, light_color: 'str'):
        """Sets the light_color of this V1MetricsStream.


        :param light_color: The light_color of this V1MetricsStream.  # noqa: E501
        :type: str
        """

        self._light_color = light_color

    @property
    def name(self) -> 'str':
        """Gets the name of this V1MetricsStream.  # noqa: E501


        :return: The name of this V1MetricsStream.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1MetricsStream.


        :param name: The name of this V1MetricsStream.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def persisted(self) -> 'bool':
        """Gets the persisted of this V1MetricsStream.  # noqa: E501


        :return: The persisted of this V1MetricsStream.  # noqa: E501
        :rtype: bool
        """
        return self._persisted

    @persisted.setter
    def persisted(self, persisted: 'bool'):
        """Sets the persisted of this V1MetricsStream.


        :param persisted: The persisted of this V1MetricsStream.  # noqa: E501
        :type: bool
        """

        self._persisted = persisted

    @property
    def phase(self) -> 'V1PhaseType':
        """Gets the phase of this V1MetricsStream.  # noqa: E501


        :return: The phase of this V1MetricsStream.  # noqa: E501
        :rtype: V1PhaseType
        """
        return self._phase

    @phase.setter
    def phase(self, phase: 'V1PhaseType'):
        """Sets the phase of this V1MetricsStream.


        :param phase: The phase of this V1MetricsStream.  # noqa: E501
        :type: V1PhaseType
        """

        self._phase = phase

    @property
    def plugin_id(self) -> 'str':
        """Gets the plugin_id of this V1MetricsStream.  # noqa: E501


        :return: The plugin_id of this V1MetricsStream.  # noqa: E501
        :rtype: str
        """
        return self._plugin_id

    @plugin_id.setter
    def plugin_id(self, plugin_id: 'str'):
        """Sets the plugin_id of this V1MetricsStream.


        :param plugin_id: The plugin_id of this V1MetricsStream.  # noqa: E501
        :type: str
        """

        self._plugin_id = plugin_id

    @property
    def project_id(self) -> 'str':
        """Gets the project_id of this V1MetricsStream.  # noqa: E501


        :return: The project_id of this V1MetricsStream.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: 'str'):
        """Sets the project_id of this V1MetricsStream.


        :param project_id: The project_id of this V1MetricsStream.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def source_id(self) -> 'str':
        """Gets the source_id of this V1MetricsStream.  # noqa: E501


        :return: The source_id of this V1MetricsStream.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id: 'str'):
        """Sets the source_id of this V1MetricsStream.


        :param source_id: The source_id of this V1MetricsStream.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    @property
    def stopped_at(self) -> 'datetime':
        """Gets the stopped_at of this V1MetricsStream.  # noqa: E501


        :return: The stopped_at of this V1MetricsStream.  # noqa: E501
        :rtype: datetime
        """
        return self._stopped_at

    @stopped_at.setter
    def stopped_at(self, stopped_at: 'datetime'):
        """Sets the stopped_at of this V1MetricsStream.


        :param stopped_at: The stopped_at of this V1MetricsStream.  # noqa: E501
        :type: datetime
        """

        self._stopped_at = stopped_at

    @property
    def store_created_at(self) -> 'bool':
        """Gets the store_created_at of this V1MetricsStream.  # noqa: E501


        :return: The store_created_at of this V1MetricsStream.  # noqa: E501
        :rtype: bool
        """
        return self._store_created_at

    @store_created_at.setter
    def store_created_at(self, store_created_at: 'bool'):
        """Sets the store_created_at of this V1MetricsStream.


        :param store_created_at: The store_created_at of this V1MetricsStream.  # noqa: E501
        :type: bool
        """

        self._store_created_at = store_created_at

    @property
    def store_step(self) -> 'bool':
        """Gets the store_step of this V1MetricsStream.  # noqa: E501


        :return: The store_step of this V1MetricsStream.  # noqa: E501
        :rtype: bool
        """
        return self._store_step

    @store_step.setter
    def store_step(self, store_step: 'bool'):
        """Sets the store_step of this V1MetricsStream.


        :param store_step: The store_step of this V1MetricsStream.  # noqa: E501
        :type: bool
        """

        self._store_step = store_step

    @property
    def system_info(self) -> 'V1SystemInfo':
        """Gets the system_info of this V1MetricsStream.  # noqa: E501


        :return: The system_info of this V1MetricsStream.  # noqa: E501
        :rtype: V1SystemInfo
        """
        return self._system_info

    @system_info.setter
    def system_info(self, system_info: 'V1SystemInfo'):
        """Sets the system_info of this V1MetricsStream.


        :param system_info: The system_info of this V1MetricsStream.  # noqa: E501
        :type: V1SystemInfo
        """

        self._system_info = system_info

    @property
    def tags(self) -> 'list[V1MetricsTags]':
        """Gets the tags of this V1MetricsStream.  # noqa: E501


        :return: The tags of this V1MetricsStream.  # noqa: E501
        :rtype: list[V1MetricsTags]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: 'list[V1MetricsTags]'):
        """Sets the tags of this V1MetricsStream.


        :param tags: The tags of this V1MetricsStream.  # noqa: E501
        :type: list[V1MetricsTags]
        """

        self._tags = tags

    @property
    def trackers(self) -> 'dict(str, V1MetricsTracker)':
        """Gets the trackers of this V1MetricsStream.  # noqa: E501


        :return: The trackers of this V1MetricsStream.  # noqa: E501
        :rtype: dict(str, V1MetricsTracker)
        """
        return self._trackers

    @trackers.setter
    def trackers(self, trackers: 'dict(str, V1MetricsTracker)'):
        """Sets the trackers of this V1MetricsStream.


        :param trackers: The trackers of this V1MetricsStream.  # noqa: E501
        :type: dict(str, V1MetricsTracker)
        """

        self._trackers = trackers

    @property
    def updated_at(self) -> 'datetime':
        """Gets the updated_at of this V1MetricsStream.  # noqa: E501


        :return: The updated_at of this V1MetricsStream.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: 'datetime'):
        """Sets the updated_at of this V1MetricsStream.


        :param updated_at: The updated_at of this V1MetricsStream.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def updates_counter(self) -> 'int':
        """Gets the updates_counter of this V1MetricsStream.  # noqa: E501


        :return: The updates_counter of this V1MetricsStream.  # noqa: E501
        :rtype: int
        """
        return self._updates_counter

    @updates_counter.setter
    def updates_counter(self, updates_counter: 'int'):
        """Sets the updates_counter of this V1MetricsStream.


        :param updates_counter: The updates_counter of this V1MetricsStream.  # noqa: E501
        :type: int
        """

        self._updates_counter = updates_counter

    @property
    def user_id(self) -> 'str':
        """Gets the user_id of this V1MetricsStream.  # noqa: E501


        :return: The user_id of this V1MetricsStream.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: 'str'):
        """Sets the user_id of this V1MetricsStream.


        :param user_id: The user_id of this V1MetricsStream.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def version(self) -> 'datetime':
        """Gets the version of this V1MetricsStream.  # noqa: E501


        :return: The version of this V1MetricsStream.  # noqa: E501
        :rtype: datetime
        """
        return self._version

    @version.setter
    def version(self, version: 'datetime'):
        """Sets the version of this V1MetricsStream.


        :param version: The version of this V1MetricsStream.  # noqa: E501
        :type: datetime
        """

        self._version = version

    @property
    def version_number(self) -> 'int':
        """Gets the version_number of this V1MetricsStream.  # noqa: E501


        :return: The version_number of this V1MetricsStream.  # noqa: E501
        :rtype: int
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number: 'int'):
        """Sets the version_number of this V1MetricsStream.


        :param version_number: The version_number of this V1MetricsStream.  # noqa: E501
        :type: int
        """

        self._version_number = version_number

    @property
    def visibility(self) -> 'V1ResourceVisibility':
        """Gets the visibility of this V1MetricsStream.  # noqa: E501


        :return: The visibility of this V1MetricsStream.  # noqa: E501
        :rtype: V1ResourceVisibility
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility: 'V1ResourceVisibility'):
        """Sets the visibility of this V1MetricsStream.


        :param visibility: The visibility of this V1MetricsStream.  # noqa: E501
        :type: V1ResourceVisibility
        """

        self._visibility = visibility

    @property
    def work_id(self) -> 'str':
        """Gets the work_id of this V1MetricsStream.  # noqa: E501


        :return: The work_id of this V1MetricsStream.  # noqa: E501
        :rtype: str
        """
        return self._work_id

    @work_id.setter
    def work_id(self, work_id: 'str'):
        """Sets the work_id of this V1MetricsStream.


        :param work_id: The work_id of this V1MetricsStream.  # noqa: E501
        :type: str
        """

        self._work_id = work_id

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1MetricsStream, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1MetricsStream') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1MetricsStream):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1MetricsStream') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
