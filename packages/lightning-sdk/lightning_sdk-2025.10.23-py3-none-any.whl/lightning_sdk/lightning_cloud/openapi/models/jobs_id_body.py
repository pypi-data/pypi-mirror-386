# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class JobsIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message': 'str',
        'slurm_v1_status': 'V1SlurmV1JobStatus',
        'state': 'str',
        'upload_eta_seconds': 'str',
        'upload_in_progress': 'bool',
        'upload_percentage': 'str'
    }

    attribute_map = {
        'message': 'message',
        'slurm_v1_status': 'slurmV1Status',
        'state': 'state',
        'upload_eta_seconds': 'uploadEtaSeconds',
        'upload_in_progress': 'uploadInProgress',
        'upload_percentage': 'uploadPercentage'
    }

    def __init__(self, message: 'str' =None, slurm_v1_status: 'V1SlurmV1JobStatus' =None, state: 'str' =None, upload_eta_seconds: 'str' =None, upload_in_progress: 'bool' =None, upload_percentage: 'str' =None):  # noqa: E501
        """JobsIdBody - a model defined in Swagger"""  # noqa: E501
        self._message = None
        self._slurm_v1_status = None
        self._state = None
        self._upload_eta_seconds = None
        self._upload_in_progress = None
        self._upload_percentage = None
        self.discriminator = None
        if message is not None:
            self.message = message
        if slurm_v1_status is not None:
            self.slurm_v1_status = slurm_v1_status
        if state is not None:
            self.state = state
        if upload_eta_seconds is not None:
            self.upload_eta_seconds = upload_eta_seconds
        if upload_in_progress is not None:
            self.upload_in_progress = upload_in_progress
        if upload_percentage is not None:
            self.upload_percentage = upload_percentage

    @property
    def message(self) -> 'str':
        """Gets the message of this JobsIdBody.  # noqa: E501


        :return: The message of this JobsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: 'str'):
        """Sets the message of this JobsIdBody.


        :param message: The message of this JobsIdBody.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def slurm_v1_status(self) -> 'V1SlurmV1JobStatus':
        """Gets the slurm_v1_status of this JobsIdBody.  # noqa: E501


        :return: The slurm_v1_status of this JobsIdBody.  # noqa: E501
        :rtype: V1SlurmV1JobStatus
        """
        return self._slurm_v1_status

    @slurm_v1_status.setter
    def slurm_v1_status(self, slurm_v1_status: 'V1SlurmV1JobStatus'):
        """Sets the slurm_v1_status of this JobsIdBody.


        :param slurm_v1_status: The slurm_v1_status of this JobsIdBody.  # noqa: E501
        :type: V1SlurmV1JobStatus
        """

        self._slurm_v1_status = slurm_v1_status

    @property
    def state(self) -> 'str':
        """Gets the state of this JobsIdBody.  # noqa: E501


        :return: The state of this JobsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: 'str'):
        """Sets the state of this JobsIdBody.


        :param state: The state of this JobsIdBody.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def upload_eta_seconds(self) -> 'str':
        """Gets the upload_eta_seconds of this JobsIdBody.  # noqa: E501


        :return: The upload_eta_seconds of this JobsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._upload_eta_seconds

    @upload_eta_seconds.setter
    def upload_eta_seconds(self, upload_eta_seconds: 'str'):
        """Sets the upload_eta_seconds of this JobsIdBody.


        :param upload_eta_seconds: The upload_eta_seconds of this JobsIdBody.  # noqa: E501
        :type: str
        """

        self._upload_eta_seconds = upload_eta_seconds

    @property
    def upload_in_progress(self) -> 'bool':
        """Gets the upload_in_progress of this JobsIdBody.  # noqa: E501


        :return: The upload_in_progress of this JobsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._upload_in_progress

    @upload_in_progress.setter
    def upload_in_progress(self, upload_in_progress: 'bool'):
        """Sets the upload_in_progress of this JobsIdBody.


        :param upload_in_progress: The upload_in_progress of this JobsIdBody.  # noqa: E501
        :type: bool
        """

        self._upload_in_progress = upload_in_progress

    @property
    def upload_percentage(self) -> 'str':
        """Gets the upload_percentage of this JobsIdBody.  # noqa: E501


        :return: The upload_percentage of this JobsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._upload_percentage

    @upload_percentage.setter
    def upload_percentage(self, upload_percentage: 'str'):
        """Sets the upload_percentage of this JobsIdBody.


        :param upload_percentage: The upload_percentage of this JobsIdBody.  # noqa: E501
        :type: str
        """

        self._upload_percentage = upload_percentage

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobsIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'JobsIdBody') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, JobsIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'JobsIdBody') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
