# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class Validate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aws': 'V1AwsDataConnection',
        'check_is_public': 'bool',
        'cluster_ids': 'list[str]',
        'efs': 'V1EfsConfig',
        'filestore': 'V1FilestoreDataConnection',
        'gcp': 'V1GcpDataConnection',
        'gcs_folder': 'V1GCSFolderDataConnection',
        'r2': 'V1R2DataConnection',
        's3_folder': 'V1S3FolderDataConnection'
    }

    attribute_map = {
        'aws': 'aws',
        'check_is_public': 'checkIsPublic',
        'cluster_ids': 'clusterIds',
        'efs': 'efs',
        'filestore': 'filestore',
        'gcp': 'gcp',
        'gcs_folder': 'gcsFolder',
        'r2': 'r2',
        's3_folder': 's3Folder'
    }

    def __init__(self, aws: 'V1AwsDataConnection' =None, check_is_public: 'bool' =None, cluster_ids: 'list[str]' =None, efs: 'V1EfsConfig' =None, filestore: 'V1FilestoreDataConnection' =None, gcp: 'V1GcpDataConnection' =None, gcs_folder: 'V1GCSFolderDataConnection' =None, r2: 'V1R2DataConnection' =None, s3_folder: 'V1S3FolderDataConnection' =None):  # noqa: E501
        """Validate - a model defined in Swagger"""  # noqa: E501
        self._aws = None
        self._check_is_public = None
        self._cluster_ids = None
        self._efs = None
        self._filestore = None
        self._gcp = None
        self._gcs_folder = None
        self._r2 = None
        self._s3_folder = None
        self.discriminator = None
        if aws is not None:
            self.aws = aws
        if check_is_public is not None:
            self.check_is_public = check_is_public
        if cluster_ids is not None:
            self.cluster_ids = cluster_ids
        if efs is not None:
            self.efs = efs
        if filestore is not None:
            self.filestore = filestore
        if gcp is not None:
            self.gcp = gcp
        if gcs_folder is not None:
            self.gcs_folder = gcs_folder
        if r2 is not None:
            self.r2 = r2
        if s3_folder is not None:
            self.s3_folder = s3_folder

    @property
    def aws(self) -> 'V1AwsDataConnection':
        """Gets the aws of this Validate.  # noqa: E501


        :return: The aws of this Validate.  # noqa: E501
        :rtype: V1AwsDataConnection
        """
        return self._aws

    @aws.setter
    def aws(self, aws: 'V1AwsDataConnection'):
        """Sets the aws of this Validate.


        :param aws: The aws of this Validate.  # noqa: E501
        :type: V1AwsDataConnection
        """

        self._aws = aws

    @property
    def check_is_public(self) -> 'bool':
        """Gets the check_is_public of this Validate.  # noqa: E501


        :return: The check_is_public of this Validate.  # noqa: E501
        :rtype: bool
        """
        return self._check_is_public

    @check_is_public.setter
    def check_is_public(self, check_is_public: 'bool'):
        """Sets the check_is_public of this Validate.


        :param check_is_public: The check_is_public of this Validate.  # noqa: E501
        :type: bool
        """

        self._check_is_public = check_is_public

    @property
    def cluster_ids(self) -> 'list[str]':
        """Gets the cluster_ids of this Validate.  # noqa: E501


        :return: The cluster_ids of this Validate.  # noqa: E501
        :rtype: list[str]
        """
        return self._cluster_ids

    @cluster_ids.setter
    def cluster_ids(self, cluster_ids: 'list[str]'):
        """Sets the cluster_ids of this Validate.


        :param cluster_ids: The cluster_ids of this Validate.  # noqa: E501
        :type: list[str]
        """

        self._cluster_ids = cluster_ids

    @property
    def efs(self) -> 'V1EfsConfig':
        """Gets the efs of this Validate.  # noqa: E501


        :return: The efs of this Validate.  # noqa: E501
        :rtype: V1EfsConfig
        """
        return self._efs

    @efs.setter
    def efs(self, efs: 'V1EfsConfig'):
        """Sets the efs of this Validate.


        :param efs: The efs of this Validate.  # noqa: E501
        :type: V1EfsConfig
        """

        self._efs = efs

    @property
    def filestore(self) -> 'V1FilestoreDataConnection':
        """Gets the filestore of this Validate.  # noqa: E501


        :return: The filestore of this Validate.  # noqa: E501
        :rtype: V1FilestoreDataConnection
        """
        return self._filestore

    @filestore.setter
    def filestore(self, filestore: 'V1FilestoreDataConnection'):
        """Sets the filestore of this Validate.


        :param filestore: The filestore of this Validate.  # noqa: E501
        :type: V1FilestoreDataConnection
        """

        self._filestore = filestore

    @property
    def gcp(self) -> 'V1GcpDataConnection':
        """Gets the gcp of this Validate.  # noqa: E501


        :return: The gcp of this Validate.  # noqa: E501
        :rtype: V1GcpDataConnection
        """
        return self._gcp

    @gcp.setter
    def gcp(self, gcp: 'V1GcpDataConnection'):
        """Sets the gcp of this Validate.


        :param gcp: The gcp of this Validate.  # noqa: E501
        :type: V1GcpDataConnection
        """

        self._gcp = gcp

    @property
    def gcs_folder(self) -> 'V1GCSFolderDataConnection':
        """Gets the gcs_folder of this Validate.  # noqa: E501


        :return: The gcs_folder of this Validate.  # noqa: E501
        :rtype: V1GCSFolderDataConnection
        """
        return self._gcs_folder

    @gcs_folder.setter
    def gcs_folder(self, gcs_folder: 'V1GCSFolderDataConnection'):
        """Sets the gcs_folder of this Validate.


        :param gcs_folder: The gcs_folder of this Validate.  # noqa: E501
        :type: V1GCSFolderDataConnection
        """

        self._gcs_folder = gcs_folder

    @property
    def r2(self) -> 'V1R2DataConnection':
        """Gets the r2 of this Validate.  # noqa: E501


        :return: The r2 of this Validate.  # noqa: E501
        :rtype: V1R2DataConnection
        """
        return self._r2

    @r2.setter
    def r2(self, r2: 'V1R2DataConnection'):
        """Sets the r2 of this Validate.


        :param r2: The r2 of this Validate.  # noqa: E501
        :type: V1R2DataConnection
        """

        self._r2 = r2

    @property
    def s3_folder(self) -> 'V1S3FolderDataConnection':
        """Gets the s3_folder of this Validate.  # noqa: E501


        :return: The s3_folder of this Validate.  # noqa: E501
        :rtype: V1S3FolderDataConnection
        """
        return self._s3_folder

    @s3_folder.setter
    def s3_folder(self, s3_folder: 'V1S3FolderDataConnection'):
        """Sets the s3_folder of this Validate.


        :param s3_folder: The s3_folder of this Validate.  # noqa: E501
        :type: V1S3FolderDataConnection
        """

        self._s3_folder = s3_folder

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Validate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'Validate') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, Validate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'Validate') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
