# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1ProjectSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_aws_saas': 'bool',
        'allow_credits_auto_replenish': 'bool',
        'allow_dgx_saas': 'bool',
        'allow_external_project_duplication': 'bool',
        'allow_gcp_saas': 'bool',
        'allow_lambda_saas': 'bool',
        'allow_lightning_saas': 'bool',
        'allow_nebius_saas': 'bool',
        'allow_voltage_park_saas': 'bool',
        'allow_vultr_saas': 'bool',
        'auto_replenish_amount': 'float',
        'auto_replenish_threshold': 'float',
        'auto_switch_machine': 'bool',
        'default_machine_image_version': 'str',
        'default_machine_type': 'str',
        'organization_billing_enabled': 'bool',
        'preferred_cluster': 'str',
        'preferred_deployment_provider': 'str',
        'preferred_studio_provider': 'str',
        'same_compute_on_resume': 'bool',
        'start_studio_on_spot_instance': 'bool',
        'switch_to_default_machine_on_idle': 'bool'
    }

    attribute_map = {
        'allow_aws_saas': 'allowAwsSaas',
        'allow_credits_auto_replenish': 'allowCreditsAutoReplenish',
        'allow_dgx_saas': 'allowDgxSaas',
        'allow_external_project_duplication': 'allowExternalProjectDuplication',
        'allow_gcp_saas': 'allowGcpSaas',
        'allow_lambda_saas': 'allowLambdaSaas',
        'allow_lightning_saas': 'allowLightningSaas',
        'allow_nebius_saas': 'allowNebiusSaas',
        'allow_voltage_park_saas': 'allowVoltageParkSaas',
        'allow_vultr_saas': 'allowVultrSaas',
        'auto_replenish_amount': 'autoReplenishAmount',
        'auto_replenish_threshold': 'autoReplenishThreshold',
        'auto_switch_machine': 'autoSwitchMachine',
        'default_machine_image_version': 'defaultMachineImageVersion',
        'default_machine_type': 'defaultMachineType',
        'organization_billing_enabled': 'organizationBillingEnabled',
        'preferred_cluster': 'preferredCluster',
        'preferred_deployment_provider': 'preferredDeploymentProvider',
        'preferred_studio_provider': 'preferredStudioProvider',
        'same_compute_on_resume': 'sameComputeOnResume',
        'start_studio_on_spot_instance': 'startStudioOnSpotInstance',
        'switch_to_default_machine_on_idle': 'switchToDefaultMachineOnIdle'
    }

    def __init__(self, allow_aws_saas: 'bool' =None, allow_credits_auto_replenish: 'bool' =None, allow_dgx_saas: 'bool' =None, allow_external_project_duplication: 'bool' =None, allow_gcp_saas: 'bool' =None, allow_lambda_saas: 'bool' =None, allow_lightning_saas: 'bool' =None, allow_nebius_saas: 'bool' =None, allow_voltage_park_saas: 'bool' =None, allow_vultr_saas: 'bool' =None, auto_replenish_amount: 'float' =None, auto_replenish_threshold: 'float' =None, auto_switch_machine: 'bool' =None, default_machine_image_version: 'str' =None, default_machine_type: 'str' =None, organization_billing_enabled: 'bool' =None, preferred_cluster: 'str' =None, preferred_deployment_provider: 'str' =None, preferred_studio_provider: 'str' =None, same_compute_on_resume: 'bool' =None, start_studio_on_spot_instance: 'bool' =None, switch_to_default_machine_on_idle: 'bool' =None):  # noqa: E501
        """V1ProjectSettings - a model defined in Swagger"""  # noqa: E501
        self._allow_aws_saas = None
        self._allow_credits_auto_replenish = None
        self._allow_dgx_saas = None
        self._allow_external_project_duplication = None
        self._allow_gcp_saas = None
        self._allow_lambda_saas = None
        self._allow_lightning_saas = None
        self._allow_nebius_saas = None
        self._allow_voltage_park_saas = None
        self._allow_vultr_saas = None
        self._auto_replenish_amount = None
        self._auto_replenish_threshold = None
        self._auto_switch_machine = None
        self._default_machine_image_version = None
        self._default_machine_type = None
        self._organization_billing_enabled = None
        self._preferred_cluster = None
        self._preferred_deployment_provider = None
        self._preferred_studio_provider = None
        self._same_compute_on_resume = None
        self._start_studio_on_spot_instance = None
        self._switch_to_default_machine_on_idle = None
        self.discriminator = None
        if allow_aws_saas is not None:
            self.allow_aws_saas = allow_aws_saas
        if allow_credits_auto_replenish is not None:
            self.allow_credits_auto_replenish = allow_credits_auto_replenish
        if allow_dgx_saas is not None:
            self.allow_dgx_saas = allow_dgx_saas
        if allow_external_project_duplication is not None:
            self.allow_external_project_duplication = allow_external_project_duplication
        if allow_gcp_saas is not None:
            self.allow_gcp_saas = allow_gcp_saas
        if allow_lambda_saas is not None:
            self.allow_lambda_saas = allow_lambda_saas
        if allow_lightning_saas is not None:
            self.allow_lightning_saas = allow_lightning_saas
        if allow_nebius_saas is not None:
            self.allow_nebius_saas = allow_nebius_saas
        if allow_voltage_park_saas is not None:
            self.allow_voltage_park_saas = allow_voltage_park_saas
        if allow_vultr_saas is not None:
            self.allow_vultr_saas = allow_vultr_saas
        if auto_replenish_amount is not None:
            self.auto_replenish_amount = auto_replenish_amount
        if auto_replenish_threshold is not None:
            self.auto_replenish_threshold = auto_replenish_threshold
        if auto_switch_machine is not None:
            self.auto_switch_machine = auto_switch_machine
        if default_machine_image_version is not None:
            self.default_machine_image_version = default_machine_image_version
        if default_machine_type is not None:
            self.default_machine_type = default_machine_type
        if organization_billing_enabled is not None:
            self.organization_billing_enabled = organization_billing_enabled
        if preferred_cluster is not None:
            self.preferred_cluster = preferred_cluster
        if preferred_deployment_provider is not None:
            self.preferred_deployment_provider = preferred_deployment_provider
        if preferred_studio_provider is not None:
            self.preferred_studio_provider = preferred_studio_provider
        if same_compute_on_resume is not None:
            self.same_compute_on_resume = same_compute_on_resume
        if start_studio_on_spot_instance is not None:
            self.start_studio_on_spot_instance = start_studio_on_spot_instance
        if switch_to_default_machine_on_idle is not None:
            self.switch_to_default_machine_on_idle = switch_to_default_machine_on_idle

    @property
    def allow_aws_saas(self) -> 'bool':
        """Gets the allow_aws_saas of this V1ProjectSettings.  # noqa: E501


        :return: The allow_aws_saas of this V1ProjectSettings.  # noqa: E501
        :rtype: bool
        """
        return self._allow_aws_saas

    @allow_aws_saas.setter
    def allow_aws_saas(self, allow_aws_saas: 'bool'):
        """Sets the allow_aws_saas of this V1ProjectSettings.


        :param allow_aws_saas: The allow_aws_saas of this V1ProjectSettings.  # noqa: E501
        :type: bool
        """

        self._allow_aws_saas = allow_aws_saas

    @property
    def allow_credits_auto_replenish(self) -> 'bool':
        """Gets the allow_credits_auto_replenish of this V1ProjectSettings.  # noqa: E501


        :return: The allow_credits_auto_replenish of this V1ProjectSettings.  # noqa: E501
        :rtype: bool
        """
        return self._allow_credits_auto_replenish

    @allow_credits_auto_replenish.setter
    def allow_credits_auto_replenish(self, allow_credits_auto_replenish: 'bool'):
        """Sets the allow_credits_auto_replenish of this V1ProjectSettings.


        :param allow_credits_auto_replenish: The allow_credits_auto_replenish of this V1ProjectSettings.  # noqa: E501
        :type: bool
        """

        self._allow_credits_auto_replenish = allow_credits_auto_replenish

    @property
    def allow_dgx_saas(self) -> 'bool':
        """Gets the allow_dgx_saas of this V1ProjectSettings.  # noqa: E501


        :return: The allow_dgx_saas of this V1ProjectSettings.  # noqa: E501
        :rtype: bool
        """
        return self._allow_dgx_saas

    @allow_dgx_saas.setter
    def allow_dgx_saas(self, allow_dgx_saas: 'bool'):
        """Sets the allow_dgx_saas of this V1ProjectSettings.


        :param allow_dgx_saas: The allow_dgx_saas of this V1ProjectSettings.  # noqa: E501
        :type: bool
        """

        self._allow_dgx_saas = allow_dgx_saas

    @property
    def allow_external_project_duplication(self) -> 'bool':
        """Gets the allow_external_project_duplication of this V1ProjectSettings.  # noqa: E501

        Allows teamspace admins to configure whether or not they want members to be able to duplicate studios without admin intervention.  # noqa: E501

        :return: The allow_external_project_duplication of this V1ProjectSettings.  # noqa: E501
        :rtype: bool
        """
        return self._allow_external_project_duplication

    @allow_external_project_duplication.setter
    def allow_external_project_duplication(self, allow_external_project_duplication: 'bool'):
        """Sets the allow_external_project_duplication of this V1ProjectSettings.

        Allows teamspace admins to configure whether or not they want members to be able to duplicate studios without admin intervention.  # noqa: E501

        :param allow_external_project_duplication: The allow_external_project_duplication of this V1ProjectSettings.  # noqa: E501
        :type: bool
        """

        self._allow_external_project_duplication = allow_external_project_duplication

    @property
    def allow_gcp_saas(self) -> 'bool':
        """Gets the allow_gcp_saas of this V1ProjectSettings.  # noqa: E501


        :return: The allow_gcp_saas of this V1ProjectSettings.  # noqa: E501
        :rtype: bool
        """
        return self._allow_gcp_saas

    @allow_gcp_saas.setter
    def allow_gcp_saas(self, allow_gcp_saas: 'bool'):
        """Sets the allow_gcp_saas of this V1ProjectSettings.


        :param allow_gcp_saas: The allow_gcp_saas of this V1ProjectSettings.  # noqa: E501
        :type: bool
        """

        self._allow_gcp_saas = allow_gcp_saas

    @property
    def allow_lambda_saas(self) -> 'bool':
        """Gets the allow_lambda_saas of this V1ProjectSettings.  # noqa: E501


        :return: The allow_lambda_saas of this V1ProjectSettings.  # noqa: E501
        :rtype: bool
        """
        return self._allow_lambda_saas

    @allow_lambda_saas.setter
    def allow_lambda_saas(self, allow_lambda_saas: 'bool'):
        """Sets the allow_lambda_saas of this V1ProjectSettings.


        :param allow_lambda_saas: The allow_lambda_saas of this V1ProjectSettings.  # noqa: E501
        :type: bool
        """

        self._allow_lambda_saas = allow_lambda_saas

    @property
    def allow_lightning_saas(self) -> 'bool':
        """Gets the allow_lightning_saas of this V1ProjectSettings.  # noqa: E501


        :return: The allow_lightning_saas of this V1ProjectSettings.  # noqa: E501
        :rtype: bool
        """
        return self._allow_lightning_saas

    @allow_lightning_saas.setter
    def allow_lightning_saas(self, allow_lightning_saas: 'bool'):
        """Sets the allow_lightning_saas of this V1ProjectSettings.


        :param allow_lightning_saas: The allow_lightning_saas of this V1ProjectSettings.  # noqa: E501
        :type: bool
        """

        self._allow_lightning_saas = allow_lightning_saas

    @property
    def allow_nebius_saas(self) -> 'bool':
        """Gets the allow_nebius_saas of this V1ProjectSettings.  # noqa: E501


        :return: The allow_nebius_saas of this V1ProjectSettings.  # noqa: E501
        :rtype: bool
        """
        return self._allow_nebius_saas

    @allow_nebius_saas.setter
    def allow_nebius_saas(self, allow_nebius_saas: 'bool'):
        """Sets the allow_nebius_saas of this V1ProjectSettings.


        :param allow_nebius_saas: The allow_nebius_saas of this V1ProjectSettings.  # noqa: E501
        :type: bool
        """

        self._allow_nebius_saas = allow_nebius_saas

    @property
    def allow_voltage_park_saas(self) -> 'bool':
        """Gets the allow_voltage_park_saas of this V1ProjectSettings.  # noqa: E501


        :return: The allow_voltage_park_saas of this V1ProjectSettings.  # noqa: E501
        :rtype: bool
        """
        return self._allow_voltage_park_saas

    @allow_voltage_park_saas.setter
    def allow_voltage_park_saas(self, allow_voltage_park_saas: 'bool'):
        """Sets the allow_voltage_park_saas of this V1ProjectSettings.


        :param allow_voltage_park_saas: The allow_voltage_park_saas of this V1ProjectSettings.  # noqa: E501
        :type: bool
        """

        self._allow_voltage_park_saas = allow_voltage_park_saas

    @property
    def allow_vultr_saas(self) -> 'bool':
        """Gets the allow_vultr_saas of this V1ProjectSettings.  # noqa: E501


        :return: The allow_vultr_saas of this V1ProjectSettings.  # noqa: E501
        :rtype: bool
        """
        return self._allow_vultr_saas

    @allow_vultr_saas.setter
    def allow_vultr_saas(self, allow_vultr_saas: 'bool'):
        """Sets the allow_vultr_saas of this V1ProjectSettings.


        :param allow_vultr_saas: The allow_vultr_saas of this V1ProjectSettings.  # noqa: E501
        :type: bool
        """

        self._allow_vultr_saas = allow_vultr_saas

    @property
    def auto_replenish_amount(self) -> 'float':
        """Gets the auto_replenish_amount of this V1ProjectSettings.  # noqa: E501


        :return: The auto_replenish_amount of this V1ProjectSettings.  # noqa: E501
        :rtype: float
        """
        return self._auto_replenish_amount

    @auto_replenish_amount.setter
    def auto_replenish_amount(self, auto_replenish_amount: 'float'):
        """Sets the auto_replenish_amount of this V1ProjectSettings.


        :param auto_replenish_amount: The auto_replenish_amount of this V1ProjectSettings.  # noqa: E501
        :type: float
        """

        self._auto_replenish_amount = auto_replenish_amount

    @property
    def auto_replenish_threshold(self) -> 'float':
        """Gets the auto_replenish_threshold of this V1ProjectSettings.  # noqa: E501


        :return: The auto_replenish_threshold of this V1ProjectSettings.  # noqa: E501
        :rtype: float
        """
        return self._auto_replenish_threshold

    @auto_replenish_threshold.setter
    def auto_replenish_threshold(self, auto_replenish_threshold: 'float'):
        """Sets the auto_replenish_threshold of this V1ProjectSettings.


        :param auto_replenish_threshold: The auto_replenish_threshold of this V1ProjectSettings.  # noqa: E501
        :type: float
        """

        self._auto_replenish_threshold = auto_replenish_threshold

    @property
    def auto_switch_machine(self) -> 'bool':
        """Gets the auto_switch_machine of this V1ProjectSettings.  # noqa: E501


        :return: The auto_switch_machine of this V1ProjectSettings.  # noqa: E501
        :rtype: bool
        """
        return self._auto_switch_machine

    @auto_switch_machine.setter
    def auto_switch_machine(self, auto_switch_machine: 'bool'):
        """Sets the auto_switch_machine of this V1ProjectSettings.


        :param auto_switch_machine: The auto_switch_machine of this V1ProjectSettings.  # noqa: E501
        :type: bool
        """

        self._auto_switch_machine = auto_switch_machine

    @property
    def default_machine_image_version(self) -> 'str':
        """Gets the default_machine_image_version of this V1ProjectSettings.  # noqa: E501


        :return: The default_machine_image_version of this V1ProjectSettings.  # noqa: E501
        :rtype: str
        """
        return self._default_machine_image_version

    @default_machine_image_version.setter
    def default_machine_image_version(self, default_machine_image_version: 'str'):
        """Sets the default_machine_image_version of this V1ProjectSettings.


        :param default_machine_image_version: The default_machine_image_version of this V1ProjectSettings.  # noqa: E501
        :type: str
        """

        self._default_machine_image_version = default_machine_image_version

    @property
    def default_machine_type(self) -> 'str':
        """Gets the default_machine_type of this V1ProjectSettings.  # noqa: E501


        :return: The default_machine_type of this V1ProjectSettings.  # noqa: E501
        :rtype: str
        """
        return self._default_machine_type

    @default_machine_type.setter
    def default_machine_type(self, default_machine_type: 'str'):
        """Sets the default_machine_type of this V1ProjectSettings.


        :param default_machine_type: The default_machine_type of this V1ProjectSettings.  # noqa: E501
        :type: str
        """

        self._default_machine_type = default_machine_type

    @property
    def organization_billing_enabled(self) -> 'bool':
        """Gets the organization_billing_enabled of this V1ProjectSettings.  # noqa: E501


        :return: The organization_billing_enabled of this V1ProjectSettings.  # noqa: E501
        :rtype: bool
        """
        return self._organization_billing_enabled

    @organization_billing_enabled.setter
    def organization_billing_enabled(self, organization_billing_enabled: 'bool'):
        """Sets the organization_billing_enabled of this V1ProjectSettings.


        :param organization_billing_enabled: The organization_billing_enabled of this V1ProjectSettings.  # noqa: E501
        :type: bool
        """

        self._organization_billing_enabled = organization_billing_enabled

    @property
    def preferred_cluster(self) -> 'str':
        """Gets the preferred_cluster of this V1ProjectSettings.  # noqa: E501


        :return: The preferred_cluster of this V1ProjectSettings.  # noqa: E501
        :rtype: str
        """
        return self._preferred_cluster

    @preferred_cluster.setter
    def preferred_cluster(self, preferred_cluster: 'str'):
        """Sets the preferred_cluster of this V1ProjectSettings.


        :param preferred_cluster: The preferred_cluster of this V1ProjectSettings.  # noqa: E501
        :type: str
        """

        self._preferred_cluster = preferred_cluster

    @property
    def preferred_deployment_provider(self) -> 'str':
        """Gets the preferred_deployment_provider of this V1ProjectSettings.  # noqa: E501


        :return: The preferred_deployment_provider of this V1ProjectSettings.  # noqa: E501
        :rtype: str
        """
        return self._preferred_deployment_provider

    @preferred_deployment_provider.setter
    def preferred_deployment_provider(self, preferred_deployment_provider: 'str'):
        """Sets the preferred_deployment_provider of this V1ProjectSettings.


        :param preferred_deployment_provider: The preferred_deployment_provider of this V1ProjectSettings.  # noqa: E501
        :type: str
        """

        self._preferred_deployment_provider = preferred_deployment_provider

    @property
    def preferred_studio_provider(self) -> 'str':
        """Gets the preferred_studio_provider of this V1ProjectSettings.  # noqa: E501


        :return: The preferred_studio_provider of this V1ProjectSettings.  # noqa: E501
        :rtype: str
        """
        return self._preferred_studio_provider

    @preferred_studio_provider.setter
    def preferred_studio_provider(self, preferred_studio_provider: 'str'):
        """Sets the preferred_studio_provider of this V1ProjectSettings.


        :param preferred_studio_provider: The preferred_studio_provider of this V1ProjectSettings.  # noqa: E501
        :type: str
        """

        self._preferred_studio_provider = preferred_studio_provider

    @property
    def same_compute_on_resume(self) -> 'bool':
        """Gets the same_compute_on_resume of this V1ProjectSettings.  # noqa: E501


        :return: The same_compute_on_resume of this V1ProjectSettings.  # noqa: E501
        :rtype: bool
        """
        return self._same_compute_on_resume

    @same_compute_on_resume.setter
    def same_compute_on_resume(self, same_compute_on_resume: 'bool'):
        """Sets the same_compute_on_resume of this V1ProjectSettings.


        :param same_compute_on_resume: The same_compute_on_resume of this V1ProjectSettings.  # noqa: E501
        :type: bool
        """

        self._same_compute_on_resume = same_compute_on_resume

    @property
    def start_studio_on_spot_instance(self) -> 'bool':
        """Gets the start_studio_on_spot_instance of this V1ProjectSettings.  # noqa: E501


        :return: The start_studio_on_spot_instance of this V1ProjectSettings.  # noqa: E501
        :rtype: bool
        """
        return self._start_studio_on_spot_instance

    @start_studio_on_spot_instance.setter
    def start_studio_on_spot_instance(self, start_studio_on_spot_instance: 'bool'):
        """Sets the start_studio_on_spot_instance of this V1ProjectSettings.


        :param start_studio_on_spot_instance: The start_studio_on_spot_instance of this V1ProjectSettings.  # noqa: E501
        :type: bool
        """

        self._start_studio_on_spot_instance = start_studio_on_spot_instance

    @property
    def switch_to_default_machine_on_idle(self) -> 'bool':
        """Gets the switch_to_default_machine_on_idle of this V1ProjectSettings.  # noqa: E501


        :return: The switch_to_default_machine_on_idle of this V1ProjectSettings.  # noqa: E501
        :rtype: bool
        """
        return self._switch_to_default_machine_on_idle

    @switch_to_default_machine_on_idle.setter
    def switch_to_default_machine_on_idle(self, switch_to_default_machine_on_idle: 'bool'):
        """Sets the switch_to_default_machine_on_idle of this V1ProjectSettings.


        :param switch_to_default_machine_on_idle: The switch_to_default_machine_on_idle of this V1ProjectSettings.  # noqa: E501
        :type: bool
        """

        self._switch_to_default_machine_on_idle = switch_to_default_machine_on_idle

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1ProjectSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1ProjectSettings') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ProjectSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1ProjectSettings') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
