# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class ProjectIdMultimachinejobsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_id': 'str',
        'fault_tolerance': 'V1MultiMachineJobFaultTolerance',
        'machines': 'int',
        'name': 'str',
        'spec': 'V1JobSpec'
    }

    attribute_map = {
        'cluster_id': 'clusterId',
        'fault_tolerance': 'faultTolerance',
        'machines': 'machines',
        'name': 'name',
        'spec': 'spec'
    }

    def __init__(self, cluster_id: 'str' =None, fault_tolerance: 'V1MultiMachineJobFaultTolerance' =None, machines: 'int' =None, name: 'str' =None, spec: 'V1JobSpec' =None):  # noqa: E501
        """ProjectIdMultimachinejobsBody - a model defined in Swagger"""  # noqa: E501
        self._cluster_id = None
        self._fault_tolerance = None
        self._machines = None
        self._name = None
        self._spec = None
        self.discriminator = None
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if fault_tolerance is not None:
            self.fault_tolerance = fault_tolerance
        if machines is not None:
            self.machines = machines
        if name is not None:
            self.name = name
        if spec is not None:
            self.spec = spec

    @property
    def cluster_id(self) -> 'str':
        """Gets the cluster_id of this ProjectIdMultimachinejobsBody.  # noqa: E501


        :return: The cluster_id of this ProjectIdMultimachinejobsBody.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id: 'str'):
        """Sets the cluster_id of this ProjectIdMultimachinejobsBody.


        :param cluster_id: The cluster_id of this ProjectIdMultimachinejobsBody.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def fault_tolerance(self) -> 'V1MultiMachineJobFaultTolerance':
        """Gets the fault_tolerance of this ProjectIdMultimachinejobsBody.  # noqa: E501


        :return: The fault_tolerance of this ProjectIdMultimachinejobsBody.  # noqa: E501
        :rtype: V1MultiMachineJobFaultTolerance
        """
        return self._fault_tolerance

    @fault_tolerance.setter
    def fault_tolerance(self, fault_tolerance: 'V1MultiMachineJobFaultTolerance'):
        """Sets the fault_tolerance of this ProjectIdMultimachinejobsBody.


        :param fault_tolerance: The fault_tolerance of this ProjectIdMultimachinejobsBody.  # noqa: E501
        :type: V1MultiMachineJobFaultTolerance
        """

        self._fault_tolerance = fault_tolerance

    @property
    def machines(self) -> 'int':
        """Gets the machines of this ProjectIdMultimachinejobsBody.  # noqa: E501


        :return: The machines of this ProjectIdMultimachinejobsBody.  # noqa: E501
        :rtype: int
        """
        return self._machines

    @machines.setter
    def machines(self, machines: 'int'):
        """Sets the machines of this ProjectIdMultimachinejobsBody.


        :param machines: The machines of this ProjectIdMultimachinejobsBody.  # noqa: E501
        :type: int
        """

        self._machines = machines

    @property
    def name(self) -> 'str':
        """Gets the name of this ProjectIdMultimachinejobsBody.  # noqa: E501


        :return: The name of this ProjectIdMultimachinejobsBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this ProjectIdMultimachinejobsBody.


        :param name: The name of this ProjectIdMultimachinejobsBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def spec(self) -> 'V1JobSpec':
        """Gets the spec of this ProjectIdMultimachinejobsBody.  # noqa: E501


        :return: The spec of this ProjectIdMultimachinejobsBody.  # noqa: E501
        :rtype: V1JobSpec
        """
        return self._spec

    @spec.setter
    def spec(self, spec: 'V1JobSpec'):
        """Sets the spec of this ProjectIdMultimachinejobsBody.


        :param spec: The spec of this ProjectIdMultimachinejobsBody.  # noqa: E501
        :type: V1JobSpec
        """

        self._spec = spec

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectIdMultimachinejobsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'ProjectIdMultimachinejobsBody') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectIdMultimachinejobsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'ProjectIdMultimachinejobsBody') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
