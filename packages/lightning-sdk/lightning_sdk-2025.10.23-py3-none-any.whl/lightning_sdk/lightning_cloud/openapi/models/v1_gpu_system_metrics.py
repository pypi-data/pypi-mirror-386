# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1GPUSystemMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'memory_total': 'int',
        'memory_used': 'int',
        'power_draw': 'int',
        'temperature': 'int',
        'utilisation': 'int',
        'utilisation_memory': 'int'
    }

    attribute_map = {
        'memory_total': 'memoryTotal',
        'memory_used': 'memoryUsed',
        'power_draw': 'powerDraw',
        'temperature': 'temperature',
        'utilisation': 'utilisation',
        'utilisation_memory': 'utilisationMemory'
    }

    def __init__(self, memory_total: 'int' =None, memory_used: 'int' =None, power_draw: 'int' =None, temperature: 'int' =None, utilisation: 'int' =None, utilisation_memory: 'int' =None):  # noqa: E501
        """V1GPUSystemMetrics - a model defined in Swagger"""  # noqa: E501
        self._memory_total = None
        self._memory_used = None
        self._power_draw = None
        self._temperature = None
        self._utilisation = None
        self._utilisation_memory = None
        self.discriminator = None
        if memory_total is not None:
            self.memory_total = memory_total
        if memory_used is not None:
            self.memory_used = memory_used
        if power_draw is not None:
            self.power_draw = power_draw
        if temperature is not None:
            self.temperature = temperature
        if utilisation is not None:
            self.utilisation = utilisation
        if utilisation_memory is not None:
            self.utilisation_memory = utilisation_memory

    @property
    def memory_total(self) -> 'int':
        """Gets the memory_total of this V1GPUSystemMetrics.  # noqa: E501


        :return: The memory_total of this V1GPUSystemMetrics.  # noqa: E501
        :rtype: int
        """
        return self._memory_total

    @memory_total.setter
    def memory_total(self, memory_total: 'int'):
        """Sets the memory_total of this V1GPUSystemMetrics.


        :param memory_total: The memory_total of this V1GPUSystemMetrics.  # noqa: E501
        :type: int
        """

        self._memory_total = memory_total

    @property
    def memory_used(self) -> 'int':
        """Gets the memory_used of this V1GPUSystemMetrics.  # noqa: E501


        :return: The memory_used of this V1GPUSystemMetrics.  # noqa: E501
        :rtype: int
        """
        return self._memory_used

    @memory_used.setter
    def memory_used(self, memory_used: 'int'):
        """Sets the memory_used of this V1GPUSystemMetrics.


        :param memory_used: The memory_used of this V1GPUSystemMetrics.  # noqa: E501
        :type: int
        """

        self._memory_used = memory_used

    @property
    def power_draw(self) -> 'int':
        """Gets the power_draw of this V1GPUSystemMetrics.  # noqa: E501


        :return: The power_draw of this V1GPUSystemMetrics.  # noqa: E501
        :rtype: int
        """
        return self._power_draw

    @power_draw.setter
    def power_draw(self, power_draw: 'int'):
        """Sets the power_draw of this V1GPUSystemMetrics.


        :param power_draw: The power_draw of this V1GPUSystemMetrics.  # noqa: E501
        :type: int
        """

        self._power_draw = power_draw

    @property
    def temperature(self) -> 'int':
        """Gets the temperature of this V1GPUSystemMetrics.  # noqa: E501


        :return: The temperature of this V1GPUSystemMetrics.  # noqa: E501
        :rtype: int
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature: 'int'):
        """Sets the temperature of this V1GPUSystemMetrics.


        :param temperature: The temperature of this V1GPUSystemMetrics.  # noqa: E501
        :type: int
        """

        self._temperature = temperature

    @property
    def utilisation(self) -> 'int':
        """Gets the utilisation of this V1GPUSystemMetrics.  # noqa: E501


        :return: The utilisation of this V1GPUSystemMetrics.  # noqa: E501
        :rtype: int
        """
        return self._utilisation

    @utilisation.setter
    def utilisation(self, utilisation: 'int'):
        """Sets the utilisation of this V1GPUSystemMetrics.


        :param utilisation: The utilisation of this V1GPUSystemMetrics.  # noqa: E501
        :type: int
        """

        self._utilisation = utilisation

    @property
    def utilisation_memory(self) -> 'int':
        """Gets the utilisation_memory of this V1GPUSystemMetrics.  # noqa: E501


        :return: The utilisation_memory of this V1GPUSystemMetrics.  # noqa: E501
        :rtype: int
        """
        return self._utilisation_memory

    @utilisation_memory.setter
    def utilisation_memory(self, utilisation_memory: 'int'):
        """Sets the utilisation_memory of this V1GPUSystemMetrics.


        :param utilisation_memory: The utilisation_memory of this V1GPUSystemMetrics.  # noqa: E501
        :type: int
        """

        self._utilisation_memory = utilisation_memory

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1GPUSystemMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1GPUSystemMetrics') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1GPUSystemMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1GPUSystemMetrics') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
