# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class IdExecuteBody1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'command': 'str',
        'detached': 'bool',
        'session_name': 'str'
    }

    attribute_map = {
        'command': 'command',
        'detached': 'detached',
        'session_name': 'sessionName'
    }

    def __init__(self, command: 'str' =None, detached: 'bool' =None, session_name: 'str' =None):  # noqa: E501
        """IdExecuteBody1 - a model defined in Swagger"""  # noqa: E501
        self._command = None
        self._detached = None
        self._session_name = None
        self.discriminator = None
        if command is not None:
            self.command = command
        if detached is not None:
            self.detached = detached
        if session_name is not None:
            self.session_name = session_name

    @property
    def command(self) -> 'str':
        """Gets the command of this IdExecuteBody1.  # noqa: E501


        :return: The command of this IdExecuteBody1.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command: 'str'):
        """Sets the command of this IdExecuteBody1.


        :param command: The command of this IdExecuteBody1.  # noqa: E501
        :type: str
        """

        self._command = command

    @property
    def detached(self) -> 'bool':
        """Gets the detached of this IdExecuteBody1.  # noqa: E501


        :return: The detached of this IdExecuteBody1.  # noqa: E501
        :rtype: bool
        """
        return self._detached

    @detached.setter
    def detached(self, detached: 'bool'):
        """Sets the detached of this IdExecuteBody1.


        :param detached: The detached of this IdExecuteBody1.  # noqa: E501
        :type: bool
        """

        self._detached = detached

    @property
    def session_name(self) -> 'str':
        """Gets the session_name of this IdExecuteBody1.  # noqa: E501


        :return: The session_name of this IdExecuteBody1.  # noqa: E501
        :rtype: str
        """
        return self._session_name

    @session_name.setter
    def session_name(self, session_name: 'str'):
        """Sets the session_name of this IdExecuteBody1.


        :param session_name: The session_name of this IdExecuteBody1.  # noqa: E501
        :type: str
        """

        self._session_name = session_name

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IdExecuteBody1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'IdExecuteBody1') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, IdExecuteBody1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'IdExecuteBody1') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
