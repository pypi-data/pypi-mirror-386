# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1ProfilerCapture(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cloudspace_id': 'str',
        'created_at': 'datetime',
        'display_name': 'str',
        'id': 'str',
        'name': 'str',
        'number_of_processes': 'int',
        'project_id': 'str',
        'status': 'str',
        'updated_at': 'datetime',
        'user_id': 'str'
    }

    attribute_map = {
        'cloudspace_id': 'cloudspaceId',
        'created_at': 'createdAt',
        'display_name': 'displayName',
        'id': 'id',
        'name': 'name',
        'number_of_processes': 'numberOfProcesses',
        'project_id': 'projectId',
        'status': 'status',
        'updated_at': 'updatedAt',
        'user_id': 'userId'
    }

    def __init__(self, cloudspace_id: 'str' =None, created_at: 'datetime' =None, display_name: 'str' =None, id: 'str' =None, name: 'str' =None, number_of_processes: 'int' =None, project_id: 'str' =None, status: 'str' =None, updated_at: 'datetime' =None, user_id: 'str' =None):  # noqa: E501
        """V1ProfilerCapture - a model defined in Swagger"""  # noqa: E501
        self._cloudspace_id = None
        self._created_at = None
        self._display_name = None
        self._id = None
        self._name = None
        self._number_of_processes = None
        self._project_id = None
        self._status = None
        self._updated_at = None
        self._user_id = None
        self.discriminator = None
        if cloudspace_id is not None:
            self.cloudspace_id = cloudspace_id
        if created_at is not None:
            self.created_at = created_at
        if display_name is not None:
            self.display_name = display_name
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if number_of_processes is not None:
            self.number_of_processes = number_of_processes
        if project_id is not None:
            self.project_id = project_id
        if status is not None:
            self.status = status
        if updated_at is not None:
            self.updated_at = updated_at
        if user_id is not None:
            self.user_id = user_id

    @property
    def cloudspace_id(self) -> 'str':
        """Gets the cloudspace_id of this V1ProfilerCapture.  # noqa: E501


        :return: The cloudspace_id of this V1ProfilerCapture.  # noqa: E501
        :rtype: str
        """
        return self._cloudspace_id

    @cloudspace_id.setter
    def cloudspace_id(self, cloudspace_id: 'str'):
        """Sets the cloudspace_id of this V1ProfilerCapture.


        :param cloudspace_id: The cloudspace_id of this V1ProfilerCapture.  # noqa: E501
        :type: str
        """

        self._cloudspace_id = cloudspace_id

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this V1ProfilerCapture.  # noqa: E501


        :return: The created_at of this V1ProfilerCapture.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this V1ProfilerCapture.


        :param created_at: The created_at of this V1ProfilerCapture.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def display_name(self) -> 'str':
        """Gets the display_name of this V1ProfilerCapture.  # noqa: E501


        :return: The display_name of this V1ProfilerCapture.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: 'str'):
        """Sets the display_name of this V1ProfilerCapture.


        :param display_name: The display_name of this V1ProfilerCapture.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def id(self) -> 'str':
        """Gets the id of this V1ProfilerCapture.  # noqa: E501


        :return: The id of this V1ProfilerCapture.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1ProfilerCapture.


        :param id: The id of this V1ProfilerCapture.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self) -> 'str':
        """Gets the name of this V1ProfilerCapture.  # noqa: E501


        :return: The name of this V1ProfilerCapture.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1ProfilerCapture.


        :param name: The name of this V1ProfilerCapture.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def number_of_processes(self) -> 'int':
        """Gets the number_of_processes of this V1ProfilerCapture.  # noqa: E501


        :return: The number_of_processes of this V1ProfilerCapture.  # noqa: E501
        :rtype: int
        """
        return self._number_of_processes

    @number_of_processes.setter
    def number_of_processes(self, number_of_processes: 'int'):
        """Sets the number_of_processes of this V1ProfilerCapture.


        :param number_of_processes: The number_of_processes of this V1ProfilerCapture.  # noqa: E501
        :type: int
        """

        self._number_of_processes = number_of_processes

    @property
    def project_id(self) -> 'str':
        """Gets the project_id of this V1ProfilerCapture.  # noqa: E501


        :return: The project_id of this V1ProfilerCapture.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: 'str'):
        """Sets the project_id of this V1ProfilerCapture.


        :param project_id: The project_id of this V1ProfilerCapture.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def status(self) -> 'str':
        """Gets the status of this V1ProfilerCapture.  # noqa: E501


        :return: The status of this V1ProfilerCapture.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: 'str'):
        """Sets the status of this V1ProfilerCapture.


        :param status: The status of this V1ProfilerCapture.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def updated_at(self) -> 'datetime':
        """Gets the updated_at of this V1ProfilerCapture.  # noqa: E501


        :return: The updated_at of this V1ProfilerCapture.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: 'datetime'):
        """Sets the updated_at of this V1ProfilerCapture.


        :param updated_at: The updated_at of this V1ProfilerCapture.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def user_id(self) -> 'str':
        """Gets the user_id of this V1ProfilerCapture.  # noqa: E501


        :return: The user_id of this V1ProfilerCapture.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: 'str'):
        """Sets the user_id of this V1ProfilerCapture.


        :param user_id: The user_id of this V1ProfilerCapture.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1ProfilerCapture, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1ProfilerCapture') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ProfilerCapture):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1ProfilerCapture') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
