# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1Job(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'deleted_at': 'datetime',
        'deployment_id': 'str',
        'endpoint': 'V1Endpoint',
        'id': 'str',
        'interruption_notice_received': 'bool',
        'interruption_notice_received_at': 'datetime',
        'is_healthy': 'bool',
        'message': 'str',
        'multi_machine_job_id': 'str',
        'name': 'str',
        'overprovisioned': 'bool',
        'pipeline_id': 'str',
        'private_ip_address': 'str',
        'project_id': 'str',
        'public_ip_address': 'str',
        'ready_at': 'datetime',
        'release_id': 'str',
        'restart_count': 'int',
        'restart_timings': 'list[V1RestartTiming]',
        'server_error': 'str',
        'spec': 'V1JobSpec',
        'started_at': 'datetime',
        'state': 'str',
        'stopped_at': 'datetime',
        'timings': 'dict(str, V1JobTiming)',
        'total_cost': 'float',
        'total_size_bytes': 'str',
        'updated_at': 'datetime',
        'urls': 'list[str]',
        'user_id': 'str',
        'user_logs_started_at': 'datetime',
        'visibility': 'V1ResourceVisibility'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'deleted_at': 'deletedAt',
        'deployment_id': 'deploymentId',
        'endpoint': 'endpoint',
        'id': 'id',
        'interruption_notice_received': 'interruptionNoticeReceived',
        'interruption_notice_received_at': 'interruptionNoticeReceivedAt',
        'is_healthy': 'isHealthy',
        'message': 'message',
        'multi_machine_job_id': 'multiMachineJobId',
        'name': 'name',
        'overprovisioned': 'overprovisioned',
        'pipeline_id': 'pipelineId',
        'private_ip_address': 'privateIpAddress',
        'project_id': 'projectId',
        'public_ip_address': 'publicIpAddress',
        'ready_at': 'readyAt',
        'release_id': 'releaseId',
        'restart_count': 'restartCount',
        'restart_timings': 'restartTimings',
        'server_error': 'serverError',
        'spec': 'spec',
        'started_at': 'startedAt',
        'state': 'state',
        'stopped_at': 'stoppedAt',
        'timings': 'timings',
        'total_cost': 'totalCost',
        'total_size_bytes': 'totalSizeBytes',
        'updated_at': 'updatedAt',
        'urls': 'urls',
        'user_id': 'userId',
        'user_logs_started_at': 'userLogsStartedAt',
        'visibility': 'visibility'
    }

    def __init__(self, created_at: 'datetime' =None, deleted_at: 'datetime' =None, deployment_id: 'str' =None, endpoint: 'V1Endpoint' =None, id: 'str' =None, interruption_notice_received: 'bool' =None, interruption_notice_received_at: 'datetime' =None, is_healthy: 'bool' =None, message: 'str' =None, multi_machine_job_id: 'str' =None, name: 'str' =None, overprovisioned: 'bool' =None, pipeline_id: 'str' =None, private_ip_address: 'str' =None, project_id: 'str' =None, public_ip_address: 'str' =None, ready_at: 'datetime' =None, release_id: 'str' =None, restart_count: 'int' =None, restart_timings: 'list[V1RestartTiming]' =None, server_error: 'str' =None, spec: 'V1JobSpec' =None, started_at: 'datetime' =None, state: 'str' =None, stopped_at: 'datetime' =None, timings: 'dict(str, V1JobTiming)' =None, total_cost: 'float' =None, total_size_bytes: 'str' =None, updated_at: 'datetime' =None, urls: 'list[str]' =None, user_id: 'str' =None, user_logs_started_at: 'datetime' =None, visibility: 'V1ResourceVisibility' =None):  # noqa: E501
        """V1Job - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._deleted_at = None
        self._deployment_id = None
        self._endpoint = None
        self._id = None
        self._interruption_notice_received = None
        self._interruption_notice_received_at = None
        self._is_healthy = None
        self._message = None
        self._multi_machine_job_id = None
        self._name = None
        self._overprovisioned = None
        self._pipeline_id = None
        self._private_ip_address = None
        self._project_id = None
        self._public_ip_address = None
        self._ready_at = None
        self._release_id = None
        self._restart_count = None
        self._restart_timings = None
        self._server_error = None
        self._spec = None
        self._started_at = None
        self._state = None
        self._stopped_at = None
        self._timings = None
        self._total_cost = None
        self._total_size_bytes = None
        self._updated_at = None
        self._urls = None
        self._user_id = None
        self._user_logs_started_at = None
        self._visibility = None
        self.discriminator = None
        if created_at is not None:
            self.created_at = created_at
        if deleted_at is not None:
            self.deleted_at = deleted_at
        if deployment_id is not None:
            self.deployment_id = deployment_id
        if endpoint is not None:
            self.endpoint = endpoint
        if id is not None:
            self.id = id
        if interruption_notice_received is not None:
            self.interruption_notice_received = interruption_notice_received
        if interruption_notice_received_at is not None:
            self.interruption_notice_received_at = interruption_notice_received_at
        if is_healthy is not None:
            self.is_healthy = is_healthy
        if message is not None:
            self.message = message
        if multi_machine_job_id is not None:
            self.multi_machine_job_id = multi_machine_job_id
        if name is not None:
            self.name = name
        if overprovisioned is not None:
            self.overprovisioned = overprovisioned
        if pipeline_id is not None:
            self.pipeline_id = pipeline_id
        if private_ip_address is not None:
            self.private_ip_address = private_ip_address
        if project_id is not None:
            self.project_id = project_id
        if public_ip_address is not None:
            self.public_ip_address = public_ip_address
        if ready_at is not None:
            self.ready_at = ready_at
        if release_id is not None:
            self.release_id = release_id
        if restart_count is not None:
            self.restart_count = restart_count
        if restart_timings is not None:
            self.restart_timings = restart_timings
        if server_error is not None:
            self.server_error = server_error
        if spec is not None:
            self.spec = spec
        if started_at is not None:
            self.started_at = started_at
        if state is not None:
            self.state = state
        if stopped_at is not None:
            self.stopped_at = stopped_at
        if timings is not None:
            self.timings = timings
        if total_cost is not None:
            self.total_cost = total_cost
        if total_size_bytes is not None:
            self.total_size_bytes = total_size_bytes
        if updated_at is not None:
            self.updated_at = updated_at
        if urls is not None:
            self.urls = urls
        if user_id is not None:
            self.user_id = user_id
        if user_logs_started_at is not None:
            self.user_logs_started_at = user_logs_started_at
        if visibility is not None:
            self.visibility = visibility

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this V1Job.  # noqa: E501


        :return: The created_at of this V1Job.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this V1Job.


        :param created_at: The created_at of this V1Job.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def deleted_at(self) -> 'datetime':
        """Gets the deleted_at of this V1Job.  # noqa: E501


        :return: The deleted_at of this V1Job.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at: 'datetime'):
        """Sets the deleted_at of this V1Job.


        :param deleted_at: The deleted_at of this V1Job.  # noqa: E501
        :type: datetime
        """

        self._deleted_at = deleted_at

    @property
    def deployment_id(self) -> 'str':
        """Gets the deployment_id of this V1Job.  # noqa: E501


        :return: The deployment_id of this V1Job.  # noqa: E501
        :rtype: str
        """
        return self._deployment_id

    @deployment_id.setter
    def deployment_id(self, deployment_id: 'str'):
        """Sets the deployment_id of this V1Job.


        :param deployment_id: The deployment_id of this V1Job.  # noqa: E501
        :type: str
        """

        self._deployment_id = deployment_id

    @property
    def endpoint(self) -> 'V1Endpoint':
        """Gets the endpoint of this V1Job.  # noqa: E501


        :return: The endpoint of this V1Job.  # noqa: E501
        :rtype: V1Endpoint
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint: 'V1Endpoint'):
        """Sets the endpoint of this V1Job.


        :param endpoint: The endpoint of this V1Job.  # noqa: E501
        :type: V1Endpoint
        """

        self._endpoint = endpoint

    @property
    def id(self) -> 'str':
        """Gets the id of this V1Job.  # noqa: E501


        :return: The id of this V1Job.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1Job.


        :param id: The id of this V1Job.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def interruption_notice_received(self) -> 'bool':
        """Gets the interruption_notice_received of this V1Job.  # noqa: E501


        :return: The interruption_notice_received of this V1Job.  # noqa: E501
        :rtype: bool
        """
        return self._interruption_notice_received

    @interruption_notice_received.setter
    def interruption_notice_received(self, interruption_notice_received: 'bool'):
        """Sets the interruption_notice_received of this V1Job.


        :param interruption_notice_received: The interruption_notice_received of this V1Job.  # noqa: E501
        :type: bool
        """

        self._interruption_notice_received = interruption_notice_received

    @property
    def interruption_notice_received_at(self) -> 'datetime':
        """Gets the interruption_notice_received_at of this V1Job.  # noqa: E501


        :return: The interruption_notice_received_at of this V1Job.  # noqa: E501
        :rtype: datetime
        """
        return self._interruption_notice_received_at

    @interruption_notice_received_at.setter
    def interruption_notice_received_at(self, interruption_notice_received_at: 'datetime'):
        """Sets the interruption_notice_received_at of this V1Job.


        :param interruption_notice_received_at: The interruption_notice_received_at of this V1Job.  # noqa: E501
        :type: datetime
        """

        self._interruption_notice_received_at = interruption_notice_received_at

    @property
    def is_healthy(self) -> 'bool':
        """Gets the is_healthy of this V1Job.  # noqa: E501


        :return: The is_healthy of this V1Job.  # noqa: E501
        :rtype: bool
        """
        return self._is_healthy

    @is_healthy.setter
    def is_healthy(self, is_healthy: 'bool'):
        """Sets the is_healthy of this V1Job.


        :param is_healthy: The is_healthy of this V1Job.  # noqa: E501
        :type: bool
        """

        self._is_healthy = is_healthy

    @property
    def message(self) -> 'str':
        """Gets the message of this V1Job.  # noqa: E501


        :return: The message of this V1Job.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: 'str'):
        """Sets the message of this V1Job.


        :param message: The message of this V1Job.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def multi_machine_job_id(self) -> 'str':
        """Gets the multi_machine_job_id of this V1Job.  # noqa: E501


        :return: The multi_machine_job_id of this V1Job.  # noqa: E501
        :rtype: str
        """
        return self._multi_machine_job_id

    @multi_machine_job_id.setter
    def multi_machine_job_id(self, multi_machine_job_id: 'str'):
        """Sets the multi_machine_job_id of this V1Job.


        :param multi_machine_job_id: The multi_machine_job_id of this V1Job.  # noqa: E501
        :type: str
        """

        self._multi_machine_job_id = multi_machine_job_id

    @property
    def name(self) -> 'str':
        """Gets the name of this V1Job.  # noqa: E501


        :return: The name of this V1Job.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1Job.


        :param name: The name of this V1Job.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def overprovisioned(self) -> 'bool':
        """Gets the overprovisioned of this V1Job.  # noqa: E501

        Whether the job started from an overprovisioned machine.  # noqa: E501

        :return: The overprovisioned of this V1Job.  # noqa: E501
        :rtype: bool
        """
        return self._overprovisioned

    @overprovisioned.setter
    def overprovisioned(self, overprovisioned: 'bool'):
        """Sets the overprovisioned of this V1Job.

        Whether the job started from an overprovisioned machine.  # noqa: E501

        :param overprovisioned: The overprovisioned of this V1Job.  # noqa: E501
        :type: bool
        """

        self._overprovisioned = overprovisioned

    @property
    def pipeline_id(self) -> 'str':
        """Gets the pipeline_id of this V1Job.  # noqa: E501


        :return: The pipeline_id of this V1Job.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id: 'str'):
        """Sets the pipeline_id of this V1Job.


        :param pipeline_id: The pipeline_id of this V1Job.  # noqa: E501
        :type: str
        """

        self._pipeline_id = pipeline_id

    @property
    def private_ip_address(self) -> 'str':
        """Gets the private_ip_address of this V1Job.  # noqa: E501


        :return: The private_ip_address of this V1Job.  # noqa: E501
        :rtype: str
        """
        return self._private_ip_address

    @private_ip_address.setter
    def private_ip_address(self, private_ip_address: 'str'):
        """Sets the private_ip_address of this V1Job.


        :param private_ip_address: The private_ip_address of this V1Job.  # noqa: E501
        :type: str
        """

        self._private_ip_address = private_ip_address

    @property
    def project_id(self) -> 'str':
        """Gets the project_id of this V1Job.  # noqa: E501


        :return: The project_id of this V1Job.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: 'str'):
        """Sets the project_id of this V1Job.


        :param project_id: The project_id of this V1Job.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def public_ip_address(self) -> 'str':
        """Gets the public_ip_address of this V1Job.  # noqa: E501


        :return: The public_ip_address of this V1Job.  # noqa: E501
        :rtype: str
        """
        return self._public_ip_address

    @public_ip_address.setter
    def public_ip_address(self, public_ip_address: 'str'):
        """Sets the public_ip_address of this V1Job.


        :param public_ip_address: The public_ip_address of this V1Job.  # noqa: E501
        :type: str
        """

        self._public_ip_address = public_ip_address

    @property
    def ready_at(self) -> 'datetime':
        """Gets the ready_at of this V1Job.  # noqa: E501


        :return: The ready_at of this V1Job.  # noqa: E501
        :rtype: datetime
        """
        return self._ready_at

    @ready_at.setter
    def ready_at(self, ready_at: 'datetime'):
        """Sets the ready_at of this V1Job.


        :param ready_at: The ready_at of this V1Job.  # noqa: E501
        :type: datetime
        """

        self._ready_at = ready_at

    @property
    def release_id(self) -> 'str':
        """Gets the release_id of this V1Job.  # noqa: E501


        :return: The release_id of this V1Job.  # noqa: E501
        :rtype: str
        """
        return self._release_id

    @release_id.setter
    def release_id(self, release_id: 'str'):
        """Sets the release_id of this V1Job.


        :param release_id: The release_id of this V1Job.  # noqa: E501
        :type: str
        """

        self._release_id = release_id

    @property
    def restart_count(self) -> 'int':
        """Gets the restart_count of this V1Job.  # noqa: E501


        :return: The restart_count of this V1Job.  # noqa: E501
        :rtype: int
        """
        return self._restart_count

    @restart_count.setter
    def restart_count(self, restart_count: 'int'):
        """Sets the restart_count of this V1Job.


        :param restart_count: The restart_count of this V1Job.  # noqa: E501
        :type: int
        """

        self._restart_count = restart_count

    @property
    def restart_timings(self) -> 'list[V1RestartTiming]':
        """Gets the restart_timings of this V1Job.  # noqa: E501


        :return: The restart_timings of this V1Job.  # noqa: E501
        :rtype: list[V1RestartTiming]
        """
        return self._restart_timings

    @restart_timings.setter
    def restart_timings(self, restart_timings: 'list[V1RestartTiming]'):
        """Sets the restart_timings of this V1Job.


        :param restart_timings: The restart_timings of this V1Job.  # noqa: E501
        :type: list[V1RestartTiming]
        """

        self._restart_timings = restart_timings

    @property
    def server_error(self) -> 'str':
        """Gets the server_error of this V1Job.  # noqa: E501


        :return: The server_error of this V1Job.  # noqa: E501
        :rtype: str
        """
        return self._server_error

    @server_error.setter
    def server_error(self, server_error: 'str'):
        """Sets the server_error of this V1Job.


        :param server_error: The server_error of this V1Job.  # noqa: E501
        :type: str
        """

        self._server_error = server_error

    @property
    def spec(self) -> 'V1JobSpec':
        """Gets the spec of this V1Job.  # noqa: E501


        :return: The spec of this V1Job.  # noqa: E501
        :rtype: V1JobSpec
        """
        return self._spec

    @spec.setter
    def spec(self, spec: 'V1JobSpec'):
        """Sets the spec of this V1Job.


        :param spec: The spec of this V1Job.  # noqa: E501
        :type: V1JobSpec
        """

        self._spec = spec

    @property
    def started_at(self) -> 'datetime':
        """Gets the started_at of this V1Job.  # noqa: E501


        :return: The started_at of this V1Job.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at: 'datetime'):
        """Sets the started_at of this V1Job.


        :param started_at: The started_at of this V1Job.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def state(self) -> 'str':
        """Gets the state of this V1Job.  # noqa: E501


        :return: The state of this V1Job.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: 'str'):
        """Sets the state of this V1Job.


        :param state: The state of this V1Job.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def stopped_at(self) -> 'datetime':
        """Gets the stopped_at of this V1Job.  # noqa: E501


        :return: The stopped_at of this V1Job.  # noqa: E501
        :rtype: datetime
        """
        return self._stopped_at

    @stopped_at.setter
    def stopped_at(self, stopped_at: 'datetime'):
        """Sets the stopped_at of this V1Job.


        :param stopped_at: The stopped_at of this V1Job.  # noqa: E501
        :type: datetime
        """

        self._stopped_at = stopped_at

    @property
    def timings(self) -> 'dict(str, V1JobTiming)':
        """Gets the timings of this V1Job.  # noqa: E501


        :return: The timings of this V1Job.  # noqa: E501
        :rtype: dict(str, V1JobTiming)
        """
        return self._timings

    @timings.setter
    def timings(self, timings: 'dict(str, V1JobTiming)'):
        """Sets the timings of this V1Job.


        :param timings: The timings of this V1Job.  # noqa: E501
        :type: dict(str, V1JobTiming)
        """

        self._timings = timings

    @property
    def total_cost(self) -> 'float':
        """Gets the total_cost of this V1Job.  # noqa: E501


        :return: The total_cost of this V1Job.  # noqa: E501
        :rtype: float
        """
        return self._total_cost

    @total_cost.setter
    def total_cost(self, total_cost: 'float'):
        """Sets the total_cost of this V1Job.


        :param total_cost: The total_cost of this V1Job.  # noqa: E501
        :type: float
        """

        self._total_cost = total_cost

    @property
    def total_size_bytes(self) -> 'str':
        """Gets the total_size_bytes of this V1Job.  # noqa: E501


        :return: The total_size_bytes of this V1Job.  # noqa: E501
        :rtype: str
        """
        return self._total_size_bytes

    @total_size_bytes.setter
    def total_size_bytes(self, total_size_bytes: 'str'):
        """Sets the total_size_bytes of this V1Job.


        :param total_size_bytes: The total_size_bytes of this V1Job.  # noqa: E501
        :type: str
        """

        self._total_size_bytes = total_size_bytes

    @property
    def updated_at(self) -> 'datetime':
        """Gets the updated_at of this V1Job.  # noqa: E501


        :return: The updated_at of this V1Job.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: 'datetime'):
        """Sets the updated_at of this V1Job.


        :param updated_at: The updated_at of this V1Job.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def urls(self) -> 'list[str]':
        """Gets the urls of this V1Job.  # noqa: E501


        :return: The urls of this V1Job.  # noqa: E501
        :rtype: list[str]
        """
        return self._urls

    @urls.setter
    def urls(self, urls: 'list[str]'):
        """Sets the urls of this V1Job.


        :param urls: The urls of this V1Job.  # noqa: E501
        :type: list[str]
        """

        self._urls = urls

    @property
    def user_id(self) -> 'str':
        """Gets the user_id of this V1Job.  # noqa: E501


        :return: The user_id of this V1Job.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: 'str'):
        """Sets the user_id of this V1Job.


        :param user_id: The user_id of this V1Job.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def user_logs_started_at(self) -> 'datetime':
        """Gets the user_logs_started_at of this V1Job.  # noqa: E501


        :return: The user_logs_started_at of this V1Job.  # noqa: E501
        :rtype: datetime
        """
        return self._user_logs_started_at

    @user_logs_started_at.setter
    def user_logs_started_at(self, user_logs_started_at: 'datetime'):
        """Sets the user_logs_started_at of this V1Job.


        :param user_logs_started_at: The user_logs_started_at of this V1Job.  # noqa: E501
        :type: datetime
        """

        self._user_logs_started_at = user_logs_started_at

    @property
    def visibility(self) -> 'V1ResourceVisibility':
        """Gets the visibility of this V1Job.  # noqa: E501


        :return: The visibility of this V1Job.  # noqa: E501
        :rtype: V1ResourceVisibility
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility: 'V1ResourceVisibility'):
        """Sets the visibility of this V1Job.


        :param visibility: The visibility of this V1Job.  # noqa: E501
        :type: V1ResourceVisibility
        """

        self._visibility = visibility

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1Job, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1Job') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Job):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1Job') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
