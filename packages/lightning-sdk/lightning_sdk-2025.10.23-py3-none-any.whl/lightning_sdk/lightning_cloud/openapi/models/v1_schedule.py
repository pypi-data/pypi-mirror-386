# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1Schedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_type': 'V1ScheduleActionType',
        'command': 'str',
        'created_at': 'datetime',
        'cron_expression': 'str',
        'display_name': 'str',
        'id': 'str',
        'name': 'str',
        'next': 'datetime',
        'parallel_runs': 'bool',
        'parent_resource_id': 'str',
        'project_id': 'str',
        'resource_id': 'str',
        'resource_type': 'V1ScheduleResourceType',
        'state': 'str',
        'timezone': 'str',
        'total': 'int',
        'updated_at': 'datetime',
        'user_id': 'str'
    }

    attribute_map = {
        'action_type': 'actionType',
        'command': 'command',
        'created_at': 'createdAt',
        'cron_expression': 'cronExpression',
        'display_name': 'displayName',
        'id': 'id',
        'name': 'name',
        'next': 'next',
        'parallel_runs': 'parallelRuns',
        'parent_resource_id': 'parentResourceId',
        'project_id': 'projectId',
        'resource_id': 'resourceId',
        'resource_type': 'resourceType',
        'state': 'state',
        'timezone': 'timezone',
        'total': 'total',
        'updated_at': 'updatedAt',
        'user_id': 'userId'
    }

    def __init__(self, action_type: 'V1ScheduleActionType' =None, command: 'str' =None, created_at: 'datetime' =None, cron_expression: 'str' =None, display_name: 'str' =None, id: 'str' =None, name: 'str' =None, next: 'datetime' =None, parallel_runs: 'bool' =None, parent_resource_id: 'str' =None, project_id: 'str' =None, resource_id: 'str' =None, resource_type: 'V1ScheduleResourceType' =None, state: 'str' =None, timezone: 'str' =None, total: 'int' =None, updated_at: 'datetime' =None, user_id: 'str' =None):  # noqa: E501
        """V1Schedule - a model defined in Swagger"""  # noqa: E501
        self._action_type = None
        self._command = None
        self._created_at = None
        self._cron_expression = None
        self._display_name = None
        self._id = None
        self._name = None
        self._next = None
        self._parallel_runs = None
        self._parent_resource_id = None
        self._project_id = None
        self._resource_id = None
        self._resource_type = None
        self._state = None
        self._timezone = None
        self._total = None
        self._updated_at = None
        self._user_id = None
        self.discriminator = None
        if action_type is not None:
            self.action_type = action_type
        if command is not None:
            self.command = command
        if created_at is not None:
            self.created_at = created_at
        if cron_expression is not None:
            self.cron_expression = cron_expression
        if display_name is not None:
            self.display_name = display_name
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if next is not None:
            self.next = next
        if parallel_runs is not None:
            self.parallel_runs = parallel_runs
        if parent_resource_id is not None:
            self.parent_resource_id = parent_resource_id
        if project_id is not None:
            self.project_id = project_id
        if resource_id is not None:
            self.resource_id = resource_id
        if resource_type is not None:
            self.resource_type = resource_type
        if state is not None:
            self.state = state
        if timezone is not None:
            self.timezone = timezone
        if total is not None:
            self.total = total
        if updated_at is not None:
            self.updated_at = updated_at
        if user_id is not None:
            self.user_id = user_id

    @property
    def action_type(self) -> 'V1ScheduleActionType':
        """Gets the action_type of this V1Schedule.  # noqa: E501


        :return: The action_type of this V1Schedule.  # noqa: E501
        :rtype: V1ScheduleActionType
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type: 'V1ScheduleActionType'):
        """Sets the action_type of this V1Schedule.


        :param action_type: The action_type of this V1Schedule.  # noqa: E501
        :type: V1ScheduleActionType
        """

        self._action_type = action_type

    @property
    def command(self) -> 'str':
        """Gets the command of this V1Schedule.  # noqa: E501


        :return: The command of this V1Schedule.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command: 'str'):
        """Sets the command of this V1Schedule.


        :param command: The command of this V1Schedule.  # noqa: E501
        :type: str
        """

        self._command = command

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this V1Schedule.  # noqa: E501


        :return: The created_at of this V1Schedule.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this V1Schedule.


        :param created_at: The created_at of this V1Schedule.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def cron_expression(self) -> 'str':
        """Gets the cron_expression of this V1Schedule.  # noqa: E501


        :return: The cron_expression of this V1Schedule.  # noqa: E501
        :rtype: str
        """
        return self._cron_expression

    @cron_expression.setter
    def cron_expression(self, cron_expression: 'str'):
        """Sets the cron_expression of this V1Schedule.


        :param cron_expression: The cron_expression of this V1Schedule.  # noqa: E501
        :type: str
        """

        self._cron_expression = cron_expression

    @property
    def display_name(self) -> 'str':
        """Gets the display_name of this V1Schedule.  # noqa: E501


        :return: The display_name of this V1Schedule.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: 'str'):
        """Sets the display_name of this V1Schedule.


        :param display_name: The display_name of this V1Schedule.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def id(self) -> 'str':
        """Gets the id of this V1Schedule.  # noqa: E501


        :return: The id of this V1Schedule.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1Schedule.


        :param id: The id of this V1Schedule.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self) -> 'str':
        """Gets the name of this V1Schedule.  # noqa: E501


        :return: The name of this V1Schedule.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1Schedule.


        :param name: The name of this V1Schedule.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def next(self) -> 'datetime':
        """Gets the next of this V1Schedule.  # noqa: E501


        :return: The next of this V1Schedule.  # noqa: E501
        :rtype: datetime
        """
        return self._next

    @next.setter
    def next(self, next: 'datetime'):
        """Sets the next of this V1Schedule.


        :param next: The next of this V1Schedule.  # noqa: E501
        :type: datetime
        """

        self._next = next

    @property
    def parallel_runs(self) -> 'bool':
        """Gets the parallel_runs of this V1Schedule.  # noqa: E501


        :return: The parallel_runs of this V1Schedule.  # noqa: E501
        :rtype: bool
        """
        return self._parallel_runs

    @parallel_runs.setter
    def parallel_runs(self, parallel_runs: 'bool'):
        """Sets the parallel_runs of this V1Schedule.


        :param parallel_runs: The parallel_runs of this V1Schedule.  # noqa: E501
        :type: bool
        """

        self._parallel_runs = parallel_runs

    @property
    def parent_resource_id(self) -> 'str':
        """Gets the parent_resource_id of this V1Schedule.  # noqa: E501


        :return: The parent_resource_id of this V1Schedule.  # noqa: E501
        :rtype: str
        """
        return self._parent_resource_id

    @parent_resource_id.setter
    def parent_resource_id(self, parent_resource_id: 'str'):
        """Sets the parent_resource_id of this V1Schedule.


        :param parent_resource_id: The parent_resource_id of this V1Schedule.  # noqa: E501
        :type: str
        """

        self._parent_resource_id = parent_resource_id

    @property
    def project_id(self) -> 'str':
        """Gets the project_id of this V1Schedule.  # noqa: E501


        :return: The project_id of this V1Schedule.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: 'str'):
        """Sets the project_id of this V1Schedule.


        :param project_id: The project_id of this V1Schedule.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def resource_id(self) -> 'str':
        """Gets the resource_id of this V1Schedule.  # noqa: E501


        :return: The resource_id of this V1Schedule.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id: 'str'):
        """Sets the resource_id of this V1Schedule.


        :param resource_id: The resource_id of this V1Schedule.  # noqa: E501
        :type: str
        """

        self._resource_id = resource_id

    @property
    def resource_type(self) -> 'V1ScheduleResourceType':
        """Gets the resource_type of this V1Schedule.  # noqa: E501


        :return: The resource_type of this V1Schedule.  # noqa: E501
        :rtype: V1ScheduleResourceType
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type: 'V1ScheduleResourceType'):
        """Sets the resource_type of this V1Schedule.


        :param resource_type: The resource_type of this V1Schedule.  # noqa: E501
        :type: V1ScheduleResourceType
        """

        self._resource_type = resource_type

    @property
    def state(self) -> 'str':
        """Gets the state of this V1Schedule.  # noqa: E501


        :return: The state of this V1Schedule.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: 'str'):
        """Sets the state of this V1Schedule.


        :param state: The state of this V1Schedule.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def timezone(self) -> 'str':
        """Gets the timezone of this V1Schedule.  # noqa: E501


        :return: The timezone of this V1Schedule.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone: 'str'):
        """Sets the timezone of this V1Schedule.


        :param timezone: The timezone of this V1Schedule.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def total(self) -> 'int':
        """Gets the total of this V1Schedule.  # noqa: E501


        :return: The total of this V1Schedule.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total: 'int'):
        """Sets the total of this V1Schedule.


        :param total: The total of this V1Schedule.  # noqa: E501
        :type: int
        """

        self._total = total

    @property
    def updated_at(self) -> 'datetime':
        """Gets the updated_at of this V1Schedule.  # noqa: E501


        :return: The updated_at of this V1Schedule.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: 'datetime'):
        """Sets the updated_at of this V1Schedule.


        :param updated_at: The updated_at of this V1Schedule.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def user_id(self) -> 'str':
        """Gets the user_id of this V1Schedule.  # noqa: E501


        :return: The user_id of this V1Schedule.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: 'str'):
        """Sets the user_id of this V1Schedule.


        :param user_id: The user_id of this V1Schedule.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1Schedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1Schedule') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Schedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1Schedule') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
