# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1CollabSession(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cloudspace_id': 'str',
        'id': 'str',
        'owner_id': 'str',
        'project_id': 'str',
        'user_ids': 'list[str]'
    }

    attribute_map = {
        'cloudspace_id': 'cloudspaceId',
        'id': 'id',
        'owner_id': 'ownerId',
        'project_id': 'projectId',
        'user_ids': 'userIds'
    }

    def __init__(self, cloudspace_id: 'str' =None, id: 'str' =None, owner_id: 'str' =None, project_id: 'str' =None, user_ids: 'list[str]' =None):  # noqa: E501
        """V1CollabSession - a model defined in Swagger"""  # noqa: E501
        self._cloudspace_id = None
        self._id = None
        self._owner_id = None
        self._project_id = None
        self._user_ids = None
        self.discriminator = None
        if cloudspace_id is not None:
            self.cloudspace_id = cloudspace_id
        if id is not None:
            self.id = id
        if owner_id is not None:
            self.owner_id = owner_id
        if project_id is not None:
            self.project_id = project_id
        if user_ids is not None:
            self.user_ids = user_ids

    @property
    def cloudspace_id(self) -> 'str':
        """Gets the cloudspace_id of this V1CollabSession.  # noqa: E501


        :return: The cloudspace_id of this V1CollabSession.  # noqa: E501
        :rtype: str
        """
        return self._cloudspace_id

    @cloudspace_id.setter
    def cloudspace_id(self, cloudspace_id: 'str'):
        """Sets the cloudspace_id of this V1CollabSession.


        :param cloudspace_id: The cloudspace_id of this V1CollabSession.  # noqa: E501
        :type: str
        """

        self._cloudspace_id = cloudspace_id

    @property
    def id(self) -> 'str':
        """Gets the id of this V1CollabSession.  # noqa: E501


        :return: The id of this V1CollabSession.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1CollabSession.


        :param id: The id of this V1CollabSession.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def owner_id(self) -> 'str':
        """Gets the owner_id of this V1CollabSession.  # noqa: E501


        :return: The owner_id of this V1CollabSession.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id: 'str'):
        """Sets the owner_id of this V1CollabSession.


        :param owner_id: The owner_id of this V1CollabSession.  # noqa: E501
        :type: str
        """

        self._owner_id = owner_id

    @property
    def project_id(self) -> 'str':
        """Gets the project_id of this V1CollabSession.  # noqa: E501


        :return: The project_id of this V1CollabSession.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: 'str'):
        """Sets the project_id of this V1CollabSession.


        :param project_id: The project_id of this V1CollabSession.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def user_ids(self) -> 'list[str]':
        """Gets the user_ids of this V1CollabSession.  # noqa: E501


        :return: The user_ids of this V1CollabSession.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_ids

    @user_ids.setter
    def user_ids(self, user_ids: 'list[str]'):
        """Sets the user_ids of this V1CollabSession.


        :param user_ids: The user_ids of this V1CollabSession.  # noqa: E501
        :type: list[str]
        """

        self._user_ids = user_ids

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1CollabSession, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1CollabSession') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1CollabSession):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1CollabSession') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
