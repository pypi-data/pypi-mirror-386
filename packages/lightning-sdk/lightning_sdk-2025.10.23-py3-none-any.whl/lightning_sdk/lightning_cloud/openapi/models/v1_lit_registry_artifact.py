# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1LitRegistryArtifact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'exposed_ports': 'list[str]',
        'full_hash_digest': 'str',
        'location': 'str',
        'pull_time': 'datetime',
        'push_time': 'datetime',
        'short_hash_digest': 'str',
        'size': 'str',
        'tag_name': 'str'
    }

    attribute_map = {
        'exposed_ports': 'exposedPorts',
        'full_hash_digest': 'fullHashDigest',
        'location': 'location',
        'pull_time': 'pullTime',
        'push_time': 'pushTime',
        'short_hash_digest': 'shortHashDigest',
        'size': 'size',
        'tag_name': 'tagName'
    }

    def __init__(self, exposed_ports: 'list[str]' =None, full_hash_digest: 'str' =None, location: 'str' =None, pull_time: 'datetime' =None, push_time: 'datetime' =None, short_hash_digest: 'str' =None, size: 'str' =None, tag_name: 'str' =None):  # noqa: E501
        """V1LitRegistryArtifact - a model defined in Swagger"""  # noqa: E501
        self._exposed_ports = None
        self._full_hash_digest = None
        self._location = None
        self._pull_time = None
        self._push_time = None
        self._short_hash_digest = None
        self._size = None
        self._tag_name = None
        self.discriminator = None
        if exposed_ports is not None:
            self.exposed_ports = exposed_ports
        if full_hash_digest is not None:
            self.full_hash_digest = full_hash_digest
        if location is not None:
            self.location = location
        if pull_time is not None:
            self.pull_time = pull_time
        if push_time is not None:
            self.push_time = push_time
        if short_hash_digest is not None:
            self.short_hash_digest = short_hash_digest
        if size is not None:
            self.size = size
        if tag_name is not None:
            self.tag_name = tag_name

    @property
    def exposed_ports(self) -> 'list[str]':
        """Gets the exposed_ports of this V1LitRegistryArtifact.  # noqa: E501


        :return: The exposed_ports of this V1LitRegistryArtifact.  # noqa: E501
        :rtype: list[str]
        """
        return self._exposed_ports

    @exposed_ports.setter
    def exposed_ports(self, exposed_ports: 'list[str]'):
        """Sets the exposed_ports of this V1LitRegistryArtifact.


        :param exposed_ports: The exposed_ports of this V1LitRegistryArtifact.  # noqa: E501
        :type: list[str]
        """

        self._exposed_ports = exposed_ports

    @property
    def full_hash_digest(self) -> 'str':
        """Gets the full_hash_digest of this V1LitRegistryArtifact.  # noqa: E501


        :return: The full_hash_digest of this V1LitRegistryArtifact.  # noqa: E501
        :rtype: str
        """
        return self._full_hash_digest

    @full_hash_digest.setter
    def full_hash_digest(self, full_hash_digest: 'str'):
        """Sets the full_hash_digest of this V1LitRegistryArtifact.


        :param full_hash_digest: The full_hash_digest of this V1LitRegistryArtifact.  # noqa: E501
        :type: str
        """

        self._full_hash_digest = full_hash_digest

    @property
    def location(self) -> 'str':
        """Gets the location of this V1LitRegistryArtifact.  # noqa: E501


        :return: The location of this V1LitRegistryArtifact.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location: 'str'):
        """Sets the location of this V1LitRegistryArtifact.


        :param location: The location of this V1LitRegistryArtifact.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def pull_time(self) -> 'datetime':
        """Gets the pull_time of this V1LitRegistryArtifact.  # noqa: E501


        :return: The pull_time of this V1LitRegistryArtifact.  # noqa: E501
        :rtype: datetime
        """
        return self._pull_time

    @pull_time.setter
    def pull_time(self, pull_time: 'datetime'):
        """Sets the pull_time of this V1LitRegistryArtifact.


        :param pull_time: The pull_time of this V1LitRegistryArtifact.  # noqa: E501
        :type: datetime
        """

        self._pull_time = pull_time

    @property
    def push_time(self) -> 'datetime':
        """Gets the push_time of this V1LitRegistryArtifact.  # noqa: E501


        :return: The push_time of this V1LitRegistryArtifact.  # noqa: E501
        :rtype: datetime
        """
        return self._push_time

    @push_time.setter
    def push_time(self, push_time: 'datetime'):
        """Sets the push_time of this V1LitRegistryArtifact.


        :param push_time: The push_time of this V1LitRegistryArtifact.  # noqa: E501
        :type: datetime
        """

        self._push_time = push_time

    @property
    def short_hash_digest(self) -> 'str':
        """Gets the short_hash_digest of this V1LitRegistryArtifact.  # noqa: E501


        :return: The short_hash_digest of this V1LitRegistryArtifact.  # noqa: E501
        :rtype: str
        """
        return self._short_hash_digest

    @short_hash_digest.setter
    def short_hash_digest(self, short_hash_digest: 'str'):
        """Sets the short_hash_digest of this V1LitRegistryArtifact.


        :param short_hash_digest: The short_hash_digest of this V1LitRegistryArtifact.  # noqa: E501
        :type: str
        """

        self._short_hash_digest = short_hash_digest

    @property
    def size(self) -> 'str':
        """Gets the size of this V1LitRegistryArtifact.  # noqa: E501


        :return: The size of this V1LitRegistryArtifact.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size: 'str'):
        """Sets the size of this V1LitRegistryArtifact.


        :param size: The size of this V1LitRegistryArtifact.  # noqa: E501
        :type: str
        """

        self._size = size

    @property
    def tag_name(self) -> 'str':
        """Gets the tag_name of this V1LitRegistryArtifact.  # noqa: E501


        :return: The tag_name of this V1LitRegistryArtifact.  # noqa: E501
        :rtype: str
        """
        return self._tag_name

    @tag_name.setter
    def tag_name(self, tag_name: 'str'):
        """Sets the tag_name of this V1LitRegistryArtifact.


        :param tag_name: The tag_name of this V1LitRegistryArtifact.  # noqa: E501
        :type: str
        """

        self._tag_name = tag_name

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1LitRegistryArtifact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1LitRegistryArtifact') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1LitRegistryArtifact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1LitRegistryArtifact') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
