# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1SystemInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cli_args': 'str',
        'cpu_count_logical': 'int',
        'cpu_count_physical': 'int',
        'cpu_name': 'str',
        'cuda_version': 'str',
        'cudnn_version': 'str',
        'execution_command': 'str',
        'git_branch': 'str',
        'git_commit_hash': 'str',
        'git_repo_name': 'str',
        'gpu_count': 'int',
        'gpu_memory_gb': 'int',
        'gpu_name': 'str',
        'hostname': 'str',
        'hyperparameters': 'str',
        'installed_packages': 'str',
        'litlogger_version': 'str',
        'os_name': 'str',
        'python_version': 'str',
        'system_memory_gb': 'int'
    }

    attribute_map = {
        'cli_args': 'cliArgs',
        'cpu_count_logical': 'cpuCountLogical',
        'cpu_count_physical': 'cpuCountPhysical',
        'cpu_name': 'cpuName',
        'cuda_version': 'cudaVersion',
        'cudnn_version': 'cudnnVersion',
        'execution_command': 'executionCommand',
        'git_branch': 'gitBranch',
        'git_commit_hash': 'gitCommitHash',
        'git_repo_name': 'gitRepoName',
        'gpu_count': 'gpuCount',
        'gpu_memory_gb': 'gpuMemoryGb',
        'gpu_name': 'gpuName',
        'hostname': 'hostname',
        'hyperparameters': 'hyperparameters',
        'installed_packages': 'installedPackages',
        'litlogger_version': 'litloggerVersion',
        'os_name': 'osName',
        'python_version': 'pythonVersion',
        'system_memory_gb': 'systemMemoryGb'
    }

    def __init__(self, cli_args: 'str' =None, cpu_count_logical: 'int' =None, cpu_count_physical: 'int' =None, cpu_name: 'str' =None, cuda_version: 'str' =None, cudnn_version: 'str' =None, execution_command: 'str' =None, git_branch: 'str' =None, git_commit_hash: 'str' =None, git_repo_name: 'str' =None, gpu_count: 'int' =None, gpu_memory_gb: 'int' =None, gpu_name: 'str' =None, hostname: 'str' =None, hyperparameters: 'str' =None, installed_packages: 'str' =None, litlogger_version: 'str' =None, os_name: 'str' =None, python_version: 'str' =None, system_memory_gb: 'int' =None):  # noqa: E501
        """V1SystemInfo - a model defined in Swagger"""  # noqa: E501
        self._cli_args = None
        self._cpu_count_logical = None
        self._cpu_count_physical = None
        self._cpu_name = None
        self._cuda_version = None
        self._cudnn_version = None
        self._execution_command = None
        self._git_branch = None
        self._git_commit_hash = None
        self._git_repo_name = None
        self._gpu_count = None
        self._gpu_memory_gb = None
        self._gpu_name = None
        self._hostname = None
        self._hyperparameters = None
        self._installed_packages = None
        self._litlogger_version = None
        self._os_name = None
        self._python_version = None
        self._system_memory_gb = None
        self.discriminator = None
        if cli_args is not None:
            self.cli_args = cli_args
        if cpu_count_logical is not None:
            self.cpu_count_logical = cpu_count_logical
        if cpu_count_physical is not None:
            self.cpu_count_physical = cpu_count_physical
        if cpu_name is not None:
            self.cpu_name = cpu_name
        if cuda_version is not None:
            self.cuda_version = cuda_version
        if cudnn_version is not None:
            self.cudnn_version = cudnn_version
        if execution_command is not None:
            self.execution_command = execution_command
        if git_branch is not None:
            self.git_branch = git_branch
        if git_commit_hash is not None:
            self.git_commit_hash = git_commit_hash
        if git_repo_name is not None:
            self.git_repo_name = git_repo_name
        if gpu_count is not None:
            self.gpu_count = gpu_count
        if gpu_memory_gb is not None:
            self.gpu_memory_gb = gpu_memory_gb
        if gpu_name is not None:
            self.gpu_name = gpu_name
        if hostname is not None:
            self.hostname = hostname
        if hyperparameters is not None:
            self.hyperparameters = hyperparameters
        if installed_packages is not None:
            self.installed_packages = installed_packages
        if litlogger_version is not None:
            self.litlogger_version = litlogger_version
        if os_name is not None:
            self.os_name = os_name
        if python_version is not None:
            self.python_version = python_version
        if system_memory_gb is not None:
            self.system_memory_gb = system_memory_gb

    @property
    def cli_args(self) -> 'str':
        """Gets the cli_args of this V1SystemInfo.  # noqa: E501


        :return: The cli_args of this V1SystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._cli_args

    @cli_args.setter
    def cli_args(self, cli_args: 'str'):
        """Sets the cli_args of this V1SystemInfo.


        :param cli_args: The cli_args of this V1SystemInfo.  # noqa: E501
        :type: str
        """

        self._cli_args = cli_args

    @property
    def cpu_count_logical(self) -> 'int':
        """Gets the cpu_count_logical of this V1SystemInfo.  # noqa: E501


        :return: The cpu_count_logical of this V1SystemInfo.  # noqa: E501
        :rtype: int
        """
        return self._cpu_count_logical

    @cpu_count_logical.setter
    def cpu_count_logical(self, cpu_count_logical: 'int'):
        """Sets the cpu_count_logical of this V1SystemInfo.


        :param cpu_count_logical: The cpu_count_logical of this V1SystemInfo.  # noqa: E501
        :type: int
        """

        self._cpu_count_logical = cpu_count_logical

    @property
    def cpu_count_physical(self) -> 'int':
        """Gets the cpu_count_physical of this V1SystemInfo.  # noqa: E501


        :return: The cpu_count_physical of this V1SystemInfo.  # noqa: E501
        :rtype: int
        """
        return self._cpu_count_physical

    @cpu_count_physical.setter
    def cpu_count_physical(self, cpu_count_physical: 'int'):
        """Sets the cpu_count_physical of this V1SystemInfo.


        :param cpu_count_physical: The cpu_count_physical of this V1SystemInfo.  # noqa: E501
        :type: int
        """

        self._cpu_count_physical = cpu_count_physical

    @property
    def cpu_name(self) -> 'str':
        """Gets the cpu_name of this V1SystemInfo.  # noqa: E501


        :return: The cpu_name of this V1SystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._cpu_name

    @cpu_name.setter
    def cpu_name(self, cpu_name: 'str'):
        """Sets the cpu_name of this V1SystemInfo.


        :param cpu_name: The cpu_name of this V1SystemInfo.  # noqa: E501
        :type: str
        """

        self._cpu_name = cpu_name

    @property
    def cuda_version(self) -> 'str':
        """Gets the cuda_version of this V1SystemInfo.  # noqa: E501


        :return: The cuda_version of this V1SystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._cuda_version

    @cuda_version.setter
    def cuda_version(self, cuda_version: 'str'):
        """Sets the cuda_version of this V1SystemInfo.


        :param cuda_version: The cuda_version of this V1SystemInfo.  # noqa: E501
        :type: str
        """

        self._cuda_version = cuda_version

    @property
    def cudnn_version(self) -> 'str':
        """Gets the cudnn_version of this V1SystemInfo.  # noqa: E501


        :return: The cudnn_version of this V1SystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._cudnn_version

    @cudnn_version.setter
    def cudnn_version(self, cudnn_version: 'str'):
        """Sets the cudnn_version of this V1SystemInfo.


        :param cudnn_version: The cudnn_version of this V1SystemInfo.  # noqa: E501
        :type: str
        """

        self._cudnn_version = cudnn_version

    @property
    def execution_command(self) -> 'str':
        """Gets the execution_command of this V1SystemInfo.  # noqa: E501


        :return: The execution_command of this V1SystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._execution_command

    @execution_command.setter
    def execution_command(self, execution_command: 'str'):
        """Sets the execution_command of this V1SystemInfo.


        :param execution_command: The execution_command of this V1SystemInfo.  # noqa: E501
        :type: str
        """

        self._execution_command = execution_command

    @property
    def git_branch(self) -> 'str':
        """Gets the git_branch of this V1SystemInfo.  # noqa: E501


        :return: The git_branch of this V1SystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._git_branch

    @git_branch.setter
    def git_branch(self, git_branch: 'str'):
        """Sets the git_branch of this V1SystemInfo.


        :param git_branch: The git_branch of this V1SystemInfo.  # noqa: E501
        :type: str
        """

        self._git_branch = git_branch

    @property
    def git_commit_hash(self) -> 'str':
        """Gets the git_commit_hash of this V1SystemInfo.  # noqa: E501


        :return: The git_commit_hash of this V1SystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._git_commit_hash

    @git_commit_hash.setter
    def git_commit_hash(self, git_commit_hash: 'str'):
        """Sets the git_commit_hash of this V1SystemInfo.


        :param git_commit_hash: The git_commit_hash of this V1SystemInfo.  # noqa: E501
        :type: str
        """

        self._git_commit_hash = git_commit_hash

    @property
    def git_repo_name(self) -> 'str':
        """Gets the git_repo_name of this V1SystemInfo.  # noqa: E501


        :return: The git_repo_name of this V1SystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._git_repo_name

    @git_repo_name.setter
    def git_repo_name(self, git_repo_name: 'str'):
        """Sets the git_repo_name of this V1SystemInfo.


        :param git_repo_name: The git_repo_name of this V1SystemInfo.  # noqa: E501
        :type: str
        """

        self._git_repo_name = git_repo_name

    @property
    def gpu_count(self) -> 'int':
        """Gets the gpu_count of this V1SystemInfo.  # noqa: E501


        :return: The gpu_count of this V1SystemInfo.  # noqa: E501
        :rtype: int
        """
        return self._gpu_count

    @gpu_count.setter
    def gpu_count(self, gpu_count: 'int'):
        """Sets the gpu_count of this V1SystemInfo.


        :param gpu_count: The gpu_count of this V1SystemInfo.  # noqa: E501
        :type: int
        """

        self._gpu_count = gpu_count

    @property
    def gpu_memory_gb(self) -> 'int':
        """Gets the gpu_memory_gb of this V1SystemInfo.  # noqa: E501


        :return: The gpu_memory_gb of this V1SystemInfo.  # noqa: E501
        :rtype: int
        """
        return self._gpu_memory_gb

    @gpu_memory_gb.setter
    def gpu_memory_gb(self, gpu_memory_gb: 'int'):
        """Sets the gpu_memory_gb of this V1SystemInfo.


        :param gpu_memory_gb: The gpu_memory_gb of this V1SystemInfo.  # noqa: E501
        :type: int
        """

        self._gpu_memory_gb = gpu_memory_gb

    @property
    def gpu_name(self) -> 'str':
        """Gets the gpu_name of this V1SystemInfo.  # noqa: E501


        :return: The gpu_name of this V1SystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._gpu_name

    @gpu_name.setter
    def gpu_name(self, gpu_name: 'str'):
        """Sets the gpu_name of this V1SystemInfo.


        :param gpu_name: The gpu_name of this V1SystemInfo.  # noqa: E501
        :type: str
        """

        self._gpu_name = gpu_name

    @property
    def hostname(self) -> 'str':
        """Gets the hostname of this V1SystemInfo.  # noqa: E501


        :return: The hostname of this V1SystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname: 'str'):
        """Sets the hostname of this V1SystemInfo.


        :param hostname: The hostname of this V1SystemInfo.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def hyperparameters(self) -> 'str':
        """Gets the hyperparameters of this V1SystemInfo.  # noqa: E501


        :return: The hyperparameters of this V1SystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._hyperparameters

    @hyperparameters.setter
    def hyperparameters(self, hyperparameters: 'str'):
        """Sets the hyperparameters of this V1SystemInfo.


        :param hyperparameters: The hyperparameters of this V1SystemInfo.  # noqa: E501
        :type: str
        """

        self._hyperparameters = hyperparameters

    @property
    def installed_packages(self) -> 'str':
        """Gets the installed_packages of this V1SystemInfo.  # noqa: E501


        :return: The installed_packages of this V1SystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._installed_packages

    @installed_packages.setter
    def installed_packages(self, installed_packages: 'str'):
        """Sets the installed_packages of this V1SystemInfo.


        :param installed_packages: The installed_packages of this V1SystemInfo.  # noqa: E501
        :type: str
        """

        self._installed_packages = installed_packages

    @property
    def litlogger_version(self) -> 'str':
        """Gets the litlogger_version of this V1SystemInfo.  # noqa: E501


        :return: The litlogger_version of this V1SystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._litlogger_version

    @litlogger_version.setter
    def litlogger_version(self, litlogger_version: 'str'):
        """Sets the litlogger_version of this V1SystemInfo.


        :param litlogger_version: The litlogger_version of this V1SystemInfo.  # noqa: E501
        :type: str
        """

        self._litlogger_version = litlogger_version

    @property
    def os_name(self) -> 'str':
        """Gets the os_name of this V1SystemInfo.  # noqa: E501


        :return: The os_name of this V1SystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._os_name

    @os_name.setter
    def os_name(self, os_name: 'str'):
        """Sets the os_name of this V1SystemInfo.


        :param os_name: The os_name of this V1SystemInfo.  # noqa: E501
        :type: str
        """

        self._os_name = os_name

    @property
    def python_version(self) -> 'str':
        """Gets the python_version of this V1SystemInfo.  # noqa: E501


        :return: The python_version of this V1SystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._python_version

    @python_version.setter
    def python_version(self, python_version: 'str'):
        """Sets the python_version of this V1SystemInfo.


        :param python_version: The python_version of this V1SystemInfo.  # noqa: E501
        :type: str
        """

        self._python_version = python_version

    @property
    def system_memory_gb(self) -> 'int':
        """Gets the system_memory_gb of this V1SystemInfo.  # noqa: E501


        :return: The system_memory_gb of this V1SystemInfo.  # noqa: E501
        :rtype: int
        """
        return self._system_memory_gb

    @system_memory_gb.setter
    def system_memory_gb(self, system_memory_gb: 'int'):
        """Sets the system_memory_gb of this V1SystemInfo.


        :param system_memory_gb: The system_memory_gb of this V1SystemInfo.  # noqa: E501
        :type: int
        """

        self._system_memory_gb = system_memory_gb

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1SystemInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1SystemInfo') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1SystemInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1SystemInfo') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
