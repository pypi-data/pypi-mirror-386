# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1StudioJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app': 'V1StudioJobApp',
        'cloudspace_id': 'str',
        'command': 'str',
        'created_at': 'datetime',
        'id': 'str',
        'last_started_at': 'datetime',
        'last_stopped_at': 'datetime',
        'name': 'str',
        'port': 'str',
        'project_id': 'str',
        'terminal_session_id': 'str',
        'updated_at': 'datetime',
        'user_id': 'str'
    }

    attribute_map = {
        'app': 'app',
        'cloudspace_id': 'cloudspaceId',
        'command': 'command',
        'created_at': 'createdAt',
        'id': 'id',
        'last_started_at': 'lastStartedAt',
        'last_stopped_at': 'lastStoppedAt',
        'name': 'name',
        'port': 'port',
        'project_id': 'projectId',
        'terminal_session_id': 'terminalSessionId',
        'updated_at': 'updatedAt',
        'user_id': 'userId'
    }

    def __init__(self, app: 'V1StudioJobApp' =None, cloudspace_id: 'str' =None, command: 'str' =None, created_at: 'datetime' =None, id: 'str' =None, last_started_at: 'datetime' =None, last_stopped_at: 'datetime' =None, name: 'str' =None, port: 'str' =None, project_id: 'str' =None, terminal_session_id: 'str' =None, updated_at: 'datetime' =None, user_id: 'str' =None):  # noqa: E501
        """V1StudioJob - a model defined in Swagger"""  # noqa: E501
        self._app = None
        self._cloudspace_id = None
        self._command = None
        self._created_at = None
        self._id = None
        self._last_started_at = None
        self._last_stopped_at = None
        self._name = None
        self._port = None
        self._project_id = None
        self._terminal_session_id = None
        self._updated_at = None
        self._user_id = None
        self.discriminator = None
        if app is not None:
            self.app = app
        if cloudspace_id is not None:
            self.cloudspace_id = cloudspace_id
        if command is not None:
            self.command = command
        if created_at is not None:
            self.created_at = created_at
        if id is not None:
            self.id = id
        if last_started_at is not None:
            self.last_started_at = last_started_at
        if last_stopped_at is not None:
            self.last_stopped_at = last_stopped_at
        if name is not None:
            self.name = name
        if port is not None:
            self.port = port
        if project_id is not None:
            self.project_id = project_id
        if terminal_session_id is not None:
            self.terminal_session_id = terminal_session_id
        if updated_at is not None:
            self.updated_at = updated_at
        if user_id is not None:
            self.user_id = user_id

    @property
    def app(self) -> 'V1StudioJobApp':
        """Gets the app of this V1StudioJob.  # noqa: E501


        :return: The app of this V1StudioJob.  # noqa: E501
        :rtype: V1StudioJobApp
        """
        return self._app

    @app.setter
    def app(self, app: 'V1StudioJobApp'):
        """Sets the app of this V1StudioJob.


        :param app: The app of this V1StudioJob.  # noqa: E501
        :type: V1StudioJobApp
        """

        self._app = app

    @property
    def cloudspace_id(self) -> 'str':
        """Gets the cloudspace_id of this V1StudioJob.  # noqa: E501


        :return: The cloudspace_id of this V1StudioJob.  # noqa: E501
        :rtype: str
        """
        return self._cloudspace_id

    @cloudspace_id.setter
    def cloudspace_id(self, cloudspace_id: 'str'):
        """Sets the cloudspace_id of this V1StudioJob.


        :param cloudspace_id: The cloudspace_id of this V1StudioJob.  # noqa: E501
        :type: str
        """

        self._cloudspace_id = cloudspace_id

    @property
    def command(self) -> 'str':
        """Gets the command of this V1StudioJob.  # noqa: E501


        :return: The command of this V1StudioJob.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command: 'str'):
        """Sets the command of this V1StudioJob.


        :param command: The command of this V1StudioJob.  # noqa: E501
        :type: str
        """

        self._command = command

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this V1StudioJob.  # noqa: E501


        :return: The created_at of this V1StudioJob.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this V1StudioJob.


        :param created_at: The created_at of this V1StudioJob.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def id(self) -> 'str':
        """Gets the id of this V1StudioJob.  # noqa: E501


        :return: The id of this V1StudioJob.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1StudioJob.


        :param id: The id of this V1StudioJob.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def last_started_at(self) -> 'datetime':
        """Gets the last_started_at of this V1StudioJob.  # noqa: E501


        :return: The last_started_at of this V1StudioJob.  # noqa: E501
        :rtype: datetime
        """
        return self._last_started_at

    @last_started_at.setter
    def last_started_at(self, last_started_at: 'datetime'):
        """Sets the last_started_at of this V1StudioJob.


        :param last_started_at: The last_started_at of this V1StudioJob.  # noqa: E501
        :type: datetime
        """

        self._last_started_at = last_started_at

    @property
    def last_stopped_at(self) -> 'datetime':
        """Gets the last_stopped_at of this V1StudioJob.  # noqa: E501


        :return: The last_stopped_at of this V1StudioJob.  # noqa: E501
        :rtype: datetime
        """
        return self._last_stopped_at

    @last_stopped_at.setter
    def last_stopped_at(self, last_stopped_at: 'datetime'):
        """Sets the last_stopped_at of this V1StudioJob.


        :param last_stopped_at: The last_stopped_at of this V1StudioJob.  # noqa: E501
        :type: datetime
        """

        self._last_stopped_at = last_stopped_at

    @property
    def name(self) -> 'str':
        """Gets the name of this V1StudioJob.  # noqa: E501


        :return: The name of this V1StudioJob.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1StudioJob.


        :param name: The name of this V1StudioJob.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def port(self) -> 'str':
        """Gets the port of this V1StudioJob.  # noqa: E501


        :return: The port of this V1StudioJob.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port: 'str'):
        """Sets the port of this V1StudioJob.


        :param port: The port of this V1StudioJob.  # noqa: E501
        :type: str
        """

        self._port = port

    @property
    def project_id(self) -> 'str':
        """Gets the project_id of this V1StudioJob.  # noqa: E501


        :return: The project_id of this V1StudioJob.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: 'str'):
        """Sets the project_id of this V1StudioJob.


        :param project_id: The project_id of this V1StudioJob.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def terminal_session_id(self) -> 'str':
        """Gets the terminal_session_id of this V1StudioJob.  # noqa: E501


        :return: The terminal_session_id of this V1StudioJob.  # noqa: E501
        :rtype: str
        """
        return self._terminal_session_id

    @terminal_session_id.setter
    def terminal_session_id(self, terminal_session_id: 'str'):
        """Sets the terminal_session_id of this V1StudioJob.


        :param terminal_session_id: The terminal_session_id of this V1StudioJob.  # noqa: E501
        :type: str
        """

        self._terminal_session_id = terminal_session_id

    @property
    def updated_at(self) -> 'datetime':
        """Gets the updated_at of this V1StudioJob.  # noqa: E501


        :return: The updated_at of this V1StudioJob.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: 'datetime'):
        """Sets the updated_at of this V1StudioJob.


        :param updated_at: The updated_at of this V1StudioJob.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def user_id(self) -> 'str':
        """Gets the user_id of this V1StudioJob.  # noqa: E501


        :return: The user_id of this V1StudioJob.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: 'str'):
        """Sets the user_id of this V1StudioJob.


        :param user_id: The user_id of this V1StudioJob.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1StudioJob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1StudioJob') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1StudioJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1StudioJob') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
