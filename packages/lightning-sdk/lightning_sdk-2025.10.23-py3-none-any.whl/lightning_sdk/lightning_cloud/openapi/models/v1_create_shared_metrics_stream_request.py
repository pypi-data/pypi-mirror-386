# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1CreateSharedMetricsStreamRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allowed_org_id': 'str',
        'allowed_user_ids': 'list[str]',
        'metrics_stream_id': 'str',
        'public': 'bool'
    }

    attribute_map = {
        'allowed_org_id': 'allowedOrgId',
        'allowed_user_ids': 'allowedUserIds',
        'metrics_stream_id': 'metricsStreamId',
        'public': 'public'
    }

    def __init__(self, allowed_org_id: 'str' =None, allowed_user_ids: 'list[str]' =None, metrics_stream_id: 'str' =None, public: 'bool' =None):  # noqa: E501
        """V1CreateSharedMetricsStreamRequest - a model defined in Swagger"""  # noqa: E501
        self._allowed_org_id = None
        self._allowed_user_ids = None
        self._metrics_stream_id = None
        self._public = None
        self.discriminator = None
        if allowed_org_id is not None:
            self.allowed_org_id = allowed_org_id
        if allowed_user_ids is not None:
            self.allowed_user_ids = allowed_user_ids
        if metrics_stream_id is not None:
            self.metrics_stream_id = metrics_stream_id
        if public is not None:
            self.public = public

    @property
    def allowed_org_id(self) -> 'str':
        """Gets the allowed_org_id of this V1CreateSharedMetricsStreamRequest.  # noqa: E501


        :return: The allowed_org_id of this V1CreateSharedMetricsStreamRequest.  # noqa: E501
        :rtype: str
        """
        return self._allowed_org_id

    @allowed_org_id.setter
    def allowed_org_id(self, allowed_org_id: 'str'):
        """Sets the allowed_org_id of this V1CreateSharedMetricsStreamRequest.


        :param allowed_org_id: The allowed_org_id of this V1CreateSharedMetricsStreamRequest.  # noqa: E501
        :type: str
        """

        self._allowed_org_id = allowed_org_id

    @property
    def allowed_user_ids(self) -> 'list[str]':
        """Gets the allowed_user_ids of this V1CreateSharedMetricsStreamRequest.  # noqa: E501


        :return: The allowed_user_ids of this V1CreateSharedMetricsStreamRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_user_ids

    @allowed_user_ids.setter
    def allowed_user_ids(self, allowed_user_ids: 'list[str]'):
        """Sets the allowed_user_ids of this V1CreateSharedMetricsStreamRequest.


        :param allowed_user_ids: The allowed_user_ids of this V1CreateSharedMetricsStreamRequest.  # noqa: E501
        :type: list[str]
        """

        self._allowed_user_ids = allowed_user_ids

    @property
    def metrics_stream_id(self) -> 'str':
        """Gets the metrics_stream_id of this V1CreateSharedMetricsStreamRequest.  # noqa: E501


        :return: The metrics_stream_id of this V1CreateSharedMetricsStreamRequest.  # noqa: E501
        :rtype: str
        """
        return self._metrics_stream_id

    @metrics_stream_id.setter
    def metrics_stream_id(self, metrics_stream_id: 'str'):
        """Sets the metrics_stream_id of this V1CreateSharedMetricsStreamRequest.


        :param metrics_stream_id: The metrics_stream_id of this V1CreateSharedMetricsStreamRequest.  # noqa: E501
        :type: str
        """

        self._metrics_stream_id = metrics_stream_id

    @property
    def public(self) -> 'bool':
        """Gets the public of this V1CreateSharedMetricsStreamRequest.  # noqa: E501


        :return: The public of this V1CreateSharedMetricsStreamRequest.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public: 'bool'):
        """Sets the public of this V1CreateSharedMetricsStreamRequest.


        :param public: The public of this V1CreateSharedMetricsStreamRequest.  # noqa: E501
        :type: bool
        """

        self._public = public

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1CreateSharedMetricsStreamRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1CreateSharedMetricsStreamRequest') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1CreateSharedMetricsStreamRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1CreateSharedMetricsStreamRequest') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
