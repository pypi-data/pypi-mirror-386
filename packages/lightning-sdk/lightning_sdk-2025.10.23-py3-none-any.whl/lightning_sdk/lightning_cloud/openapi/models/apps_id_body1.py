# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class AppsIdBody1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_id': 'str',
        'keep_machines_after_stop': 'bool',
        'machines_reservation_time_minutes': 'str',
        'plugin_arguments': 'dict(str, str)',
        'service_id': 'str',
        'source_app': 'str',
        'unique_id': 'str'
    }

    attribute_map = {
        'cluster_id': 'clusterId',
        'keep_machines_after_stop': 'keepMachinesAfterStop',
        'machines_reservation_time_minutes': 'machinesReservationTimeMinutes',
        'plugin_arguments': 'pluginArguments',
        'service_id': 'serviceId',
        'source_app': 'sourceApp',
        'unique_id': 'uniqueId'
    }

    def __init__(self, cluster_id: 'str' =None, keep_machines_after_stop: 'bool' =None, machines_reservation_time_minutes: 'str' =None, plugin_arguments: 'dict(str, str)' =None, service_id: 'str' =None, source_app: 'str' =None, unique_id: 'str' =None):  # noqa: E501
        """AppsIdBody1 - a model defined in Swagger"""  # noqa: E501
        self._cluster_id = None
        self._keep_machines_after_stop = None
        self._machines_reservation_time_minutes = None
        self._plugin_arguments = None
        self._service_id = None
        self._source_app = None
        self._unique_id = None
        self.discriminator = None
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if keep_machines_after_stop is not None:
            self.keep_machines_after_stop = keep_machines_after_stop
        if machines_reservation_time_minutes is not None:
            self.machines_reservation_time_minutes = machines_reservation_time_minutes
        if plugin_arguments is not None:
            self.plugin_arguments = plugin_arguments
        if service_id is not None:
            self.service_id = service_id
        if source_app is not None:
            self.source_app = source_app
        if unique_id is not None:
            self.unique_id = unique_id

    @property
    def cluster_id(self) -> 'str':
        """Gets the cluster_id of this AppsIdBody1.  # noqa: E501


        :return: The cluster_id of this AppsIdBody1.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id: 'str'):
        """Sets the cluster_id of this AppsIdBody1.


        :param cluster_id: The cluster_id of this AppsIdBody1.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def keep_machines_after_stop(self) -> 'bool':
        """Gets the keep_machines_after_stop of this AppsIdBody1.  # noqa: E501


        :return: The keep_machines_after_stop of this AppsIdBody1.  # noqa: E501
        :rtype: bool
        """
        return self._keep_machines_after_stop

    @keep_machines_after_stop.setter
    def keep_machines_after_stop(self, keep_machines_after_stop: 'bool'):
        """Sets the keep_machines_after_stop of this AppsIdBody1.


        :param keep_machines_after_stop: The keep_machines_after_stop of this AppsIdBody1.  # noqa: E501
        :type: bool
        """

        self._keep_machines_after_stop = keep_machines_after_stop

    @property
    def machines_reservation_time_minutes(self) -> 'str':
        """Gets the machines_reservation_time_minutes of this AppsIdBody1.  # noqa: E501


        :return: The machines_reservation_time_minutes of this AppsIdBody1.  # noqa: E501
        :rtype: str
        """
        return self._machines_reservation_time_minutes

    @machines_reservation_time_minutes.setter
    def machines_reservation_time_minutes(self, machines_reservation_time_minutes: 'str'):
        """Sets the machines_reservation_time_minutes of this AppsIdBody1.


        :param machines_reservation_time_minutes: The machines_reservation_time_minutes of this AppsIdBody1.  # noqa: E501
        :type: str
        """

        self._machines_reservation_time_minutes = machines_reservation_time_minutes

    @property
    def plugin_arguments(self) -> 'dict(str, str)':
        """Gets the plugin_arguments of this AppsIdBody1.  # noqa: E501


        :return: The plugin_arguments of this AppsIdBody1.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._plugin_arguments

    @plugin_arguments.setter
    def plugin_arguments(self, plugin_arguments: 'dict(str, str)'):
        """Sets the plugin_arguments of this AppsIdBody1.


        :param plugin_arguments: The plugin_arguments of this AppsIdBody1.  # noqa: E501
        :type: dict(str, str)
        """

        self._plugin_arguments = plugin_arguments

    @property
    def service_id(self) -> 'str':
        """Gets the service_id of this AppsIdBody1.  # noqa: E501


        :return: The service_id of this AppsIdBody1.  # noqa: E501
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id: 'str'):
        """Sets the service_id of this AppsIdBody1.


        :param service_id: The service_id of this AppsIdBody1.  # noqa: E501
        :type: str
        """

        self._service_id = service_id

    @property
    def source_app(self) -> 'str':
        """Gets the source_app of this AppsIdBody1.  # noqa: E501


        :return: The source_app of this AppsIdBody1.  # noqa: E501
        :rtype: str
        """
        return self._source_app

    @source_app.setter
    def source_app(self, source_app: 'str'):
        """Sets the source_app of this AppsIdBody1.


        :param source_app: The source_app of this AppsIdBody1.  # noqa: E501
        :type: str
        """

        self._source_app = source_app

    @property
    def unique_id(self) -> 'str':
        """Gets the unique_id of this AppsIdBody1.  # noqa: E501


        :return: The unique_id of this AppsIdBody1.  # noqa: E501
        :rtype: str
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id: 'str'):
        """Sets the unique_id of this AppsIdBody1.


        :param unique_id: The unique_id of this AppsIdBody1.  # noqa: E501
        :type: str
        """

        self._unique_id = unique_id

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppsIdBody1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'AppsIdBody1') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, AppsIdBody1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'AppsIdBody1') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
