# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class AssistantIdConversationsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_name': 'bool',
        'billing_project_id': 'str',
        'conversation_id': 'str',
        'ephemeral': 'bool',
        'internal_conversation': 'bool',
        'max_completion_tokens': 'str',
        'message': 'V1Message',
        'metadata': 'dict(str, str)',
        'name': 'str',
        'parent_conversation_id': 'str',
        'parent_message_id': 'str',
        'reasoning_effort': 'str',
        'sent_at': 'datetime',
        'store': 'bool',
        'stream': 'bool',
        'system_prompt': 'str',
        'tools': 'list[V1Tool]'
    }

    attribute_map = {
        'auto_name': 'autoName',
        'billing_project_id': 'billingProjectId',
        'conversation_id': 'conversationId',
        'ephemeral': 'ephemeral',
        'internal_conversation': 'internalConversation',
        'max_completion_tokens': 'maxCompletionTokens',
        'message': 'message',
        'metadata': 'metadata',
        'name': 'name',
        'parent_conversation_id': 'parentConversationId',
        'parent_message_id': 'parentMessageId',
        'reasoning_effort': 'reasoningEffort',
        'sent_at': 'sentAt',
        'store': 'store',
        'stream': 'stream',
        'system_prompt': 'systemPrompt',
        'tools': 'tools'
    }

    def __init__(self, auto_name: 'bool' =None, billing_project_id: 'str' =None, conversation_id: 'str' =None, ephemeral: 'bool' =None, internal_conversation: 'bool' =None, max_completion_tokens: 'str' =None, message: 'V1Message' =None, metadata: 'dict(str, str)' =None, name: 'str' =None, parent_conversation_id: 'str' =None, parent_message_id: 'str' =None, reasoning_effort: 'str' =None, sent_at: 'datetime' =None, store: 'bool' =None, stream: 'bool' =None, system_prompt: 'str' =None, tools: 'list[V1Tool]' =None):  # noqa: E501
        """AssistantIdConversationsBody - a model defined in Swagger"""  # noqa: E501
        self._auto_name = None
        self._billing_project_id = None
        self._conversation_id = None
        self._ephemeral = None
        self._internal_conversation = None
        self._max_completion_tokens = None
        self._message = None
        self._metadata = None
        self._name = None
        self._parent_conversation_id = None
        self._parent_message_id = None
        self._reasoning_effort = None
        self._sent_at = None
        self._store = None
        self._stream = None
        self._system_prompt = None
        self._tools = None
        self.discriminator = None
        if auto_name is not None:
            self.auto_name = auto_name
        if billing_project_id is not None:
            self.billing_project_id = billing_project_id
        if conversation_id is not None:
            self.conversation_id = conversation_id
        if ephemeral is not None:
            self.ephemeral = ephemeral
        if internal_conversation is not None:
            self.internal_conversation = internal_conversation
        if max_completion_tokens is not None:
            self.max_completion_tokens = max_completion_tokens
        if message is not None:
            self.message = message
        if metadata is not None:
            self.metadata = metadata
        if name is not None:
            self.name = name
        if parent_conversation_id is not None:
            self.parent_conversation_id = parent_conversation_id
        if parent_message_id is not None:
            self.parent_message_id = parent_message_id
        if reasoning_effort is not None:
            self.reasoning_effort = reasoning_effort
        if sent_at is not None:
            self.sent_at = sent_at
        if store is not None:
            self.store = store
        if stream is not None:
            self.stream = stream
        if system_prompt is not None:
            self.system_prompt = system_prompt
        if tools is not None:
            self.tools = tools

    @property
    def auto_name(self) -> 'bool':
        """Gets the auto_name of this AssistantIdConversationsBody.  # noqa: E501


        :return: The auto_name of this AssistantIdConversationsBody.  # noqa: E501
        :rtype: bool
        """
        return self._auto_name

    @auto_name.setter
    def auto_name(self, auto_name: 'bool'):
        """Sets the auto_name of this AssistantIdConversationsBody.


        :param auto_name: The auto_name of this AssistantIdConversationsBody.  # noqa: E501
        :type: bool
        """

        self._auto_name = auto_name

    @property
    def billing_project_id(self) -> 'str':
        """Gets the billing_project_id of this AssistantIdConversationsBody.  # noqa: E501


        :return: The billing_project_id of this AssistantIdConversationsBody.  # noqa: E501
        :rtype: str
        """
        return self._billing_project_id

    @billing_project_id.setter
    def billing_project_id(self, billing_project_id: 'str'):
        """Sets the billing_project_id of this AssistantIdConversationsBody.


        :param billing_project_id: The billing_project_id of this AssistantIdConversationsBody.  # noqa: E501
        :type: str
        """

        self._billing_project_id = billing_project_id

    @property
    def conversation_id(self) -> 'str':
        """Gets the conversation_id of this AssistantIdConversationsBody.  # noqa: E501


        :return: The conversation_id of this AssistantIdConversationsBody.  # noqa: E501
        :rtype: str
        """
        return self._conversation_id

    @conversation_id.setter
    def conversation_id(self, conversation_id: 'str'):
        """Sets the conversation_id of this AssistantIdConversationsBody.


        :param conversation_id: The conversation_id of this AssistantIdConversationsBody.  # noqa: E501
        :type: str
        """

        self._conversation_id = conversation_id

    @property
    def ephemeral(self) -> 'bool':
        """Gets the ephemeral of this AssistantIdConversationsBody.  # noqa: E501


        :return: The ephemeral of this AssistantIdConversationsBody.  # noqa: E501
        :rtype: bool
        """
        return self._ephemeral

    @ephemeral.setter
    def ephemeral(self, ephemeral: 'bool'):
        """Sets the ephemeral of this AssistantIdConversationsBody.


        :param ephemeral: The ephemeral of this AssistantIdConversationsBody.  # noqa: E501
        :type: bool
        """

        self._ephemeral = ephemeral

    @property
    def internal_conversation(self) -> 'bool':
        """Gets the internal_conversation of this AssistantIdConversationsBody.  # noqa: E501


        :return: The internal_conversation of this AssistantIdConversationsBody.  # noqa: E501
        :rtype: bool
        """
        return self._internal_conversation

    @internal_conversation.setter
    def internal_conversation(self, internal_conversation: 'bool'):
        """Sets the internal_conversation of this AssistantIdConversationsBody.


        :param internal_conversation: The internal_conversation of this AssistantIdConversationsBody.  # noqa: E501
        :type: bool
        """

        self._internal_conversation = internal_conversation

    @property
    def max_completion_tokens(self) -> 'str':
        """Gets the max_completion_tokens of this AssistantIdConversationsBody.  # noqa: E501


        :return: The max_completion_tokens of this AssistantIdConversationsBody.  # noqa: E501
        :rtype: str
        """
        return self._max_completion_tokens

    @max_completion_tokens.setter
    def max_completion_tokens(self, max_completion_tokens: 'str'):
        """Sets the max_completion_tokens of this AssistantIdConversationsBody.


        :param max_completion_tokens: The max_completion_tokens of this AssistantIdConversationsBody.  # noqa: E501
        :type: str
        """

        self._max_completion_tokens = max_completion_tokens

    @property
    def message(self) -> 'V1Message':
        """Gets the message of this AssistantIdConversationsBody.  # noqa: E501


        :return: The message of this AssistantIdConversationsBody.  # noqa: E501
        :rtype: V1Message
        """
        return self._message

    @message.setter
    def message(self, message: 'V1Message'):
        """Sets the message of this AssistantIdConversationsBody.


        :param message: The message of this AssistantIdConversationsBody.  # noqa: E501
        :type: V1Message
        """

        self._message = message

    @property
    def metadata(self) -> 'dict(str, str)':
        """Gets the metadata of this AssistantIdConversationsBody.  # noqa: E501


        :return: The metadata of this AssistantIdConversationsBody.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: 'dict(str, str)'):
        """Sets the metadata of this AssistantIdConversationsBody.


        :param metadata: The metadata of this AssistantIdConversationsBody.  # noqa: E501
        :type: dict(str, str)
        """

        self._metadata = metadata

    @property
    def name(self) -> 'str':
        """Gets the name of this AssistantIdConversationsBody.  # noqa: E501


        :return: The name of this AssistantIdConversationsBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this AssistantIdConversationsBody.


        :param name: The name of this AssistantIdConversationsBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def parent_conversation_id(self) -> 'str':
        """Gets the parent_conversation_id of this AssistantIdConversationsBody.  # noqa: E501


        :return: The parent_conversation_id of this AssistantIdConversationsBody.  # noqa: E501
        :rtype: str
        """
        return self._parent_conversation_id

    @parent_conversation_id.setter
    def parent_conversation_id(self, parent_conversation_id: 'str'):
        """Sets the parent_conversation_id of this AssistantIdConversationsBody.


        :param parent_conversation_id: The parent_conversation_id of this AssistantIdConversationsBody.  # noqa: E501
        :type: str
        """

        self._parent_conversation_id = parent_conversation_id

    @property
    def parent_message_id(self) -> 'str':
        """Gets the parent_message_id of this AssistantIdConversationsBody.  # noqa: E501


        :return: The parent_message_id of this AssistantIdConversationsBody.  # noqa: E501
        :rtype: str
        """
        return self._parent_message_id

    @parent_message_id.setter
    def parent_message_id(self, parent_message_id: 'str'):
        """Sets the parent_message_id of this AssistantIdConversationsBody.


        :param parent_message_id: The parent_message_id of this AssistantIdConversationsBody.  # noqa: E501
        :type: str
        """

        self._parent_message_id = parent_message_id

    @property
    def reasoning_effort(self) -> 'str':
        """Gets the reasoning_effort of this AssistantIdConversationsBody.  # noqa: E501


        :return: The reasoning_effort of this AssistantIdConversationsBody.  # noqa: E501
        :rtype: str
        """
        return self._reasoning_effort

    @reasoning_effort.setter
    def reasoning_effort(self, reasoning_effort: 'str'):
        """Sets the reasoning_effort of this AssistantIdConversationsBody.


        :param reasoning_effort: The reasoning_effort of this AssistantIdConversationsBody.  # noqa: E501
        :type: str
        """

        self._reasoning_effort = reasoning_effort

    @property
    def sent_at(self) -> 'datetime':
        """Gets the sent_at of this AssistantIdConversationsBody.  # noqa: E501


        :return: The sent_at of this AssistantIdConversationsBody.  # noqa: E501
        :rtype: datetime
        """
        return self._sent_at

    @sent_at.setter
    def sent_at(self, sent_at: 'datetime'):
        """Sets the sent_at of this AssistantIdConversationsBody.


        :param sent_at: The sent_at of this AssistantIdConversationsBody.  # noqa: E501
        :type: datetime
        """

        self._sent_at = sent_at

    @property
    def store(self) -> 'bool':
        """Gets the store of this AssistantIdConversationsBody.  # noqa: E501


        :return: The store of this AssistantIdConversationsBody.  # noqa: E501
        :rtype: bool
        """
        return self._store

    @store.setter
    def store(self, store: 'bool'):
        """Sets the store of this AssistantIdConversationsBody.


        :param store: The store of this AssistantIdConversationsBody.  # noqa: E501
        :type: bool
        """

        self._store = store

    @property
    def stream(self) -> 'bool':
        """Gets the stream of this AssistantIdConversationsBody.  # noqa: E501


        :return: The stream of this AssistantIdConversationsBody.  # noqa: E501
        :rtype: bool
        """
        return self._stream

    @stream.setter
    def stream(self, stream: 'bool'):
        """Sets the stream of this AssistantIdConversationsBody.


        :param stream: The stream of this AssistantIdConversationsBody.  # noqa: E501
        :type: bool
        """

        self._stream = stream

    @property
    def system_prompt(self) -> 'str':
        """Gets the system_prompt of this AssistantIdConversationsBody.  # noqa: E501


        :return: The system_prompt of this AssistantIdConversationsBody.  # noqa: E501
        :rtype: str
        """
        return self._system_prompt

    @system_prompt.setter
    def system_prompt(self, system_prompt: 'str'):
        """Sets the system_prompt of this AssistantIdConversationsBody.


        :param system_prompt: The system_prompt of this AssistantIdConversationsBody.  # noqa: E501
        :type: str
        """

        self._system_prompt = system_prompt

    @property
    def tools(self) -> 'list[V1Tool]':
        """Gets the tools of this AssistantIdConversationsBody.  # noqa: E501


        :return: The tools of this AssistantIdConversationsBody.  # noqa: E501
        :rtype: list[V1Tool]
        """
        return self._tools

    @tools.setter
    def tools(self, tools: 'list[V1Tool]'):
        """Sets the tools of this AssistantIdConversationsBody.


        :param tools: The tools of this AssistantIdConversationsBody.  # noqa: E501
        :type: list[V1Tool]
        """

        self._tools = tools

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssistantIdConversationsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'AssistantIdConversationsBody') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, AssistantIdConversationsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'AssistantIdConversationsBody') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
