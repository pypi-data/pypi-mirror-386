# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1GetUserBalanceResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'balance': 'float',
        'total_spent': 'float',
        'transactions': 'list[V1Transaction]'
    }

    attribute_map = {
        'account_id': 'accountId',
        'balance': 'balance',
        'total_spent': 'totalSpent',
        'transactions': 'transactions'
    }

    def __init__(self, account_id: 'str' =None, balance: 'float' =None, total_spent: 'float' =None, transactions: 'list[V1Transaction]' =None):  # noqa: E501
        """V1GetUserBalanceResponse - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._balance = None
        self._total_spent = None
        self._transactions = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if balance is not None:
            self.balance = balance
        if total_spent is not None:
            self.total_spent = total_spent
        if transactions is not None:
            self.transactions = transactions

    @property
    def account_id(self) -> 'str':
        """Gets the account_id of this V1GetUserBalanceResponse.  # noqa: E501


        :return: The account_id of this V1GetUserBalanceResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id: 'str'):
        """Sets the account_id of this V1GetUserBalanceResponse.


        :param account_id: The account_id of this V1GetUserBalanceResponse.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def balance(self) -> 'float':
        """Gets the balance of this V1GetUserBalanceResponse.  # noqa: E501


        :return: The balance of this V1GetUserBalanceResponse.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance: 'float'):
        """Sets the balance of this V1GetUserBalanceResponse.


        :param balance: The balance of this V1GetUserBalanceResponse.  # noqa: E501
        :type: float
        """

        self._balance = balance

    @property
    def total_spent(self) -> 'float':
        """Gets the total_spent of this V1GetUserBalanceResponse.  # noqa: E501


        :return: The total_spent of this V1GetUserBalanceResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_spent

    @total_spent.setter
    def total_spent(self, total_spent: 'float'):
        """Sets the total_spent of this V1GetUserBalanceResponse.


        :param total_spent: The total_spent of this V1GetUserBalanceResponse.  # noqa: E501
        :type: float
        """

        self._total_spent = total_spent

    @property
    def transactions(self) -> 'list[V1Transaction]':
        """Gets the transactions of this V1GetUserBalanceResponse.  # noqa: E501


        :return: The transactions of this V1GetUserBalanceResponse.  # noqa: E501
        :rtype: list[V1Transaction]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions: 'list[V1Transaction]'):
        """Sets the transactions of this V1GetUserBalanceResponse.


        :param transactions: The transactions of this V1GetUserBalanceResponse.  # noqa: E501
        :type: list[V1Transaction]
        """

        self._transactions = transactions

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1GetUserBalanceResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1GetUserBalanceResponse') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1GetUserBalanceResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1GetUserBalanceResponse') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
