# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1CloudSpaceVersionPublication(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cloud_space_version_id': 'str',
        'featured': 'bool',
        'org_id': 'str',
        'type': 'V1CloudSpacePublicationType'
    }

    attribute_map = {
        'cloud_space_version_id': 'cloudSpaceVersionId',
        'featured': 'featured',
        'org_id': 'orgId',
        'type': 'type'
    }

    def __init__(self, cloud_space_version_id: 'str' =None, featured: 'bool' =None, org_id: 'str' =None, type: 'V1CloudSpacePublicationType' =None):  # noqa: E501
        """V1CloudSpaceVersionPublication - a model defined in Swagger"""  # noqa: E501
        self._cloud_space_version_id = None
        self._featured = None
        self._org_id = None
        self._type = None
        self.discriminator = None
        if cloud_space_version_id is not None:
            self.cloud_space_version_id = cloud_space_version_id
        if featured is not None:
            self.featured = featured
        if org_id is not None:
            self.org_id = org_id
        if type is not None:
            self.type = type

    @property
    def cloud_space_version_id(self) -> 'str':
        """Gets the cloud_space_version_id of this V1CloudSpaceVersionPublication.  # noqa: E501


        :return: The cloud_space_version_id of this V1CloudSpaceVersionPublication.  # noqa: E501
        :rtype: str
        """
        return self._cloud_space_version_id

    @cloud_space_version_id.setter
    def cloud_space_version_id(self, cloud_space_version_id: 'str'):
        """Sets the cloud_space_version_id of this V1CloudSpaceVersionPublication.


        :param cloud_space_version_id: The cloud_space_version_id of this V1CloudSpaceVersionPublication.  # noqa: E501
        :type: str
        """

        self._cloud_space_version_id = cloud_space_version_id

    @property
    def featured(self) -> 'bool':
        """Gets the featured of this V1CloudSpaceVersionPublication.  # noqa: E501


        :return: The featured of this V1CloudSpaceVersionPublication.  # noqa: E501
        :rtype: bool
        """
        return self._featured

    @featured.setter
    def featured(self, featured: 'bool'):
        """Sets the featured of this V1CloudSpaceVersionPublication.


        :param featured: The featured of this V1CloudSpaceVersionPublication.  # noqa: E501
        :type: bool
        """

        self._featured = featured

    @property
    def org_id(self) -> 'str':
        """Gets the org_id of this V1CloudSpaceVersionPublication.  # noqa: E501


        :return: The org_id of this V1CloudSpaceVersionPublication.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id: 'str'):
        """Sets the org_id of this V1CloudSpaceVersionPublication.


        :param org_id: The org_id of this V1CloudSpaceVersionPublication.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def type(self) -> 'V1CloudSpacePublicationType':
        """Gets the type of this V1CloudSpaceVersionPublication.  # noqa: E501


        :return: The type of this V1CloudSpaceVersionPublication.  # noqa: E501
        :rtype: V1CloudSpacePublicationType
        """
        return self._type

    @type.setter
    def type(self, type: 'V1CloudSpacePublicationType'):
        """Sets the type of this V1CloudSpaceVersionPublication.


        :param type: The type of this V1CloudSpaceVersionPublication.  # noqa: E501
        :type: V1CloudSpacePublicationType
        """

        self._type = type

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1CloudSpaceVersionPublication, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1CloudSpaceVersionPublication') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1CloudSpaceVersionPublication):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1CloudSpaceVersionPublication') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
