# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1LitRepository(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'artifact_count': 'str',
        'artifacts': 'list[V1LitRegistryArtifact]',
        'cluster_id': 'str',
        'creation_time': 'datetime',
        'description': 'str',
        'id': 'str',
        'latest_artifact': 'V1LitRegistryArtifact',
        'name': 'str',
        'pull_count': 'str',
        'update_time': 'datetime'
    }

    attribute_map = {
        'artifact_count': 'artifactCount',
        'artifacts': 'artifacts',
        'cluster_id': 'clusterId',
        'creation_time': 'creationTime',
        'description': 'description',
        'id': 'id',
        'latest_artifact': 'latestArtifact',
        'name': 'name',
        'pull_count': 'pullCount',
        'update_time': 'updateTime'
    }

    def __init__(self, artifact_count: 'str' =None, artifacts: 'list[V1LitRegistryArtifact]' =None, cluster_id: 'str' =None, creation_time: 'datetime' =None, description: 'str' =None, id: 'str' =None, latest_artifact: 'V1LitRegistryArtifact' =None, name: 'str' =None, pull_count: 'str' =None, update_time: 'datetime' =None):  # noqa: E501
        """V1LitRepository - a model defined in Swagger"""  # noqa: E501
        self._artifact_count = None
        self._artifacts = None
        self._cluster_id = None
        self._creation_time = None
        self._description = None
        self._id = None
        self._latest_artifact = None
        self._name = None
        self._pull_count = None
        self._update_time = None
        self.discriminator = None
        if artifact_count is not None:
            self.artifact_count = artifact_count
        if artifacts is not None:
            self.artifacts = artifacts
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if creation_time is not None:
            self.creation_time = creation_time
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if latest_artifact is not None:
            self.latest_artifact = latest_artifact
        if name is not None:
            self.name = name
        if pull_count is not None:
            self.pull_count = pull_count
        if update_time is not None:
            self.update_time = update_time

    @property
    def artifact_count(self) -> 'str':
        """Gets the artifact_count of this V1LitRepository.  # noqa: E501


        :return: The artifact_count of this V1LitRepository.  # noqa: E501
        :rtype: str
        """
        return self._artifact_count

    @artifact_count.setter
    def artifact_count(self, artifact_count: 'str'):
        """Sets the artifact_count of this V1LitRepository.


        :param artifact_count: The artifact_count of this V1LitRepository.  # noqa: E501
        :type: str
        """

        self._artifact_count = artifact_count

    @property
    def artifacts(self) -> 'list[V1LitRegistryArtifact]':
        """Gets the artifacts of this V1LitRepository.  # noqa: E501

        All artifacts for this repo, this plus lit registry are coming from behind the scenes listLitRegistryRepositoryImageArtifactVersions. We'll use these for a complete view of all registry container artifacts vs the UI having to make the calls separately.  # noqa: E501

        :return: The artifacts of this V1LitRepository.  # noqa: E501
        :rtype: list[V1LitRegistryArtifact]
        """
        return self._artifacts

    @artifacts.setter
    def artifacts(self, artifacts: 'list[V1LitRegistryArtifact]'):
        """Sets the artifacts of this V1LitRepository.

        All artifacts for this repo, this plus lit registry are coming from behind the scenes listLitRegistryRepositoryImageArtifactVersions. We'll use these for a complete view of all registry container artifacts vs the UI having to make the calls separately.  # noqa: E501

        :param artifacts: The artifacts of this V1LitRepository.  # noqa: E501
        :type: list[V1LitRegistryArtifact]
        """

        self._artifacts = artifacts

    @property
    def cluster_id(self) -> 'str':
        """Gets the cluster_id of this V1LitRepository.  # noqa: E501


        :return: The cluster_id of this V1LitRepository.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id: 'str'):
        """Sets the cluster_id of this V1LitRepository.


        :param cluster_id: The cluster_id of this V1LitRepository.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def creation_time(self) -> 'datetime':
        """Gets the creation_time of this V1LitRepository.  # noqa: E501


        :return: The creation_time of this V1LitRepository.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time: 'datetime'):
        """Sets the creation_time of this V1LitRepository.


        :param creation_time: The creation_time of this V1LitRepository.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def description(self) -> 'str':
        """Gets the description of this V1LitRepository.  # noqa: E501


        :return: The description of this V1LitRepository.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: 'str'):
        """Sets the description of this V1LitRepository.


        :param description: The description of this V1LitRepository.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self) -> 'str':
        """Gets the id of this V1LitRepository.  # noqa: E501


        :return: The id of this V1LitRepository.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1LitRepository.


        :param id: The id of this V1LitRepository.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def latest_artifact(self) -> 'V1LitRegistryArtifact':
        """Gets the latest_artifact of this V1LitRepository.  # noqa: E501


        :return: The latest_artifact of this V1LitRepository.  # noqa: E501
        :rtype: V1LitRegistryArtifact
        """
        return self._latest_artifact

    @latest_artifact.setter
    def latest_artifact(self, latest_artifact: 'V1LitRegistryArtifact'):
        """Sets the latest_artifact of this V1LitRepository.


        :param latest_artifact: The latest_artifact of this V1LitRepository.  # noqa: E501
        :type: V1LitRegistryArtifact
        """

        self._latest_artifact = latest_artifact

    @property
    def name(self) -> 'str':
        """Gets the name of this V1LitRepository.  # noqa: E501


        :return: The name of this V1LitRepository.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1LitRepository.


        :param name: The name of this V1LitRepository.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def pull_count(self) -> 'str':
        """Gets the pull_count of this V1LitRepository.  # noqa: E501


        :return: The pull_count of this V1LitRepository.  # noqa: E501
        :rtype: str
        """
        return self._pull_count

    @pull_count.setter
    def pull_count(self, pull_count: 'str'):
        """Sets the pull_count of this V1LitRepository.


        :param pull_count: The pull_count of this V1LitRepository.  # noqa: E501
        :type: str
        """

        self._pull_count = pull_count

    @property
    def update_time(self) -> 'datetime':
        """Gets the update_time of this V1LitRepository.  # noqa: E501


        :return: The update_time of this V1LitRepository.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time: 'datetime'):
        """Sets the update_time of this V1LitRepository.


        :param update_time: The update_time of this V1LitRepository.  # noqa: E501
        :type: datetime
        """

        self._update_time = update_time

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1LitRepository, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1LitRepository') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1LitRepository):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1LitRepository') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
