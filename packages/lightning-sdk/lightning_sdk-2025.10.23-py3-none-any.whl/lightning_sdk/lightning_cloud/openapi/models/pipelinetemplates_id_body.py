# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class PipelinetemplatesIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'about_page_content': 'str',
        'description': 'str',
        'featured': 'bool',
        'image_url': 'str',
        'name': 'str',
        'org_id': 'str',
        'thumbnail': 'str',
        'thumbnail_file_type': 'str',
        'visibility': 'V1PipelineTemplateVisibilityType'
    }

    attribute_map = {
        'about_page_content': 'aboutPageContent',
        'description': 'description',
        'featured': 'featured',
        'image_url': 'imageUrl',
        'name': 'name',
        'org_id': 'orgId',
        'thumbnail': 'thumbnail',
        'thumbnail_file_type': 'thumbnailFileType',
        'visibility': 'visibility'
    }

    def __init__(self, about_page_content: 'str' =None, description: 'str' =None, featured: 'bool' =None, image_url: 'str' =None, name: 'str' =None, org_id: 'str' =None, thumbnail: 'str' =None, thumbnail_file_type: 'str' =None, visibility: 'V1PipelineTemplateVisibilityType' =None):  # noqa: E501
        """PipelinetemplatesIdBody - a model defined in Swagger"""  # noqa: E501
        self._about_page_content = None
        self._description = None
        self._featured = None
        self._image_url = None
        self._name = None
        self._org_id = None
        self._thumbnail = None
        self._thumbnail_file_type = None
        self._visibility = None
        self.discriminator = None
        if about_page_content is not None:
            self.about_page_content = about_page_content
        if description is not None:
            self.description = description
        if featured is not None:
            self.featured = featured
        if image_url is not None:
            self.image_url = image_url
        if name is not None:
            self.name = name
        if org_id is not None:
            self.org_id = org_id
        if thumbnail is not None:
            self.thumbnail = thumbnail
        if thumbnail_file_type is not None:
            self.thumbnail_file_type = thumbnail_file_type
        if visibility is not None:
            self.visibility = visibility

    @property
    def about_page_content(self) -> 'str':
        """Gets the about_page_content of this PipelinetemplatesIdBody.  # noqa: E501


        :return: The about_page_content of this PipelinetemplatesIdBody.  # noqa: E501
        :rtype: str
        """
        return self._about_page_content

    @about_page_content.setter
    def about_page_content(self, about_page_content: 'str'):
        """Sets the about_page_content of this PipelinetemplatesIdBody.


        :param about_page_content: The about_page_content of this PipelinetemplatesIdBody.  # noqa: E501
        :type: str
        """

        self._about_page_content = about_page_content

    @property
    def description(self) -> 'str':
        """Gets the description of this PipelinetemplatesIdBody.  # noqa: E501


        :return: The description of this PipelinetemplatesIdBody.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: 'str'):
        """Sets the description of this PipelinetemplatesIdBody.


        :param description: The description of this PipelinetemplatesIdBody.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def featured(self) -> 'bool':
        """Gets the featured of this PipelinetemplatesIdBody.  # noqa: E501


        :return: The featured of this PipelinetemplatesIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._featured

    @featured.setter
    def featured(self, featured: 'bool'):
        """Sets the featured of this PipelinetemplatesIdBody.


        :param featured: The featured of this PipelinetemplatesIdBody.  # noqa: E501
        :type: bool
        """

        self._featured = featured

    @property
    def image_url(self) -> 'str':
        """Gets the image_url of this PipelinetemplatesIdBody.  # noqa: E501


        :return: The image_url of this PipelinetemplatesIdBody.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url: 'str'):
        """Sets the image_url of this PipelinetemplatesIdBody.


        :param image_url: The image_url of this PipelinetemplatesIdBody.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def name(self) -> 'str':
        """Gets the name of this PipelinetemplatesIdBody.  # noqa: E501


        :return: The name of this PipelinetemplatesIdBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this PipelinetemplatesIdBody.


        :param name: The name of this PipelinetemplatesIdBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def org_id(self) -> 'str':
        """Gets the org_id of this PipelinetemplatesIdBody.  # noqa: E501


        :return: The org_id of this PipelinetemplatesIdBody.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id: 'str'):
        """Sets the org_id of this PipelinetemplatesIdBody.


        :param org_id: The org_id of this PipelinetemplatesIdBody.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def thumbnail(self) -> 'str':
        """Gets the thumbnail of this PipelinetemplatesIdBody.  # noqa: E501


        :return: The thumbnail of this PipelinetemplatesIdBody.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail: 'str'):
        """Sets the thumbnail of this PipelinetemplatesIdBody.


        :param thumbnail: The thumbnail of this PipelinetemplatesIdBody.  # noqa: E501
        :type: str
        """

        self._thumbnail = thumbnail

    @property
    def thumbnail_file_type(self) -> 'str':
        """Gets the thumbnail_file_type of this PipelinetemplatesIdBody.  # noqa: E501


        :return: The thumbnail_file_type of this PipelinetemplatesIdBody.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_file_type

    @thumbnail_file_type.setter
    def thumbnail_file_type(self, thumbnail_file_type: 'str'):
        """Sets the thumbnail_file_type of this PipelinetemplatesIdBody.


        :param thumbnail_file_type: The thumbnail_file_type of this PipelinetemplatesIdBody.  # noqa: E501
        :type: str
        """

        self._thumbnail_file_type = thumbnail_file_type

    @property
    def visibility(self) -> 'V1PipelineTemplateVisibilityType':
        """Gets the visibility of this PipelinetemplatesIdBody.  # noqa: E501


        :return: The visibility of this PipelinetemplatesIdBody.  # noqa: E501
        :rtype: V1PipelineTemplateVisibilityType
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility: 'V1PipelineTemplateVisibilityType'):
        """Sets the visibility of this PipelinetemplatesIdBody.


        :param visibility: The visibility of this PipelinetemplatesIdBody.  # noqa: E501
        :type: V1PipelineTemplateVisibilityType
        """

        self._visibility = visibility

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PipelinetemplatesIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'PipelinetemplatesIdBody') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, PipelinetemplatesIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'PipelinetemplatesIdBody') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
