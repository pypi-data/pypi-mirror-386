# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class Update(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allowed_machines': 'list[str]',
        'default_machine': 'str',
        'description': 'str',
        'disabled': 'bool',
        'environment_type': 'V1CloudSpaceEnvironmentType',
        'icon': 'str',
        'initial_setup_script_text': 'str',
        'machine_image_version': 'str',
        'name': 'str',
        'org_id': 'str',
        'plugins': 'list[str]',
        'setup_script_text': 'str',
        'specialized_view': 'V1CloudSpaceSpecializedView'
    }

    attribute_map = {
        'allowed_machines': 'allowedMachines',
        'default_machine': 'defaultMachine',
        'description': 'description',
        'disabled': 'disabled',
        'environment_type': 'environmentType',
        'icon': 'icon',
        'initial_setup_script_text': 'initialSetupScriptText',
        'machine_image_version': 'machineImageVersion',
        'name': 'name',
        'org_id': 'orgId',
        'plugins': 'plugins',
        'setup_script_text': 'setupScriptText',
        'specialized_view': 'specializedView'
    }

    def __init__(self, allowed_machines: 'list[str]' =None, default_machine: 'str' =None, description: 'str' =None, disabled: 'bool' =None, environment_type: 'V1CloudSpaceEnvironmentType' =None, icon: 'str' =None, initial_setup_script_text: 'str' =None, machine_image_version: 'str' =None, name: 'str' =None, org_id: 'str' =None, plugins: 'list[str]' =None, setup_script_text: 'str' =None, specialized_view: 'V1CloudSpaceSpecializedView' =None):  # noqa: E501
        """Update - a model defined in Swagger"""  # noqa: E501
        self._allowed_machines = None
        self._default_machine = None
        self._description = None
        self._disabled = None
        self._environment_type = None
        self._icon = None
        self._initial_setup_script_text = None
        self._machine_image_version = None
        self._name = None
        self._org_id = None
        self._plugins = None
        self._setup_script_text = None
        self._specialized_view = None
        self.discriminator = None
        if allowed_machines is not None:
            self.allowed_machines = allowed_machines
        if default_machine is not None:
            self.default_machine = default_machine
        if description is not None:
            self.description = description
        if disabled is not None:
            self.disabled = disabled
        if environment_type is not None:
            self.environment_type = environment_type
        if icon is not None:
            self.icon = icon
        if initial_setup_script_text is not None:
            self.initial_setup_script_text = initial_setup_script_text
        if machine_image_version is not None:
            self.machine_image_version = machine_image_version
        if name is not None:
            self.name = name
        if org_id is not None:
            self.org_id = org_id
        if plugins is not None:
            self.plugins = plugins
        if setup_script_text is not None:
            self.setup_script_text = setup_script_text
        if specialized_view is not None:
            self.specialized_view = specialized_view

    @property
    def allowed_machines(self) -> 'list[str]':
        """Gets the allowed_machines of this Update.  # noqa: E501


        :return: The allowed_machines of this Update.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_machines

    @allowed_machines.setter
    def allowed_machines(self, allowed_machines: 'list[str]'):
        """Sets the allowed_machines of this Update.


        :param allowed_machines: The allowed_machines of this Update.  # noqa: E501
        :type: list[str]
        """

        self._allowed_machines = allowed_machines

    @property
    def default_machine(self) -> 'str':
        """Gets the default_machine of this Update.  # noqa: E501


        :return: The default_machine of this Update.  # noqa: E501
        :rtype: str
        """
        return self._default_machine

    @default_machine.setter
    def default_machine(self, default_machine: 'str'):
        """Sets the default_machine of this Update.


        :param default_machine: The default_machine of this Update.  # noqa: E501
        :type: str
        """

        self._default_machine = default_machine

    @property
    def description(self) -> 'str':
        """Gets the description of this Update.  # noqa: E501


        :return: The description of this Update.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: 'str'):
        """Sets the description of this Update.


        :param description: The description of this Update.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def disabled(self) -> 'bool':
        """Gets the disabled of this Update.  # noqa: E501


        :return: The disabled of this Update.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled: 'bool'):
        """Sets the disabled of this Update.


        :param disabled: The disabled of this Update.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def environment_type(self) -> 'V1CloudSpaceEnvironmentType':
        """Gets the environment_type of this Update.  # noqa: E501


        :return: The environment_type of this Update.  # noqa: E501
        :rtype: V1CloudSpaceEnvironmentType
        """
        return self._environment_type

    @environment_type.setter
    def environment_type(self, environment_type: 'V1CloudSpaceEnvironmentType'):
        """Sets the environment_type of this Update.


        :param environment_type: The environment_type of this Update.  # noqa: E501
        :type: V1CloudSpaceEnvironmentType
        """

        self._environment_type = environment_type

    @property
    def icon(self) -> 'str':
        """Gets the icon of this Update.  # noqa: E501


        :return: The icon of this Update.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon: 'str'):
        """Sets the icon of this Update.


        :param icon: The icon of this Update.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def initial_setup_script_text(self) -> 'str':
        """Gets the initial_setup_script_text of this Update.  # noqa: E501


        :return: The initial_setup_script_text of this Update.  # noqa: E501
        :rtype: str
        """
        return self._initial_setup_script_text

    @initial_setup_script_text.setter
    def initial_setup_script_text(self, initial_setup_script_text: 'str'):
        """Sets the initial_setup_script_text of this Update.


        :param initial_setup_script_text: The initial_setup_script_text of this Update.  # noqa: E501
        :type: str
        """

        self._initial_setup_script_text = initial_setup_script_text

    @property
    def machine_image_version(self) -> 'str':
        """Gets the machine_image_version of this Update.  # noqa: E501


        :return: The machine_image_version of this Update.  # noqa: E501
        :rtype: str
        """
        return self._machine_image_version

    @machine_image_version.setter
    def machine_image_version(self, machine_image_version: 'str'):
        """Sets the machine_image_version of this Update.


        :param machine_image_version: The machine_image_version of this Update.  # noqa: E501
        :type: str
        """

        self._machine_image_version = machine_image_version

    @property
    def name(self) -> 'str':
        """Gets the name of this Update.  # noqa: E501


        :return: The name of this Update.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this Update.


        :param name: The name of this Update.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def org_id(self) -> 'str':
        """Gets the org_id of this Update.  # noqa: E501


        :return: The org_id of this Update.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id: 'str'):
        """Sets the org_id of this Update.


        :param org_id: The org_id of this Update.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def plugins(self) -> 'list[str]':
        """Gets the plugins of this Update.  # noqa: E501


        :return: The plugins of this Update.  # noqa: E501
        :rtype: list[str]
        """
        return self._plugins

    @plugins.setter
    def plugins(self, plugins: 'list[str]'):
        """Sets the plugins of this Update.


        :param plugins: The plugins of this Update.  # noqa: E501
        :type: list[str]
        """

        self._plugins = plugins

    @property
    def setup_script_text(self) -> 'str':
        """Gets the setup_script_text of this Update.  # noqa: E501


        :return: The setup_script_text of this Update.  # noqa: E501
        :rtype: str
        """
        return self._setup_script_text

    @setup_script_text.setter
    def setup_script_text(self, setup_script_text: 'str'):
        """Sets the setup_script_text of this Update.


        :param setup_script_text: The setup_script_text of this Update.  # noqa: E501
        :type: str
        """

        self._setup_script_text = setup_script_text

    @property
    def specialized_view(self) -> 'V1CloudSpaceSpecializedView':
        """Gets the specialized_view of this Update.  # noqa: E501


        :return: The specialized_view of this Update.  # noqa: E501
        :rtype: V1CloudSpaceSpecializedView
        """
        return self._specialized_view

    @specialized_view.setter
    def specialized_view(self, specialized_view: 'V1CloudSpaceSpecializedView'):
        """Sets the specialized_view of this Update.


        :param specialized_view: The specialized_view of this Update.  # noqa: E501
        :type: V1CloudSpaceSpecializedView
        """

        self._specialized_view = specialized_view

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Update, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'Update') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, Update):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'Update') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
