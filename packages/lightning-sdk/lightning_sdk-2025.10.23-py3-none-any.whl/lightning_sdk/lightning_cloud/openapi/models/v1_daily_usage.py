# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1DailyUsage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'day': 'datetime',
        'total_completion_tokens': 'str',
        'total_cost': 'float',
        'total_num_messages': 'str',
        'total_prompt_tokens': 'str'
    }

    attribute_map = {
        'day': 'day',
        'total_completion_tokens': 'totalCompletionTokens',
        'total_cost': 'totalCost',
        'total_num_messages': 'totalNumMessages',
        'total_prompt_tokens': 'totalPromptTokens'
    }

    def __init__(self, day: 'datetime' =None, total_completion_tokens: 'str' =None, total_cost: 'float' =None, total_num_messages: 'str' =None, total_prompt_tokens: 'str' =None):  # noqa: E501
        """V1DailyUsage - a model defined in Swagger"""  # noqa: E501
        self._day = None
        self._total_completion_tokens = None
        self._total_cost = None
        self._total_num_messages = None
        self._total_prompt_tokens = None
        self.discriminator = None
        if day is not None:
            self.day = day
        if total_completion_tokens is not None:
            self.total_completion_tokens = total_completion_tokens
        if total_cost is not None:
            self.total_cost = total_cost
        if total_num_messages is not None:
            self.total_num_messages = total_num_messages
        if total_prompt_tokens is not None:
            self.total_prompt_tokens = total_prompt_tokens

    @property
    def day(self) -> 'datetime':
        """Gets the day of this V1DailyUsage.  # noqa: E501


        :return: The day of this V1DailyUsage.  # noqa: E501
        :rtype: datetime
        """
        return self._day

    @day.setter
    def day(self, day: 'datetime'):
        """Sets the day of this V1DailyUsage.


        :param day: The day of this V1DailyUsage.  # noqa: E501
        :type: datetime
        """

        self._day = day

    @property
    def total_completion_tokens(self) -> 'str':
        """Gets the total_completion_tokens of this V1DailyUsage.  # noqa: E501


        :return: The total_completion_tokens of this V1DailyUsage.  # noqa: E501
        :rtype: str
        """
        return self._total_completion_tokens

    @total_completion_tokens.setter
    def total_completion_tokens(self, total_completion_tokens: 'str'):
        """Sets the total_completion_tokens of this V1DailyUsage.


        :param total_completion_tokens: The total_completion_tokens of this V1DailyUsage.  # noqa: E501
        :type: str
        """

        self._total_completion_tokens = total_completion_tokens

    @property
    def total_cost(self) -> 'float':
        """Gets the total_cost of this V1DailyUsage.  # noqa: E501


        :return: The total_cost of this V1DailyUsage.  # noqa: E501
        :rtype: float
        """
        return self._total_cost

    @total_cost.setter
    def total_cost(self, total_cost: 'float'):
        """Sets the total_cost of this V1DailyUsage.


        :param total_cost: The total_cost of this V1DailyUsage.  # noqa: E501
        :type: float
        """

        self._total_cost = total_cost

    @property
    def total_num_messages(self) -> 'str':
        """Gets the total_num_messages of this V1DailyUsage.  # noqa: E501


        :return: The total_num_messages of this V1DailyUsage.  # noqa: E501
        :rtype: str
        """
        return self._total_num_messages

    @total_num_messages.setter
    def total_num_messages(self, total_num_messages: 'str'):
        """Sets the total_num_messages of this V1DailyUsage.


        :param total_num_messages: The total_num_messages of this V1DailyUsage.  # noqa: E501
        :type: str
        """

        self._total_num_messages = total_num_messages

    @property
    def total_prompt_tokens(self) -> 'str':
        """Gets the total_prompt_tokens of this V1DailyUsage.  # noqa: E501


        :return: The total_prompt_tokens of this V1DailyUsage.  # noqa: E501
        :rtype: str
        """
        return self._total_prompt_tokens

    @total_prompt_tokens.setter
    def total_prompt_tokens(self, total_prompt_tokens: 'str'):
        """Sets the total_prompt_tokens of this V1DailyUsage.


        :param total_prompt_tokens: The total_prompt_tokens of this V1DailyUsage.  # noqa: E501
        :type: str
        """

        self._total_prompt_tokens = total_prompt_tokens

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1DailyUsage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1DailyUsage') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1DailyUsage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1DailyUsage') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
