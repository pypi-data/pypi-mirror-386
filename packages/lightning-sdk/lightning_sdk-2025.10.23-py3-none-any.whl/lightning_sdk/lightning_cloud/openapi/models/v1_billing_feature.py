# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1BillingFeature(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_usage': 'int',
        'hit_limit': 'bool',
        'key': 'str',
        'limit': 'int',
        'upgrade_path': 'str'
    }

    attribute_map = {
        'current_usage': 'currentUsage',
        'hit_limit': 'hitLimit',
        'key': 'key',
        'limit': 'limit',
        'upgrade_path': 'upgradePath'
    }

    def __init__(self, current_usage: 'int' =None, hit_limit: 'bool' =None, key: 'str' =None, limit: 'int' =None, upgrade_path: 'str' =None):  # noqa: E501
        """V1BillingFeature - a model defined in Swagger"""  # noqa: E501
        self._current_usage = None
        self._hit_limit = None
        self._key = None
        self._limit = None
        self._upgrade_path = None
        self.discriminator = None
        if current_usage is not None:
            self.current_usage = current_usage
        if hit_limit is not None:
            self.hit_limit = hit_limit
        if key is not None:
            self.key = key
        if limit is not None:
            self.limit = limit
        if upgrade_path is not None:
            self.upgrade_path = upgrade_path

    @property
    def current_usage(self) -> 'int':
        """Gets the current_usage of this V1BillingFeature.  # noqa: E501


        :return: The current_usage of this V1BillingFeature.  # noqa: E501
        :rtype: int
        """
        return self._current_usage

    @current_usage.setter
    def current_usage(self, current_usage: 'int'):
        """Sets the current_usage of this V1BillingFeature.


        :param current_usage: The current_usage of this V1BillingFeature.  # noqa: E501
        :type: int
        """

        self._current_usage = current_usage

    @property
    def hit_limit(self) -> 'bool':
        """Gets the hit_limit of this V1BillingFeature.  # noqa: E501


        :return: The hit_limit of this V1BillingFeature.  # noqa: E501
        :rtype: bool
        """
        return self._hit_limit

    @hit_limit.setter
    def hit_limit(self, hit_limit: 'bool'):
        """Sets the hit_limit of this V1BillingFeature.


        :param hit_limit: The hit_limit of this V1BillingFeature.  # noqa: E501
        :type: bool
        """

        self._hit_limit = hit_limit

    @property
    def key(self) -> 'str':
        """Gets the key of this V1BillingFeature.  # noqa: E501


        :return: The key of this V1BillingFeature.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key: 'str'):
        """Sets the key of this V1BillingFeature.


        :param key: The key of this V1BillingFeature.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def limit(self) -> 'int':
        """Gets the limit of this V1BillingFeature.  # noqa: E501


        :return: The limit of this V1BillingFeature.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit: 'int'):
        """Sets the limit of this V1BillingFeature.


        :param limit: The limit of this V1BillingFeature.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def upgrade_path(self) -> 'str':
        """Gets the upgrade_path of this V1BillingFeature.  # noqa: E501


        :return: The upgrade_path of this V1BillingFeature.  # noqa: E501
        :rtype: str
        """
        return self._upgrade_path

    @upgrade_path.setter
    def upgrade_path(self, upgrade_path: 'str'):
        """Sets the upgrade_path of this V1BillingFeature.


        :param upgrade_path: The upgrade_path of this V1BillingFeature.  # noqa: E501
        :type: str
        """

        self._upgrade_path = upgrade_path

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1BillingFeature, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1BillingFeature') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1BillingFeature):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1BillingFeature') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
