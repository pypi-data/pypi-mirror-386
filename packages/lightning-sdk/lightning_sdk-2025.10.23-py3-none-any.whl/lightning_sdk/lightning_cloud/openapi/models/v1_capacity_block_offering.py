# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1CapacityBlockOffering(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'capacity_block_duration_hours': 'int',
        'capacity_block_offering_id': 'str',
        'currency_code': 'str',
        'end_date': 'datetime',
        'fee': 'float',
        'instance_count': 'int',
        'instance_type': 'str',
        'provider_fee': 'float',
        'region': 'str',
        'regions_without_quota': 'list[str]',
        'start_date': 'datetime',
        'upfront_fee': 'float'
    }

    attribute_map = {
        'capacity_block_duration_hours': 'capacityBlockDurationHours',
        'capacity_block_offering_id': 'capacityBlockOfferingId',
        'currency_code': 'currencyCode',
        'end_date': 'endDate',
        'fee': 'fee',
        'instance_count': 'instanceCount',
        'instance_type': 'instanceType',
        'provider_fee': 'providerFee',
        'region': 'region',
        'regions_without_quota': 'regionsWithoutQuota',
        'start_date': 'startDate',
        'upfront_fee': 'upfrontFee'
    }

    def __init__(self, capacity_block_duration_hours: 'int' =None, capacity_block_offering_id: 'str' =None, currency_code: 'str' =None, end_date: 'datetime' =None, fee: 'float' =None, instance_count: 'int' =None, instance_type: 'str' =None, provider_fee: 'float' =None, region: 'str' =None, regions_without_quota: 'list[str]' =None, start_date: 'datetime' =None, upfront_fee: 'float' =None):  # noqa: E501
        """V1CapacityBlockOffering - a model defined in Swagger"""  # noqa: E501
        self._capacity_block_duration_hours = None
        self._capacity_block_offering_id = None
        self._currency_code = None
        self._end_date = None
        self._fee = None
        self._instance_count = None
        self._instance_type = None
        self._provider_fee = None
        self._region = None
        self._regions_without_quota = None
        self._start_date = None
        self._upfront_fee = None
        self.discriminator = None
        if capacity_block_duration_hours is not None:
            self.capacity_block_duration_hours = capacity_block_duration_hours
        if capacity_block_offering_id is not None:
            self.capacity_block_offering_id = capacity_block_offering_id
        if currency_code is not None:
            self.currency_code = currency_code
        if end_date is not None:
            self.end_date = end_date
        if fee is not None:
            self.fee = fee
        if instance_count is not None:
            self.instance_count = instance_count
        if instance_type is not None:
            self.instance_type = instance_type
        if provider_fee is not None:
            self.provider_fee = provider_fee
        if region is not None:
            self.region = region
        if regions_without_quota is not None:
            self.regions_without_quota = regions_without_quota
        if start_date is not None:
            self.start_date = start_date
        if upfront_fee is not None:
            self.upfront_fee = upfront_fee

    @property
    def capacity_block_duration_hours(self) -> 'int':
        """Gets the capacity_block_duration_hours of this V1CapacityBlockOffering.  # noqa: E501


        :return: The capacity_block_duration_hours of this V1CapacityBlockOffering.  # noqa: E501
        :rtype: int
        """
        return self._capacity_block_duration_hours

    @capacity_block_duration_hours.setter
    def capacity_block_duration_hours(self, capacity_block_duration_hours: 'int'):
        """Sets the capacity_block_duration_hours of this V1CapacityBlockOffering.


        :param capacity_block_duration_hours: The capacity_block_duration_hours of this V1CapacityBlockOffering.  # noqa: E501
        :type: int
        """

        self._capacity_block_duration_hours = capacity_block_duration_hours

    @property
    def capacity_block_offering_id(self) -> 'str':
        """Gets the capacity_block_offering_id of this V1CapacityBlockOffering.  # noqa: E501


        :return: The capacity_block_offering_id of this V1CapacityBlockOffering.  # noqa: E501
        :rtype: str
        """
        return self._capacity_block_offering_id

    @capacity_block_offering_id.setter
    def capacity_block_offering_id(self, capacity_block_offering_id: 'str'):
        """Sets the capacity_block_offering_id of this V1CapacityBlockOffering.


        :param capacity_block_offering_id: The capacity_block_offering_id of this V1CapacityBlockOffering.  # noqa: E501
        :type: str
        """

        self._capacity_block_offering_id = capacity_block_offering_id

    @property
    def currency_code(self) -> 'str':
        """Gets the currency_code of this V1CapacityBlockOffering.  # noqa: E501


        :return: The currency_code of this V1CapacityBlockOffering.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code: 'str'):
        """Sets the currency_code of this V1CapacityBlockOffering.


        :param currency_code: The currency_code of this V1CapacityBlockOffering.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def end_date(self) -> 'datetime':
        """Gets the end_date of this V1CapacityBlockOffering.  # noqa: E501


        :return: The end_date of this V1CapacityBlockOffering.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date: 'datetime'):
        """Sets the end_date of this V1CapacityBlockOffering.


        :param end_date: The end_date of this V1CapacityBlockOffering.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def fee(self) -> 'float':
        """Gets the fee of this V1CapacityBlockOffering.  # noqa: E501


        :return: The fee of this V1CapacityBlockOffering.  # noqa: E501
        :rtype: float
        """
        return self._fee

    @fee.setter
    def fee(self, fee: 'float'):
        """Sets the fee of this V1CapacityBlockOffering.


        :param fee: The fee of this V1CapacityBlockOffering.  # noqa: E501
        :type: float
        """

        self._fee = fee

    @property
    def instance_count(self) -> 'int':
        """Gets the instance_count of this V1CapacityBlockOffering.  # noqa: E501


        :return: The instance_count of this V1CapacityBlockOffering.  # noqa: E501
        :rtype: int
        """
        return self._instance_count

    @instance_count.setter
    def instance_count(self, instance_count: 'int'):
        """Sets the instance_count of this V1CapacityBlockOffering.


        :param instance_count: The instance_count of this V1CapacityBlockOffering.  # noqa: E501
        :type: int
        """

        self._instance_count = instance_count

    @property
    def instance_type(self) -> 'str':
        """Gets the instance_type of this V1CapacityBlockOffering.  # noqa: E501


        :return: The instance_type of this V1CapacityBlockOffering.  # noqa: E501
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type: 'str'):
        """Sets the instance_type of this V1CapacityBlockOffering.


        :param instance_type: The instance_type of this V1CapacityBlockOffering.  # noqa: E501
        :type: str
        """

        self._instance_type = instance_type

    @property
    def provider_fee(self) -> 'float':
        """Gets the provider_fee of this V1CapacityBlockOffering.  # noqa: E501


        :return: The provider_fee of this V1CapacityBlockOffering.  # noqa: E501
        :rtype: float
        """
        return self._provider_fee

    @provider_fee.setter
    def provider_fee(self, provider_fee: 'float'):
        """Sets the provider_fee of this V1CapacityBlockOffering.


        :param provider_fee: The provider_fee of this V1CapacityBlockOffering.  # noqa: E501
        :type: float
        """

        self._provider_fee = provider_fee

    @property
    def region(self) -> 'str':
        """Gets the region of this V1CapacityBlockOffering.  # noqa: E501


        :return: The region of this V1CapacityBlockOffering.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region: 'str'):
        """Sets the region of this V1CapacityBlockOffering.


        :param region: The region of this V1CapacityBlockOffering.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def regions_without_quota(self) -> 'list[str]':
        """Gets the regions_without_quota of this V1CapacityBlockOffering.  # noqa: E501


        :return: The regions_without_quota of this V1CapacityBlockOffering.  # noqa: E501
        :rtype: list[str]
        """
        return self._regions_without_quota

    @regions_without_quota.setter
    def regions_without_quota(self, regions_without_quota: 'list[str]'):
        """Sets the regions_without_quota of this V1CapacityBlockOffering.


        :param regions_without_quota: The regions_without_quota of this V1CapacityBlockOffering.  # noqa: E501
        :type: list[str]
        """

        self._regions_without_quota = regions_without_quota

    @property
    def start_date(self) -> 'datetime':
        """Gets the start_date of this V1CapacityBlockOffering.  # noqa: E501


        :return: The start_date of this V1CapacityBlockOffering.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date: 'datetime'):
        """Sets the start_date of this V1CapacityBlockOffering.


        :param start_date: The start_date of this V1CapacityBlockOffering.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def upfront_fee(self) -> 'float':
        """Gets the upfront_fee of this V1CapacityBlockOffering.  # noqa: E501


        :return: The upfront_fee of this V1CapacityBlockOffering.  # noqa: E501
        :rtype: float
        """
        return self._upfront_fee

    @upfront_fee.setter
    def upfront_fee(self, upfront_fee: 'float'):
        """Sets the upfront_fee of this V1CapacityBlockOffering.


        :param upfront_fee: The upfront_fee of this V1CapacityBlockOffering.  # noqa: E501
        :type: float
        """

        self._upfront_fee = upfront_fee

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1CapacityBlockOffering, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1CapacityBlockOffering') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1CapacityBlockOffering):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1CapacityBlockOffering') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
