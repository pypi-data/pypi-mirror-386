# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1ClusterProxy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_id': 'str',
        'domain': 'str',
        'id': 'str',
        'state': 'str'
    }

    attribute_map = {
        'cluster_id': 'clusterId',
        'domain': 'domain',
        'id': 'id',
        'state': 'state'
    }

    def __init__(self, cluster_id: 'str' =None, domain: 'str' =None, id: 'str' =None, state: 'str' =None):  # noqa: E501
        """V1ClusterProxy - a model defined in Swagger"""  # noqa: E501
        self._cluster_id = None
        self._domain = None
        self._id = None
        self._state = None
        self.discriminator = None
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if domain is not None:
            self.domain = domain
        if id is not None:
            self.id = id
        if state is not None:
            self.state = state

    @property
    def cluster_id(self) -> 'str':
        """Gets the cluster_id of this V1ClusterProxy.  # noqa: E501


        :return: The cluster_id of this V1ClusterProxy.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id: 'str'):
        """Sets the cluster_id of this V1ClusterProxy.


        :param cluster_id: The cluster_id of this V1ClusterProxy.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def domain(self) -> 'str':
        """Gets the domain of this V1ClusterProxy.  # noqa: E501


        :return: The domain of this V1ClusterProxy.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain: 'str'):
        """Sets the domain of this V1ClusterProxy.


        :param domain: The domain of this V1ClusterProxy.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def id(self) -> 'str':
        """Gets the id of this V1ClusterProxy.  # noqa: E501


        :return: The id of this V1ClusterProxy.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1ClusterProxy.


        :param id: The id of this V1ClusterProxy.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def state(self) -> 'str':
        """Gets the state of this V1ClusterProxy.  # noqa: E501


        :return: The state of this V1ClusterProxy.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: 'str'):
        """Sets the state of this V1ClusterProxy.


        :param state: The state of this V1ClusterProxy.  # noqa: E501
        :type: str
        """

        self._state = state

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1ClusterProxy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1ClusterProxy') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ClusterProxy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1ClusterProxy') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
