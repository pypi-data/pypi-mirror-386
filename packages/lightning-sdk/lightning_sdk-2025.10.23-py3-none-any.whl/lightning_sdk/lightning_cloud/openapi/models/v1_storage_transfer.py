# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1StorageTransfer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'creator_id': 'str',
        'id': 'str',
        'project_id': 'str',
        'provider_resource_id': 'str',
        'source_data_conncection_id': 'str',
        'status': 'V1StorageTransferStatus',
        'target_data_connection_id': 'str',
        'total_failed': 'str',
        'total_objects': 'str',
        'total_skipped': 'str',
        'total_transferred': 'str',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'creator_id': 'creatorId',
        'id': 'id',
        'project_id': 'projectId',
        'provider_resource_id': 'providerResourceId',
        'source_data_conncection_id': 'sourceDataConncectionId',
        'status': 'status',
        'target_data_connection_id': 'targetDataConnectionId',
        'total_failed': 'totalFailed',
        'total_objects': 'totalObjects',
        'total_skipped': 'totalSkipped',
        'total_transferred': 'totalTransferred',
        'updated_at': 'updatedAt'
    }

    def __init__(self, created_at: 'datetime' =None, creator_id: 'str' =None, id: 'str' =None, project_id: 'str' =None, provider_resource_id: 'str' =None, source_data_conncection_id: 'str' =None, status: 'V1StorageTransferStatus' =None, target_data_connection_id: 'str' =None, total_failed: 'str' =None, total_objects: 'str' =None, total_skipped: 'str' =None, total_transferred: 'str' =None, updated_at: 'datetime' =None):  # noqa: E501
        """V1StorageTransfer - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._creator_id = None
        self._id = None
        self._project_id = None
        self._provider_resource_id = None
        self._source_data_conncection_id = None
        self._status = None
        self._target_data_connection_id = None
        self._total_failed = None
        self._total_objects = None
        self._total_skipped = None
        self._total_transferred = None
        self._updated_at = None
        self.discriminator = None
        if created_at is not None:
            self.created_at = created_at
        if creator_id is not None:
            self.creator_id = creator_id
        if id is not None:
            self.id = id
        if project_id is not None:
            self.project_id = project_id
        if provider_resource_id is not None:
            self.provider_resource_id = provider_resource_id
        if source_data_conncection_id is not None:
            self.source_data_conncection_id = source_data_conncection_id
        if status is not None:
            self.status = status
        if target_data_connection_id is not None:
            self.target_data_connection_id = target_data_connection_id
        if total_failed is not None:
            self.total_failed = total_failed
        if total_objects is not None:
            self.total_objects = total_objects
        if total_skipped is not None:
            self.total_skipped = total_skipped
        if total_transferred is not None:
            self.total_transferred = total_transferred
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this V1StorageTransfer.  # noqa: E501


        :return: The created_at of this V1StorageTransfer.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this V1StorageTransfer.


        :param created_at: The created_at of this V1StorageTransfer.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def creator_id(self) -> 'str':
        """Gets the creator_id of this V1StorageTransfer.  # noqa: E501


        :return: The creator_id of this V1StorageTransfer.  # noqa: E501
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id: 'str'):
        """Sets the creator_id of this V1StorageTransfer.


        :param creator_id: The creator_id of this V1StorageTransfer.  # noqa: E501
        :type: str
        """

        self._creator_id = creator_id

    @property
    def id(self) -> 'str':
        """Gets the id of this V1StorageTransfer.  # noqa: E501


        :return: The id of this V1StorageTransfer.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1StorageTransfer.


        :param id: The id of this V1StorageTransfer.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def project_id(self) -> 'str':
        """Gets the project_id of this V1StorageTransfer.  # noqa: E501


        :return: The project_id of this V1StorageTransfer.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: 'str'):
        """Sets the project_id of this V1StorageTransfer.


        :param project_id: The project_id of this V1StorageTransfer.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def provider_resource_id(self) -> 'str':
        """Gets the provider_resource_id of this V1StorageTransfer.  # noqa: E501


        :return: The provider_resource_id of this V1StorageTransfer.  # noqa: E501
        :rtype: str
        """
        return self._provider_resource_id

    @provider_resource_id.setter
    def provider_resource_id(self, provider_resource_id: 'str'):
        """Sets the provider_resource_id of this V1StorageTransfer.


        :param provider_resource_id: The provider_resource_id of this V1StorageTransfer.  # noqa: E501
        :type: str
        """

        self._provider_resource_id = provider_resource_id

    @property
    def source_data_conncection_id(self) -> 'str':
        """Gets the source_data_conncection_id of this V1StorageTransfer.  # noqa: E501


        :return: The source_data_conncection_id of this V1StorageTransfer.  # noqa: E501
        :rtype: str
        """
        return self._source_data_conncection_id

    @source_data_conncection_id.setter
    def source_data_conncection_id(self, source_data_conncection_id: 'str'):
        """Sets the source_data_conncection_id of this V1StorageTransfer.


        :param source_data_conncection_id: The source_data_conncection_id of this V1StorageTransfer.  # noqa: E501
        :type: str
        """

        self._source_data_conncection_id = source_data_conncection_id

    @property
    def status(self) -> 'V1StorageTransferStatus':
        """Gets the status of this V1StorageTransfer.  # noqa: E501


        :return: The status of this V1StorageTransfer.  # noqa: E501
        :rtype: V1StorageTransferStatus
        """
        return self._status

    @status.setter
    def status(self, status: 'V1StorageTransferStatus'):
        """Sets the status of this V1StorageTransfer.


        :param status: The status of this V1StorageTransfer.  # noqa: E501
        :type: V1StorageTransferStatus
        """

        self._status = status

    @property
    def target_data_connection_id(self) -> 'str':
        """Gets the target_data_connection_id of this V1StorageTransfer.  # noqa: E501


        :return: The target_data_connection_id of this V1StorageTransfer.  # noqa: E501
        :rtype: str
        """
        return self._target_data_connection_id

    @target_data_connection_id.setter
    def target_data_connection_id(self, target_data_connection_id: 'str'):
        """Sets the target_data_connection_id of this V1StorageTransfer.


        :param target_data_connection_id: The target_data_connection_id of this V1StorageTransfer.  # noqa: E501
        :type: str
        """

        self._target_data_connection_id = target_data_connection_id

    @property
    def total_failed(self) -> 'str':
        """Gets the total_failed of this V1StorageTransfer.  # noqa: E501


        :return: The total_failed of this V1StorageTransfer.  # noqa: E501
        :rtype: str
        """
        return self._total_failed

    @total_failed.setter
    def total_failed(self, total_failed: 'str'):
        """Sets the total_failed of this V1StorageTransfer.


        :param total_failed: The total_failed of this V1StorageTransfer.  # noqa: E501
        :type: str
        """

        self._total_failed = total_failed

    @property
    def total_objects(self) -> 'str':
        """Gets the total_objects of this V1StorageTransfer.  # noqa: E501


        :return: The total_objects of this V1StorageTransfer.  # noqa: E501
        :rtype: str
        """
        return self._total_objects

    @total_objects.setter
    def total_objects(self, total_objects: 'str'):
        """Sets the total_objects of this V1StorageTransfer.


        :param total_objects: The total_objects of this V1StorageTransfer.  # noqa: E501
        :type: str
        """

        self._total_objects = total_objects

    @property
    def total_skipped(self) -> 'str':
        """Gets the total_skipped of this V1StorageTransfer.  # noqa: E501


        :return: The total_skipped of this V1StorageTransfer.  # noqa: E501
        :rtype: str
        """
        return self._total_skipped

    @total_skipped.setter
    def total_skipped(self, total_skipped: 'str'):
        """Sets the total_skipped of this V1StorageTransfer.


        :param total_skipped: The total_skipped of this V1StorageTransfer.  # noqa: E501
        :type: str
        """

        self._total_skipped = total_skipped

    @property
    def total_transferred(self) -> 'str':
        """Gets the total_transferred of this V1StorageTransfer.  # noqa: E501


        :return: The total_transferred of this V1StorageTransfer.  # noqa: E501
        :rtype: str
        """
        return self._total_transferred

    @total_transferred.setter
    def total_transferred(self, total_transferred: 'str'):
        """Sets the total_transferred of this V1StorageTransfer.


        :param total_transferred: The total_transferred of this V1StorageTransfer.  # noqa: E501
        :type: str
        """

        self._total_transferred = total_transferred

    @property
    def updated_at(self) -> 'datetime':
        """Gets the updated_at of this V1StorageTransfer.  # noqa: E501


        :return: The updated_at of this V1StorageTransfer.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: 'datetime'):
        """Sets the updated_at of this V1StorageTransfer.


        :param updated_at: The updated_at of this V1StorageTransfer.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1StorageTransfer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1StorageTransfer') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1StorageTransfer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1StorageTransfer') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
