# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1SystemMetricsAggregated(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'avg_cpu_percentage': 'float',
        'avg_gpu_percentage': 'float',
        'num_cpus': 'float',
        'num_gpus': 'float',
        'timestamp': 'datetime'
    }

    attribute_map = {
        'avg_cpu_percentage': 'avgCpuPercentage',
        'avg_gpu_percentage': 'avgGpuPercentage',
        'num_cpus': 'numCpus',
        'num_gpus': 'numGpus',
        'timestamp': 'timestamp'
    }

    def __init__(self, avg_cpu_percentage: 'float' =None, avg_gpu_percentage: 'float' =None, num_cpus: 'float' =None, num_gpus: 'float' =None, timestamp: 'datetime' =None):  # noqa: E501
        """V1SystemMetricsAggregated - a model defined in Swagger"""  # noqa: E501
        self._avg_cpu_percentage = None
        self._avg_gpu_percentage = None
        self._num_cpus = None
        self._num_gpus = None
        self._timestamp = None
        self.discriminator = None
        if avg_cpu_percentage is not None:
            self.avg_cpu_percentage = avg_cpu_percentage
        if avg_gpu_percentage is not None:
            self.avg_gpu_percentage = avg_gpu_percentage
        if num_cpus is not None:
            self.num_cpus = num_cpus
        if num_gpus is not None:
            self.num_gpus = num_gpus
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def avg_cpu_percentage(self) -> 'float':
        """Gets the avg_cpu_percentage of this V1SystemMetricsAggregated.  # noqa: E501


        :return: The avg_cpu_percentage of this V1SystemMetricsAggregated.  # noqa: E501
        :rtype: float
        """
        return self._avg_cpu_percentage

    @avg_cpu_percentage.setter
    def avg_cpu_percentage(self, avg_cpu_percentage: 'float'):
        """Sets the avg_cpu_percentage of this V1SystemMetricsAggregated.


        :param avg_cpu_percentage: The avg_cpu_percentage of this V1SystemMetricsAggregated.  # noqa: E501
        :type: float
        """

        self._avg_cpu_percentage = avg_cpu_percentage

    @property
    def avg_gpu_percentage(self) -> 'float':
        """Gets the avg_gpu_percentage of this V1SystemMetricsAggregated.  # noqa: E501


        :return: The avg_gpu_percentage of this V1SystemMetricsAggregated.  # noqa: E501
        :rtype: float
        """
        return self._avg_gpu_percentage

    @avg_gpu_percentage.setter
    def avg_gpu_percentage(self, avg_gpu_percentage: 'float'):
        """Sets the avg_gpu_percentage of this V1SystemMetricsAggregated.


        :param avg_gpu_percentage: The avg_gpu_percentage of this V1SystemMetricsAggregated.  # noqa: E501
        :type: float
        """

        self._avg_gpu_percentage = avg_gpu_percentage

    @property
    def num_cpus(self) -> 'float':
        """Gets the num_cpus of this V1SystemMetricsAggregated.  # noqa: E501


        :return: The num_cpus of this V1SystemMetricsAggregated.  # noqa: E501
        :rtype: float
        """
        return self._num_cpus

    @num_cpus.setter
    def num_cpus(self, num_cpus: 'float'):
        """Sets the num_cpus of this V1SystemMetricsAggregated.


        :param num_cpus: The num_cpus of this V1SystemMetricsAggregated.  # noqa: E501
        :type: float
        """

        self._num_cpus = num_cpus

    @property
    def num_gpus(self) -> 'float':
        """Gets the num_gpus of this V1SystemMetricsAggregated.  # noqa: E501


        :return: The num_gpus of this V1SystemMetricsAggregated.  # noqa: E501
        :rtype: float
        """
        return self._num_gpus

    @num_gpus.setter
    def num_gpus(self, num_gpus: 'float'):
        """Sets the num_gpus of this V1SystemMetricsAggregated.


        :param num_gpus: The num_gpus of this V1SystemMetricsAggregated.  # noqa: E501
        :type: float
        """

        self._num_gpus = num_gpus

    @property
    def timestamp(self) -> 'datetime':
        """Gets the timestamp of this V1SystemMetricsAggregated.  # noqa: E501


        :return: The timestamp of this V1SystemMetricsAggregated.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: 'datetime'):
        """Sets the timestamp of this V1SystemMetricsAggregated.


        :param timestamp: The timestamp of this V1SystemMetricsAggregated.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1SystemMetricsAggregated, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1SystemMetricsAggregated') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1SystemMetricsAggregated):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1SystemMetricsAggregated') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
