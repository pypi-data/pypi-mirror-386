# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1GalleryApp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_entrypoint_file': 'str',
        'authors': 'list[str]',
        'auto_start': 'bool',
        'can_download_source_code': 'bool',
        'can_run': 'bool',
        'categories': 'list[str]',
        'components': 'list[str]',
        'description': 'str',
        'display_name': 'str',
        'example_code': 'str',
        'flow_servers': 'list[V1Flowserver]',
        'git_url': 'str',
        'id': 'str',
        'installation_code': 'str',
        'license': 'str',
        'name': 'str',
        'open_url': 'str',
        'org_logo': 'str',
        'organization': 'str',
        'requirements_path': 'str',
        'short_description': 'str',
        'source_url': 'str',
        'tags': 'list[str]',
        'target_admin_tab': 'str',
        'template_tags': 'list[str]',
        'thumbnail': 'str',
        'version': 'str',
        'video': 'str',
        'visibility': 'str',
        'works': 'list[V1Work]'
    }

    attribute_map = {
        'app_entrypoint_file': 'appEntrypointFile',
        'authors': 'authors',
        'auto_start': 'autoStart',
        'can_download_source_code': 'canDownloadSourceCode',
        'can_run': 'canRun',
        'categories': 'categories',
        'components': 'components',
        'description': 'description',
        'display_name': 'displayName',
        'example_code': 'exampleCode',
        'flow_servers': 'flowServers',
        'git_url': 'gitUrl',
        'id': 'id',
        'installation_code': 'installationCode',
        'license': 'license',
        'name': 'name',
        'open_url': 'openUrl',
        'org_logo': 'orgLogo',
        'organization': 'organization',
        'requirements_path': 'requirementsPath',
        'short_description': 'shortDescription',
        'source_url': 'sourceUrl',
        'tags': 'tags',
        'target_admin_tab': 'targetAdminTab',
        'template_tags': 'templateTags',
        'thumbnail': 'thumbnail',
        'version': 'version',
        'video': 'video',
        'visibility': 'visibility',
        'works': 'works'
    }

    def __init__(self, app_entrypoint_file: 'str' =None, authors: 'list[str]' =None, auto_start: 'bool' =None, can_download_source_code: 'bool' =None, can_run: 'bool' =None, categories: 'list[str]' =None, components: 'list[str]' =None, description: 'str' =None, display_name: 'str' =None, example_code: 'str' =None, flow_servers: 'list[V1Flowserver]' =None, git_url: 'str' =None, id: 'str' =None, installation_code: 'str' =None, license: 'str' =None, name: 'str' =None, open_url: 'str' =None, org_logo: 'str' =None, organization: 'str' =None, requirements_path: 'str' =None, short_description: 'str' =None, source_url: 'str' =None, tags: 'list[str]' =None, target_admin_tab: 'str' =None, template_tags: 'list[str]' =None, thumbnail: 'str' =None, version: 'str' =None, video: 'str' =None, visibility: 'str' =None, works: 'list[V1Work]' =None):  # noqa: E501
        """V1GalleryApp - a model defined in Swagger"""  # noqa: E501
        self._app_entrypoint_file = None
        self._authors = None
        self._auto_start = None
        self._can_download_source_code = None
        self._can_run = None
        self._categories = None
        self._components = None
        self._description = None
        self._display_name = None
        self._example_code = None
        self._flow_servers = None
        self._git_url = None
        self._id = None
        self._installation_code = None
        self._license = None
        self._name = None
        self._open_url = None
        self._org_logo = None
        self._organization = None
        self._requirements_path = None
        self._short_description = None
        self._source_url = None
        self._tags = None
        self._target_admin_tab = None
        self._template_tags = None
        self._thumbnail = None
        self._version = None
        self._video = None
        self._visibility = None
        self._works = None
        self.discriminator = None
        if app_entrypoint_file is not None:
            self.app_entrypoint_file = app_entrypoint_file
        if authors is not None:
            self.authors = authors
        if auto_start is not None:
            self.auto_start = auto_start
        if can_download_source_code is not None:
            self.can_download_source_code = can_download_source_code
        if can_run is not None:
            self.can_run = can_run
        if categories is not None:
            self.categories = categories
        if components is not None:
            self.components = components
        if description is not None:
            self.description = description
        if display_name is not None:
            self.display_name = display_name
        if example_code is not None:
            self.example_code = example_code
        if flow_servers is not None:
            self.flow_servers = flow_servers
        if git_url is not None:
            self.git_url = git_url
        if id is not None:
            self.id = id
        if installation_code is not None:
            self.installation_code = installation_code
        if license is not None:
            self.license = license
        if name is not None:
            self.name = name
        if open_url is not None:
            self.open_url = open_url
        if org_logo is not None:
            self.org_logo = org_logo
        if organization is not None:
            self.organization = organization
        if requirements_path is not None:
            self.requirements_path = requirements_path
        if short_description is not None:
            self.short_description = short_description
        if source_url is not None:
            self.source_url = source_url
        if tags is not None:
            self.tags = tags
        if target_admin_tab is not None:
            self.target_admin_tab = target_admin_tab
        if template_tags is not None:
            self.template_tags = template_tags
        if thumbnail is not None:
            self.thumbnail = thumbnail
        if version is not None:
            self.version = version
        if video is not None:
            self.video = video
        if visibility is not None:
            self.visibility = visibility
        if works is not None:
            self.works = works

    @property
    def app_entrypoint_file(self) -> 'str':
        """Gets the app_entrypoint_file of this V1GalleryApp.  # noqa: E501


        :return: The app_entrypoint_file of this V1GalleryApp.  # noqa: E501
        :rtype: str
        """
        return self._app_entrypoint_file

    @app_entrypoint_file.setter
    def app_entrypoint_file(self, app_entrypoint_file: 'str'):
        """Sets the app_entrypoint_file of this V1GalleryApp.


        :param app_entrypoint_file: The app_entrypoint_file of this V1GalleryApp.  # noqa: E501
        :type: str
        """

        self._app_entrypoint_file = app_entrypoint_file

    @property
    def authors(self) -> 'list[str]':
        """Gets the authors of this V1GalleryApp.  # noqa: E501


        :return: The authors of this V1GalleryApp.  # noqa: E501
        :rtype: list[str]
        """
        return self._authors

    @authors.setter
    def authors(self, authors: 'list[str]'):
        """Sets the authors of this V1GalleryApp.


        :param authors: The authors of this V1GalleryApp.  # noqa: E501
        :type: list[str]
        """

        self._authors = authors

    @property
    def auto_start(self) -> 'bool':
        """Gets the auto_start of this V1GalleryApp.  # noqa: E501


        :return: The auto_start of this V1GalleryApp.  # noqa: E501
        :rtype: bool
        """
        return self._auto_start

    @auto_start.setter
    def auto_start(self, auto_start: 'bool'):
        """Sets the auto_start of this V1GalleryApp.


        :param auto_start: The auto_start of this V1GalleryApp.  # noqa: E501
        :type: bool
        """

        self._auto_start = auto_start

    @property
    def can_download_source_code(self) -> 'bool':
        """Gets the can_download_source_code of this V1GalleryApp.  # noqa: E501


        :return: The can_download_source_code of this V1GalleryApp.  # noqa: E501
        :rtype: bool
        """
        return self._can_download_source_code

    @can_download_source_code.setter
    def can_download_source_code(self, can_download_source_code: 'bool'):
        """Sets the can_download_source_code of this V1GalleryApp.


        :param can_download_source_code: The can_download_source_code of this V1GalleryApp.  # noqa: E501
        :type: bool
        """

        self._can_download_source_code = can_download_source_code

    @property
    def can_run(self) -> 'bool':
        """Gets the can_run of this V1GalleryApp.  # noqa: E501


        :return: The can_run of this V1GalleryApp.  # noqa: E501
        :rtype: bool
        """
        return self._can_run

    @can_run.setter
    def can_run(self, can_run: 'bool'):
        """Sets the can_run of this V1GalleryApp.


        :param can_run: The can_run of this V1GalleryApp.  # noqa: E501
        :type: bool
        """

        self._can_run = can_run

    @property
    def categories(self) -> 'list[str]':
        """Gets the categories of this V1GalleryApp.  # noqa: E501


        :return: The categories of this V1GalleryApp.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories: 'list[str]'):
        """Sets the categories of this V1GalleryApp.


        :param categories: The categories of this V1GalleryApp.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def components(self) -> 'list[str]':
        """Gets the components of this V1GalleryApp.  # noqa: E501


        :return: The components of this V1GalleryApp.  # noqa: E501
        :rtype: list[str]
        """
        return self._components

    @components.setter
    def components(self, components: 'list[str]'):
        """Sets the components of this V1GalleryApp.


        :param components: The components of this V1GalleryApp.  # noqa: E501
        :type: list[str]
        """

        self._components = components

    @property
    def description(self) -> 'str':
        """Gets the description of this V1GalleryApp.  # noqa: E501


        :return: The description of this V1GalleryApp.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: 'str'):
        """Sets the description of this V1GalleryApp.


        :param description: The description of this V1GalleryApp.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def display_name(self) -> 'str':
        """Gets the display_name of this V1GalleryApp.  # noqa: E501


        :return: The display_name of this V1GalleryApp.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: 'str'):
        """Sets the display_name of this V1GalleryApp.


        :param display_name: The display_name of this V1GalleryApp.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def example_code(self) -> 'str':
        """Gets the example_code of this V1GalleryApp.  # noqa: E501


        :return: The example_code of this V1GalleryApp.  # noqa: E501
        :rtype: str
        """
        return self._example_code

    @example_code.setter
    def example_code(self, example_code: 'str'):
        """Sets the example_code of this V1GalleryApp.


        :param example_code: The example_code of this V1GalleryApp.  # noqa: E501
        :type: str
        """

        self._example_code = example_code

    @property
    def flow_servers(self) -> 'list[V1Flowserver]':
        """Gets the flow_servers of this V1GalleryApp.  # noqa: E501


        :return: The flow_servers of this V1GalleryApp.  # noqa: E501
        :rtype: list[V1Flowserver]
        """
        return self._flow_servers

    @flow_servers.setter
    def flow_servers(self, flow_servers: 'list[V1Flowserver]'):
        """Sets the flow_servers of this V1GalleryApp.


        :param flow_servers: The flow_servers of this V1GalleryApp.  # noqa: E501
        :type: list[V1Flowserver]
        """

        self._flow_servers = flow_servers

    @property
    def git_url(self) -> 'str':
        """Gets the git_url of this V1GalleryApp.  # noqa: E501


        :return: The git_url of this V1GalleryApp.  # noqa: E501
        :rtype: str
        """
        return self._git_url

    @git_url.setter
    def git_url(self, git_url: 'str'):
        """Sets the git_url of this V1GalleryApp.


        :param git_url: The git_url of this V1GalleryApp.  # noqa: E501
        :type: str
        """

        self._git_url = git_url

    @property
    def id(self) -> 'str':
        """Gets the id of this V1GalleryApp.  # noqa: E501


        :return: The id of this V1GalleryApp.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1GalleryApp.


        :param id: The id of this V1GalleryApp.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def installation_code(self) -> 'str':
        """Gets the installation_code of this V1GalleryApp.  # noqa: E501


        :return: The installation_code of this V1GalleryApp.  # noqa: E501
        :rtype: str
        """
        return self._installation_code

    @installation_code.setter
    def installation_code(self, installation_code: 'str'):
        """Sets the installation_code of this V1GalleryApp.


        :param installation_code: The installation_code of this V1GalleryApp.  # noqa: E501
        :type: str
        """

        self._installation_code = installation_code

    @property
    def license(self) -> 'str':
        """Gets the license of this V1GalleryApp.  # noqa: E501


        :return: The license of this V1GalleryApp.  # noqa: E501
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license: 'str'):
        """Sets the license of this V1GalleryApp.


        :param license: The license of this V1GalleryApp.  # noqa: E501
        :type: str
        """

        self._license = license

    @property
    def name(self) -> 'str':
        """Gets the name of this V1GalleryApp.  # noqa: E501


        :return: The name of this V1GalleryApp.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1GalleryApp.


        :param name: The name of this V1GalleryApp.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def open_url(self) -> 'str':
        """Gets the open_url of this V1GalleryApp.  # noqa: E501


        :return: The open_url of this V1GalleryApp.  # noqa: E501
        :rtype: str
        """
        return self._open_url

    @open_url.setter
    def open_url(self, open_url: 'str'):
        """Sets the open_url of this V1GalleryApp.


        :param open_url: The open_url of this V1GalleryApp.  # noqa: E501
        :type: str
        """

        self._open_url = open_url

    @property
    def org_logo(self) -> 'str':
        """Gets the org_logo of this V1GalleryApp.  # noqa: E501


        :return: The org_logo of this V1GalleryApp.  # noqa: E501
        :rtype: str
        """
        return self._org_logo

    @org_logo.setter
    def org_logo(self, org_logo: 'str'):
        """Sets the org_logo of this V1GalleryApp.


        :param org_logo: The org_logo of this V1GalleryApp.  # noqa: E501
        :type: str
        """

        self._org_logo = org_logo

    @property
    def organization(self) -> 'str':
        """Gets the organization of this V1GalleryApp.  # noqa: E501


        :return: The organization of this V1GalleryApp.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization: 'str'):
        """Sets the organization of this V1GalleryApp.


        :param organization: The organization of this V1GalleryApp.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def requirements_path(self) -> 'str':
        """Gets the requirements_path of this V1GalleryApp.  # noqa: E501


        :return: The requirements_path of this V1GalleryApp.  # noqa: E501
        :rtype: str
        """
        return self._requirements_path

    @requirements_path.setter
    def requirements_path(self, requirements_path: 'str'):
        """Sets the requirements_path of this V1GalleryApp.


        :param requirements_path: The requirements_path of this V1GalleryApp.  # noqa: E501
        :type: str
        """

        self._requirements_path = requirements_path

    @property
    def short_description(self) -> 'str':
        """Gets the short_description of this V1GalleryApp.  # noqa: E501


        :return: The short_description of this V1GalleryApp.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description: 'str'):
        """Sets the short_description of this V1GalleryApp.


        :param short_description: The short_description of this V1GalleryApp.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def source_url(self) -> 'str':
        """Gets the source_url of this V1GalleryApp.  # noqa: E501


        :return: The source_url of this V1GalleryApp.  # noqa: E501
        :rtype: str
        """
        return self._source_url

    @source_url.setter
    def source_url(self, source_url: 'str'):
        """Sets the source_url of this V1GalleryApp.


        :param source_url: The source_url of this V1GalleryApp.  # noqa: E501
        :type: str
        """

        self._source_url = source_url

    @property
    def tags(self) -> 'list[str]':
        """Gets the tags of this V1GalleryApp.  # noqa: E501


        :return: The tags of this V1GalleryApp.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: 'list[str]'):
        """Sets the tags of this V1GalleryApp.


        :param tags: The tags of this V1GalleryApp.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def target_admin_tab(self) -> 'str':
        """Gets the target_admin_tab of this V1GalleryApp.  # noqa: E501


        :return: The target_admin_tab of this V1GalleryApp.  # noqa: E501
        :rtype: str
        """
        return self._target_admin_tab

    @target_admin_tab.setter
    def target_admin_tab(self, target_admin_tab: 'str'):
        """Sets the target_admin_tab of this V1GalleryApp.


        :param target_admin_tab: The target_admin_tab of this V1GalleryApp.  # noqa: E501
        :type: str
        """

        self._target_admin_tab = target_admin_tab

    @property
    def template_tags(self) -> 'list[str]':
        """Gets the template_tags of this V1GalleryApp.  # noqa: E501


        :return: The template_tags of this V1GalleryApp.  # noqa: E501
        :rtype: list[str]
        """
        return self._template_tags

    @template_tags.setter
    def template_tags(self, template_tags: 'list[str]'):
        """Sets the template_tags of this V1GalleryApp.


        :param template_tags: The template_tags of this V1GalleryApp.  # noqa: E501
        :type: list[str]
        """

        self._template_tags = template_tags

    @property
    def thumbnail(self) -> 'str':
        """Gets the thumbnail of this V1GalleryApp.  # noqa: E501


        :return: The thumbnail of this V1GalleryApp.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail: 'str'):
        """Sets the thumbnail of this V1GalleryApp.


        :param thumbnail: The thumbnail of this V1GalleryApp.  # noqa: E501
        :type: str
        """

        self._thumbnail = thumbnail

    @property
    def version(self) -> 'str':
        """Gets the version of this V1GalleryApp.  # noqa: E501


        :return: The version of this V1GalleryApp.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: 'str'):
        """Sets the version of this V1GalleryApp.


        :param version: The version of this V1GalleryApp.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def video(self) -> 'str':
        """Gets the video of this V1GalleryApp.  # noqa: E501


        :return: The video of this V1GalleryApp.  # noqa: E501
        :rtype: str
        """
        return self._video

    @video.setter
    def video(self, video: 'str'):
        """Sets the video of this V1GalleryApp.


        :param video: The video of this V1GalleryApp.  # noqa: E501
        :type: str
        """

        self._video = video

    @property
    def visibility(self) -> 'str':
        """Gets the visibility of this V1GalleryApp.  # noqa: E501


        :return: The visibility of this V1GalleryApp.  # noqa: E501
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility: 'str'):
        """Sets the visibility of this V1GalleryApp.


        :param visibility: The visibility of this V1GalleryApp.  # noqa: E501
        :type: str
        """

        self._visibility = visibility

    @property
    def works(self) -> 'list[V1Work]':
        """Gets the works of this V1GalleryApp.  # noqa: E501


        :return: The works of this V1GalleryApp.  # noqa: E501
        :rtype: list[V1Work]
        """
        return self._works

    @works.setter
    def works(self, works: 'list[V1Work]'):
        """Sets the works of this V1GalleryApp.


        :param works: The works of this V1GalleryApp.  # noqa: E501
        :type: list[V1Work]
        """

        self._works = works

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1GalleryApp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1GalleryApp') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1GalleryApp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1GalleryApp') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
