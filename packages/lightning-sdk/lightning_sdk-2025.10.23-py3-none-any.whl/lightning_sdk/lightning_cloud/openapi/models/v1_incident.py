# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1Incident(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_id': 'str',
        'created_at': 'datetime',
        'details': 'list[V1IncidentDetail]',
        'ended_at': 'datetime',
        'id': 'str',
        'message': 'str',
        'notified': 'bool',
        'project_id': 'str',
        'resolution_notes': 'str',
        'resource': 'str',
        'resource_id': 'str',
        'severity': 'V1IncidentSeverity',
        'started_at': 'datetime',
        'status': 'str',
        'title': 'str',
        'type': 'V1IncidentType',
        'updated_at': 'datetime',
        'user_id': 'str'
    }

    attribute_map = {
        'cluster_id': 'clusterId',
        'created_at': 'createdAt',
        'details': 'details',
        'ended_at': 'endedAt',
        'id': 'id',
        'message': 'message',
        'notified': 'notified',
        'project_id': 'projectId',
        'resolution_notes': 'resolutionNotes',
        'resource': 'resource',
        'resource_id': 'resourceId',
        'severity': 'severity',
        'started_at': 'startedAt',
        'status': 'status',
        'title': 'title',
        'type': 'type',
        'updated_at': 'updatedAt',
        'user_id': 'userId'
    }

    def __init__(self, cluster_id: 'str' =None, created_at: 'datetime' =None, details: 'list[V1IncidentDetail]' =None, ended_at: 'datetime' =None, id: 'str' =None, message: 'str' =None, notified: 'bool' =None, project_id: 'str' =None, resolution_notes: 'str' =None, resource: 'str' =None, resource_id: 'str' =None, severity: 'V1IncidentSeverity' =None, started_at: 'datetime' =None, status: 'str' =None, title: 'str' =None, type: 'V1IncidentType' =None, updated_at: 'datetime' =None, user_id: 'str' =None):  # noqa: E501
        """V1Incident - a model defined in Swagger"""  # noqa: E501
        self._cluster_id = None
        self._created_at = None
        self._details = None
        self._ended_at = None
        self._id = None
        self._message = None
        self._notified = None
        self._project_id = None
        self._resolution_notes = None
        self._resource = None
        self._resource_id = None
        self._severity = None
        self._started_at = None
        self._status = None
        self._title = None
        self._type = None
        self._updated_at = None
        self._user_id = None
        self.discriminator = None
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if created_at is not None:
            self.created_at = created_at
        if details is not None:
            self.details = details
        if ended_at is not None:
            self.ended_at = ended_at
        if id is not None:
            self.id = id
        if message is not None:
            self.message = message
        if notified is not None:
            self.notified = notified
        if project_id is not None:
            self.project_id = project_id
        if resolution_notes is not None:
            self.resolution_notes = resolution_notes
        if resource is not None:
            self.resource = resource
        if resource_id is not None:
            self.resource_id = resource_id
        if severity is not None:
            self.severity = severity
        if started_at is not None:
            self.started_at = started_at
        if status is not None:
            self.status = status
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type
        if updated_at is not None:
            self.updated_at = updated_at
        if user_id is not None:
            self.user_id = user_id

    @property
    def cluster_id(self) -> 'str':
        """Gets the cluster_id of this V1Incident.  # noqa: E501


        :return: The cluster_id of this V1Incident.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id: 'str'):
        """Sets the cluster_id of this V1Incident.


        :param cluster_id: The cluster_id of this V1Incident.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this V1Incident.  # noqa: E501


        :return: The created_at of this V1Incident.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this V1Incident.


        :param created_at: The created_at of this V1Incident.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def details(self) -> 'list[V1IncidentDetail]':
        """Gets the details of this V1Incident.  # noqa: E501


        :return: The details of this V1Incident.  # noqa: E501
        :rtype: list[V1IncidentDetail]
        """
        return self._details

    @details.setter
    def details(self, details: 'list[V1IncidentDetail]'):
        """Sets the details of this V1Incident.


        :param details: The details of this V1Incident.  # noqa: E501
        :type: list[V1IncidentDetail]
        """

        self._details = details

    @property
    def ended_at(self) -> 'datetime':
        """Gets the ended_at of this V1Incident.  # noqa: E501


        :return: The ended_at of this V1Incident.  # noqa: E501
        :rtype: datetime
        """
        return self._ended_at

    @ended_at.setter
    def ended_at(self, ended_at: 'datetime'):
        """Sets the ended_at of this V1Incident.


        :param ended_at: The ended_at of this V1Incident.  # noqa: E501
        :type: datetime
        """

        self._ended_at = ended_at

    @property
    def id(self) -> 'str':
        """Gets the id of this V1Incident.  # noqa: E501


        :return: The id of this V1Incident.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1Incident.


        :param id: The id of this V1Incident.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def message(self) -> 'str':
        """Gets the message of this V1Incident.  # noqa: E501


        :return: The message of this V1Incident.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: 'str'):
        """Sets the message of this V1Incident.


        :param message: The message of this V1Incident.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def notified(self) -> 'bool':
        """Gets the notified of this V1Incident.  # noqa: E501


        :return: The notified of this V1Incident.  # noqa: E501
        :rtype: bool
        """
        return self._notified

    @notified.setter
    def notified(self, notified: 'bool'):
        """Sets the notified of this V1Incident.


        :param notified: The notified of this V1Incident.  # noqa: E501
        :type: bool
        """

        self._notified = notified

    @property
    def project_id(self) -> 'str':
        """Gets the project_id of this V1Incident.  # noqa: E501


        :return: The project_id of this V1Incident.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: 'str'):
        """Sets the project_id of this V1Incident.


        :param project_id: The project_id of this V1Incident.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def resolution_notes(self) -> 'str':
        """Gets the resolution_notes of this V1Incident.  # noqa: E501


        :return: The resolution_notes of this V1Incident.  # noqa: E501
        :rtype: str
        """
        return self._resolution_notes

    @resolution_notes.setter
    def resolution_notes(self, resolution_notes: 'str'):
        """Sets the resolution_notes of this V1Incident.


        :param resolution_notes: The resolution_notes of this V1Incident.  # noqa: E501
        :type: str
        """

        self._resolution_notes = resolution_notes

    @property
    def resource(self) -> 'str':
        """Gets the resource of this V1Incident.  # noqa: E501


        :return: The resource of this V1Incident.  # noqa: E501
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource: 'str'):
        """Sets the resource of this V1Incident.


        :param resource: The resource of this V1Incident.  # noqa: E501
        :type: str
        """

        self._resource = resource

    @property
    def resource_id(self) -> 'str':
        """Gets the resource_id of this V1Incident.  # noqa: E501


        :return: The resource_id of this V1Incident.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id: 'str'):
        """Sets the resource_id of this V1Incident.


        :param resource_id: The resource_id of this V1Incident.  # noqa: E501
        :type: str
        """

        self._resource_id = resource_id

    @property
    def severity(self) -> 'V1IncidentSeverity':
        """Gets the severity of this V1Incident.  # noqa: E501


        :return: The severity of this V1Incident.  # noqa: E501
        :rtype: V1IncidentSeverity
        """
        return self._severity

    @severity.setter
    def severity(self, severity: 'V1IncidentSeverity'):
        """Sets the severity of this V1Incident.


        :param severity: The severity of this V1Incident.  # noqa: E501
        :type: V1IncidentSeverity
        """

        self._severity = severity

    @property
    def started_at(self) -> 'datetime':
        """Gets the started_at of this V1Incident.  # noqa: E501


        :return: The started_at of this V1Incident.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at: 'datetime'):
        """Sets the started_at of this V1Incident.


        :param started_at: The started_at of this V1Incident.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def status(self) -> 'str':
        """Gets the status of this V1Incident.  # noqa: E501


        :return: The status of this V1Incident.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: 'str'):
        """Sets the status of this V1Incident.


        :param status: The status of this V1Incident.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def title(self) -> 'str':
        """Gets the title of this V1Incident.  # noqa: E501


        :return: The title of this V1Incident.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: 'str'):
        """Sets the title of this V1Incident.


        :param title: The title of this V1Incident.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self) -> 'V1IncidentType':
        """Gets the type of this V1Incident.  # noqa: E501


        :return: The type of this V1Incident.  # noqa: E501
        :rtype: V1IncidentType
        """
        return self._type

    @type.setter
    def type(self, type: 'V1IncidentType'):
        """Sets the type of this V1Incident.


        :param type: The type of this V1Incident.  # noqa: E501
        :type: V1IncidentType
        """

        self._type = type

    @property
    def updated_at(self) -> 'datetime':
        """Gets the updated_at of this V1Incident.  # noqa: E501


        :return: The updated_at of this V1Incident.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: 'datetime'):
        """Sets the updated_at of this V1Incident.


        :param updated_at: The updated_at of this V1Incident.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def user_id(self) -> 'str':
        """Gets the user_id of this V1Incident.  # noqa: E501


        :return: The user_id of this V1Incident.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: 'str'):
        """Sets the user_id of this V1Incident.


        :param user_id: The user_id of this V1Incident.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1Incident, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1Incident') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Incident):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1Incident') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
