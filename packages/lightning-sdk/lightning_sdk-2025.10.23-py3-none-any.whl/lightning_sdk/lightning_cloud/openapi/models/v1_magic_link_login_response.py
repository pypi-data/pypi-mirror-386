# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1MagicLinkLoginResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth_start_url': 'str',
        'internal': 'bool',
        'sso_enabled': 'bool',
        'verified': 'bool',
        'waitlisted': 'bool'
    }

    attribute_map = {
        'auth_start_url': 'authStartUrl',
        'internal': 'internal',
        'sso_enabled': 'ssoEnabled',
        'verified': 'verified',
        'waitlisted': 'waitlisted'
    }

    def __init__(self, auth_start_url: 'str' =None, internal: 'bool' =None, sso_enabled: 'bool' =None, verified: 'bool' =None, waitlisted: 'bool' =None):  # noqa: E501
        """V1MagicLinkLoginResponse - a model defined in Swagger"""  # noqa: E501
        self._auth_start_url = None
        self._internal = None
        self._sso_enabled = None
        self._verified = None
        self._waitlisted = None
        self.discriminator = None
        if auth_start_url is not None:
            self.auth_start_url = auth_start_url
        if internal is not None:
            self.internal = internal
        if sso_enabled is not None:
            self.sso_enabled = sso_enabled
        if verified is not None:
            self.verified = verified
        if waitlisted is not None:
            self.waitlisted = waitlisted

    @property
    def auth_start_url(self) -> 'str':
        """Gets the auth_start_url of this V1MagicLinkLoginResponse.  # noqa: E501


        :return: The auth_start_url of this V1MagicLinkLoginResponse.  # noqa: E501
        :rtype: str
        """
        return self._auth_start_url

    @auth_start_url.setter
    def auth_start_url(self, auth_start_url: 'str'):
        """Sets the auth_start_url of this V1MagicLinkLoginResponse.


        :param auth_start_url: The auth_start_url of this V1MagicLinkLoginResponse.  # noqa: E501
        :type: str
        """

        self._auth_start_url = auth_start_url

    @property
    def internal(self) -> 'bool':
        """Gets the internal of this V1MagicLinkLoginResponse.  # noqa: E501


        :return: The internal of this V1MagicLinkLoginResponse.  # noqa: E501
        :rtype: bool
        """
        return self._internal

    @internal.setter
    def internal(self, internal: 'bool'):
        """Sets the internal of this V1MagicLinkLoginResponse.


        :param internal: The internal of this V1MagicLinkLoginResponse.  # noqa: E501
        :type: bool
        """

        self._internal = internal

    @property
    def sso_enabled(self) -> 'bool':
        """Gets the sso_enabled of this V1MagicLinkLoginResponse.  # noqa: E501


        :return: The sso_enabled of this V1MagicLinkLoginResponse.  # noqa: E501
        :rtype: bool
        """
        return self._sso_enabled

    @sso_enabled.setter
    def sso_enabled(self, sso_enabled: 'bool'):
        """Sets the sso_enabled of this V1MagicLinkLoginResponse.


        :param sso_enabled: The sso_enabled of this V1MagicLinkLoginResponse.  # noqa: E501
        :type: bool
        """

        self._sso_enabled = sso_enabled

    @property
    def verified(self) -> 'bool':
        """Gets the verified of this V1MagicLinkLoginResponse.  # noqa: E501


        :return: The verified of this V1MagicLinkLoginResponse.  # noqa: E501
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified: 'bool'):
        """Sets the verified of this V1MagicLinkLoginResponse.


        :param verified: The verified of this V1MagicLinkLoginResponse.  # noqa: E501
        :type: bool
        """

        self._verified = verified

    @property
    def waitlisted(self) -> 'bool':
        """Gets the waitlisted of this V1MagicLinkLoginResponse.  # noqa: E501


        :return: The waitlisted of this V1MagicLinkLoginResponse.  # noqa: E501
        :rtype: bool
        """
        return self._waitlisted

    @waitlisted.setter
    def waitlisted(self, waitlisted: 'bool'):
        """Sets the waitlisted of this V1MagicLinkLoginResponse.


        :param waitlisted: The waitlisted of this V1MagicLinkLoginResponse.  # noqa: E501
        :type: bool
        """

        self._waitlisted = waitlisted

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1MagicLinkLoginResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1MagicLinkLoginResponse') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1MagicLinkLoginResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1MagicLinkLoginResponse') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
