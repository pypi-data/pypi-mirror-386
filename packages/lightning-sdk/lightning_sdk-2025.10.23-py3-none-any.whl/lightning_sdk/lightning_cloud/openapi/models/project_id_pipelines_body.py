# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class ProjectIdPipelinesBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_id': 'str',
        'name': 'str',
        'parameters': 'list[V1PipelineParameter]',
        'parent_pipeline_id': 'str',
        'shared_filesystem': 'V1SharedFilesystem',
        'steps': 'list[V1PipelineStep]'
    }

    attribute_map = {
        'cluster_id': 'clusterId',
        'name': 'name',
        'parameters': 'parameters',
        'parent_pipeline_id': 'parentPipelineId',
        'shared_filesystem': 'sharedFilesystem',
        'steps': 'steps'
    }

    def __init__(self, cluster_id: 'str' =None, name: 'str' =None, parameters: 'list[V1PipelineParameter]' =None, parent_pipeline_id: 'str' =None, shared_filesystem: 'V1SharedFilesystem' =None, steps: 'list[V1PipelineStep]' =None):  # noqa: E501
        """ProjectIdPipelinesBody - a model defined in Swagger"""  # noqa: E501
        self._cluster_id = None
        self._name = None
        self._parameters = None
        self._parent_pipeline_id = None
        self._shared_filesystem = None
        self._steps = None
        self.discriminator = None
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if name is not None:
            self.name = name
        if parameters is not None:
            self.parameters = parameters
        if parent_pipeline_id is not None:
            self.parent_pipeline_id = parent_pipeline_id
        if shared_filesystem is not None:
            self.shared_filesystem = shared_filesystem
        if steps is not None:
            self.steps = steps

    @property
    def cluster_id(self) -> 'str':
        """Gets the cluster_id of this ProjectIdPipelinesBody.  # noqa: E501


        :return: The cluster_id of this ProjectIdPipelinesBody.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id: 'str'):
        """Sets the cluster_id of this ProjectIdPipelinesBody.


        :param cluster_id: The cluster_id of this ProjectIdPipelinesBody.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def name(self) -> 'str':
        """Gets the name of this ProjectIdPipelinesBody.  # noqa: E501


        :return: The name of this ProjectIdPipelinesBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this ProjectIdPipelinesBody.


        :param name: The name of this ProjectIdPipelinesBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def parameters(self) -> 'list[V1PipelineParameter]':
        """Gets the parameters of this ProjectIdPipelinesBody.  # noqa: E501


        :return: The parameters of this ProjectIdPipelinesBody.  # noqa: E501
        :rtype: list[V1PipelineParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: 'list[V1PipelineParameter]'):
        """Sets the parameters of this ProjectIdPipelinesBody.


        :param parameters: The parameters of this ProjectIdPipelinesBody.  # noqa: E501
        :type: list[V1PipelineParameter]
        """

        self._parameters = parameters

    @property
    def parent_pipeline_id(self) -> 'str':
        """Gets the parent_pipeline_id of this ProjectIdPipelinesBody.  # noqa: E501


        :return: The parent_pipeline_id of this ProjectIdPipelinesBody.  # noqa: E501
        :rtype: str
        """
        return self._parent_pipeline_id

    @parent_pipeline_id.setter
    def parent_pipeline_id(self, parent_pipeline_id: 'str'):
        """Sets the parent_pipeline_id of this ProjectIdPipelinesBody.


        :param parent_pipeline_id: The parent_pipeline_id of this ProjectIdPipelinesBody.  # noqa: E501
        :type: str
        """

        self._parent_pipeline_id = parent_pipeline_id

    @property
    def shared_filesystem(self) -> 'V1SharedFilesystem':
        """Gets the shared_filesystem of this ProjectIdPipelinesBody.  # noqa: E501


        :return: The shared_filesystem of this ProjectIdPipelinesBody.  # noqa: E501
        :rtype: V1SharedFilesystem
        """
        return self._shared_filesystem

    @shared_filesystem.setter
    def shared_filesystem(self, shared_filesystem: 'V1SharedFilesystem'):
        """Sets the shared_filesystem of this ProjectIdPipelinesBody.


        :param shared_filesystem: The shared_filesystem of this ProjectIdPipelinesBody.  # noqa: E501
        :type: V1SharedFilesystem
        """

        self._shared_filesystem = shared_filesystem

    @property
    def steps(self) -> 'list[V1PipelineStep]':
        """Gets the steps of this ProjectIdPipelinesBody.  # noqa: E501


        :return: The steps of this ProjectIdPipelinesBody.  # noqa: E501
        :rtype: list[V1PipelineStep]
        """
        return self._steps

    @steps.setter
    def steps(self, steps: 'list[V1PipelineStep]'):
        """Sets the steps of this ProjectIdPipelinesBody.


        :param steps: The steps of this ProjectIdPipelinesBody.  # noqa: E501
        :type: list[V1PipelineStep]
        """

        self._steps = steps

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectIdPipelinesBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'ProjectIdPipelinesBody') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectIdPipelinesBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'ProjectIdPipelinesBody') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
