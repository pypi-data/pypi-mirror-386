# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1ConversationResponseChunk(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'choices': 'list[V1ResponseChoice]',
        'conversation_id': 'str',
        'executable': 'bool',
        'id': 'str',
        'message_id': 'str',
        'object': 'str',
        'stats': 'dict(str, str)',
        'throughput': 'float',
        'usage': 'V1TokenUsage'
    }

    attribute_map = {
        'choices': 'choices',
        'conversation_id': 'conversationId',
        'executable': 'executable',
        'id': 'id',
        'message_id': 'messageId',
        'object': 'object',
        'stats': 'stats',
        'throughput': 'throughput',
        'usage': 'usage'
    }

    def __init__(self, choices: 'list[V1ResponseChoice]' =None, conversation_id: 'str' =None, executable: 'bool' =None, id: 'str' =None, message_id: 'str' =None, object: 'str' =None, stats: 'dict(str, str)' =None, throughput: 'float' =None, usage: 'V1TokenUsage' =None):  # noqa: E501
        """V1ConversationResponseChunk - a model defined in Swagger"""  # noqa: E501
        self._choices = None
        self._conversation_id = None
        self._executable = None
        self._id = None
        self._message_id = None
        self._object = None
        self._stats = None
        self._throughput = None
        self._usage = None
        self.discriminator = None
        if choices is not None:
            self.choices = choices
        if conversation_id is not None:
            self.conversation_id = conversation_id
        if executable is not None:
            self.executable = executable
        if id is not None:
            self.id = id
        if message_id is not None:
            self.message_id = message_id
        if object is not None:
            self.object = object
        if stats is not None:
            self.stats = stats
        if throughput is not None:
            self.throughput = throughput
        if usage is not None:
            self.usage = usage

    @property
    def choices(self) -> 'list[V1ResponseChoice]':
        """Gets the choices of this V1ConversationResponseChunk.  # noqa: E501


        :return: The choices of this V1ConversationResponseChunk.  # noqa: E501
        :rtype: list[V1ResponseChoice]
        """
        return self._choices

    @choices.setter
    def choices(self, choices: 'list[V1ResponseChoice]'):
        """Sets the choices of this V1ConversationResponseChunk.


        :param choices: The choices of this V1ConversationResponseChunk.  # noqa: E501
        :type: list[V1ResponseChoice]
        """

        self._choices = choices

    @property
    def conversation_id(self) -> 'str':
        """Gets the conversation_id of this V1ConversationResponseChunk.  # noqa: E501


        :return: The conversation_id of this V1ConversationResponseChunk.  # noqa: E501
        :rtype: str
        """
        return self._conversation_id

    @conversation_id.setter
    def conversation_id(self, conversation_id: 'str'):
        """Sets the conversation_id of this V1ConversationResponseChunk.


        :param conversation_id: The conversation_id of this V1ConversationResponseChunk.  # noqa: E501
        :type: str
        """

        self._conversation_id = conversation_id

    @property
    def executable(self) -> 'bool':
        """Gets the executable of this V1ConversationResponseChunk.  # noqa: E501


        :return: The executable of this V1ConversationResponseChunk.  # noqa: E501
        :rtype: bool
        """
        return self._executable

    @executable.setter
    def executable(self, executable: 'bool'):
        """Sets the executable of this V1ConversationResponseChunk.


        :param executable: The executable of this V1ConversationResponseChunk.  # noqa: E501
        :type: bool
        """

        self._executable = executable

    @property
    def id(self) -> 'str':
        """Gets the id of this V1ConversationResponseChunk.  # noqa: E501


        :return: The id of this V1ConversationResponseChunk.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1ConversationResponseChunk.


        :param id: The id of this V1ConversationResponseChunk.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def message_id(self) -> 'str':
        """Gets the message_id of this V1ConversationResponseChunk.  # noqa: E501


        :return: The message_id of this V1ConversationResponseChunk.  # noqa: E501
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id: 'str'):
        """Sets the message_id of this V1ConversationResponseChunk.


        :param message_id: The message_id of this V1ConversationResponseChunk.  # noqa: E501
        :type: str
        """

        self._message_id = message_id

    @property
    def object(self) -> 'str':
        """Gets the object of this V1ConversationResponseChunk.  # noqa: E501


        :return: The object of this V1ConversationResponseChunk.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object: 'str'):
        """Sets the object of this V1ConversationResponseChunk.


        :param object: The object of this V1ConversationResponseChunk.  # noqa: E501
        :type: str
        """

        self._object = object

    @property
    def stats(self) -> 'dict(str, str)':
        """Gets the stats of this V1ConversationResponseChunk.  # noqa: E501


        :return: The stats of this V1ConversationResponseChunk.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._stats

    @stats.setter
    def stats(self, stats: 'dict(str, str)'):
        """Sets the stats of this V1ConversationResponseChunk.


        :param stats: The stats of this V1ConversationResponseChunk.  # noqa: E501
        :type: dict(str, str)
        """

        self._stats = stats

    @property
    def throughput(self) -> 'float':
        """Gets the throughput of this V1ConversationResponseChunk.  # noqa: E501


        :return: The throughput of this V1ConversationResponseChunk.  # noqa: E501
        :rtype: float
        """
        return self._throughput

    @throughput.setter
    def throughput(self, throughput: 'float'):
        """Sets the throughput of this V1ConversationResponseChunk.


        :param throughput: The throughput of this V1ConversationResponseChunk.  # noqa: E501
        :type: float
        """

        self._throughput = throughput

    @property
    def usage(self) -> 'V1TokenUsage':
        """Gets the usage of this V1ConversationResponseChunk.  # noqa: E501


        :return: The usage of this V1ConversationResponseChunk.  # noqa: E501
        :rtype: V1TokenUsage
        """
        return self._usage

    @usage.setter
    def usage(self, usage: 'V1TokenUsage'):
        """Sets the usage of this V1ConversationResponseChunk.


        :param usage: The usage of this V1ConversationResponseChunk.  # noqa: E501
        :type: V1TokenUsage
        """

        self._usage = usage

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1ConversationResponseChunk, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1ConversationResponseChunk') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ConversationResponseChunk):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1ConversationResponseChunk') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
