# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1GetFolderIndexResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'child_folder_names': 'list[str]',
        'folder_cluster_mappings': 'dict(str, V1ClusterNames)',
        'last_modified_at': 'datetime',
        'local_file_count': 'str',
        'nested_file_count': 'str',
        'page_size': 'int',
        'path': 'str',
        'size_bytes': 'str',
        'status': 'V1FolderIndexStatus'
    }

    attribute_map = {
        'child_folder_names': 'childFolderNames',
        'folder_cluster_mappings': 'folderClusterMappings',
        'last_modified_at': 'lastModifiedAt',
        'local_file_count': 'localFileCount',
        'nested_file_count': 'nestedFileCount',
        'page_size': 'pageSize',
        'path': 'path',
        'size_bytes': 'sizeBytes',
        'status': 'status'
    }

    def __init__(self, child_folder_names: 'list[str]' =None, folder_cluster_mappings: 'dict(str, V1ClusterNames)' =None, last_modified_at: 'datetime' =None, local_file_count: 'str' =None, nested_file_count: 'str' =None, page_size: 'int' =None, path: 'str' =None, size_bytes: 'str' =None, status: 'V1FolderIndexStatus' =None):  # noqa: E501
        """V1GetFolderIndexResponse - a model defined in Swagger"""  # noqa: E501
        self._child_folder_names = None
        self._folder_cluster_mappings = None
        self._last_modified_at = None
        self._local_file_count = None
        self._nested_file_count = None
        self._page_size = None
        self._path = None
        self._size_bytes = None
        self._status = None
        self.discriminator = None
        if child_folder_names is not None:
            self.child_folder_names = child_folder_names
        if folder_cluster_mappings is not None:
            self.folder_cluster_mappings = folder_cluster_mappings
        if last_modified_at is not None:
            self.last_modified_at = last_modified_at
        if local_file_count is not None:
            self.local_file_count = local_file_count
        if nested_file_count is not None:
            self.nested_file_count = nested_file_count
        if page_size is not None:
            self.page_size = page_size
        if path is not None:
            self.path = path
        if size_bytes is not None:
            self.size_bytes = size_bytes
        if status is not None:
            self.status = status

    @property
    def child_folder_names(self) -> 'list[str]':
        """Gets the child_folder_names of this V1GetFolderIndexResponse.  # noqa: E501


        :return: The child_folder_names of this V1GetFolderIndexResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._child_folder_names

    @child_folder_names.setter
    def child_folder_names(self, child_folder_names: 'list[str]'):
        """Sets the child_folder_names of this V1GetFolderIndexResponse.


        :param child_folder_names: The child_folder_names of this V1GetFolderIndexResponse.  # noqa: E501
        :type: list[str]
        """

        self._child_folder_names = child_folder_names

    @property
    def folder_cluster_mappings(self) -> 'dict(str, V1ClusterNames)':
        """Gets the folder_cluster_mappings of this V1GetFolderIndexResponse.  # noqa: E501


        :return: The folder_cluster_mappings of this V1GetFolderIndexResponse.  # noqa: E501
        :rtype: dict(str, V1ClusterNames)
        """
        return self._folder_cluster_mappings

    @folder_cluster_mappings.setter
    def folder_cluster_mappings(self, folder_cluster_mappings: 'dict(str, V1ClusterNames)'):
        """Sets the folder_cluster_mappings of this V1GetFolderIndexResponse.


        :param folder_cluster_mappings: The folder_cluster_mappings of this V1GetFolderIndexResponse.  # noqa: E501
        :type: dict(str, V1ClusterNames)
        """

        self._folder_cluster_mappings = folder_cluster_mappings

    @property
    def last_modified_at(self) -> 'datetime':
        """Gets the last_modified_at of this V1GetFolderIndexResponse.  # noqa: E501


        :return: The last_modified_at of this V1GetFolderIndexResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_at

    @last_modified_at.setter
    def last_modified_at(self, last_modified_at: 'datetime'):
        """Sets the last_modified_at of this V1GetFolderIndexResponse.


        :param last_modified_at: The last_modified_at of this V1GetFolderIndexResponse.  # noqa: E501
        :type: datetime
        """

        self._last_modified_at = last_modified_at

    @property
    def local_file_count(self) -> 'str':
        """Gets the local_file_count of this V1GetFolderIndexResponse.  # noqa: E501


        :return: The local_file_count of this V1GetFolderIndexResponse.  # noqa: E501
        :rtype: str
        """
        return self._local_file_count

    @local_file_count.setter
    def local_file_count(self, local_file_count: 'str'):
        """Sets the local_file_count of this V1GetFolderIndexResponse.


        :param local_file_count: The local_file_count of this V1GetFolderIndexResponse.  # noqa: E501
        :type: str
        """

        self._local_file_count = local_file_count

    @property
    def nested_file_count(self) -> 'str':
        """Gets the nested_file_count of this V1GetFolderIndexResponse.  # noqa: E501


        :return: The nested_file_count of this V1GetFolderIndexResponse.  # noqa: E501
        :rtype: str
        """
        return self._nested_file_count

    @nested_file_count.setter
    def nested_file_count(self, nested_file_count: 'str'):
        """Sets the nested_file_count of this V1GetFolderIndexResponse.


        :param nested_file_count: The nested_file_count of this V1GetFolderIndexResponse.  # noqa: E501
        :type: str
        """

        self._nested_file_count = nested_file_count

    @property
    def page_size(self) -> 'int':
        """Gets the page_size of this V1GetFolderIndexResponse.  # noqa: E501


        :return: The page_size of this V1GetFolderIndexResponse.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size: 'int'):
        """Sets the page_size of this V1GetFolderIndexResponse.


        :param page_size: The page_size of this V1GetFolderIndexResponse.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def path(self) -> 'str':
        """Gets the path of this V1GetFolderIndexResponse.  # noqa: E501


        :return: The path of this V1GetFolderIndexResponse.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: 'str'):
        """Sets the path of this V1GetFolderIndexResponse.


        :param path: The path of this V1GetFolderIndexResponse.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def size_bytes(self) -> 'str':
        """Gets the size_bytes of this V1GetFolderIndexResponse.  # noqa: E501


        :return: The size_bytes of this V1GetFolderIndexResponse.  # noqa: E501
        :rtype: str
        """
        return self._size_bytes

    @size_bytes.setter
    def size_bytes(self, size_bytes: 'str'):
        """Sets the size_bytes of this V1GetFolderIndexResponse.


        :param size_bytes: The size_bytes of this V1GetFolderIndexResponse.  # noqa: E501
        :type: str
        """

        self._size_bytes = size_bytes

    @property
    def status(self) -> 'V1FolderIndexStatus':
        """Gets the status of this V1GetFolderIndexResponse.  # noqa: E501


        :return: The status of this V1GetFolderIndexResponse.  # noqa: E501
        :rtype: V1FolderIndexStatus
        """
        return self._status

    @status.setter
    def status(self, status: 'V1FolderIndexStatus'):
        """Sets the status of this V1GetFolderIndexResponse.


        :param status: The status of this V1GetFolderIndexResponse.  # noqa: E501
        :type: V1FolderIndexStatus
        """

        self._status = status

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1GetFolderIndexResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1GetFolderIndexResponse') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1GetFolderIndexResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1GetFolderIndexResponse') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
