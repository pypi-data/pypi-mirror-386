# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1ClusterMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpus_util': 'float',
        'filesystem_inode_util': 'float',
        'filesystem_read_rate': 'float',
        'filesystem_total': 'str',
        'filesystem_util': 'float',
        'filesystem_write_rate': 'float',
        'gpu_sm_active': 'float',
        'gpu_sm_occupancy': 'float',
        'gpus_energy_avg': 'float',
        'gpus_energy_avg_running': 'float',
        'gpus_energy_total': 'float',
        'gpus_temp_avg': 'float',
        'gpus_temp_avg_running': 'float',
        'gpus_util': 'float',
        'gpus_util_over_allocable': 'float',
        'gpus_util_over_requested': 'float',
        'max_gpu_temp_recorded': 'int',
        'max_power_per_gpu': 'int',
        'num_cpus': 'int',
        'num_gpus': 'int',
        'num_gpus_allocable': 'int',
        'num_limit_cpus': 'int',
        'num_limit_gpus': 'int',
        'num_namespaces': 'int',
        'num_nodes': 'int',
        'num_pods': 'int',
        'num_requested_cpus': 'int',
        'num_requested_gpus': 'int',
        'nvlink_rx_gib_avg': 'float',
        'nvlink_tx_gib_avg': 'float',
        'pcie_rx_gib_avg': 'float',
        'pcie_tx_gib_avg': 'float',
        'ram_limit': 'str',
        'ram_requested': 'str',
        'ram_total': 'str',
        'ram_util': 'float',
        'timestamp': 'datetime',
        'vram_limit': 'int',
        'vram_read_write_util': 'float',
        'vram_requested': 'int',
        'vram_total': 'int',
        'vram_used_avg': 'int',
        'vram_used_total': 'int',
        'vram_util': 'float'
    }

    attribute_map = {
        'cpus_util': 'cpusUtil',
        'filesystem_inode_util': 'filesystemInodeUtil',
        'filesystem_read_rate': 'filesystemReadRate',
        'filesystem_total': 'filesystemTotal',
        'filesystem_util': 'filesystemUtil',
        'filesystem_write_rate': 'filesystemWriteRate',
        'gpu_sm_active': 'gpuSmActive',
        'gpu_sm_occupancy': 'gpuSmOccupancy',
        'gpus_energy_avg': 'gpusEnergyAvg',
        'gpus_energy_avg_running': 'gpusEnergyAvgRunning',
        'gpus_energy_total': 'gpusEnergyTotal',
        'gpus_temp_avg': 'gpusTempAvg',
        'gpus_temp_avg_running': 'gpusTempAvgRunning',
        'gpus_util': 'gpusUtil',
        'gpus_util_over_allocable': 'gpusUtilOverAllocable',
        'gpus_util_over_requested': 'gpusUtilOverRequested',
        'max_gpu_temp_recorded': 'maxGpuTempRecorded',
        'max_power_per_gpu': 'maxPowerPerGpu',
        'num_cpus': 'numCpus',
        'num_gpus': 'numGpus',
        'num_gpus_allocable': 'numGpusAllocable',
        'num_limit_cpus': 'numLimitCpus',
        'num_limit_gpus': 'numLimitGpus',
        'num_namespaces': 'numNamespaces',
        'num_nodes': 'numNodes',
        'num_pods': 'numPods',
        'num_requested_cpus': 'numRequestedCpus',
        'num_requested_gpus': 'numRequestedGpus',
        'nvlink_rx_gib_avg': 'nvlinkRxGibAvg',
        'nvlink_tx_gib_avg': 'nvlinkTxGibAvg',
        'pcie_rx_gib_avg': 'pcieRxGibAvg',
        'pcie_tx_gib_avg': 'pcieTxGibAvg',
        'ram_limit': 'ramLimit',
        'ram_requested': 'ramRequested',
        'ram_total': 'ramTotal',
        'ram_util': 'ramUtil',
        'timestamp': 'timestamp',
        'vram_limit': 'vramLimit',
        'vram_read_write_util': 'vramReadWriteUtil',
        'vram_requested': 'vramRequested',
        'vram_total': 'vramTotal',
        'vram_used_avg': 'vramUsedAvg',
        'vram_used_total': 'vramUsedTotal',
        'vram_util': 'vramUtil'
    }

    def __init__(self, cpus_util: 'float' =None, filesystem_inode_util: 'float' =None, filesystem_read_rate: 'float' =None, filesystem_total: 'str' =None, filesystem_util: 'float' =None, filesystem_write_rate: 'float' =None, gpu_sm_active: 'float' =None, gpu_sm_occupancy: 'float' =None, gpus_energy_avg: 'float' =None, gpus_energy_avg_running: 'float' =None, gpus_energy_total: 'float' =None, gpus_temp_avg: 'float' =None, gpus_temp_avg_running: 'float' =None, gpus_util: 'float' =None, gpus_util_over_allocable: 'float' =None, gpus_util_over_requested: 'float' =None, max_gpu_temp_recorded: 'int' =None, max_power_per_gpu: 'int' =None, num_cpus: 'int' =None, num_gpus: 'int' =None, num_gpus_allocable: 'int' =None, num_limit_cpus: 'int' =None, num_limit_gpus: 'int' =None, num_namespaces: 'int' =None, num_nodes: 'int' =None, num_pods: 'int' =None, num_requested_cpus: 'int' =None, num_requested_gpus: 'int' =None, nvlink_rx_gib_avg: 'float' =None, nvlink_tx_gib_avg: 'float' =None, pcie_rx_gib_avg: 'float' =None, pcie_tx_gib_avg: 'float' =None, ram_limit: 'str' =None, ram_requested: 'str' =None, ram_total: 'str' =None, ram_util: 'float' =None, timestamp: 'datetime' =None, vram_limit: 'int' =None, vram_read_write_util: 'float' =None, vram_requested: 'int' =None, vram_total: 'int' =None, vram_used_avg: 'int' =None, vram_used_total: 'int' =None, vram_util: 'float' =None):  # noqa: E501
        """V1ClusterMetrics - a model defined in Swagger"""  # noqa: E501
        self._cpus_util = None
        self._filesystem_inode_util = None
        self._filesystem_read_rate = None
        self._filesystem_total = None
        self._filesystem_util = None
        self._filesystem_write_rate = None
        self._gpu_sm_active = None
        self._gpu_sm_occupancy = None
        self._gpus_energy_avg = None
        self._gpus_energy_avg_running = None
        self._gpus_energy_total = None
        self._gpus_temp_avg = None
        self._gpus_temp_avg_running = None
        self._gpus_util = None
        self._gpus_util_over_allocable = None
        self._gpus_util_over_requested = None
        self._max_gpu_temp_recorded = None
        self._max_power_per_gpu = None
        self._num_cpus = None
        self._num_gpus = None
        self._num_gpus_allocable = None
        self._num_limit_cpus = None
        self._num_limit_gpus = None
        self._num_namespaces = None
        self._num_nodes = None
        self._num_pods = None
        self._num_requested_cpus = None
        self._num_requested_gpus = None
        self._nvlink_rx_gib_avg = None
        self._nvlink_tx_gib_avg = None
        self._pcie_rx_gib_avg = None
        self._pcie_tx_gib_avg = None
        self._ram_limit = None
        self._ram_requested = None
        self._ram_total = None
        self._ram_util = None
        self._timestamp = None
        self._vram_limit = None
        self._vram_read_write_util = None
        self._vram_requested = None
        self._vram_total = None
        self._vram_used_avg = None
        self._vram_used_total = None
        self._vram_util = None
        self.discriminator = None
        if cpus_util is not None:
            self.cpus_util = cpus_util
        if filesystem_inode_util is not None:
            self.filesystem_inode_util = filesystem_inode_util
        if filesystem_read_rate is not None:
            self.filesystem_read_rate = filesystem_read_rate
        if filesystem_total is not None:
            self.filesystem_total = filesystem_total
        if filesystem_util is not None:
            self.filesystem_util = filesystem_util
        if filesystem_write_rate is not None:
            self.filesystem_write_rate = filesystem_write_rate
        if gpu_sm_active is not None:
            self.gpu_sm_active = gpu_sm_active
        if gpu_sm_occupancy is not None:
            self.gpu_sm_occupancy = gpu_sm_occupancy
        if gpus_energy_avg is not None:
            self.gpus_energy_avg = gpus_energy_avg
        if gpus_energy_avg_running is not None:
            self.gpus_energy_avg_running = gpus_energy_avg_running
        if gpus_energy_total is not None:
            self.gpus_energy_total = gpus_energy_total
        if gpus_temp_avg is not None:
            self.gpus_temp_avg = gpus_temp_avg
        if gpus_temp_avg_running is not None:
            self.gpus_temp_avg_running = gpus_temp_avg_running
        if gpus_util is not None:
            self.gpus_util = gpus_util
        if gpus_util_over_allocable is not None:
            self.gpus_util_over_allocable = gpus_util_over_allocable
        if gpus_util_over_requested is not None:
            self.gpus_util_over_requested = gpus_util_over_requested
        if max_gpu_temp_recorded is not None:
            self.max_gpu_temp_recorded = max_gpu_temp_recorded
        if max_power_per_gpu is not None:
            self.max_power_per_gpu = max_power_per_gpu
        if num_cpus is not None:
            self.num_cpus = num_cpus
        if num_gpus is not None:
            self.num_gpus = num_gpus
        if num_gpus_allocable is not None:
            self.num_gpus_allocable = num_gpus_allocable
        if num_limit_cpus is not None:
            self.num_limit_cpus = num_limit_cpus
        if num_limit_gpus is not None:
            self.num_limit_gpus = num_limit_gpus
        if num_namespaces is not None:
            self.num_namespaces = num_namespaces
        if num_nodes is not None:
            self.num_nodes = num_nodes
        if num_pods is not None:
            self.num_pods = num_pods
        if num_requested_cpus is not None:
            self.num_requested_cpus = num_requested_cpus
        if num_requested_gpus is not None:
            self.num_requested_gpus = num_requested_gpus
        if nvlink_rx_gib_avg is not None:
            self.nvlink_rx_gib_avg = nvlink_rx_gib_avg
        if nvlink_tx_gib_avg is not None:
            self.nvlink_tx_gib_avg = nvlink_tx_gib_avg
        if pcie_rx_gib_avg is not None:
            self.pcie_rx_gib_avg = pcie_rx_gib_avg
        if pcie_tx_gib_avg is not None:
            self.pcie_tx_gib_avg = pcie_tx_gib_avg
        if ram_limit is not None:
            self.ram_limit = ram_limit
        if ram_requested is not None:
            self.ram_requested = ram_requested
        if ram_total is not None:
            self.ram_total = ram_total
        if ram_util is not None:
            self.ram_util = ram_util
        if timestamp is not None:
            self.timestamp = timestamp
        if vram_limit is not None:
            self.vram_limit = vram_limit
        if vram_read_write_util is not None:
            self.vram_read_write_util = vram_read_write_util
        if vram_requested is not None:
            self.vram_requested = vram_requested
        if vram_total is not None:
            self.vram_total = vram_total
        if vram_used_avg is not None:
            self.vram_used_avg = vram_used_avg
        if vram_used_total is not None:
            self.vram_used_total = vram_used_total
        if vram_util is not None:
            self.vram_util = vram_util

    @property
    def cpus_util(self) -> 'float':
        """Gets the cpus_util of this V1ClusterMetrics.  # noqa: E501


        :return: The cpus_util of this V1ClusterMetrics.  # noqa: E501
        :rtype: float
        """
        return self._cpus_util

    @cpus_util.setter
    def cpus_util(self, cpus_util: 'float'):
        """Sets the cpus_util of this V1ClusterMetrics.


        :param cpus_util: The cpus_util of this V1ClusterMetrics.  # noqa: E501
        :type: float
        """

        self._cpus_util = cpus_util

    @property
    def filesystem_inode_util(self) -> 'float':
        """Gets the filesystem_inode_util of this V1ClusterMetrics.  # noqa: E501


        :return: The filesystem_inode_util of this V1ClusterMetrics.  # noqa: E501
        :rtype: float
        """
        return self._filesystem_inode_util

    @filesystem_inode_util.setter
    def filesystem_inode_util(self, filesystem_inode_util: 'float'):
        """Sets the filesystem_inode_util of this V1ClusterMetrics.


        :param filesystem_inode_util: The filesystem_inode_util of this V1ClusterMetrics.  # noqa: E501
        :type: float
        """

        self._filesystem_inode_util = filesystem_inode_util

    @property
    def filesystem_read_rate(self) -> 'float':
        """Gets the filesystem_read_rate of this V1ClusterMetrics.  # noqa: E501


        :return: The filesystem_read_rate of this V1ClusterMetrics.  # noqa: E501
        :rtype: float
        """
        return self._filesystem_read_rate

    @filesystem_read_rate.setter
    def filesystem_read_rate(self, filesystem_read_rate: 'float'):
        """Sets the filesystem_read_rate of this V1ClusterMetrics.


        :param filesystem_read_rate: The filesystem_read_rate of this V1ClusterMetrics.  # noqa: E501
        :type: float
        """

        self._filesystem_read_rate = filesystem_read_rate

    @property
    def filesystem_total(self) -> 'str':
        """Gets the filesystem_total of this V1ClusterMetrics.  # noqa: E501


        :return: The filesystem_total of this V1ClusterMetrics.  # noqa: E501
        :rtype: str
        """
        return self._filesystem_total

    @filesystem_total.setter
    def filesystem_total(self, filesystem_total: 'str'):
        """Sets the filesystem_total of this V1ClusterMetrics.


        :param filesystem_total: The filesystem_total of this V1ClusterMetrics.  # noqa: E501
        :type: str
        """

        self._filesystem_total = filesystem_total

    @property
    def filesystem_util(self) -> 'float':
        """Gets the filesystem_util of this V1ClusterMetrics.  # noqa: E501


        :return: The filesystem_util of this V1ClusterMetrics.  # noqa: E501
        :rtype: float
        """
        return self._filesystem_util

    @filesystem_util.setter
    def filesystem_util(self, filesystem_util: 'float'):
        """Sets the filesystem_util of this V1ClusterMetrics.


        :param filesystem_util: The filesystem_util of this V1ClusterMetrics.  # noqa: E501
        :type: float
        """

        self._filesystem_util = filesystem_util

    @property
    def filesystem_write_rate(self) -> 'float':
        """Gets the filesystem_write_rate of this V1ClusterMetrics.  # noqa: E501


        :return: The filesystem_write_rate of this V1ClusterMetrics.  # noqa: E501
        :rtype: float
        """
        return self._filesystem_write_rate

    @filesystem_write_rate.setter
    def filesystem_write_rate(self, filesystem_write_rate: 'float'):
        """Sets the filesystem_write_rate of this V1ClusterMetrics.


        :param filesystem_write_rate: The filesystem_write_rate of this V1ClusterMetrics.  # noqa: E501
        :type: float
        """

        self._filesystem_write_rate = filesystem_write_rate

    @property
    def gpu_sm_active(self) -> 'float':
        """Gets the gpu_sm_active of this V1ClusterMetrics.  # noqa: E501


        :return: The gpu_sm_active of this V1ClusterMetrics.  # noqa: E501
        :rtype: float
        """
        return self._gpu_sm_active

    @gpu_sm_active.setter
    def gpu_sm_active(self, gpu_sm_active: 'float'):
        """Sets the gpu_sm_active of this V1ClusterMetrics.


        :param gpu_sm_active: The gpu_sm_active of this V1ClusterMetrics.  # noqa: E501
        :type: float
        """

        self._gpu_sm_active = gpu_sm_active

    @property
    def gpu_sm_occupancy(self) -> 'float':
        """Gets the gpu_sm_occupancy of this V1ClusterMetrics.  # noqa: E501


        :return: The gpu_sm_occupancy of this V1ClusterMetrics.  # noqa: E501
        :rtype: float
        """
        return self._gpu_sm_occupancy

    @gpu_sm_occupancy.setter
    def gpu_sm_occupancy(self, gpu_sm_occupancy: 'float'):
        """Sets the gpu_sm_occupancy of this V1ClusterMetrics.


        :param gpu_sm_occupancy: The gpu_sm_occupancy of this V1ClusterMetrics.  # noqa: E501
        :type: float
        """

        self._gpu_sm_occupancy = gpu_sm_occupancy

    @property
    def gpus_energy_avg(self) -> 'float':
        """Gets the gpus_energy_avg of this V1ClusterMetrics.  # noqa: E501


        :return: The gpus_energy_avg of this V1ClusterMetrics.  # noqa: E501
        :rtype: float
        """
        return self._gpus_energy_avg

    @gpus_energy_avg.setter
    def gpus_energy_avg(self, gpus_energy_avg: 'float'):
        """Sets the gpus_energy_avg of this V1ClusterMetrics.


        :param gpus_energy_avg: The gpus_energy_avg of this V1ClusterMetrics.  # noqa: E501
        :type: float
        """

        self._gpus_energy_avg = gpus_energy_avg

    @property
    def gpus_energy_avg_running(self) -> 'float':
        """Gets the gpus_energy_avg_running of this V1ClusterMetrics.  # noqa: E501


        :return: The gpus_energy_avg_running of this V1ClusterMetrics.  # noqa: E501
        :rtype: float
        """
        return self._gpus_energy_avg_running

    @gpus_energy_avg_running.setter
    def gpus_energy_avg_running(self, gpus_energy_avg_running: 'float'):
        """Sets the gpus_energy_avg_running of this V1ClusterMetrics.


        :param gpus_energy_avg_running: The gpus_energy_avg_running of this V1ClusterMetrics.  # noqa: E501
        :type: float
        """

        self._gpus_energy_avg_running = gpus_energy_avg_running

    @property
    def gpus_energy_total(self) -> 'float':
        """Gets the gpus_energy_total of this V1ClusterMetrics.  # noqa: E501


        :return: The gpus_energy_total of this V1ClusterMetrics.  # noqa: E501
        :rtype: float
        """
        return self._gpus_energy_total

    @gpus_energy_total.setter
    def gpus_energy_total(self, gpus_energy_total: 'float'):
        """Sets the gpus_energy_total of this V1ClusterMetrics.


        :param gpus_energy_total: The gpus_energy_total of this V1ClusterMetrics.  # noqa: E501
        :type: float
        """

        self._gpus_energy_total = gpus_energy_total

    @property
    def gpus_temp_avg(self) -> 'float':
        """Gets the gpus_temp_avg of this V1ClusterMetrics.  # noqa: E501


        :return: The gpus_temp_avg of this V1ClusterMetrics.  # noqa: E501
        :rtype: float
        """
        return self._gpus_temp_avg

    @gpus_temp_avg.setter
    def gpus_temp_avg(self, gpus_temp_avg: 'float'):
        """Sets the gpus_temp_avg of this V1ClusterMetrics.


        :param gpus_temp_avg: The gpus_temp_avg of this V1ClusterMetrics.  # noqa: E501
        :type: float
        """

        self._gpus_temp_avg = gpus_temp_avg

    @property
    def gpus_temp_avg_running(self) -> 'float':
        """Gets the gpus_temp_avg_running of this V1ClusterMetrics.  # noqa: E501


        :return: The gpus_temp_avg_running of this V1ClusterMetrics.  # noqa: E501
        :rtype: float
        """
        return self._gpus_temp_avg_running

    @gpus_temp_avg_running.setter
    def gpus_temp_avg_running(self, gpus_temp_avg_running: 'float'):
        """Sets the gpus_temp_avg_running of this V1ClusterMetrics.


        :param gpus_temp_avg_running: The gpus_temp_avg_running of this V1ClusterMetrics.  # noqa: E501
        :type: float
        """

        self._gpus_temp_avg_running = gpus_temp_avg_running

    @property
    def gpus_util(self) -> 'float':
        """Gets the gpus_util of this V1ClusterMetrics.  # noqa: E501


        :return: The gpus_util of this V1ClusterMetrics.  # noqa: E501
        :rtype: float
        """
        return self._gpus_util

    @gpus_util.setter
    def gpus_util(self, gpus_util: 'float'):
        """Sets the gpus_util of this V1ClusterMetrics.


        :param gpus_util: The gpus_util of this V1ClusterMetrics.  # noqa: E501
        :type: float
        """

        self._gpus_util = gpus_util

    @property
    def gpus_util_over_allocable(self) -> 'float':
        """Gets the gpus_util_over_allocable of this V1ClusterMetrics.  # noqa: E501


        :return: The gpus_util_over_allocable of this V1ClusterMetrics.  # noqa: E501
        :rtype: float
        """
        return self._gpus_util_over_allocable

    @gpus_util_over_allocable.setter
    def gpus_util_over_allocable(self, gpus_util_over_allocable: 'float'):
        """Sets the gpus_util_over_allocable of this V1ClusterMetrics.


        :param gpus_util_over_allocable: The gpus_util_over_allocable of this V1ClusterMetrics.  # noqa: E501
        :type: float
        """

        self._gpus_util_over_allocable = gpus_util_over_allocable

    @property
    def gpus_util_over_requested(self) -> 'float':
        """Gets the gpus_util_over_requested of this V1ClusterMetrics.  # noqa: E501


        :return: The gpus_util_over_requested of this V1ClusterMetrics.  # noqa: E501
        :rtype: float
        """
        return self._gpus_util_over_requested

    @gpus_util_over_requested.setter
    def gpus_util_over_requested(self, gpus_util_over_requested: 'float'):
        """Sets the gpus_util_over_requested of this V1ClusterMetrics.


        :param gpus_util_over_requested: The gpus_util_over_requested of this V1ClusterMetrics.  # noqa: E501
        :type: float
        """

        self._gpus_util_over_requested = gpus_util_over_requested

    @property
    def max_gpu_temp_recorded(self) -> 'int':
        """Gets the max_gpu_temp_recorded of this V1ClusterMetrics.  # noqa: E501


        :return: The max_gpu_temp_recorded of this V1ClusterMetrics.  # noqa: E501
        :rtype: int
        """
        return self._max_gpu_temp_recorded

    @max_gpu_temp_recorded.setter
    def max_gpu_temp_recorded(self, max_gpu_temp_recorded: 'int'):
        """Sets the max_gpu_temp_recorded of this V1ClusterMetrics.


        :param max_gpu_temp_recorded: The max_gpu_temp_recorded of this V1ClusterMetrics.  # noqa: E501
        :type: int
        """

        self._max_gpu_temp_recorded = max_gpu_temp_recorded

    @property
    def max_power_per_gpu(self) -> 'int':
        """Gets the max_power_per_gpu of this V1ClusterMetrics.  # noqa: E501


        :return: The max_power_per_gpu of this V1ClusterMetrics.  # noqa: E501
        :rtype: int
        """
        return self._max_power_per_gpu

    @max_power_per_gpu.setter
    def max_power_per_gpu(self, max_power_per_gpu: 'int'):
        """Sets the max_power_per_gpu of this V1ClusterMetrics.


        :param max_power_per_gpu: The max_power_per_gpu of this V1ClusterMetrics.  # noqa: E501
        :type: int
        """

        self._max_power_per_gpu = max_power_per_gpu

    @property
    def num_cpus(self) -> 'int':
        """Gets the num_cpus of this V1ClusterMetrics.  # noqa: E501


        :return: The num_cpus of this V1ClusterMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_cpus

    @num_cpus.setter
    def num_cpus(self, num_cpus: 'int'):
        """Sets the num_cpus of this V1ClusterMetrics.


        :param num_cpus: The num_cpus of this V1ClusterMetrics.  # noqa: E501
        :type: int
        """

        self._num_cpus = num_cpus

    @property
    def num_gpus(self) -> 'int':
        """Gets the num_gpus of this V1ClusterMetrics.  # noqa: E501


        :return: The num_gpus of this V1ClusterMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_gpus

    @num_gpus.setter
    def num_gpus(self, num_gpus: 'int'):
        """Sets the num_gpus of this V1ClusterMetrics.


        :param num_gpus: The num_gpus of this V1ClusterMetrics.  # noqa: E501
        :type: int
        """

        self._num_gpus = num_gpus

    @property
    def num_gpus_allocable(self) -> 'int':
        """Gets the num_gpus_allocable of this V1ClusterMetrics.  # noqa: E501


        :return: The num_gpus_allocable of this V1ClusterMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_gpus_allocable

    @num_gpus_allocable.setter
    def num_gpus_allocable(self, num_gpus_allocable: 'int'):
        """Sets the num_gpus_allocable of this V1ClusterMetrics.


        :param num_gpus_allocable: The num_gpus_allocable of this V1ClusterMetrics.  # noqa: E501
        :type: int
        """

        self._num_gpus_allocable = num_gpus_allocable

    @property
    def num_limit_cpus(self) -> 'int':
        """Gets the num_limit_cpus of this V1ClusterMetrics.  # noqa: E501


        :return: The num_limit_cpus of this V1ClusterMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_limit_cpus

    @num_limit_cpus.setter
    def num_limit_cpus(self, num_limit_cpus: 'int'):
        """Sets the num_limit_cpus of this V1ClusterMetrics.


        :param num_limit_cpus: The num_limit_cpus of this V1ClusterMetrics.  # noqa: E501
        :type: int
        """

        self._num_limit_cpus = num_limit_cpus

    @property
    def num_limit_gpus(self) -> 'int':
        """Gets the num_limit_gpus of this V1ClusterMetrics.  # noqa: E501


        :return: The num_limit_gpus of this V1ClusterMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_limit_gpus

    @num_limit_gpus.setter
    def num_limit_gpus(self, num_limit_gpus: 'int'):
        """Sets the num_limit_gpus of this V1ClusterMetrics.


        :param num_limit_gpus: The num_limit_gpus of this V1ClusterMetrics.  # noqa: E501
        :type: int
        """

        self._num_limit_gpus = num_limit_gpus

    @property
    def num_namespaces(self) -> 'int':
        """Gets the num_namespaces of this V1ClusterMetrics.  # noqa: E501


        :return: The num_namespaces of this V1ClusterMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_namespaces

    @num_namespaces.setter
    def num_namespaces(self, num_namespaces: 'int'):
        """Sets the num_namespaces of this V1ClusterMetrics.


        :param num_namespaces: The num_namespaces of this V1ClusterMetrics.  # noqa: E501
        :type: int
        """

        self._num_namespaces = num_namespaces

    @property
    def num_nodes(self) -> 'int':
        """Gets the num_nodes of this V1ClusterMetrics.  # noqa: E501


        :return: The num_nodes of this V1ClusterMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_nodes

    @num_nodes.setter
    def num_nodes(self, num_nodes: 'int'):
        """Sets the num_nodes of this V1ClusterMetrics.


        :param num_nodes: The num_nodes of this V1ClusterMetrics.  # noqa: E501
        :type: int
        """

        self._num_nodes = num_nodes

    @property
    def num_pods(self) -> 'int':
        """Gets the num_pods of this V1ClusterMetrics.  # noqa: E501


        :return: The num_pods of this V1ClusterMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_pods

    @num_pods.setter
    def num_pods(self, num_pods: 'int'):
        """Sets the num_pods of this V1ClusterMetrics.


        :param num_pods: The num_pods of this V1ClusterMetrics.  # noqa: E501
        :type: int
        """

        self._num_pods = num_pods

    @property
    def num_requested_cpus(self) -> 'int':
        """Gets the num_requested_cpus of this V1ClusterMetrics.  # noqa: E501


        :return: The num_requested_cpus of this V1ClusterMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_requested_cpus

    @num_requested_cpus.setter
    def num_requested_cpus(self, num_requested_cpus: 'int'):
        """Sets the num_requested_cpus of this V1ClusterMetrics.


        :param num_requested_cpus: The num_requested_cpus of this V1ClusterMetrics.  # noqa: E501
        :type: int
        """

        self._num_requested_cpus = num_requested_cpus

    @property
    def num_requested_gpus(self) -> 'int':
        """Gets the num_requested_gpus of this V1ClusterMetrics.  # noqa: E501


        :return: The num_requested_gpus of this V1ClusterMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_requested_gpus

    @num_requested_gpus.setter
    def num_requested_gpus(self, num_requested_gpus: 'int'):
        """Sets the num_requested_gpus of this V1ClusterMetrics.


        :param num_requested_gpus: The num_requested_gpus of this V1ClusterMetrics.  # noqa: E501
        :type: int
        """

        self._num_requested_gpus = num_requested_gpus

    @property
    def nvlink_rx_gib_avg(self) -> 'float':
        """Gets the nvlink_rx_gib_avg of this V1ClusterMetrics.  # noqa: E501


        :return: The nvlink_rx_gib_avg of this V1ClusterMetrics.  # noqa: E501
        :rtype: float
        """
        return self._nvlink_rx_gib_avg

    @nvlink_rx_gib_avg.setter
    def nvlink_rx_gib_avg(self, nvlink_rx_gib_avg: 'float'):
        """Sets the nvlink_rx_gib_avg of this V1ClusterMetrics.


        :param nvlink_rx_gib_avg: The nvlink_rx_gib_avg of this V1ClusterMetrics.  # noqa: E501
        :type: float
        """

        self._nvlink_rx_gib_avg = nvlink_rx_gib_avg

    @property
    def nvlink_tx_gib_avg(self) -> 'float':
        """Gets the nvlink_tx_gib_avg of this V1ClusterMetrics.  # noqa: E501


        :return: The nvlink_tx_gib_avg of this V1ClusterMetrics.  # noqa: E501
        :rtype: float
        """
        return self._nvlink_tx_gib_avg

    @nvlink_tx_gib_avg.setter
    def nvlink_tx_gib_avg(self, nvlink_tx_gib_avg: 'float'):
        """Sets the nvlink_tx_gib_avg of this V1ClusterMetrics.


        :param nvlink_tx_gib_avg: The nvlink_tx_gib_avg of this V1ClusterMetrics.  # noqa: E501
        :type: float
        """

        self._nvlink_tx_gib_avg = nvlink_tx_gib_avg

    @property
    def pcie_rx_gib_avg(self) -> 'float':
        """Gets the pcie_rx_gib_avg of this V1ClusterMetrics.  # noqa: E501


        :return: The pcie_rx_gib_avg of this V1ClusterMetrics.  # noqa: E501
        :rtype: float
        """
        return self._pcie_rx_gib_avg

    @pcie_rx_gib_avg.setter
    def pcie_rx_gib_avg(self, pcie_rx_gib_avg: 'float'):
        """Sets the pcie_rx_gib_avg of this V1ClusterMetrics.


        :param pcie_rx_gib_avg: The pcie_rx_gib_avg of this V1ClusterMetrics.  # noqa: E501
        :type: float
        """

        self._pcie_rx_gib_avg = pcie_rx_gib_avg

    @property
    def pcie_tx_gib_avg(self) -> 'float':
        """Gets the pcie_tx_gib_avg of this V1ClusterMetrics.  # noqa: E501


        :return: The pcie_tx_gib_avg of this V1ClusterMetrics.  # noqa: E501
        :rtype: float
        """
        return self._pcie_tx_gib_avg

    @pcie_tx_gib_avg.setter
    def pcie_tx_gib_avg(self, pcie_tx_gib_avg: 'float'):
        """Sets the pcie_tx_gib_avg of this V1ClusterMetrics.


        :param pcie_tx_gib_avg: The pcie_tx_gib_avg of this V1ClusterMetrics.  # noqa: E501
        :type: float
        """

        self._pcie_tx_gib_avg = pcie_tx_gib_avg

    @property
    def ram_limit(self) -> 'str':
        """Gets the ram_limit of this V1ClusterMetrics.  # noqa: E501


        :return: The ram_limit of this V1ClusterMetrics.  # noqa: E501
        :rtype: str
        """
        return self._ram_limit

    @ram_limit.setter
    def ram_limit(self, ram_limit: 'str'):
        """Sets the ram_limit of this V1ClusterMetrics.


        :param ram_limit: The ram_limit of this V1ClusterMetrics.  # noqa: E501
        :type: str
        """

        self._ram_limit = ram_limit

    @property
    def ram_requested(self) -> 'str':
        """Gets the ram_requested of this V1ClusterMetrics.  # noqa: E501


        :return: The ram_requested of this V1ClusterMetrics.  # noqa: E501
        :rtype: str
        """
        return self._ram_requested

    @ram_requested.setter
    def ram_requested(self, ram_requested: 'str'):
        """Sets the ram_requested of this V1ClusterMetrics.


        :param ram_requested: The ram_requested of this V1ClusterMetrics.  # noqa: E501
        :type: str
        """

        self._ram_requested = ram_requested

    @property
    def ram_total(self) -> 'str':
        """Gets the ram_total of this V1ClusterMetrics.  # noqa: E501


        :return: The ram_total of this V1ClusterMetrics.  # noqa: E501
        :rtype: str
        """
        return self._ram_total

    @ram_total.setter
    def ram_total(self, ram_total: 'str'):
        """Sets the ram_total of this V1ClusterMetrics.


        :param ram_total: The ram_total of this V1ClusterMetrics.  # noqa: E501
        :type: str
        """

        self._ram_total = ram_total

    @property
    def ram_util(self) -> 'float':
        """Gets the ram_util of this V1ClusterMetrics.  # noqa: E501


        :return: The ram_util of this V1ClusterMetrics.  # noqa: E501
        :rtype: float
        """
        return self._ram_util

    @ram_util.setter
    def ram_util(self, ram_util: 'float'):
        """Sets the ram_util of this V1ClusterMetrics.


        :param ram_util: The ram_util of this V1ClusterMetrics.  # noqa: E501
        :type: float
        """

        self._ram_util = ram_util

    @property
    def timestamp(self) -> 'datetime':
        """Gets the timestamp of this V1ClusterMetrics.  # noqa: E501


        :return: The timestamp of this V1ClusterMetrics.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: 'datetime'):
        """Sets the timestamp of this V1ClusterMetrics.


        :param timestamp: The timestamp of this V1ClusterMetrics.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def vram_limit(self) -> 'int':
        """Gets the vram_limit of this V1ClusterMetrics.  # noqa: E501


        :return: The vram_limit of this V1ClusterMetrics.  # noqa: E501
        :rtype: int
        """
        return self._vram_limit

    @vram_limit.setter
    def vram_limit(self, vram_limit: 'int'):
        """Sets the vram_limit of this V1ClusterMetrics.


        :param vram_limit: The vram_limit of this V1ClusterMetrics.  # noqa: E501
        :type: int
        """

        self._vram_limit = vram_limit

    @property
    def vram_read_write_util(self) -> 'float':
        """Gets the vram_read_write_util of this V1ClusterMetrics.  # noqa: E501


        :return: The vram_read_write_util of this V1ClusterMetrics.  # noqa: E501
        :rtype: float
        """
        return self._vram_read_write_util

    @vram_read_write_util.setter
    def vram_read_write_util(self, vram_read_write_util: 'float'):
        """Sets the vram_read_write_util of this V1ClusterMetrics.


        :param vram_read_write_util: The vram_read_write_util of this V1ClusterMetrics.  # noqa: E501
        :type: float
        """

        self._vram_read_write_util = vram_read_write_util

    @property
    def vram_requested(self) -> 'int':
        """Gets the vram_requested of this V1ClusterMetrics.  # noqa: E501


        :return: The vram_requested of this V1ClusterMetrics.  # noqa: E501
        :rtype: int
        """
        return self._vram_requested

    @vram_requested.setter
    def vram_requested(self, vram_requested: 'int'):
        """Sets the vram_requested of this V1ClusterMetrics.


        :param vram_requested: The vram_requested of this V1ClusterMetrics.  # noqa: E501
        :type: int
        """

        self._vram_requested = vram_requested

    @property
    def vram_total(self) -> 'int':
        """Gets the vram_total of this V1ClusterMetrics.  # noqa: E501


        :return: The vram_total of this V1ClusterMetrics.  # noqa: E501
        :rtype: int
        """
        return self._vram_total

    @vram_total.setter
    def vram_total(self, vram_total: 'int'):
        """Sets the vram_total of this V1ClusterMetrics.


        :param vram_total: The vram_total of this V1ClusterMetrics.  # noqa: E501
        :type: int
        """

        self._vram_total = vram_total

    @property
    def vram_used_avg(self) -> 'int':
        """Gets the vram_used_avg of this V1ClusterMetrics.  # noqa: E501


        :return: The vram_used_avg of this V1ClusterMetrics.  # noqa: E501
        :rtype: int
        """
        return self._vram_used_avg

    @vram_used_avg.setter
    def vram_used_avg(self, vram_used_avg: 'int'):
        """Sets the vram_used_avg of this V1ClusterMetrics.


        :param vram_used_avg: The vram_used_avg of this V1ClusterMetrics.  # noqa: E501
        :type: int
        """

        self._vram_used_avg = vram_used_avg

    @property
    def vram_used_total(self) -> 'int':
        """Gets the vram_used_total of this V1ClusterMetrics.  # noqa: E501


        :return: The vram_used_total of this V1ClusterMetrics.  # noqa: E501
        :rtype: int
        """
        return self._vram_used_total

    @vram_used_total.setter
    def vram_used_total(self, vram_used_total: 'int'):
        """Sets the vram_used_total of this V1ClusterMetrics.


        :param vram_used_total: The vram_used_total of this V1ClusterMetrics.  # noqa: E501
        :type: int
        """

        self._vram_used_total = vram_used_total

    @property
    def vram_util(self) -> 'float':
        """Gets the vram_util of this V1ClusterMetrics.  # noqa: E501


        :return: The vram_util of this V1ClusterMetrics.  # noqa: E501
        :rtype: float
        """
        return self._vram_util

    @vram_util.setter
    def vram_util(self, vram_util: 'float'):
        """Sets the vram_util of this V1ClusterMetrics.


        :param vram_util: The vram_util of this V1ClusterMetrics.  # noqa: E501
        :type: float
        """

        self._vram_util = vram_util

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1ClusterMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1ClusterMetrics') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ClusterMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1ClusterMetrics') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
