# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1JoinableOrganization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'display_name': 'str',
        'domain': 'str',
        'email': 'str',
        'id': 'str',
        'location': 'str',
        'member_count': 'str',
        'name': 'str',
        'twitter_username': 'str'
    }

    attribute_map = {
        'description': 'description',
        'display_name': 'displayName',
        'domain': 'domain',
        'email': 'email',
        'id': 'id',
        'location': 'location',
        'member_count': 'memberCount',
        'name': 'name',
        'twitter_username': 'twitterUsername'
    }

    def __init__(self, description: 'str' =None, display_name: 'str' =None, domain: 'str' =None, email: 'str' =None, id: 'str' =None, location: 'str' =None, member_count: 'str' =None, name: 'str' =None, twitter_username: 'str' =None):  # noqa: E501
        """V1JoinableOrganization - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._display_name = None
        self._domain = None
        self._email = None
        self._id = None
        self._location = None
        self._member_count = None
        self._name = None
        self._twitter_username = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if display_name is not None:
            self.display_name = display_name
        if domain is not None:
            self.domain = domain
        if email is not None:
            self.email = email
        if id is not None:
            self.id = id
        if location is not None:
            self.location = location
        if member_count is not None:
            self.member_count = member_count
        if name is not None:
            self.name = name
        if twitter_username is not None:
            self.twitter_username = twitter_username

    @property
    def description(self) -> 'str':
        """Gets the description of this V1JoinableOrganization.  # noqa: E501


        :return: The description of this V1JoinableOrganization.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: 'str'):
        """Sets the description of this V1JoinableOrganization.


        :param description: The description of this V1JoinableOrganization.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def display_name(self) -> 'str':
        """Gets the display_name of this V1JoinableOrganization.  # noqa: E501


        :return: The display_name of this V1JoinableOrganization.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: 'str'):
        """Sets the display_name of this V1JoinableOrganization.


        :param display_name: The display_name of this V1JoinableOrganization.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def domain(self) -> 'str':
        """Gets the domain of this V1JoinableOrganization.  # noqa: E501


        :return: The domain of this V1JoinableOrganization.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain: 'str'):
        """Sets the domain of this V1JoinableOrganization.


        :param domain: The domain of this V1JoinableOrganization.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def email(self) -> 'str':
        """Gets the email of this V1JoinableOrganization.  # noqa: E501


        :return: The email of this V1JoinableOrganization.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: 'str'):
        """Sets the email of this V1JoinableOrganization.


        :param email: The email of this V1JoinableOrganization.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def id(self) -> 'str':
        """Gets the id of this V1JoinableOrganization.  # noqa: E501


        :return: The id of this V1JoinableOrganization.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1JoinableOrganization.


        :param id: The id of this V1JoinableOrganization.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def location(self) -> 'str':
        """Gets the location of this V1JoinableOrganization.  # noqa: E501


        :return: The location of this V1JoinableOrganization.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location: 'str'):
        """Sets the location of this V1JoinableOrganization.


        :param location: The location of this V1JoinableOrganization.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def member_count(self) -> 'str':
        """Gets the member_count of this V1JoinableOrganization.  # noqa: E501


        :return: The member_count of this V1JoinableOrganization.  # noqa: E501
        :rtype: str
        """
        return self._member_count

    @member_count.setter
    def member_count(self, member_count: 'str'):
        """Sets the member_count of this V1JoinableOrganization.


        :param member_count: The member_count of this V1JoinableOrganization.  # noqa: E501
        :type: str
        """

        self._member_count = member_count

    @property
    def name(self) -> 'str':
        """Gets the name of this V1JoinableOrganization.  # noqa: E501


        :return: The name of this V1JoinableOrganization.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1JoinableOrganization.


        :param name: The name of this V1JoinableOrganization.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def twitter_username(self) -> 'str':
        """Gets the twitter_username of this V1JoinableOrganization.  # noqa: E501


        :return: The twitter_username of this V1JoinableOrganization.  # noqa: E501
        :rtype: str
        """
        return self._twitter_username

    @twitter_username.setter
    def twitter_username(self, twitter_username: 'str'):
        """Sets the twitter_username of this V1JoinableOrganization.


        :param twitter_username: The twitter_username of this V1JoinableOrganization.  # noqa: E501
        :type: str
        """

        self._twitter_username = twitter_username

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1JoinableOrganization, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1JoinableOrganization') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1JoinableOrganization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1JoinableOrganization') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
