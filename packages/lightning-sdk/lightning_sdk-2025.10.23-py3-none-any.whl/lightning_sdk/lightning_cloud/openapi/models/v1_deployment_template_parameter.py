# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1DeploymentTemplateParameter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'checkbox': 'V1Checkbox',
        'data_path': 'V1DataPath',
        'display_name': 'str',
        'input': 'V1Input',
        'long_description': 'str',
        'machines_selector': 'V1MachinesSelector',
        'name': 'str',
        'placements': 'list[V1DeploymentTemplateParameterPlacement]',
        'readonly': 'bool',
        'required': 'bool',
        'select': 'V1Select',
        'short_description': 'str',
        'type': 'V1DeploymentTemplateParameterType'
    }

    attribute_map = {
        'checkbox': 'checkbox',
        'data_path': 'dataPath',
        'display_name': 'displayName',
        'input': 'input',
        'long_description': 'longDescription',
        'machines_selector': 'machinesSelector',
        'name': 'name',
        'placements': 'placements',
        'readonly': 'readonly',
        'required': 'required',
        'select': 'select',
        'short_description': 'shortDescription',
        'type': 'type'
    }

    def __init__(self, checkbox: 'V1Checkbox' =None, data_path: 'V1DataPath' =None, display_name: 'str' =None, input: 'V1Input' =None, long_description: 'str' =None, machines_selector: 'V1MachinesSelector' =None, name: 'str' =None, placements: 'list[V1DeploymentTemplateParameterPlacement]' =None, readonly: 'bool' =None, required: 'bool' =None, select: 'V1Select' =None, short_description: 'str' =None, type: 'V1DeploymentTemplateParameterType' =None):  # noqa: E501
        """V1DeploymentTemplateParameter - a model defined in Swagger"""  # noqa: E501
        self._checkbox = None
        self._data_path = None
        self._display_name = None
        self._input = None
        self._long_description = None
        self._machines_selector = None
        self._name = None
        self._placements = None
        self._readonly = None
        self._required = None
        self._select = None
        self._short_description = None
        self._type = None
        self.discriminator = None
        if checkbox is not None:
            self.checkbox = checkbox
        if data_path is not None:
            self.data_path = data_path
        if display_name is not None:
            self.display_name = display_name
        if input is not None:
            self.input = input
        if long_description is not None:
            self.long_description = long_description
        if machines_selector is not None:
            self.machines_selector = machines_selector
        if name is not None:
            self.name = name
        if placements is not None:
            self.placements = placements
        if readonly is not None:
            self.readonly = readonly
        if required is not None:
            self.required = required
        if select is not None:
            self.select = select
        if short_description is not None:
            self.short_description = short_description
        if type is not None:
            self.type = type

    @property
    def checkbox(self) -> 'V1Checkbox':
        """Gets the checkbox of this V1DeploymentTemplateParameter.  # noqa: E501


        :return: The checkbox of this V1DeploymentTemplateParameter.  # noqa: E501
        :rtype: V1Checkbox
        """
        return self._checkbox

    @checkbox.setter
    def checkbox(self, checkbox: 'V1Checkbox'):
        """Sets the checkbox of this V1DeploymentTemplateParameter.


        :param checkbox: The checkbox of this V1DeploymentTemplateParameter.  # noqa: E501
        :type: V1Checkbox
        """

        self._checkbox = checkbox

    @property
    def data_path(self) -> 'V1DataPath':
        """Gets the data_path of this V1DeploymentTemplateParameter.  # noqa: E501


        :return: The data_path of this V1DeploymentTemplateParameter.  # noqa: E501
        :rtype: V1DataPath
        """
        return self._data_path

    @data_path.setter
    def data_path(self, data_path: 'V1DataPath'):
        """Sets the data_path of this V1DeploymentTemplateParameter.


        :param data_path: The data_path of this V1DeploymentTemplateParameter.  # noqa: E501
        :type: V1DataPath
        """

        self._data_path = data_path

    @property
    def display_name(self) -> 'str':
        """Gets the display_name of this V1DeploymentTemplateParameter.  # noqa: E501


        :return: The display_name of this V1DeploymentTemplateParameter.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: 'str'):
        """Sets the display_name of this V1DeploymentTemplateParameter.


        :param display_name: The display_name of this V1DeploymentTemplateParameter.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def input(self) -> 'V1Input':
        """Gets the input of this V1DeploymentTemplateParameter.  # noqa: E501


        :return: The input of this V1DeploymentTemplateParameter.  # noqa: E501
        :rtype: V1Input
        """
        return self._input

    @input.setter
    def input(self, input: 'V1Input'):
        """Sets the input of this V1DeploymentTemplateParameter.


        :param input: The input of this V1DeploymentTemplateParameter.  # noqa: E501
        :type: V1Input
        """

        self._input = input

    @property
    def long_description(self) -> 'str':
        """Gets the long_description of this V1DeploymentTemplateParameter.  # noqa: E501


        :return: The long_description of this V1DeploymentTemplateParameter.  # noqa: E501
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description: 'str'):
        """Sets the long_description of this V1DeploymentTemplateParameter.


        :param long_description: The long_description of this V1DeploymentTemplateParameter.  # noqa: E501
        :type: str
        """

        self._long_description = long_description

    @property
    def machines_selector(self) -> 'V1MachinesSelector':
        """Gets the machines_selector of this V1DeploymentTemplateParameter.  # noqa: E501


        :return: The machines_selector of this V1DeploymentTemplateParameter.  # noqa: E501
        :rtype: V1MachinesSelector
        """
        return self._machines_selector

    @machines_selector.setter
    def machines_selector(self, machines_selector: 'V1MachinesSelector'):
        """Sets the machines_selector of this V1DeploymentTemplateParameter.


        :param machines_selector: The machines_selector of this V1DeploymentTemplateParameter.  # noqa: E501
        :type: V1MachinesSelector
        """

        self._machines_selector = machines_selector

    @property
    def name(self) -> 'str':
        """Gets the name of this V1DeploymentTemplateParameter.  # noqa: E501


        :return: The name of this V1DeploymentTemplateParameter.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1DeploymentTemplateParameter.


        :param name: The name of this V1DeploymentTemplateParameter.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def placements(self) -> 'list[V1DeploymentTemplateParameterPlacement]':
        """Gets the placements of this V1DeploymentTemplateParameter.  # noqa: E501


        :return: The placements of this V1DeploymentTemplateParameter.  # noqa: E501
        :rtype: list[V1DeploymentTemplateParameterPlacement]
        """
        return self._placements

    @placements.setter
    def placements(self, placements: 'list[V1DeploymentTemplateParameterPlacement]'):
        """Sets the placements of this V1DeploymentTemplateParameter.


        :param placements: The placements of this V1DeploymentTemplateParameter.  # noqa: E501
        :type: list[V1DeploymentTemplateParameterPlacement]
        """

        self._placements = placements

    @property
    def readonly(self) -> 'bool':
        """Gets the readonly of this V1DeploymentTemplateParameter.  # noqa: E501


        :return: The readonly of this V1DeploymentTemplateParameter.  # noqa: E501
        :rtype: bool
        """
        return self._readonly

    @readonly.setter
    def readonly(self, readonly: 'bool'):
        """Sets the readonly of this V1DeploymentTemplateParameter.


        :param readonly: The readonly of this V1DeploymentTemplateParameter.  # noqa: E501
        :type: bool
        """

        self._readonly = readonly

    @property
    def required(self) -> 'bool':
        """Gets the required of this V1DeploymentTemplateParameter.  # noqa: E501


        :return: The required of this V1DeploymentTemplateParameter.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required: 'bool'):
        """Sets the required of this V1DeploymentTemplateParameter.


        :param required: The required of this V1DeploymentTemplateParameter.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def select(self) -> 'V1Select':
        """Gets the select of this V1DeploymentTemplateParameter.  # noqa: E501


        :return: The select of this V1DeploymentTemplateParameter.  # noqa: E501
        :rtype: V1Select
        """
        return self._select

    @select.setter
    def select(self, select: 'V1Select'):
        """Sets the select of this V1DeploymentTemplateParameter.


        :param select: The select of this V1DeploymentTemplateParameter.  # noqa: E501
        :type: V1Select
        """

        self._select = select

    @property
    def short_description(self) -> 'str':
        """Gets the short_description of this V1DeploymentTemplateParameter.  # noqa: E501


        :return: The short_description of this V1DeploymentTemplateParameter.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description: 'str'):
        """Sets the short_description of this V1DeploymentTemplateParameter.


        :param short_description: The short_description of this V1DeploymentTemplateParameter.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def type(self) -> 'V1DeploymentTemplateParameterType':
        """Gets the type of this V1DeploymentTemplateParameter.  # noqa: E501


        :return: The type of this V1DeploymentTemplateParameter.  # noqa: E501
        :rtype: V1DeploymentTemplateParameterType
        """
        return self._type

    @type.setter
    def type(self, type: 'V1DeploymentTemplateParameterType'):
        """Sets the type of this V1DeploymentTemplateParameter.


        :param type: The type of this V1DeploymentTemplateParameter.  # noqa: E501
        :type: V1DeploymentTemplateParameterType
        """

        self._type = type

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1DeploymentTemplateParameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1DeploymentTemplateParameter') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1DeploymentTemplateParameter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1DeploymentTemplateParameter') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
