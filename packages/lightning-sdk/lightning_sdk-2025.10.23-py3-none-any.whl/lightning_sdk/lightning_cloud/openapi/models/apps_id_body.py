# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class AppsIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'author_logo': 'str',
        'authors': 'list[str]',
        'categories': 'list[str]',
        'created_at': 'datetime',
        'description': 'str',
        'entrypoint_file': 'str',
        'git_url': 'str',
        'license': 'str',
        'name': 'str',
        'owner_id': 'str',
        'owner_type': 'V1CloudSpaceAppOwnerType',
        'short_description': 'str',
        'source_url': 'str',
        'tags': 'list[str]',
        'thumbnail': 'str',
        'updated_at': 'datetime',
        'version': 'str',
        'visible_to_org_ids': 'list[str]',
        'visible_to_project_ids': 'list[str]',
        'visible_to_user_ids': 'list[str]'
    }

    attribute_map = {
        'author_logo': 'authorLogo',
        'authors': 'authors',
        'categories': 'categories',
        'created_at': 'createdAt',
        'description': 'description',
        'entrypoint_file': 'entrypointFile',
        'git_url': 'gitUrl',
        'license': 'license',
        'name': 'name',
        'owner_id': 'ownerId',
        'owner_type': 'ownerType',
        'short_description': 'shortDescription',
        'source_url': 'sourceUrl',
        'tags': 'tags',
        'thumbnail': 'thumbnail',
        'updated_at': 'updatedAt',
        'version': 'version',
        'visible_to_org_ids': 'visibleToOrgIds',
        'visible_to_project_ids': 'visibleToProjectIds',
        'visible_to_user_ids': 'visibleToUserIds'
    }

    def __init__(self, author_logo: 'str' =None, authors: 'list[str]' =None, categories: 'list[str]' =None, created_at: 'datetime' =None, description: 'str' =None, entrypoint_file: 'str' =None, git_url: 'str' =None, license: 'str' =None, name: 'str' =None, owner_id: 'str' =None, owner_type: 'V1CloudSpaceAppOwnerType' =None, short_description: 'str' =None, source_url: 'str' =None, tags: 'list[str]' =None, thumbnail: 'str' =None, updated_at: 'datetime' =None, version: 'str' =None, visible_to_org_ids: 'list[str]' =None, visible_to_project_ids: 'list[str]' =None, visible_to_user_ids: 'list[str]' =None):  # noqa: E501
        """AppsIdBody - a model defined in Swagger"""  # noqa: E501
        self._author_logo = None
        self._authors = None
        self._categories = None
        self._created_at = None
        self._description = None
        self._entrypoint_file = None
        self._git_url = None
        self._license = None
        self._name = None
        self._owner_id = None
        self._owner_type = None
        self._short_description = None
        self._source_url = None
        self._tags = None
        self._thumbnail = None
        self._updated_at = None
        self._version = None
        self._visible_to_org_ids = None
        self._visible_to_project_ids = None
        self._visible_to_user_ids = None
        self.discriminator = None
        if author_logo is not None:
            self.author_logo = author_logo
        if authors is not None:
            self.authors = authors
        if categories is not None:
            self.categories = categories
        if created_at is not None:
            self.created_at = created_at
        if description is not None:
            self.description = description
        if entrypoint_file is not None:
            self.entrypoint_file = entrypoint_file
        if git_url is not None:
            self.git_url = git_url
        if license is not None:
            self.license = license
        if name is not None:
            self.name = name
        if owner_id is not None:
            self.owner_id = owner_id
        if owner_type is not None:
            self.owner_type = owner_type
        if short_description is not None:
            self.short_description = short_description
        if source_url is not None:
            self.source_url = source_url
        if tags is not None:
            self.tags = tags
        if thumbnail is not None:
            self.thumbnail = thumbnail
        if updated_at is not None:
            self.updated_at = updated_at
        if version is not None:
            self.version = version
        if visible_to_org_ids is not None:
            self.visible_to_org_ids = visible_to_org_ids
        if visible_to_project_ids is not None:
            self.visible_to_project_ids = visible_to_project_ids
        if visible_to_user_ids is not None:
            self.visible_to_user_ids = visible_to_user_ids

    @property
    def author_logo(self) -> 'str':
        """Gets the author_logo of this AppsIdBody.  # noqa: E501


        :return: The author_logo of this AppsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._author_logo

    @author_logo.setter
    def author_logo(self, author_logo: 'str'):
        """Sets the author_logo of this AppsIdBody.


        :param author_logo: The author_logo of this AppsIdBody.  # noqa: E501
        :type: str
        """

        self._author_logo = author_logo

    @property
    def authors(self) -> 'list[str]':
        """Gets the authors of this AppsIdBody.  # noqa: E501


        :return: The authors of this AppsIdBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._authors

    @authors.setter
    def authors(self, authors: 'list[str]'):
        """Sets the authors of this AppsIdBody.


        :param authors: The authors of this AppsIdBody.  # noqa: E501
        :type: list[str]
        """

        self._authors = authors

    @property
    def categories(self) -> 'list[str]':
        """Gets the categories of this AppsIdBody.  # noqa: E501


        :return: The categories of this AppsIdBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories: 'list[str]'):
        """Sets the categories of this AppsIdBody.


        :param categories: The categories of this AppsIdBody.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this AppsIdBody.  # noqa: E501


        :return: The created_at of this AppsIdBody.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this AppsIdBody.


        :param created_at: The created_at of this AppsIdBody.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def description(self) -> 'str':
        """Gets the description of this AppsIdBody.  # noqa: E501


        :return: The description of this AppsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: 'str'):
        """Sets the description of this AppsIdBody.


        :param description: The description of this AppsIdBody.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def entrypoint_file(self) -> 'str':
        """Gets the entrypoint_file of this AppsIdBody.  # noqa: E501


        :return: The entrypoint_file of this AppsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._entrypoint_file

    @entrypoint_file.setter
    def entrypoint_file(self, entrypoint_file: 'str'):
        """Sets the entrypoint_file of this AppsIdBody.


        :param entrypoint_file: The entrypoint_file of this AppsIdBody.  # noqa: E501
        :type: str
        """

        self._entrypoint_file = entrypoint_file

    @property
    def git_url(self) -> 'str':
        """Gets the git_url of this AppsIdBody.  # noqa: E501


        :return: The git_url of this AppsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._git_url

    @git_url.setter
    def git_url(self, git_url: 'str'):
        """Sets the git_url of this AppsIdBody.


        :param git_url: The git_url of this AppsIdBody.  # noqa: E501
        :type: str
        """

        self._git_url = git_url

    @property
    def license(self) -> 'str':
        """Gets the license of this AppsIdBody.  # noqa: E501


        :return: The license of this AppsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license: 'str'):
        """Sets the license of this AppsIdBody.


        :param license: The license of this AppsIdBody.  # noqa: E501
        :type: str
        """

        self._license = license

    @property
    def name(self) -> 'str':
        """Gets the name of this AppsIdBody.  # noqa: E501


        :return: The name of this AppsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this AppsIdBody.


        :param name: The name of this AppsIdBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def owner_id(self) -> 'str':
        """Gets the owner_id of this AppsIdBody.  # noqa: E501


        :return: The owner_id of this AppsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id: 'str'):
        """Sets the owner_id of this AppsIdBody.


        :param owner_id: The owner_id of this AppsIdBody.  # noqa: E501
        :type: str
        """

        self._owner_id = owner_id

    @property
    def owner_type(self) -> 'V1CloudSpaceAppOwnerType':
        """Gets the owner_type of this AppsIdBody.  # noqa: E501


        :return: The owner_type of this AppsIdBody.  # noqa: E501
        :rtype: V1CloudSpaceAppOwnerType
        """
        return self._owner_type

    @owner_type.setter
    def owner_type(self, owner_type: 'V1CloudSpaceAppOwnerType'):
        """Sets the owner_type of this AppsIdBody.


        :param owner_type: The owner_type of this AppsIdBody.  # noqa: E501
        :type: V1CloudSpaceAppOwnerType
        """

        self._owner_type = owner_type

    @property
    def short_description(self) -> 'str':
        """Gets the short_description of this AppsIdBody.  # noqa: E501


        :return: The short_description of this AppsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description: 'str'):
        """Sets the short_description of this AppsIdBody.


        :param short_description: The short_description of this AppsIdBody.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def source_url(self) -> 'str':
        """Gets the source_url of this AppsIdBody.  # noqa: E501


        :return: The source_url of this AppsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._source_url

    @source_url.setter
    def source_url(self, source_url: 'str'):
        """Sets the source_url of this AppsIdBody.


        :param source_url: The source_url of this AppsIdBody.  # noqa: E501
        :type: str
        """

        self._source_url = source_url

    @property
    def tags(self) -> 'list[str]':
        """Gets the tags of this AppsIdBody.  # noqa: E501


        :return: The tags of this AppsIdBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: 'list[str]'):
        """Sets the tags of this AppsIdBody.


        :param tags: The tags of this AppsIdBody.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def thumbnail(self) -> 'str':
        """Gets the thumbnail of this AppsIdBody.  # noqa: E501


        :return: The thumbnail of this AppsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail: 'str'):
        """Sets the thumbnail of this AppsIdBody.


        :param thumbnail: The thumbnail of this AppsIdBody.  # noqa: E501
        :type: str
        """

        self._thumbnail = thumbnail

    @property
    def updated_at(self) -> 'datetime':
        """Gets the updated_at of this AppsIdBody.  # noqa: E501


        :return: The updated_at of this AppsIdBody.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: 'datetime'):
        """Sets the updated_at of this AppsIdBody.


        :param updated_at: The updated_at of this AppsIdBody.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def version(self) -> 'str':
        """Gets the version of this AppsIdBody.  # noqa: E501


        :return: The version of this AppsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: 'str'):
        """Sets the version of this AppsIdBody.


        :param version: The version of this AppsIdBody.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def visible_to_org_ids(self) -> 'list[str]':
        """Gets the visible_to_org_ids of this AppsIdBody.  # noqa: E501


        :return: The visible_to_org_ids of this AppsIdBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._visible_to_org_ids

    @visible_to_org_ids.setter
    def visible_to_org_ids(self, visible_to_org_ids: 'list[str]'):
        """Sets the visible_to_org_ids of this AppsIdBody.


        :param visible_to_org_ids: The visible_to_org_ids of this AppsIdBody.  # noqa: E501
        :type: list[str]
        """

        self._visible_to_org_ids = visible_to_org_ids

    @property
    def visible_to_project_ids(self) -> 'list[str]':
        """Gets the visible_to_project_ids of this AppsIdBody.  # noqa: E501


        :return: The visible_to_project_ids of this AppsIdBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._visible_to_project_ids

    @visible_to_project_ids.setter
    def visible_to_project_ids(self, visible_to_project_ids: 'list[str]'):
        """Sets the visible_to_project_ids of this AppsIdBody.


        :param visible_to_project_ids: The visible_to_project_ids of this AppsIdBody.  # noqa: E501
        :type: list[str]
        """

        self._visible_to_project_ids = visible_to_project_ids

    @property
    def visible_to_user_ids(self) -> 'list[str]':
        """Gets the visible_to_user_ids of this AppsIdBody.  # noqa: E501


        :return: The visible_to_user_ids of this AppsIdBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._visible_to_user_ids

    @visible_to_user_ids.setter
    def visible_to_user_ids(self, visible_to_user_ids: 'list[str]'):
        """Sets the visible_to_user_ids of this AppsIdBody.


        :param visible_to_user_ids: The visible_to_user_ids of this AppsIdBody.  # noqa: E501
        :type: list[str]
        """

        self._visible_to_user_ids = visible_to_user_ids

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppsIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'AppsIdBody') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, AppsIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'AppsIdBody') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
