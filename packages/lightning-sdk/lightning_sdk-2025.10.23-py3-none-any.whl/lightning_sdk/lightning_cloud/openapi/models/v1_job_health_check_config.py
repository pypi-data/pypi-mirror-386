# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1JobHealthCheckConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_exec': 'V1HealthCheckExec',
        'failure_threshold': 'int',
        'http_get': 'V1HealthCheckHttpGet',
        'initial_delay_seconds': 'int',
        'interval_seconds': 'int',
        'timeout_seconds': 'int'
    }

    attribute_map = {
        '_exec': 'exec',
        'failure_threshold': 'failureThreshold',
        'http_get': 'httpGet',
        'initial_delay_seconds': 'initialDelaySeconds',
        'interval_seconds': 'intervalSeconds',
        'timeout_seconds': 'timeoutSeconds'
    }

    def __init__(self, _exec: 'V1HealthCheckExec' =None, failure_threshold: 'int' =None, http_get: 'V1HealthCheckHttpGet' =None, initial_delay_seconds: 'int' =None, interval_seconds: 'int' =None, timeout_seconds: 'int' =None):  # noqa: E501
        """V1JobHealthCheckConfig - a model defined in Swagger"""  # noqa: E501
        self.__exec = None
        self._failure_threshold = None
        self._http_get = None
        self._initial_delay_seconds = None
        self._interval_seconds = None
        self._timeout_seconds = None
        self.discriminator = None
        if _exec is not None:
            self._exec = _exec
        if failure_threshold is not None:
            self.failure_threshold = failure_threshold
        if http_get is not None:
            self.http_get = http_get
        if initial_delay_seconds is not None:
            self.initial_delay_seconds = initial_delay_seconds
        if interval_seconds is not None:
            self.interval_seconds = interval_seconds
        if timeout_seconds is not None:
            self.timeout_seconds = timeout_seconds

    @property
    def _exec(self) -> 'V1HealthCheckExec':
        """Gets the _exec of this V1JobHealthCheckConfig.  # noqa: E501


        :return: The _exec of this V1JobHealthCheckConfig.  # noqa: E501
        :rtype: V1HealthCheckExec
        """
        return self.__exec

    @_exec.setter
    def _exec(self, _exec: 'V1HealthCheckExec'):
        """Sets the _exec of this V1JobHealthCheckConfig.


        :param _exec: The _exec of this V1JobHealthCheckConfig.  # noqa: E501
        :type: V1HealthCheckExec
        """

        self.__exec = _exec

    @property
    def failure_threshold(self) -> 'int':
        """Gets the failure_threshold of this V1JobHealthCheckConfig.  # noqa: E501


        :return: The failure_threshold of this V1JobHealthCheckConfig.  # noqa: E501
        :rtype: int
        """
        return self._failure_threshold

    @failure_threshold.setter
    def failure_threshold(self, failure_threshold: 'int'):
        """Sets the failure_threshold of this V1JobHealthCheckConfig.


        :param failure_threshold: The failure_threshold of this V1JobHealthCheckConfig.  # noqa: E501
        :type: int
        """

        self._failure_threshold = failure_threshold

    @property
    def http_get(self) -> 'V1HealthCheckHttpGet':
        """Gets the http_get of this V1JobHealthCheckConfig.  # noqa: E501


        :return: The http_get of this V1JobHealthCheckConfig.  # noqa: E501
        :rtype: V1HealthCheckHttpGet
        """
        return self._http_get

    @http_get.setter
    def http_get(self, http_get: 'V1HealthCheckHttpGet'):
        """Sets the http_get of this V1JobHealthCheckConfig.


        :param http_get: The http_get of this V1JobHealthCheckConfig.  # noqa: E501
        :type: V1HealthCheckHttpGet
        """

        self._http_get = http_get

    @property
    def initial_delay_seconds(self) -> 'int':
        """Gets the initial_delay_seconds of this V1JobHealthCheckConfig.  # noqa: E501


        :return: The initial_delay_seconds of this V1JobHealthCheckConfig.  # noqa: E501
        :rtype: int
        """
        return self._initial_delay_seconds

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, initial_delay_seconds: 'int'):
        """Sets the initial_delay_seconds of this V1JobHealthCheckConfig.


        :param initial_delay_seconds: The initial_delay_seconds of this V1JobHealthCheckConfig.  # noqa: E501
        :type: int
        """

        self._initial_delay_seconds = initial_delay_seconds

    @property
    def interval_seconds(self) -> 'int':
        """Gets the interval_seconds of this V1JobHealthCheckConfig.  # noqa: E501


        :return: The interval_seconds of this V1JobHealthCheckConfig.  # noqa: E501
        :rtype: int
        """
        return self._interval_seconds

    @interval_seconds.setter
    def interval_seconds(self, interval_seconds: 'int'):
        """Sets the interval_seconds of this V1JobHealthCheckConfig.


        :param interval_seconds: The interval_seconds of this V1JobHealthCheckConfig.  # noqa: E501
        :type: int
        """

        self._interval_seconds = interval_seconds

    @property
    def timeout_seconds(self) -> 'int':
        """Gets the timeout_seconds of this V1JobHealthCheckConfig.  # noqa: E501


        :return: The timeout_seconds of this V1JobHealthCheckConfig.  # noqa: E501
        :rtype: int
        """
        return self._timeout_seconds

    @timeout_seconds.setter
    def timeout_seconds(self, timeout_seconds: 'int'):
        """Sets the timeout_seconds of this V1JobHealthCheckConfig.


        :param timeout_seconds: The timeout_seconds of this V1JobHealthCheckConfig.  # noqa: E501
        :type: int
        """

        self._timeout_seconds = timeout_seconds

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1JobHealthCheckConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1JobHealthCheckConfig') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1JobHealthCheckConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1JobHealthCheckConfig') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
