# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class ProjectIdCloudspacesBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'can_download_source_code': 'bool',
        'cloud_space_environment_template_id': 'str',
        'cloud_space_instance_cpu_image_override': 'str',
        'cloud_space_instance_gpu_image_override': 'str',
        'cluster_id': 'str',
        'compute_name': 'str',
        'data_connection_mounts': 'list[V1DataConnectionMount]',
        'disable_secrets': 'bool',
        'disk_size': 'str',
        'display_name': 'str',
        'name': 'str',
        'plugins': 'list[str]',
        'requested_run_duration_seconds': 'str',
        'same_compute_on_resume': 'bool',
        'sandbox': 'bool',
        'seed_files': 'list[V1CloudSpaceSeedFile]',
        'source': 'V1CloudSpaceSourceType',
        'spot': 'bool'
    }

    attribute_map = {
        'can_download_source_code': 'canDownloadSourceCode',
        'cloud_space_environment_template_id': 'cloudSpaceEnvironmentTemplateId',
        'cloud_space_instance_cpu_image_override': 'cloudSpaceInstanceCpuImageOverride',
        'cloud_space_instance_gpu_image_override': 'cloudSpaceInstanceGpuImageOverride',
        'cluster_id': 'clusterId',
        'compute_name': 'computeName',
        'data_connection_mounts': 'dataConnectionMounts',
        'disable_secrets': 'disableSecrets',
        'disk_size': 'diskSize',
        'display_name': 'displayName',
        'name': 'name',
        'plugins': 'plugins',
        'requested_run_duration_seconds': 'requestedRunDurationSeconds',
        'same_compute_on_resume': 'sameComputeOnResume',
        'sandbox': 'sandbox',
        'seed_files': 'seedFiles',
        'source': 'source',
        'spot': 'spot'
    }

    def __init__(self, can_download_source_code: 'bool' =None, cloud_space_environment_template_id: 'str' =None, cloud_space_instance_cpu_image_override: 'str' =None, cloud_space_instance_gpu_image_override: 'str' =None, cluster_id: 'str' =None, compute_name: 'str' =None, data_connection_mounts: 'list[V1DataConnectionMount]' =None, disable_secrets: 'bool' =None, disk_size: 'str' =None, display_name: 'str' =None, name: 'str' =None, plugins: 'list[str]' =None, requested_run_duration_seconds: 'str' =None, same_compute_on_resume: 'bool' =None, sandbox: 'bool' =None, seed_files: 'list[V1CloudSpaceSeedFile]' =None, source: 'V1CloudSpaceSourceType' =None, spot: 'bool' =None):  # noqa: E501
        """ProjectIdCloudspacesBody - a model defined in Swagger"""  # noqa: E501
        self._can_download_source_code = None
        self._cloud_space_environment_template_id = None
        self._cloud_space_instance_cpu_image_override = None
        self._cloud_space_instance_gpu_image_override = None
        self._cluster_id = None
        self._compute_name = None
        self._data_connection_mounts = None
        self._disable_secrets = None
        self._disk_size = None
        self._display_name = None
        self._name = None
        self._plugins = None
        self._requested_run_duration_seconds = None
        self._same_compute_on_resume = None
        self._sandbox = None
        self._seed_files = None
        self._source = None
        self._spot = None
        self.discriminator = None
        if can_download_source_code is not None:
            self.can_download_source_code = can_download_source_code
        if cloud_space_environment_template_id is not None:
            self.cloud_space_environment_template_id = cloud_space_environment_template_id
        if cloud_space_instance_cpu_image_override is not None:
            self.cloud_space_instance_cpu_image_override = cloud_space_instance_cpu_image_override
        if cloud_space_instance_gpu_image_override is not None:
            self.cloud_space_instance_gpu_image_override = cloud_space_instance_gpu_image_override
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if compute_name is not None:
            self.compute_name = compute_name
        if data_connection_mounts is not None:
            self.data_connection_mounts = data_connection_mounts
        if disable_secrets is not None:
            self.disable_secrets = disable_secrets
        if disk_size is not None:
            self.disk_size = disk_size
        if display_name is not None:
            self.display_name = display_name
        if name is not None:
            self.name = name
        if plugins is not None:
            self.plugins = plugins
        if requested_run_duration_seconds is not None:
            self.requested_run_duration_seconds = requested_run_duration_seconds
        if same_compute_on_resume is not None:
            self.same_compute_on_resume = same_compute_on_resume
        if sandbox is not None:
            self.sandbox = sandbox
        if seed_files is not None:
            self.seed_files = seed_files
        if source is not None:
            self.source = source
        if spot is not None:
            self.spot = spot

    @property
    def can_download_source_code(self) -> 'bool':
        """Gets the can_download_source_code of this ProjectIdCloudspacesBody.  # noqa: E501


        :return: The can_download_source_code of this ProjectIdCloudspacesBody.  # noqa: E501
        :rtype: bool
        """
        return self._can_download_source_code

    @can_download_source_code.setter
    def can_download_source_code(self, can_download_source_code: 'bool'):
        """Sets the can_download_source_code of this ProjectIdCloudspacesBody.


        :param can_download_source_code: The can_download_source_code of this ProjectIdCloudspacesBody.  # noqa: E501
        :type: bool
        """

        self._can_download_source_code = can_download_source_code

    @property
    def cloud_space_environment_template_id(self) -> 'str':
        """Gets the cloud_space_environment_template_id of this ProjectIdCloudspacesBody.  # noqa: E501


        :return: The cloud_space_environment_template_id of this ProjectIdCloudspacesBody.  # noqa: E501
        :rtype: str
        """
        return self._cloud_space_environment_template_id

    @cloud_space_environment_template_id.setter
    def cloud_space_environment_template_id(self, cloud_space_environment_template_id: 'str'):
        """Sets the cloud_space_environment_template_id of this ProjectIdCloudspacesBody.


        :param cloud_space_environment_template_id: The cloud_space_environment_template_id of this ProjectIdCloudspacesBody.  # noqa: E501
        :type: str
        """

        self._cloud_space_environment_template_id = cloud_space_environment_template_id

    @property
    def cloud_space_instance_cpu_image_override(self) -> 'str':
        """Gets the cloud_space_instance_cpu_image_override of this ProjectIdCloudspacesBody.  # noqa: E501


        :return: The cloud_space_instance_cpu_image_override of this ProjectIdCloudspacesBody.  # noqa: E501
        :rtype: str
        """
        return self._cloud_space_instance_cpu_image_override

    @cloud_space_instance_cpu_image_override.setter
    def cloud_space_instance_cpu_image_override(self, cloud_space_instance_cpu_image_override: 'str'):
        """Sets the cloud_space_instance_cpu_image_override of this ProjectIdCloudspacesBody.


        :param cloud_space_instance_cpu_image_override: The cloud_space_instance_cpu_image_override of this ProjectIdCloudspacesBody.  # noqa: E501
        :type: str
        """

        self._cloud_space_instance_cpu_image_override = cloud_space_instance_cpu_image_override

    @property
    def cloud_space_instance_gpu_image_override(self) -> 'str':
        """Gets the cloud_space_instance_gpu_image_override of this ProjectIdCloudspacesBody.  # noqa: E501


        :return: The cloud_space_instance_gpu_image_override of this ProjectIdCloudspacesBody.  # noqa: E501
        :rtype: str
        """
        return self._cloud_space_instance_gpu_image_override

    @cloud_space_instance_gpu_image_override.setter
    def cloud_space_instance_gpu_image_override(self, cloud_space_instance_gpu_image_override: 'str'):
        """Sets the cloud_space_instance_gpu_image_override of this ProjectIdCloudspacesBody.


        :param cloud_space_instance_gpu_image_override: The cloud_space_instance_gpu_image_override of this ProjectIdCloudspacesBody.  # noqa: E501
        :type: str
        """

        self._cloud_space_instance_gpu_image_override = cloud_space_instance_gpu_image_override

    @property
    def cluster_id(self) -> 'str':
        """Gets the cluster_id of this ProjectIdCloudspacesBody.  # noqa: E501


        :return: The cluster_id of this ProjectIdCloudspacesBody.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id: 'str'):
        """Sets the cluster_id of this ProjectIdCloudspacesBody.


        :param cluster_id: The cluster_id of this ProjectIdCloudspacesBody.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def compute_name(self) -> 'str':
        """Gets the compute_name of this ProjectIdCloudspacesBody.  # noqa: E501


        :return: The compute_name of this ProjectIdCloudspacesBody.  # noqa: E501
        :rtype: str
        """
        return self._compute_name

    @compute_name.setter
    def compute_name(self, compute_name: 'str'):
        """Sets the compute_name of this ProjectIdCloudspacesBody.


        :param compute_name: The compute_name of this ProjectIdCloudspacesBody.  # noqa: E501
        :type: str
        """

        self._compute_name = compute_name

    @property
    def data_connection_mounts(self) -> 'list[V1DataConnectionMount]':
        """Gets the data_connection_mounts of this ProjectIdCloudspacesBody.  # noqa: E501


        :return: The data_connection_mounts of this ProjectIdCloudspacesBody.  # noqa: E501
        :rtype: list[V1DataConnectionMount]
        """
        return self._data_connection_mounts

    @data_connection_mounts.setter
    def data_connection_mounts(self, data_connection_mounts: 'list[V1DataConnectionMount]'):
        """Sets the data_connection_mounts of this ProjectIdCloudspacesBody.


        :param data_connection_mounts: The data_connection_mounts of this ProjectIdCloudspacesBody.  # noqa: E501
        :type: list[V1DataConnectionMount]
        """

        self._data_connection_mounts = data_connection_mounts

    @property
    def disable_secrets(self) -> 'bool':
        """Gets the disable_secrets of this ProjectIdCloudspacesBody.  # noqa: E501


        :return: The disable_secrets of this ProjectIdCloudspacesBody.  # noqa: E501
        :rtype: bool
        """
        return self._disable_secrets

    @disable_secrets.setter
    def disable_secrets(self, disable_secrets: 'bool'):
        """Sets the disable_secrets of this ProjectIdCloudspacesBody.


        :param disable_secrets: The disable_secrets of this ProjectIdCloudspacesBody.  # noqa: E501
        :type: bool
        """

        self._disable_secrets = disable_secrets

    @property
    def disk_size(self) -> 'str':
        """Gets the disk_size of this ProjectIdCloudspacesBody.  # noqa: E501


        :return: The disk_size of this ProjectIdCloudspacesBody.  # noqa: E501
        :rtype: str
        """
        return self._disk_size

    @disk_size.setter
    def disk_size(self, disk_size: 'str'):
        """Sets the disk_size of this ProjectIdCloudspacesBody.


        :param disk_size: The disk_size of this ProjectIdCloudspacesBody.  # noqa: E501
        :type: str
        """

        self._disk_size = disk_size

    @property
    def display_name(self) -> 'str':
        """Gets the display_name of this ProjectIdCloudspacesBody.  # noqa: E501


        :return: The display_name of this ProjectIdCloudspacesBody.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: 'str'):
        """Sets the display_name of this ProjectIdCloudspacesBody.


        :param display_name: The display_name of this ProjectIdCloudspacesBody.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def name(self) -> 'str':
        """Gets the name of this ProjectIdCloudspacesBody.  # noqa: E501


        :return: The name of this ProjectIdCloudspacesBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this ProjectIdCloudspacesBody.


        :param name: The name of this ProjectIdCloudspacesBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def plugins(self) -> 'list[str]':
        """Gets the plugins of this ProjectIdCloudspacesBody.  # noqa: E501


        :return: The plugins of this ProjectIdCloudspacesBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._plugins

    @plugins.setter
    def plugins(self, plugins: 'list[str]'):
        """Sets the plugins of this ProjectIdCloudspacesBody.


        :param plugins: The plugins of this ProjectIdCloudspacesBody.  # noqa: E501
        :type: list[str]
        """

        self._plugins = plugins

    @property
    def requested_run_duration_seconds(self) -> 'str':
        """Gets the requested_run_duration_seconds of this ProjectIdCloudspacesBody.  # noqa: E501


        :return: The requested_run_duration_seconds of this ProjectIdCloudspacesBody.  # noqa: E501
        :rtype: str
        """
        return self._requested_run_duration_seconds

    @requested_run_duration_seconds.setter
    def requested_run_duration_seconds(self, requested_run_duration_seconds: 'str'):
        """Sets the requested_run_duration_seconds of this ProjectIdCloudspacesBody.


        :param requested_run_duration_seconds: The requested_run_duration_seconds of this ProjectIdCloudspacesBody.  # noqa: E501
        :type: str
        """

        self._requested_run_duration_seconds = requested_run_duration_seconds

    @property
    def same_compute_on_resume(self) -> 'bool':
        """Gets the same_compute_on_resume of this ProjectIdCloudspacesBody.  # noqa: E501


        :return: The same_compute_on_resume of this ProjectIdCloudspacesBody.  # noqa: E501
        :rtype: bool
        """
        return self._same_compute_on_resume

    @same_compute_on_resume.setter
    def same_compute_on_resume(self, same_compute_on_resume: 'bool'):
        """Sets the same_compute_on_resume of this ProjectIdCloudspacesBody.


        :param same_compute_on_resume: The same_compute_on_resume of this ProjectIdCloudspacesBody.  # noqa: E501
        :type: bool
        """

        self._same_compute_on_resume = same_compute_on_resume

    @property
    def sandbox(self) -> 'bool':
        """Gets the sandbox of this ProjectIdCloudspacesBody.  # noqa: E501


        :return: The sandbox of this ProjectIdCloudspacesBody.  # noqa: E501
        :rtype: bool
        """
        return self._sandbox

    @sandbox.setter
    def sandbox(self, sandbox: 'bool'):
        """Sets the sandbox of this ProjectIdCloudspacesBody.


        :param sandbox: The sandbox of this ProjectIdCloudspacesBody.  # noqa: E501
        :type: bool
        """

        self._sandbox = sandbox

    @property
    def seed_files(self) -> 'list[V1CloudSpaceSeedFile]':
        """Gets the seed_files of this ProjectIdCloudspacesBody.  # noqa: E501


        :return: The seed_files of this ProjectIdCloudspacesBody.  # noqa: E501
        :rtype: list[V1CloudSpaceSeedFile]
        """
        return self._seed_files

    @seed_files.setter
    def seed_files(self, seed_files: 'list[V1CloudSpaceSeedFile]'):
        """Sets the seed_files of this ProjectIdCloudspacesBody.


        :param seed_files: The seed_files of this ProjectIdCloudspacesBody.  # noqa: E501
        :type: list[V1CloudSpaceSeedFile]
        """

        self._seed_files = seed_files

    @property
    def source(self) -> 'V1CloudSpaceSourceType':
        """Gets the source of this ProjectIdCloudspacesBody.  # noqa: E501


        :return: The source of this ProjectIdCloudspacesBody.  # noqa: E501
        :rtype: V1CloudSpaceSourceType
        """
        return self._source

    @source.setter
    def source(self, source: 'V1CloudSpaceSourceType'):
        """Sets the source of this ProjectIdCloudspacesBody.


        :param source: The source of this ProjectIdCloudspacesBody.  # noqa: E501
        :type: V1CloudSpaceSourceType
        """

        self._source = source

    @property
    def spot(self) -> 'bool':
        """Gets the spot of this ProjectIdCloudspacesBody.  # noqa: E501


        :return: The spot of this ProjectIdCloudspacesBody.  # noqa: E501
        :rtype: bool
        """
        return self._spot

    @spot.setter
    def spot(self, spot: 'bool'):
        """Sets the spot of this ProjectIdCloudspacesBody.


        :param spot: The spot of this ProjectIdCloudspacesBody.  # noqa: E501
        :type: bool
        """

        self._spot = spot

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectIdCloudspacesBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'ProjectIdCloudspacesBody') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectIdCloudspacesBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'ProjectIdCloudspacesBody') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
