# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class PipelinesIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_id': 'str',
        'created_at': 'datetime',
        'created_from_ui': 'bool',
        'display_name': 'str',
        'error': 'str',
        'is_published': 'bool',
        'message': 'str',
        'name': 'str',
        'parameters': 'list[V1PipelineParameter]',
        'parent_pipeline_id': 'str',
        'schedule_id': 'str',
        'shared_filesystem': 'V1SharedFilesystem',
        'state': 'V1PipelineState',
        'statuses': 'list[V1PipelineStepStatus]',
        'steps': 'list[V1PipelineStep]',
        'updated_at': 'datetime',
        'user_id': 'str'
    }

    attribute_map = {
        'cluster_id': 'clusterId',
        'created_at': 'createdAt',
        'created_from_ui': 'createdFromUi',
        'display_name': 'displayName',
        'error': 'error',
        'is_published': 'isPublished',
        'message': 'message',
        'name': 'name',
        'parameters': 'parameters',
        'parent_pipeline_id': 'parentPipelineId',
        'schedule_id': 'scheduleId',
        'shared_filesystem': 'sharedFilesystem',
        'state': 'state',
        'statuses': 'statuses',
        'steps': 'steps',
        'updated_at': 'updatedAt',
        'user_id': 'userId'
    }

    def __init__(self, cluster_id: 'str' =None, created_at: 'datetime' =None, created_from_ui: 'bool' =None, display_name: 'str' =None, error: 'str' =None, is_published: 'bool' =None, message: 'str' =None, name: 'str' =None, parameters: 'list[V1PipelineParameter]' =None, parent_pipeline_id: 'str' =None, schedule_id: 'str' =None, shared_filesystem: 'V1SharedFilesystem' =None, state: 'V1PipelineState' =None, statuses: 'list[V1PipelineStepStatus]' =None, steps: 'list[V1PipelineStep]' =None, updated_at: 'datetime' =None, user_id: 'str' =None):  # noqa: E501
        """PipelinesIdBody - a model defined in Swagger"""  # noqa: E501
        self._cluster_id = None
        self._created_at = None
        self._created_from_ui = None
        self._display_name = None
        self._error = None
        self._is_published = None
        self._message = None
        self._name = None
        self._parameters = None
        self._parent_pipeline_id = None
        self._schedule_id = None
        self._shared_filesystem = None
        self._state = None
        self._statuses = None
        self._steps = None
        self._updated_at = None
        self._user_id = None
        self.discriminator = None
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if created_at is not None:
            self.created_at = created_at
        if created_from_ui is not None:
            self.created_from_ui = created_from_ui
        if display_name is not None:
            self.display_name = display_name
        if error is not None:
            self.error = error
        if is_published is not None:
            self.is_published = is_published
        if message is not None:
            self.message = message
        if name is not None:
            self.name = name
        if parameters is not None:
            self.parameters = parameters
        if parent_pipeline_id is not None:
            self.parent_pipeline_id = parent_pipeline_id
        if schedule_id is not None:
            self.schedule_id = schedule_id
        if shared_filesystem is not None:
            self.shared_filesystem = shared_filesystem
        if state is not None:
            self.state = state
        if statuses is not None:
            self.statuses = statuses
        if steps is not None:
            self.steps = steps
        if updated_at is not None:
            self.updated_at = updated_at
        if user_id is not None:
            self.user_id = user_id

    @property
    def cluster_id(self) -> 'str':
        """Gets the cluster_id of this PipelinesIdBody.  # noqa: E501


        :return: The cluster_id of this PipelinesIdBody.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id: 'str'):
        """Sets the cluster_id of this PipelinesIdBody.


        :param cluster_id: The cluster_id of this PipelinesIdBody.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this PipelinesIdBody.  # noqa: E501


        :return: The created_at of this PipelinesIdBody.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this PipelinesIdBody.


        :param created_at: The created_at of this PipelinesIdBody.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def created_from_ui(self) -> 'bool':
        """Gets the created_from_ui of this PipelinesIdBody.  # noqa: E501


        :return: The created_from_ui of this PipelinesIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._created_from_ui

    @created_from_ui.setter
    def created_from_ui(self, created_from_ui: 'bool'):
        """Sets the created_from_ui of this PipelinesIdBody.


        :param created_from_ui: The created_from_ui of this PipelinesIdBody.  # noqa: E501
        :type: bool
        """

        self._created_from_ui = created_from_ui

    @property
    def display_name(self) -> 'str':
        """Gets the display_name of this PipelinesIdBody.  # noqa: E501


        :return: The display_name of this PipelinesIdBody.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: 'str'):
        """Sets the display_name of this PipelinesIdBody.


        :param display_name: The display_name of this PipelinesIdBody.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def error(self) -> 'str':
        """Gets the error of this PipelinesIdBody.  # noqa: E501


        :return: The error of this PipelinesIdBody.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error: 'str'):
        """Sets the error of this PipelinesIdBody.


        :param error: The error of this PipelinesIdBody.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def is_published(self) -> 'bool':
        """Gets the is_published of this PipelinesIdBody.  # noqa: E501


        :return: The is_published of this PipelinesIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_published

    @is_published.setter
    def is_published(self, is_published: 'bool'):
        """Sets the is_published of this PipelinesIdBody.


        :param is_published: The is_published of this PipelinesIdBody.  # noqa: E501
        :type: bool
        """

        self._is_published = is_published

    @property
    def message(self) -> 'str':
        """Gets the message of this PipelinesIdBody.  # noqa: E501


        :return: The message of this PipelinesIdBody.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: 'str'):
        """Sets the message of this PipelinesIdBody.


        :param message: The message of this PipelinesIdBody.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def name(self) -> 'str':
        """Gets the name of this PipelinesIdBody.  # noqa: E501


        :return: The name of this PipelinesIdBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this PipelinesIdBody.


        :param name: The name of this PipelinesIdBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def parameters(self) -> 'list[V1PipelineParameter]':
        """Gets the parameters of this PipelinesIdBody.  # noqa: E501


        :return: The parameters of this PipelinesIdBody.  # noqa: E501
        :rtype: list[V1PipelineParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: 'list[V1PipelineParameter]'):
        """Sets the parameters of this PipelinesIdBody.


        :param parameters: The parameters of this PipelinesIdBody.  # noqa: E501
        :type: list[V1PipelineParameter]
        """

        self._parameters = parameters

    @property
    def parent_pipeline_id(self) -> 'str':
        """Gets the parent_pipeline_id of this PipelinesIdBody.  # noqa: E501


        :return: The parent_pipeline_id of this PipelinesIdBody.  # noqa: E501
        :rtype: str
        """
        return self._parent_pipeline_id

    @parent_pipeline_id.setter
    def parent_pipeline_id(self, parent_pipeline_id: 'str'):
        """Sets the parent_pipeline_id of this PipelinesIdBody.


        :param parent_pipeline_id: The parent_pipeline_id of this PipelinesIdBody.  # noqa: E501
        :type: str
        """

        self._parent_pipeline_id = parent_pipeline_id

    @property
    def schedule_id(self) -> 'str':
        """Gets the schedule_id of this PipelinesIdBody.  # noqa: E501


        :return: The schedule_id of this PipelinesIdBody.  # noqa: E501
        :rtype: str
        """
        return self._schedule_id

    @schedule_id.setter
    def schedule_id(self, schedule_id: 'str'):
        """Sets the schedule_id of this PipelinesIdBody.


        :param schedule_id: The schedule_id of this PipelinesIdBody.  # noqa: E501
        :type: str
        """

        self._schedule_id = schedule_id

    @property
    def shared_filesystem(self) -> 'V1SharedFilesystem':
        """Gets the shared_filesystem of this PipelinesIdBody.  # noqa: E501


        :return: The shared_filesystem of this PipelinesIdBody.  # noqa: E501
        :rtype: V1SharedFilesystem
        """
        return self._shared_filesystem

    @shared_filesystem.setter
    def shared_filesystem(self, shared_filesystem: 'V1SharedFilesystem'):
        """Sets the shared_filesystem of this PipelinesIdBody.


        :param shared_filesystem: The shared_filesystem of this PipelinesIdBody.  # noqa: E501
        :type: V1SharedFilesystem
        """

        self._shared_filesystem = shared_filesystem

    @property
    def state(self) -> 'V1PipelineState':
        """Gets the state of this PipelinesIdBody.  # noqa: E501


        :return: The state of this PipelinesIdBody.  # noqa: E501
        :rtype: V1PipelineState
        """
        return self._state

    @state.setter
    def state(self, state: 'V1PipelineState'):
        """Sets the state of this PipelinesIdBody.


        :param state: The state of this PipelinesIdBody.  # noqa: E501
        :type: V1PipelineState
        """

        self._state = state

    @property
    def statuses(self) -> 'list[V1PipelineStepStatus]':
        """Gets the statuses of this PipelinesIdBody.  # noqa: E501


        :return: The statuses of this PipelinesIdBody.  # noqa: E501
        :rtype: list[V1PipelineStepStatus]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses: 'list[V1PipelineStepStatus]'):
        """Sets the statuses of this PipelinesIdBody.


        :param statuses: The statuses of this PipelinesIdBody.  # noqa: E501
        :type: list[V1PipelineStepStatus]
        """

        self._statuses = statuses

    @property
    def steps(self) -> 'list[V1PipelineStep]':
        """Gets the steps of this PipelinesIdBody.  # noqa: E501


        :return: The steps of this PipelinesIdBody.  # noqa: E501
        :rtype: list[V1PipelineStep]
        """
        return self._steps

    @steps.setter
    def steps(self, steps: 'list[V1PipelineStep]'):
        """Sets the steps of this PipelinesIdBody.


        :param steps: The steps of this PipelinesIdBody.  # noqa: E501
        :type: list[V1PipelineStep]
        """

        self._steps = steps

    @property
    def updated_at(self) -> 'datetime':
        """Gets the updated_at of this PipelinesIdBody.  # noqa: E501


        :return: The updated_at of this PipelinesIdBody.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: 'datetime'):
        """Sets the updated_at of this PipelinesIdBody.


        :param updated_at: The updated_at of this PipelinesIdBody.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def user_id(self) -> 'str':
        """Gets the user_id of this PipelinesIdBody.  # noqa: E501


        :return: The user_id of this PipelinesIdBody.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: 'str'):
        """Sets the user_id of this PipelinesIdBody.


        :param user_id: The user_id of this PipelinesIdBody.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PipelinesIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'PipelinesIdBody') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, PipelinesIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'PipelinesIdBody') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
