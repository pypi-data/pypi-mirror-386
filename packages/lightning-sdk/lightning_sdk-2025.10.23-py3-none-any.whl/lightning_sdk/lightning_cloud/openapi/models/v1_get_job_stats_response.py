# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1GetJobStatsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'queued_deployments': 'int',
        'queued_jobs': 'int',
        'running_deployments': 'int',
        'running_jobs': 'int',
        'running_pipelines': 'int',
        'total_jobs': 'int'
    }

    attribute_map = {
        'queued_deployments': 'queuedDeployments',
        'queued_jobs': 'queuedJobs',
        'running_deployments': 'runningDeployments',
        'running_jobs': 'runningJobs',
        'running_pipelines': 'runningPipelines',
        'total_jobs': 'totalJobs'
    }

    def __init__(self, queued_deployments: 'int' =None, queued_jobs: 'int' =None, running_deployments: 'int' =None, running_jobs: 'int' =None, running_pipelines: 'int' =None, total_jobs: 'int' =None):  # noqa: E501
        """V1GetJobStatsResponse - a model defined in Swagger"""  # noqa: E501
        self._queued_deployments = None
        self._queued_jobs = None
        self._running_deployments = None
        self._running_jobs = None
        self._running_pipelines = None
        self._total_jobs = None
        self.discriminator = None
        if queued_deployments is not None:
            self.queued_deployments = queued_deployments
        if queued_jobs is not None:
            self.queued_jobs = queued_jobs
        if running_deployments is not None:
            self.running_deployments = running_deployments
        if running_jobs is not None:
            self.running_jobs = running_jobs
        if running_pipelines is not None:
            self.running_pipelines = running_pipelines
        if total_jobs is not None:
            self.total_jobs = total_jobs

    @property
    def queued_deployments(self) -> 'int':
        """Gets the queued_deployments of this V1GetJobStatsResponse.  # noqa: E501


        :return: The queued_deployments of this V1GetJobStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._queued_deployments

    @queued_deployments.setter
    def queued_deployments(self, queued_deployments: 'int'):
        """Sets the queued_deployments of this V1GetJobStatsResponse.


        :param queued_deployments: The queued_deployments of this V1GetJobStatsResponse.  # noqa: E501
        :type: int
        """

        self._queued_deployments = queued_deployments

    @property
    def queued_jobs(self) -> 'int':
        """Gets the queued_jobs of this V1GetJobStatsResponse.  # noqa: E501


        :return: The queued_jobs of this V1GetJobStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._queued_jobs

    @queued_jobs.setter
    def queued_jobs(self, queued_jobs: 'int'):
        """Sets the queued_jobs of this V1GetJobStatsResponse.


        :param queued_jobs: The queued_jobs of this V1GetJobStatsResponse.  # noqa: E501
        :type: int
        """

        self._queued_jobs = queued_jobs

    @property
    def running_deployments(self) -> 'int':
        """Gets the running_deployments of this V1GetJobStatsResponse.  # noqa: E501


        :return: The running_deployments of this V1GetJobStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._running_deployments

    @running_deployments.setter
    def running_deployments(self, running_deployments: 'int'):
        """Sets the running_deployments of this V1GetJobStatsResponse.


        :param running_deployments: The running_deployments of this V1GetJobStatsResponse.  # noqa: E501
        :type: int
        """

        self._running_deployments = running_deployments

    @property
    def running_jobs(self) -> 'int':
        """Gets the running_jobs of this V1GetJobStatsResponse.  # noqa: E501


        :return: The running_jobs of this V1GetJobStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._running_jobs

    @running_jobs.setter
    def running_jobs(self, running_jobs: 'int'):
        """Sets the running_jobs of this V1GetJobStatsResponse.


        :param running_jobs: The running_jobs of this V1GetJobStatsResponse.  # noqa: E501
        :type: int
        """

        self._running_jobs = running_jobs

    @property
    def running_pipelines(self) -> 'int':
        """Gets the running_pipelines of this V1GetJobStatsResponse.  # noqa: E501


        :return: The running_pipelines of this V1GetJobStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._running_pipelines

    @running_pipelines.setter
    def running_pipelines(self, running_pipelines: 'int'):
        """Sets the running_pipelines of this V1GetJobStatsResponse.


        :param running_pipelines: The running_pipelines of this V1GetJobStatsResponse.  # noqa: E501
        :type: int
        """

        self._running_pipelines = running_pipelines

    @property
    def total_jobs(self) -> 'int':
        """Gets the total_jobs of this V1GetJobStatsResponse.  # noqa: E501


        :return: The total_jobs of this V1GetJobStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_jobs

    @total_jobs.setter
    def total_jobs(self, total_jobs: 'int'):
        """Sets the total_jobs of this V1GetJobStatsResponse.


        :param total_jobs: The total_jobs of this V1GetJobStatsResponse.  # noqa: E501
        :type: int
        """

        self._total_jobs = total_jobs

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1GetJobStatsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1GetJobStatsResponse') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1GetJobStatsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1GetJobStatsResponse') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
