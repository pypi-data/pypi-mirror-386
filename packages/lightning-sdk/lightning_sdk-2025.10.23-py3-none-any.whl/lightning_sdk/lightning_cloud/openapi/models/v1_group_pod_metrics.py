# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1GroupPodMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpus_util': 'float',
        'cpus_util_avg': 'float',
        'filesystem_inode_util_avg': 'float',
        'filesystem_read_rate_avg': 'float',
        'filesystem_util_avg': 'float',
        'filesystem_write_rate_avg': 'float',
        'gpu_sm_active_avg': 'float',
        'gpu_sm_occupancy_avg': 'float',
        'gpus_power_avg_running_watts': 'float',
        'gpus_power_avg_watts': 'float',
        'gpus_power_total_watts': 'float',
        'gpus_temp_avg': 'float',
        'gpus_temp_avg_running': 'float',
        'gpus_util_avg': 'float',
        'gpus_util_avg_running': 'float',
        'id': 'str',
        'max_gpu_temp_recorded': 'str',
        'max_power_per_gpu': 'float',
        'num_gpus_running_pods': 'int',
        'num_gpus_total': 'int',
        'num_limit_cpus': 'int',
        'num_limit_gpus': 'int',
        'num_nodes': 'int',
        'num_pods': 'int',
        'num_pods_failed': 'int',
        'num_pods_pending': 'int',
        'num_pods_running': 'int',
        'num_requested_cpus': 'int',
        'num_requested_gpus': 'int',
        'nvlink_rx_gib_total': 'float',
        'nvlink_tx_gib_total': 'float',
        'pcie_rx_gib_total': 'float',
        'pcie_tx_gib_total': 'float',
        'ram_limit_total': 'str',
        'ram_requested_total': 'str',
        'ram_used_total': 'str',
        'ram_util_avg': 'float',
        'timestamp': 'datetime',
        'vram_capacity_total_mib': 'str',
        'vram_limit_total_mib': 'str',
        'vram_read_write_util_avg': 'float',
        'vram_requested_total_mib': 'str',
        'vram_used_total_mib': 'str',
        'vram_util_avg': 'float'
    }

    attribute_map = {
        'cpus_util': 'cpusUtil',
        'cpus_util_avg': 'cpusUtilAvg',
        'filesystem_inode_util_avg': 'filesystemInodeUtilAvg',
        'filesystem_read_rate_avg': 'filesystemReadRateAvg',
        'filesystem_util_avg': 'filesystemUtilAvg',
        'filesystem_write_rate_avg': 'filesystemWriteRateAvg',
        'gpu_sm_active_avg': 'gpuSmActiveAvg',
        'gpu_sm_occupancy_avg': 'gpuSmOccupancyAvg',
        'gpus_power_avg_running_watts': 'gpusPowerAvgRunningWatts',
        'gpus_power_avg_watts': 'gpusPowerAvgWatts',
        'gpus_power_total_watts': 'gpusPowerTotalWatts',
        'gpus_temp_avg': 'gpusTempAvg',
        'gpus_temp_avg_running': 'gpusTempAvgRunning',
        'gpus_util_avg': 'gpusUtilAvg',
        'gpus_util_avg_running': 'gpusUtilAvgRunning',
        'id': 'id',
        'max_gpu_temp_recorded': 'maxGpuTempRecorded',
        'max_power_per_gpu': 'maxPowerPerGpu',
        'num_gpus_running_pods': 'numGpusRunningPods',
        'num_gpus_total': 'numGpusTotal',
        'num_limit_cpus': 'numLimitCpus',
        'num_limit_gpus': 'numLimitGpus',
        'num_nodes': 'numNodes',
        'num_pods': 'numPods',
        'num_pods_failed': 'numPodsFailed',
        'num_pods_pending': 'numPodsPending',
        'num_pods_running': 'numPodsRunning',
        'num_requested_cpus': 'numRequestedCpus',
        'num_requested_gpus': 'numRequestedGpus',
        'nvlink_rx_gib_total': 'nvlinkRxGibTotal',
        'nvlink_tx_gib_total': 'nvlinkTxGibTotal',
        'pcie_rx_gib_total': 'pcieRxGibTotal',
        'pcie_tx_gib_total': 'pcieTxGibTotal',
        'ram_limit_total': 'ramLimitTotal',
        'ram_requested_total': 'ramRequestedTotal',
        'ram_used_total': 'ramUsedTotal',
        'ram_util_avg': 'ramUtilAvg',
        'timestamp': 'timestamp',
        'vram_capacity_total_mib': 'vramCapacityTotalMib',
        'vram_limit_total_mib': 'vramLimitTotalMib',
        'vram_read_write_util_avg': 'vramReadWriteUtilAvg',
        'vram_requested_total_mib': 'vramRequestedTotalMib',
        'vram_used_total_mib': 'vramUsedTotalMib',
        'vram_util_avg': 'vramUtilAvg'
    }

    def __init__(self, cpus_util: 'float' =None, cpus_util_avg: 'float' =None, filesystem_inode_util_avg: 'float' =None, filesystem_read_rate_avg: 'float' =None, filesystem_util_avg: 'float' =None, filesystem_write_rate_avg: 'float' =None, gpu_sm_active_avg: 'float' =None, gpu_sm_occupancy_avg: 'float' =None, gpus_power_avg_running_watts: 'float' =None, gpus_power_avg_watts: 'float' =None, gpus_power_total_watts: 'float' =None, gpus_temp_avg: 'float' =None, gpus_temp_avg_running: 'float' =None, gpus_util_avg: 'float' =None, gpus_util_avg_running: 'float' =None, id: 'str' =None, max_gpu_temp_recorded: 'str' =None, max_power_per_gpu: 'float' =None, num_gpus_running_pods: 'int' =None, num_gpus_total: 'int' =None, num_limit_cpus: 'int' =None, num_limit_gpus: 'int' =None, num_nodes: 'int' =None, num_pods: 'int' =None, num_pods_failed: 'int' =None, num_pods_pending: 'int' =None, num_pods_running: 'int' =None, num_requested_cpus: 'int' =None, num_requested_gpus: 'int' =None, nvlink_rx_gib_total: 'float' =None, nvlink_tx_gib_total: 'float' =None, pcie_rx_gib_total: 'float' =None, pcie_tx_gib_total: 'float' =None, ram_limit_total: 'str' =None, ram_requested_total: 'str' =None, ram_used_total: 'str' =None, ram_util_avg: 'float' =None, timestamp: 'datetime' =None, vram_capacity_total_mib: 'str' =None, vram_limit_total_mib: 'str' =None, vram_read_write_util_avg: 'float' =None, vram_requested_total_mib: 'str' =None, vram_used_total_mib: 'str' =None, vram_util_avg: 'float' =None):  # noqa: E501
        """V1GroupPodMetrics - a model defined in Swagger"""  # noqa: E501
        self._cpus_util = None
        self._cpus_util_avg = None
        self._filesystem_inode_util_avg = None
        self._filesystem_read_rate_avg = None
        self._filesystem_util_avg = None
        self._filesystem_write_rate_avg = None
        self._gpu_sm_active_avg = None
        self._gpu_sm_occupancy_avg = None
        self._gpus_power_avg_running_watts = None
        self._gpus_power_avg_watts = None
        self._gpus_power_total_watts = None
        self._gpus_temp_avg = None
        self._gpus_temp_avg_running = None
        self._gpus_util_avg = None
        self._gpus_util_avg_running = None
        self._id = None
        self._max_gpu_temp_recorded = None
        self._max_power_per_gpu = None
        self._num_gpus_running_pods = None
        self._num_gpus_total = None
        self._num_limit_cpus = None
        self._num_limit_gpus = None
        self._num_nodes = None
        self._num_pods = None
        self._num_pods_failed = None
        self._num_pods_pending = None
        self._num_pods_running = None
        self._num_requested_cpus = None
        self._num_requested_gpus = None
        self._nvlink_rx_gib_total = None
        self._nvlink_tx_gib_total = None
        self._pcie_rx_gib_total = None
        self._pcie_tx_gib_total = None
        self._ram_limit_total = None
        self._ram_requested_total = None
        self._ram_used_total = None
        self._ram_util_avg = None
        self._timestamp = None
        self._vram_capacity_total_mib = None
        self._vram_limit_total_mib = None
        self._vram_read_write_util_avg = None
        self._vram_requested_total_mib = None
        self._vram_used_total_mib = None
        self._vram_util_avg = None
        self.discriminator = None
        if cpus_util is not None:
            self.cpus_util = cpus_util
        if cpus_util_avg is not None:
            self.cpus_util_avg = cpus_util_avg
        if filesystem_inode_util_avg is not None:
            self.filesystem_inode_util_avg = filesystem_inode_util_avg
        if filesystem_read_rate_avg is not None:
            self.filesystem_read_rate_avg = filesystem_read_rate_avg
        if filesystem_util_avg is not None:
            self.filesystem_util_avg = filesystem_util_avg
        if filesystem_write_rate_avg is not None:
            self.filesystem_write_rate_avg = filesystem_write_rate_avg
        if gpu_sm_active_avg is not None:
            self.gpu_sm_active_avg = gpu_sm_active_avg
        if gpu_sm_occupancy_avg is not None:
            self.gpu_sm_occupancy_avg = gpu_sm_occupancy_avg
        if gpus_power_avg_running_watts is not None:
            self.gpus_power_avg_running_watts = gpus_power_avg_running_watts
        if gpus_power_avg_watts is not None:
            self.gpus_power_avg_watts = gpus_power_avg_watts
        if gpus_power_total_watts is not None:
            self.gpus_power_total_watts = gpus_power_total_watts
        if gpus_temp_avg is not None:
            self.gpus_temp_avg = gpus_temp_avg
        if gpus_temp_avg_running is not None:
            self.gpus_temp_avg_running = gpus_temp_avg_running
        if gpus_util_avg is not None:
            self.gpus_util_avg = gpus_util_avg
        if gpus_util_avg_running is not None:
            self.gpus_util_avg_running = gpus_util_avg_running
        if id is not None:
            self.id = id
        if max_gpu_temp_recorded is not None:
            self.max_gpu_temp_recorded = max_gpu_temp_recorded
        if max_power_per_gpu is not None:
            self.max_power_per_gpu = max_power_per_gpu
        if num_gpus_running_pods is not None:
            self.num_gpus_running_pods = num_gpus_running_pods
        if num_gpus_total is not None:
            self.num_gpus_total = num_gpus_total
        if num_limit_cpus is not None:
            self.num_limit_cpus = num_limit_cpus
        if num_limit_gpus is not None:
            self.num_limit_gpus = num_limit_gpus
        if num_nodes is not None:
            self.num_nodes = num_nodes
        if num_pods is not None:
            self.num_pods = num_pods
        if num_pods_failed is not None:
            self.num_pods_failed = num_pods_failed
        if num_pods_pending is not None:
            self.num_pods_pending = num_pods_pending
        if num_pods_running is not None:
            self.num_pods_running = num_pods_running
        if num_requested_cpus is not None:
            self.num_requested_cpus = num_requested_cpus
        if num_requested_gpus is not None:
            self.num_requested_gpus = num_requested_gpus
        if nvlink_rx_gib_total is not None:
            self.nvlink_rx_gib_total = nvlink_rx_gib_total
        if nvlink_tx_gib_total is not None:
            self.nvlink_tx_gib_total = nvlink_tx_gib_total
        if pcie_rx_gib_total is not None:
            self.pcie_rx_gib_total = pcie_rx_gib_total
        if pcie_tx_gib_total is not None:
            self.pcie_tx_gib_total = pcie_tx_gib_total
        if ram_limit_total is not None:
            self.ram_limit_total = ram_limit_total
        if ram_requested_total is not None:
            self.ram_requested_total = ram_requested_total
        if ram_used_total is not None:
            self.ram_used_total = ram_used_total
        if ram_util_avg is not None:
            self.ram_util_avg = ram_util_avg
        if timestamp is not None:
            self.timestamp = timestamp
        if vram_capacity_total_mib is not None:
            self.vram_capacity_total_mib = vram_capacity_total_mib
        if vram_limit_total_mib is not None:
            self.vram_limit_total_mib = vram_limit_total_mib
        if vram_read_write_util_avg is not None:
            self.vram_read_write_util_avg = vram_read_write_util_avg
        if vram_requested_total_mib is not None:
            self.vram_requested_total_mib = vram_requested_total_mib
        if vram_used_total_mib is not None:
            self.vram_used_total_mib = vram_used_total_mib
        if vram_util_avg is not None:
            self.vram_util_avg = vram_util_avg

    @property
    def cpus_util(self) -> 'float':
        """Gets the cpus_util of this V1GroupPodMetrics.  # noqa: E501


        :return: The cpus_util of this V1GroupPodMetrics.  # noqa: E501
        :rtype: float
        """
        return self._cpus_util

    @cpus_util.setter
    def cpus_util(self, cpus_util: 'float'):
        """Sets the cpus_util of this V1GroupPodMetrics.


        :param cpus_util: The cpus_util of this V1GroupPodMetrics.  # noqa: E501
        :type: float
        """

        self._cpus_util = cpus_util

    @property
    def cpus_util_avg(self) -> 'float':
        """Gets the cpus_util_avg of this V1GroupPodMetrics.  # noqa: E501


        :return: The cpus_util_avg of this V1GroupPodMetrics.  # noqa: E501
        :rtype: float
        """
        return self._cpus_util_avg

    @cpus_util_avg.setter
    def cpus_util_avg(self, cpus_util_avg: 'float'):
        """Sets the cpus_util_avg of this V1GroupPodMetrics.


        :param cpus_util_avg: The cpus_util_avg of this V1GroupPodMetrics.  # noqa: E501
        :type: float
        """

        self._cpus_util_avg = cpus_util_avg

    @property
    def filesystem_inode_util_avg(self) -> 'float':
        """Gets the filesystem_inode_util_avg of this V1GroupPodMetrics.  # noqa: E501


        :return: The filesystem_inode_util_avg of this V1GroupPodMetrics.  # noqa: E501
        :rtype: float
        """
        return self._filesystem_inode_util_avg

    @filesystem_inode_util_avg.setter
    def filesystem_inode_util_avg(self, filesystem_inode_util_avg: 'float'):
        """Sets the filesystem_inode_util_avg of this V1GroupPodMetrics.


        :param filesystem_inode_util_avg: The filesystem_inode_util_avg of this V1GroupPodMetrics.  # noqa: E501
        :type: float
        """

        self._filesystem_inode_util_avg = filesystem_inode_util_avg

    @property
    def filesystem_read_rate_avg(self) -> 'float':
        """Gets the filesystem_read_rate_avg of this V1GroupPodMetrics.  # noqa: E501


        :return: The filesystem_read_rate_avg of this V1GroupPodMetrics.  # noqa: E501
        :rtype: float
        """
        return self._filesystem_read_rate_avg

    @filesystem_read_rate_avg.setter
    def filesystem_read_rate_avg(self, filesystem_read_rate_avg: 'float'):
        """Sets the filesystem_read_rate_avg of this V1GroupPodMetrics.


        :param filesystem_read_rate_avg: The filesystem_read_rate_avg of this V1GroupPodMetrics.  # noqa: E501
        :type: float
        """

        self._filesystem_read_rate_avg = filesystem_read_rate_avg

    @property
    def filesystem_util_avg(self) -> 'float':
        """Gets the filesystem_util_avg of this V1GroupPodMetrics.  # noqa: E501


        :return: The filesystem_util_avg of this V1GroupPodMetrics.  # noqa: E501
        :rtype: float
        """
        return self._filesystem_util_avg

    @filesystem_util_avg.setter
    def filesystem_util_avg(self, filesystem_util_avg: 'float'):
        """Sets the filesystem_util_avg of this V1GroupPodMetrics.


        :param filesystem_util_avg: The filesystem_util_avg of this V1GroupPodMetrics.  # noqa: E501
        :type: float
        """

        self._filesystem_util_avg = filesystem_util_avg

    @property
    def filesystem_write_rate_avg(self) -> 'float':
        """Gets the filesystem_write_rate_avg of this V1GroupPodMetrics.  # noqa: E501


        :return: The filesystem_write_rate_avg of this V1GroupPodMetrics.  # noqa: E501
        :rtype: float
        """
        return self._filesystem_write_rate_avg

    @filesystem_write_rate_avg.setter
    def filesystem_write_rate_avg(self, filesystem_write_rate_avg: 'float'):
        """Sets the filesystem_write_rate_avg of this V1GroupPodMetrics.


        :param filesystem_write_rate_avg: The filesystem_write_rate_avg of this V1GroupPodMetrics.  # noqa: E501
        :type: float
        """

        self._filesystem_write_rate_avg = filesystem_write_rate_avg

    @property
    def gpu_sm_active_avg(self) -> 'float':
        """Gets the gpu_sm_active_avg of this V1GroupPodMetrics.  # noqa: E501


        :return: The gpu_sm_active_avg of this V1GroupPodMetrics.  # noqa: E501
        :rtype: float
        """
        return self._gpu_sm_active_avg

    @gpu_sm_active_avg.setter
    def gpu_sm_active_avg(self, gpu_sm_active_avg: 'float'):
        """Sets the gpu_sm_active_avg of this V1GroupPodMetrics.


        :param gpu_sm_active_avg: The gpu_sm_active_avg of this V1GroupPodMetrics.  # noqa: E501
        :type: float
        """

        self._gpu_sm_active_avg = gpu_sm_active_avg

    @property
    def gpu_sm_occupancy_avg(self) -> 'float':
        """Gets the gpu_sm_occupancy_avg of this V1GroupPodMetrics.  # noqa: E501


        :return: The gpu_sm_occupancy_avg of this V1GroupPodMetrics.  # noqa: E501
        :rtype: float
        """
        return self._gpu_sm_occupancy_avg

    @gpu_sm_occupancy_avg.setter
    def gpu_sm_occupancy_avg(self, gpu_sm_occupancy_avg: 'float'):
        """Sets the gpu_sm_occupancy_avg of this V1GroupPodMetrics.


        :param gpu_sm_occupancy_avg: The gpu_sm_occupancy_avg of this V1GroupPodMetrics.  # noqa: E501
        :type: float
        """

        self._gpu_sm_occupancy_avg = gpu_sm_occupancy_avg

    @property
    def gpus_power_avg_running_watts(self) -> 'float':
        """Gets the gpus_power_avg_running_watts of this V1GroupPodMetrics.  # noqa: E501


        :return: The gpus_power_avg_running_watts of this V1GroupPodMetrics.  # noqa: E501
        :rtype: float
        """
        return self._gpus_power_avg_running_watts

    @gpus_power_avg_running_watts.setter
    def gpus_power_avg_running_watts(self, gpus_power_avg_running_watts: 'float'):
        """Sets the gpus_power_avg_running_watts of this V1GroupPodMetrics.


        :param gpus_power_avg_running_watts: The gpus_power_avg_running_watts of this V1GroupPodMetrics.  # noqa: E501
        :type: float
        """

        self._gpus_power_avg_running_watts = gpus_power_avg_running_watts

    @property
    def gpus_power_avg_watts(self) -> 'float':
        """Gets the gpus_power_avg_watts of this V1GroupPodMetrics.  # noqa: E501


        :return: The gpus_power_avg_watts of this V1GroupPodMetrics.  # noqa: E501
        :rtype: float
        """
        return self._gpus_power_avg_watts

    @gpus_power_avg_watts.setter
    def gpus_power_avg_watts(self, gpus_power_avg_watts: 'float'):
        """Sets the gpus_power_avg_watts of this V1GroupPodMetrics.


        :param gpus_power_avg_watts: The gpus_power_avg_watts of this V1GroupPodMetrics.  # noqa: E501
        :type: float
        """

        self._gpus_power_avg_watts = gpus_power_avg_watts

    @property
    def gpus_power_total_watts(self) -> 'float':
        """Gets the gpus_power_total_watts of this V1GroupPodMetrics.  # noqa: E501


        :return: The gpus_power_total_watts of this V1GroupPodMetrics.  # noqa: E501
        :rtype: float
        """
        return self._gpus_power_total_watts

    @gpus_power_total_watts.setter
    def gpus_power_total_watts(self, gpus_power_total_watts: 'float'):
        """Sets the gpus_power_total_watts of this V1GroupPodMetrics.


        :param gpus_power_total_watts: The gpus_power_total_watts of this V1GroupPodMetrics.  # noqa: E501
        :type: float
        """

        self._gpus_power_total_watts = gpus_power_total_watts

    @property
    def gpus_temp_avg(self) -> 'float':
        """Gets the gpus_temp_avg of this V1GroupPodMetrics.  # noqa: E501


        :return: The gpus_temp_avg of this V1GroupPodMetrics.  # noqa: E501
        :rtype: float
        """
        return self._gpus_temp_avg

    @gpus_temp_avg.setter
    def gpus_temp_avg(self, gpus_temp_avg: 'float'):
        """Sets the gpus_temp_avg of this V1GroupPodMetrics.


        :param gpus_temp_avg: The gpus_temp_avg of this V1GroupPodMetrics.  # noqa: E501
        :type: float
        """

        self._gpus_temp_avg = gpus_temp_avg

    @property
    def gpus_temp_avg_running(self) -> 'float':
        """Gets the gpus_temp_avg_running of this V1GroupPodMetrics.  # noqa: E501


        :return: The gpus_temp_avg_running of this V1GroupPodMetrics.  # noqa: E501
        :rtype: float
        """
        return self._gpus_temp_avg_running

    @gpus_temp_avg_running.setter
    def gpus_temp_avg_running(self, gpus_temp_avg_running: 'float'):
        """Sets the gpus_temp_avg_running of this V1GroupPodMetrics.


        :param gpus_temp_avg_running: The gpus_temp_avg_running of this V1GroupPodMetrics.  # noqa: E501
        :type: float
        """

        self._gpus_temp_avg_running = gpus_temp_avg_running

    @property
    def gpus_util_avg(self) -> 'float':
        """Gets the gpus_util_avg of this V1GroupPodMetrics.  # noqa: E501


        :return: The gpus_util_avg of this V1GroupPodMetrics.  # noqa: E501
        :rtype: float
        """
        return self._gpus_util_avg

    @gpus_util_avg.setter
    def gpus_util_avg(self, gpus_util_avg: 'float'):
        """Sets the gpus_util_avg of this V1GroupPodMetrics.


        :param gpus_util_avg: The gpus_util_avg of this V1GroupPodMetrics.  # noqa: E501
        :type: float
        """

        self._gpus_util_avg = gpus_util_avg

    @property
    def gpus_util_avg_running(self) -> 'float':
        """Gets the gpus_util_avg_running of this V1GroupPodMetrics.  # noqa: E501


        :return: The gpus_util_avg_running of this V1GroupPodMetrics.  # noqa: E501
        :rtype: float
        """
        return self._gpus_util_avg_running

    @gpus_util_avg_running.setter
    def gpus_util_avg_running(self, gpus_util_avg_running: 'float'):
        """Sets the gpus_util_avg_running of this V1GroupPodMetrics.


        :param gpus_util_avg_running: The gpus_util_avg_running of this V1GroupPodMetrics.  # noqa: E501
        :type: float
        """

        self._gpus_util_avg_running = gpus_util_avg_running

    @property
    def id(self) -> 'str':
        """Gets the id of this V1GroupPodMetrics.  # noqa: E501


        :return: The id of this V1GroupPodMetrics.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1GroupPodMetrics.


        :param id: The id of this V1GroupPodMetrics.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def max_gpu_temp_recorded(self) -> 'str':
        """Gets the max_gpu_temp_recorded of this V1GroupPodMetrics.  # noqa: E501


        :return: The max_gpu_temp_recorded of this V1GroupPodMetrics.  # noqa: E501
        :rtype: str
        """
        return self._max_gpu_temp_recorded

    @max_gpu_temp_recorded.setter
    def max_gpu_temp_recorded(self, max_gpu_temp_recorded: 'str'):
        """Sets the max_gpu_temp_recorded of this V1GroupPodMetrics.


        :param max_gpu_temp_recorded: The max_gpu_temp_recorded of this V1GroupPodMetrics.  # noqa: E501
        :type: str
        """

        self._max_gpu_temp_recorded = max_gpu_temp_recorded

    @property
    def max_power_per_gpu(self) -> 'float':
        """Gets the max_power_per_gpu of this V1GroupPodMetrics.  # noqa: E501


        :return: The max_power_per_gpu of this V1GroupPodMetrics.  # noqa: E501
        :rtype: float
        """
        return self._max_power_per_gpu

    @max_power_per_gpu.setter
    def max_power_per_gpu(self, max_power_per_gpu: 'float'):
        """Sets the max_power_per_gpu of this V1GroupPodMetrics.


        :param max_power_per_gpu: The max_power_per_gpu of this V1GroupPodMetrics.  # noqa: E501
        :type: float
        """

        self._max_power_per_gpu = max_power_per_gpu

    @property
    def num_gpus_running_pods(self) -> 'int':
        """Gets the num_gpus_running_pods of this V1GroupPodMetrics.  # noqa: E501


        :return: The num_gpus_running_pods of this V1GroupPodMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_gpus_running_pods

    @num_gpus_running_pods.setter
    def num_gpus_running_pods(self, num_gpus_running_pods: 'int'):
        """Sets the num_gpus_running_pods of this V1GroupPodMetrics.


        :param num_gpus_running_pods: The num_gpus_running_pods of this V1GroupPodMetrics.  # noqa: E501
        :type: int
        """

        self._num_gpus_running_pods = num_gpus_running_pods

    @property
    def num_gpus_total(self) -> 'int':
        """Gets the num_gpus_total of this V1GroupPodMetrics.  # noqa: E501


        :return: The num_gpus_total of this V1GroupPodMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_gpus_total

    @num_gpus_total.setter
    def num_gpus_total(self, num_gpus_total: 'int'):
        """Sets the num_gpus_total of this V1GroupPodMetrics.


        :param num_gpus_total: The num_gpus_total of this V1GroupPodMetrics.  # noqa: E501
        :type: int
        """

        self._num_gpus_total = num_gpus_total

    @property
    def num_limit_cpus(self) -> 'int':
        """Gets the num_limit_cpus of this V1GroupPodMetrics.  # noqa: E501


        :return: The num_limit_cpus of this V1GroupPodMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_limit_cpus

    @num_limit_cpus.setter
    def num_limit_cpus(self, num_limit_cpus: 'int'):
        """Sets the num_limit_cpus of this V1GroupPodMetrics.


        :param num_limit_cpus: The num_limit_cpus of this V1GroupPodMetrics.  # noqa: E501
        :type: int
        """

        self._num_limit_cpus = num_limit_cpus

    @property
    def num_limit_gpus(self) -> 'int':
        """Gets the num_limit_gpus of this V1GroupPodMetrics.  # noqa: E501


        :return: The num_limit_gpus of this V1GroupPodMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_limit_gpus

    @num_limit_gpus.setter
    def num_limit_gpus(self, num_limit_gpus: 'int'):
        """Sets the num_limit_gpus of this V1GroupPodMetrics.


        :param num_limit_gpus: The num_limit_gpus of this V1GroupPodMetrics.  # noqa: E501
        :type: int
        """

        self._num_limit_gpus = num_limit_gpus

    @property
    def num_nodes(self) -> 'int':
        """Gets the num_nodes of this V1GroupPodMetrics.  # noqa: E501


        :return: The num_nodes of this V1GroupPodMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_nodes

    @num_nodes.setter
    def num_nodes(self, num_nodes: 'int'):
        """Sets the num_nodes of this V1GroupPodMetrics.


        :param num_nodes: The num_nodes of this V1GroupPodMetrics.  # noqa: E501
        :type: int
        """

        self._num_nodes = num_nodes

    @property
    def num_pods(self) -> 'int':
        """Gets the num_pods of this V1GroupPodMetrics.  # noqa: E501


        :return: The num_pods of this V1GroupPodMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_pods

    @num_pods.setter
    def num_pods(self, num_pods: 'int'):
        """Sets the num_pods of this V1GroupPodMetrics.


        :param num_pods: The num_pods of this V1GroupPodMetrics.  # noqa: E501
        :type: int
        """

        self._num_pods = num_pods

    @property
    def num_pods_failed(self) -> 'int':
        """Gets the num_pods_failed of this V1GroupPodMetrics.  # noqa: E501


        :return: The num_pods_failed of this V1GroupPodMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_pods_failed

    @num_pods_failed.setter
    def num_pods_failed(self, num_pods_failed: 'int'):
        """Sets the num_pods_failed of this V1GroupPodMetrics.


        :param num_pods_failed: The num_pods_failed of this V1GroupPodMetrics.  # noqa: E501
        :type: int
        """

        self._num_pods_failed = num_pods_failed

    @property
    def num_pods_pending(self) -> 'int':
        """Gets the num_pods_pending of this V1GroupPodMetrics.  # noqa: E501


        :return: The num_pods_pending of this V1GroupPodMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_pods_pending

    @num_pods_pending.setter
    def num_pods_pending(self, num_pods_pending: 'int'):
        """Sets the num_pods_pending of this V1GroupPodMetrics.


        :param num_pods_pending: The num_pods_pending of this V1GroupPodMetrics.  # noqa: E501
        :type: int
        """

        self._num_pods_pending = num_pods_pending

    @property
    def num_pods_running(self) -> 'int':
        """Gets the num_pods_running of this V1GroupPodMetrics.  # noqa: E501


        :return: The num_pods_running of this V1GroupPodMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_pods_running

    @num_pods_running.setter
    def num_pods_running(self, num_pods_running: 'int'):
        """Sets the num_pods_running of this V1GroupPodMetrics.


        :param num_pods_running: The num_pods_running of this V1GroupPodMetrics.  # noqa: E501
        :type: int
        """

        self._num_pods_running = num_pods_running

    @property
    def num_requested_cpus(self) -> 'int':
        """Gets the num_requested_cpus of this V1GroupPodMetrics.  # noqa: E501


        :return: The num_requested_cpus of this V1GroupPodMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_requested_cpus

    @num_requested_cpus.setter
    def num_requested_cpus(self, num_requested_cpus: 'int'):
        """Sets the num_requested_cpus of this V1GroupPodMetrics.


        :param num_requested_cpus: The num_requested_cpus of this V1GroupPodMetrics.  # noqa: E501
        :type: int
        """

        self._num_requested_cpus = num_requested_cpus

    @property
    def num_requested_gpus(self) -> 'int':
        """Gets the num_requested_gpus of this V1GroupPodMetrics.  # noqa: E501


        :return: The num_requested_gpus of this V1GroupPodMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_requested_gpus

    @num_requested_gpus.setter
    def num_requested_gpus(self, num_requested_gpus: 'int'):
        """Sets the num_requested_gpus of this V1GroupPodMetrics.


        :param num_requested_gpus: The num_requested_gpus of this V1GroupPodMetrics.  # noqa: E501
        :type: int
        """

        self._num_requested_gpus = num_requested_gpus

    @property
    def nvlink_rx_gib_total(self) -> 'float':
        """Gets the nvlink_rx_gib_total of this V1GroupPodMetrics.  # noqa: E501


        :return: The nvlink_rx_gib_total of this V1GroupPodMetrics.  # noqa: E501
        :rtype: float
        """
        return self._nvlink_rx_gib_total

    @nvlink_rx_gib_total.setter
    def nvlink_rx_gib_total(self, nvlink_rx_gib_total: 'float'):
        """Sets the nvlink_rx_gib_total of this V1GroupPodMetrics.


        :param nvlink_rx_gib_total: The nvlink_rx_gib_total of this V1GroupPodMetrics.  # noqa: E501
        :type: float
        """

        self._nvlink_rx_gib_total = nvlink_rx_gib_total

    @property
    def nvlink_tx_gib_total(self) -> 'float':
        """Gets the nvlink_tx_gib_total of this V1GroupPodMetrics.  # noqa: E501


        :return: The nvlink_tx_gib_total of this V1GroupPodMetrics.  # noqa: E501
        :rtype: float
        """
        return self._nvlink_tx_gib_total

    @nvlink_tx_gib_total.setter
    def nvlink_tx_gib_total(self, nvlink_tx_gib_total: 'float'):
        """Sets the nvlink_tx_gib_total of this V1GroupPodMetrics.


        :param nvlink_tx_gib_total: The nvlink_tx_gib_total of this V1GroupPodMetrics.  # noqa: E501
        :type: float
        """

        self._nvlink_tx_gib_total = nvlink_tx_gib_total

    @property
    def pcie_rx_gib_total(self) -> 'float':
        """Gets the pcie_rx_gib_total of this V1GroupPodMetrics.  # noqa: E501


        :return: The pcie_rx_gib_total of this V1GroupPodMetrics.  # noqa: E501
        :rtype: float
        """
        return self._pcie_rx_gib_total

    @pcie_rx_gib_total.setter
    def pcie_rx_gib_total(self, pcie_rx_gib_total: 'float'):
        """Sets the pcie_rx_gib_total of this V1GroupPodMetrics.


        :param pcie_rx_gib_total: The pcie_rx_gib_total of this V1GroupPodMetrics.  # noqa: E501
        :type: float
        """

        self._pcie_rx_gib_total = pcie_rx_gib_total

    @property
    def pcie_tx_gib_total(self) -> 'float':
        """Gets the pcie_tx_gib_total of this V1GroupPodMetrics.  # noqa: E501


        :return: The pcie_tx_gib_total of this V1GroupPodMetrics.  # noqa: E501
        :rtype: float
        """
        return self._pcie_tx_gib_total

    @pcie_tx_gib_total.setter
    def pcie_tx_gib_total(self, pcie_tx_gib_total: 'float'):
        """Sets the pcie_tx_gib_total of this V1GroupPodMetrics.


        :param pcie_tx_gib_total: The pcie_tx_gib_total of this V1GroupPodMetrics.  # noqa: E501
        :type: float
        """

        self._pcie_tx_gib_total = pcie_tx_gib_total

    @property
    def ram_limit_total(self) -> 'str':
        """Gets the ram_limit_total of this V1GroupPodMetrics.  # noqa: E501


        :return: The ram_limit_total of this V1GroupPodMetrics.  # noqa: E501
        :rtype: str
        """
        return self._ram_limit_total

    @ram_limit_total.setter
    def ram_limit_total(self, ram_limit_total: 'str'):
        """Sets the ram_limit_total of this V1GroupPodMetrics.


        :param ram_limit_total: The ram_limit_total of this V1GroupPodMetrics.  # noqa: E501
        :type: str
        """

        self._ram_limit_total = ram_limit_total

    @property
    def ram_requested_total(self) -> 'str':
        """Gets the ram_requested_total of this V1GroupPodMetrics.  # noqa: E501


        :return: The ram_requested_total of this V1GroupPodMetrics.  # noqa: E501
        :rtype: str
        """
        return self._ram_requested_total

    @ram_requested_total.setter
    def ram_requested_total(self, ram_requested_total: 'str'):
        """Sets the ram_requested_total of this V1GroupPodMetrics.


        :param ram_requested_total: The ram_requested_total of this V1GroupPodMetrics.  # noqa: E501
        :type: str
        """

        self._ram_requested_total = ram_requested_total

    @property
    def ram_used_total(self) -> 'str':
        """Gets the ram_used_total of this V1GroupPodMetrics.  # noqa: E501


        :return: The ram_used_total of this V1GroupPodMetrics.  # noqa: E501
        :rtype: str
        """
        return self._ram_used_total

    @ram_used_total.setter
    def ram_used_total(self, ram_used_total: 'str'):
        """Sets the ram_used_total of this V1GroupPodMetrics.


        :param ram_used_total: The ram_used_total of this V1GroupPodMetrics.  # noqa: E501
        :type: str
        """

        self._ram_used_total = ram_used_total

    @property
    def ram_util_avg(self) -> 'float':
        """Gets the ram_util_avg of this V1GroupPodMetrics.  # noqa: E501


        :return: The ram_util_avg of this V1GroupPodMetrics.  # noqa: E501
        :rtype: float
        """
        return self._ram_util_avg

    @ram_util_avg.setter
    def ram_util_avg(self, ram_util_avg: 'float'):
        """Sets the ram_util_avg of this V1GroupPodMetrics.


        :param ram_util_avg: The ram_util_avg of this V1GroupPodMetrics.  # noqa: E501
        :type: float
        """

        self._ram_util_avg = ram_util_avg

    @property
    def timestamp(self) -> 'datetime':
        """Gets the timestamp of this V1GroupPodMetrics.  # noqa: E501


        :return: The timestamp of this V1GroupPodMetrics.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: 'datetime'):
        """Sets the timestamp of this V1GroupPodMetrics.


        :param timestamp: The timestamp of this V1GroupPodMetrics.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def vram_capacity_total_mib(self) -> 'str':
        """Gets the vram_capacity_total_mib of this V1GroupPodMetrics.  # noqa: E501


        :return: The vram_capacity_total_mib of this V1GroupPodMetrics.  # noqa: E501
        :rtype: str
        """
        return self._vram_capacity_total_mib

    @vram_capacity_total_mib.setter
    def vram_capacity_total_mib(self, vram_capacity_total_mib: 'str'):
        """Sets the vram_capacity_total_mib of this V1GroupPodMetrics.


        :param vram_capacity_total_mib: The vram_capacity_total_mib of this V1GroupPodMetrics.  # noqa: E501
        :type: str
        """

        self._vram_capacity_total_mib = vram_capacity_total_mib

    @property
    def vram_limit_total_mib(self) -> 'str':
        """Gets the vram_limit_total_mib of this V1GroupPodMetrics.  # noqa: E501


        :return: The vram_limit_total_mib of this V1GroupPodMetrics.  # noqa: E501
        :rtype: str
        """
        return self._vram_limit_total_mib

    @vram_limit_total_mib.setter
    def vram_limit_total_mib(self, vram_limit_total_mib: 'str'):
        """Sets the vram_limit_total_mib of this V1GroupPodMetrics.


        :param vram_limit_total_mib: The vram_limit_total_mib of this V1GroupPodMetrics.  # noqa: E501
        :type: str
        """

        self._vram_limit_total_mib = vram_limit_total_mib

    @property
    def vram_read_write_util_avg(self) -> 'float':
        """Gets the vram_read_write_util_avg of this V1GroupPodMetrics.  # noqa: E501


        :return: The vram_read_write_util_avg of this V1GroupPodMetrics.  # noqa: E501
        :rtype: float
        """
        return self._vram_read_write_util_avg

    @vram_read_write_util_avg.setter
    def vram_read_write_util_avg(self, vram_read_write_util_avg: 'float'):
        """Sets the vram_read_write_util_avg of this V1GroupPodMetrics.


        :param vram_read_write_util_avg: The vram_read_write_util_avg of this V1GroupPodMetrics.  # noqa: E501
        :type: float
        """

        self._vram_read_write_util_avg = vram_read_write_util_avg

    @property
    def vram_requested_total_mib(self) -> 'str':
        """Gets the vram_requested_total_mib of this V1GroupPodMetrics.  # noqa: E501


        :return: The vram_requested_total_mib of this V1GroupPodMetrics.  # noqa: E501
        :rtype: str
        """
        return self._vram_requested_total_mib

    @vram_requested_total_mib.setter
    def vram_requested_total_mib(self, vram_requested_total_mib: 'str'):
        """Sets the vram_requested_total_mib of this V1GroupPodMetrics.


        :param vram_requested_total_mib: The vram_requested_total_mib of this V1GroupPodMetrics.  # noqa: E501
        :type: str
        """

        self._vram_requested_total_mib = vram_requested_total_mib

    @property
    def vram_used_total_mib(self) -> 'str':
        """Gets the vram_used_total_mib of this V1GroupPodMetrics.  # noqa: E501


        :return: The vram_used_total_mib of this V1GroupPodMetrics.  # noqa: E501
        :rtype: str
        """
        return self._vram_used_total_mib

    @vram_used_total_mib.setter
    def vram_used_total_mib(self, vram_used_total_mib: 'str'):
        """Sets the vram_used_total_mib of this V1GroupPodMetrics.


        :param vram_used_total_mib: The vram_used_total_mib of this V1GroupPodMetrics.  # noqa: E501
        :type: str
        """

        self._vram_used_total_mib = vram_used_total_mib

    @property
    def vram_util_avg(self) -> 'float':
        """Gets the vram_util_avg of this V1GroupPodMetrics.  # noqa: E501


        :return: The vram_util_avg of this V1GroupPodMetrics.  # noqa: E501
        :rtype: float
        """
        return self._vram_util_avg

    @vram_util_avg.setter
    def vram_util_avg(self, vram_util_avg: 'float'):
        """Sets the vram_util_avg of this V1GroupPodMetrics.


        :param vram_util_avg: The vram_util_avg of this V1GroupPodMetrics.  # noqa: E501
        :type: float
        """

        self._vram_util_avg = vram_util_avg

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1GroupPodMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1GroupPodMetrics') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1GroupPodMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1GroupPodMetrics') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
