# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1Experiment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'default_variant': 'str',
        'end_date': 'datetime',
        'exposure': 'float',
        'id': 'str',
        'name': 'str',
        'seed': 'str',
        'start_date': 'datetime',
        'updated_at': 'datetime',
        'variants': 'list[str]',
        'weights': 'list[int]',
        'winner': 'str'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'default_variant': 'defaultVariant',
        'end_date': 'endDate',
        'exposure': 'exposure',
        'id': 'id',
        'name': 'name',
        'seed': 'seed',
        'start_date': 'startDate',
        'updated_at': 'updatedAt',
        'variants': 'variants',
        'weights': 'weights',
        'winner': 'winner'
    }

    def __init__(self, created_at: 'datetime' =None, default_variant: 'str' =None, end_date: 'datetime' =None, exposure: 'float' =None, id: 'str' =None, name: 'str' =None, seed: 'str' =None, start_date: 'datetime' =None, updated_at: 'datetime' =None, variants: 'list[str]' =None, weights: 'list[int]' =None, winner: 'str' =None):  # noqa: E501
        """V1Experiment - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._default_variant = None
        self._end_date = None
        self._exposure = None
        self._id = None
        self._name = None
        self._seed = None
        self._start_date = None
        self._updated_at = None
        self._variants = None
        self._weights = None
        self._winner = None
        self.discriminator = None
        if created_at is not None:
            self.created_at = created_at
        if default_variant is not None:
            self.default_variant = default_variant
        if end_date is not None:
            self.end_date = end_date
        if exposure is not None:
            self.exposure = exposure
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if seed is not None:
            self.seed = seed
        if start_date is not None:
            self.start_date = start_date
        if updated_at is not None:
            self.updated_at = updated_at
        if variants is not None:
            self.variants = variants
        if weights is not None:
            self.weights = weights
        if winner is not None:
            self.winner = winner

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this V1Experiment.  # noqa: E501


        :return: The created_at of this V1Experiment.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this V1Experiment.


        :param created_at: The created_at of this V1Experiment.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def default_variant(self) -> 'str':
        """Gets the default_variant of this V1Experiment.  # noqa: E501


        :return: The default_variant of this V1Experiment.  # noqa: E501
        :rtype: str
        """
        return self._default_variant

    @default_variant.setter
    def default_variant(self, default_variant: 'str'):
        """Sets the default_variant of this V1Experiment.


        :param default_variant: The default_variant of this V1Experiment.  # noqa: E501
        :type: str
        """

        self._default_variant = default_variant

    @property
    def end_date(self) -> 'datetime':
        """Gets the end_date of this V1Experiment.  # noqa: E501


        :return: The end_date of this V1Experiment.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date: 'datetime'):
        """Sets the end_date of this V1Experiment.


        :param end_date: The end_date of this V1Experiment.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def exposure(self) -> 'float':
        """Gets the exposure of this V1Experiment.  # noqa: E501


        :return: The exposure of this V1Experiment.  # noqa: E501
        :rtype: float
        """
        return self._exposure

    @exposure.setter
    def exposure(self, exposure: 'float'):
        """Sets the exposure of this V1Experiment.


        :param exposure: The exposure of this V1Experiment.  # noqa: E501
        :type: float
        """

        self._exposure = exposure

    @property
    def id(self) -> 'str':
        """Gets the id of this V1Experiment.  # noqa: E501


        :return: The id of this V1Experiment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1Experiment.


        :param id: The id of this V1Experiment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self) -> 'str':
        """Gets the name of this V1Experiment.  # noqa: E501


        :return: The name of this V1Experiment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1Experiment.


        :param name: The name of this V1Experiment.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def seed(self) -> 'str':
        """Gets the seed of this V1Experiment.  # noqa: E501


        :return: The seed of this V1Experiment.  # noqa: E501
        :rtype: str
        """
        return self._seed

    @seed.setter
    def seed(self, seed: 'str'):
        """Sets the seed of this V1Experiment.


        :param seed: The seed of this V1Experiment.  # noqa: E501
        :type: str
        """

        self._seed = seed

    @property
    def start_date(self) -> 'datetime':
        """Gets the start_date of this V1Experiment.  # noqa: E501


        :return: The start_date of this V1Experiment.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date: 'datetime'):
        """Sets the start_date of this V1Experiment.


        :param start_date: The start_date of this V1Experiment.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def updated_at(self) -> 'datetime':
        """Gets the updated_at of this V1Experiment.  # noqa: E501


        :return: The updated_at of this V1Experiment.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: 'datetime'):
        """Sets the updated_at of this V1Experiment.


        :param updated_at: The updated_at of this V1Experiment.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def variants(self) -> 'list[str]':
        """Gets the variants of this V1Experiment.  # noqa: E501


        :return: The variants of this V1Experiment.  # noqa: E501
        :rtype: list[str]
        """
        return self._variants

    @variants.setter
    def variants(self, variants: 'list[str]'):
        """Sets the variants of this V1Experiment.


        :param variants: The variants of this V1Experiment.  # noqa: E501
        :type: list[str]
        """

        self._variants = variants

    @property
    def weights(self) -> 'list[int]':
        """Gets the weights of this V1Experiment.  # noqa: E501


        :return: The weights of this V1Experiment.  # noqa: E501
        :rtype: list[int]
        """
        return self._weights

    @weights.setter
    def weights(self, weights: 'list[int]'):
        """Sets the weights of this V1Experiment.


        :param weights: The weights of this V1Experiment.  # noqa: E501
        :type: list[int]
        """

        self._weights = weights

    @property
    def winner(self) -> 'str':
        """Gets the winner of this V1Experiment.  # noqa: E501


        :return: The winner of this V1Experiment.  # noqa: E501
        :rtype: str
        """
        return self._winner

    @winner.setter
    def winner(self, winner: 'str'):
        """Sets the winner of this V1Experiment.


        :param winner: The winner of this V1Experiment.  # noqa: E501
        :type: str
        """

        self._winner = winner

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1Experiment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1Experiment') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Experiment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1Experiment') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
