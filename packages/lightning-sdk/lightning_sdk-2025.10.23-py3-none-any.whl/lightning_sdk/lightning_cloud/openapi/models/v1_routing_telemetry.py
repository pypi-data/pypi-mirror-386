# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1RoutingTelemetry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'captured': 'bool',
        'duration': 'float',
        'id': 'str',
        'method': 'str',
        'path': 'str',
        'received_at': 'datetime',
        'request_body_size': 'float',
        'resource_id': 'str',
        'response_body_size': 'float',
        'status_code': 'int'
    }

    attribute_map = {
        'captured': 'captured',
        'duration': 'duration',
        'id': 'id',
        'method': 'method',
        'path': 'path',
        'received_at': 'receivedAt',
        'request_body_size': 'requestBodySize',
        'resource_id': 'resourceId',
        'response_body_size': 'responseBodySize',
        'status_code': 'statusCode'
    }

    def __init__(self, captured: 'bool' =None, duration: 'float' =None, id: 'str' =None, method: 'str' =None, path: 'str' =None, received_at: 'datetime' =None, request_body_size: 'float' =None, resource_id: 'str' =None, response_body_size: 'float' =None, status_code: 'int' =None):  # noqa: E501
        """V1RoutingTelemetry - a model defined in Swagger"""  # noqa: E501
        self._captured = None
        self._duration = None
        self._id = None
        self._method = None
        self._path = None
        self._received_at = None
        self._request_body_size = None
        self._resource_id = None
        self._response_body_size = None
        self._status_code = None
        self.discriminator = None
        if captured is not None:
            self.captured = captured
        if duration is not None:
            self.duration = duration
        if id is not None:
            self.id = id
        if method is not None:
            self.method = method
        if path is not None:
            self.path = path
        if received_at is not None:
            self.received_at = received_at
        if request_body_size is not None:
            self.request_body_size = request_body_size
        if resource_id is not None:
            self.resource_id = resource_id
        if response_body_size is not None:
            self.response_body_size = response_body_size
        if status_code is not None:
            self.status_code = status_code

    @property
    def captured(self) -> 'bool':
        """Gets the captured of this V1RoutingTelemetry.  # noqa: E501


        :return: The captured of this V1RoutingTelemetry.  # noqa: E501
        :rtype: bool
        """
        return self._captured

    @captured.setter
    def captured(self, captured: 'bool'):
        """Sets the captured of this V1RoutingTelemetry.


        :param captured: The captured of this V1RoutingTelemetry.  # noqa: E501
        :type: bool
        """

        self._captured = captured

    @property
    def duration(self) -> 'float':
        """Gets the duration of this V1RoutingTelemetry.  # noqa: E501


        :return: The duration of this V1RoutingTelemetry.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration: 'float'):
        """Sets the duration of this V1RoutingTelemetry.


        :param duration: The duration of this V1RoutingTelemetry.  # noqa: E501
        :type: float
        """

        self._duration = duration

    @property
    def id(self) -> 'str':
        """Gets the id of this V1RoutingTelemetry.  # noqa: E501


        :return: The id of this V1RoutingTelemetry.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1RoutingTelemetry.


        :param id: The id of this V1RoutingTelemetry.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def method(self) -> 'str':
        """Gets the method of this V1RoutingTelemetry.  # noqa: E501


        :return: The method of this V1RoutingTelemetry.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method: 'str'):
        """Sets the method of this V1RoutingTelemetry.


        :param method: The method of this V1RoutingTelemetry.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def path(self) -> 'str':
        """Gets the path of this V1RoutingTelemetry.  # noqa: E501


        :return: The path of this V1RoutingTelemetry.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: 'str'):
        """Sets the path of this V1RoutingTelemetry.


        :param path: The path of this V1RoutingTelemetry.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def received_at(self) -> 'datetime':
        """Gets the received_at of this V1RoutingTelemetry.  # noqa: E501


        :return: The received_at of this V1RoutingTelemetry.  # noqa: E501
        :rtype: datetime
        """
        return self._received_at

    @received_at.setter
    def received_at(self, received_at: 'datetime'):
        """Sets the received_at of this V1RoutingTelemetry.


        :param received_at: The received_at of this V1RoutingTelemetry.  # noqa: E501
        :type: datetime
        """

        self._received_at = received_at

    @property
    def request_body_size(self) -> 'float':
        """Gets the request_body_size of this V1RoutingTelemetry.  # noqa: E501


        :return: The request_body_size of this V1RoutingTelemetry.  # noqa: E501
        :rtype: float
        """
        return self._request_body_size

    @request_body_size.setter
    def request_body_size(self, request_body_size: 'float'):
        """Sets the request_body_size of this V1RoutingTelemetry.


        :param request_body_size: The request_body_size of this V1RoutingTelemetry.  # noqa: E501
        :type: float
        """

        self._request_body_size = request_body_size

    @property
    def resource_id(self) -> 'str':
        """Gets the resource_id of this V1RoutingTelemetry.  # noqa: E501


        :return: The resource_id of this V1RoutingTelemetry.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id: 'str'):
        """Sets the resource_id of this V1RoutingTelemetry.


        :param resource_id: The resource_id of this V1RoutingTelemetry.  # noqa: E501
        :type: str
        """

        self._resource_id = resource_id

    @property
    def response_body_size(self) -> 'float':
        """Gets the response_body_size of this V1RoutingTelemetry.  # noqa: E501


        :return: The response_body_size of this V1RoutingTelemetry.  # noqa: E501
        :rtype: float
        """
        return self._response_body_size

    @response_body_size.setter
    def response_body_size(self, response_body_size: 'float'):
        """Sets the response_body_size of this V1RoutingTelemetry.


        :param response_body_size: The response_body_size of this V1RoutingTelemetry.  # noqa: E501
        :type: float
        """

        self._response_body_size = response_body_size

    @property
    def status_code(self) -> 'int':
        """Gets the status_code of this V1RoutingTelemetry.  # noqa: E501


        :return: The status_code of this V1RoutingTelemetry.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code: 'int'):
        """Sets the status_code of this V1RoutingTelemetry.


        :param status_code: The status_code of this V1RoutingTelemetry.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1RoutingTelemetry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1RoutingTelemetry') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1RoutingTelemetry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1RoutingTelemetry') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
