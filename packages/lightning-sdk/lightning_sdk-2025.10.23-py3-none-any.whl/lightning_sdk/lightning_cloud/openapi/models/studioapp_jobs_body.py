# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class StudioappJobsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app': 'V1StudioJobApp',
        'auto_start': 'bool',
        'cloudspace_id': 'str',
        'command': 'str',
        'name': 'str',
        'port': 'str',
        'terminal_session_id': 'str'
    }

    attribute_map = {
        'app': 'app',
        'auto_start': 'autoStart',
        'cloudspace_id': 'cloudspaceId',
        'command': 'command',
        'name': 'name',
        'port': 'port',
        'terminal_session_id': 'terminalSessionId'
    }

    def __init__(self, app: 'V1StudioJobApp' =None, auto_start: 'bool' =None, cloudspace_id: 'str' =None, command: 'str' =None, name: 'str' =None, port: 'str' =None, terminal_session_id: 'str' =None):  # noqa: E501
        """StudioappJobsBody - a model defined in Swagger"""  # noqa: E501
        self._app = None
        self._auto_start = None
        self._cloudspace_id = None
        self._command = None
        self._name = None
        self._port = None
        self._terminal_session_id = None
        self.discriminator = None
        if app is not None:
            self.app = app
        if auto_start is not None:
            self.auto_start = auto_start
        if cloudspace_id is not None:
            self.cloudspace_id = cloudspace_id
        if command is not None:
            self.command = command
        if name is not None:
            self.name = name
        if port is not None:
            self.port = port
        if terminal_session_id is not None:
            self.terminal_session_id = terminal_session_id

    @property
    def app(self) -> 'V1StudioJobApp':
        """Gets the app of this StudioappJobsBody.  # noqa: E501


        :return: The app of this StudioappJobsBody.  # noqa: E501
        :rtype: V1StudioJobApp
        """
        return self._app

    @app.setter
    def app(self, app: 'V1StudioJobApp'):
        """Sets the app of this StudioappJobsBody.


        :param app: The app of this StudioappJobsBody.  # noqa: E501
        :type: V1StudioJobApp
        """

        self._app = app

    @property
    def auto_start(self) -> 'bool':
        """Gets the auto_start of this StudioappJobsBody.  # noqa: E501


        :return: The auto_start of this StudioappJobsBody.  # noqa: E501
        :rtype: bool
        """
        return self._auto_start

    @auto_start.setter
    def auto_start(self, auto_start: 'bool'):
        """Sets the auto_start of this StudioappJobsBody.


        :param auto_start: The auto_start of this StudioappJobsBody.  # noqa: E501
        :type: bool
        """

        self._auto_start = auto_start

    @property
    def cloudspace_id(self) -> 'str':
        """Gets the cloudspace_id of this StudioappJobsBody.  # noqa: E501


        :return: The cloudspace_id of this StudioappJobsBody.  # noqa: E501
        :rtype: str
        """
        return self._cloudspace_id

    @cloudspace_id.setter
    def cloudspace_id(self, cloudspace_id: 'str'):
        """Sets the cloudspace_id of this StudioappJobsBody.


        :param cloudspace_id: The cloudspace_id of this StudioappJobsBody.  # noqa: E501
        :type: str
        """

        self._cloudspace_id = cloudspace_id

    @property
    def command(self) -> 'str':
        """Gets the command of this StudioappJobsBody.  # noqa: E501


        :return: The command of this StudioappJobsBody.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command: 'str'):
        """Sets the command of this StudioappJobsBody.


        :param command: The command of this StudioappJobsBody.  # noqa: E501
        :type: str
        """

        self._command = command

    @property
    def name(self) -> 'str':
        """Gets the name of this StudioappJobsBody.  # noqa: E501


        :return: The name of this StudioappJobsBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this StudioappJobsBody.


        :param name: The name of this StudioappJobsBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def port(self) -> 'str':
        """Gets the port of this StudioappJobsBody.  # noqa: E501


        :return: The port of this StudioappJobsBody.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port: 'str'):
        """Sets the port of this StudioappJobsBody.


        :param port: The port of this StudioappJobsBody.  # noqa: E501
        :type: str
        """

        self._port = port

    @property
    def terminal_session_id(self) -> 'str':
        """Gets the terminal_session_id of this StudioappJobsBody.  # noqa: E501


        :return: The terminal_session_id of this StudioappJobsBody.  # noqa: E501
        :rtype: str
        """
        return self._terminal_session_id

    @terminal_session_id.setter
    def terminal_session_id(self, terminal_session_id: 'str'):
        """Sets the terminal_session_id of this StudioappJobsBody.


        :param terminal_session_id: The terminal_session_id of this StudioappJobsBody.  # noqa: E501
        :type: str
        """

        self._terminal_session_id = terminal_session_id

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StudioappJobsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'StudioappJobsBody') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, StudioappJobsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'StudioappJobsBody') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
