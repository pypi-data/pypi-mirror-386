# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1LitRegistryProject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_id': 'str',
        'id': 'int',
        'lit_reg_project_name': 'str',
        'project_id': 'str',
        'repo_count': 'str',
        'repositories': 'list[V1LitRepository]'
    }

    attribute_map = {
        'cluster_id': 'clusterId',
        'id': 'id',
        'lit_reg_project_name': 'litRegProjectName',
        'project_id': 'projectId',
        'repo_count': 'repoCount',
        'repositories': 'repositories'
    }

    def __init__(self, cluster_id: 'str' =None, id: 'int' =None, lit_reg_project_name: 'str' =None, project_id: 'str' =None, repo_count: 'str' =None, repositories: 'list[V1LitRepository]' =None):  # noqa: E501
        """V1LitRegistryProject - a model defined in Swagger"""  # noqa: E501
        self._cluster_id = None
        self._id = None
        self._lit_reg_project_name = None
        self._project_id = None
        self._repo_count = None
        self._repositories = None
        self.discriminator = None
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if id is not None:
            self.id = id
        if lit_reg_project_name is not None:
            self.lit_reg_project_name = lit_reg_project_name
        if project_id is not None:
            self.project_id = project_id
        if repo_count is not None:
            self.repo_count = repo_count
        if repositories is not None:
            self.repositories = repositories

    @property
    def cluster_id(self) -> 'str':
        """Gets the cluster_id of this V1LitRegistryProject.  # noqa: E501


        :return: The cluster_id of this V1LitRegistryProject.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id: 'str'):
        """Sets the cluster_id of this V1LitRegistryProject.


        :param cluster_id: The cluster_id of this V1LitRegistryProject.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def id(self) -> 'int':
        """Gets the id of this V1LitRegistryProject.  # noqa: E501

        This is the litcr project ID.  # noqa: E501

        :return: The id of this V1LitRegistryProject.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: 'int'):
        """Sets the id of this V1LitRegistryProject.

        This is the litcr project ID.  # noqa: E501

        :param id: The id of this V1LitRegistryProject.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def lit_reg_project_name(self) -> 'str':
        """Gets the lit_reg_project_name of this V1LitRegistryProject.  # noqa: E501


        :return: The lit_reg_project_name of this V1LitRegistryProject.  # noqa: E501
        :rtype: str
        """
        return self._lit_reg_project_name

    @lit_reg_project_name.setter
    def lit_reg_project_name(self, lit_reg_project_name: 'str'):
        """Sets the lit_reg_project_name of this V1LitRegistryProject.


        :param lit_reg_project_name: The lit_reg_project_name of this V1LitRegistryProject.  # noqa: E501
        :type: str
        """

        self._lit_reg_project_name = lit_reg_project_name

    @property
    def project_id(self) -> 'str':
        """Gets the project_id of this V1LitRegistryProject.  # noqa: E501

        This is the lightning AI teamspace project ID.  # noqa: E501

        :return: The project_id of this V1LitRegistryProject.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: 'str'):
        """Sets the project_id of this V1LitRegistryProject.

        This is the lightning AI teamspace project ID.  # noqa: E501

        :param project_id: The project_id of this V1LitRegistryProject.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def repo_count(self) -> 'str':
        """Gets the repo_count of this V1LitRegistryProject.  # noqa: E501

        This is how many repositories exist in a project. This will be the same as the number of repository objects we return.  # noqa: E501

        :return: The repo_count of this V1LitRegistryProject.  # noqa: E501
        :rtype: str
        """
        return self._repo_count

    @repo_count.setter
    def repo_count(self, repo_count: 'str'):
        """Sets the repo_count of this V1LitRegistryProject.

        This is how many repositories exist in a project. This will be the same as the number of repository objects we return.  # noqa: E501

        :param repo_count: The repo_count of this V1LitRegistryProject.  # noqa: E501
        :type: str
        """

        self._repo_count = repo_count

    @property
    def repositories(self) -> 'list[V1LitRepository]':
        """Gets the repositories of this V1LitRegistryProject.  # noqa: E501

        This is the list of repositories that belong to a project in our registry.  # noqa: E501

        :return: The repositories of this V1LitRegistryProject.  # noqa: E501
        :rtype: list[V1LitRepository]
        """
        return self._repositories

    @repositories.setter
    def repositories(self, repositories: 'list[V1LitRepository]'):
        """Sets the repositories of this V1LitRegistryProject.

        This is the list of repositories that belong to a project in our registry.  # noqa: E501

        :param repositories: The repositories of this V1LitRegistryProject.  # noqa: E501
        :type: list[V1LitRepository]
        """

        self._repositories = repositories

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1LitRegistryProject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1LitRegistryProject') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1LitRegistryProject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1LitRegistryProject') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
