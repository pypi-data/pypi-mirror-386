# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1GoogleCloudDirectV1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bucket_name': 'str',
        'compute_project_role': 'str',
        'compute_service_account_email': 'str',
        'credentials_secret_id': 'str',
        'credentials_service_account_email': 'str',
        'custom_subnet_mode': 'bool',
        'filestore_firewall_mode_enabled': 'bool',
        'inventory_dataset': 'str',
        'inventory_table': 'str',
        'primary_region': 'str',
        'project_id': 'str',
        'project_sa_enabled': 'bool',
        'regions': 'list[str]',
        'service_account_email': 'str',
        'source_cidr_ips': 'list[str]',
        'subnets': 'list[V1SubnetSpec]',
        'vpcs': 'list[V1GCPDirectVPC]'
    }

    attribute_map = {
        'bucket_name': 'bucketName',
        'compute_project_role': 'computeProjectRole',
        'compute_service_account_email': 'computeServiceAccountEmail',
        'credentials_secret_id': 'credentialsSecretId',
        'credentials_service_account_email': 'credentialsServiceAccountEmail',
        'custom_subnet_mode': 'customSubnetMode',
        'filestore_firewall_mode_enabled': 'filestoreFirewallModeEnabled',
        'inventory_dataset': 'inventoryDataset',
        'inventory_table': 'inventoryTable',
        'primary_region': 'primaryRegion',
        'project_id': 'projectId',
        'project_sa_enabled': 'projectSaEnabled',
        'regions': 'regions',
        'service_account_email': 'serviceAccountEmail',
        'source_cidr_ips': 'sourceCidrIps',
        'subnets': 'subnets',
        'vpcs': 'vpcs'
    }

    def __init__(self, bucket_name: 'str' =None, compute_project_role: 'str' =None, compute_service_account_email: 'str' =None, credentials_secret_id: 'str' =None, credentials_service_account_email: 'str' =None, custom_subnet_mode: 'bool' =None, filestore_firewall_mode_enabled: 'bool' =None, inventory_dataset: 'str' =None, inventory_table: 'str' =None, primary_region: 'str' =None, project_id: 'str' =None, project_sa_enabled: 'bool' =None, regions: 'list[str]' =None, service_account_email: 'str' =None, source_cidr_ips: 'list[str]' =None, subnets: 'list[V1SubnetSpec]' =None, vpcs: 'list[V1GCPDirectVPC]' =None):  # noqa: E501
        """V1GoogleCloudDirectV1 - a model defined in Swagger"""  # noqa: E501
        self._bucket_name = None
        self._compute_project_role = None
        self._compute_service_account_email = None
        self._credentials_secret_id = None
        self._credentials_service_account_email = None
        self._custom_subnet_mode = None
        self._filestore_firewall_mode_enabled = None
        self._inventory_dataset = None
        self._inventory_table = None
        self._primary_region = None
        self._project_id = None
        self._project_sa_enabled = None
        self._regions = None
        self._service_account_email = None
        self._source_cidr_ips = None
        self._subnets = None
        self._vpcs = None
        self.discriminator = None
        if bucket_name is not None:
            self.bucket_name = bucket_name
        if compute_project_role is not None:
            self.compute_project_role = compute_project_role
        if compute_service_account_email is not None:
            self.compute_service_account_email = compute_service_account_email
        if credentials_secret_id is not None:
            self.credentials_secret_id = credentials_secret_id
        if credentials_service_account_email is not None:
            self.credentials_service_account_email = credentials_service_account_email
        if custom_subnet_mode is not None:
            self.custom_subnet_mode = custom_subnet_mode
        if filestore_firewall_mode_enabled is not None:
            self.filestore_firewall_mode_enabled = filestore_firewall_mode_enabled
        if inventory_dataset is not None:
            self.inventory_dataset = inventory_dataset
        if inventory_table is not None:
            self.inventory_table = inventory_table
        if primary_region is not None:
            self.primary_region = primary_region
        if project_id is not None:
            self.project_id = project_id
        if project_sa_enabled is not None:
            self.project_sa_enabled = project_sa_enabled
        if regions is not None:
            self.regions = regions
        if service_account_email is not None:
            self.service_account_email = service_account_email
        if source_cidr_ips is not None:
            self.source_cidr_ips = source_cidr_ips
        if subnets is not None:
            self.subnets = subnets
        if vpcs is not None:
            self.vpcs = vpcs

    @property
    def bucket_name(self) -> 'str':
        """Gets the bucket_name of this V1GoogleCloudDirectV1.  # noqa: E501


        :return: The bucket_name of this V1GoogleCloudDirectV1.  # noqa: E501
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name: 'str'):
        """Sets the bucket_name of this V1GoogleCloudDirectV1.


        :param bucket_name: The bucket_name of this V1GoogleCloudDirectV1.  # noqa: E501
        :type: str
        """

        self._bucket_name = bucket_name

    @property
    def compute_project_role(self) -> 'str':
        """Gets the compute_project_role of this V1GoogleCloudDirectV1.  # noqa: E501


        :return: The compute_project_role of this V1GoogleCloudDirectV1.  # noqa: E501
        :rtype: str
        """
        return self._compute_project_role

    @compute_project_role.setter
    def compute_project_role(self, compute_project_role: 'str'):
        """Sets the compute_project_role of this V1GoogleCloudDirectV1.


        :param compute_project_role: The compute_project_role of this V1GoogleCloudDirectV1.  # noqa: E501
        :type: str
        """

        self._compute_project_role = compute_project_role

    @property
    def compute_service_account_email(self) -> 'str':
        """Gets the compute_service_account_email of this V1GoogleCloudDirectV1.  # noqa: E501


        :return: The compute_service_account_email of this V1GoogleCloudDirectV1.  # noqa: E501
        :rtype: str
        """
        return self._compute_service_account_email

    @compute_service_account_email.setter
    def compute_service_account_email(self, compute_service_account_email: 'str'):
        """Sets the compute_service_account_email of this V1GoogleCloudDirectV1.


        :param compute_service_account_email: The compute_service_account_email of this V1GoogleCloudDirectV1.  # noqa: E501
        :type: str
        """

        self._compute_service_account_email = compute_service_account_email

    @property
    def credentials_secret_id(self) -> 'str':
        """Gets the credentials_secret_id of this V1GoogleCloudDirectV1.  # noqa: E501

        ID of the secret that contains the credentials. This secret is created through the GCP BYOC setup process.  # noqa: E501

        :return: The credentials_secret_id of this V1GoogleCloudDirectV1.  # noqa: E501
        :rtype: str
        """
        return self._credentials_secret_id

    @credentials_secret_id.setter
    def credentials_secret_id(self, credentials_secret_id: 'str'):
        """Sets the credentials_secret_id of this V1GoogleCloudDirectV1.

        ID of the secret that contains the credentials. This secret is created through the GCP BYOC setup process.  # noqa: E501

        :param credentials_secret_id: The credentials_secret_id of this V1GoogleCloudDirectV1.  # noqa: E501
        :type: str
        """

        self._credentials_secret_id = credentials_secret_id

    @property
    def credentials_service_account_email(self) -> 'str':
        """Gets the credentials_service_account_email of this V1GoogleCloudDirectV1.  # noqa: E501


        :return: The credentials_service_account_email of this V1GoogleCloudDirectV1.  # noqa: E501
        :rtype: str
        """
        return self._credentials_service_account_email

    @credentials_service_account_email.setter
    def credentials_service_account_email(self, credentials_service_account_email: 'str'):
        """Sets the credentials_service_account_email of this V1GoogleCloudDirectV1.


        :param credentials_service_account_email: The credentials_service_account_email of this V1GoogleCloudDirectV1.  # noqa: E501
        :type: str
        """

        self._credentials_service_account_email = credentials_service_account_email

    @property
    def custom_subnet_mode(self) -> 'bool':
        """Gets the custom_subnet_mode of this V1GoogleCloudDirectV1.  # noqa: E501


        :return: The custom_subnet_mode of this V1GoogleCloudDirectV1.  # noqa: E501
        :rtype: bool
        """
        return self._custom_subnet_mode

    @custom_subnet_mode.setter
    def custom_subnet_mode(self, custom_subnet_mode: 'bool'):
        """Sets the custom_subnet_mode of this V1GoogleCloudDirectV1.


        :param custom_subnet_mode: The custom_subnet_mode of this V1GoogleCloudDirectV1.  # noqa: E501
        :type: bool
        """

        self._custom_subnet_mode = custom_subnet_mode

    @property
    def filestore_firewall_mode_enabled(self) -> 'bool':
        """Gets the filestore_firewall_mode_enabled of this V1GoogleCloudDirectV1.  # noqa: E501


        :return: The filestore_firewall_mode_enabled of this V1GoogleCloudDirectV1.  # noqa: E501
        :rtype: bool
        """
        return self._filestore_firewall_mode_enabled

    @filestore_firewall_mode_enabled.setter
    def filestore_firewall_mode_enabled(self, filestore_firewall_mode_enabled: 'bool'):
        """Sets the filestore_firewall_mode_enabled of this V1GoogleCloudDirectV1.


        :param filestore_firewall_mode_enabled: The filestore_firewall_mode_enabled of this V1GoogleCloudDirectV1.  # noqa: E501
        :type: bool
        """

        self._filestore_firewall_mode_enabled = filestore_firewall_mode_enabled

    @property
    def inventory_dataset(self) -> 'str':
        """Gets the inventory_dataset of this V1GoogleCloudDirectV1.  # noqa: E501


        :return: The inventory_dataset of this V1GoogleCloudDirectV1.  # noqa: E501
        :rtype: str
        """
        return self._inventory_dataset

    @inventory_dataset.setter
    def inventory_dataset(self, inventory_dataset: 'str'):
        """Sets the inventory_dataset of this V1GoogleCloudDirectV1.


        :param inventory_dataset: The inventory_dataset of this V1GoogleCloudDirectV1.  # noqa: E501
        :type: str
        """

        self._inventory_dataset = inventory_dataset

    @property
    def inventory_table(self) -> 'str':
        """Gets the inventory_table of this V1GoogleCloudDirectV1.  # noqa: E501


        :return: The inventory_table of this V1GoogleCloudDirectV1.  # noqa: E501
        :rtype: str
        """
        return self._inventory_table

    @inventory_table.setter
    def inventory_table(self, inventory_table: 'str'):
        """Sets the inventory_table of this V1GoogleCloudDirectV1.


        :param inventory_table: The inventory_table of this V1GoogleCloudDirectV1.  # noqa: E501
        :type: str
        """

        self._inventory_table = inventory_table

    @property
    def primary_region(self) -> 'str':
        """Gets the primary_region of this V1GoogleCloudDirectV1.  # noqa: E501


        :return: The primary_region of this V1GoogleCloudDirectV1.  # noqa: E501
        :rtype: str
        """
        return self._primary_region

    @primary_region.setter
    def primary_region(self, primary_region: 'str'):
        """Sets the primary_region of this V1GoogleCloudDirectV1.


        :param primary_region: The primary_region of this V1GoogleCloudDirectV1.  # noqa: E501
        :type: str
        """

        self._primary_region = primary_region

    @property
    def project_id(self) -> 'str':
        """Gets the project_id of this V1GoogleCloudDirectV1.  # noqa: E501


        :return: The project_id of this V1GoogleCloudDirectV1.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: 'str'):
        """Sets the project_id of this V1GoogleCloudDirectV1.


        :param project_id: The project_id of this V1GoogleCloudDirectV1.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def project_sa_enabled(self) -> 'bool':
        """Gets the project_sa_enabled of this V1GoogleCloudDirectV1.  # noqa: E501

        If enabled, we will set up and use (for compute machines) service accounts with fine-graned permissions, to allow access objects under the teamspace prefix only. This flag assumed to be removed once this is dogfooded well ehough.  # noqa: E501

        :return: The project_sa_enabled of this V1GoogleCloudDirectV1.  # noqa: E501
        :rtype: bool
        """
        return self._project_sa_enabled

    @project_sa_enabled.setter
    def project_sa_enabled(self, project_sa_enabled: 'bool'):
        """Sets the project_sa_enabled of this V1GoogleCloudDirectV1.

        If enabled, we will set up and use (for compute machines) service accounts with fine-graned permissions, to allow access objects under the teamspace prefix only. This flag assumed to be removed once this is dogfooded well ehough.  # noqa: E501

        :param project_sa_enabled: The project_sa_enabled of this V1GoogleCloudDirectV1.  # noqa: E501
        :type: bool
        """

        self._project_sa_enabled = project_sa_enabled

    @property
    def regions(self) -> 'list[str]':
        """Gets the regions of this V1GoogleCloudDirectV1.  # noqa: E501


        :return: The regions of this V1GoogleCloudDirectV1.  # noqa: E501
        :rtype: list[str]
        """
        return self._regions

    @regions.setter
    def regions(self, regions: 'list[str]'):
        """Sets the regions of this V1GoogleCloudDirectV1.


        :param regions: The regions of this V1GoogleCloudDirectV1.  # noqa: E501
        :type: list[str]
        """

        self._regions = regions

    @property
    def service_account_email(self) -> 'str':
        """Gets the service_account_email of this V1GoogleCloudDirectV1.  # noqa: E501


        :return: The service_account_email of this V1GoogleCloudDirectV1.  # noqa: E501
        :rtype: str
        """
        return self._service_account_email

    @service_account_email.setter
    def service_account_email(self, service_account_email: 'str'):
        """Sets the service_account_email of this V1GoogleCloudDirectV1.


        :param service_account_email: The service_account_email of this V1GoogleCloudDirectV1.  # noqa: E501
        :type: str
        """

        self._service_account_email = service_account_email

    @property
    def source_cidr_ips(self) -> 'list[str]':
        """Gets the source_cidr_ips of this V1GoogleCloudDirectV1.  # noqa: E501

        source_cidr_ips allows modifying default 0.0.0.0/0 source, so that it can only allow specific incoming traffic into the GCP instances. This should always include controlplane's IP address, otherwise it will not work.  # noqa: E501

        :return: The source_cidr_ips of this V1GoogleCloudDirectV1.  # noqa: E501
        :rtype: list[str]
        """
        return self._source_cidr_ips

    @source_cidr_ips.setter
    def source_cidr_ips(self, source_cidr_ips: 'list[str]'):
        """Sets the source_cidr_ips of this V1GoogleCloudDirectV1.

        source_cidr_ips allows modifying default 0.0.0.0/0 source, so that it can only allow specific incoming traffic into the GCP instances. This should always include controlplane's IP address, otherwise it will not work.  # noqa: E501

        :param source_cidr_ips: The source_cidr_ips of this V1GoogleCloudDirectV1.  # noqa: E501
        :type: list[str]
        """

        self._source_cidr_ips = source_cidr_ips

    @property
    def subnets(self) -> 'list[V1SubnetSpec]':
        """Gets the subnets of this V1GoogleCloudDirectV1.  # noqa: E501


        :return: The subnets of this V1GoogleCloudDirectV1.  # noqa: E501
        :rtype: list[V1SubnetSpec]
        """
        return self._subnets

    @subnets.setter
    def subnets(self, subnets: 'list[V1SubnetSpec]'):
        """Sets the subnets of this V1GoogleCloudDirectV1.


        :param subnets: The subnets of this V1GoogleCloudDirectV1.  # noqa: E501
        :type: list[V1SubnetSpec]
        """

        self._subnets = subnets

    @property
    def vpcs(self) -> 'list[V1GCPDirectVPC]':
        """Gets the vpcs of this V1GoogleCloudDirectV1.  # noqa: E501


        :return: The vpcs of this V1GoogleCloudDirectV1.  # noqa: E501
        :rtype: list[V1GCPDirectVPC]
        """
        return self._vpcs

    @vpcs.setter
    def vpcs(self, vpcs: 'list[V1GCPDirectVPC]'):
        """Sets the vpcs of this V1GoogleCloudDirectV1.


        :param vpcs: The vpcs of this V1GoogleCloudDirectV1.  # noqa: E501
        :type: list[V1GCPDirectVPC]
        """

        self._vpcs = vpcs

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1GoogleCloudDirectV1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1GoogleCloudDirectV1') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1GoogleCloudDirectV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1GoogleCloudDirectV1') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
