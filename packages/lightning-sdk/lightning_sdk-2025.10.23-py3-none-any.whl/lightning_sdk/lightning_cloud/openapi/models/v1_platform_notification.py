# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1PlatformNotification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_from': 'datetime',
        'date_to': 'datetime',
        'id': 'str',
        'message': 'str',
        'path': 'str',
        'severity': 'str',
        'title': 'str'
    }

    attribute_map = {
        'date_from': 'dateFrom',
        'date_to': 'dateTo',
        'id': 'id',
        'message': 'message',
        'path': 'path',
        'severity': 'severity',
        'title': 'title'
    }

    def __init__(self, date_from: 'datetime' =None, date_to: 'datetime' =None, id: 'str' =None, message: 'str' =None, path: 'str' =None, severity: 'str' =None, title: 'str' =None):  # noqa: E501
        """V1PlatformNotification - a model defined in Swagger"""  # noqa: E501
        self._date_from = None
        self._date_to = None
        self._id = None
        self._message = None
        self._path = None
        self._severity = None
        self._title = None
        self.discriminator = None
        if date_from is not None:
            self.date_from = date_from
        if date_to is not None:
            self.date_to = date_to
        if id is not None:
            self.id = id
        if message is not None:
            self.message = message
        if path is not None:
            self.path = path
        if severity is not None:
            self.severity = severity
        if title is not None:
            self.title = title

    @property
    def date_from(self) -> 'datetime':
        """Gets the date_from of this V1PlatformNotification.  # noqa: E501


        :return: The date_from of this V1PlatformNotification.  # noqa: E501
        :rtype: datetime
        """
        return self._date_from

    @date_from.setter
    def date_from(self, date_from: 'datetime'):
        """Sets the date_from of this V1PlatformNotification.


        :param date_from: The date_from of this V1PlatformNotification.  # noqa: E501
        :type: datetime
        """

        self._date_from = date_from

    @property
    def date_to(self) -> 'datetime':
        """Gets the date_to of this V1PlatformNotification.  # noqa: E501


        :return: The date_to of this V1PlatformNotification.  # noqa: E501
        :rtype: datetime
        """
        return self._date_to

    @date_to.setter
    def date_to(self, date_to: 'datetime'):
        """Sets the date_to of this V1PlatformNotification.


        :param date_to: The date_to of this V1PlatformNotification.  # noqa: E501
        :type: datetime
        """

        self._date_to = date_to

    @property
    def id(self) -> 'str':
        """Gets the id of this V1PlatformNotification.  # noqa: E501


        :return: The id of this V1PlatformNotification.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1PlatformNotification.


        :param id: The id of this V1PlatformNotification.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def message(self) -> 'str':
        """Gets the message of this V1PlatformNotification.  # noqa: E501


        :return: The message of this V1PlatformNotification.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: 'str'):
        """Sets the message of this V1PlatformNotification.


        :param message: The message of this V1PlatformNotification.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def path(self) -> 'str':
        """Gets the path of this V1PlatformNotification.  # noqa: E501


        :return: The path of this V1PlatformNotification.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: 'str'):
        """Sets the path of this V1PlatformNotification.


        :param path: The path of this V1PlatformNotification.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def severity(self) -> 'str':
        """Gets the severity of this V1PlatformNotification.  # noqa: E501


        :return: The severity of this V1PlatformNotification.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity: 'str'):
        """Sets the severity of this V1PlatformNotification.


        :param severity: The severity of this V1PlatformNotification.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def title(self) -> 'str':
        """Gets the title of this V1PlatformNotification.  # noqa: E501


        :return: The title of this V1PlatformNotification.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: 'str'):
        """Sets the title of this V1PlatformNotification.


        :param title: The title of this V1PlatformNotification.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1PlatformNotification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1PlatformNotification') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1PlatformNotification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1PlatformNotification') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
