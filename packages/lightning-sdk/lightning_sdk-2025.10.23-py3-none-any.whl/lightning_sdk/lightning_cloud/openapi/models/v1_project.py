# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1Project(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'abac_enabled': 'bool',
        'created_at': 'datetime',
        'creator_id': 'str',
        'current_storage_bytes': 'str',
        'description': 'str',
        'display_name': 'str',
        'free_storage_bytes': 'str',
        'id': 'str',
        'is_default': 'bool',
        'layout_config': 'list[V1ProjectTab]',
        'lock_out_uploads': 'bool',
        'name': 'str',
        'number_of_files_uploads': 'str',
        'owner_id': 'str',
        'owner_type': 'V1OwnerType',
        'private': 'bool',
        'project_settings': 'V1ProjectSettings',
        'quotas': 'V1Quotas',
        'requires_uploads_sync': 'bool',
        'total_size_uploads_bytes': 'str',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'abac_enabled': 'abacEnabled',
        'created_at': 'createdAt',
        'creator_id': 'creatorId',
        'current_storage_bytes': 'currentStorageBytes',
        'description': 'description',
        'display_name': 'displayName',
        'free_storage_bytes': 'freeStorageBytes',
        'id': 'id',
        'is_default': 'isDefault',
        'layout_config': 'layoutConfig',
        'lock_out_uploads': 'lockOutUploads',
        'name': 'name',
        'number_of_files_uploads': 'numberOfFilesUploads',
        'owner_id': 'ownerId',
        'owner_type': 'ownerType',
        'private': 'private',
        'project_settings': 'projectSettings',
        'quotas': 'quotas',
        'requires_uploads_sync': 'requiresUploadsSync',
        'total_size_uploads_bytes': 'totalSizeUploadsBytes',
        'updated_at': 'updatedAt'
    }

    def __init__(self, abac_enabled: 'bool' =None, created_at: 'datetime' =None, creator_id: 'str' =None, current_storage_bytes: 'str' =None, description: 'str' =None, display_name: 'str' =None, free_storage_bytes: 'str' =None, id: 'str' =None, is_default: 'bool' =None, layout_config: 'list[V1ProjectTab]' =None, lock_out_uploads: 'bool' =None, name: 'str' =None, number_of_files_uploads: 'str' =None, owner_id: 'str' =None, owner_type: 'V1OwnerType' =None, private: 'bool' =None, project_settings: 'V1ProjectSettings' =None, quotas: 'V1Quotas' =None, requires_uploads_sync: 'bool' =None, total_size_uploads_bytes: 'str' =None, updated_at: 'datetime' =None):  # noqa: E501
        """V1Project - a model defined in Swagger"""  # noqa: E501
        self._abac_enabled = None
        self._created_at = None
        self._creator_id = None
        self._current_storage_bytes = None
        self._description = None
        self._display_name = None
        self._free_storage_bytes = None
        self._id = None
        self._is_default = None
        self._layout_config = None
        self._lock_out_uploads = None
        self._name = None
        self._number_of_files_uploads = None
        self._owner_id = None
        self._owner_type = None
        self._private = None
        self._project_settings = None
        self._quotas = None
        self._requires_uploads_sync = None
        self._total_size_uploads_bytes = None
        self._updated_at = None
        self.discriminator = None
        if abac_enabled is not None:
            self.abac_enabled = abac_enabled
        if created_at is not None:
            self.created_at = created_at
        if creator_id is not None:
            self.creator_id = creator_id
        if current_storage_bytes is not None:
            self.current_storage_bytes = current_storage_bytes
        if description is not None:
            self.description = description
        if display_name is not None:
            self.display_name = display_name
        if free_storage_bytes is not None:
            self.free_storage_bytes = free_storage_bytes
        if id is not None:
            self.id = id
        if is_default is not None:
            self.is_default = is_default
        if layout_config is not None:
            self.layout_config = layout_config
        if lock_out_uploads is not None:
            self.lock_out_uploads = lock_out_uploads
        if name is not None:
            self.name = name
        if number_of_files_uploads is not None:
            self.number_of_files_uploads = number_of_files_uploads
        if owner_id is not None:
            self.owner_id = owner_id
        if owner_type is not None:
            self.owner_type = owner_type
        if private is not None:
            self.private = private
        if project_settings is not None:
            self.project_settings = project_settings
        if quotas is not None:
            self.quotas = quotas
        if requires_uploads_sync is not None:
            self.requires_uploads_sync = requires_uploads_sync
        if total_size_uploads_bytes is not None:
            self.total_size_uploads_bytes = total_size_uploads_bytes
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def abac_enabled(self) -> 'bool':
        """Gets the abac_enabled of this V1Project.  # noqa: E501


        :return: The abac_enabled of this V1Project.  # noqa: E501
        :rtype: bool
        """
        return self._abac_enabled

    @abac_enabled.setter
    def abac_enabled(self, abac_enabled: 'bool'):
        """Sets the abac_enabled of this V1Project.


        :param abac_enabled: The abac_enabled of this V1Project.  # noqa: E501
        :type: bool
        """

        self._abac_enabled = abac_enabled

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this V1Project.  # noqa: E501


        :return: The created_at of this V1Project.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this V1Project.


        :param created_at: The created_at of this V1Project.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def creator_id(self) -> 'str':
        """Gets the creator_id of this V1Project.  # noqa: E501


        :return: The creator_id of this V1Project.  # noqa: E501
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id: 'str'):
        """Sets the creator_id of this V1Project.


        :param creator_id: The creator_id of this V1Project.  # noqa: E501
        :type: str
        """

        self._creator_id = creator_id

    @property
    def current_storage_bytes(self) -> 'str':
        """Gets the current_storage_bytes of this V1Project.  # noqa: E501


        :return: The current_storage_bytes of this V1Project.  # noqa: E501
        :rtype: str
        """
        return self._current_storage_bytes

    @current_storage_bytes.setter
    def current_storage_bytes(self, current_storage_bytes: 'str'):
        """Sets the current_storage_bytes of this V1Project.


        :param current_storage_bytes: The current_storage_bytes of this V1Project.  # noqa: E501
        :type: str
        """

        self._current_storage_bytes = current_storage_bytes

    @property
    def description(self) -> 'str':
        """Gets the description of this V1Project.  # noqa: E501


        :return: The description of this V1Project.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: 'str'):
        """Sets the description of this V1Project.


        :param description: The description of this V1Project.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def display_name(self) -> 'str':
        """Gets the display_name of this V1Project.  # noqa: E501


        :return: The display_name of this V1Project.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: 'str'):
        """Sets the display_name of this V1Project.


        :param display_name: The display_name of this V1Project.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def free_storage_bytes(self) -> 'str':
        """Gets the free_storage_bytes of this V1Project.  # noqa: E501


        :return: The free_storage_bytes of this V1Project.  # noqa: E501
        :rtype: str
        """
        return self._free_storage_bytes

    @free_storage_bytes.setter
    def free_storage_bytes(self, free_storage_bytes: 'str'):
        """Sets the free_storage_bytes of this V1Project.


        :param free_storage_bytes: The free_storage_bytes of this V1Project.  # noqa: E501
        :type: str
        """

        self._free_storage_bytes = free_storage_bytes

    @property
    def id(self) -> 'str':
        """Gets the id of this V1Project.  # noqa: E501


        :return: The id of this V1Project.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1Project.


        :param id: The id of this V1Project.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_default(self) -> 'bool':
        """Gets the is_default of this V1Project.  # noqa: E501


        :return: The is_default of this V1Project.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default: 'bool'):
        """Sets the is_default of this V1Project.


        :param is_default: The is_default of this V1Project.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def layout_config(self) -> 'list[V1ProjectTab]':
        """Gets the layout_config of this V1Project.  # noqa: E501


        :return: The layout_config of this V1Project.  # noqa: E501
        :rtype: list[V1ProjectTab]
        """
        return self._layout_config

    @layout_config.setter
    def layout_config(self, layout_config: 'list[V1ProjectTab]'):
        """Sets the layout_config of this V1Project.


        :param layout_config: The layout_config of this V1Project.  # noqa: E501
        :type: list[V1ProjectTab]
        """

        self._layout_config = layout_config

    @property
    def lock_out_uploads(self) -> 'bool':
        """Gets the lock_out_uploads of this V1Project.  # noqa: E501


        :return: The lock_out_uploads of this V1Project.  # noqa: E501
        :rtype: bool
        """
        return self._lock_out_uploads

    @lock_out_uploads.setter
    def lock_out_uploads(self, lock_out_uploads: 'bool'):
        """Sets the lock_out_uploads of this V1Project.


        :param lock_out_uploads: The lock_out_uploads of this V1Project.  # noqa: E501
        :type: bool
        """

        self._lock_out_uploads = lock_out_uploads

    @property
    def name(self) -> 'str':
        """Gets the name of this V1Project.  # noqa: E501


        :return: The name of this V1Project.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1Project.


        :param name: The name of this V1Project.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def number_of_files_uploads(self) -> 'str':
        """Gets the number_of_files_uploads of this V1Project.  # noqa: E501


        :return: The number_of_files_uploads of this V1Project.  # noqa: E501
        :rtype: str
        """
        return self._number_of_files_uploads

    @number_of_files_uploads.setter
    def number_of_files_uploads(self, number_of_files_uploads: 'str'):
        """Sets the number_of_files_uploads of this V1Project.


        :param number_of_files_uploads: The number_of_files_uploads of this V1Project.  # noqa: E501
        :type: str
        """

        self._number_of_files_uploads = number_of_files_uploads

    @property
    def owner_id(self) -> 'str':
        """Gets the owner_id of this V1Project.  # noqa: E501


        :return: The owner_id of this V1Project.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id: 'str'):
        """Sets the owner_id of this V1Project.


        :param owner_id: The owner_id of this V1Project.  # noqa: E501
        :type: str
        """

        self._owner_id = owner_id

    @property
    def owner_type(self) -> 'V1OwnerType':
        """Gets the owner_type of this V1Project.  # noqa: E501


        :return: The owner_type of this V1Project.  # noqa: E501
        :rtype: V1OwnerType
        """
        return self._owner_type

    @owner_type.setter
    def owner_type(self, owner_type: 'V1OwnerType'):
        """Sets the owner_type of this V1Project.


        :param owner_type: The owner_type of this V1Project.  # noqa: E501
        :type: V1OwnerType
        """

        self._owner_type = owner_type

    @property
    def private(self) -> 'bool':
        """Gets the private of this V1Project.  # noqa: E501


        :return: The private of this V1Project.  # noqa: E501
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private: 'bool'):
        """Sets the private of this V1Project.


        :param private: The private of this V1Project.  # noqa: E501
        :type: bool
        """

        self._private = private

    @property
    def project_settings(self) -> 'V1ProjectSettings':
        """Gets the project_settings of this V1Project.  # noqa: E501


        :return: The project_settings of this V1Project.  # noqa: E501
        :rtype: V1ProjectSettings
        """
        return self._project_settings

    @project_settings.setter
    def project_settings(self, project_settings: 'V1ProjectSettings'):
        """Sets the project_settings of this V1Project.


        :param project_settings: The project_settings of this V1Project.  # noqa: E501
        :type: V1ProjectSettings
        """

        self._project_settings = project_settings

    @property
    def quotas(self) -> 'V1Quotas':
        """Gets the quotas of this V1Project.  # noqa: E501


        :return: The quotas of this V1Project.  # noqa: E501
        :rtype: V1Quotas
        """
        return self._quotas

    @quotas.setter
    def quotas(self, quotas: 'V1Quotas'):
        """Sets the quotas of this V1Project.


        :param quotas: The quotas of this V1Project.  # noqa: E501
        :type: V1Quotas
        """

        self._quotas = quotas

    @property
    def requires_uploads_sync(self) -> 'bool':
        """Gets the requires_uploads_sync of this V1Project.  # noqa: E501


        :return: The requires_uploads_sync of this V1Project.  # noqa: E501
        :rtype: bool
        """
        return self._requires_uploads_sync

    @requires_uploads_sync.setter
    def requires_uploads_sync(self, requires_uploads_sync: 'bool'):
        """Sets the requires_uploads_sync of this V1Project.


        :param requires_uploads_sync: The requires_uploads_sync of this V1Project.  # noqa: E501
        :type: bool
        """

        self._requires_uploads_sync = requires_uploads_sync

    @property
    def total_size_uploads_bytes(self) -> 'str':
        """Gets the total_size_uploads_bytes of this V1Project.  # noqa: E501


        :return: The total_size_uploads_bytes of this V1Project.  # noqa: E501
        :rtype: str
        """
        return self._total_size_uploads_bytes

    @total_size_uploads_bytes.setter
    def total_size_uploads_bytes(self, total_size_uploads_bytes: 'str'):
        """Sets the total_size_uploads_bytes of this V1Project.


        :param total_size_uploads_bytes: The total_size_uploads_bytes of this V1Project.  # noqa: E501
        :type: str
        """

        self._total_size_uploads_bytes = total_size_uploads_bytes

    @property
    def updated_at(self) -> 'datetime':
        """Gets the updated_at of this V1Project.  # noqa: E501


        :return: The updated_at of this V1Project.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: 'datetime'):
        """Sets the updated_at of this V1Project.


        :param updated_at: The updated_at of this V1Project.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1Project, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1Project') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Project):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1Project') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
