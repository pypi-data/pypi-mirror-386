# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1Quest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'available_at': 'datetime',
        'description': 'str',
        'details_page': 'str',
        'id': 'str',
        'level': 'str',
        'media_url': 'str',
        'name': 'str',
        'order': 'str',
        'reward': 'float',
        'short_description': 'str',
        'status': 'V1QuestStatus',
        'tags': 'list[str]'
    }

    attribute_map = {
        'available_at': 'availableAt',
        'description': 'description',
        'details_page': 'detailsPage',
        'id': 'id',
        'level': 'level',
        'media_url': 'mediaUrl',
        'name': 'name',
        'order': 'order',
        'reward': 'reward',
        'short_description': 'shortDescription',
        'status': 'status',
        'tags': 'tags'
    }

    def __init__(self, available_at: 'datetime' =None, description: 'str' =None, details_page: 'str' =None, id: 'str' =None, level: 'str' =None, media_url: 'str' =None, name: 'str' =None, order: 'str' =None, reward: 'float' =None, short_description: 'str' =None, status: 'V1QuestStatus' =None, tags: 'list[str]' =None):  # noqa: E501
        """V1Quest - a model defined in Swagger"""  # noqa: E501
        self._available_at = None
        self._description = None
        self._details_page = None
        self._id = None
        self._level = None
        self._media_url = None
        self._name = None
        self._order = None
        self._reward = None
        self._short_description = None
        self._status = None
        self._tags = None
        self.discriminator = None
        if available_at is not None:
            self.available_at = available_at
        if description is not None:
            self.description = description
        if details_page is not None:
            self.details_page = details_page
        if id is not None:
            self.id = id
        if level is not None:
            self.level = level
        if media_url is not None:
            self.media_url = media_url
        if name is not None:
            self.name = name
        if order is not None:
            self.order = order
        if reward is not None:
            self.reward = reward
        if short_description is not None:
            self.short_description = short_description
        if status is not None:
            self.status = status
        if tags is not None:
            self.tags = tags

    @property
    def available_at(self) -> 'datetime':
        """Gets the available_at of this V1Quest.  # noqa: E501

        Some quests will not be available until a certain time, when this  avalable_at field is set and is in the future, the quest cannot be started.  # noqa: E501

        :return: The available_at of this V1Quest.  # noqa: E501
        :rtype: datetime
        """
        return self._available_at

    @available_at.setter
    def available_at(self, available_at: 'datetime'):
        """Sets the available_at of this V1Quest.

        Some quests will not be available until a certain time, when this  avalable_at field is set and is in the future, the quest cannot be started.  # noqa: E501

        :param available_at: The available_at of this V1Quest.  # noqa: E501
        :type: datetime
        """

        self._available_at = available_at

    @property
    def description(self) -> 'str':
        """Gets the description of this V1Quest.  # noqa: E501


        :return: The description of this V1Quest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: 'str'):
        """Sets the description of this V1Quest.


        :param description: The description of this V1Quest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def details_page(self) -> 'str':
        """Gets the details_page of this V1Quest.  # noqa: E501


        :return: The details_page of this V1Quest.  # noqa: E501
        :rtype: str
        """
        return self._details_page

    @details_page.setter
    def details_page(self, details_page: 'str'):
        """Sets the details_page of this V1Quest.


        :param details_page: The details_page of this V1Quest.  # noqa: E501
        :type: str
        """

        self._details_page = details_page

    @property
    def id(self) -> 'str':
        """Gets the id of this V1Quest.  # noqa: E501


        :return: The id of this V1Quest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1Quest.


        :param id: The id of this V1Quest.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def level(self) -> 'str':
        """Gets the level of this V1Quest.  # noqa: E501


        :return: The level of this V1Quest.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level: 'str'):
        """Sets the level of this V1Quest.


        :param level: The level of this V1Quest.  # noqa: E501
        :type: str
        """

        self._level = level

    @property
    def media_url(self) -> 'str':
        """Gets the media_url of this V1Quest.  # noqa: E501


        :return: The media_url of this V1Quest.  # noqa: E501
        :rtype: str
        """
        return self._media_url

    @media_url.setter
    def media_url(self, media_url: 'str'):
        """Sets the media_url of this V1Quest.


        :param media_url: The media_url of this V1Quest.  # noqa: E501
        :type: str
        """

        self._media_url = media_url

    @property
    def name(self) -> 'str':
        """Gets the name of this V1Quest.  # noqa: E501


        :return: The name of this V1Quest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1Quest.


        :param name: The name of this V1Quest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def order(self) -> 'str':
        """Gets the order of this V1Quest.  # noqa: E501


        :return: The order of this V1Quest.  # noqa: E501
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order: 'str'):
        """Sets the order of this V1Quest.


        :param order: The order of this V1Quest.  # noqa: E501
        :type: str
        """

        self._order = order

    @property
    def reward(self) -> 'float':
        """Gets the reward of this V1Quest.  # noqa: E501


        :return: The reward of this V1Quest.  # noqa: E501
        :rtype: float
        """
        return self._reward

    @reward.setter
    def reward(self, reward: 'float'):
        """Sets the reward of this V1Quest.


        :param reward: The reward of this V1Quest.  # noqa: E501
        :type: float
        """

        self._reward = reward

    @property
    def short_description(self) -> 'str':
        """Gets the short_description of this V1Quest.  # noqa: E501


        :return: The short_description of this V1Quest.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description: 'str'):
        """Sets the short_description of this V1Quest.


        :param short_description: The short_description of this V1Quest.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def status(self) -> 'V1QuestStatus':
        """Gets the status of this V1Quest.  # noqa: E501


        :return: The status of this V1Quest.  # noqa: E501
        :rtype: V1QuestStatus
        """
        return self._status

    @status.setter
    def status(self, status: 'V1QuestStatus'):
        """Sets the status of this V1Quest.


        :param status: The status of this V1Quest.  # noqa: E501
        :type: V1QuestStatus
        """

        self._status = status

    @property
    def tags(self) -> 'list[str]':
        """Gets the tags of this V1Quest.  # noqa: E501


        :return: The tags of this V1Quest.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: 'list[str]'):
        """Sets the tags of this V1Quest.


        :param tags: The tags of this V1Quest.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1Quest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1Quest') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Quest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1Quest') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
