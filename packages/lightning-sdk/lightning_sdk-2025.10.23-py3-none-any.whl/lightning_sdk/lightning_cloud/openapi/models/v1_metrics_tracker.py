# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1MetricsTracker(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_index': 'int',
        'last_value': 'float',
        'max_index': 'int',
        'max_user_step': 'str',
        'max_value': 'float',
        'min_index': 'int',
        'min_value': 'float',
        'name': 'str',
        'num_rows': 'int',
        'started_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'last_index': 'lastIndex',
        'last_value': 'lastValue',
        'max_index': 'maxIndex',
        'max_user_step': 'maxUserStep',
        'max_value': 'maxValue',
        'min_index': 'minIndex',
        'min_value': 'minValue',
        'name': 'name',
        'num_rows': 'numRows',
        'started_at': 'startedAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, last_index: 'int' =None, last_value: 'float' =None, max_index: 'int' =None, max_user_step: 'str' =None, max_value: 'float' =None, min_index: 'int' =None, min_value: 'float' =None, name: 'str' =None, num_rows: 'int' =None, started_at: 'datetime' =None, updated_at: 'datetime' =None):  # noqa: E501
        """V1MetricsTracker - a model defined in Swagger"""  # noqa: E501
        self._last_index = None
        self._last_value = None
        self._max_index = None
        self._max_user_step = None
        self._max_value = None
        self._min_index = None
        self._min_value = None
        self._name = None
        self._num_rows = None
        self._started_at = None
        self._updated_at = None
        self.discriminator = None
        if last_index is not None:
            self.last_index = last_index
        if last_value is not None:
            self.last_value = last_value
        if max_index is not None:
            self.max_index = max_index
        if max_user_step is not None:
            self.max_user_step = max_user_step
        if max_value is not None:
            self.max_value = max_value
        if min_index is not None:
            self.min_index = min_index
        if min_value is not None:
            self.min_value = min_value
        if name is not None:
            self.name = name
        if num_rows is not None:
            self.num_rows = num_rows
        if started_at is not None:
            self.started_at = started_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def last_index(self) -> 'int':
        """Gets the last_index of this V1MetricsTracker.  # noqa: E501


        :return: The last_index of this V1MetricsTracker.  # noqa: E501
        :rtype: int
        """
        return self._last_index

    @last_index.setter
    def last_index(self, last_index: 'int'):
        """Sets the last_index of this V1MetricsTracker.


        :param last_index: The last_index of this V1MetricsTracker.  # noqa: E501
        :type: int
        """

        self._last_index = last_index

    @property
    def last_value(self) -> 'float':
        """Gets the last_value of this V1MetricsTracker.  # noqa: E501


        :return: The last_value of this V1MetricsTracker.  # noqa: E501
        :rtype: float
        """
        return self._last_value

    @last_value.setter
    def last_value(self, last_value: 'float'):
        """Sets the last_value of this V1MetricsTracker.


        :param last_value: The last_value of this V1MetricsTracker.  # noqa: E501
        :type: float
        """

        self._last_value = last_value

    @property
    def max_index(self) -> 'int':
        """Gets the max_index of this V1MetricsTracker.  # noqa: E501


        :return: The max_index of this V1MetricsTracker.  # noqa: E501
        :rtype: int
        """
        return self._max_index

    @max_index.setter
    def max_index(self, max_index: 'int'):
        """Sets the max_index of this V1MetricsTracker.


        :param max_index: The max_index of this V1MetricsTracker.  # noqa: E501
        :type: int
        """

        self._max_index = max_index

    @property
    def max_user_step(self) -> 'str':
        """Gets the max_user_step of this V1MetricsTracker.  # noqa: E501


        :return: The max_user_step of this V1MetricsTracker.  # noqa: E501
        :rtype: str
        """
        return self._max_user_step

    @max_user_step.setter
    def max_user_step(self, max_user_step: 'str'):
        """Sets the max_user_step of this V1MetricsTracker.


        :param max_user_step: The max_user_step of this V1MetricsTracker.  # noqa: E501
        :type: str
        """

        self._max_user_step = max_user_step

    @property
    def max_value(self) -> 'float':
        """Gets the max_value of this V1MetricsTracker.  # noqa: E501


        :return: The max_value of this V1MetricsTracker.  # noqa: E501
        :rtype: float
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value: 'float'):
        """Sets the max_value of this V1MetricsTracker.


        :param max_value: The max_value of this V1MetricsTracker.  # noqa: E501
        :type: float
        """

        self._max_value = max_value

    @property
    def min_index(self) -> 'int':
        """Gets the min_index of this V1MetricsTracker.  # noqa: E501


        :return: The min_index of this V1MetricsTracker.  # noqa: E501
        :rtype: int
        """
        return self._min_index

    @min_index.setter
    def min_index(self, min_index: 'int'):
        """Sets the min_index of this V1MetricsTracker.


        :param min_index: The min_index of this V1MetricsTracker.  # noqa: E501
        :type: int
        """

        self._min_index = min_index

    @property
    def min_value(self) -> 'float':
        """Gets the min_value of this V1MetricsTracker.  # noqa: E501


        :return: The min_value of this V1MetricsTracker.  # noqa: E501
        :rtype: float
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value: 'float'):
        """Sets the min_value of this V1MetricsTracker.


        :param min_value: The min_value of this V1MetricsTracker.  # noqa: E501
        :type: float
        """

        self._min_value = min_value

    @property
    def name(self) -> 'str':
        """Gets the name of this V1MetricsTracker.  # noqa: E501


        :return: The name of this V1MetricsTracker.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1MetricsTracker.


        :param name: The name of this V1MetricsTracker.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def num_rows(self) -> 'int':
        """Gets the num_rows of this V1MetricsTracker.  # noqa: E501


        :return: The num_rows of this V1MetricsTracker.  # noqa: E501
        :rtype: int
        """
        return self._num_rows

    @num_rows.setter
    def num_rows(self, num_rows: 'int'):
        """Sets the num_rows of this V1MetricsTracker.


        :param num_rows: The num_rows of this V1MetricsTracker.  # noqa: E501
        :type: int
        """

        self._num_rows = num_rows

    @property
    def started_at(self) -> 'datetime':
        """Gets the started_at of this V1MetricsTracker.  # noqa: E501


        :return: The started_at of this V1MetricsTracker.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at: 'datetime'):
        """Sets the started_at of this V1MetricsTracker.


        :param started_at: The started_at of this V1MetricsTracker.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def updated_at(self) -> 'datetime':
        """Gets the updated_at of this V1MetricsTracker.  # noqa: E501


        :return: The updated_at of this V1MetricsTracker.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: 'datetime'):
        """Sets the updated_at of this V1MetricsTracker.


        :param updated_at: The updated_at of this V1MetricsTracker.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1MetricsTracker, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1MetricsTracker') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1MetricsTracker):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1MetricsTracker') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
