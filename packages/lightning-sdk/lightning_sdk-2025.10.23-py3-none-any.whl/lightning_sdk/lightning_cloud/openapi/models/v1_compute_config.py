# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1ComputeConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu_image_override': 'str',
        'gpu_image_override': 'str',
        'id': 'str',
        'instance_type': 'str',
        'resources': 'V1Resources',
        'shm_size_mb': 'int'
    }

    attribute_map = {
        'cpu_image_override': 'cpuImageOverride',
        'gpu_image_override': 'gpuImageOverride',
        'id': 'id',
        'instance_type': 'instanceType',
        'resources': 'resources',
        'shm_size_mb': 'shmSizeMb'
    }

    def __init__(self, cpu_image_override: 'str' =None, gpu_image_override: 'str' =None, id: 'str' =None, instance_type: 'str' =None, resources: 'V1Resources' =None, shm_size_mb: 'int' =None):  # noqa: E501
        """V1ComputeConfig - a model defined in Swagger"""  # noqa: E501
        self._cpu_image_override = None
        self._gpu_image_override = None
        self._id = None
        self._instance_type = None
        self._resources = None
        self._shm_size_mb = None
        self.discriminator = None
        if cpu_image_override is not None:
            self.cpu_image_override = cpu_image_override
        if gpu_image_override is not None:
            self.gpu_image_override = gpu_image_override
        if id is not None:
            self.id = id
        if instance_type is not None:
            self.instance_type = instance_type
        if resources is not None:
            self.resources = resources
        if shm_size_mb is not None:
            self.shm_size_mb = shm_size_mb

    @property
    def cpu_image_override(self) -> 'str':
        """Gets the cpu_image_override of this V1ComputeConfig.  # noqa: E501

        cpu_image_override is used to specify a custom image used to launch the resource when running on a cpu machine.  # noqa: E501

        :return: The cpu_image_override of this V1ComputeConfig.  # noqa: E501
        :rtype: str
        """
        return self._cpu_image_override

    @cpu_image_override.setter
    def cpu_image_override(self, cpu_image_override: 'str'):
        """Sets the cpu_image_override of this V1ComputeConfig.

        cpu_image_override is used to specify a custom image used to launch the resource when running on a cpu machine.  # noqa: E501

        :param cpu_image_override: The cpu_image_override of this V1ComputeConfig.  # noqa: E501
        :type: str
        """

        self._cpu_image_override = cpu_image_override

    @property
    def gpu_image_override(self) -> 'str':
        """Gets the gpu_image_override of this V1ComputeConfig.  # noqa: E501

        gpu_image_override is used to specify a custom image used to launch the resource when running on a cpu machine.  # noqa: E501

        :return: The gpu_image_override of this V1ComputeConfig.  # noqa: E501
        :rtype: str
        """
        return self._gpu_image_override

    @gpu_image_override.setter
    def gpu_image_override(self, gpu_image_override: 'str'):
        """Sets the gpu_image_override of this V1ComputeConfig.

        gpu_image_override is used to specify a custom image used to launch the resource when running on a cpu machine.  # noqa: E501

        :param gpu_image_override: The gpu_image_override of this V1ComputeConfig.  # noqa: E501
        :type: str
        """

        self._gpu_image_override = gpu_image_override

    @property
    def id(self) -> 'str':
        """Gets the id of this V1ComputeConfig.  # noqa: E501


        :return: The id of this V1ComputeConfig.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1ComputeConfig.


        :param id: The id of this V1ComputeConfig.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def instance_type(self) -> 'str':
        """Gets the instance_type of this V1ComputeConfig.  # noqa: E501


        :return: The instance_type of this V1ComputeConfig.  # noqa: E501
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type: 'str'):
        """Sets the instance_type of this V1ComputeConfig.


        :param instance_type: The instance_type of this V1ComputeConfig.  # noqa: E501
        :type: str
        """

        self._instance_type = instance_type

    @property
    def resources(self) -> 'V1Resources':
        """Gets the resources of this V1ComputeConfig.  # noqa: E501


        :return: The resources of this V1ComputeConfig.  # noqa: E501
        :rtype: V1Resources
        """
        return self._resources

    @resources.setter
    def resources(self, resources: 'V1Resources'):
        """Sets the resources of this V1ComputeConfig.


        :param resources: The resources of this V1ComputeConfig.  # noqa: E501
        :type: V1Resources
        """

        self._resources = resources

    @property
    def shm_size_mb(self) -> 'int':
        """Gets the shm_size_mb of this V1ComputeConfig.  # noqa: E501


        :return: The shm_size_mb of this V1ComputeConfig.  # noqa: E501
        :rtype: int
        """
        return self._shm_size_mb

    @shm_size_mb.setter
    def shm_size_mb(self, shm_size_mb: 'int'):
        """Sets the shm_size_mb of this V1ComputeConfig.


        :param shm_size_mb: The shm_size_mb of this V1ComputeConfig.  # noqa: E501
        :type: int
        """

        self._shm_size_mb = shm_size_mb

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1ComputeConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1ComputeConfig') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ComputeConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1ComputeConfig') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
