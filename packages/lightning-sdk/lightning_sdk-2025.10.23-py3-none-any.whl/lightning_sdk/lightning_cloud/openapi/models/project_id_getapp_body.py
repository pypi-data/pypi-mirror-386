# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class ProjectIdGetappBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_id': 'str',
        'component_id': 'str',
        'env': 'list[V1EnvVar]',
        'hostname': 'str',
        'id': 'str',
        'version': 'str'
    }

    attribute_map = {
        'cluster_id': 'clusterId',
        'component_id': 'componentId',
        'env': 'env',
        'hostname': 'hostname',
        'id': 'id',
        'version': 'version'
    }

    def __init__(self, cluster_id: 'str' =None, component_id: 'str' =None, env: 'list[V1EnvVar]' =None, hostname: 'str' =None, id: 'str' =None, version: 'str' =None):  # noqa: E501
        """ProjectIdGetappBody - a model defined in Swagger"""  # noqa: E501
        self._cluster_id = None
        self._component_id = None
        self._env = None
        self._hostname = None
        self._id = None
        self._version = None
        self.discriminator = None
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if component_id is not None:
            self.component_id = component_id
        if env is not None:
            self.env = env
        if hostname is not None:
            self.hostname = hostname
        if id is not None:
            self.id = id
        if version is not None:
            self.version = version

    @property
    def cluster_id(self) -> 'str':
        """Gets the cluster_id of this ProjectIdGetappBody.  # noqa: E501


        :return: The cluster_id of this ProjectIdGetappBody.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id: 'str'):
        """Sets the cluster_id of this ProjectIdGetappBody.


        :param cluster_id: The cluster_id of this ProjectIdGetappBody.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def component_id(self) -> 'str':
        """Gets the component_id of this ProjectIdGetappBody.  # noqa: E501


        :return: The component_id of this ProjectIdGetappBody.  # noqa: E501
        :rtype: str
        """
        return self._component_id

    @component_id.setter
    def component_id(self, component_id: 'str'):
        """Sets the component_id of this ProjectIdGetappBody.


        :param component_id: The component_id of this ProjectIdGetappBody.  # noqa: E501
        :type: str
        """

        self._component_id = component_id

    @property
    def env(self) -> 'list[V1EnvVar]':
        """Gets the env of this ProjectIdGetappBody.  # noqa: E501


        :return: The env of this ProjectIdGetappBody.  # noqa: E501
        :rtype: list[V1EnvVar]
        """
        return self._env

    @env.setter
    def env(self, env: 'list[V1EnvVar]'):
        """Sets the env of this ProjectIdGetappBody.


        :param env: The env of this ProjectIdGetappBody.  # noqa: E501
        :type: list[V1EnvVar]
        """

        self._env = env

    @property
    def hostname(self) -> 'str':
        """Gets the hostname of this ProjectIdGetappBody.  # noqa: E501


        :return: The hostname of this ProjectIdGetappBody.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname: 'str'):
        """Sets the hostname of this ProjectIdGetappBody.


        :param hostname: The hostname of this ProjectIdGetappBody.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def id(self) -> 'str':
        """Gets the id of this ProjectIdGetappBody.  # noqa: E501


        :return: The id of this ProjectIdGetappBody.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this ProjectIdGetappBody.


        :param id: The id of this ProjectIdGetappBody.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def version(self) -> 'str':
        """Gets the version of this ProjectIdGetappBody.  # noqa: E501


        :return: The version of this ProjectIdGetappBody.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: 'str'):
        """Sets the version of this ProjectIdGetappBody.


        :param version: The version of this ProjectIdGetappBody.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectIdGetappBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'ProjectIdGetappBody') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectIdGetappBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'ProjectIdGetappBody') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
