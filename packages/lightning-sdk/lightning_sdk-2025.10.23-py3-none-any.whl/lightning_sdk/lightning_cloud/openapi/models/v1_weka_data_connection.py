# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1WekaDataConnection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'backend_ips': 'list[str]',
        'file_system_name': 'str',
        'memory_mb': 'int',
        'readonly': 'bool'
    }

    attribute_map = {
        'backend_ips': 'backendIps',
        'file_system_name': 'fileSystemName',
        'memory_mb': 'memoryMb',
        'readonly': 'readonly'
    }

    def __init__(self, backend_ips: 'list[str]' =None, file_system_name: 'str' =None, memory_mb: 'int' =None, readonly: 'bool' =None):  # noqa: E501
        """V1WekaDataConnection - a model defined in Swagger"""  # noqa: E501
        self._backend_ips = None
        self._file_system_name = None
        self._memory_mb = None
        self._readonly = None
        self.discriminator = None
        if backend_ips is not None:
            self.backend_ips = backend_ips
        if file_system_name is not None:
            self.file_system_name = file_system_name
        if memory_mb is not None:
            self.memory_mb = memory_mb
        if readonly is not None:
            self.readonly = readonly

    @property
    def backend_ips(self) -> 'list[str]':
        """Gets the backend_ips of this V1WekaDataConnection.  # noqa: E501


        :return: The backend_ips of this V1WekaDataConnection.  # noqa: E501
        :rtype: list[str]
        """
        return self._backend_ips

    @backend_ips.setter
    def backend_ips(self, backend_ips: 'list[str]'):
        """Sets the backend_ips of this V1WekaDataConnection.


        :param backend_ips: The backend_ips of this V1WekaDataConnection.  # noqa: E501
        :type: list[str]
        """

        self._backend_ips = backend_ips

    @property
    def file_system_name(self) -> 'str':
        """Gets the file_system_name of this V1WekaDataConnection.  # noqa: E501


        :return: The file_system_name of this V1WekaDataConnection.  # noqa: E501
        :rtype: str
        """
        return self._file_system_name

    @file_system_name.setter
    def file_system_name(self, file_system_name: 'str'):
        """Sets the file_system_name of this V1WekaDataConnection.


        :param file_system_name: The file_system_name of this V1WekaDataConnection.  # noqa: E501
        :type: str
        """

        self._file_system_name = file_system_name

    @property
    def memory_mb(self) -> 'int':
        """Gets the memory_mb of this V1WekaDataConnection.  # noqa: E501


        :return: The memory_mb of this V1WekaDataConnection.  # noqa: E501
        :rtype: int
        """
        return self._memory_mb

    @memory_mb.setter
    def memory_mb(self, memory_mb: 'int'):
        """Sets the memory_mb of this V1WekaDataConnection.


        :param memory_mb: The memory_mb of this V1WekaDataConnection.  # noqa: E501
        :type: int
        """

        self._memory_mb = memory_mb

    @property
    def readonly(self) -> 'bool':
        """Gets the readonly of this V1WekaDataConnection.  # noqa: E501


        :return: The readonly of this V1WekaDataConnection.  # noqa: E501
        :rtype: bool
        """
        return self._readonly

    @readonly.setter
    def readonly(self, readonly: 'bool'):
        """Sets the readonly of this V1WekaDataConnection.


        :param readonly: The readonly of this V1WekaDataConnection.  # noqa: E501
        :type: bool
        """

        self._readonly = readonly

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1WekaDataConnection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1WekaDataConnection') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1WekaDataConnection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1WekaDataConnection') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
