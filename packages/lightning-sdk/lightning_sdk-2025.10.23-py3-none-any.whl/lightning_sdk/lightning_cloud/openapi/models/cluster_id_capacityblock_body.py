# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class ClusterIdCapacityblockBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'capacity_block_duration_hours': 'int',
        'instance_count': 'int',
        'instance_type': 'str',
        'org_id': 'str',
        'start_date': 'datetime',
        'timezone': 'str'
    }

    attribute_map = {
        'capacity_block_duration_hours': 'capacityBlockDurationHours',
        'instance_count': 'instanceCount',
        'instance_type': 'instanceType',
        'org_id': 'orgId',
        'start_date': 'startDate',
        'timezone': 'timezone'
    }

    def __init__(self, capacity_block_duration_hours: 'int' =None, instance_count: 'int' =None, instance_type: 'str' =None, org_id: 'str' =None, start_date: 'datetime' =None, timezone: 'str' =None):  # noqa: E501
        """ClusterIdCapacityblockBody - a model defined in Swagger"""  # noqa: E501
        self._capacity_block_duration_hours = None
        self._instance_count = None
        self._instance_type = None
        self._org_id = None
        self._start_date = None
        self._timezone = None
        self.discriminator = None
        if capacity_block_duration_hours is not None:
            self.capacity_block_duration_hours = capacity_block_duration_hours
        if instance_count is not None:
            self.instance_count = instance_count
        if instance_type is not None:
            self.instance_type = instance_type
        if org_id is not None:
            self.org_id = org_id
        if start_date is not None:
            self.start_date = start_date
        if timezone is not None:
            self.timezone = timezone

    @property
    def capacity_block_duration_hours(self) -> 'int':
        """Gets the capacity_block_duration_hours of this ClusterIdCapacityblockBody.  # noqa: E501


        :return: The capacity_block_duration_hours of this ClusterIdCapacityblockBody.  # noqa: E501
        :rtype: int
        """
        return self._capacity_block_duration_hours

    @capacity_block_duration_hours.setter
    def capacity_block_duration_hours(self, capacity_block_duration_hours: 'int'):
        """Sets the capacity_block_duration_hours of this ClusterIdCapacityblockBody.


        :param capacity_block_duration_hours: The capacity_block_duration_hours of this ClusterIdCapacityblockBody.  # noqa: E501
        :type: int
        """

        self._capacity_block_duration_hours = capacity_block_duration_hours

    @property
    def instance_count(self) -> 'int':
        """Gets the instance_count of this ClusterIdCapacityblockBody.  # noqa: E501


        :return: The instance_count of this ClusterIdCapacityblockBody.  # noqa: E501
        :rtype: int
        """
        return self._instance_count

    @instance_count.setter
    def instance_count(self, instance_count: 'int'):
        """Sets the instance_count of this ClusterIdCapacityblockBody.


        :param instance_count: The instance_count of this ClusterIdCapacityblockBody.  # noqa: E501
        :type: int
        """

        self._instance_count = instance_count

    @property
    def instance_type(self) -> 'str':
        """Gets the instance_type of this ClusterIdCapacityblockBody.  # noqa: E501


        :return: The instance_type of this ClusterIdCapacityblockBody.  # noqa: E501
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type: 'str'):
        """Sets the instance_type of this ClusterIdCapacityblockBody.


        :param instance_type: The instance_type of this ClusterIdCapacityblockBody.  # noqa: E501
        :type: str
        """

        self._instance_type = instance_type

    @property
    def org_id(self) -> 'str':
        """Gets the org_id of this ClusterIdCapacityblockBody.  # noqa: E501


        :return: The org_id of this ClusterIdCapacityblockBody.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id: 'str'):
        """Sets the org_id of this ClusterIdCapacityblockBody.


        :param org_id: The org_id of this ClusterIdCapacityblockBody.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def start_date(self) -> 'datetime':
        """Gets the start_date of this ClusterIdCapacityblockBody.  # noqa: E501


        :return: The start_date of this ClusterIdCapacityblockBody.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date: 'datetime'):
        """Sets the start_date of this ClusterIdCapacityblockBody.


        :param start_date: The start_date of this ClusterIdCapacityblockBody.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def timezone(self) -> 'str':
        """Gets the timezone of this ClusterIdCapacityblockBody.  # noqa: E501


        :return: The timezone of this ClusterIdCapacityblockBody.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone: 'str'):
        """Sets the timezone of this ClusterIdCapacityblockBody.


        :param timezone: The timezone of this ClusterIdCapacityblockBody.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterIdCapacityblockBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'ClusterIdCapacityblockBody') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterIdCapacityblockBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'ClusterIdCapacityblockBody') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
