# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1ClusterEncryptionKey(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_id': 'str',
        'creator_id': 'str',
        'id': 'str',
        'key_id': 'str',
        'organization_id': 'str'
    }

    attribute_map = {
        'cluster_id': 'clusterId',
        'creator_id': 'creatorId',
        'id': 'id',
        'key_id': 'keyId',
        'organization_id': 'organizationId'
    }

    def __init__(self, cluster_id: 'str' =None, creator_id: 'str' =None, id: 'str' =None, key_id: 'str' =None, organization_id: 'str' =None):  # noqa: E501
        """V1ClusterEncryptionKey - a model defined in Swagger"""  # noqa: E501
        self._cluster_id = None
        self._creator_id = None
        self._id = None
        self._key_id = None
        self._organization_id = None
        self.discriminator = None
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if creator_id is not None:
            self.creator_id = creator_id
        if id is not None:
            self.id = id
        if key_id is not None:
            self.key_id = key_id
        if organization_id is not None:
            self.organization_id = organization_id

    @property
    def cluster_id(self) -> 'str':
        """Gets the cluster_id of this V1ClusterEncryptionKey.  # noqa: E501


        :return: The cluster_id of this V1ClusterEncryptionKey.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id: 'str'):
        """Sets the cluster_id of this V1ClusterEncryptionKey.


        :param cluster_id: The cluster_id of this V1ClusterEncryptionKey.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def creator_id(self) -> 'str':
        """Gets the creator_id of this V1ClusterEncryptionKey.  # noqa: E501


        :return: The creator_id of this V1ClusterEncryptionKey.  # noqa: E501
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id: 'str'):
        """Sets the creator_id of this V1ClusterEncryptionKey.


        :param creator_id: The creator_id of this V1ClusterEncryptionKey.  # noqa: E501
        :type: str
        """

        self._creator_id = creator_id

    @property
    def id(self) -> 'str':
        """Gets the id of this V1ClusterEncryptionKey.  # noqa: E501


        :return: The id of this V1ClusterEncryptionKey.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1ClusterEncryptionKey.


        :param id: The id of this V1ClusterEncryptionKey.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def key_id(self) -> 'str':
        """Gets the key_id of this V1ClusterEncryptionKey.  # noqa: E501


        :return: The key_id of this V1ClusterEncryptionKey.  # noqa: E501
        :rtype: str
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id: 'str'):
        """Sets the key_id of this V1ClusterEncryptionKey.


        :param key_id: The key_id of this V1ClusterEncryptionKey.  # noqa: E501
        :type: str
        """

        self._key_id = key_id

    @property
    def organization_id(self) -> 'str':
        """Gets the organization_id of this V1ClusterEncryptionKey.  # noqa: E501


        :return: The organization_id of this V1ClusterEncryptionKey.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id: 'str'):
        """Sets the organization_id of this V1ClusterEncryptionKey.


        :param organization_id: The organization_id of this V1ClusterEncryptionKey.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1ClusterEncryptionKey, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1ClusterEncryptionKey') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ClusterEncryptionKey):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1ClusterEncryptionKey') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
