# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1CloudSpaceColdStartMetricsStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu_count': 'int',
        'gpu_count': 'int',
        'gpu_type': 'str',
        'instance_type': 'str',
        'median_env_setup': 'float',
        'median_initialize_env': 'float',
        'median_machine_startup': 'float',
        'median_total': 'float',
        'median_wait_for_machine': 'float',
        'provider': 'str'
    }

    attribute_map = {
        'cpu_count': 'cpuCount',
        'gpu_count': 'gpuCount',
        'gpu_type': 'gpuType',
        'instance_type': 'instanceType',
        'median_env_setup': 'medianEnvSetup',
        'median_initialize_env': 'medianInitializeEnv',
        'median_machine_startup': 'medianMachineStartup',
        'median_total': 'medianTotal',
        'median_wait_for_machine': 'medianWaitForMachine',
        'provider': 'provider'
    }

    def __init__(self, cpu_count: 'int' =None, gpu_count: 'int' =None, gpu_type: 'str' =None, instance_type: 'str' =None, median_env_setup: 'float' =None, median_initialize_env: 'float' =None, median_machine_startup: 'float' =None, median_total: 'float' =None, median_wait_for_machine: 'float' =None, provider: 'str' =None):  # noqa: E501
        """V1CloudSpaceColdStartMetricsStats - a model defined in Swagger"""  # noqa: E501
        self._cpu_count = None
        self._gpu_count = None
        self._gpu_type = None
        self._instance_type = None
        self._median_env_setup = None
        self._median_initialize_env = None
        self._median_machine_startup = None
        self._median_total = None
        self._median_wait_for_machine = None
        self._provider = None
        self.discriminator = None
        if cpu_count is not None:
            self.cpu_count = cpu_count
        if gpu_count is not None:
            self.gpu_count = gpu_count
        if gpu_type is not None:
            self.gpu_type = gpu_type
        if instance_type is not None:
            self.instance_type = instance_type
        if median_env_setup is not None:
            self.median_env_setup = median_env_setup
        if median_initialize_env is not None:
            self.median_initialize_env = median_initialize_env
        if median_machine_startup is not None:
            self.median_machine_startup = median_machine_startup
        if median_total is not None:
            self.median_total = median_total
        if median_wait_for_machine is not None:
            self.median_wait_for_machine = median_wait_for_machine
        if provider is not None:
            self.provider = provider

    @property
    def cpu_count(self) -> 'int':
        """Gets the cpu_count of this V1CloudSpaceColdStartMetricsStats.  # noqa: E501


        :return: The cpu_count of this V1CloudSpaceColdStartMetricsStats.  # noqa: E501
        :rtype: int
        """
        return self._cpu_count

    @cpu_count.setter
    def cpu_count(self, cpu_count: 'int'):
        """Sets the cpu_count of this V1CloudSpaceColdStartMetricsStats.


        :param cpu_count: The cpu_count of this V1CloudSpaceColdStartMetricsStats.  # noqa: E501
        :type: int
        """

        self._cpu_count = cpu_count

    @property
    def gpu_count(self) -> 'int':
        """Gets the gpu_count of this V1CloudSpaceColdStartMetricsStats.  # noqa: E501


        :return: The gpu_count of this V1CloudSpaceColdStartMetricsStats.  # noqa: E501
        :rtype: int
        """
        return self._gpu_count

    @gpu_count.setter
    def gpu_count(self, gpu_count: 'int'):
        """Sets the gpu_count of this V1CloudSpaceColdStartMetricsStats.


        :param gpu_count: The gpu_count of this V1CloudSpaceColdStartMetricsStats.  # noqa: E501
        :type: int
        """

        self._gpu_count = gpu_count

    @property
    def gpu_type(self) -> 'str':
        """Gets the gpu_type of this V1CloudSpaceColdStartMetricsStats.  # noqa: E501


        :return: The gpu_type of this V1CloudSpaceColdStartMetricsStats.  # noqa: E501
        :rtype: str
        """
        return self._gpu_type

    @gpu_type.setter
    def gpu_type(self, gpu_type: 'str'):
        """Sets the gpu_type of this V1CloudSpaceColdStartMetricsStats.


        :param gpu_type: The gpu_type of this V1CloudSpaceColdStartMetricsStats.  # noqa: E501
        :type: str
        """

        self._gpu_type = gpu_type

    @property
    def instance_type(self) -> 'str':
        """Gets the instance_type of this V1CloudSpaceColdStartMetricsStats.  # noqa: E501


        :return: The instance_type of this V1CloudSpaceColdStartMetricsStats.  # noqa: E501
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type: 'str'):
        """Sets the instance_type of this V1CloudSpaceColdStartMetricsStats.


        :param instance_type: The instance_type of this V1CloudSpaceColdStartMetricsStats.  # noqa: E501
        :type: str
        """

        self._instance_type = instance_type

    @property
    def median_env_setup(self) -> 'float':
        """Gets the median_env_setup of this V1CloudSpaceColdStartMetricsStats.  # noqa: E501


        :return: The median_env_setup of this V1CloudSpaceColdStartMetricsStats.  # noqa: E501
        :rtype: float
        """
        return self._median_env_setup

    @median_env_setup.setter
    def median_env_setup(self, median_env_setup: 'float'):
        """Sets the median_env_setup of this V1CloudSpaceColdStartMetricsStats.


        :param median_env_setup: The median_env_setup of this V1CloudSpaceColdStartMetricsStats.  # noqa: E501
        :type: float
        """

        self._median_env_setup = median_env_setup

    @property
    def median_initialize_env(self) -> 'float':
        """Gets the median_initialize_env of this V1CloudSpaceColdStartMetricsStats.  # noqa: E501


        :return: The median_initialize_env of this V1CloudSpaceColdStartMetricsStats.  # noqa: E501
        :rtype: float
        """
        return self._median_initialize_env

    @median_initialize_env.setter
    def median_initialize_env(self, median_initialize_env: 'float'):
        """Sets the median_initialize_env of this V1CloudSpaceColdStartMetricsStats.


        :param median_initialize_env: The median_initialize_env of this V1CloudSpaceColdStartMetricsStats.  # noqa: E501
        :type: float
        """

        self._median_initialize_env = median_initialize_env

    @property
    def median_machine_startup(self) -> 'float':
        """Gets the median_machine_startup of this V1CloudSpaceColdStartMetricsStats.  # noqa: E501


        :return: The median_machine_startup of this V1CloudSpaceColdStartMetricsStats.  # noqa: E501
        :rtype: float
        """
        return self._median_machine_startup

    @median_machine_startup.setter
    def median_machine_startup(self, median_machine_startup: 'float'):
        """Sets the median_machine_startup of this V1CloudSpaceColdStartMetricsStats.


        :param median_machine_startup: The median_machine_startup of this V1CloudSpaceColdStartMetricsStats.  # noqa: E501
        :type: float
        """

        self._median_machine_startup = median_machine_startup

    @property
    def median_total(self) -> 'float':
        """Gets the median_total of this V1CloudSpaceColdStartMetricsStats.  # noqa: E501


        :return: The median_total of this V1CloudSpaceColdStartMetricsStats.  # noqa: E501
        :rtype: float
        """
        return self._median_total

    @median_total.setter
    def median_total(self, median_total: 'float'):
        """Sets the median_total of this V1CloudSpaceColdStartMetricsStats.


        :param median_total: The median_total of this V1CloudSpaceColdStartMetricsStats.  # noqa: E501
        :type: float
        """

        self._median_total = median_total

    @property
    def median_wait_for_machine(self) -> 'float':
        """Gets the median_wait_for_machine of this V1CloudSpaceColdStartMetricsStats.  # noqa: E501


        :return: The median_wait_for_machine of this V1CloudSpaceColdStartMetricsStats.  # noqa: E501
        :rtype: float
        """
        return self._median_wait_for_machine

    @median_wait_for_machine.setter
    def median_wait_for_machine(self, median_wait_for_machine: 'float'):
        """Sets the median_wait_for_machine of this V1CloudSpaceColdStartMetricsStats.


        :param median_wait_for_machine: The median_wait_for_machine of this V1CloudSpaceColdStartMetricsStats.  # noqa: E501
        :type: float
        """

        self._median_wait_for_machine = median_wait_for_machine

    @property
    def provider(self) -> 'str':
        """Gets the provider of this V1CloudSpaceColdStartMetricsStats.  # noqa: E501


        :return: The provider of this V1CloudSpaceColdStartMetricsStats.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider: 'str'):
        """Sets the provider of this V1CloudSpaceColdStartMetricsStats.


        :param provider: The provider of this V1CloudSpaceColdStartMetricsStats.  # noqa: E501
        :type: str
        """

        self._provider = provider

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1CloudSpaceColdStartMetricsStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1CloudSpaceColdStartMetricsStats') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1CloudSpaceColdStartMetricsStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1CloudSpaceColdStartMetricsStats') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
