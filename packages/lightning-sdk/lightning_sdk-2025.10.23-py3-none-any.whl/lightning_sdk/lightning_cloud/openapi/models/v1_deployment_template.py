# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1DeploymentTemplate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'about_page_content': 'str',
        'about_page_id': 'str',
        'api_standard': 'str',
        'categories': 'list[str]',
        'created_at': 'datetime',
        'deployment_id': 'str',
        'description': 'str',
        'featured': 'bool',
        'globally_visible': 'bool',
        'id': 'str',
        'image_url': 'str',
        'metrics': 'V1DeploymentMetrics',
        'name': 'str',
        'org_id': 'str',
        'parameter_spec': 'V1ParameterizationSpec',
        'pricing': 'V1ApiPricingSpec',
        'project_id': 'str',
        'spec': 'V1JobSpec',
        'spec_v2': 'V1DeploymentSpec',
        'studio_url': 'str',
        'tags': 'list[V1ResourceTag]',
        'thumbnail_updated_at': 'datetime',
        'thumbnail_url': 'str',
        'unpublished': 'bool',
        'updated_at': 'datetime',
        'user_id': 'str'
    }

    attribute_map = {
        'about_page_content': 'aboutPageContent',
        'about_page_id': 'aboutPageId',
        'api_standard': 'apiStandard',
        'categories': 'categories',
        'created_at': 'createdAt',
        'deployment_id': 'deploymentId',
        'description': 'description',
        'featured': 'featured',
        'globally_visible': 'globallyVisible',
        'id': 'id',
        'image_url': 'imageUrl',
        'metrics': 'metrics',
        'name': 'name',
        'org_id': 'orgId',
        'parameter_spec': 'parameterSpec',
        'pricing': 'pricing',
        'project_id': 'projectId',
        'spec': 'spec',
        'spec_v2': 'specV2',
        'studio_url': 'studioUrl',
        'tags': 'tags',
        'thumbnail_updated_at': 'thumbnailUpdatedAt',
        'thumbnail_url': 'thumbnailUrl',
        'unpublished': 'unpublished',
        'updated_at': 'updatedAt',
        'user_id': 'userId'
    }

    def __init__(self, about_page_content: 'str' =None, about_page_id: 'str' =None, api_standard: 'str' =None, categories: 'list[str]' =None, created_at: 'datetime' =None, deployment_id: 'str' =None, description: 'str' =None, featured: 'bool' =None, globally_visible: 'bool' =None, id: 'str' =None, image_url: 'str' =None, metrics: 'V1DeploymentMetrics' =None, name: 'str' =None, org_id: 'str' =None, parameter_spec: 'V1ParameterizationSpec' =None, pricing: 'V1ApiPricingSpec' =None, project_id: 'str' =None, spec: 'V1JobSpec' =None, spec_v2: 'V1DeploymentSpec' =None, studio_url: 'str' =None, tags: 'list[V1ResourceTag]' =None, thumbnail_updated_at: 'datetime' =None, thumbnail_url: 'str' =None, unpublished: 'bool' =None, updated_at: 'datetime' =None, user_id: 'str' =None):  # noqa: E501
        """V1DeploymentTemplate - a model defined in Swagger"""  # noqa: E501
        self._about_page_content = None
        self._about_page_id = None
        self._api_standard = None
        self._categories = None
        self._created_at = None
        self._deployment_id = None
        self._description = None
        self._featured = None
        self._globally_visible = None
        self._id = None
        self._image_url = None
        self._metrics = None
        self._name = None
        self._org_id = None
        self._parameter_spec = None
        self._pricing = None
        self._project_id = None
        self._spec = None
        self._spec_v2 = None
        self._studio_url = None
        self._tags = None
        self._thumbnail_updated_at = None
        self._thumbnail_url = None
        self._unpublished = None
        self._updated_at = None
        self._user_id = None
        self.discriminator = None
        if about_page_content is not None:
            self.about_page_content = about_page_content
        if about_page_id is not None:
            self.about_page_id = about_page_id
        if api_standard is not None:
            self.api_standard = api_standard
        if categories is not None:
            self.categories = categories
        if created_at is not None:
            self.created_at = created_at
        if deployment_id is not None:
            self.deployment_id = deployment_id
        if description is not None:
            self.description = description
        if featured is not None:
            self.featured = featured
        if globally_visible is not None:
            self.globally_visible = globally_visible
        if id is not None:
            self.id = id
        if image_url is not None:
            self.image_url = image_url
        if metrics is not None:
            self.metrics = metrics
        if name is not None:
            self.name = name
        if org_id is not None:
            self.org_id = org_id
        if parameter_spec is not None:
            self.parameter_spec = parameter_spec
        if pricing is not None:
            self.pricing = pricing
        if project_id is not None:
            self.project_id = project_id
        if spec is not None:
            self.spec = spec
        if spec_v2 is not None:
            self.spec_v2 = spec_v2
        if studio_url is not None:
            self.studio_url = studio_url
        if tags is not None:
            self.tags = tags
        if thumbnail_updated_at is not None:
            self.thumbnail_updated_at = thumbnail_updated_at
        if thumbnail_url is not None:
            self.thumbnail_url = thumbnail_url
        if unpublished is not None:
            self.unpublished = unpublished
        if updated_at is not None:
            self.updated_at = updated_at
        if user_id is not None:
            self.user_id = user_id

    @property
    def about_page_content(self) -> 'str':
        """Gets the about_page_content of this V1DeploymentTemplate.  # noqa: E501


        :return: The about_page_content of this V1DeploymentTemplate.  # noqa: E501
        :rtype: str
        """
        return self._about_page_content

    @about_page_content.setter
    def about_page_content(self, about_page_content: 'str'):
        """Sets the about_page_content of this V1DeploymentTemplate.


        :param about_page_content: The about_page_content of this V1DeploymentTemplate.  # noqa: E501
        :type: str
        """

        self._about_page_content = about_page_content

    @property
    def about_page_id(self) -> 'str':
        """Gets the about_page_id of this V1DeploymentTemplate.  # noqa: E501


        :return: The about_page_id of this V1DeploymentTemplate.  # noqa: E501
        :rtype: str
        """
        return self._about_page_id

    @about_page_id.setter
    def about_page_id(self, about_page_id: 'str'):
        """Sets the about_page_id of this V1DeploymentTemplate.


        :param about_page_id: The about_page_id of this V1DeploymentTemplate.  # noqa: E501
        :type: str
        """

        self._about_page_id = about_page_id

    @property
    def api_standard(self) -> 'str':
        """Gets the api_standard of this V1DeploymentTemplate.  # noqa: E501


        :return: The api_standard of this V1DeploymentTemplate.  # noqa: E501
        :rtype: str
        """
        return self._api_standard

    @api_standard.setter
    def api_standard(self, api_standard: 'str'):
        """Sets the api_standard of this V1DeploymentTemplate.


        :param api_standard: The api_standard of this V1DeploymentTemplate.  # noqa: E501
        :type: str
        """

        self._api_standard = api_standard

    @property
    def categories(self) -> 'list[str]':
        """Gets the categories of this V1DeploymentTemplate.  # noqa: E501


        :return: The categories of this V1DeploymentTemplate.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories: 'list[str]'):
        """Sets the categories of this V1DeploymentTemplate.


        :param categories: The categories of this V1DeploymentTemplate.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this V1DeploymentTemplate.  # noqa: E501


        :return: The created_at of this V1DeploymentTemplate.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this V1DeploymentTemplate.


        :param created_at: The created_at of this V1DeploymentTemplate.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def deployment_id(self) -> 'str':
        """Gets the deployment_id of this V1DeploymentTemplate.  # noqa: E501


        :return: The deployment_id of this V1DeploymentTemplate.  # noqa: E501
        :rtype: str
        """
        return self._deployment_id

    @deployment_id.setter
    def deployment_id(self, deployment_id: 'str'):
        """Sets the deployment_id of this V1DeploymentTemplate.


        :param deployment_id: The deployment_id of this V1DeploymentTemplate.  # noqa: E501
        :type: str
        """

        self._deployment_id = deployment_id

    @property
    def description(self) -> 'str':
        """Gets the description of this V1DeploymentTemplate.  # noqa: E501


        :return: The description of this V1DeploymentTemplate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: 'str'):
        """Sets the description of this V1DeploymentTemplate.


        :param description: The description of this V1DeploymentTemplate.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def featured(self) -> 'bool':
        """Gets the featured of this V1DeploymentTemplate.  # noqa: E501


        :return: The featured of this V1DeploymentTemplate.  # noqa: E501
        :rtype: bool
        """
        return self._featured

    @featured.setter
    def featured(self, featured: 'bool'):
        """Sets the featured of this V1DeploymentTemplate.


        :param featured: The featured of this V1DeploymentTemplate.  # noqa: E501
        :type: bool
        """

        self._featured = featured

    @property
    def globally_visible(self) -> 'bool':
        """Gets the globally_visible of this V1DeploymentTemplate.  # noqa: E501


        :return: The globally_visible of this V1DeploymentTemplate.  # noqa: E501
        :rtype: bool
        """
        return self._globally_visible

    @globally_visible.setter
    def globally_visible(self, globally_visible: 'bool'):
        """Sets the globally_visible of this V1DeploymentTemplate.


        :param globally_visible: The globally_visible of this V1DeploymentTemplate.  # noqa: E501
        :type: bool
        """

        self._globally_visible = globally_visible

    @property
    def id(self) -> 'str':
        """Gets the id of this V1DeploymentTemplate.  # noqa: E501


        :return: The id of this V1DeploymentTemplate.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1DeploymentTemplate.


        :param id: The id of this V1DeploymentTemplate.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def image_url(self) -> 'str':
        """Gets the image_url of this V1DeploymentTemplate.  # noqa: E501


        :return: The image_url of this V1DeploymentTemplate.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url: 'str'):
        """Sets the image_url of this V1DeploymentTemplate.


        :param image_url: The image_url of this V1DeploymentTemplate.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def metrics(self) -> 'V1DeploymentMetrics':
        """Gets the metrics of this V1DeploymentTemplate.  # noqa: E501


        :return: The metrics of this V1DeploymentTemplate.  # noqa: E501
        :rtype: V1DeploymentMetrics
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics: 'V1DeploymentMetrics'):
        """Sets the metrics of this V1DeploymentTemplate.


        :param metrics: The metrics of this V1DeploymentTemplate.  # noqa: E501
        :type: V1DeploymentMetrics
        """

        self._metrics = metrics

    @property
    def name(self) -> 'str':
        """Gets the name of this V1DeploymentTemplate.  # noqa: E501


        :return: The name of this V1DeploymentTemplate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1DeploymentTemplate.


        :param name: The name of this V1DeploymentTemplate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def org_id(self) -> 'str':
        """Gets the org_id of this V1DeploymentTemplate.  # noqa: E501


        :return: The org_id of this V1DeploymentTemplate.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id: 'str'):
        """Sets the org_id of this V1DeploymentTemplate.


        :param org_id: The org_id of this V1DeploymentTemplate.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def parameter_spec(self) -> 'V1ParameterizationSpec':
        """Gets the parameter_spec of this V1DeploymentTemplate.  # noqa: E501


        :return: The parameter_spec of this V1DeploymentTemplate.  # noqa: E501
        :rtype: V1ParameterizationSpec
        """
        return self._parameter_spec

    @parameter_spec.setter
    def parameter_spec(self, parameter_spec: 'V1ParameterizationSpec'):
        """Sets the parameter_spec of this V1DeploymentTemplate.


        :param parameter_spec: The parameter_spec of this V1DeploymentTemplate.  # noqa: E501
        :type: V1ParameterizationSpec
        """

        self._parameter_spec = parameter_spec

    @property
    def pricing(self) -> 'V1ApiPricingSpec':
        """Gets the pricing of this V1DeploymentTemplate.  # noqa: E501


        :return: The pricing of this V1DeploymentTemplate.  # noqa: E501
        :rtype: V1ApiPricingSpec
        """
        return self._pricing

    @pricing.setter
    def pricing(self, pricing: 'V1ApiPricingSpec'):
        """Sets the pricing of this V1DeploymentTemplate.


        :param pricing: The pricing of this V1DeploymentTemplate.  # noqa: E501
        :type: V1ApiPricingSpec
        """

        self._pricing = pricing

    @property
    def project_id(self) -> 'str':
        """Gets the project_id of this V1DeploymentTemplate.  # noqa: E501


        :return: The project_id of this V1DeploymentTemplate.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: 'str'):
        """Sets the project_id of this V1DeploymentTemplate.


        :param project_id: The project_id of this V1DeploymentTemplate.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def spec(self) -> 'V1JobSpec':
        """Gets the spec of this V1DeploymentTemplate.  # noqa: E501


        :return: The spec of this V1DeploymentTemplate.  # noqa: E501
        :rtype: V1JobSpec
        """
        return self._spec

    @spec.setter
    def spec(self, spec: 'V1JobSpec'):
        """Sets the spec of this V1DeploymentTemplate.


        :param spec: The spec of this V1DeploymentTemplate.  # noqa: E501
        :type: V1JobSpec
        """

        self._spec = spec

    @property
    def spec_v2(self) -> 'V1DeploymentSpec':
        """Gets the spec_v2 of this V1DeploymentTemplate.  # noqa: E501


        :return: The spec_v2 of this V1DeploymentTemplate.  # noqa: E501
        :rtype: V1DeploymentSpec
        """
        return self._spec_v2

    @spec_v2.setter
    def spec_v2(self, spec_v2: 'V1DeploymentSpec'):
        """Sets the spec_v2 of this V1DeploymentTemplate.


        :param spec_v2: The spec_v2 of this V1DeploymentTemplate.  # noqa: E501
        :type: V1DeploymentSpec
        """

        self._spec_v2 = spec_v2

    @property
    def studio_url(self) -> 'str':
        """Gets the studio_url of this V1DeploymentTemplate.  # noqa: E501


        :return: The studio_url of this V1DeploymentTemplate.  # noqa: E501
        :rtype: str
        """
        return self._studio_url

    @studio_url.setter
    def studio_url(self, studio_url: 'str'):
        """Sets the studio_url of this V1DeploymentTemplate.


        :param studio_url: The studio_url of this V1DeploymentTemplate.  # noqa: E501
        :type: str
        """

        self._studio_url = studio_url

    @property
    def tags(self) -> 'list[V1ResourceTag]':
        """Gets the tags of this V1DeploymentTemplate.  # noqa: E501


        :return: The tags of this V1DeploymentTemplate.  # noqa: E501
        :rtype: list[V1ResourceTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: 'list[V1ResourceTag]'):
        """Sets the tags of this V1DeploymentTemplate.


        :param tags: The tags of this V1DeploymentTemplate.  # noqa: E501
        :type: list[V1ResourceTag]
        """

        self._tags = tags

    @property
    def thumbnail_updated_at(self) -> 'datetime':
        """Gets the thumbnail_updated_at of this V1DeploymentTemplate.  # noqa: E501


        :return: The thumbnail_updated_at of this V1DeploymentTemplate.  # noqa: E501
        :rtype: datetime
        """
        return self._thumbnail_updated_at

    @thumbnail_updated_at.setter
    def thumbnail_updated_at(self, thumbnail_updated_at: 'datetime'):
        """Sets the thumbnail_updated_at of this V1DeploymentTemplate.


        :param thumbnail_updated_at: The thumbnail_updated_at of this V1DeploymentTemplate.  # noqa: E501
        :type: datetime
        """

        self._thumbnail_updated_at = thumbnail_updated_at

    @property
    def thumbnail_url(self) -> 'str':
        """Gets the thumbnail_url of this V1DeploymentTemplate.  # noqa: E501


        :return: The thumbnail_url of this V1DeploymentTemplate.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url: 'str'):
        """Sets the thumbnail_url of this V1DeploymentTemplate.


        :param thumbnail_url: The thumbnail_url of this V1DeploymentTemplate.  # noqa: E501
        :type: str
        """

        self._thumbnail_url = thumbnail_url

    @property
    def unpublished(self) -> 'bool':
        """Gets the unpublished of this V1DeploymentTemplate.  # noqa: E501


        :return: The unpublished of this V1DeploymentTemplate.  # noqa: E501
        :rtype: bool
        """
        return self._unpublished

    @unpublished.setter
    def unpublished(self, unpublished: 'bool'):
        """Sets the unpublished of this V1DeploymentTemplate.


        :param unpublished: The unpublished of this V1DeploymentTemplate.  # noqa: E501
        :type: bool
        """

        self._unpublished = unpublished

    @property
    def updated_at(self) -> 'datetime':
        """Gets the updated_at of this V1DeploymentTemplate.  # noqa: E501


        :return: The updated_at of this V1DeploymentTemplate.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: 'datetime'):
        """Sets the updated_at of this V1DeploymentTemplate.


        :param updated_at: The updated_at of this V1DeploymentTemplate.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def user_id(self) -> 'str':
        """Gets the user_id of this V1DeploymentTemplate.  # noqa: E501


        :return: The user_id of this V1DeploymentTemplate.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: 'str'):
        """Sets the user_id of this V1DeploymentTemplate.


        :param user_id: The user_id of this V1DeploymentTemplate.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1DeploymentTemplate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1DeploymentTemplate') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1DeploymentTemplate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1DeploymentTemplate') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
