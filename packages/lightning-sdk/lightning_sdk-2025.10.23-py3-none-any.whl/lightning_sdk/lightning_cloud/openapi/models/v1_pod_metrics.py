# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1PodMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu_usage': 'float',
        'labels': 'dict(str, str)',
        'max_gpu_temp_recorded': 'int',
        'max_power_per_gpu': 'int',
        'mem_usage': 'float',
        'namespace': 'str',
        'node_name': 'str',
        'num_cpus_limit': 'int',
        'num_cpus_request': 'int',
        'num_gpus': 'int',
        'nvlink_rx_gib': 'dict(str, float)',
        'nvlink_tx_gib': 'dict(str, float)',
        'pcie_rx_gib': 'dict(str, float)',
        'pcie_tx_gib': 'dict(str, float)',
        'per_gpu_mem_used': 'dict(str, int)',
        'per_gpu_power_usage_watts': 'dict(str, int)',
        'per_gpu_sm_active': 'dict(str, float)',
        'per_gpu_sm_occupancy': 'dict(str, float)',
        'per_gpu_temperature_c': 'dict(str, int)',
        'per_gpu_util': 'dict(str, float)',
        'phase': 'str',
        'pod_id': 'str',
        'pod_name': 'str',
        'timestamp': 'datetime',
        'user_id': 'str'
    }

    attribute_map = {
        'cpu_usage': 'cpuUsage',
        'labels': 'labels',
        'max_gpu_temp_recorded': 'maxGpuTempRecorded',
        'max_power_per_gpu': 'maxPowerPerGpu',
        'mem_usage': 'memUsage',
        'namespace': 'namespace',
        'node_name': 'nodeName',
        'num_cpus_limit': 'numCpusLimit',
        'num_cpus_request': 'numCpusRequest',
        'num_gpus': 'numGpus',
        'nvlink_rx_gib': 'nvlinkRxGib',
        'nvlink_tx_gib': 'nvlinkTxGib',
        'pcie_rx_gib': 'pcieRxGib',
        'pcie_tx_gib': 'pcieTxGib',
        'per_gpu_mem_used': 'perGpuMemUsed',
        'per_gpu_power_usage_watts': 'perGpuPowerUsageWatts',
        'per_gpu_sm_active': 'perGpuSmActive',
        'per_gpu_sm_occupancy': 'perGpuSmOccupancy',
        'per_gpu_temperature_c': 'perGpuTemperatureC',
        'per_gpu_util': 'perGpuUtil',
        'phase': 'phase',
        'pod_id': 'podId',
        'pod_name': 'podName',
        'timestamp': 'timestamp',
        'user_id': 'userId'
    }

    def __init__(self, cpu_usage: 'float' =None, labels: 'dict(str, str)' =None, max_gpu_temp_recorded: 'int' =None, max_power_per_gpu: 'int' =None, mem_usage: 'float' =None, namespace: 'str' =None, node_name: 'str' =None, num_cpus_limit: 'int' =None, num_cpus_request: 'int' =None, num_gpus: 'int' =None, nvlink_rx_gib: 'dict(str, float)' =None, nvlink_tx_gib: 'dict(str, float)' =None, pcie_rx_gib: 'dict(str, float)' =None, pcie_tx_gib: 'dict(str, float)' =None, per_gpu_mem_used: 'dict(str, int)' =None, per_gpu_power_usage_watts: 'dict(str, int)' =None, per_gpu_sm_active: 'dict(str, float)' =None, per_gpu_sm_occupancy: 'dict(str, float)' =None, per_gpu_temperature_c: 'dict(str, int)' =None, per_gpu_util: 'dict(str, float)' =None, phase: 'str' =None, pod_id: 'str' =None, pod_name: 'str' =None, timestamp: 'datetime' =None, user_id: 'str' =None):  # noqa: E501
        """V1PodMetrics - a model defined in Swagger"""  # noqa: E501
        self._cpu_usage = None
        self._labels = None
        self._max_gpu_temp_recorded = None
        self._max_power_per_gpu = None
        self._mem_usage = None
        self._namespace = None
        self._node_name = None
        self._num_cpus_limit = None
        self._num_cpus_request = None
        self._num_gpus = None
        self._nvlink_rx_gib = None
        self._nvlink_tx_gib = None
        self._pcie_rx_gib = None
        self._pcie_tx_gib = None
        self._per_gpu_mem_used = None
        self._per_gpu_power_usage_watts = None
        self._per_gpu_sm_active = None
        self._per_gpu_sm_occupancy = None
        self._per_gpu_temperature_c = None
        self._per_gpu_util = None
        self._phase = None
        self._pod_id = None
        self._pod_name = None
        self._timestamp = None
        self._user_id = None
        self.discriminator = None
        if cpu_usage is not None:
            self.cpu_usage = cpu_usage
        if labels is not None:
            self.labels = labels
        if max_gpu_temp_recorded is not None:
            self.max_gpu_temp_recorded = max_gpu_temp_recorded
        if max_power_per_gpu is not None:
            self.max_power_per_gpu = max_power_per_gpu
        if mem_usage is not None:
            self.mem_usage = mem_usage
        if namespace is not None:
            self.namespace = namespace
        if node_name is not None:
            self.node_name = node_name
        if num_cpus_limit is not None:
            self.num_cpus_limit = num_cpus_limit
        if num_cpus_request is not None:
            self.num_cpus_request = num_cpus_request
        if num_gpus is not None:
            self.num_gpus = num_gpus
        if nvlink_rx_gib is not None:
            self.nvlink_rx_gib = nvlink_rx_gib
        if nvlink_tx_gib is not None:
            self.nvlink_tx_gib = nvlink_tx_gib
        if pcie_rx_gib is not None:
            self.pcie_rx_gib = pcie_rx_gib
        if pcie_tx_gib is not None:
            self.pcie_tx_gib = pcie_tx_gib
        if per_gpu_mem_used is not None:
            self.per_gpu_mem_used = per_gpu_mem_used
        if per_gpu_power_usage_watts is not None:
            self.per_gpu_power_usage_watts = per_gpu_power_usage_watts
        if per_gpu_sm_active is not None:
            self.per_gpu_sm_active = per_gpu_sm_active
        if per_gpu_sm_occupancy is not None:
            self.per_gpu_sm_occupancy = per_gpu_sm_occupancy
        if per_gpu_temperature_c is not None:
            self.per_gpu_temperature_c = per_gpu_temperature_c
        if per_gpu_util is not None:
            self.per_gpu_util = per_gpu_util
        if phase is not None:
            self.phase = phase
        if pod_id is not None:
            self.pod_id = pod_id
        if pod_name is not None:
            self.pod_name = pod_name
        if timestamp is not None:
            self.timestamp = timestamp
        if user_id is not None:
            self.user_id = user_id

    @property
    def cpu_usage(self) -> 'float':
        """Gets the cpu_usage of this V1PodMetrics.  # noqa: E501


        :return: The cpu_usage of this V1PodMetrics.  # noqa: E501
        :rtype: float
        """
        return self._cpu_usage

    @cpu_usage.setter
    def cpu_usage(self, cpu_usage: 'float'):
        """Sets the cpu_usage of this V1PodMetrics.


        :param cpu_usage: The cpu_usage of this V1PodMetrics.  # noqa: E501
        :type: float
        """

        self._cpu_usage = cpu_usage

    @property
    def labels(self) -> 'dict(str, str)':
        """Gets the labels of this V1PodMetrics.  # noqa: E501


        :return: The labels of this V1PodMetrics.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels: 'dict(str, str)'):
        """Sets the labels of this V1PodMetrics.


        :param labels: The labels of this V1PodMetrics.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def max_gpu_temp_recorded(self) -> 'int':
        """Gets the max_gpu_temp_recorded of this V1PodMetrics.  # noqa: E501


        :return: The max_gpu_temp_recorded of this V1PodMetrics.  # noqa: E501
        :rtype: int
        """
        return self._max_gpu_temp_recorded

    @max_gpu_temp_recorded.setter
    def max_gpu_temp_recorded(self, max_gpu_temp_recorded: 'int'):
        """Sets the max_gpu_temp_recorded of this V1PodMetrics.


        :param max_gpu_temp_recorded: The max_gpu_temp_recorded of this V1PodMetrics.  # noqa: E501
        :type: int
        """

        self._max_gpu_temp_recorded = max_gpu_temp_recorded

    @property
    def max_power_per_gpu(self) -> 'int':
        """Gets the max_power_per_gpu of this V1PodMetrics.  # noqa: E501


        :return: The max_power_per_gpu of this V1PodMetrics.  # noqa: E501
        :rtype: int
        """
        return self._max_power_per_gpu

    @max_power_per_gpu.setter
    def max_power_per_gpu(self, max_power_per_gpu: 'int'):
        """Sets the max_power_per_gpu of this V1PodMetrics.


        :param max_power_per_gpu: The max_power_per_gpu of this V1PodMetrics.  # noqa: E501
        :type: int
        """

        self._max_power_per_gpu = max_power_per_gpu

    @property
    def mem_usage(self) -> 'float':
        """Gets the mem_usage of this V1PodMetrics.  # noqa: E501


        :return: The mem_usage of this V1PodMetrics.  # noqa: E501
        :rtype: float
        """
        return self._mem_usage

    @mem_usage.setter
    def mem_usage(self, mem_usage: 'float'):
        """Sets the mem_usage of this V1PodMetrics.


        :param mem_usage: The mem_usage of this V1PodMetrics.  # noqa: E501
        :type: float
        """

        self._mem_usage = mem_usage

    @property
    def namespace(self) -> 'str':
        """Gets the namespace of this V1PodMetrics.  # noqa: E501


        :return: The namespace of this V1PodMetrics.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace: 'str'):
        """Sets the namespace of this V1PodMetrics.


        :param namespace: The namespace of this V1PodMetrics.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def node_name(self) -> 'str':
        """Gets the node_name of this V1PodMetrics.  # noqa: E501


        :return: The node_name of this V1PodMetrics.  # noqa: E501
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name: 'str'):
        """Sets the node_name of this V1PodMetrics.


        :param node_name: The node_name of this V1PodMetrics.  # noqa: E501
        :type: str
        """

        self._node_name = node_name

    @property
    def num_cpus_limit(self) -> 'int':
        """Gets the num_cpus_limit of this V1PodMetrics.  # noqa: E501


        :return: The num_cpus_limit of this V1PodMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_cpus_limit

    @num_cpus_limit.setter
    def num_cpus_limit(self, num_cpus_limit: 'int'):
        """Sets the num_cpus_limit of this V1PodMetrics.


        :param num_cpus_limit: The num_cpus_limit of this V1PodMetrics.  # noqa: E501
        :type: int
        """

        self._num_cpus_limit = num_cpus_limit

    @property
    def num_cpus_request(self) -> 'int':
        """Gets the num_cpus_request of this V1PodMetrics.  # noqa: E501


        :return: The num_cpus_request of this V1PodMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_cpus_request

    @num_cpus_request.setter
    def num_cpus_request(self, num_cpus_request: 'int'):
        """Sets the num_cpus_request of this V1PodMetrics.


        :param num_cpus_request: The num_cpus_request of this V1PodMetrics.  # noqa: E501
        :type: int
        """

        self._num_cpus_request = num_cpus_request

    @property
    def num_gpus(self) -> 'int':
        """Gets the num_gpus of this V1PodMetrics.  # noqa: E501


        :return: The num_gpus of this V1PodMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_gpus

    @num_gpus.setter
    def num_gpus(self, num_gpus: 'int'):
        """Sets the num_gpus of this V1PodMetrics.


        :param num_gpus: The num_gpus of this V1PodMetrics.  # noqa: E501
        :type: int
        """

        self._num_gpus = num_gpus

    @property
    def nvlink_rx_gib(self) -> 'dict(str, float)':
        """Gets the nvlink_rx_gib of this V1PodMetrics.  # noqa: E501


        :return: The nvlink_rx_gib of this V1PodMetrics.  # noqa: E501
        :rtype: dict(str, float)
        """
        return self._nvlink_rx_gib

    @nvlink_rx_gib.setter
    def nvlink_rx_gib(self, nvlink_rx_gib: 'dict(str, float)'):
        """Sets the nvlink_rx_gib of this V1PodMetrics.


        :param nvlink_rx_gib: The nvlink_rx_gib of this V1PodMetrics.  # noqa: E501
        :type: dict(str, float)
        """

        self._nvlink_rx_gib = nvlink_rx_gib

    @property
    def nvlink_tx_gib(self) -> 'dict(str, float)':
        """Gets the nvlink_tx_gib of this V1PodMetrics.  # noqa: E501


        :return: The nvlink_tx_gib of this V1PodMetrics.  # noqa: E501
        :rtype: dict(str, float)
        """
        return self._nvlink_tx_gib

    @nvlink_tx_gib.setter
    def nvlink_tx_gib(self, nvlink_tx_gib: 'dict(str, float)'):
        """Sets the nvlink_tx_gib of this V1PodMetrics.


        :param nvlink_tx_gib: The nvlink_tx_gib of this V1PodMetrics.  # noqa: E501
        :type: dict(str, float)
        """

        self._nvlink_tx_gib = nvlink_tx_gib

    @property
    def pcie_rx_gib(self) -> 'dict(str, float)':
        """Gets the pcie_rx_gib of this V1PodMetrics.  # noqa: E501


        :return: The pcie_rx_gib of this V1PodMetrics.  # noqa: E501
        :rtype: dict(str, float)
        """
        return self._pcie_rx_gib

    @pcie_rx_gib.setter
    def pcie_rx_gib(self, pcie_rx_gib: 'dict(str, float)'):
        """Sets the pcie_rx_gib of this V1PodMetrics.


        :param pcie_rx_gib: The pcie_rx_gib of this V1PodMetrics.  # noqa: E501
        :type: dict(str, float)
        """

        self._pcie_rx_gib = pcie_rx_gib

    @property
    def pcie_tx_gib(self) -> 'dict(str, float)':
        """Gets the pcie_tx_gib of this V1PodMetrics.  # noqa: E501


        :return: The pcie_tx_gib of this V1PodMetrics.  # noqa: E501
        :rtype: dict(str, float)
        """
        return self._pcie_tx_gib

    @pcie_tx_gib.setter
    def pcie_tx_gib(self, pcie_tx_gib: 'dict(str, float)'):
        """Sets the pcie_tx_gib of this V1PodMetrics.


        :param pcie_tx_gib: The pcie_tx_gib of this V1PodMetrics.  # noqa: E501
        :type: dict(str, float)
        """

        self._pcie_tx_gib = pcie_tx_gib

    @property
    def per_gpu_mem_used(self) -> 'dict(str, int)':
        """Gets the per_gpu_mem_used of this V1PodMetrics.  # noqa: E501


        :return: The per_gpu_mem_used of this V1PodMetrics.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._per_gpu_mem_used

    @per_gpu_mem_used.setter
    def per_gpu_mem_used(self, per_gpu_mem_used: 'dict(str, int)'):
        """Sets the per_gpu_mem_used of this V1PodMetrics.


        :param per_gpu_mem_used: The per_gpu_mem_used of this V1PodMetrics.  # noqa: E501
        :type: dict(str, int)
        """

        self._per_gpu_mem_used = per_gpu_mem_used

    @property
    def per_gpu_power_usage_watts(self) -> 'dict(str, int)':
        """Gets the per_gpu_power_usage_watts of this V1PodMetrics.  # noqa: E501


        :return: The per_gpu_power_usage_watts of this V1PodMetrics.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._per_gpu_power_usage_watts

    @per_gpu_power_usage_watts.setter
    def per_gpu_power_usage_watts(self, per_gpu_power_usage_watts: 'dict(str, int)'):
        """Sets the per_gpu_power_usage_watts of this V1PodMetrics.


        :param per_gpu_power_usage_watts: The per_gpu_power_usage_watts of this V1PodMetrics.  # noqa: E501
        :type: dict(str, int)
        """

        self._per_gpu_power_usage_watts = per_gpu_power_usage_watts

    @property
    def per_gpu_sm_active(self) -> 'dict(str, float)':
        """Gets the per_gpu_sm_active of this V1PodMetrics.  # noqa: E501


        :return: The per_gpu_sm_active of this V1PodMetrics.  # noqa: E501
        :rtype: dict(str, float)
        """
        return self._per_gpu_sm_active

    @per_gpu_sm_active.setter
    def per_gpu_sm_active(self, per_gpu_sm_active: 'dict(str, float)'):
        """Sets the per_gpu_sm_active of this V1PodMetrics.


        :param per_gpu_sm_active: The per_gpu_sm_active of this V1PodMetrics.  # noqa: E501
        :type: dict(str, float)
        """

        self._per_gpu_sm_active = per_gpu_sm_active

    @property
    def per_gpu_sm_occupancy(self) -> 'dict(str, float)':
        """Gets the per_gpu_sm_occupancy of this V1PodMetrics.  # noqa: E501


        :return: The per_gpu_sm_occupancy of this V1PodMetrics.  # noqa: E501
        :rtype: dict(str, float)
        """
        return self._per_gpu_sm_occupancy

    @per_gpu_sm_occupancy.setter
    def per_gpu_sm_occupancy(self, per_gpu_sm_occupancy: 'dict(str, float)'):
        """Sets the per_gpu_sm_occupancy of this V1PodMetrics.


        :param per_gpu_sm_occupancy: The per_gpu_sm_occupancy of this V1PodMetrics.  # noqa: E501
        :type: dict(str, float)
        """

        self._per_gpu_sm_occupancy = per_gpu_sm_occupancy

    @property
    def per_gpu_temperature_c(self) -> 'dict(str, int)':
        """Gets the per_gpu_temperature_c of this V1PodMetrics.  # noqa: E501


        :return: The per_gpu_temperature_c of this V1PodMetrics.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._per_gpu_temperature_c

    @per_gpu_temperature_c.setter
    def per_gpu_temperature_c(self, per_gpu_temperature_c: 'dict(str, int)'):
        """Sets the per_gpu_temperature_c of this V1PodMetrics.


        :param per_gpu_temperature_c: The per_gpu_temperature_c of this V1PodMetrics.  # noqa: E501
        :type: dict(str, int)
        """

        self._per_gpu_temperature_c = per_gpu_temperature_c

    @property
    def per_gpu_util(self) -> 'dict(str, float)':
        """Gets the per_gpu_util of this V1PodMetrics.  # noqa: E501


        :return: The per_gpu_util of this V1PodMetrics.  # noqa: E501
        :rtype: dict(str, float)
        """
        return self._per_gpu_util

    @per_gpu_util.setter
    def per_gpu_util(self, per_gpu_util: 'dict(str, float)'):
        """Sets the per_gpu_util of this V1PodMetrics.


        :param per_gpu_util: The per_gpu_util of this V1PodMetrics.  # noqa: E501
        :type: dict(str, float)
        """

        self._per_gpu_util = per_gpu_util

    @property
    def phase(self) -> 'str':
        """Gets the phase of this V1PodMetrics.  # noqa: E501


        :return: The phase of this V1PodMetrics.  # noqa: E501
        :rtype: str
        """
        return self._phase

    @phase.setter
    def phase(self, phase: 'str'):
        """Sets the phase of this V1PodMetrics.


        :param phase: The phase of this V1PodMetrics.  # noqa: E501
        :type: str
        """

        self._phase = phase

    @property
    def pod_id(self) -> 'str':
        """Gets the pod_id of this V1PodMetrics.  # noqa: E501


        :return: The pod_id of this V1PodMetrics.  # noqa: E501
        :rtype: str
        """
        return self._pod_id

    @pod_id.setter
    def pod_id(self, pod_id: 'str'):
        """Sets the pod_id of this V1PodMetrics.


        :param pod_id: The pod_id of this V1PodMetrics.  # noqa: E501
        :type: str
        """

        self._pod_id = pod_id

    @property
    def pod_name(self) -> 'str':
        """Gets the pod_name of this V1PodMetrics.  # noqa: E501


        :return: The pod_name of this V1PodMetrics.  # noqa: E501
        :rtype: str
        """
        return self._pod_name

    @pod_name.setter
    def pod_name(self, pod_name: 'str'):
        """Sets the pod_name of this V1PodMetrics.


        :param pod_name: The pod_name of this V1PodMetrics.  # noqa: E501
        :type: str
        """

        self._pod_name = pod_name

    @property
    def timestamp(self) -> 'datetime':
        """Gets the timestamp of this V1PodMetrics.  # noqa: E501


        :return: The timestamp of this V1PodMetrics.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: 'datetime'):
        """Sets the timestamp of this V1PodMetrics.


        :param timestamp: The timestamp of this V1PodMetrics.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def user_id(self) -> 'str':
        """Gets the user_id of this V1PodMetrics.  # noqa: E501


        :return: The user_id of this V1PodMetrics.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: 'str'):
        """Sets the user_id of this V1PodMetrics.


        :param user_id: The user_id of this V1PodMetrics.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1PodMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1PodMetrics') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1PodMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1PodMetrics') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
