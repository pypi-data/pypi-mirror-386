# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1KubernetesDirectV1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'grafana_dashboard_url': 'str',
        'grafana_namespace': 'str',
        'grafana_service_name': 'str',
        'grafana_service_port': 'str',
        'incident_slack_notifiers': 'list[V1SlackNotifier]',
        'kubeconfig': 'str',
        'kubeconfig_elevated': 'str',
        'skip_user_label_injection': 'bool'
    }

    attribute_map = {
        'grafana_dashboard_url': 'grafanaDashboardUrl',
        'grafana_namespace': 'grafanaNamespace',
        'grafana_service_name': 'grafanaServiceName',
        'grafana_service_port': 'grafanaServicePort',
        'incident_slack_notifiers': 'incidentSlackNotifiers',
        'kubeconfig': 'kubeconfig',
        'kubeconfig_elevated': 'kubeconfigElevated',
        'skip_user_label_injection': 'skipUserLabelInjection'
    }

    def __init__(self, grafana_dashboard_url: 'str' =None, grafana_namespace: 'str' =None, grafana_service_name: 'str' =None, grafana_service_port: 'str' =None, incident_slack_notifiers: 'list[V1SlackNotifier]' =None, kubeconfig: 'str' =None, kubeconfig_elevated: 'str' =None, skip_user_label_injection: 'bool' =None):  # noqa: E501
        """V1KubernetesDirectV1 - a model defined in Swagger"""  # noqa: E501
        self._grafana_dashboard_url = None
        self._grafana_namespace = None
        self._grafana_service_name = None
        self._grafana_service_port = None
        self._incident_slack_notifiers = None
        self._kubeconfig = None
        self._kubeconfig_elevated = None
        self._skip_user_label_injection = None
        self.discriminator = None
        if grafana_dashboard_url is not None:
            self.grafana_dashboard_url = grafana_dashboard_url
        if grafana_namespace is not None:
            self.grafana_namespace = grafana_namespace
        if grafana_service_name is not None:
            self.grafana_service_name = grafana_service_name
        if grafana_service_port is not None:
            self.grafana_service_port = grafana_service_port
        if incident_slack_notifiers is not None:
            self.incident_slack_notifiers = incident_slack_notifiers
        if kubeconfig is not None:
            self.kubeconfig = kubeconfig
        if kubeconfig_elevated is not None:
            self.kubeconfig_elevated = kubeconfig_elevated
        if skip_user_label_injection is not None:
            self.skip_user_label_injection = skip_user_label_injection

    @property
    def grafana_dashboard_url(self) -> 'str':
        """Gets the grafana_dashboard_url of this V1KubernetesDirectV1.  # noqa: E501


        :return: The grafana_dashboard_url of this V1KubernetesDirectV1.  # noqa: E501
        :rtype: str
        """
        return self._grafana_dashboard_url

    @grafana_dashboard_url.setter
    def grafana_dashboard_url(self, grafana_dashboard_url: 'str'):
        """Sets the grafana_dashboard_url of this V1KubernetesDirectV1.


        :param grafana_dashboard_url: The grafana_dashboard_url of this V1KubernetesDirectV1.  # noqa: E501
        :type: str
        """

        self._grafana_dashboard_url = grafana_dashboard_url

    @property
    def grafana_namespace(self) -> 'str':
        """Gets the grafana_namespace of this V1KubernetesDirectV1.  # noqa: E501


        :return: The grafana_namespace of this V1KubernetesDirectV1.  # noqa: E501
        :rtype: str
        """
        return self._grafana_namespace

    @grafana_namespace.setter
    def grafana_namespace(self, grafana_namespace: 'str'):
        """Sets the grafana_namespace of this V1KubernetesDirectV1.


        :param grafana_namespace: The grafana_namespace of this V1KubernetesDirectV1.  # noqa: E501
        :type: str
        """

        self._grafana_namespace = grafana_namespace

    @property
    def grafana_service_name(self) -> 'str':
        """Gets the grafana_service_name of this V1KubernetesDirectV1.  # noqa: E501


        :return: The grafana_service_name of this V1KubernetesDirectV1.  # noqa: E501
        :rtype: str
        """
        return self._grafana_service_name

    @grafana_service_name.setter
    def grafana_service_name(self, grafana_service_name: 'str'):
        """Sets the grafana_service_name of this V1KubernetesDirectV1.


        :param grafana_service_name: The grafana_service_name of this V1KubernetesDirectV1.  # noqa: E501
        :type: str
        """

        self._grafana_service_name = grafana_service_name

    @property
    def grafana_service_port(self) -> 'str':
        """Gets the grafana_service_port of this V1KubernetesDirectV1.  # noqa: E501


        :return: The grafana_service_port of this V1KubernetesDirectV1.  # noqa: E501
        :rtype: str
        """
        return self._grafana_service_port

    @grafana_service_port.setter
    def grafana_service_port(self, grafana_service_port: 'str'):
        """Sets the grafana_service_port of this V1KubernetesDirectV1.


        :param grafana_service_port: The grafana_service_port of this V1KubernetesDirectV1.  # noqa: E501
        :type: str
        """

        self._grafana_service_port = grafana_service_port

    @property
    def incident_slack_notifiers(self) -> 'list[V1SlackNotifier]':
        """Gets the incident_slack_notifiers of this V1KubernetesDirectV1.  # noqa: E501


        :return: The incident_slack_notifiers of this V1KubernetesDirectV1.  # noqa: E501
        :rtype: list[V1SlackNotifier]
        """
        return self._incident_slack_notifiers

    @incident_slack_notifiers.setter
    def incident_slack_notifiers(self, incident_slack_notifiers: 'list[V1SlackNotifier]'):
        """Sets the incident_slack_notifiers of this V1KubernetesDirectV1.


        :param incident_slack_notifiers: The incident_slack_notifiers of this V1KubernetesDirectV1.  # noqa: E501
        :type: list[V1SlackNotifier]
        """

        self._incident_slack_notifiers = incident_slack_notifiers

    @property
    def kubeconfig(self) -> 'str':
        """Gets the kubeconfig of this V1KubernetesDirectV1.  # noqa: E501


        :return: The kubeconfig of this V1KubernetesDirectV1.  # noqa: E501
        :rtype: str
        """
        return self._kubeconfig

    @kubeconfig.setter
    def kubeconfig(self, kubeconfig: 'str'):
        """Sets the kubeconfig of this V1KubernetesDirectV1.


        :param kubeconfig: The kubeconfig of this V1KubernetesDirectV1.  # noqa: E501
        :type: str
        """

        self._kubeconfig = kubeconfig

    @property
    def kubeconfig_elevated(self) -> 'str':
        """Gets the kubeconfig_elevated of this V1KubernetesDirectV1.  # noqa: E501


        :return: The kubeconfig_elevated of this V1KubernetesDirectV1.  # noqa: E501
        :rtype: str
        """
        return self._kubeconfig_elevated

    @kubeconfig_elevated.setter
    def kubeconfig_elevated(self, kubeconfig_elevated: 'str'):
        """Sets the kubeconfig_elevated of this V1KubernetesDirectV1.


        :param kubeconfig_elevated: The kubeconfig_elevated of this V1KubernetesDirectV1.  # noqa: E501
        :type: str
        """

        self._kubeconfig_elevated = kubeconfig_elevated

    @property
    def skip_user_label_injection(self) -> 'bool':
        """Gets the skip_user_label_injection of this V1KubernetesDirectV1.  # noqa: E501


        :return: The skip_user_label_injection of this V1KubernetesDirectV1.  # noqa: E501
        :rtype: bool
        """
        return self._skip_user_label_injection

    @skip_user_label_injection.setter
    def skip_user_label_injection(self, skip_user_label_injection: 'bool'):
        """Sets the skip_user_label_injection of this V1KubernetesDirectV1.


        :param skip_user_label_injection: The skip_user_label_injection of this V1KubernetesDirectV1.  # noqa: E501
        :type: bool
        """

        self._skip_user_label_injection = skip_user_label_injection

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1KubernetesDirectV1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1KubernetesDirectV1') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1KubernetesDirectV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1KubernetesDirectV1') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
