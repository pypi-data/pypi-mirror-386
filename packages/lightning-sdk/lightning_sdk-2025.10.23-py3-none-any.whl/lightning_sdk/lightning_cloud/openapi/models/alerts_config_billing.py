# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class AlertsConfigBilling(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_replenish': 'list[V1AlertMethod]',
        'balance_threshold': 'int',
        'low_balance': 'list[V1AlertMethod]'
    }

    attribute_map = {
        'auto_replenish': 'autoReplenish',
        'balance_threshold': 'balanceThreshold',
        'low_balance': 'lowBalance'
    }

    def __init__(self, auto_replenish: 'list[V1AlertMethod]' =None, balance_threshold: 'int' =None, low_balance: 'list[V1AlertMethod]' =None):  # noqa: E501
        """AlertsConfigBilling - a model defined in Swagger"""  # noqa: E501
        self._auto_replenish = None
        self._balance_threshold = None
        self._low_balance = None
        self.discriminator = None
        if auto_replenish is not None:
            self.auto_replenish = auto_replenish
        if balance_threshold is not None:
            self.balance_threshold = balance_threshold
        if low_balance is not None:
            self.low_balance = low_balance

    @property
    def auto_replenish(self) -> 'list[V1AlertMethod]':
        """Gets the auto_replenish of this AlertsConfigBilling.  # noqa: E501


        :return: The auto_replenish of this AlertsConfigBilling.  # noqa: E501
        :rtype: list[V1AlertMethod]
        """
        return self._auto_replenish

    @auto_replenish.setter
    def auto_replenish(self, auto_replenish: 'list[V1AlertMethod]'):
        """Sets the auto_replenish of this AlertsConfigBilling.


        :param auto_replenish: The auto_replenish of this AlertsConfigBilling.  # noqa: E501
        :type: list[V1AlertMethod]
        """

        self._auto_replenish = auto_replenish

    @property
    def balance_threshold(self) -> 'int':
        """Gets the balance_threshold of this AlertsConfigBilling.  # noqa: E501


        :return: The balance_threshold of this AlertsConfigBilling.  # noqa: E501
        :rtype: int
        """
        return self._balance_threshold

    @balance_threshold.setter
    def balance_threshold(self, balance_threshold: 'int'):
        """Sets the balance_threshold of this AlertsConfigBilling.


        :param balance_threshold: The balance_threshold of this AlertsConfigBilling.  # noqa: E501
        :type: int
        """

        self._balance_threshold = balance_threshold

    @property
    def low_balance(self) -> 'list[V1AlertMethod]':
        """Gets the low_balance of this AlertsConfigBilling.  # noqa: E501


        :return: The low_balance of this AlertsConfigBilling.  # noqa: E501
        :rtype: list[V1AlertMethod]
        """
        return self._low_balance

    @low_balance.setter
    def low_balance(self, low_balance: 'list[V1AlertMethod]'):
        """Sets the low_balance of this AlertsConfigBilling.


        :param low_balance: The low_balance of this AlertsConfigBilling.  # noqa: E501
        :type: list[V1AlertMethod]
        """

        self._low_balance = low_balance

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertsConfigBilling, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'AlertsConfigBilling') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertsConfigBilling):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'AlertsConfigBilling') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
