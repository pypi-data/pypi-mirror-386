# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1CreateCheckoutSessionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'capture_method': 'str',
        'gclid': 'str',
        'org_id': 'str',
        'project_id': 'str',
        'redirect_url_cancelled': 'str',
        'redirect_url_succeeded': 'str',
        'transaction_type': 'str',
        'wallet_type': 'CreateCheckoutSessionRequestWalletType'
    }

    attribute_map = {
        'amount': 'amount',
        'capture_method': 'captureMethod',
        'gclid': 'gclid',
        'org_id': 'orgId',
        'project_id': 'projectId',
        'redirect_url_cancelled': 'redirectUrlCancelled',
        'redirect_url_succeeded': 'redirectUrlSucceeded',
        'transaction_type': 'transactionType',
        'wallet_type': 'walletType'
    }

    def __init__(self, amount: 'float' =None, capture_method: 'str' =None, gclid: 'str' =None, org_id: 'str' =None, project_id: 'str' =None, redirect_url_cancelled: 'str' =None, redirect_url_succeeded: 'str' =None, transaction_type: 'str' =None, wallet_type: 'CreateCheckoutSessionRequestWalletType' =None):  # noqa: E501
        """V1CreateCheckoutSessionRequest - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._capture_method = None
        self._gclid = None
        self._org_id = None
        self._project_id = None
        self._redirect_url_cancelled = None
        self._redirect_url_succeeded = None
        self._transaction_type = None
        self._wallet_type = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if capture_method is not None:
            self.capture_method = capture_method
        if gclid is not None:
            self.gclid = gclid
        if org_id is not None:
            self.org_id = org_id
        if project_id is not None:
            self.project_id = project_id
        if redirect_url_cancelled is not None:
            self.redirect_url_cancelled = redirect_url_cancelled
        if redirect_url_succeeded is not None:
            self.redirect_url_succeeded = redirect_url_succeeded
        if transaction_type is not None:
            self.transaction_type = transaction_type
        if wallet_type is not None:
            self.wallet_type = wallet_type

    @property
    def amount(self) -> 'float':
        """Gets the amount of this V1CreateCheckoutSessionRequest.  # noqa: E501


        :return: The amount of this V1CreateCheckoutSessionRequest.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount: 'float'):
        """Sets the amount of this V1CreateCheckoutSessionRequest.


        :param amount: The amount of this V1CreateCheckoutSessionRequest.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def capture_method(self) -> 'str':
        """Gets the capture_method of this V1CreateCheckoutSessionRequest.  # noqa: E501


        :return: The capture_method of this V1CreateCheckoutSessionRequest.  # noqa: E501
        :rtype: str
        """
        return self._capture_method

    @capture_method.setter
    def capture_method(self, capture_method: 'str'):
        """Sets the capture_method of this V1CreateCheckoutSessionRequest.


        :param capture_method: The capture_method of this V1CreateCheckoutSessionRequest.  # noqa: E501
        :type: str
        """

        self._capture_method = capture_method

    @property
    def gclid(self) -> 'str':
        """Gets the gclid of this V1CreateCheckoutSessionRequest.  # noqa: E501


        :return: The gclid of this V1CreateCheckoutSessionRequest.  # noqa: E501
        :rtype: str
        """
        return self._gclid

    @gclid.setter
    def gclid(self, gclid: 'str'):
        """Sets the gclid of this V1CreateCheckoutSessionRequest.


        :param gclid: The gclid of this V1CreateCheckoutSessionRequest.  # noqa: E501
        :type: str
        """

        self._gclid = gclid

    @property
    def org_id(self) -> 'str':
        """Gets the org_id of this V1CreateCheckoutSessionRequest.  # noqa: E501


        :return: The org_id of this V1CreateCheckoutSessionRequest.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id: 'str'):
        """Sets the org_id of this V1CreateCheckoutSessionRequest.


        :param org_id: The org_id of this V1CreateCheckoutSessionRequest.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def project_id(self) -> 'str':
        """Gets the project_id of this V1CreateCheckoutSessionRequest.  # noqa: E501


        :return: The project_id of this V1CreateCheckoutSessionRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: 'str'):
        """Sets the project_id of this V1CreateCheckoutSessionRequest.


        :param project_id: The project_id of this V1CreateCheckoutSessionRequest.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def redirect_url_cancelled(self) -> 'str':
        """Gets the redirect_url_cancelled of this V1CreateCheckoutSessionRequest.  # noqa: E501


        :return: The redirect_url_cancelled of this V1CreateCheckoutSessionRequest.  # noqa: E501
        :rtype: str
        """
        return self._redirect_url_cancelled

    @redirect_url_cancelled.setter
    def redirect_url_cancelled(self, redirect_url_cancelled: 'str'):
        """Sets the redirect_url_cancelled of this V1CreateCheckoutSessionRequest.


        :param redirect_url_cancelled: The redirect_url_cancelled of this V1CreateCheckoutSessionRequest.  # noqa: E501
        :type: str
        """

        self._redirect_url_cancelled = redirect_url_cancelled

    @property
    def redirect_url_succeeded(self) -> 'str':
        """Gets the redirect_url_succeeded of this V1CreateCheckoutSessionRequest.  # noqa: E501


        :return: The redirect_url_succeeded of this V1CreateCheckoutSessionRequest.  # noqa: E501
        :rtype: str
        """
        return self._redirect_url_succeeded

    @redirect_url_succeeded.setter
    def redirect_url_succeeded(self, redirect_url_succeeded: 'str'):
        """Sets the redirect_url_succeeded of this V1CreateCheckoutSessionRequest.


        :param redirect_url_succeeded: The redirect_url_succeeded of this V1CreateCheckoutSessionRequest.  # noqa: E501
        :type: str
        """

        self._redirect_url_succeeded = redirect_url_succeeded

    @property
    def transaction_type(self) -> 'str':
        """Gets the transaction_type of this V1CreateCheckoutSessionRequest.  # noqa: E501


        :return: The transaction_type of this V1CreateCheckoutSessionRequest.  # noqa: E501
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type: 'str'):
        """Sets the transaction_type of this V1CreateCheckoutSessionRequest.


        :param transaction_type: The transaction_type of this V1CreateCheckoutSessionRequest.  # noqa: E501
        :type: str
        """

        self._transaction_type = transaction_type

    @property
    def wallet_type(self) -> 'CreateCheckoutSessionRequestWalletType':
        """Gets the wallet_type of this V1CreateCheckoutSessionRequest.  # noqa: E501


        :return: The wallet_type of this V1CreateCheckoutSessionRequest.  # noqa: E501
        :rtype: CreateCheckoutSessionRequestWalletType
        """
        return self._wallet_type

    @wallet_type.setter
    def wallet_type(self, wallet_type: 'CreateCheckoutSessionRequestWalletType'):
        """Sets the wallet_type of this V1CreateCheckoutSessionRequest.


        :param wallet_type: The wallet_type of this V1CreateCheckoutSessionRequest.  # noqa: E501
        :type: CreateCheckoutSessionRequestWalletType
        """

        self._wallet_type = wallet_type

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1CreateCheckoutSessionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1CreateCheckoutSessionRequest') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1CreateCheckoutSessionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1CreateCheckoutSessionRequest') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
