# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1NamespaceMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu_util_over_cluster': 'float',
        'cpu_util_over_requested': 'float',
        'cpus_requested': 'float',
        'gpu_util_over_cluster': 'float',
        'gpu_util_over_requested': 'float',
        'gpus_requested': 'float',
        'name': 'str',
        'num_failed_pods': 'int',
        'num_pending_pods': 'int',
        'num_running_pods': 'int',
        'num_succeeded_pods': 'int',
        'num_unknown_pods': 'int',
        'ram_util_over_cluster': 'float',
        'ram_util_over_requested': 'float',
        'rams_requested': 'str',
        'timestamp': 'datetime',
        'vram_requested': 'int',
        'vram_util_over_cluster': 'float',
        'vram_util_over_requested': 'float'
    }

    attribute_map = {
        'cpu_util_over_cluster': 'cpuUtilOverCluster',
        'cpu_util_over_requested': 'cpuUtilOverRequested',
        'cpus_requested': 'cpusRequested',
        'gpu_util_over_cluster': 'gpuUtilOverCluster',
        'gpu_util_over_requested': 'gpuUtilOverRequested',
        'gpus_requested': 'gpusRequested',
        'name': 'name',
        'num_failed_pods': 'numFailedPods',
        'num_pending_pods': 'numPendingPods',
        'num_running_pods': 'numRunningPods',
        'num_succeeded_pods': 'numSucceededPods',
        'num_unknown_pods': 'numUnknownPods',
        'ram_util_over_cluster': 'ramUtilOverCluster',
        'ram_util_over_requested': 'ramUtilOverRequested',
        'rams_requested': 'ramsRequested',
        'timestamp': 'timestamp',
        'vram_requested': 'vramRequested',
        'vram_util_over_cluster': 'vramUtilOverCluster',
        'vram_util_over_requested': 'vramUtilOverRequested'
    }

    def __init__(self, cpu_util_over_cluster: 'float' =None, cpu_util_over_requested: 'float' =None, cpus_requested: 'float' =None, gpu_util_over_cluster: 'float' =None, gpu_util_over_requested: 'float' =None, gpus_requested: 'float' =None, name: 'str' =None, num_failed_pods: 'int' =None, num_pending_pods: 'int' =None, num_running_pods: 'int' =None, num_succeeded_pods: 'int' =None, num_unknown_pods: 'int' =None, ram_util_over_cluster: 'float' =None, ram_util_over_requested: 'float' =None, rams_requested: 'str' =None, timestamp: 'datetime' =None, vram_requested: 'int' =None, vram_util_over_cluster: 'float' =None, vram_util_over_requested: 'float' =None):  # noqa: E501
        """V1NamespaceMetrics - a model defined in Swagger"""  # noqa: E501
        self._cpu_util_over_cluster = None
        self._cpu_util_over_requested = None
        self._cpus_requested = None
        self._gpu_util_over_cluster = None
        self._gpu_util_over_requested = None
        self._gpus_requested = None
        self._name = None
        self._num_failed_pods = None
        self._num_pending_pods = None
        self._num_running_pods = None
        self._num_succeeded_pods = None
        self._num_unknown_pods = None
        self._ram_util_over_cluster = None
        self._ram_util_over_requested = None
        self._rams_requested = None
        self._timestamp = None
        self._vram_requested = None
        self._vram_util_over_cluster = None
        self._vram_util_over_requested = None
        self.discriminator = None
        if cpu_util_over_cluster is not None:
            self.cpu_util_over_cluster = cpu_util_over_cluster
        if cpu_util_over_requested is not None:
            self.cpu_util_over_requested = cpu_util_over_requested
        if cpus_requested is not None:
            self.cpus_requested = cpus_requested
        if gpu_util_over_cluster is not None:
            self.gpu_util_over_cluster = gpu_util_over_cluster
        if gpu_util_over_requested is not None:
            self.gpu_util_over_requested = gpu_util_over_requested
        if gpus_requested is not None:
            self.gpus_requested = gpus_requested
        if name is not None:
            self.name = name
        if num_failed_pods is not None:
            self.num_failed_pods = num_failed_pods
        if num_pending_pods is not None:
            self.num_pending_pods = num_pending_pods
        if num_running_pods is not None:
            self.num_running_pods = num_running_pods
        if num_succeeded_pods is not None:
            self.num_succeeded_pods = num_succeeded_pods
        if num_unknown_pods is not None:
            self.num_unknown_pods = num_unknown_pods
        if ram_util_over_cluster is not None:
            self.ram_util_over_cluster = ram_util_over_cluster
        if ram_util_over_requested is not None:
            self.ram_util_over_requested = ram_util_over_requested
        if rams_requested is not None:
            self.rams_requested = rams_requested
        if timestamp is not None:
            self.timestamp = timestamp
        if vram_requested is not None:
            self.vram_requested = vram_requested
        if vram_util_over_cluster is not None:
            self.vram_util_over_cluster = vram_util_over_cluster
        if vram_util_over_requested is not None:
            self.vram_util_over_requested = vram_util_over_requested

    @property
    def cpu_util_over_cluster(self) -> 'float':
        """Gets the cpu_util_over_cluster of this V1NamespaceMetrics.  # noqa: E501


        :return: The cpu_util_over_cluster of this V1NamespaceMetrics.  # noqa: E501
        :rtype: float
        """
        return self._cpu_util_over_cluster

    @cpu_util_over_cluster.setter
    def cpu_util_over_cluster(self, cpu_util_over_cluster: 'float'):
        """Sets the cpu_util_over_cluster of this V1NamespaceMetrics.


        :param cpu_util_over_cluster: The cpu_util_over_cluster of this V1NamespaceMetrics.  # noqa: E501
        :type: float
        """

        self._cpu_util_over_cluster = cpu_util_over_cluster

    @property
    def cpu_util_over_requested(self) -> 'float':
        """Gets the cpu_util_over_requested of this V1NamespaceMetrics.  # noqa: E501


        :return: The cpu_util_over_requested of this V1NamespaceMetrics.  # noqa: E501
        :rtype: float
        """
        return self._cpu_util_over_requested

    @cpu_util_over_requested.setter
    def cpu_util_over_requested(self, cpu_util_over_requested: 'float'):
        """Sets the cpu_util_over_requested of this V1NamespaceMetrics.


        :param cpu_util_over_requested: The cpu_util_over_requested of this V1NamespaceMetrics.  # noqa: E501
        :type: float
        """

        self._cpu_util_over_requested = cpu_util_over_requested

    @property
    def cpus_requested(self) -> 'float':
        """Gets the cpus_requested of this V1NamespaceMetrics.  # noqa: E501


        :return: The cpus_requested of this V1NamespaceMetrics.  # noqa: E501
        :rtype: float
        """
        return self._cpus_requested

    @cpus_requested.setter
    def cpus_requested(self, cpus_requested: 'float'):
        """Sets the cpus_requested of this V1NamespaceMetrics.


        :param cpus_requested: The cpus_requested of this V1NamespaceMetrics.  # noqa: E501
        :type: float
        """

        self._cpus_requested = cpus_requested

    @property
    def gpu_util_over_cluster(self) -> 'float':
        """Gets the gpu_util_over_cluster of this V1NamespaceMetrics.  # noqa: E501


        :return: The gpu_util_over_cluster of this V1NamespaceMetrics.  # noqa: E501
        :rtype: float
        """
        return self._gpu_util_over_cluster

    @gpu_util_over_cluster.setter
    def gpu_util_over_cluster(self, gpu_util_over_cluster: 'float'):
        """Sets the gpu_util_over_cluster of this V1NamespaceMetrics.


        :param gpu_util_over_cluster: The gpu_util_over_cluster of this V1NamespaceMetrics.  # noqa: E501
        :type: float
        """

        self._gpu_util_over_cluster = gpu_util_over_cluster

    @property
    def gpu_util_over_requested(self) -> 'float':
        """Gets the gpu_util_over_requested of this V1NamespaceMetrics.  # noqa: E501


        :return: The gpu_util_over_requested of this V1NamespaceMetrics.  # noqa: E501
        :rtype: float
        """
        return self._gpu_util_over_requested

    @gpu_util_over_requested.setter
    def gpu_util_over_requested(self, gpu_util_over_requested: 'float'):
        """Sets the gpu_util_over_requested of this V1NamespaceMetrics.


        :param gpu_util_over_requested: The gpu_util_over_requested of this V1NamespaceMetrics.  # noqa: E501
        :type: float
        """

        self._gpu_util_over_requested = gpu_util_over_requested

    @property
    def gpus_requested(self) -> 'float':
        """Gets the gpus_requested of this V1NamespaceMetrics.  # noqa: E501


        :return: The gpus_requested of this V1NamespaceMetrics.  # noqa: E501
        :rtype: float
        """
        return self._gpus_requested

    @gpus_requested.setter
    def gpus_requested(self, gpus_requested: 'float'):
        """Sets the gpus_requested of this V1NamespaceMetrics.


        :param gpus_requested: The gpus_requested of this V1NamespaceMetrics.  # noqa: E501
        :type: float
        """

        self._gpus_requested = gpus_requested

    @property
    def name(self) -> 'str':
        """Gets the name of this V1NamespaceMetrics.  # noqa: E501


        :return: The name of this V1NamespaceMetrics.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1NamespaceMetrics.


        :param name: The name of this V1NamespaceMetrics.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def num_failed_pods(self) -> 'int':
        """Gets the num_failed_pods of this V1NamespaceMetrics.  # noqa: E501


        :return: The num_failed_pods of this V1NamespaceMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_failed_pods

    @num_failed_pods.setter
    def num_failed_pods(self, num_failed_pods: 'int'):
        """Sets the num_failed_pods of this V1NamespaceMetrics.


        :param num_failed_pods: The num_failed_pods of this V1NamespaceMetrics.  # noqa: E501
        :type: int
        """

        self._num_failed_pods = num_failed_pods

    @property
    def num_pending_pods(self) -> 'int':
        """Gets the num_pending_pods of this V1NamespaceMetrics.  # noqa: E501


        :return: The num_pending_pods of this V1NamespaceMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_pending_pods

    @num_pending_pods.setter
    def num_pending_pods(self, num_pending_pods: 'int'):
        """Sets the num_pending_pods of this V1NamespaceMetrics.


        :param num_pending_pods: The num_pending_pods of this V1NamespaceMetrics.  # noqa: E501
        :type: int
        """

        self._num_pending_pods = num_pending_pods

    @property
    def num_running_pods(self) -> 'int':
        """Gets the num_running_pods of this V1NamespaceMetrics.  # noqa: E501


        :return: The num_running_pods of this V1NamespaceMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_running_pods

    @num_running_pods.setter
    def num_running_pods(self, num_running_pods: 'int'):
        """Sets the num_running_pods of this V1NamespaceMetrics.


        :param num_running_pods: The num_running_pods of this V1NamespaceMetrics.  # noqa: E501
        :type: int
        """

        self._num_running_pods = num_running_pods

    @property
    def num_succeeded_pods(self) -> 'int':
        """Gets the num_succeeded_pods of this V1NamespaceMetrics.  # noqa: E501


        :return: The num_succeeded_pods of this V1NamespaceMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_succeeded_pods

    @num_succeeded_pods.setter
    def num_succeeded_pods(self, num_succeeded_pods: 'int'):
        """Sets the num_succeeded_pods of this V1NamespaceMetrics.


        :param num_succeeded_pods: The num_succeeded_pods of this V1NamespaceMetrics.  # noqa: E501
        :type: int
        """

        self._num_succeeded_pods = num_succeeded_pods

    @property
    def num_unknown_pods(self) -> 'int':
        """Gets the num_unknown_pods of this V1NamespaceMetrics.  # noqa: E501


        :return: The num_unknown_pods of this V1NamespaceMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_unknown_pods

    @num_unknown_pods.setter
    def num_unknown_pods(self, num_unknown_pods: 'int'):
        """Sets the num_unknown_pods of this V1NamespaceMetrics.


        :param num_unknown_pods: The num_unknown_pods of this V1NamespaceMetrics.  # noqa: E501
        :type: int
        """

        self._num_unknown_pods = num_unknown_pods

    @property
    def ram_util_over_cluster(self) -> 'float':
        """Gets the ram_util_over_cluster of this V1NamespaceMetrics.  # noqa: E501


        :return: The ram_util_over_cluster of this V1NamespaceMetrics.  # noqa: E501
        :rtype: float
        """
        return self._ram_util_over_cluster

    @ram_util_over_cluster.setter
    def ram_util_over_cluster(self, ram_util_over_cluster: 'float'):
        """Sets the ram_util_over_cluster of this V1NamespaceMetrics.


        :param ram_util_over_cluster: The ram_util_over_cluster of this V1NamespaceMetrics.  # noqa: E501
        :type: float
        """

        self._ram_util_over_cluster = ram_util_over_cluster

    @property
    def ram_util_over_requested(self) -> 'float':
        """Gets the ram_util_over_requested of this V1NamespaceMetrics.  # noqa: E501


        :return: The ram_util_over_requested of this V1NamespaceMetrics.  # noqa: E501
        :rtype: float
        """
        return self._ram_util_over_requested

    @ram_util_over_requested.setter
    def ram_util_over_requested(self, ram_util_over_requested: 'float'):
        """Sets the ram_util_over_requested of this V1NamespaceMetrics.


        :param ram_util_over_requested: The ram_util_over_requested of this V1NamespaceMetrics.  # noqa: E501
        :type: float
        """

        self._ram_util_over_requested = ram_util_over_requested

    @property
    def rams_requested(self) -> 'str':
        """Gets the rams_requested of this V1NamespaceMetrics.  # noqa: E501


        :return: The rams_requested of this V1NamespaceMetrics.  # noqa: E501
        :rtype: str
        """
        return self._rams_requested

    @rams_requested.setter
    def rams_requested(self, rams_requested: 'str'):
        """Sets the rams_requested of this V1NamespaceMetrics.


        :param rams_requested: The rams_requested of this V1NamespaceMetrics.  # noqa: E501
        :type: str
        """

        self._rams_requested = rams_requested

    @property
    def timestamp(self) -> 'datetime':
        """Gets the timestamp of this V1NamespaceMetrics.  # noqa: E501


        :return: The timestamp of this V1NamespaceMetrics.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: 'datetime'):
        """Sets the timestamp of this V1NamespaceMetrics.


        :param timestamp: The timestamp of this V1NamespaceMetrics.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def vram_requested(self) -> 'int':
        """Gets the vram_requested of this V1NamespaceMetrics.  # noqa: E501


        :return: The vram_requested of this V1NamespaceMetrics.  # noqa: E501
        :rtype: int
        """
        return self._vram_requested

    @vram_requested.setter
    def vram_requested(self, vram_requested: 'int'):
        """Sets the vram_requested of this V1NamespaceMetrics.


        :param vram_requested: The vram_requested of this V1NamespaceMetrics.  # noqa: E501
        :type: int
        """

        self._vram_requested = vram_requested

    @property
    def vram_util_over_cluster(self) -> 'float':
        """Gets the vram_util_over_cluster of this V1NamespaceMetrics.  # noqa: E501


        :return: The vram_util_over_cluster of this V1NamespaceMetrics.  # noqa: E501
        :rtype: float
        """
        return self._vram_util_over_cluster

    @vram_util_over_cluster.setter
    def vram_util_over_cluster(self, vram_util_over_cluster: 'float'):
        """Sets the vram_util_over_cluster of this V1NamespaceMetrics.


        :param vram_util_over_cluster: The vram_util_over_cluster of this V1NamespaceMetrics.  # noqa: E501
        :type: float
        """

        self._vram_util_over_cluster = vram_util_over_cluster

    @property
    def vram_util_over_requested(self) -> 'float':
        """Gets the vram_util_over_requested of this V1NamespaceMetrics.  # noqa: E501


        :return: The vram_util_over_requested of this V1NamespaceMetrics.  # noqa: E501
        :rtype: float
        """
        return self._vram_util_over_requested

    @vram_util_over_requested.setter
    def vram_util_over_requested(self, vram_util_over_requested: 'float'):
        """Sets the vram_util_over_requested of this V1NamespaceMetrics.


        :param vram_util_over_requested: The vram_util_over_requested of this V1NamespaceMetrics.  # noqa: E501
        :type: float
        """

        self._vram_util_over_requested = vram_util_over_requested

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1NamespaceMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1NamespaceMetrics') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1NamespaceMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1NamespaceMetrics') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
