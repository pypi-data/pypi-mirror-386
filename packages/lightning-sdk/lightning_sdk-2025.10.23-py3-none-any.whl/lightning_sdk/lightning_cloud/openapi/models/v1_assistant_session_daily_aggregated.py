# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1AssistantSessionDailyAggregated(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'day': 'datetime',
        'model_id': 'str',
        'name': 'str',
        'num_messages': 'int',
        'org_id': 'str',
        'parent_id': 'str',
        'project_id': 'str',
        'total_completion_tokens': 'int',
        'total_cost': 'float',
        'total_prompt_tokens': 'int',
        'user_id': 'str'
    }

    attribute_map = {
        'day': 'day',
        'model_id': 'modelId',
        'name': 'name',
        'num_messages': 'numMessages',
        'org_id': 'orgId',
        'parent_id': 'parentId',
        'project_id': 'projectId',
        'total_completion_tokens': 'totalCompletionTokens',
        'total_cost': 'totalCost',
        'total_prompt_tokens': 'totalPromptTokens',
        'user_id': 'userId'
    }

    def __init__(self, day: 'datetime' =None, model_id: 'str' =None, name: 'str' =None, num_messages: 'int' =None, org_id: 'str' =None, parent_id: 'str' =None, project_id: 'str' =None, total_completion_tokens: 'int' =None, total_cost: 'float' =None, total_prompt_tokens: 'int' =None, user_id: 'str' =None):  # noqa: E501
        """V1AssistantSessionDailyAggregated - a model defined in Swagger"""  # noqa: E501
        self._day = None
        self._model_id = None
        self._name = None
        self._num_messages = None
        self._org_id = None
        self._parent_id = None
        self._project_id = None
        self._total_completion_tokens = None
        self._total_cost = None
        self._total_prompt_tokens = None
        self._user_id = None
        self.discriminator = None
        if day is not None:
            self.day = day
        if model_id is not None:
            self.model_id = model_id
        if name is not None:
            self.name = name
        if num_messages is not None:
            self.num_messages = num_messages
        if org_id is not None:
            self.org_id = org_id
        if parent_id is not None:
            self.parent_id = parent_id
        if project_id is not None:
            self.project_id = project_id
        if total_completion_tokens is not None:
            self.total_completion_tokens = total_completion_tokens
        if total_cost is not None:
            self.total_cost = total_cost
        if total_prompt_tokens is not None:
            self.total_prompt_tokens = total_prompt_tokens
        if user_id is not None:
            self.user_id = user_id

    @property
    def day(self) -> 'datetime':
        """Gets the day of this V1AssistantSessionDailyAggregated.  # noqa: E501


        :return: The day of this V1AssistantSessionDailyAggregated.  # noqa: E501
        :rtype: datetime
        """
        return self._day

    @day.setter
    def day(self, day: 'datetime'):
        """Sets the day of this V1AssistantSessionDailyAggregated.


        :param day: The day of this V1AssistantSessionDailyAggregated.  # noqa: E501
        :type: datetime
        """

        self._day = day

    @property
    def model_id(self) -> 'str':
        """Gets the model_id of this V1AssistantSessionDailyAggregated.  # noqa: E501


        :return: The model_id of this V1AssistantSessionDailyAggregated.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id: 'str'):
        """Sets the model_id of this V1AssistantSessionDailyAggregated.


        :param model_id: The model_id of this V1AssistantSessionDailyAggregated.  # noqa: E501
        :type: str
        """

        self._model_id = model_id

    @property
    def name(self) -> 'str':
        """Gets the name of this V1AssistantSessionDailyAggregated.  # noqa: E501


        :return: The name of this V1AssistantSessionDailyAggregated.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1AssistantSessionDailyAggregated.


        :param name: The name of this V1AssistantSessionDailyAggregated.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def num_messages(self) -> 'int':
        """Gets the num_messages of this V1AssistantSessionDailyAggregated.  # noqa: E501


        :return: The num_messages of this V1AssistantSessionDailyAggregated.  # noqa: E501
        :rtype: int
        """
        return self._num_messages

    @num_messages.setter
    def num_messages(self, num_messages: 'int'):
        """Sets the num_messages of this V1AssistantSessionDailyAggregated.


        :param num_messages: The num_messages of this V1AssistantSessionDailyAggregated.  # noqa: E501
        :type: int
        """

        self._num_messages = num_messages

    @property
    def org_id(self) -> 'str':
        """Gets the org_id of this V1AssistantSessionDailyAggregated.  # noqa: E501


        :return: The org_id of this V1AssistantSessionDailyAggregated.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id: 'str'):
        """Sets the org_id of this V1AssistantSessionDailyAggregated.


        :param org_id: The org_id of this V1AssistantSessionDailyAggregated.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def parent_id(self) -> 'str':
        """Gets the parent_id of this V1AssistantSessionDailyAggregated.  # noqa: E501


        :return: The parent_id of this V1AssistantSessionDailyAggregated.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id: 'str'):
        """Sets the parent_id of this V1AssistantSessionDailyAggregated.


        :param parent_id: The parent_id of this V1AssistantSessionDailyAggregated.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def project_id(self) -> 'str':
        """Gets the project_id of this V1AssistantSessionDailyAggregated.  # noqa: E501


        :return: The project_id of this V1AssistantSessionDailyAggregated.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: 'str'):
        """Sets the project_id of this V1AssistantSessionDailyAggregated.


        :param project_id: The project_id of this V1AssistantSessionDailyAggregated.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def total_completion_tokens(self) -> 'int':
        """Gets the total_completion_tokens of this V1AssistantSessionDailyAggregated.  # noqa: E501


        :return: The total_completion_tokens of this V1AssistantSessionDailyAggregated.  # noqa: E501
        :rtype: int
        """
        return self._total_completion_tokens

    @total_completion_tokens.setter
    def total_completion_tokens(self, total_completion_tokens: 'int'):
        """Sets the total_completion_tokens of this V1AssistantSessionDailyAggregated.


        :param total_completion_tokens: The total_completion_tokens of this V1AssistantSessionDailyAggregated.  # noqa: E501
        :type: int
        """

        self._total_completion_tokens = total_completion_tokens

    @property
    def total_cost(self) -> 'float':
        """Gets the total_cost of this V1AssistantSessionDailyAggregated.  # noqa: E501


        :return: The total_cost of this V1AssistantSessionDailyAggregated.  # noqa: E501
        :rtype: float
        """
        return self._total_cost

    @total_cost.setter
    def total_cost(self, total_cost: 'float'):
        """Sets the total_cost of this V1AssistantSessionDailyAggregated.


        :param total_cost: The total_cost of this V1AssistantSessionDailyAggregated.  # noqa: E501
        :type: float
        """

        self._total_cost = total_cost

    @property
    def total_prompt_tokens(self) -> 'int':
        """Gets the total_prompt_tokens of this V1AssistantSessionDailyAggregated.  # noqa: E501


        :return: The total_prompt_tokens of this V1AssistantSessionDailyAggregated.  # noqa: E501
        :rtype: int
        """
        return self._total_prompt_tokens

    @total_prompt_tokens.setter
    def total_prompt_tokens(self, total_prompt_tokens: 'int'):
        """Sets the total_prompt_tokens of this V1AssistantSessionDailyAggregated.


        :param total_prompt_tokens: The total_prompt_tokens of this V1AssistantSessionDailyAggregated.  # noqa: E501
        :type: int
        """

        self._total_prompt_tokens = total_prompt_tokens

    @property
    def user_id(self) -> 'str':
        """Gets the user_id of this V1AssistantSessionDailyAggregated.  # noqa: E501


        :return: The user_id of this V1AssistantSessionDailyAggregated.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: 'str'):
        """Sets the user_id of this V1AssistantSessionDailyAggregated.


        :param user_id: The user_id of this V1AssistantSessionDailyAggregated.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1AssistantSessionDailyAggregated, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1AssistantSessionDailyAggregated') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1AssistantSessionDailyAggregated):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1AssistantSessionDailyAggregated') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
