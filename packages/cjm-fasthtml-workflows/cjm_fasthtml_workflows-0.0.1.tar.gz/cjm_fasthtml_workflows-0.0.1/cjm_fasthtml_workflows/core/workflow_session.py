"""Namespaced workflow state management within FastHTML sessions."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/core/workflow_session.ipynb.

# %% auto 0
__all__ = ['WorkflowSession']

# %% ../../nbs/core/workflow_session.ipynb 3
from typing import Dict, Any

# %% ../../nbs/core/workflow_session.ipynb 6
class WorkflowSession:
    """Manage workflow state within FastHTML sessions with proper namespacing."""

    def __init__(
        self, 
        sess:Any, # FastHTML session object (from route handler parameter)
        workflow_id:str # Unique identifier for this workflow (e.g., "registration", "checkout")
    ):
        """Initialize workflow session wrapper."""
        self.sess = sess
        self.workflow_id = workflow_id
        self._prefix = f"workflow_{workflow_id}_"

    def _make_key(
        self, 
        key:str # Key name within workflow namespace
    ) -> str: # Namespaced session key
        """Create namespaced session key."""
        return f"{self._prefix}{key}"

    def set(
        self, 
        key:str, # Key name within this workflow namespace
        value:Any # Value to store (must be JSON-serializable for session storage)
    ) -> None:
        """Store value in workflow session."""
        self.sess[self._make_key(key)] = value

    def get(
        self, 
        key:str, # Key name within this workflow namespace
        default:Any=None # Default value if key not found
    ) -> Any: # Stored value or default
        """Retrieve value from workflow session."""
        return self.sess.get(self._make_key(key), default)

    def delete(
        self, 
        key:str # Key name within this workflow namespace
    ) -> None:
        """Remove value from workflow session."""
        full_key = self._make_key(key)
        if full_key in self.sess:
            del self.sess[full_key]

    def clear(self) -> None:
        """Clear all data for this workflow from session."""
        keys_to_delete = [k for k in self.sess.keys() if k.startswith(self._prefix)]
        for key in keys_to_delete:
            del self.sess[key]

    def get_all(self) -> Dict[str, Any]: # Dictionary mapping original keys to their values
        """Get all workflow data as a dictionary with original (unprefixed) keys."""
        result = {}
        prefix_len = len(self._prefix)
        for key, value in self.sess.items():
            if key.startswith(self._prefix):
                original_key = key[prefix_len:]
                result[original_key] = value
        return result

    def has(
        self, 
        key:str # Key name within this workflow namespace
    ) -> bool: # True if key exists, False otherwise
        """Check if key exists in workflow session."""
        return self._make_key(key) in self.sess
