"""Helper functions for common workflow patterns."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/core/helpers.ipynb.

# %% auto 0
__all__ = ['get_job_session_info', 'once_per_job']

# %% ../../nbs/core/helpers.ipynb 3
from typing import Dict, Any, Optional, Callable, Tuple

from .job_session import JobSessionManager
from .deduplication import DeduplicationTracker

# %% ../../nbs/core/helpers.ipynb 8
def get_job_session_info(
    job_id:str, # Unique job identifier
    job:Any, # Job object (should have attributes like file_name, file_path, plugin_id)
    sess:Any, # FastHTML session object
    fallback_fields:Optional[Dict[str, Any]]=None # Optional additional fallback fields
) -> Tuple[Dict[str, Any], Dict[str, Any]]: # (file_info, plugin_info) dictionaries
    """Retrieve job-related display information from session with fallbacks."""
    if fallback_fields is None:
        fallback_fields = {}

    job_sess = JobSessionManager(sess)
    job_metadata = job_sess.get_job_metadata(job_id, {})

    # File info with fallbacks
    file_info = job_metadata.get("file_info", {})
    if not file_info:
        file_info = {
            "name": getattr(job, "file_name", "unknown"),
            "path": getattr(job, "file_path", ""),
            **fallback_fields.get("file_info", {})
        }

    # Plugin info with fallbacks
    plugin_info = job_metadata.get("plugin_info", {})
    if not plugin_info:
        plugin_info = {
            "title": getattr(job, "plugin_id", "unknown"),
            "id": getattr(job, "plugin_id", "unknown"),
            **fallback_fields.get("plugin_info", {})
        }

    return file_info, plugin_info

# %% ../../nbs/core/helpers.ipynb 15
def once_per_job(
    sess:Any, # FastHTML session object
    job_id:str, # Unique job identifier
    operation:Callable[[], Any], # Callable to execute (should take no arguments)
    tracker_id:str="default_operation" # Unique identifier for this operation type
) -> Optional[Any]: # Result of operation if executed, None if already processed
    """Execute an operation once per job using automatic deduplication."""
    tracker = DeduplicationTracker(sess, tracker_id)

    if tracker.is_processed(job_id):
        return None

    try:
        result = operation()
        tracker.mark_processed(job_id)
        return result
    except Exception as e:
        # Don't mark as processed if operation failed
        raise e
