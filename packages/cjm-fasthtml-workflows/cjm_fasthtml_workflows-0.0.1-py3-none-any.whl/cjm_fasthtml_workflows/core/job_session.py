"""Manage job-related metadata that needs to be accessed across multiple requests."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/core/job_session.ipynb.

# %% auto 0
__all__ = ['JobSessionManager']

# %% ../../nbs/core/job_session.ipynb 3
from typing import Dict, Any, Optional

# %% ../../nbs/core/job_session.ipynb 6
class JobSessionManager:
    """Manage job-related metadata that needs to be accessed across multiple requests."""

    def __init__(
        self, 
        sess:Any, # FastHTML session object
        prefix:str="job" # Prefix for job keys in session
    ):
        """Initialize job session manager."""
        self.sess = sess
        self.prefix = prefix

    def _make_job_key(
        self, 
        job_id:str # Unique job identifier
    ) -> str: # Session key for job metadata
        """Create session key for job metadata."""
        return f"{self.prefix}_{job_id}"

    def store_job_metadata(
        self, 
        job_id:str, # Unique job identifier
        metadata:Dict[str, Any] # Dictionary of metadata to store
    ) -> None:
        """Store metadata for a job."""
        self.sess[self._make_job_key(job_id)] = metadata

    def get_job_metadata(
        self, 
        job_id:str, # Unique job identifier
        default:Optional[Dict[str, Any]]=None # Default value if metadata not found
    ) -> Dict[str, Any]: # Job metadata dictionary
        """Retrieve metadata for a job."""
        if default is None:
            default = {}
        return self.sess.get(self._make_job_key(job_id), default)

    def delete_job_metadata(
        self, 
        job_id:str # Unique job identifier
    ) -> None:
        """Remove metadata for a job."""
        key = self._make_job_key(job_id)
        if key in self.sess:
            del self.sess[key]

    def clear_all_jobs(self) -> None:
        """Clear all job metadata from session."""
        keys_to_delete = [k for k in self.sess.keys() if k.startswith(f"{self.prefix}_")]
        for key in keys_to_delete:
            del self.sess[key]
