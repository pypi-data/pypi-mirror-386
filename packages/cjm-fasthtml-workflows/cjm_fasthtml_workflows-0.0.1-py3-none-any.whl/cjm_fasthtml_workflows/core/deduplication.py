"""Track one-time operations per job to prevent duplicates."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/core/deduplication.ipynb.

# %% auto 0
__all__ = ['DeduplicationTracker']

# %% ../../nbs/core/deduplication.ipynb 3
from typing import Set, Callable, Optional, Any

# %% ../../nbs/core/deduplication.ipynb 6
class DeduplicationTracker:
    """Track one-time operations per job to prevent duplicates."""

    def __init__(
        self, 
        sess:Any, # FastHTML session object
        tracker_id:str # Unique identifier for this tracker (e.g., "saved_jobs", "sent_notifications")
    ):
        """Initialize deduplication tracker."""
        self.sess = sess
        self.tracker_id = tracker_id
        self._key = f"dedup_{tracker_id}"

    def _get_processed_set(self) -> Set[str]: # Set of processed job IDs
        """Get the set of processed job IDs from session."""
        # Session stores as list, we convert to set for O(1) lookup
        processed_list = self.sess.get(self._key, [])
        return set(processed_list)

    def _save_processed_set(
        self, 
        processed:Set[str] # Set of processed job IDs to save
    ) -> None:
        """Save the set of processed job IDs to session."""
        # Convert set to list for JSON serialization
        self.sess[self._key] = list(processed)

    def is_processed(
        self, 
        job_id:str # Unique job identifier
    ) -> bool: # True if job has been marked as processed, False otherwise
        """Check if a job has been processed."""
        return job_id in self._get_processed_set()

    def mark_processed(
        self, 
        job_id:str # Unique job identifier
    ) -> None:
        """Mark a job as processed."""
        processed = self._get_processed_set()
        processed.add(job_id)
        self._save_processed_set(processed)

    def unmark_processed(
        self, 
        job_id:str # Unique job identifier
    ) -> None:
        """Remove processed mark from a job (allows reprocessing)."""
        processed = self._get_processed_set()
        processed.discard(job_id)
        self._save_processed_set(processed)

    def clear_all(self) -> None:
        """Clear all processed job IDs."""
        if self._key in self.sess:
            del self.sess[self._key]

    def get_all_processed(self) -> Set[str]: # Set of job IDs that have been marked as processed
        """Get all processed job IDs."""
        return self._get_processed_set()
