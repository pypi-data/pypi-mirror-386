# Project metadata
# ----------------
[project]
keywords = [
  "perception",
  "computer vision",
  "deep learning",
  "object detection",
  "instance segmentation",
  "semantic segmentation",
]
name = "backbones"
description = "Backbone networks for computer vision research."
readme = "README.md"
requires-python = ">=3.12"
authors = [{ name = "Kurt Stolle", email = "kurt@khws.io" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = [
  "torch >= 2.6.0",
  "torchvision",
  "safetensors",
  "regex",
  "laco",
  "expath",
]
version = "0.0.2"

[project.scripts]
backbones = "backbones._cli:cli.main"

[project.optional-dependencies]
tests = [
  "hypothesis",
  "bandit[toml]",
  "check-manifest",
  "ruff",
  "pre-commit",
  "pytest",
  "pytest-sugar",
  "pytest-xdist",
  "pytest-benchmark",
  "pytest-cov",
  "pytest-mock",
  "pytest-runner",
  "mccabe",
]
timm = ["timm"]
torchvision = ["torchvision"]
notebooks = ["jupyterlab", "ipywidgets", "ipykernel", "ipython-autotime"]
docs = ["sphinx", "sphinx-rtd-theme", "numpydoc"]

# Build system
# ------------
[build-system]
requires = ["uv-build>=0.8.14,<0.9"]
build-backend = "uv_build"

# UV
# --
[tool.uv]
package = true

[tool.uv.build-backend]
module-root = "sources"
module-name = ""
namespace = true

# Pytest
# ------
[tool.pytest.ini_options]
addopts = "--doctest-modules -m 'not integration' -m 'not gpu' --benchmark-disable"
pythonpath = ["sources"]
testpaths = "tests"
junit_family = "xunit2"
junit_suite_name = "tests"
markers = [
  "integration: marks as integration test",
  "notebooks: marks as notebook test",
  "gpu: marks as gpu test",
  "slow: marks tests as slow",
  "unit: fast offline tests",
]

[tool.coverage.run]
branch = true

[tool.coverage.report]
fail_under = 100

[tool.pyright]
pythonPlatform = "Linux"
pythonVersion = "3.12"
# typeCheckingMode = "strict"
include = ["sources"]
exclude = [
  "datasets",
  "dependencies",
  "output",
  "**/prototypes",
  "**/tests",
  "**/__pycache__",
]
executionEnvironments = [{ root = "sources" }]
reportImplicitOverride = "warning"
reportImportCycles = true
reportMatchNotExhaustive = true
reportMissingImports = true
reportMissingTypeStubs = "none"
reportPrivateImportUsage = "none"
reportShadowedImports = true
reportUnusedImport = "none"
reportUnusedVariable = "none"
strictListInference = true
strictSetInference = true

[tool.ruff]
target-version = 'py312'
line-length = 88
fix = true

[tool.ruff.lint]
select = [
  "F",    # PyFlakes
  "E",    # Pycodestyle errors
  "W",    # Pycodestyle warnings
  "B",    # Bugbear
  "C90",  # McCabe Complexity
  "I",    # isort
  "C4",   # Comprehensions
  "EM",   # Error message 
  "ICN",  # Import conventions
  "G",    # Logging format
  "PGH",  # Pygrep
  "Q",    # Quotes
  "PIE",  # PIE
  "PL",   # Pylint
  "PT",   # Pytest style
  "PTH",  # Pathlib
  "RET",  # Return
  "SIM",  # Simplify
  "UP",   # Pyupgrade
  "FURB", # Refurb
  "PYI",  # Pyi
]

[tool.ruff.lint.per-file-ignores]
"**/__init__.py" = ["F403", "F401"]
"**/__init__.pyi" = ["F403", "F401"]

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = "dynamic"
