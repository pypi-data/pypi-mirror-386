name: Build Wheels

on:
  pull_request:
    branches: [ main ]  # Build wheels on PRs to main
  push:
    tags:
      - 'v*'  # Build and publish on version tags
  workflow_dispatch:  # Allow manual trigger

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install black ruff

      - name: Check code formatting with black
        run: black --check src/ tests/

      - name: Lint with ruff
        run: ruff check src/ tests/

  test:
    needs: lint
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake libomp-dev

      - name: Install build dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install cmake libomp

      - name: Install package with C++ extensions
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run tests
        run: pytest tests/ -v

  build_wheels:
    needs: test
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-13, macos-14, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.16.5
        env:
          # Build for Python 3.8-3.12
          CIBW_BUILD: cp38-* cp39-* cp310-* cp311-* cp312-*

          # Skip 32-bit builds and musl (Alpine) - LAP solvers need performance
          CIBW_SKIP: "*-win32 *-manylinux_i686 *-musllinux_*"

          # Use manylinux_2_28 (AlmaLinux 8, newer GCC, not EOL)
          # Falls back to manylinux2014 if needed for older systems
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_28

          # Install OpenMP on macOS
          CIBW_BEFORE_BUILD_MACOS: brew install libomp

          # Install OpenMP on Linux (manylinux_2_28 uses dnf/yum)
          CIBW_BEFORE_BUILD_LINUX: yum install -y libomp-devel || dnf install -y libomp-devel

          # Build with native optimizations on each platform
          # cibuildwheel builds on the actual target architecture, so -march=native is safe
          CIBW_ENVIRONMENT: CMAKE_BUILD_PARALLEL_LEVEL=4

          # Test the wheels
          CIBW_TEST_REQUIRES: pytest numpy scipy
          CIBW_TEST_COMMAND: pytest {project}/tests -v

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # Only upload to PyPI on tagged releases (e.g., v0.1.3)
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true

      - uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
