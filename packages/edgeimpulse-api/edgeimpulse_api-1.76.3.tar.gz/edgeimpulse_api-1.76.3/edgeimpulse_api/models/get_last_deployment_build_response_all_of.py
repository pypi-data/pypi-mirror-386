# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic.v1 import BaseModel, Field, StrictBool
from edgeimpulse_api.models.get_last_deployment_build_response_all_of_last_build import GetLastDeploymentBuildResponseAllOfLastBuild
from edgeimpulse_api.models.project_deployment_target import ProjectDeploymentTarget

class GetLastDeploymentBuildResponseAllOf(BaseModel):
    has_build: StrictBool = Field(..., alias="hasBuild", description="Does the deployment build still exist? (Builds are deleted if they are no longer valid for the project)")
    last_build: Optional[GetLastDeploymentBuildResponseAllOfLastBuild] = Field(None, alias="lastBuild")
    last_deployment_target: Optional[ProjectDeploymentTarget] = Field(None, alias="lastDeploymentTarget")
    __properties = ["hasBuild", "lastBuild", "lastDeploymentTarget"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = False

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self,indent=None) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(),indent=indent)

    @classmethod
    def from_json(cls, json_str: str) -> GetLastDeploymentBuildResponseAllOf:
        """Create an instance of GetLastDeploymentBuildResponseAllOf from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of last_build
        if self.last_build:
            _dict['lastBuild'] = self.last_build.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_deployment_target
        if self.last_deployment_target:
            _dict['lastDeploymentTarget'] = self.last_deployment_target.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetLastDeploymentBuildResponseAllOf:
        """Create an instance of GetLastDeploymentBuildResponseAllOf from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return GetLastDeploymentBuildResponseAllOf.construct(**obj)

        _obj = GetLastDeploymentBuildResponseAllOf.construct(**{
            "has_build": obj.get("hasBuild"),
            "last_build": GetLastDeploymentBuildResponseAllOfLastBuild.from_dict(obj.get("lastBuild")) if obj.get("lastBuild") is not None else None,
            "last_deployment_target": ProjectDeploymentTarget.from_dict(obj.get("lastDeploymentTarget")) if obj.get("lastDeploymentTarget") is not None else None
        })
        return _obj

