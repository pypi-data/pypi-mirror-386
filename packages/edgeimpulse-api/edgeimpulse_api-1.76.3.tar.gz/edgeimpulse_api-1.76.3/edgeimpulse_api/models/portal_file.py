# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic.v1 import BaseModel, Field, StrictInt, StrictStr, validator

class PortalFile(BaseModel):
    name: StrictStr = ...
    added_date: Optional[datetime] = Field(None, alias="addedDate")
    size: Optional[StrictInt] = None
    e_tag: Optional[StrictStr] = Field(None, alias="ETag")
    path: StrictStr = ...
    type: StrictStr = ...
    __properties = ["name", "addedDate", "size", "ETag", "path", "type"]

    @validator('type')
    def type_validate_enum(cls, v):
        if v not in ('folder', 'file'):
            raise ValueError("must validate the enum values ('folder', 'file')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = False

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self,indent=None) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(),indent=indent)

    @classmethod
    def from_json(cls, json_str: str) -> PortalFile:
        """Create an instance of PortalFile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PortalFile:
        """Create an instance of PortalFile from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return PortalFile.construct(**obj)

        _obj = PortalFile.construct(**{
            "name": obj.get("name"),
            "added_date": obj.get("addedDate"),
            "size": obj.get("size"),
            "e_tag": obj.get("ETag"),
            "path": obj.get("path"),
            "type": obj.get("type")
        })
        return _obj

