# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic.v1 import BaseModel, Field, StrictBool, StrictStr, validator

class OptimizeConfigSearchSpaceTemplate(BaseModel):
    identifier: StrictStr = Field(..., description="Search space template identifier")
    classification: Optional[StrictBool] = Field(None, description="Whether a classification block should be added to the search space")
    anomaly: Optional[StrictBool] = Field(None, description="Whether an anomaly block should be added to the search space")
    regression: Optional[StrictBool] = Field(None, description="Whether a regression block should be added to the search space")
    __properties = ["identifier", "classification", "anomaly", "regression"]

    @validator('identifier')
    def identifier_validate_enum(cls, v):
        if v not in ('speech_keyword', 'speech_continuous', 'audio_event', 'audio_continuous', 'visual', 'motion_event', 'motion_continuous', 'audio_syntiant', 'object_detection_bounding_boxes', 'object_detection_centroids', 'visual_ad'):
            raise ValueError("must validate the enum values ('speech_keyword', 'speech_continuous', 'audio_event', 'audio_continuous', 'visual', 'motion_event', 'motion_continuous', 'audio_syntiant', 'object_detection_bounding_boxes', 'object_detection_centroids', 'visual_ad')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = False

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self,indent=None) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(),indent=indent)

    @classmethod
    def from_json(cls, json_str: str) -> OptimizeConfigSearchSpaceTemplate:
        """Create an instance of OptimizeConfigSearchSpaceTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OptimizeConfigSearchSpaceTemplate:
        """Create an instance of OptimizeConfigSearchSpaceTemplate from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return OptimizeConfigSearchSpaceTemplate.construct(**obj)

        _obj = OptimizeConfigSearchSpaceTemplate.construct(**{
            "identifier": obj.get("identifier"),
            "classification": obj.get("classification"),
            "anomaly": obj.get("anomaly"),
            "regression": obj.get("regression")
        })
        return _obj

