# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic.v1 import BaseModel, Field, StrictStr

class TestAddMockModelMonitoringDataRequest(BaseModel):
    deployment_id: float = Field(..., alias="deploymentId")
    interval_ms: float = Field(..., alias="intervalMs")
    data_points_to_generate: float = Field(..., alias="dataPointsToGenerate")
    start_timestamp: Optional[float] = Field(None, alias="startTimestamp")
    devices: Optional[List[StrictStr]] = Field(None, description="Optional list of device IDs to generate data for. If undefined, data will be generated for all existing project devices.")
    __properties = ["deploymentId", "intervalMs", "dataPointsToGenerate", "startTimestamp", "devices"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = False

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self,indent=None) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(),indent=indent)

    @classmethod
    def from_json(cls, json_str: str) -> TestAddMockModelMonitoringDataRequest:
        """Create an instance of TestAddMockModelMonitoringDataRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TestAddMockModelMonitoringDataRequest:
        """Create an instance of TestAddMockModelMonitoringDataRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return TestAddMockModelMonitoringDataRequest.construct(**obj)

        _obj = TestAddMockModelMonitoringDataRequest.construct(**{
            "deployment_id": obj.get("deploymentId"),
            "interval_ms": obj.get("intervalMs"),
            "data_points_to_generate": obj.get("dataPointsToGenerate"),
            "start_timestamp": obj.get("startTimestamp"),
            "devices": obj.get("devices")
        })
        return _obj

