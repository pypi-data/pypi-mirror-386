# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic.v1 import BaseModel, Field, StrictBool, StrictInt

class UpdateWhitelabelInternalRequest(BaseModel):
    organizations_limit: Optional[StrictInt] = Field(None, alias="organizationsLimit", description="The maximum number of organizations that can be created under this white label.")
    disable_public_entities: Optional[StrictBool] = Field(None, alias="disablePublicEntities", description="Controls whether public entities (like projects, user profiles, etc.) are disabled for this whitelabel instance. ")
    disable_marketing_features: Optional[StrictBool] = Field(None, alias="disableMarketingFeatures", description="Controls whether marketing features (marketing cookies, HubSpot tracking, etc.) are disabled for this whitelabel instance. ")
    disable_forum_access: Optional[StrictBool] = Field(None, alias="disableForumAccess", description="Controls whether forum access is disabled for this whitelabel instance. ")
    custom_limits: Optional[Dict[str, Any]] = Field(None, alias="customLimits", description="Custom limits for this whitelabel instance.")
    __properties = ["organizationsLimit", "disablePublicEntities", "disableMarketingFeatures", "disableForumAccess", "customLimits"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = False

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self,indent=None) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(),indent=indent)

    @classmethod
    def from_json(cls, json_str: str) -> UpdateWhitelabelInternalRequest:
        """Create an instance of UpdateWhitelabelInternalRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if organizations_limit (nullable) is None
        if self.organizations_limit is None:
            _dict['organizationsLimit'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateWhitelabelInternalRequest:
        """Create an instance of UpdateWhitelabelInternalRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return UpdateWhitelabelInternalRequest.construct(**obj)

        _obj = UpdateWhitelabelInternalRequest.construct(**{
            "organizations_limit": obj.get("organizationsLimit"),
            "disable_public_entities": obj.get("disablePublicEntities"),
            "disable_marketing_features": obj.get("disableMarketingFeatures"),
            "disable_forum_access": obj.get("disableForumAccess"),
            "custom_limits": obj.get("customLimits")
        })
        return _obj

