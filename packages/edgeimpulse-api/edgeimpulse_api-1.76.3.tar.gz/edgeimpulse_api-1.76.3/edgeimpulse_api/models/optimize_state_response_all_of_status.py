# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json



from pydantic.v1 import BaseModel, Field, StrictInt, StrictStr, validator

class OptimizeStateResponseAllOfStatus(BaseModel):
    num_pending_trials: StrictInt = Field(..., alias="numPendingTrials")
    num_running_trials: StrictInt = Field(..., alias="numRunningTrials")
    num_completed_trials: StrictInt = Field(..., alias="numCompletedTrials")
    num_failed_trials: StrictInt = Field(..., alias="numFailedTrials")
    num_ready_workers: StrictInt = Field(..., alias="numReadyWorkers")
    num_busy_workers: StrictInt = Field(..., alias="numBusyWorkers")
    num_pending_workers: StrictInt = Field(..., alias="numPendingWorkers")
    status: StrictStr = ...
    __properties = ["numPendingTrials", "numRunningTrials", "numCompletedTrials", "numFailedTrials", "numReadyWorkers", "numBusyWorkers", "numPendingWorkers", "status"]

    @validator('status')
    def status_validate_enum(cls, v):
        if v not in ('creating', 'ready', 'running', 'completed'):
            raise ValueError("must validate the enum values ('creating', 'ready', 'running', 'completed')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = False

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self,indent=None) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(),indent=indent)

    @classmethod
    def from_json(cls, json_str: str) -> OptimizeStateResponseAllOfStatus:
        """Create an instance of OptimizeStateResponseAllOfStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OptimizeStateResponseAllOfStatus:
        """Create an instance of OptimizeStateResponseAllOfStatus from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return OptimizeStateResponseAllOfStatus.construct(**obj)

        _obj = OptimizeStateResponseAllOfStatus.construct(**{
            "num_pending_trials": obj.get("numPendingTrials"),
            "num_running_trials": obj.get("numRunningTrials"),
            "num_completed_trials": obj.get("numCompletedTrials"),
            "num_failed_trials": obj.get("numFailedTrials"),
            "num_ready_workers": obj.get("numReadyWorkers"),
            "num_busy_workers": obj.get("numBusyWorkers"),
            "num_pending_workers": obj.get("numPendingWorkers"),
            "status": obj.get("status")
        })
        return _obj

