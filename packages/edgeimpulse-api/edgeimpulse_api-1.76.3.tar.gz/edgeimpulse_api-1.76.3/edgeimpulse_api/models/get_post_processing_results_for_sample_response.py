# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic.v1 import BaseModel, Field, StrictBool, StrictStr, validator
from edgeimpulse_api.models.get_post_processing_results_for_sample_response_all_of_job_is_running import GetPostProcessingResultsForSampleResponseAllOfJobIsRunning
from edgeimpulse_api.models.get_post_processing_results_for_sample_response_all_of_results import GetPostProcessingResultsForSampleResponseAllOfResults

class GetPostProcessingResultsForSampleResponse(BaseModel):
    success: StrictBool = Field(..., description="Whether the operation succeeded")
    error: Optional[StrictStr] = Field(None, description="Optional error description (set if 'success' was false)")
    has_results: StrictStr = Field(..., alias="hasResults")
    results: Optional[GetPostProcessingResultsForSampleResponseAllOfResults] = None
    job_is_running: Optional[GetPostProcessingResultsForSampleResponseAllOfJobIsRunning] = Field(None, alias="jobIsRunning")
    __properties = ["success", "error", "hasResults", "results", "jobIsRunning"]

    @validator('has_results')
    def has_results_validate_enum(cls, v):
        if v not in ('has-results', 'job-is-running', 'no-results'):
            raise ValueError("must validate the enum values ('has-results', 'job-is-running', 'no-results')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = False

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self,indent=None) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(),indent=indent)

    @classmethod
    def from_json(cls, json_str: str) -> GetPostProcessingResultsForSampleResponse:
        """Create an instance of GetPostProcessingResultsForSampleResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of results
        if self.results:
            _dict['results'] = self.results.to_dict()
        # override the default output from pydantic by calling `to_dict()` of job_is_running
        if self.job_is_running:
            _dict['jobIsRunning'] = self.job_is_running.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetPostProcessingResultsForSampleResponse:
        """Create an instance of GetPostProcessingResultsForSampleResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return GetPostProcessingResultsForSampleResponse.construct(**obj)

        _obj = GetPostProcessingResultsForSampleResponse.construct(**{
            "success": obj.get("success"),
            "error": obj.get("error"),
            "has_results": obj.get("hasResults"),
            "results": GetPostProcessingResultsForSampleResponseAllOfResults.from_dict(obj.get("results")) if obj.get("results") is not None else None,
            "job_is_running": GetPostProcessingResultsForSampleResponseAllOfJobIsRunning.from_dict(obj.get("jobIsRunning")) if obj.get("jobIsRunning") is not None else None
        })
        return _obj

