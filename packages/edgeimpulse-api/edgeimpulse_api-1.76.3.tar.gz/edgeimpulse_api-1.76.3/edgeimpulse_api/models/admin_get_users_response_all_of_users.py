# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic.v1 import BaseModel, Field, StrictBool, StrictInt, StrictStr
from edgeimpulse_api.models.user_tier_enum import UserTierEnum

class AdminGetUsersResponseAllOfUsers(BaseModel):
    id: StrictInt = ...
    username: StrictStr = ...
    email: StrictStr = ...
    name: StrictStr = ...
    photo: Optional[StrictStr] = None
    created: datetime = ...
    last_seen: Optional[datetime] = Field(None, alias="lastSeen")
    activated: Optional[StrictBool] = None
    from_evaluation: Optional[StrictBool] = None
    tier: Optional[UserTierEnum] = None
    deleted_date: Optional[datetime] = Field(None, alias="deletedDate")
    __properties = ["id", "username", "email", "name", "photo", "created", "lastSeen", "activated", "from_evaluation", "tier", "deletedDate"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = False

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self,indent=None) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(),indent=indent)

    @classmethod
    def from_json(cls, json_str: str) -> AdminGetUsersResponseAllOfUsers:
        """Create an instance of AdminGetUsersResponseAllOfUsers from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AdminGetUsersResponseAllOfUsers:
        """Create an instance of AdminGetUsersResponseAllOfUsers from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return AdminGetUsersResponseAllOfUsers.construct(**obj)

        _obj = AdminGetUsersResponseAllOfUsers.construct(**{
            "id": obj.get("id"),
            "username": obj.get("username"),
            "email": obj.get("email"),
            "name": obj.get("name"),
            "photo": obj.get("photo"),
            "created": obj.get("created"),
            "last_seen": obj.get("lastSeen"),
            "activated": obj.get("activated"),
            "from_evaluation": obj.get("from_evaluation"),
            "tier": obj.get("tier"),
            "deleted_date": obj.get("deletedDate")
        })
        return _obj

