# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic.v1 import BaseModel, Field, StrictStr

class EnterpriseUpgradeOrTrialExtensionRequest(BaseModel):
    reason: Optional[StrictStr] = Field(None, description="Answer to the question: 'Why is this the right time for your team to invest in edge AI?'. This is optional.")
    use_case: Optional[StrictStr] = Field(None, alias="useCase", description="Answer to the question: 'What best describes your use case?'. This is optional.")
    timeline: Optional[StrictStr] = Field(None, description="Answer to the question: 'What is your timeline for solving your problem?'. This is optional.")
    objective: Optional[StrictStr] = Field(None, description="Answer to the question: 'What are you hoping to achieve with an extension?'. This is optional.")
    trial_id: Optional[float] = Field(None, alias="trialId", description="The user's trial ID. This is optional.")
    __properties = ["reason", "useCase", "timeline", "objective", "trialId"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = False

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self,indent=None) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(),indent=indent)

    @classmethod
    def from_json(cls, json_str: str) -> EnterpriseUpgradeOrTrialExtensionRequest:
        """Create an instance of EnterpriseUpgradeOrTrialExtensionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EnterpriseUpgradeOrTrialExtensionRequest:
        """Create an instance of EnterpriseUpgradeOrTrialExtensionRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return EnterpriseUpgradeOrTrialExtensionRequest.construct(**obj)

        _obj = EnterpriseUpgradeOrTrialExtensionRequest.construct(**{
            "reason": obj.get("reason"),
            "use_case": obj.get("useCase"),
            "timeline": obj.get("timeline"),
            "objective": obj.get("objective"),
            "trial_id": obj.get("trialId")
        })
        return _obj

