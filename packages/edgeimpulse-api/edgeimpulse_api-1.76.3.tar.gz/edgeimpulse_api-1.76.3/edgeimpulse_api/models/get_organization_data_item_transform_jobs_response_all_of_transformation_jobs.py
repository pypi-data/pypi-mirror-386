# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic.v1 import BaseModel, Field, StrictBool, StrictInt, StrictStr

class GetOrganizationDataItemTransformJobsResponseAllOfTransformationJobs(BaseModel):
    id: StrictInt = ...
    transformation_job_id: StrictInt = Field(..., alias="transformationJobId")
    create_project_id: StrictInt = Field(..., alias="createProjectId")
    created: datetime = ...
    job_id: StrictInt = Field(..., alias="jobId")
    job_started: Optional[datetime] = Field(None, alias="jobStarted")
    job_finished: Optional[datetime] = Field(None, alias="jobFinished")
    job_finished_successful: Optional[StrictBool] = Field(None, alias="jobFinishedSuccessful")
    transformation_block_name: StrictStr = Field(..., alias="transformationBlockName")
    pipeline_name: Optional[StrictStr] = Field(None, alias="pipelineName")
    __properties = ["id", "transformationJobId", "createProjectId", "created", "jobId", "jobStarted", "jobFinished", "jobFinishedSuccessful", "transformationBlockName", "pipelineName"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = False

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self,indent=None) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(),indent=indent)

    @classmethod
    def from_json(cls, json_str: str) -> GetOrganizationDataItemTransformJobsResponseAllOfTransformationJobs:
        """Create an instance of GetOrganizationDataItemTransformJobsResponseAllOfTransformationJobs from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetOrganizationDataItemTransformJobsResponseAllOfTransformationJobs:
        """Create an instance of GetOrganizationDataItemTransformJobsResponseAllOfTransformationJobs from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return GetOrganizationDataItemTransformJobsResponseAllOfTransformationJobs.construct(**obj)

        _obj = GetOrganizationDataItemTransformJobsResponseAllOfTransformationJobs.construct(**{
            "id": obj.get("id"),
            "transformation_job_id": obj.get("transformationJobId"),
            "create_project_id": obj.get("createProjectId"),
            "created": obj.get("created"),
            "job_id": obj.get("jobId"),
            "job_started": obj.get("jobStarted"),
            "job_finished": obj.get("jobFinished"),
            "job_finished_successful": obj.get("jobFinishedSuccessful"),
            "transformation_block_name": obj.get("transformationBlockName"),
            "pipeline_name": obj.get("pipelineName")
        })
        return _obj

