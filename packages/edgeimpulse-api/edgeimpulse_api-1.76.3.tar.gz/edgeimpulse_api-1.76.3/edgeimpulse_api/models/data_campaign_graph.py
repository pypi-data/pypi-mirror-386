# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List
from pydantic.v1 import BaseModel, Field, StrictStr
from edgeimpulse_api.models.data_campaign_graph_x_data_inner import DataCampaignGraphXDataInner

class DataCampaignGraph(BaseModel):
    title: StrictStr = ...
    link: StrictStr = ...
    x_data: List[DataCampaignGraphXDataInner] = Field(..., alias="xData")
    y_ticks: List[datetime] = Field(..., alias="yTicks")
    next_update: datetime = Field(..., alias="nextUpdate")
    __properties = ["title", "link", "xData", "yTicks", "nextUpdate"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = False

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self,indent=None) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(),indent=indent)

    @classmethod
    def from_json(cls, json_str: str) -> DataCampaignGraph:
        """Create an instance of DataCampaignGraph from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in x_data (list)
        _items = []
        if self.x_data:
            for _item in self.x_data:
                if _item:
                    _items.append(_item.to_dict())
            _dict['xData'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DataCampaignGraph:
        """Create an instance of DataCampaignGraph from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return DataCampaignGraph.construct(**obj)

        _obj = DataCampaignGraph.construct(**{
            "title": obj.get("title"),
            "link": obj.get("link"),
            "x_data": [DataCampaignGraphXDataInner.from_dict(_item) for _item in obj.get("xData")] if obj.get("xData") is not None else None,
            "y_ticks": obj.get("yTicks"),
            "next_update": obj.get("nextUpdate")
        })
        return _obj

