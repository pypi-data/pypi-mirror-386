# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic.v1 import BaseModel, Field
from edgeimpulse_api.models.organization_info_response_all_of_cli_lists_image_input_scaling_options import OrganizationInfoResponseAllOfCliListsImageInputScalingOptions
from edgeimpulse_api.models.organization_info_response_all_of_cli_lists_object_detection_last_layer_options import OrganizationInfoResponseAllOfCliListsObjectDetectionLastLayerOptions

class OrganizationInfoResponseAllOfCliLists(BaseModel):
    object_detection_last_layer_options: List[OrganizationInfoResponseAllOfCliListsObjectDetectionLastLayerOptions] = Field(..., alias="objectDetectionLastLayerOptions")
    image_input_scaling_options: List[OrganizationInfoResponseAllOfCliListsImageInputScalingOptions] = Field(..., alias="imageInputScalingOptions")
    __properties = ["objectDetectionLastLayerOptions", "imageInputScalingOptions"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = False

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self,indent=None) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(),indent=indent)

    @classmethod
    def from_json(cls, json_str: str) -> OrganizationInfoResponseAllOfCliLists:
        """Create an instance of OrganizationInfoResponseAllOfCliLists from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in object_detection_last_layer_options (list)
        _items = []
        if self.object_detection_last_layer_options:
            for _item in self.object_detection_last_layer_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['objectDetectionLastLayerOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in image_input_scaling_options (list)
        _items = []
        if self.image_input_scaling_options:
            for _item in self.image_input_scaling_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['imageInputScalingOptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrganizationInfoResponseAllOfCliLists:
        """Create an instance of OrganizationInfoResponseAllOfCliLists from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return OrganizationInfoResponseAllOfCliLists.construct(**obj)

        _obj = OrganizationInfoResponseAllOfCliLists.construct(**{
            "object_detection_last_layer_options": [OrganizationInfoResponseAllOfCliListsObjectDetectionLastLayerOptions.from_dict(_item) for _item in obj.get("objectDetectionLastLayerOptions")] if obj.get("objectDetectionLastLayerOptions") is not None else None,
            "image_input_scaling_options": [OrganizationInfoResponseAllOfCliListsImageInputScalingOptions.from_dict(_item) for _item in obj.get("imageInputScalingOptions")] if obj.get("imageInputScalingOptions") is not None else None
        })
        return _obj

