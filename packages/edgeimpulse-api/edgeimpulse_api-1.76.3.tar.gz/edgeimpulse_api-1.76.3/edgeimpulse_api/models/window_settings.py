# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json



from pydantic.v1 import BaseModel, Field, StrictBool, StrictInt

class WindowSettings(BaseModel):
    window_size_ms: float = Field(..., alias="windowSizeMs")
    window_increase_ms: float = Field(..., alias="windowIncreaseMs")
    window_increase_pct: float = Field(..., alias="windowIncreasePct")
    zero_pad_percentage: float = Field(..., alias="zeroPadPercentage")
    window_count: StrictInt = Field(..., alias="windowCount")
    balance_score: float = Field(..., alias="balanceScore")
    valid: StrictBool = ...
    __properties = ["windowSizeMs", "windowIncreaseMs", "windowIncreasePct", "zeroPadPercentage", "windowCount", "balanceScore", "valid"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = False

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self,indent=None) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(),indent=indent)

    @classmethod
    def from_json(cls, json_str: str) -> WindowSettings:
        """Create an instance of WindowSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WindowSettings:
        """Create an instance of WindowSettings from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return WindowSettings.construct(**obj)

        _obj = WindowSettings.construct(**{
            "window_size_ms": obj.get("windowSizeMs"),
            "window_increase_ms": obj.get("windowIncreaseMs"),
            "window_increase_pct": obj.get("windowIncreasePct"),
            "zero_pad_percentage": obj.get("zeroPadPercentage"),
            "window_count": obj.get("windowCount"),
            "balance_score": obj.get("balanceScore"),
            "valid": obj.get("valid")
        })
        return _obj

