# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic.v1 import BaseModel, Field, StrictInt, StrictStr, validator

class TunerTrialBlocksInner(BaseModel):
    id: StrictInt = ...
    last_active: Optional[datetime] = Field(None, alias="lastActive")
    retries: StrictInt = ...
    status: StrictStr = ...
    type: StrictStr = ...
    model_block_index: Optional[StrictInt] = Field(None, alias="modelBlockIndex", description="Index of corresponding DSP/learn block in the impulse model passed to createTrial()")
    __properties = ["id", "lastActive", "retries", "status", "type", "modelBlockIndex"]

    @validator('status')
    def status_validate_enum(cls, v):
        if v not in ('pending', 'running', 'completed', 'failed'):
            raise ValueError("must validate the enum values ('pending', 'running', 'completed', 'failed')")
        return v

    @validator('type')
    def type_validate_enum(cls, v):
        if v not in ('input', 'dsp', 'learn'):
            raise ValueError("must validate the enum values ('input', 'dsp', 'learn')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = False

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self,indent=None) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(),indent=indent)

    @classmethod
    def from_json(cls, json_str: str) -> TunerTrialBlocksInner:
        """Create an instance of TunerTrialBlocksInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TunerTrialBlocksInner:
        """Create an instance of TunerTrialBlocksInner from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return TunerTrialBlocksInner.construct(**obj)

        _obj = TunerTrialBlocksInner.construct(**{
            "id": obj.get("id"),
            "last_active": obj.get("lastActive"),
            "retries": obj.get("retries"),
            "status": obj.get("status"),
            "type": obj.get("type"),
            "model_block_index": obj.get("modelBlockIndex")
        })
        return _obj

