# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic.v1 import BaseModel
from edgeimpulse_api.models.profile_model_info import ProfileModelInfo
from edgeimpulse_api.models.profile_model_table import ProfileModelTable

class GetPretrainedModelResponseAllOfModelProfileInfo(BaseModel):
    float32: Optional[ProfileModelInfo] = None
    int8: Optional[ProfileModelInfo] = None
    table: ProfileModelTable = ...
    __properties = ["float32", "int8", "table"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = False

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self,indent=None) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(),indent=indent)

    @classmethod
    def from_json(cls, json_str: str) -> GetPretrainedModelResponseAllOfModelProfileInfo:
        """Create an instance of GetPretrainedModelResponseAllOfModelProfileInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of float32
        if self.float32:
            _dict['float32'] = self.float32.to_dict()
        # override the default output from pydantic by calling `to_dict()` of int8
        if self.int8:
            _dict['int8'] = self.int8.to_dict()
        # override the default output from pydantic by calling `to_dict()` of table
        if self.table:
            _dict['table'] = self.table.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetPretrainedModelResponseAllOfModelProfileInfo:
        """Create an instance of GetPretrainedModelResponseAllOfModelProfileInfo from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return GetPretrainedModelResponseAllOfModelProfileInfo.construct(**obj)

        _obj = GetPretrainedModelResponseAllOfModelProfileInfo.construct(**{
            "float32": ProfileModelInfo.from_dict(obj.get("float32")) if obj.get("float32") is not None else None,
            "int8": ProfileModelInfo.from_dict(obj.get("int8")) if obj.get("int8") is not None else None,
            "table": ProfileModelTable.from_dict(obj.get("table")) if obj.get("table") is not None else None
        })
        return _obj

