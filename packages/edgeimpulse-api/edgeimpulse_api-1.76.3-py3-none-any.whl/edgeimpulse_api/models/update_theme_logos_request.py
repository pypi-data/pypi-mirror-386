# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic.v1 import BaseModel, Field, StrictStr

class UpdateThemeLogosRequest(BaseModel):
    primary: Optional[StrictStr] = Field(None, description="Primary logo URL")
    primary_white: Optional[StrictStr] = Field(None, alias="primaryWhite", description="Primary logo for dark background URL")
    login: Optional[StrictStr] = Field(None, description="Login logo URL")
    login_white: Optional[StrictStr] = Field(None, alias="loginWhite", description="Login logo for dark background URL")
    mark: Optional[StrictStr] = Field(None, description="Mark URL")
    mark_white: Optional[StrictStr] = Field(None, alias="markWhite", description="Mark for dark background URL")
    device_logo: Optional[StrictStr] = Field(None, alias="deviceLogo", description="Device logo URL")
    __properties = ["primary", "primaryWhite", "login", "loginWhite", "mark", "markWhite", "deviceLogo"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = False

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self,indent=None) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(),indent=indent)

    @classmethod
    def from_json(cls, json_str: str) -> UpdateThemeLogosRequest:
        """Create an instance of UpdateThemeLogosRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateThemeLogosRequest:
        """Create an instance of UpdateThemeLogosRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return UpdateThemeLogosRequest.construct(**obj)

        _obj = UpdateThemeLogosRequest.construct(**{
            "primary": obj.get("primary"),
            "primary_white": obj.get("primaryWhite"),
            "login": obj.get("login"),
            "login_white": obj.get("loginWhite"),
            "mark": obj.get("mark"),
            "mark_white": obj.get("markWhite"),
            "device_logo": obj.get("deviceLogo")
        })
        return _obj

