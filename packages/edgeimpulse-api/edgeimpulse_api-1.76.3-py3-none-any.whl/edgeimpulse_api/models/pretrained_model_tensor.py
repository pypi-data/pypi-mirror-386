# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic.v1 import BaseModel, Field, StrictInt, StrictStr, validator

class PretrainedModelTensor(BaseModel):
    data_type: StrictStr = Field(..., alias="dataType")
    name: StrictStr = ...
    shape: List[StrictInt] = ...
    quantization_scale: Optional[float] = Field(None, alias="quantizationScale")
    quantization_zero_point: Optional[float] = Field(None, alias="quantizationZeroPoint")
    __properties = ["dataType", "name", "shape", "quantizationScale", "quantizationZeroPoint"]

    @validator('data_type')
    def data_type_validate_enum(cls, v):
        if v not in ('int8', 'uint8', 'float32'):
            raise ValueError("must validate the enum values ('int8', 'uint8', 'float32')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = False

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self,indent=None) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(),indent=indent)

    @classmethod
    def from_json(cls, json_str: str) -> PretrainedModelTensor:
        """Create an instance of PretrainedModelTensor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PretrainedModelTensor:
        """Create an instance of PretrainedModelTensor from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return PretrainedModelTensor.construct(**obj)

        _obj = PretrainedModelTensor.construct(**{
            "data_type": obj.get("dataType"),
            "name": obj.get("name"),
            "shape": obj.get("shape"),
            "quantization_scale": obj.get("quantizationScale"),
            "quantization_zero_point": obj.get("quantizationZeroPoint")
        })
        return _obj

