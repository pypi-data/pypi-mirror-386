# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic.v1 import BaseModel, Field, StrictStr, validator
from edgeimpulse_api.models.image_input_resize_mode import ImageInputResizeMode
from edgeimpulse_api.models.image_input_scaling import ImageInputScaling
from edgeimpulse_api.models.image_tensor_format import ImageTensorFormat

class DeployPretrainedModelInputImage(BaseModel):
    input_type: StrictStr = Field(..., alias="inputType")
    input_scaling: Optional[ImageInputScaling] = Field(None, alias="inputScaling")
    resize_mode: Optional[ImageInputResizeMode] = Field(None, alias="resizeMode")
    tensor_format: Optional[ImageTensorFormat] = Field(None, alias="tensorFormat")
    __properties = ["inputType", "inputScaling", "resizeMode", "tensorFormat"]

    @validator('input_type')
    def input_type_validate_enum(cls, v):
        if v not in ('image'):
            raise ValueError("must validate the enum values ('image')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = False

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self,indent=None) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(),indent=indent)

    @classmethod
    def from_json(cls, json_str: str) -> DeployPretrainedModelInputImage:
        """Create an instance of DeployPretrainedModelInputImage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DeployPretrainedModelInputImage:
        """Create an instance of DeployPretrainedModelInputImage from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return DeployPretrainedModelInputImage.construct(**obj)

        _obj = DeployPretrainedModelInputImage.construct(**{
            "input_type": obj.get("inputType"),
            "input_scaling": obj.get("inputScaling"),
            "resize_mode": obj.get("resizeMode"),
            "tensor_format": obj.get("tensorFormat")
        })
        return _obj

