# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic.v1 import BaseModel, Field, StrictStr
from edgeimpulse_api.models.impulse_dsp_block import ImpulseDspBlock
from edgeimpulse_api.models.impulse_input_block import ImpulseInputBlock
from edgeimpulse_api.models.impulse_learn_block import ImpulseLearnBlock
from edgeimpulse_api.models.impulse_post_processing_block import ImpulsePostProcessingBlock
from edgeimpulse_api.models.impulse_type import ImpulseType

class CreateImpulseRequest(BaseModel):
    name: Optional[StrictStr] = Field(None, description="Name for this impulse (optional). If no name is provided one is created based on your blocks.")
    input_blocks: List[ImpulseInputBlock] = Field(..., alias="inputBlocks", description="Input Blocks that are part of this impulse")
    dsp_blocks: List[ImpulseDspBlock] = Field(..., alias="dspBlocks", description="DSP Blocks that are part of this impulse")
    learn_blocks: List[ImpulseLearnBlock] = Field(..., alias="learnBlocks", description="Learning Blocks that are part of this impulse")
    post_processing_blocks: Optional[List[ImpulsePostProcessingBlock]] = Field(None, alias="postProcessingBlocks", description="Post-processing blocks that are part of this impulse")
    type: Optional[ImpulseType] = None
    __properties = ["name", "inputBlocks", "dspBlocks", "learnBlocks", "postProcessingBlocks", "type"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = False

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self,indent=None) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(),indent=indent)

    @classmethod
    def from_json(cls, json_str: str) -> CreateImpulseRequest:
        """Create an instance of CreateImpulseRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in input_blocks (list)
        _items = []
        if self.input_blocks:
            for _item in self.input_blocks:
                if _item:
                    _items.append(_item.to_dict())
            _dict['inputBlocks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dsp_blocks (list)
        _items = []
        if self.dsp_blocks:
            for _item in self.dsp_blocks:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dspBlocks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in learn_blocks (list)
        _items = []
        if self.learn_blocks:
            for _item in self.learn_blocks:
                if _item:
                    _items.append(_item.to_dict())
            _dict['learnBlocks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in post_processing_blocks (list)
        _items = []
        if self.post_processing_blocks:
            for _item in self.post_processing_blocks:
                if _item:
                    _items.append(_item.to_dict())
            _dict['postProcessingBlocks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateImpulseRequest:
        """Create an instance of CreateImpulseRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CreateImpulseRequest.construct(**obj)

        _obj = CreateImpulseRequest.construct(**{
            "name": obj.get("name"),
            "input_blocks": [ImpulseInputBlock.from_dict(_item) for _item in obj.get("inputBlocks")] if obj.get("inputBlocks") is not None else None,
            "dsp_blocks": [ImpulseDspBlock.from_dict(_item) for _item in obj.get("dspBlocks")] if obj.get("dspBlocks") is not None else None,
            "learn_blocks": [ImpulseLearnBlock.from_dict(_item) for _item in obj.get("learnBlocks")] if obj.get("learnBlocks") is not None else None,
            "post_processing_blocks": [ImpulsePostProcessingBlock.from_dict(_item) for _item in obj.get("postProcessingBlocks")] if obj.get("postProcessingBlocks") is not None else None,
            "type": obj.get("type")
        })
        return _obj

