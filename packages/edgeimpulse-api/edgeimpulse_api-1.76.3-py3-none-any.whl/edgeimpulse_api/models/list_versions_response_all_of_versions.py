# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic.v1 import BaseModel, Field, StrictInt, StrictStr
from edgeimpulse_api.models.list_versions_response_all_of_bucket import ListVersionsResponseAllOfBucket
from edgeimpulse_api.models.public_project_license import PublicProjectLicense

class ListVersionsResponseAllOfVersions(BaseModel):
    id: StrictInt = ...
    version: StrictInt = ...
    description: StrictStr = ...
    bucket: ListVersionsResponseAllOfBucket = ...
    created: datetime = ...
    user_id: Optional[StrictInt] = Field(None, alias="userId")
    user_name: Optional[StrictStr] = Field(None, alias="userName")
    user_photo: Optional[StrictStr] = Field(None, alias="userPhoto")
    public_project_id: Optional[StrictInt] = Field(None, alias="publicProjectId")
    public_project_url: Optional[StrictStr] = Field(None, alias="publicProjectUrl")
    training_accuracy: Optional[float] = Field(None, alias="trainingAccuracy", description="Accuracy on training set.")
    test_accuracy: Optional[float] = Field(None, alias="testAccuracy", description="Accuracy on test set.")
    accuracy_based_on_impulse: Optional[StrictStr] = Field(None, alias="accuracyBasedOnImpulse", description="If your project had multiple impulses, this field indicates which impulse was used to calculate the accuracy metrics.")
    total_samples_count: Optional[StrictStr] = Field(None, alias="totalSamplesCount")
    license: Optional[PublicProjectLicense] = None
    __properties = ["id", "version", "description", "bucket", "created", "userId", "userName", "userPhoto", "publicProjectId", "publicProjectUrl", "trainingAccuracy", "testAccuracy", "accuracyBasedOnImpulse", "totalSamplesCount", "license"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = False

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self,indent=None) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(),indent=indent)

    @classmethod
    def from_json(cls, json_str: str) -> ListVersionsResponseAllOfVersions:
        """Create an instance of ListVersionsResponseAllOfVersions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of bucket
        if self.bucket:
            _dict['bucket'] = self.bucket.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ListVersionsResponseAllOfVersions:
        """Create an instance of ListVersionsResponseAllOfVersions from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ListVersionsResponseAllOfVersions.construct(**obj)

        _obj = ListVersionsResponseAllOfVersions.construct(**{
            "id": obj.get("id"),
            "version": obj.get("version"),
            "description": obj.get("description"),
            "bucket": ListVersionsResponseAllOfBucket.from_dict(obj.get("bucket")) if obj.get("bucket") is not None else None,
            "created": obj.get("created"),
            "user_id": obj.get("userId"),
            "user_name": obj.get("userName"),
            "user_photo": obj.get("userPhoto"),
            "public_project_id": obj.get("publicProjectId"),
            "public_project_url": obj.get("publicProjectUrl"),
            "training_accuracy": obj.get("trainingAccuracy"),
            "test_accuracy": obj.get("testAccuracy"),
            "accuracy_based_on_impulse": obj.get("accuracyBasedOnImpulse"),
            "total_samples_count": obj.get("totalSamplesCount"),
            "license": obj.get("license")
        })
        return _obj

