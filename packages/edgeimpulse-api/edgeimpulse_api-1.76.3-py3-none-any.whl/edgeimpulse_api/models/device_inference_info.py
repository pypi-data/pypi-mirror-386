# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic.v1 import BaseModel, Field, StrictInt, StrictStr, validator

class DeviceInferenceInfo(BaseModel):
    project_id: StrictInt = Field(..., alias="projectId")
    project_owner: StrictStr = Field(..., alias="projectOwner")
    project_name: StrictStr = Field(..., alias="projectName")
    deployed_version: StrictInt = Field(..., alias="deployedVersion")
    model_type: Optional[StrictStr] = Field(None, alias="modelType")
    __properties = ["projectId", "projectOwner", "projectName", "deployedVersion", "modelType"]

    @validator('model_type')
    def model_type_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('classification', 'objectDetection', 'constrainedObjectDetection'):
            raise ValueError("must validate the enum values ('classification', 'objectDetection', 'constrainedObjectDetection')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = False

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self,indent=None) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(),indent=indent)

    @classmethod
    def from_json(cls, json_str: str) -> DeviceInferenceInfo:
        """Create an instance of DeviceInferenceInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DeviceInferenceInfo:
        """Create an instance of DeviceInferenceInfo from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return DeviceInferenceInfo.construct(**obj)

        _obj = DeviceInferenceInfo.construct(**{
            "project_id": obj.get("projectId"),
            "project_owner": obj.get("projectOwner"),
            "project_name": obj.get("projectName"),
            "deployed_version": obj.get("deployedVersion"),
            "model_type": obj.get("modelType")
        })
        return _obj

