# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json



from pydantic.v1 import BaseModel, Field, StrictInt, StrictStr

class ListOrganizationBucketsUserResponseAllOfBuckets(BaseModel):
    id: StrictInt = ...
    organization_id: StrictInt = Field(..., alias="organizationId")
    organization_name: StrictStr = Field(..., alias="organizationName")
    bucket: StrictStr = Field(..., description="S3 bucket")
    region: StrictStr = Field(..., description="S3 region")
    whitelabel_id: StrictInt = Field(..., alias="whitelabelId", description="The unique identifier of the white label this bucket belongs to, if any")
    __properties = ["id", "organizationId", "organizationName", "bucket", "region", "whitelabelId"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = False

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self,indent=None) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(),indent=indent)

    @classmethod
    def from_json(cls, json_str: str) -> ListOrganizationBucketsUserResponseAllOfBuckets:
        """Create an instance of ListOrganizationBucketsUserResponseAllOfBuckets from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ListOrganizationBucketsUserResponseAllOfBuckets:
        """Create an instance of ListOrganizationBucketsUserResponseAllOfBuckets from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ListOrganizationBucketsUserResponseAllOfBuckets.construct(**obj)

        _obj = ListOrganizationBucketsUserResponseAllOfBuckets.construct(**{
            "id": obj.get("id"),
            "organization_id": obj.get("organizationId"),
            "organization_name": obj.get("organizationName"),
            "bucket": obj.get("bucket"),
            "region": obj.get("region"),
            "whitelabel_id": obj.get("whitelabelId")
        })
        return _obj

