# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic.v1 import BaseModel, Field, StrictBool, StrictInt, StrictStr
from edgeimpulse_api.models.get_pretrained_model_response_all_of_model_profile_info import GetPretrainedModelResponseAllOfModelProfileInfo
from edgeimpulse_api.models.pretrained_model_tensor import PretrainedModelTensor

class GetPretrainedModelResponseAllOfModel(BaseModel):
    file_name: StrictStr = Field(..., alias="fileName")
    profile_info: Optional[GetPretrainedModelResponseAllOfModelProfileInfo] = Field(None, alias="profileInfo")
    inputs: List[PretrainedModelTensor] = ...
    outputs: List[PretrainedModelTensor] = ...
    profile_job_id: Optional[StrictInt] = Field(None, alias="profileJobId", description="If this is set, then we're still profiling this model. Subscribe to job updates to see when it's done (afterward the metadata will be updated).")
    profile_job_failed: Optional[StrictBool] = Field(None, alias="profileJobFailed", description="If this is set, then the profiling job failed (get the status by getting the job logs for 'profilingJobId').")
    supports_tf_lite: Optional[StrictBool] = Field(None, alias="supportsTFLite")
    __properties = ["fileName", "profileInfo", "inputs", "outputs", "profileJobId", "profileJobFailed", "supportsTFLite"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = False

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self,indent=None) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(),indent=indent)

    @classmethod
    def from_json(cls, json_str: str) -> GetPretrainedModelResponseAllOfModel:
        """Create an instance of GetPretrainedModelResponseAllOfModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of profile_info
        if self.profile_info:
            _dict['profileInfo'] = self.profile_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in inputs (list)
        _items = []
        if self.inputs:
            for _item in self.inputs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['inputs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in outputs (list)
        _items = []
        if self.outputs:
            for _item in self.outputs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['outputs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetPretrainedModelResponseAllOfModel:
        """Create an instance of GetPretrainedModelResponseAllOfModel from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return GetPretrainedModelResponseAllOfModel.construct(**obj)

        _obj = GetPretrainedModelResponseAllOfModel.construct(**{
            "file_name": obj.get("fileName"),
            "profile_info": GetPretrainedModelResponseAllOfModelProfileInfo.from_dict(obj.get("profileInfo")) if obj.get("profileInfo") is not None else None,
            "inputs": [PretrainedModelTensor.from_dict(_item) for _item in obj.get("inputs")] if obj.get("inputs") is not None else None,
            "outputs": [PretrainedModelTensor.from_dict(_item) for _item in obj.get("outputs")] if obj.get("outputs") is not None else None,
            "profile_job_id": obj.get("profileJobId"),
            "profile_job_failed": obj.get("profileJobFailed"),
            "supports_tf_lite": obj.get("supportsTFLite")
        })
        return _obj

