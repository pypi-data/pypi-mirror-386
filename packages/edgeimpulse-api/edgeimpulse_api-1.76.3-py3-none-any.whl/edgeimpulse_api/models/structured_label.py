# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json



from pydantic.v1 import BaseModel, Field, StrictInt, StrictStr

class StructuredLabel(BaseModel):
    start_index: StrictInt = Field(..., alias="startIndex", description="Start index of the label (e.g. 0)")
    end_index: StrictInt = Field(..., alias="endIndex", description="End index of the label (e.g. 3). This value is inclusive, so { startIndex: 0, endIndex: 3 } covers 0, 1, 2, 3.")
    label: StrictStr = Field(..., description="The label for this section.")
    __properties = ["startIndex", "endIndex", "label"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = False

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self,indent=None) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(),indent=indent)

    @classmethod
    def from_json(cls, json_str: str) -> StructuredLabel:
        """Create an instance of StructuredLabel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StructuredLabel:
        """Create an instance of StructuredLabel from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return StructuredLabel.construct(**obj)

        _obj = StructuredLabel.construct(**{
            "start_index": obj.get("startIndex"),
            "end_index": obj.get("endIndex"),
            "label": obj.get("label")
        })
        return _obj

