# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic.v1 import BaseModel, Field, StrictBool, StrictInt, StrictStr
from edgeimpulse_api.models.entitlement_limits import EntitlementLimits

class AdminGetOrganizationsResponseAllOfOrganizations(BaseModel):
    id: StrictInt = ...
    name: StrictStr = ...
    logo: Optional[StrictStr] = None
    created: datetime = ...
    readme: Optional[StrictStr] = None
    experiments: Optional[List[StrictStr]] = None
    domain: Optional[StrictStr] = None
    whitelabel_id: Optional[StrictInt] = Field(None, alias="whitelabelId")
    billable: Optional[StrictBool] = None
    private_project_count: StrictInt = Field(..., alias="privateProjectCount")
    entitlement_limits: Optional[EntitlementLimits] = Field(None, alias="entitlementLimits")
    __properties = ["id", "name", "logo", "created", "readme", "experiments", "domain", "whitelabelId", "billable", "privateProjectCount", "entitlementLimits"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = False

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self,indent=None) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(),indent=indent)

    @classmethod
    def from_json(cls, json_str: str) -> AdminGetOrganizationsResponseAllOfOrganizations:
        """Create an instance of AdminGetOrganizationsResponseAllOfOrganizations from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of entitlement_limits
        if self.entitlement_limits:
            _dict['entitlementLimits'] = self.entitlement_limits.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AdminGetOrganizationsResponseAllOfOrganizations:
        """Create an instance of AdminGetOrganizationsResponseAllOfOrganizations from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return AdminGetOrganizationsResponseAllOfOrganizations.construct(**obj)

        _obj = AdminGetOrganizationsResponseAllOfOrganizations.construct(**{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "logo": obj.get("logo"),
            "created": obj.get("created"),
            "readme": obj.get("readme"),
            "experiments": obj.get("experiments"),
            "domain": obj.get("domain"),
            "whitelabel_id": obj.get("whitelabelId"),
            "billable": obj.get("billable"),
            "private_project_count": obj.get("privateProjectCount"),
            "entitlement_limits": EntitlementLimits.from_dict(obj.get("entitlementLimits")) if obj.get("entitlementLimits") is not None else None
        })
        return _obj

