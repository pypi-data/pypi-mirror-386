# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic.v1 import BaseModel, Field, StrictBool, StrictInt, StrictStr

class UpdateOrganizationRequest(BaseModel):
    logo: Optional[StrictStr] = Field(None, description="New logo URL, or set to `null` to remove the logo.")
    header_img: Optional[StrictStr] = Field(None, alias="headerImg", description="New leader image URL, or set to `null` to remove the leader.")
    show_header_img_mask: Optional[StrictBool] = Field(None, alias="showHeaderImgMask")
    name: Optional[StrictStr] = Field(None, description="New organization name.")
    experiments: Optional[List[StrictStr]] = None
    readme: Optional[StrictStr] = Field(None, description="Readme for the organization (in Markdown)")
    job_limit_m: Optional[StrictInt] = Field(None, alias="jobLimitM", description="New job limit in seconds.")
    __properties = ["logo", "headerImg", "showHeaderImgMask", "name", "experiments", "readme", "jobLimitM"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = False

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self,indent=None) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(),indent=indent)

    @classmethod
    def from_json(cls, json_str: str) -> UpdateOrganizationRequest:
        """Create an instance of UpdateOrganizationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateOrganizationRequest:
        """Create an instance of UpdateOrganizationRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return UpdateOrganizationRequest.construct(**obj)

        _obj = UpdateOrganizationRequest.construct(**{
            "logo": obj.get("logo"),
            "header_img": obj.get("headerImg"),
            "show_header_img_mask": obj.get("showHeaderImgMask"),
            "name": obj.get("name"),
            "experiments": obj.get("experiments"),
            "readme": obj.get("readme"),
            "job_limit_m": obj.get("jobLimitM")
        })
        return _obj

