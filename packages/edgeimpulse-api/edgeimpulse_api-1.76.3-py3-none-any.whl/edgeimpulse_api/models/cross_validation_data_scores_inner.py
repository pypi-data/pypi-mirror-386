# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic.v1 import BaseModel, Field, StrictInt
from edgeimpulse_api.models.sample import Sample

class CrossValidationDataScoresInner(BaseModel):
    id: StrictInt = Field(..., description="The ID of the sample this window belongs to")
    sample: Optional[Sample] = None
    window_start: StrictInt = Field(..., alias="windowStart", description="The start time of this window in milliseconds")
    window_end: StrictInt = Field(..., alias="windowEnd", description="The end time of this window in milliseconds")
    label: StrictInt = Field(..., description="The label of this window, in index form")
    probability: float = Field(..., description="The probability of this window being the label it was assigned, as estimated by a classifier trained on the whole dataset.")
    score: float = Field(..., description="The z-score of the probability with respect to other class members, so that outliers (i.e. windows whose probability is low) can be easily spotted. This assumes that most correctly labelled class members will have a high probability.")
    __properties = ["id", "sample", "windowStart", "windowEnd", "label", "probability", "score"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = False

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self,indent=None) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(),indent=indent)

    @classmethod
    def from_json(cls, json_str: str) -> CrossValidationDataScoresInner:
        """Create an instance of CrossValidationDataScoresInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of sample
        if self.sample:
            _dict['sample'] = self.sample.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CrossValidationDataScoresInner:
        """Create an instance of CrossValidationDataScoresInner from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CrossValidationDataScoresInner.construct(**obj)

        _obj = CrossValidationDataScoresInner.construct(**{
            "id": obj.get("id"),
            "sample": Sample.from_dict(obj.get("sample")) if obj.get("sample") is not None else None,
            "window_start": obj.get("windowStart"),
            "window_end": obj.get("windowEnd"),
            "label": obj.get("label"),
            "probability": obj.get("probability"),
            "score": obj.get("score")
        })
        return _obj

