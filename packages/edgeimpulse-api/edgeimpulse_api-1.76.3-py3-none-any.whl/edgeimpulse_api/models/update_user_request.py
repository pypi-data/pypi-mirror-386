# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic.v1 import BaseModel, Field, StrictStr
from edgeimpulse_api.models.user_projects_sort_order import UserProjectsSortOrder

class UpdateUserRequest(BaseModel):
    name: Optional[StrictStr] = Field(None, description="New full name")
    job_title: Optional[StrictStr] = Field(None, alias="jobTitle", description="New job title")
    company_name: Optional[StrictStr] = Field(None, alias="companyName", description="New company name")
    experiments: Optional[List[StrictStr]] = Field(None, description="List of user experiments")
    projects_sort_order: Optional[UserProjectsSortOrder] = Field(None, alias="projectsSortOrder")
    timezone: Optional[StrictStr] = Field(None, description="User timezone.")
    __properties = ["name", "jobTitle", "companyName", "experiments", "projectsSortOrder", "timezone"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = False

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self,indent=None) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(),indent=indent)

    @classmethod
    def from_json(cls, json_str: str) -> UpdateUserRequest:
        """Create an instance of UpdateUserRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateUserRequest:
        """Create an instance of UpdateUserRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return UpdateUserRequest.construct(**obj)

        _obj = UpdateUserRequest.construct(**{
            "name": obj.get("name"),
            "job_title": obj.get("jobTitle"),
            "company_name": obj.get("companyName"),
            "experiments": obj.get("experiments"),
            "projects_sort_order": obj.get("projectsSortOrder"),
            "timezone": obj.get("timezone")
        })
        return _obj

