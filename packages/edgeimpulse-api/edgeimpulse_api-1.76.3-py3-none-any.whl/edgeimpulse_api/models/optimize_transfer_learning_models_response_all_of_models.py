# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic.v1 import BaseModel, Field
from edgeimpulse_api.models.transfer_learning_model import TransferLearningModel

class OptimizeTransferLearningModelsResponseAllOfModels(BaseModel):
    image: List[TransferLearningModel] = ...
    object_detection: List[TransferLearningModel] = Field(..., alias="objectDetection")
    kws: List[TransferLearningModel] = ...
    regression: List[TransferLearningModel] = ...
    classification: List[TransferLearningModel] = ...
    __properties = ["image", "objectDetection", "kws", "regression", "classification"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = False

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self,indent=None) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(),indent=indent)

    @classmethod
    def from_json(cls, json_str: str) -> OptimizeTransferLearningModelsResponseAllOfModels:
        """Create an instance of OptimizeTransferLearningModelsResponseAllOfModels from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in image (list)
        _items = []
        if self.image:
            for _item in self.image:
                if _item:
                    _items.append(_item.to_dict())
            _dict['image'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in object_detection (list)
        _items = []
        if self.object_detection:
            for _item in self.object_detection:
                if _item:
                    _items.append(_item.to_dict())
            _dict['objectDetection'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in kws (list)
        _items = []
        if self.kws:
            for _item in self.kws:
                if _item:
                    _items.append(_item.to_dict())
            _dict['kws'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in regression (list)
        _items = []
        if self.regression:
            for _item in self.regression:
                if _item:
                    _items.append(_item.to_dict())
            _dict['regression'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in classification (list)
        _items = []
        if self.classification:
            for _item in self.classification:
                if _item:
                    _items.append(_item.to_dict())
            _dict['classification'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OptimizeTransferLearningModelsResponseAllOfModels:
        """Create an instance of OptimizeTransferLearningModelsResponseAllOfModels from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return OptimizeTransferLearningModelsResponseAllOfModels.construct(**obj)

        _obj = OptimizeTransferLearningModelsResponseAllOfModels.construct(**{
            "image": [TransferLearningModel.from_dict(_item) for _item in obj.get("image")] if obj.get("image") is not None else None,
            "object_detection": [TransferLearningModel.from_dict(_item) for _item in obj.get("objectDetection")] if obj.get("objectDetection") is not None else None,
            "kws": [TransferLearningModel.from_dict(_item) for _item in obj.get("kws")] if obj.get("kws") is not None else None,
            "regression": [TransferLearningModel.from_dict(_item) for _item in obj.get("regression")] if obj.get("regression") is not None else None,
            "classification": [TransferLearningModel.from_dict(_item) for _item in obj.get("classification")] if obj.get("classification") is not None else None
        })
        return _obj

