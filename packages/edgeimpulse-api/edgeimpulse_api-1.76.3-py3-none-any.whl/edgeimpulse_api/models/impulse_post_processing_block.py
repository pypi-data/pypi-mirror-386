# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic.v1 import BaseModel, Field, StrictInt, StrictStr, conint

class ImpulsePostProcessingBlock(BaseModel):
    id: conint(strict=True, ge=1) = Field(..., description="Identifier for this block. Make sure to up this number when creating a new block via `getNewBlockId`, and don't re-use identifiers. If the block hasn't changed, keep the ID as-is. ID must be unique across the project and greather than zero (>0).")
    type: StrictStr = Field(..., description="Block type")
    name: StrictStr = Field(..., description="Block name, will be used in menus")
    title: StrictStr = Field(..., description="Block title, used in the impulse UI")
    created_by: Optional[StrictStr] = Field(None, alias="createdBy", description="The system component that created the block version (createImpulse | clone | tuner). Cannot be set via API.")
    created_at: Optional[datetime] = Field(None, alias="createdAt", description="The datetime that the block version was created. Cannot be set via API.")
    implementation_version: StrictInt = Field(..., alias="implementationVersion", description="Implementation version of the block")
    __properties = ["id", "type", "name", "title", "createdBy", "createdAt", "implementationVersion"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = False

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self,indent=None) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(),indent=indent)

    @classmethod
    def from_json(cls, json_str: str) -> ImpulsePostProcessingBlock:
        """Create an instance of ImpulsePostProcessingBlock from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ImpulsePostProcessingBlock:
        """Create an instance of ImpulsePostProcessingBlock from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ImpulsePostProcessingBlock.construct(**obj)

        _obj = ImpulsePostProcessingBlock.construct(**{
            "id": obj.get("id"),
            "type": obj.get("type"),
            "name": obj.get("name"),
            "title": obj.get("title"),
            "created_by": obj.get("createdBy"),
            "created_at": obj.get("createdAt"),
            "implementation_version": obj.get("implementationVersion")
        })
        return _obj

