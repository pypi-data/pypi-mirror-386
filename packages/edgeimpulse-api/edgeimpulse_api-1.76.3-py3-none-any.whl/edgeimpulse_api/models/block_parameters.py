# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic.v1 import BaseModel, Field, StrictStr, ValidationError, validator
from edgeimpulse_api.models.block_params_visual_anomaly_gmm import BlockParamsVisualAnomalyGmm
from edgeimpulse_api.models.block_params_visual_anomaly_patchcore import BlockParamsVisualAnomalyPatchcore
from typing import Any, List
from pydantic.v1 import StrictStr, Field

BLOCKPARAMETERS_ONE_OF_SCHEMAS = ["BlockParamsVisualAnomalyGmm", "BlockParamsVisualAnomalyPatchcore"]

class BlockParameters(BaseModel):
    # data type: BlockParamsVisualAnomalyPatchcore
    oneof_schema_1_validator: Optional[BlockParamsVisualAnomalyPatchcore] = None
    # data type: BlockParamsVisualAnomalyGmm
    oneof_schema_2_validator: Optional[BlockParamsVisualAnomalyGmm] = None
    actual_instance: Any
    one_of_schemas: List[str] = Field(BLOCKPARAMETERS_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = False

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = cls()
        error_messages = []
        match = 0
        # validate data type: BlockParamsVisualAnomalyPatchcore
        if type(v) is not BlockParamsVisualAnomalyPatchcore:
            error_messages.append(f"Error! Input type `{type(v)}` is not `BlockParamsVisualAnomalyPatchcore`")
        else:
            match += 1

        # validate data type: BlockParamsVisualAnomalyGmm
        if type(v) is not BlockParamsVisualAnomalyGmm:
            error_messages.append(f"Error! Input type `{type(v)}` is not `BlockParamsVisualAnomalyGmm`")
        else:
            match += 1

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into BlockParameters with oneOf schemas: BlockParamsVisualAnomalyGmm, BlockParamsVisualAnomalyPatchcore. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into BlockParameters with oneOf schemas: BlockParamsVisualAnomalyGmm, BlockParamsVisualAnomalyPatchcore. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> BlockParameters:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> BlockParameters:
        """Returns the object represented by the json string"""
        instance = cls()
        error_messages = []
        match = 0

        if "BlockParameters" == 'TestPretrainedModelRequestModelInfoInput':
            temp = DeployPretrainedModelInputOther.from_json(json_str)
            if temp.input_type == 'time-series':
                instance.actual_instance = DeployPretrainedModelInputTimeSeries.from_json(json_str)
                match = 1
            elif temp.input_type == 'image':
                instance.actual_instance = DeployPretrainedModelInputImage.from_json(json_str)
                match = 1
            elif temp.input_type == 'audio':
                instance.actual_instance = DeployPretrainedModelInputAudio.from_json(json_str)
                match = 1
            elif temp.input_type == 'other':
                instance.actual_instance = DeployPretrainedModelInputOther.from_json(json_str)
                match = 1
            else:
                raise "Unknown model input"
        elif "BlockParameters" == 'DeployPretrainedModelRequestModelInfoModel':
            temp = DeployPretrainedModelModelClassification.from_json(json_str)
            if temp.model_type == 'classification':
                instance.actual_instance = DeployPretrainedModelModelClassification.from_json(json_str)
                match = 1
            elif temp.model_type == 'regression':
                instance.actual_instance = DeployPretrainedModelModelRegression.from_json(json_str)
                match = 1
            elif temp.model_type == 'object-detection':
                instance.actual_instance = DeployPretrainedModelModelObjectDetection.from_json(json_str)
                match = 1
            else:
                raise "Unknown model type"
        elif "BlockParameters" == 'DeployPretrainedModelRequestModelInfoInput':
            temp = DeployPretrainedModelInputOther.from_json(json_str)
            if temp.input_type == 'time-series':
                instance.actual_instance = DeployPretrainedModelInputTimeSeries.from_json(json_str)
                match = 1
            elif temp.input_type == 'image':
                instance.actual_instance = DeployPretrainedModelInputImage.from_json(json_str)
                match = 1
            elif temp.input_type == 'audio':
                instance.actual_instance = DeployPretrainedModelInputAudio.from_json(json_str)
                match = 1
            elif temp.input_type == 'other':
                instance.actual_instance = DeployPretrainedModelInputOther.from_json(json_str)
                match = 1
            else:
                raise "Unknown model input"
        else:
            raise "No class implemented for oneof"


        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into BlockParameters with oneOf schemas: BlockParamsVisualAnomalyGmm, BlockParamsVisualAnomalyPatchcore. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into BlockParameters with oneOf schemas: BlockParamsVisualAnomalyGmm, BlockParamsVisualAnomalyPatchcore. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self,indent=None) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is not None:
            return self.actual_instance.to_json(indent=indent)
        else:
            return "null"

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is not None:
            return self.actual_instance.to_dict()
        else:
            return dict()

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())

