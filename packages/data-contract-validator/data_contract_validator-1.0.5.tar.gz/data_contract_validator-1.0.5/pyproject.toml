[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "data-contract-validator"
version = "1.0.5"
description = "Critical bug fixes: DBT extractor return paths, function signatures, error handling, and GitHub API rate limiting"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Ogunniran Siji", email = "ogunniransiji@gmail.com"}
]
maintainers = [
    {name = "Ogunniran Siji", email = "ogunniransiji@gmail.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
    "Topic :: Database",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
]
requires-python = ">=3.8"
dependencies = [
    "pydantic>=2.0.0",
    "PyYAML>=6.0",
    "requests>=2.25.0",
    "click>=8.0.0",
]
keywords = [
    "dbt", "fastapi", "contract-testing", "api-validation", 
    "data-engineering", "schema-validation", "ci-cd", "devops"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=4.0.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
    "build>=0.8.0",
    "twine>=4.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.8.0",
]

[project.scripts]
contract-validator = "data_contract_validator.cli:main"
retl-validator = "data_contract_validator.cli:main"

[project.urls]
Homepage = "https://github.com/OGsiji/data-contract-validator"
Documentation = "https://github.com/OGsiji/data-contract-validator/blob/main/README.md"
Repository = "https://github.com/OGsiji/data-contract-validator"
"Bug Reports" = "https://github.com/OGsiji/data-contract-validator/issues"
Changelog = "https://github.com/OGsiji/data-contract-validator/blob/main/CHANGELOG.md"

[tool.setuptools.packages.find]
where = ["."]
include = ["data_contract_validator*"]
exclude = ["tests*", "examples*"]

[tool.setuptools.package-data]
data_contract_validator = [
    "templates/*.yml",
    "templates/*.yaml",
    "py.typed",
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --cov=data_contract_validator --cov-report=term-missing"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
show_error_codes = true
ignore_missing_imports = true

[tool.coverage.run]
source = ["data_contract_validator"]
omit = [
    "*/tests/*",
    "*/examples/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]