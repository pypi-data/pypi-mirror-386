# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from devicetest.controllers.tools.recorder.proto import scrcpy_pb2 as scrcpy__pb2


class ScrcpyServiceStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.onStart = channel.unary_stream(
                '/ScrcpyService/onStart',
                request_serializer=scrcpy__pb2.Empty.SerializeToString,
                response_deserializer=scrcpy__pb2.ReplyMessage.FromString,
                )
        self.onEnd = channel.unary_unary(
                '/ScrcpyService/onEnd',
                request_serializer=scrcpy__pb2.Empty.SerializeToString,
                response_deserializer=scrcpy__pb2.ReplyEndMessage.FromString,
                )
        self.onRequestIDRFrame = channel.unary_unary(
                '/ScrcpyService/onRequestIDRFrame',
                request_serializer=scrcpy__pb2.Empty.SerializeToString,
                response_deserializer=scrcpy__pb2.ReplyEndMessage.FromString,
                )


class ScrcpyServiceServicer(object):
    """The greeting service definition.
    """

    def onStart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def onEnd(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def onRequestIDRFrame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ScrcpyServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'onStart': grpc.unary_stream_rpc_method_handler(
                    servicer.onStart,
                    request_deserializer=scrcpy__pb2.Empty.FromString,
                    response_serializer=scrcpy__pb2.ReplyMessage.SerializeToString,
            ),
            'onEnd': grpc.unary_unary_rpc_method_handler(
                    servicer.onEnd,
                    request_deserializer=scrcpy__pb2.Empty.FromString,
                    response_serializer=scrcpy__pb2.ReplyEndMessage.SerializeToString,
            ),
            'onRequestIDRFrame': grpc.unary_unary_rpc_method_handler(
                    servicer.onRequestIDRFrame,
                    request_deserializer=scrcpy__pb2.Empty.FromString,
                    response_serializer=scrcpy__pb2.ReplyEndMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ScrcpyService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ScrcpyService(object):
    """The greeting service definition.
    """

    @staticmethod
    def onStart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ScrcpyService/onStart',
            scrcpy__pb2.Empty.SerializeToString,
            scrcpy__pb2.ReplyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def onEnd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ScrcpyService/onEnd',
            scrcpy__pb2.Empty.SerializeToString,
            scrcpy__pb2.ReplyEndMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def onRequestIDRFrame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ScrcpyService/onRequestIDRFrame',
            scrcpy__pb2.Empty.SerializeToString,
            scrcpy__pb2.ReplyEndMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
