[project]
name = "cratermaker"
dynamic = ["version"]
authors=[
    {name = 'David A. Minton', email='daminton@purdue.edu'},
]
maintainers = [
    {name = 'David A. Minton', email='daminton@purdue.edu'},
]

readme = "README.md"
requires-python=">=3.10,<3.14"
license={file = "LICENSE"}
classifiers=[
    'Development Status :: 3 - Alpha',
    'Intended Audience :: Science/Research',
    'Topic :: Scientific/Engineering :: Astronomy',
    'License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)',
    'Programming Language :: Python :: 3',
    'Programming Language :: Rust',
    'Operating System :: MacOS',
    'Operating System :: POSIX :: Linux',
]
keywords=['astronomy','astrophysics', 'planetary', 'monte carlo',  'moon', 'landscape evolution']
dependencies = [
    'numpy',
    'dask>=2025.03.0',
    'xarray>=2025.1.2',
    'uxarray>=2025.03.0',
    'vtk>=9.5',
    'scipy',
    'matplotlib',
    'tqdm',
    'pyogrio',
    'trimesh',
    'datashader>=0.17.0',
    'geoviews>=1.14.0',
    'PyYAML>=6',
    'astropy>=6',
]

[project.optional-dependencies]
tests = ["pytest"]
rasterio = ["rasterio"]

[project.urls]
Repository = 'https://github.com/MintonGroup/cratermaker'

[build-system]
requires = [
    "maturin>=1.8,<2.0"
]
build-backend = "maturin"

[tool.maturin]
python-source = "."
include = ["cratermaker/_version.py", "cratermaker/**/*.py", "pyproject.toml", "Cargo.toml"]
features = ["pyo3/extension-module"]
module-name = "cratermaker._cratermaker"

[tool.ruff]
target-version = 'py310'

exclude = [
    "migrations",
    "__pycache__",
    "manage.py",
    "settings.py",
    "env",
    ".env",
    "venv",
    ".venv",
]

line-length = 132

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "D",  # pydocstyle
    "E",  # Error
    "F",  # pyflakes
    "I",  # isort
    "N",  # pep8-naming
    "PGH",  # pygrep-hooks
    "PTH", # flake8-use-pathlib
    "Q",  # flake8-quotes
    "S",  # bandit
    "SIM",  # flake8-simplify
    "TRY",  # tryceratops
    "UP",  # pyupgrade
    "W",  # Warning
    "YTT", # flake8-2020
]

ignore = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "D200",
    "D401",
    "E402",
    "E501",
    "F401",
    "TRY003",  # Avoid specifying messages outside exception class; overly strict, especially for ValueError
    "SIM108", # Don't suggest if else block instead of expression, as it can reduce readability
    "N802", # Allow uppercase functions 
    "N803", # Allow uppercase arguments 
    "N806", # Allow uppercase variable names
]

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = [
    "chr",
    "typer.Argument",
    "typer.Option",
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "S101",  # use of "assert"
    "S102",  # use of "exec"
    "S106",  # possible hardcoded password.
    "PGH001",  # use of "eval"
]

[tool.ruff.lint.pep8-naming]
staticmethod-decorators = [
    "pydantic.validator",
    "pydantic.root_validator",
]
