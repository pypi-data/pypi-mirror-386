Metadata-Version: 2.4
Name: fastapi-qengine
Version: 0.7.0
Summary: fastapi-qengine is an advanced query engine for FastAPI, inspired by Loopback 4's filtering system. It allows building complex queries directly from URLs with a flexible syntax.
Author-email: Uriel Curiel <kratoz.00616@gmail.com>
Project-URL: Repository, https://github.com/urielcuriel/fastapi-qengine
Keywords: fastapi,beanie,mongodb,query,filter,engine
Classifier: Framework :: FastAPI
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Provides-Extra: dev
Requires-Dist: fastapi; extra == "dev"
Requires-Dist: beanie; extra == "dev"
Requires-Dist: pydantic>=2.11.3; extra == "dev"
Requires-Dist: uvicorn[standard]; extra == "dev"
Requires-Dist: fastapi-pagination; extra == "dev"
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: httpx; extra == "dev"
Requires-Dist: pymongo>=4.0.0; extra == "dev"
Requires-Dist: pyrefly; extra == "dev"
Requires-Dist: ruff; extra == "dev"
Requires-Dist: basedpyright>=1.31.7; extra == "dev"
Provides-Extra: test
Requires-Dist: pytest>=7.0.0; extra == "test"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "test"
Requires-Dist: pytest-cov>=4.0.0; extra == "test"
Requires-Dist: httpx; extra == "test"
Provides-Extra: docs
Requires-Dist: pydoc-markdown>=4.8.2; extra == "docs"
Requires-Dist: pydoc-markdown-nuxt==0.2.1; extra == "docs"

# fastapi-qengine

[![PyPI version](https://badge.fury.io/py/fastapi-qengine.svg)](https://badge.fury.io/py/fastapi-qengine)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Python 3.9+](https://img.shields.io/badge/python-3.9+-blue.svg)](https://www.python.org/downloads/)

**fastapi-qengine** es un motor de consultas avanzado para FastAPI que permite a tus clientes construir consultas complejas directamente desde la URL, sin configuraci√≥n por modelo. Inspirado en el sistema de filtros de Loopback 4, ofrece una arquitectura limpia basada en AST (Abstract Syntax Tree) para procesar, validar y compilar filtros hacia diferentes backends de base de datos.

## ¬øPor qu√© fastapi-qengine?

En lugar de definir filtros manualmente para cada modelo y campo, **fastapi-qengine** proporciona:

- üéØ **Zero Configuration**: No necesitas crear clases de filtro por cada modelo
- üîí **Seguridad incorporada**: Validaci√≥n autom√°tica y pol√≠ticas de seguridad configurables
- üèóÔ∏è **Arquitectura basada en AST**: Pipeline robusto de parseo ‚Üí normalizaci√≥n ‚Üí validaci√≥n ‚Üí optimizaci√≥n ‚Üí compilaci√≥n
- üîå **Multi-backend**: Actualmente soporta Beanie/PyMongo (SQLAlchemy y otros en desarrollo)
- üìù **Sintaxis flexible**: Soporta tanto par√°metros URL anidados como JSON completo
- üöÄ **Alto rendimiento**: Optimizaci√≥n autom√°tica de consultas y caching opcional
- üìö **Documentaci√≥n OpenAPI autom√°tica**: Integraci√≥n perfecta con FastAPI

Este proyecto se enfoca en la **generaci√≥n de consultas**, delegando la paginaci√≥n a librer√≠as especializadas como [fastapi-pagination](https://github.com/uriyyo/fastapi-pagination).

## Arquitectura

fastapi-qengine implementa un pipeline de procesamiento en varias etapas:

```
URL/JSON Input ‚Üí Parser ‚Üí Normalizer ‚Üí Validator ‚Üí AST Builder ‚Üí Optimizer ‚Üí Compiler ‚Üí Backend Query
```

### Componentes Principales

1. **Parser** (`core.parser`): Procesa la entrada desde diferentes formatos (JSON string, params anidados, dict)
2. **Normalizer** (`core.normalizer`): Normaliza la estructura de datos a un formato est√°ndar
3. **Validator** (`core.validator`): Valida la seguridad y estructura de las consultas
4. **AST Builder** (`core.ast`): Construye un √°rbol de sintaxis abstracta tipado
5. **Optimizer** (`core.optimizer`): Optimiza el AST eliminando redundancias
6. **Compiler** (`core.compiler_base`): Interfaz base para compiladores de backend
7. **Backend Compilers** (`backends/`): Implementaciones espec√≠ficas (Beanie, etc.)

### Tipos de Nodos AST

- **FieldCondition**: Condiciones sobre campos espec√≠ficos (`price > 100`)
- **LogicalCondition**: Combinaciones l√≥gicas (`and`, `or`, `nor`)
- **OrderNode**: Especificaciones de ordenamiento
- **FieldsNode**: Proyecciones de campos (selecci√≥n)

## Caracter√≠sticas Principales

### üéØ Sintaxis de Consulta
- **Dos formatos soportados**: Par√°metros URL anidados o JSON stringificado
- **Operadores de comparaci√≥n**: `eq`, `ne`, `gt`, `gte`, `lt`, `lte`, `in`, `nin`, `regex`, `exists`, `size`, `type`
- **Operadores l√≥gicos**: `and`, `or`, `nor` con anidamiento ilimitado
- **Alias sin **: Acepta tanto `gt` como `gt` para mayor flexibilidad

### üîí Seguridad
- **Pol√≠ticas de seguridad configurables**: Control de campos permitidos/prohibidos
- **L√≠mites configurables**: M√°ximo de condiciones, profundidad de anidamiento, valores en arrays
- **Validaci√≥n autom√°tica**: Tipos de datos, nombres de campos, estructura de consultas
- **Protecci√≥n contra inyecci√≥n**: Validaci√≥n estricta de operadores y valores

### ‚ö° Performance
- **Optimizaci√≥n autom√°tica**: Simplificaci√≥n de operadores l√≥gicos, combinaci√≥n de rangos, eliminaci√≥n de redundancias
- **Caching opcional**: Cache de filtros parseados y consultas compiladas
- **Pipeline eficiente**: Procesamiento en m√∫ltiples etapas con validaci√≥n temprana

### üîå Integraci√≥n
- **FastAPI native**: Integraci√≥n como dependencia de FastAPI
- **OpenAPI autom√°tico**: Documentaci√≥n generada autom√°ticamente en Swagger UI
- **Multi-backend**: Arquitectura extensible para soportar m√∫ltiples ORMs
- **Pagination-agnostic**: Compatible con cualquier librer√≠a de paginaci√≥n

## Instalaci√≥n

```bash
pip install fastapi-qengine
```

### Dependencias Opcionales

Para usar con Beanie/MongoDB:
```bash
pip install fastapi-qengine fastapi beanie pymongo
```

Para desarrollo completo con testing:
```bash
pip install fastapi-qengine[dev]
```

Para paginaci√≥n (recomendado):
```bash
pip install fastapi-pagination
```

## Uso R√°pido

### 1. Configuraci√≥n B√°sica

```python
from fastapi import FastAPI, Depends
from beanie import Document, init_beanie
from pymongo import AsyncMongoClient
from fastapi_pagination import Page, add_pagination
from fastapi_pagination.ext.beanie import paginate

from fastapi_qengine import create_qe_dependency, BeanieQueryEngine

# Define tu modelo Beanie
class Product(Document):
    name: str
    category: str
    price: float
    in_stock: bool

    class Settings:
        name = "products"

# Inicializa FastAPI
app = FastAPI()

# Crea el motor de consultas para tu modelo
engine = BeanieQueryEngine(Product)
qe_dep = create_qe_dependency(engine)

# Define tu endpoint
@app.get("/products", response_model=Page[Product])
async def get_products(q = Depends(qe_dep)):
    query, projection_model, sort = q
    return await paginate(query, projection_model=projection_model, sort=sort)

add_pagination(app)
```

### 2. Inicializaci√≥n de Base de Datos

```python
from contextlib import asynccontextmanager

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Conectar a MongoDB
    client = AsyncMongoClient("mongodb://localhost:27017")
    await init_beanie(database=client.db_name, document_models=[Product])
    yield
    # Cleanup si es necesario

app = FastAPI(lifespan=lifespan)
```

### 3. Realizar Consultas

fastapi-qengine soporta dos formatos para construir consultas, proporcionando flexibilidad seg√∫n la complejidad.

#### Formato 1: Par√°metros URL Anidados
Ideal para consultas simples y uso desde navegadores:

```bash
# Productos con precio mayor a 50
GET /products?filter[where][price][gt]=50

# Productos en stock de categor√≠a "electronics"
GET /products?filter[where][category]=electronics&filter[where][in_stock]=true

# Con ordenamiento descendente por precio
GET /products?filter[where][in_stock]=true&filter[order]=-price

# Selecci√≥n de campos espec√≠ficos
GET /products?filter[where][category]=books&filter[fields][name]=1&filter[fields][price]=1
```

#### Formato 2: JSON Stringificado
Recomendado para consultas complejas con operadores l√≥gicos:

```bash
# OR l√≥gico: electronics O precio < 20
GET /products?filter={"where":{"or":[{"category":"electronics"},{"price":{"lt":20}}]}}

# AND con m√∫ltiples condiciones
GET /products?filter={"where":{"and":[{"in_stock":true},{"price":{"gte":10,"lte":100}}]}}

# Consulta compleja anidada
GET /products?filter={"where":{"or":[{"category":"electronics","price":{"lt":1000}},{"category":"books","in_stock":true}]},"order":"-price","fields":{"name":1,"price":1,"category":1}}
```

**Nota**: En URLs reales, el JSON debe estar URL-encoded.

## Referencia de Sintaxis

### Estructura del Filtro

El objeto `filter` acepta tres claves principales:

```typescript
{
  "where": {...},      // Condiciones de b√∫squeda
  "order": "...",      // Ordenamiento
  "fields": {...}      // Proyecci√≥n de campos
}
```

### Cl√°usula `where`

Define las condiciones de b√∫squeda usando operadores de MongoDB/PyMongo.

#### Operadores de Comparaci√≥n

| Operador | Descripci√≥n | Ejemplo |
|----------|-------------|---------|
| `eq` o `=` | Igual a | `{"price": 100}` o `{"price": {"eq": 100}}` |
| `ne` | No igual a | `{"category": {"ne": "books"}}` |
| `gt` | Mayor que | `{"price": {"gt": 50}}` |
| `gte` | Mayor o igual que | `{"price": {"gte": 50}}` |
| `lt` | Menor que | `{"price": {"lt": 100}}` |
| `lte` | Menor o igual que | `{"price": {"lte": 100}}` |
| `in` | En array | `{"category": {"in": ["electronics", "books"]}}` |
| `nin` | No en array | `{"category": {"nin": ["toys"]}}` |
| `regex` | Expresi√≥n regular | `{"name": {"regex": "^Product"}}` |
| `exists` | Campo existe | `{"description": {"exists": true}}` |
| `size` | Tama√±o de array | `{"tags": {"size": 3}}` |
| `type` | Tipo de campo | `{"price": {"type": "number"}}` |

#### Operadores L√≥gicos

| Operador | Descripci√≥n | Ejemplo |
|----------|-------------|---------|
| `and` | Y l√≥gico | `{"and": [{"price": {"gt": 10}}, {"in_stock": true}]}` |
| `or` | O l√≥gico | `{"or": [{"category": "electronics"}, {"price": {"lt": 20}}]}` |
| `nor` | NOR l√≥gico | `{"nor": [{"category": "toys"}, {"in_stock": false}]}` |

#### Ejemplos de Consultas Complejas

```python
# Rango de valores
{"price": {"gte": 10, "lte": 50}}

# M√∫ltiples condiciones (AND impl√≠cito)
{"category": "electronics", "in_stock": true, "price": {"lt": 1000}}

# OR con condiciones anidadas
{"or": [
    {"category": "electronics", "price": {"lt": 500}},
    {"category": "books", "in_stock": true}
]}

# Combinaci√≥n de AND y OR
{"and": [
    {"in_stock": true},
    {"or": [
        {"category": "electronics"},
        {"price": {"lt": 30}}
    ]}
]}
```

### Cl√°usula `order`

Especifica el ordenamiento de resultados. Usa `-` como prefijo para orden descendente.

```python
# Ascendente
{"order": "price"}

# Descendente
{"order": "-price"}

# M√∫ltiples campos (como string separado por comas)
{"order": "category,-price"}
```

### Cl√°usula `fields`

Define qu√© campos incluir en los resultados (proyecci√≥n).

```python
# Incluir solo name y price
{"fields": {"name": 1, "price": 1}}

# Excluir campos espec√≠ficos (usar 0)
{"fields": {"internal_id": 0, "metadata": 0}}
```

## Configuraci√≥n Avanzada

### Pol√≠ticas de Seguridad

Controla qu√© campos y operadores pueden usar tus clientes:

```python
from fastapi_qengine import SecurityPolicy, BeanieQueryEngine, create_qe_dependency

# Define pol√≠tica de seguridad
security_policy = SecurityPolicy(
    allowed_fields=["name", "category", "price", "in_stock"],  # Solo estos campos
    forbidden_fields=["internal_id", "secret_data"],           # Campos prohibidos
    allowed_operators=["eq", "gt", "lt", "in", "and"],    # Operadores permitidos
    max_conditions=10,                                          # M√°ximo de condiciones
    max_array_size=100,                                         # Tama√±o m√°ximo de arrays en in
    max_depth=5                                                 # Profundidad m√°xima de anidamiento
)

# Aplica al crear el motor
engine = BeanieQueryEngine(Product, security_policy=security_policy)
qe_dep = create_qe_dependency(engine)
```

### Configuraci√≥n Personalizada

```python
from fastapi_qengine import QEngineConfig
from fastapi_qengine.core import ParserConfig, ValidatorConfig, OptimizerConfig

config = QEngineConfig(
    debug=True,
    parser=ParserConfig(
        max_nesting_depth=8,
        strict_mode=True,
        case_sensitive_operators=False
    ),
    validator=ValidatorConfig(
        validate_types=True,
        validate_operators=True
    ),
    optimizer=OptimizerConfig(
        enabled=True,
        simplify_logical_operators=True,
        remove_redundant_conditions=True,
        max_optimization_passes=3
    )
)

qe_dep = create_qe_dependency(engine, config=config)
```

### Uso del Pipeline Directo

Para casos avanzados, puedes usar el pipeline de procesamiento directamente:

```python
from fastapi_qengine import process_filter_to_ast
from fastapi_qengine.backends import compile_to_mongodb

# Procesa filtro a AST
filter_input = {"where": {"price": {"gt": 50}}, "order": "-price"}
ast = process_filter_to_ast(filter_input, config=config)

# Compila a MongoDB
mongodb_query = compile_to_mongodb(ast)
# Resultado: {"filter": {"price": {"gt": 50}}, "sort": [("price", -1)]}
```

### Proyecci√≥n Din√°mica de Respuestas

Genera modelos de respuesta din√°micos basados en los campos solicitados:

```python
from fastapi_qengine import create_response_model

ProductResponse = create_response_model(Product)

@app.get("/products", response_model=Page[ProductResponse])
async def get_products(q = Depends(qe_dep)):
    query, projection_model, sort = q
    # projection_model es din√°mico seg√∫n los campos solicitados
    return await paginate(query, projection_model=projection_model, sort=sort)
```

## Operadores Personalizados

Extiende la funcionalidad con operadores personalizados:

```python
from fastapi_qengine.operators import register_custom_operator, create_simple_operator

# Operador simple
custom_op = create_simple_operator(
    name="contains",
    compile_func=lambda field, value, backend: {field: {"regex": f".*{value}.*"}}
)
register_custom_operator("contains", custom_op)

# Ahora puedes usar: {"name": {"contains": "Product"}}
```

## Backends Soportados

### Beanie/PyMongo (Actual)

Soporte completo para MongoDB a trav√©s de Beanie ODM:

```python
from fastapi_qengine import BeanieQueryEngine

engine = BeanieQueryEngine(YourDocument)
```

### Pr√≥ximamente

- **SQLAlchemy**: Para bases de datos SQL (PostgreSQL, MySQL, SQLite)
- **Tortoise ORM**: Async ORM para m√∫ltiples backends
- **Motor**: Driver async de MongoDB puro

## Integraci√≥n con FastAPI Pagination

fastapi-qengine est√° dise√±ado para trabajar sin problemas con `fastapi-pagination`:

```python
from fastapi_pagination import Page, add_pagination, paginate
from fastapi_pagination.ext.beanie import paginate as beanie_paginate

# Opci√≥n 1: Con Beanie
@app.get("/products", response_model=Page[Product])
async def list_products(q = Depends(qe_dep)):
    query, projection, sort = q
    return await beanie_paginate(query, projection_model=projection, sort=sort)

# Opci√≥n 2: Paginaci√≥n manual
from fastapi_pagination import Params

@app.get("/products")
async def list_products(
    q = Depends(qe_dep),
    params: Params = Depends()
):
    query, projection, sort = q
    items = await query.skip(params.offset).limit(params.size).to_list()
    total = await query.count()
    return {"items": items, "total": total, "page": params.page, "size": params.size}

add_pagination(app)
```

## Ejemplos Completos

Consulta la carpeta `examples/` para ver implementaciones completas:

- **`basic.py`**: Ejemplo b√°sico con Beanie
- **`security_policies.py`**: Uso avanzado de pol√≠ticas de seguridad
- **`with_paginate.py`**: Integraci√≥n con fastapi-pagination

## Comparaci√≥n con Alternativas

| Caracter√≠stica | fastapi-qengine | fastapi-filter | Loopback 4 |
|----------------|-----------------|----------------|------------|
| Zero config | ‚úÖ | ‚ùå | ‚úÖ |
| Sintaxis flexible | ‚úÖ | ‚ö†Ô∏è | ‚úÖ |
| Operadores l√≥gicos anidados | ‚úÖ | ‚ö†Ô∏è | ‚úÖ |
| AST-based | ‚úÖ | ‚ùå | ‚úÖ |
| Multi-backend | üîÑ | ‚úÖ | ‚úÖ |
| Pol√≠ticas de seguridad | ‚úÖ | ‚ö†Ô∏è | ‚úÖ |
| Optimizaci√≥n de queries | ‚úÖ | ‚ùå | ‚úÖ |
| OpenAPI docs | ‚úÖ | ‚úÖ | ‚úÖ |

‚úÖ Soportado completamente | ‚ö†Ô∏è Parcialmente | ‚ùå No soportado | üîÑ En desarrollo

## Manejo de Errores

fastapi-qengine proporciona errores descriptivos para ayudar en debugging:

```python
from fastapi_qengine.core import QEngineError, ParseError, ValidationError, SecurityError

# Los errores se convierten autom√°ticamente a HTTPException
# ParseError -> 400 Bad Request (JSON inv√°lido o sintaxis incorrecta)
# ValidationError -> 400 Bad Request (estructura inv√°lida)
# SecurityError -> 400 Bad Request (violaci√≥n de pol√≠tica de seguridad)
```

Ejemplo de respuesta de error:

```json
{
  "detail": "Field 'secret_field' is not allowed by security policy"
}
```

## Testing

El proyecto incluye una suite completa de tests:

```bash
# Ejecutar todos los tests
uv run pytest

# Con cobertura
uv run pytest --cov=fastapi_qengine --cov-report=html

# Tests espec√≠ficos
uv run pytest tests/test_basic.py
uv run pytest tests/core/test_parser.py -v

# Por palabra clave
uv run pytest -k "security"
```

**Estad√≠sticas de Testing:**
- ‚úÖ 66 tests
- üìä 78% de cobertura de c√≥digo
- üîê Tests de seguridad y validaci√≥n
- üß™ Tests unitarios, integraci√≥n y E2E

## Rendimiento

fastapi-qengine est√° optimizado para alto rendimiento:

- **Pipeline eficiente**: Validaci√≥n temprana para fallar r√°pido
- **Optimizaci√≥n autom√°tica**: Simplifica consultas antes de compilar
- **Caching opcional**: Cache de ASTs parseados y consultas compiladas
- **Zero overhead**: Sin reflection en runtime para backends soportados

## Contribuciones

Las contribuciones son bienvenidas. Por favor, abre un issue o pull request para discutir cambios.

### Gu√≠a de Desarrollo

```bash
# Clonar el repositorio
git clone https://github.com/urielcuriel/fastapi-qengine.git
cd fastapi-qengine

# Instalar dependencias de desarrollo
uv pip install -e ".[dev]"

# Ejecutar tests
uv run pytest

# Lint y formato
ruff check fastapi_qengine/
ruff format fastapi_qengine/

# Ver cobertura
uv run pytest --cov=fastapi_qengine --cov-report=html
# Abre htmlcov/index.html en tu navegador
```

Consulta [DEVELOPMENT.md](DEVELOPMENT.md) para m√°s detalles.

## Roadmap

- [x] Soporte completo para Beanie/PyMongo
- [x] Operadores de comparaci√≥n y l√≥gicos
- [x] Pol√≠ticas de seguridad configurables
- [x] Optimizaci√≥n de AST
- [x] Documentaci√≥n OpenAPI autom√°tica
- [ ] Backend para SQLAlchemy
- [ ] Backend para Tortoise ORM
- [ ] Soporte para agregaciones
- [ ] Cache de consultas con Redis
- [ ] M√©tricas y observabilidad

## Recursos

- **Documentaci√≥n**: [https://github.com/urielcuriel/fastapi-qengine](https://github.com/urielcuriel/fastapi-qengine)
- **PyPI**: [https://pypi.org/project/fastapi-qengine/](https://pypi.org/project/fastapi-qengine/)
- **Issues**: [https://github.com/urielcuriel/fastapi-qengine/issues](https://github.com/urielcuriel/fastapi-qengine/issues)
- **Changelog**: [CHANGELOG.md](CHANGELOG.md)

## Licencia

Este proyecto est√° bajo la Licencia MIT.

## Agradecimientos

Inspirado por el excelente sistema de filtros de [Loopback 4](https://loopback.io/doc/en/lb4/Querying-data.html), adaptado para el ecosistema Python/FastAPI.

---

**¬øNecesitas ayuda?** Abre un [issue](https://github.com/urielcuriel/fastapi-qengine/issues) o inicia una [discusi√≥n](https://github.com/urielcuriel/fastapi-qengine/discussions).

**¬øTe gusta el proyecto?** Dale una ‚≠ê en [GitHub](https://github.com/urielcuriel/fastapi-qengine)!
