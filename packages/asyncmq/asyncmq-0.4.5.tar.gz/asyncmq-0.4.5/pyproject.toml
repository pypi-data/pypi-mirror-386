[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "asyncmq"
description = "Async task queue with BullMQ-like features"
readme = "README.md"
requires-python = ">=3.10"
dynamic = ['version']
authors = [{ name = "Tiago Silva", email = "tiago@tarsild.io" }]
classifiers = [
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python",
    "Topic :: Internet",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Typing :: Typed",
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "Framework :: AsyncIO",
    "Framework :: AnyIO",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Internet :: WWW/HTTP",
]
dependencies = [
    "anyio>=4.9.0,<6.0.0",
    "click>=8.1.8,<9.0.0",
    "itsdangerous>=2.1.2,<3.0.0",
    "rich>=14.0.0,<15.0.0",
    "croniter>=6.0.0,<7.0.0",
    "redis>=5.2.1",
    "monkay>=0.5.0",
]
keywords = [
    "asyncio",
    "anyio",
    "task-queue",
    "background-jobs",
    "job-scheduler",
    "rate-limiter",
    "dead-letter-queue",
    "cron",
    "microservices",
    "fastapi",
    "esmerald",
    "redis",
    "postgresql",
    "mongodb",
    "celery-alternative",
    "concurrency",
    "parallelism",
    "retry-policy",
]

[project.urls]
Homepage = "https://github.com/dymmond/asyncmq"
Documentation = "https://asyncmq.dymmond.com"
Changelog = "https://asyncmq.dymmond.com/release-notes/"
Funding = "https://github.com/sponsors/tarsil"
Source = "https://github.com/dymmond/asyncmq"

[project.scripts]
asyncmq = "asyncmq.cli.__main__:main"

[tool.hatch.version]
path = "asyncmq/__init__.py"

[tool.hatch.envs.default]
dependencies = [
    "mypy==1.9.0",
    "ruff>=0.3.0,<5.0.0",
    "pre-commit>=3.3.1,<4.0.0",
    "devtools>=0.12.2",
    "ipython",
    "ipdb",
    "ptpython",
    "twine",
    "types-croniter",
]


[project.optional-dependencies]
testing = [
    "fastapi",
    "aio_pika>=9.5.5",
    "anyio[trio]>=4.9.0,<6.0.0",
    "autoflake>=2.0.2,<3.0.0",
    "esmerald>=3.7.7",
    "black==24.1.1,<25.0",
    "isort>=5.12.0,<6.0.0",
    "pytest>=7.2.2,<9.0.0",
    "pytest-cov>=4.0.0,<5.0.0",
    "pytest-asyncio>=0.26.0",
    "structlog>=25.3.0",
    "uvicorn>=0.34.2",
    "httpx",
    "ipdb",
]
postgres = ["asyncpg>=0.30.0"]
mongo = ["motor>=3.7.0"]
dashboard = ["lilya>=0.16.10", "jinja2>=3.1.6", "itsdangerous>=2.2.0"]
aio-pika = ["aio_pika>=9.5.5"]

all = ["asyncmq[postgres]", "asyncmq[mongo]", "asyncmq[dashboard]", "asyncmq[aio-pika]"]

[tool.hatch.envs.default.scripts]
clean_pyc = "find . -type f -name \"*.pyc\" -delete"
clean_pyi = "find . -type f -name \"*.pyi\" -delete"
clean_pycache = "find . -type d -name \"*__pycache__*\" -delete"
build_with_check = "hatch build; twine check dist/*"
lint = "ruff check --fix --line-length 99  asyncmq tests {args}"
format = "hatch fmt -- --exclude docs_src && hatch fmt --check -- --exclude docs_src && hatch run test:check_types"

[tool.hatch.envs.docs]
dependencies = [
    "griffe-typingdoc>=0.2.2,<1.0",
    "mkautodoc>=0.2.0,<0.3.0",
    "mkdocs>=1.1.2,<2.0.0",
    "mkdocs-material>=9.4.4,<10.0.0",
    "mdx-include>=1.4.2,<2.0.0",
    "mkdocs-macros-plugin>=0.4.0",
    "mkdocs-meta-descriptions-plugin>=2.3.0",
    "mkdocstrings[python]>=0.23.0,<0.30.0",
    "pyyaml>=6.0,<7.0.0",
]

[tool.hatch.envs.docs.scripts]
build = "mkdocs build"
serve = "mkdocs serve --dev-addr localhost:8000"

[tool.hatch.envs.hatch-test]
features = ["testing", "postgres", "mongo", "dashboard"]
template = "test"

[tool.hatch.envs.hatch-test.env-vars]
ASYNCMQ_SETTINGS_MODULE = "tests.settings.TestSettings"
LILYA_SETTINGS_MODULE = "tests.settings.LilyaDashboardSettings"

[tool.hatch.envs.test]
features = ['testing']

[tool.hatch.envs.test.scripts]
# needs docker services running
test = "hatch test -- {args}"
test_man = "hatch test -- {args} -s -vv"
check_types = "mypy -p asyncmq"

[tool.isort]
profile = "black"
known_third_party = []
src_paths = ["asyncmq"]

[tool.mypy]
strict = true
warn_unused_configs = true
warn_unreachable = true
warn_return_any = true
disallow_untyped_decorators = true
disallow_any_generics = false
implicit_reexport = false
show_error_codes = true
disallow_incomplete_defs = true
warn_unused_ignores = true
warn_redundant_casts = true
no_implicit_optional = false
strict_equality = false
strict_optional = false
disable_error_code = "attr-defined,has-type,override,misc,safe-super"

[tool.ruff]
line-length = 120
target-version = "py310"

[tool.ruff.lint]
select = ["E", "W", "F", "C", "B", "I"]
ignore = ["E501", "B008", "C901", "B026"]

exclude = ["docs_src/*"]

[tool.ruff.lint.isort]
combine-as-imports = true

[tool.coverage.run]
parallel = true
context = '${CONTEXT}'
source = ["tests", "asyncmq"]
# omit = []

[[tool.mypy.overrides]]
module = "asyncmq.tests.*"
ignore_missing_imports = true
check_untyped_defs = true

[[tool.mypy.overrides]]
module = "docs_src.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = ["motor.*", "asyncpg.*", "lilya.templating.*"]
ignore_missing_imports = true
ignore_errors = true

[tool.pytest.ini_options]
addopts = ["--strict-config", "--strict-markers"]
xfail_strict = true
junit_family = "xunit2"

[tool.hatch.build.targets.sdist]
include = ["/asyncmq"]
