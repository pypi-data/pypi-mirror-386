# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _FuelTankMsgPayload
else:
    import _FuelTankMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _FuelTankMsgPayload.delete_SwigPyIterator

    def value(self):
        return _FuelTankMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _FuelTankMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _FuelTankMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _FuelTankMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _FuelTankMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _FuelTankMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _FuelTankMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _FuelTankMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _FuelTankMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _FuelTankMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _FuelTankMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _FuelTankMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _FuelTankMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _FuelTankMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _FuelTankMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _FuelTankMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _FuelTankMsgPayload:
_FuelTankMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _FuelTankMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _FuelTankMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _FuelTankMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _FuelTankMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _FuelTankMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _FuelTankMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _FuelTankMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _FuelTankMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _FuelTankMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _FuelTankMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _FuelTankMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _FuelTankMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _FuelTankMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _FuelTankMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _FuelTankMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _FuelTankMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _FuelTankMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _FuelTankMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _FuelTankMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _FuelTankMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _FuelTankMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _FuelTankMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _FuelTankMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _FuelTankMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _FuelTankMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _FuelTankMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _FuelTankMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _FuelTankMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _FuelTankMsgPayload.TimeVector_empty(self)

    def size(self):
        return _FuelTankMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _FuelTankMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _FuelTankMsgPayload.TimeVector_begin(self)

    def end(self):
        return _FuelTankMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _FuelTankMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _FuelTankMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _FuelTankMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _FuelTankMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _FuelTankMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _FuelTankMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _FuelTankMsgPayload.TimeVector_swiginit(self, _FuelTankMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _FuelTankMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _FuelTankMsgPayload.TimeVector_front(self)

    def back(self):
        return _FuelTankMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _FuelTankMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _FuelTankMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _FuelTankMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _FuelTankMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _FuelTankMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _FuelTankMsgPayload.delete_TimeVector

# Register TimeVector in _FuelTankMsgPayload:
_FuelTankMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _FuelTankMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _FuelTankMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _FuelTankMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _FuelTankMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _FuelTankMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _FuelTankMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _FuelTankMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _FuelTankMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _FuelTankMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _FuelTankMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _FuelTankMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _FuelTankMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _FuelTankMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _FuelTankMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _FuelTankMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _FuelTankMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _FuelTankMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _FuelTankMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _FuelTankMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _FuelTankMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _FuelTankMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _FuelTankMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _FuelTankMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _FuelTankMsgPayload.DoubleVector_swiginit(self, _FuelTankMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _FuelTankMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _FuelTankMsgPayload.DoubleVector_front(self)

    def back(self):
        return _FuelTankMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _FuelTankMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _FuelTankMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _FuelTankMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _FuelTankMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _FuelTankMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _FuelTankMsgPayload.delete_DoubleVector

# Register DoubleVector in _FuelTankMsgPayload:
_FuelTankMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _FuelTankMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _FuelTankMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _FuelTankMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _FuelTankMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _FuelTankMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _FuelTankMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _FuelTankMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _FuelTankMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _FuelTankMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _FuelTankMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _FuelTankMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _FuelTankMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _FuelTankMsgPayload.StringVector_empty(self)

    def size(self):
        return _FuelTankMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _FuelTankMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _FuelTankMsgPayload.StringVector_begin(self)

    def end(self):
        return _FuelTankMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _FuelTankMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _FuelTankMsgPayload.StringVector_rend(self)

    def clear(self):
        return _FuelTankMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _FuelTankMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _FuelTankMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _FuelTankMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _FuelTankMsgPayload.StringVector_swiginit(self, _FuelTankMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _FuelTankMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _FuelTankMsgPayload.StringVector_front(self)

    def back(self):
        return _FuelTankMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _FuelTankMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _FuelTankMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _FuelTankMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _FuelTankMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _FuelTankMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _FuelTankMsgPayload.delete_StringVector

# Register StringVector in _FuelTankMsgPayload:
_FuelTankMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _FuelTankMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _FuelTankMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _FuelTankMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _FuelTankMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _FuelTankMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _FuelTankMsgPayload.NANO2SEC
SEC2NANO = _FuelTankMsgPayload.SEC2NANO
SEC2HOUR = _FuelTankMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _FuelTankMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _FuelTankMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _FuelTankMsgPayload.secToNano(seconds)
BOOL_FALSE = _FuelTankMsgPayload.BOOL_FALSE
BOOL_TRUE = _FuelTankMsgPayload.BOOL_TRUE
AVAILABLE = _FuelTankMsgPayload.AVAILABLE
UNAVAILABLE = _FuelTankMsgPayload.UNAVAILABLE
BalancedWheels = _FuelTankMsgPayload.BalancedWheels
JitterSimple = _FuelTankMsgPayload.JitterSimple
JitterFullyCoupled = _FuelTankMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _FuelTankMsgPayload.SysModel_swiginit(self, _FuelTankMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _FuelTankMsgPayload.delete_SysModel

    def SelfInit(self):
        return _FuelTankMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _FuelTankMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _FuelTankMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _FuelTankMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_FuelTankMsgPayload.SysModel_ModelTag_get, _FuelTankMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_FuelTankMsgPayload.SysModel_CallCounts_get, _FuelTankMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_FuelTankMsgPayload.SysModel_RNGSeed_get, _FuelTankMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_FuelTankMsgPayload.SysModel_moduleID_get, _FuelTankMsgPayload.SysModel_moduleID_set)

# Register SysModel in _FuelTankMsgPayload:
_FuelTankMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _FuelTankMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _FuelTankMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _FuelTankMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _FuelTankMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _FuelTankMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _FuelTankMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _FuelTankMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _FuelTankMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _FuelTankMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _FuelTankMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _FuelTankMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _FuelTankMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class FuelTankMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fuelMass = property(_FuelTankMsgPayload.FuelTankMsgPayload_fuelMass_get, _FuelTankMsgPayload.FuelTankMsgPayload_fuelMass_set)
    fuelMassDot = property(_FuelTankMsgPayload.FuelTankMsgPayload_fuelMassDot_get, _FuelTankMsgPayload.FuelTankMsgPayload_fuelMassDot_set)
    maxFuelMass = property(_FuelTankMsgPayload.FuelTankMsgPayload_maxFuelMass_get, _FuelTankMsgPayload.FuelTankMsgPayload_maxFuelMass_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _FuelTankMsgPayload.FuelTankMsgPayload_swiginit(self, _FuelTankMsgPayload.new_FuelTankMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _FuelTankMsgPayload.delete_FuelTankMsgPayload

# Register FuelTankMsgPayload in _FuelTankMsgPayload:
_FuelTankMsgPayload.FuelTankMsgPayload_swigregister(FuelTankMsgPayload)

def _pprint_FuelTankMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[FuelTankMsgPayload.__repr__] = _pprint_FuelTankMsgPayload

class FuelTankMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_FuelTankMsgPayload.FuelTankMsgReader_bskLogger_get, _FuelTankMsgPayload.FuelTankMsgReader_bskLogger_set)
    zeroMsgPayload = property(_FuelTankMsgPayload.FuelTankMsgReader_zeroMsgPayload_get, _FuelTankMsgPayload.FuelTankMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _FuelTankMsgPayload.FuelTankMsgReader_swiginit(self, _FuelTankMsgPayload.new_FuelTankMsgReader(*args))

    def __call__(self):
        return _FuelTankMsgPayload.FuelTankMsgReader___call__(self)

    def isLinked(self):
        return _FuelTankMsgPayload.FuelTankMsgReader_isLinked(self)

    def isWritten(self):
        return _FuelTankMsgPayload.FuelTankMsgReader_isWritten(self)

    def timeWritten(self):
        return _FuelTankMsgPayload.FuelTankMsgReader_timeWritten(self)

    def moduleID(self):
        return _FuelTankMsgPayload.FuelTankMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _FuelTankMsgPayload.FuelTankMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _FuelTankMsgPayload.FuelTankMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _FuelTankMsgPayload.FuelTankMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _FuelTankMsgPayload.FuelTankMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _FuelTankMsgPayload.FuelTankMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _FuelTankMsgPayload.FuelTankMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _FuelTankMsgPayload.FuelTankMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _FuelTankMsgPayload.FuelTankMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _FuelTankMsgPayload.FuelTankMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _FuelTankMsgPayload.FuelTankMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == FuelTankMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.FuelTankMsgPayload import FuelTankMsg_C
            if type(source) == FuelTankMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<FuelTankMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == FuelTankMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.FuelTankMsgPayload import FuelTankMsg_C
        except ImportError:
            return 0

        if type(source) == FuelTankMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _FuelTankMsgPayload.delete_FuelTankMsgReader

# Register FuelTankMsgReader in _FuelTankMsgPayload:
_FuelTankMsgPayload.FuelTankMsgReader_swigregister(FuelTankMsgReader)
class FuelTankMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _FuelTankMsgPayload.FuelTankMsgWriter_swiginit(self, _FuelTankMsgPayload.new_FuelTankMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _FuelTankMsgPayload.FuelTankMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _FuelTankMsgPayload.delete_FuelTankMsgWriter

# Register FuelTankMsgWriter in _FuelTankMsgPayload:
_FuelTankMsgPayload.FuelTankMsgWriter_swigregister(FuelTankMsgWriter)
class FuelTankMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_FuelTankMsgPayload.FuelTankMsg_write_get, _FuelTankMsgPayload.FuelTankMsg_write_set)

    def addSubscriber(self):
        return _FuelTankMsgPayload.FuelTankMsg_addSubscriber(self)

    def addAuthor(self):
        return _FuelTankMsgPayload.FuelTankMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _FuelTankMsgPayload.FuelTankMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _FuelTankMsgPayload.FuelTankMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _FuelTankMsgPayload.FuelTankMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_FuelTankMsgPayload.FuelTankMsg_zeroMsgPayload_get, _FuelTankMsgPayload.FuelTankMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _FuelTankMsgPayload.FuelTankMsg_isLinked(self)

    def getPayloadSize(self):
        return _FuelTankMsgPayload.FuelTankMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _FuelTankMsgPayload.FuelTankMsg_swiginit(self, _FuelTankMsgPayload.new_FuelTankMsg())
    __swig_destroy__ = _FuelTankMsgPayload.delete_FuelTankMsg

# Register FuelTankMsg in _FuelTankMsgPayload:
_FuelTankMsgPayload.FuelTankMsg_swigregister(FuelTankMsg)
class FuelTankMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _FuelTankMsgPayload.FuelTankMsgRecorder_swiginit(self, _FuelTankMsgPayload.new_FuelTankMsgRecorder(*args))
    __swig_destroy__ = _FuelTankMsgPayload.delete_FuelTankMsgRecorder

    def SelfInit(self):
        return _FuelTankMsgPayload.FuelTankMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _FuelTankMsgPayload.FuelTankMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _FuelTankMsgPayload.FuelTankMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _FuelTankMsgPayload.FuelTankMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _FuelTankMsgPayload.FuelTankMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _FuelTankMsgPayload.FuelTankMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _FuelTankMsgPayload.FuelTankMsgRecorder___record_vector(self)

    def size(self):
        return _FuelTankMsgPayload.FuelTankMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _FuelTankMsgPayload.FuelTankMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _FuelTankMsgPayload.FuelTankMsgRecorder_clear(self)
    bskLogger = property(_FuelTankMsgPayload.FuelTankMsgRecorder_bskLogger_get, _FuelTankMsgPayload.FuelTankMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _FuelTankMsgPayload.FuelTankMsgRecorder_updateTimeInterval(self, timeDiff)

    def _fuelMass_array(self):
        return _FuelTankMsgPayload.FuelTankMsgRecorder__fuelMass_array(self)

    @property
    def fuelMass(self):
        return self._fuelMass_array()


    def _fuelMassDot_array(self):
        return _FuelTankMsgPayload.FuelTankMsgRecorder__fuelMassDot_array(self)

    @property
    def fuelMassDot(self):
        return self._fuelMassDot_array()


    def _maxFuelMass_array(self):
        return _FuelTankMsgPayload.FuelTankMsgRecorder__maxFuelMass_array(self)

    @property
    def maxFuelMass(self):
        return self._maxFuelMass_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register FuelTankMsgRecorder in _FuelTankMsgPayload:
_FuelTankMsgPayload.FuelTankMsgRecorder_swigregister(FuelTankMsgRecorder)
class FuelTankMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _FuelTankMsgPayload.FuelTankMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _FuelTankMsgPayload.FuelTankMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _FuelTankMsgPayload.FuelTankMsgPayloadVector___bool__(self)

    def __len__(self):
        return _FuelTankMsgPayload.FuelTankMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _FuelTankMsgPayload.FuelTankMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _FuelTankMsgPayload.FuelTankMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _FuelTankMsgPayload.FuelTankMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _FuelTankMsgPayload.FuelTankMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _FuelTankMsgPayload.FuelTankMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _FuelTankMsgPayload.FuelTankMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _FuelTankMsgPayload.FuelTankMsgPayloadVector_pop(self)

    def append(self, x):
        return _FuelTankMsgPayload.FuelTankMsgPayloadVector_append(self, x)

    def empty(self):
        return _FuelTankMsgPayload.FuelTankMsgPayloadVector_empty(self)

    def size(self):
        return _FuelTankMsgPayload.FuelTankMsgPayloadVector_size(self)

    def swap(self, v):
        return _FuelTankMsgPayload.FuelTankMsgPayloadVector_swap(self, v)

    def begin(self):
        return _FuelTankMsgPayload.FuelTankMsgPayloadVector_begin(self)

    def end(self):
        return _FuelTankMsgPayload.FuelTankMsgPayloadVector_end(self)

    def rbegin(self):
        return _FuelTankMsgPayload.FuelTankMsgPayloadVector_rbegin(self)

    def rend(self):
        return _FuelTankMsgPayload.FuelTankMsgPayloadVector_rend(self)

    def clear(self):
        return _FuelTankMsgPayload.FuelTankMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _FuelTankMsgPayload.FuelTankMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _FuelTankMsgPayload.FuelTankMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _FuelTankMsgPayload.FuelTankMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _FuelTankMsgPayload.FuelTankMsgPayloadVector_swiginit(self, _FuelTankMsgPayload.new_FuelTankMsgPayloadVector(*args))

    def push_back(self, x):
        return _FuelTankMsgPayload.FuelTankMsgPayloadVector_push_back(self, x)

    def front(self):
        return _FuelTankMsgPayload.FuelTankMsgPayloadVector_front(self)

    def back(self):
        return _FuelTankMsgPayload.FuelTankMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _FuelTankMsgPayload.FuelTankMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _FuelTankMsgPayload.FuelTankMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _FuelTankMsgPayload.FuelTankMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _FuelTankMsgPayload.FuelTankMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _FuelTankMsgPayload.FuelTankMsgPayloadVector_capacity(self)

    def get_all(self):
        return _FuelTankMsgPayload.FuelTankMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _FuelTankMsgPayload.delete_FuelTankMsgPayloadVector

# Register FuelTankMsgPayloadVector in _FuelTankMsgPayload:
_FuelTankMsgPayload.FuelTankMsgPayloadVector_swigregister(FuelTankMsgPayloadVector)
class FuelTankMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsVector_empty(self)

    def size(self):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsVector_begin(self)

    def end(self):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsVector_rend(self)

    def clear(self):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _FuelTankMsgPayload.FuelTankMsgOutMsgsVector_swiginit(self, _FuelTankMsgPayload.new_FuelTankMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsVector_front(self)

    def back(self):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _FuelTankMsgPayload.delete_FuelTankMsgOutMsgsVector

# Register FuelTankMsgOutMsgsVector in _FuelTankMsgPayload:
_FuelTankMsgPayload.FuelTankMsgOutMsgsVector_swigregister(FuelTankMsgOutMsgsVector)
class FuelTankMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _FuelTankMsgPayload.FuelTankMsgOutMsgsPtrVector_swiginit(self, _FuelTankMsgPayload.new_FuelTankMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _FuelTankMsgPayload.FuelTankMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _FuelTankMsgPayload.delete_FuelTankMsgOutMsgsPtrVector

# Register FuelTankMsgOutMsgsPtrVector in _FuelTankMsgPayload:
_FuelTankMsgPayload.FuelTankMsgOutMsgsPtrVector_swigregister(FuelTankMsgOutMsgsPtrVector)
class FuelTankMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _FuelTankMsgPayload.FuelTankMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _FuelTankMsgPayload.FuelTankMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _FuelTankMsgPayload.FuelTankMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _FuelTankMsgPayload.FuelTankMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _FuelTankMsgPayload.FuelTankMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _FuelTankMsgPayload.FuelTankMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _FuelTankMsgPayload.FuelTankMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _FuelTankMsgPayload.FuelTankMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _FuelTankMsgPayload.FuelTankMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _FuelTankMsgPayload.FuelTankMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _FuelTankMsgPayload.FuelTankMsgInMsgsVector_pop(self)

    def append(self, x):
        return _FuelTankMsgPayload.FuelTankMsgInMsgsVector_append(self, x)

    def empty(self):
        return _FuelTankMsgPayload.FuelTankMsgInMsgsVector_empty(self)

    def size(self):
        return _FuelTankMsgPayload.FuelTankMsgInMsgsVector_size(self)

    def swap(self, v):
        return _FuelTankMsgPayload.FuelTankMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _FuelTankMsgPayload.FuelTankMsgInMsgsVector_begin(self)

    def end(self):
        return _FuelTankMsgPayload.FuelTankMsgInMsgsVector_end(self)

    def rbegin(self):
        return _FuelTankMsgPayload.FuelTankMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _FuelTankMsgPayload.FuelTankMsgInMsgsVector_rend(self)

    def clear(self):
        return _FuelTankMsgPayload.FuelTankMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _FuelTankMsgPayload.FuelTankMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _FuelTankMsgPayload.FuelTankMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _FuelTankMsgPayload.FuelTankMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _FuelTankMsgPayload.FuelTankMsgInMsgsVector_swiginit(self, _FuelTankMsgPayload.new_FuelTankMsgInMsgsVector(*args))

    def push_back(self, x):
        return _FuelTankMsgPayload.FuelTankMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _FuelTankMsgPayload.FuelTankMsgInMsgsVector_front(self)

    def back(self):
        return _FuelTankMsgPayload.FuelTankMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _FuelTankMsgPayload.FuelTankMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _FuelTankMsgPayload.FuelTankMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _FuelTankMsgPayload.FuelTankMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _FuelTankMsgPayload.FuelTankMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _FuelTankMsgPayload.FuelTankMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _FuelTankMsgPayload.delete_FuelTankMsgInMsgsVector

# Register FuelTankMsgInMsgsVector in _FuelTankMsgPayload:
_FuelTankMsgPayload.FuelTankMsgInMsgsVector_swigregister(FuelTankMsgInMsgsVector)
class FuelTankMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_FuelTankMsgPayload.FuelTankMsg_C_header_get, _FuelTankMsgPayload.FuelTankMsg_C_header_set)
    payload = property(_FuelTankMsgPayload.FuelTankMsg_C_payload_get, _FuelTankMsgPayload.FuelTankMsg_C_payload_set)
    payloadPointer = property(_FuelTankMsgPayload.FuelTankMsg_C_payloadPointer_get, _FuelTankMsgPayload.FuelTankMsg_C_payloadPointer_set)
    headerPointer = property(_FuelTankMsgPayload.FuelTankMsg_C_headerPointer_get, _FuelTankMsgPayload.FuelTankMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _FuelTankMsgPayload.FuelTankMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import FuelTankMsg
        if type(source) == type(self):
            FuelTankMsg_C_subscribe(self, source)
        elif type(source) == FuelTankMsg:
            FuelTankMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            FuelTankMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe FuelTankMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        FuelTankMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import FuelTankMsg
        if type(source) == type(self):
            return (FuelTankMsg_C_isSubscribedTo(self, source))
        elif type(source) == FuelTankMsg:
            return (FuelTankMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (FuelTankMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        FuelTankMsg_C_addAuthor(self, self)
        if data:
            FuelTankMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        FuelTankMsg_C_addAuthor(self, self)
        FuelTankMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return FuelTankMsg_C_read(self)


    def __init__(self):
        _FuelTankMsgPayload.FuelTankMsg_C_swiginit(self, _FuelTankMsgPayload.new_FuelTankMsg_C())
    __swig_destroy__ = _FuelTankMsgPayload.delete_FuelTankMsg_C

# Register FuelTankMsg_C in _FuelTankMsgPayload:
_FuelTankMsgPayload.FuelTankMsg_C_swigregister(FuelTankMsg_C)

def FuelTankMsg_cpp_subscribe(subscriber, source):
    return _FuelTankMsgPayload.FuelTankMsg_cpp_subscribe(subscriber, source)

def FuelTankMsg_C_subscribe(subscriber, source):
    return _FuelTankMsgPayload.FuelTankMsg_C_subscribe(subscriber, source)

def FuelTankMsg_addr_subscribe(subscriber, sourceAddr):
    return _FuelTankMsgPayload.FuelTankMsg_addr_subscribe(subscriber, sourceAddr)

def FuelTankMsg_unsubscribe(subscriber):
    return _FuelTankMsgPayload.FuelTankMsg_unsubscribe(subscriber)

def FuelTankMsg_C_isSubscribedTo(subscriber, source):
    return _FuelTankMsgPayload.FuelTankMsg_C_isSubscribedTo(subscriber, source)

def FuelTankMsg_cpp_isSubscribedTo(subscriber, source):
    return _FuelTankMsgPayload.FuelTankMsg_cpp_isSubscribedTo(subscriber, source)

def FuelTankMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _FuelTankMsgPayload.FuelTankMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def FuelTankMsg_C_addAuthor(coowner, data):
    return _FuelTankMsgPayload.FuelTankMsg_C_addAuthor(coowner, data)

def FuelTankMsg_C_init(owner):
    return _FuelTankMsgPayload.FuelTankMsg_C_init(owner)

def FuelTankMsg_C_isLinked(data):
    return _FuelTankMsgPayload.FuelTankMsg_C_isLinked(data)

def FuelTankMsg_C_isWritten(data):
    return _FuelTankMsgPayload.FuelTankMsg_C_isWritten(data)

def FuelTankMsg_C_timeWritten(data):
    return _FuelTankMsgPayload.FuelTankMsg_C_timeWritten(data)

def FuelTankMsg_C_moduleID(data):
    return _FuelTankMsgPayload.FuelTankMsg_C_moduleID(data)

def FuelTankMsg_C_write(data, destination, moduleID, callTime):
    return _FuelTankMsgPayload.FuelTankMsg_C_write(data, destination, moduleID, callTime)

def FuelTankMsg_C_read(source):
    return _FuelTankMsgPayload.FuelTankMsg_C_read(source)

def FuelTankMsg_C_zeroMsgPayload():
    return _FuelTankMsgPayload.FuelTankMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_FuelTankMsgPayload.MsgHeader_isLinked_get, _FuelTankMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_FuelTankMsgPayload.MsgHeader_isWritten_get, _FuelTankMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_FuelTankMsgPayload.MsgHeader_timeWritten_get, _FuelTankMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_FuelTankMsgPayload.MsgHeader_moduleID_get, _FuelTankMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _FuelTankMsgPayload.MsgHeader_swiginit(self, _FuelTankMsgPayload.new_MsgHeader())
    __swig_destroy__ = _FuelTankMsgPayload.delete_MsgHeader

# Register MsgHeader in _FuelTankMsgPayload:
_FuelTankMsgPayload.MsgHeader_swigregister(MsgHeader)

