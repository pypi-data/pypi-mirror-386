# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _LandmarkMsgPayload
else:
    import _LandmarkMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LandmarkMsgPayload.delete_SwigPyIterator

    def value(self):
        return _LandmarkMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _LandmarkMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _LandmarkMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _LandmarkMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _LandmarkMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _LandmarkMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _LandmarkMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _LandmarkMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _LandmarkMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _LandmarkMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _LandmarkMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _LandmarkMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _LandmarkMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _LandmarkMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _LandmarkMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _LandmarkMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _LandmarkMsgPayload:
_LandmarkMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _LandmarkMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _LandmarkMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _LandmarkMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _LandmarkMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _LandmarkMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _LandmarkMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _LandmarkMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _LandmarkMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _LandmarkMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _LandmarkMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _LandmarkMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _LandmarkMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _LandmarkMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _LandmarkMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _LandmarkMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _LandmarkMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LandmarkMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LandmarkMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _LandmarkMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _LandmarkMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _LandmarkMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LandmarkMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LandmarkMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LandmarkMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LandmarkMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LandmarkMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _LandmarkMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _LandmarkMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _LandmarkMsgPayload.TimeVector_empty(self)

    def size(self):
        return _LandmarkMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _LandmarkMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _LandmarkMsgPayload.TimeVector_begin(self)

    def end(self):
        return _LandmarkMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _LandmarkMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _LandmarkMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _LandmarkMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _LandmarkMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _LandmarkMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _LandmarkMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _LandmarkMsgPayload.TimeVector_swiginit(self, _LandmarkMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _LandmarkMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _LandmarkMsgPayload.TimeVector_front(self)

    def back(self):
        return _LandmarkMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _LandmarkMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _LandmarkMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _LandmarkMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _LandmarkMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _LandmarkMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _LandmarkMsgPayload.delete_TimeVector

# Register TimeVector in _LandmarkMsgPayload:
_LandmarkMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LandmarkMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LandmarkMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _LandmarkMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _LandmarkMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _LandmarkMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LandmarkMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LandmarkMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LandmarkMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LandmarkMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LandmarkMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _LandmarkMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _LandmarkMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _LandmarkMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _LandmarkMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _LandmarkMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _LandmarkMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _LandmarkMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _LandmarkMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _LandmarkMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _LandmarkMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _LandmarkMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _LandmarkMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _LandmarkMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _LandmarkMsgPayload.DoubleVector_swiginit(self, _LandmarkMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _LandmarkMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _LandmarkMsgPayload.DoubleVector_front(self)

    def back(self):
        return _LandmarkMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _LandmarkMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _LandmarkMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _LandmarkMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _LandmarkMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _LandmarkMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _LandmarkMsgPayload.delete_DoubleVector

# Register DoubleVector in _LandmarkMsgPayload:
_LandmarkMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LandmarkMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LandmarkMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _LandmarkMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _LandmarkMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _LandmarkMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LandmarkMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LandmarkMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LandmarkMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LandmarkMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LandmarkMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _LandmarkMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _LandmarkMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _LandmarkMsgPayload.StringVector_empty(self)

    def size(self):
        return _LandmarkMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _LandmarkMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _LandmarkMsgPayload.StringVector_begin(self)

    def end(self):
        return _LandmarkMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _LandmarkMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _LandmarkMsgPayload.StringVector_rend(self)

    def clear(self):
        return _LandmarkMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _LandmarkMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _LandmarkMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _LandmarkMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _LandmarkMsgPayload.StringVector_swiginit(self, _LandmarkMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _LandmarkMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _LandmarkMsgPayload.StringVector_front(self)

    def back(self):
        return _LandmarkMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _LandmarkMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _LandmarkMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _LandmarkMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _LandmarkMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _LandmarkMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _LandmarkMsgPayload.delete_StringVector

# Register StringVector in _LandmarkMsgPayload:
_LandmarkMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _LandmarkMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _LandmarkMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _LandmarkMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _LandmarkMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _LandmarkMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _LandmarkMsgPayload.NANO2SEC
SEC2NANO = _LandmarkMsgPayload.SEC2NANO
SEC2HOUR = _LandmarkMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _LandmarkMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _LandmarkMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _LandmarkMsgPayload.secToNano(seconds)
BOOL_FALSE = _LandmarkMsgPayload.BOOL_FALSE
BOOL_TRUE = _LandmarkMsgPayload.BOOL_TRUE
AVAILABLE = _LandmarkMsgPayload.AVAILABLE
UNAVAILABLE = _LandmarkMsgPayload.UNAVAILABLE
BalancedWheels = _LandmarkMsgPayload.BalancedWheels
JitterSimple = _LandmarkMsgPayload.JitterSimple
JitterFullyCoupled = _LandmarkMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LandmarkMsgPayload.SysModel_swiginit(self, _LandmarkMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _LandmarkMsgPayload.delete_SysModel

    def SelfInit(self):
        return _LandmarkMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _LandmarkMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _LandmarkMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _LandmarkMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_LandmarkMsgPayload.SysModel_ModelTag_get, _LandmarkMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_LandmarkMsgPayload.SysModel_CallCounts_get, _LandmarkMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_LandmarkMsgPayload.SysModel_RNGSeed_get, _LandmarkMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_LandmarkMsgPayload.SysModel_moduleID_get, _LandmarkMsgPayload.SysModel_moduleID_set)

# Register SysModel in _LandmarkMsgPayload:
_LandmarkMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _LandmarkMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _LandmarkMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _LandmarkMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _LandmarkMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _LandmarkMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _LandmarkMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _LandmarkMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _LandmarkMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _LandmarkMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _LandmarkMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _LandmarkMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _LandmarkMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class LandmarkMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isVisible = property(_LandmarkMsgPayload.LandmarkMsgPayload_isVisible_get, _LandmarkMsgPayload.LandmarkMsgPayload_isVisible_set)
    pL = property(_LandmarkMsgPayload.LandmarkMsgPayload_pL_get, _LandmarkMsgPayload.LandmarkMsgPayload_pL_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _LandmarkMsgPayload.LandmarkMsgPayload_swiginit(self, _LandmarkMsgPayload.new_LandmarkMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _LandmarkMsgPayload.delete_LandmarkMsgPayload

# Register LandmarkMsgPayload in _LandmarkMsgPayload:
_LandmarkMsgPayload.LandmarkMsgPayload_swigregister(LandmarkMsgPayload)

def _pprint_LandmarkMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[LandmarkMsgPayload.__repr__] = _pprint_LandmarkMsgPayload

class LandmarkMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_LandmarkMsgPayload.LandmarkMsgReader_bskLogger_get, _LandmarkMsgPayload.LandmarkMsgReader_bskLogger_set)
    zeroMsgPayload = property(_LandmarkMsgPayload.LandmarkMsgReader_zeroMsgPayload_get, _LandmarkMsgPayload.LandmarkMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _LandmarkMsgPayload.LandmarkMsgReader_swiginit(self, _LandmarkMsgPayload.new_LandmarkMsgReader(*args))

    def __call__(self):
        return _LandmarkMsgPayload.LandmarkMsgReader___call__(self)

    def isLinked(self):
        return _LandmarkMsgPayload.LandmarkMsgReader_isLinked(self)

    def isWritten(self):
        return _LandmarkMsgPayload.LandmarkMsgReader_isWritten(self)

    def timeWritten(self):
        return _LandmarkMsgPayload.LandmarkMsgReader_timeWritten(self)

    def moduleID(self):
        return _LandmarkMsgPayload.LandmarkMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _LandmarkMsgPayload.LandmarkMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _LandmarkMsgPayload.LandmarkMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _LandmarkMsgPayload.LandmarkMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _LandmarkMsgPayload.LandmarkMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _LandmarkMsgPayload.LandmarkMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _LandmarkMsgPayload.LandmarkMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _LandmarkMsgPayload.LandmarkMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _LandmarkMsgPayload.LandmarkMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _LandmarkMsgPayload.LandmarkMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _LandmarkMsgPayload.LandmarkMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == LandmarkMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.LandmarkMsgPayload import LandmarkMsg_C
            if type(source) == LandmarkMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<LandmarkMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == LandmarkMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.LandmarkMsgPayload import LandmarkMsg_C
        except ImportError:
            return 0

        if type(source) == LandmarkMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _LandmarkMsgPayload.delete_LandmarkMsgReader

# Register LandmarkMsgReader in _LandmarkMsgPayload:
_LandmarkMsgPayload.LandmarkMsgReader_swigregister(LandmarkMsgReader)
class LandmarkMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LandmarkMsgPayload.LandmarkMsgWriter_swiginit(self, _LandmarkMsgPayload.new_LandmarkMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _LandmarkMsgPayload.LandmarkMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _LandmarkMsgPayload.delete_LandmarkMsgWriter

# Register LandmarkMsgWriter in _LandmarkMsgPayload:
_LandmarkMsgPayload.LandmarkMsgWriter_swigregister(LandmarkMsgWriter)
class LandmarkMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_LandmarkMsgPayload.LandmarkMsg_write_get, _LandmarkMsgPayload.LandmarkMsg_write_set)

    def addSubscriber(self):
        return _LandmarkMsgPayload.LandmarkMsg_addSubscriber(self)

    def addAuthor(self):
        return _LandmarkMsgPayload.LandmarkMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _LandmarkMsgPayload.LandmarkMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _LandmarkMsgPayload.LandmarkMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _LandmarkMsgPayload.LandmarkMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_LandmarkMsgPayload.LandmarkMsg_zeroMsgPayload_get, _LandmarkMsgPayload.LandmarkMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _LandmarkMsgPayload.LandmarkMsg_isLinked(self)

    def getPayloadSize(self):
        return _LandmarkMsgPayload.LandmarkMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _LandmarkMsgPayload.LandmarkMsg_swiginit(self, _LandmarkMsgPayload.new_LandmarkMsg())
    __swig_destroy__ = _LandmarkMsgPayload.delete_LandmarkMsg

# Register LandmarkMsg in _LandmarkMsgPayload:
_LandmarkMsgPayload.LandmarkMsg_swigregister(LandmarkMsg)
class LandmarkMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LandmarkMsgPayload.LandmarkMsgRecorder_swiginit(self, _LandmarkMsgPayload.new_LandmarkMsgRecorder(*args))
    __swig_destroy__ = _LandmarkMsgPayload.delete_LandmarkMsgRecorder

    def SelfInit(self):
        return _LandmarkMsgPayload.LandmarkMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _LandmarkMsgPayload.LandmarkMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _LandmarkMsgPayload.LandmarkMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _LandmarkMsgPayload.LandmarkMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _LandmarkMsgPayload.LandmarkMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _LandmarkMsgPayload.LandmarkMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _LandmarkMsgPayload.LandmarkMsgRecorder___record_vector(self)

    def size(self):
        return _LandmarkMsgPayload.LandmarkMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _LandmarkMsgPayload.LandmarkMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _LandmarkMsgPayload.LandmarkMsgRecorder_clear(self)
    bskLogger = property(_LandmarkMsgPayload.LandmarkMsgRecorder_bskLogger_get, _LandmarkMsgPayload.LandmarkMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _LandmarkMsgPayload.LandmarkMsgRecorder_updateTimeInterval(self, timeDiff)

    def _isVisible_array(self):
        return _LandmarkMsgPayload.LandmarkMsgRecorder__isVisible_array(self)

    @property
    def isVisible(self):
        return self._isVisible_array()


    def _pL_array(self):
        return _LandmarkMsgPayload.LandmarkMsgRecorder__pL_array(self)

    @property
    def pL(self):
        return self._pL_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register LandmarkMsgRecorder in _LandmarkMsgPayload:
_LandmarkMsgPayload.LandmarkMsgRecorder_swigregister(LandmarkMsgRecorder)
class LandmarkMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LandmarkMsgPayload.LandmarkMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LandmarkMsgPayload.LandmarkMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _LandmarkMsgPayload.LandmarkMsgPayloadVector___bool__(self)

    def __len__(self):
        return _LandmarkMsgPayload.LandmarkMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _LandmarkMsgPayload.LandmarkMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LandmarkMsgPayload.LandmarkMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LandmarkMsgPayload.LandmarkMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LandmarkMsgPayload.LandmarkMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LandmarkMsgPayload.LandmarkMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LandmarkMsgPayload.LandmarkMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _LandmarkMsgPayload.LandmarkMsgPayloadVector_pop(self)

    def append(self, x):
        return _LandmarkMsgPayload.LandmarkMsgPayloadVector_append(self, x)

    def empty(self):
        return _LandmarkMsgPayload.LandmarkMsgPayloadVector_empty(self)

    def size(self):
        return _LandmarkMsgPayload.LandmarkMsgPayloadVector_size(self)

    def swap(self, v):
        return _LandmarkMsgPayload.LandmarkMsgPayloadVector_swap(self, v)

    def begin(self):
        return _LandmarkMsgPayload.LandmarkMsgPayloadVector_begin(self)

    def end(self):
        return _LandmarkMsgPayload.LandmarkMsgPayloadVector_end(self)

    def rbegin(self):
        return _LandmarkMsgPayload.LandmarkMsgPayloadVector_rbegin(self)

    def rend(self):
        return _LandmarkMsgPayload.LandmarkMsgPayloadVector_rend(self)

    def clear(self):
        return _LandmarkMsgPayload.LandmarkMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _LandmarkMsgPayload.LandmarkMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _LandmarkMsgPayload.LandmarkMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _LandmarkMsgPayload.LandmarkMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _LandmarkMsgPayload.LandmarkMsgPayloadVector_swiginit(self, _LandmarkMsgPayload.new_LandmarkMsgPayloadVector(*args))

    def push_back(self, x):
        return _LandmarkMsgPayload.LandmarkMsgPayloadVector_push_back(self, x)

    def front(self):
        return _LandmarkMsgPayload.LandmarkMsgPayloadVector_front(self)

    def back(self):
        return _LandmarkMsgPayload.LandmarkMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _LandmarkMsgPayload.LandmarkMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _LandmarkMsgPayload.LandmarkMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _LandmarkMsgPayload.LandmarkMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _LandmarkMsgPayload.LandmarkMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _LandmarkMsgPayload.LandmarkMsgPayloadVector_capacity(self)

    def get_all(self):
        return _LandmarkMsgPayload.LandmarkMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _LandmarkMsgPayload.delete_LandmarkMsgPayloadVector

# Register LandmarkMsgPayloadVector in _LandmarkMsgPayload:
_LandmarkMsgPayload.LandmarkMsgPayloadVector_swigregister(LandmarkMsgPayloadVector)
class LandmarkMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsVector_empty(self)

    def size(self):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsVector_begin(self)

    def end(self):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsVector_rend(self)

    def clear(self):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _LandmarkMsgPayload.LandmarkMsgOutMsgsVector_swiginit(self, _LandmarkMsgPayload.new_LandmarkMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsVector_front(self)

    def back(self):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _LandmarkMsgPayload.delete_LandmarkMsgOutMsgsVector

# Register LandmarkMsgOutMsgsVector in _LandmarkMsgPayload:
_LandmarkMsgPayload.LandmarkMsgOutMsgsVector_swigregister(LandmarkMsgOutMsgsVector)
class LandmarkMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _LandmarkMsgPayload.LandmarkMsgOutMsgsPtrVector_swiginit(self, _LandmarkMsgPayload.new_LandmarkMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _LandmarkMsgPayload.LandmarkMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _LandmarkMsgPayload.delete_LandmarkMsgOutMsgsPtrVector

# Register LandmarkMsgOutMsgsPtrVector in _LandmarkMsgPayload:
_LandmarkMsgPayload.LandmarkMsgOutMsgsPtrVector_swigregister(LandmarkMsgOutMsgsPtrVector)
class LandmarkMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LandmarkMsgPayload.LandmarkMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LandmarkMsgPayload.LandmarkMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _LandmarkMsgPayload.LandmarkMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _LandmarkMsgPayload.LandmarkMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _LandmarkMsgPayload.LandmarkMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LandmarkMsgPayload.LandmarkMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LandmarkMsgPayload.LandmarkMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LandmarkMsgPayload.LandmarkMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LandmarkMsgPayload.LandmarkMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LandmarkMsgPayload.LandmarkMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _LandmarkMsgPayload.LandmarkMsgInMsgsVector_pop(self)

    def append(self, x):
        return _LandmarkMsgPayload.LandmarkMsgInMsgsVector_append(self, x)

    def empty(self):
        return _LandmarkMsgPayload.LandmarkMsgInMsgsVector_empty(self)

    def size(self):
        return _LandmarkMsgPayload.LandmarkMsgInMsgsVector_size(self)

    def swap(self, v):
        return _LandmarkMsgPayload.LandmarkMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _LandmarkMsgPayload.LandmarkMsgInMsgsVector_begin(self)

    def end(self):
        return _LandmarkMsgPayload.LandmarkMsgInMsgsVector_end(self)

    def rbegin(self):
        return _LandmarkMsgPayload.LandmarkMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _LandmarkMsgPayload.LandmarkMsgInMsgsVector_rend(self)

    def clear(self):
        return _LandmarkMsgPayload.LandmarkMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _LandmarkMsgPayload.LandmarkMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _LandmarkMsgPayload.LandmarkMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _LandmarkMsgPayload.LandmarkMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _LandmarkMsgPayload.LandmarkMsgInMsgsVector_swiginit(self, _LandmarkMsgPayload.new_LandmarkMsgInMsgsVector(*args))

    def push_back(self, x):
        return _LandmarkMsgPayload.LandmarkMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _LandmarkMsgPayload.LandmarkMsgInMsgsVector_front(self)

    def back(self):
        return _LandmarkMsgPayload.LandmarkMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _LandmarkMsgPayload.LandmarkMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _LandmarkMsgPayload.LandmarkMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _LandmarkMsgPayload.LandmarkMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _LandmarkMsgPayload.LandmarkMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _LandmarkMsgPayload.LandmarkMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _LandmarkMsgPayload.delete_LandmarkMsgInMsgsVector

# Register LandmarkMsgInMsgsVector in _LandmarkMsgPayload:
_LandmarkMsgPayload.LandmarkMsgInMsgsVector_swigregister(LandmarkMsgInMsgsVector)
class LandmarkMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_LandmarkMsgPayload.LandmarkMsg_C_header_get, _LandmarkMsgPayload.LandmarkMsg_C_header_set)
    payload = property(_LandmarkMsgPayload.LandmarkMsg_C_payload_get, _LandmarkMsgPayload.LandmarkMsg_C_payload_set)
    payloadPointer = property(_LandmarkMsgPayload.LandmarkMsg_C_payloadPointer_get, _LandmarkMsgPayload.LandmarkMsg_C_payloadPointer_set)
    headerPointer = property(_LandmarkMsgPayload.LandmarkMsg_C_headerPointer_get, _LandmarkMsgPayload.LandmarkMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _LandmarkMsgPayload.LandmarkMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import LandmarkMsg
        if type(source) == type(self):
            LandmarkMsg_C_subscribe(self, source)
        elif type(source) == LandmarkMsg:
            LandmarkMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            LandmarkMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe LandmarkMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        LandmarkMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import LandmarkMsg
        if type(source) == type(self):
            return (LandmarkMsg_C_isSubscribedTo(self, source))
        elif type(source) == LandmarkMsg:
            return (LandmarkMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (LandmarkMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        LandmarkMsg_C_addAuthor(self, self)
        if data:
            LandmarkMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        LandmarkMsg_C_addAuthor(self, self)
        LandmarkMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return LandmarkMsg_C_read(self)


    def __init__(self):
        _LandmarkMsgPayload.LandmarkMsg_C_swiginit(self, _LandmarkMsgPayload.new_LandmarkMsg_C())
    __swig_destroy__ = _LandmarkMsgPayload.delete_LandmarkMsg_C

# Register LandmarkMsg_C in _LandmarkMsgPayload:
_LandmarkMsgPayload.LandmarkMsg_C_swigregister(LandmarkMsg_C)

def LandmarkMsg_cpp_subscribe(subscriber, source):
    return _LandmarkMsgPayload.LandmarkMsg_cpp_subscribe(subscriber, source)

def LandmarkMsg_C_subscribe(subscriber, source):
    return _LandmarkMsgPayload.LandmarkMsg_C_subscribe(subscriber, source)

def LandmarkMsg_addr_subscribe(subscriber, sourceAddr):
    return _LandmarkMsgPayload.LandmarkMsg_addr_subscribe(subscriber, sourceAddr)

def LandmarkMsg_unsubscribe(subscriber):
    return _LandmarkMsgPayload.LandmarkMsg_unsubscribe(subscriber)

def LandmarkMsg_C_isSubscribedTo(subscriber, source):
    return _LandmarkMsgPayload.LandmarkMsg_C_isSubscribedTo(subscriber, source)

def LandmarkMsg_cpp_isSubscribedTo(subscriber, source):
    return _LandmarkMsgPayload.LandmarkMsg_cpp_isSubscribedTo(subscriber, source)

def LandmarkMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _LandmarkMsgPayload.LandmarkMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def LandmarkMsg_C_addAuthor(coowner, data):
    return _LandmarkMsgPayload.LandmarkMsg_C_addAuthor(coowner, data)

def LandmarkMsg_C_init(owner):
    return _LandmarkMsgPayload.LandmarkMsg_C_init(owner)

def LandmarkMsg_C_isLinked(data):
    return _LandmarkMsgPayload.LandmarkMsg_C_isLinked(data)

def LandmarkMsg_C_isWritten(data):
    return _LandmarkMsgPayload.LandmarkMsg_C_isWritten(data)

def LandmarkMsg_C_timeWritten(data):
    return _LandmarkMsgPayload.LandmarkMsg_C_timeWritten(data)

def LandmarkMsg_C_moduleID(data):
    return _LandmarkMsgPayload.LandmarkMsg_C_moduleID(data)

def LandmarkMsg_C_write(data, destination, moduleID, callTime):
    return _LandmarkMsgPayload.LandmarkMsg_C_write(data, destination, moduleID, callTime)

def LandmarkMsg_C_read(source):
    return _LandmarkMsgPayload.LandmarkMsg_C_read(source)

def LandmarkMsg_C_zeroMsgPayload():
    return _LandmarkMsgPayload.LandmarkMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_LandmarkMsgPayload.MsgHeader_isLinked_get, _LandmarkMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_LandmarkMsgPayload.MsgHeader_isWritten_get, _LandmarkMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_LandmarkMsgPayload.MsgHeader_timeWritten_get, _LandmarkMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_LandmarkMsgPayload.MsgHeader_moduleID_get, _LandmarkMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _LandmarkMsgPayload.MsgHeader_swiginit(self, _LandmarkMsgPayload.new_MsgHeader())
    __swig_destroy__ = _LandmarkMsgPayload.delete_MsgHeader

# Register MsgHeader in _LandmarkMsgPayload:
_LandmarkMsgPayload.MsgHeader_swigregister(MsgHeader)

