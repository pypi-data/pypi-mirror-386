# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _TDBVehicleClockCorrelationMsgPayload
else:
    import _TDBVehicleClockCorrelationMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TDBVehicleClockCorrelationMsgPayload.delete_SwigPyIterator

    def value(self):
        return _TDBVehicleClockCorrelationMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _TDBVehicleClockCorrelationMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _TDBVehicleClockCorrelationMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _TDBVehicleClockCorrelationMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _TDBVehicleClockCorrelationMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _TDBVehicleClockCorrelationMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _TDBVehicleClockCorrelationMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _TDBVehicleClockCorrelationMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _TDBVehicleClockCorrelationMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _TDBVehicleClockCorrelationMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _TDBVehicleClockCorrelationMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _TDBVehicleClockCorrelationMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _TDBVehicleClockCorrelationMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _TDBVehicleClockCorrelationMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _TDBVehicleClockCorrelationMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _TDBVehicleClockCorrelationMsgPayload:
_TDBVehicleClockCorrelationMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _TDBVehicleClockCorrelationMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _TDBVehicleClockCorrelationMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _TDBVehicleClockCorrelationMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _TDBVehicleClockCorrelationMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _TDBVehicleClockCorrelationMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _TDBVehicleClockCorrelationMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _TDBVehicleClockCorrelationMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _TDBVehicleClockCorrelationMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _TDBVehicleClockCorrelationMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _TDBVehicleClockCorrelationMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _TDBVehicleClockCorrelationMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _TDBVehicleClockCorrelationMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _TDBVehicleClockCorrelationMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _TDBVehicleClockCorrelationMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _TDBVehicleClockCorrelationMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _TDBVehicleClockCorrelationMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TDBVehicleClockCorrelationMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TDBVehicleClockCorrelationMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _TDBVehicleClockCorrelationMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _TDBVehicleClockCorrelationMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _TDBVehicleClockCorrelationMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TDBVehicleClockCorrelationMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _TDBVehicleClockCorrelationMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _TDBVehicleClockCorrelationMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _TDBVehicleClockCorrelationMsgPayload.TimeVector_empty(self)

    def size(self):
        return _TDBVehicleClockCorrelationMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _TDBVehicleClockCorrelationMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _TDBVehicleClockCorrelationMsgPayload.TimeVector_begin(self)

    def end(self):
        return _TDBVehicleClockCorrelationMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _TDBVehicleClockCorrelationMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _TDBVehicleClockCorrelationMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _TDBVehicleClockCorrelationMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _TDBVehicleClockCorrelationMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _TDBVehicleClockCorrelationMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _TDBVehicleClockCorrelationMsgPayload.TimeVector_swiginit(self, _TDBVehicleClockCorrelationMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _TDBVehicleClockCorrelationMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _TDBVehicleClockCorrelationMsgPayload.TimeVector_front(self)

    def back(self):
        return _TDBVehicleClockCorrelationMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _TDBVehicleClockCorrelationMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _TDBVehicleClockCorrelationMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _TDBVehicleClockCorrelationMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _TDBVehicleClockCorrelationMsgPayload.delete_TimeVector

# Register TimeVector in _TDBVehicleClockCorrelationMsgPayload:
_TDBVehicleClockCorrelationMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TDBVehicleClockCorrelationMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TDBVehicleClockCorrelationMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _TDBVehicleClockCorrelationMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _TDBVehicleClockCorrelationMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _TDBVehicleClockCorrelationMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TDBVehicleClockCorrelationMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _TDBVehicleClockCorrelationMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _TDBVehicleClockCorrelationMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _TDBVehicleClockCorrelationMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _TDBVehicleClockCorrelationMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _TDBVehicleClockCorrelationMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _TDBVehicleClockCorrelationMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _TDBVehicleClockCorrelationMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _TDBVehicleClockCorrelationMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _TDBVehicleClockCorrelationMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _TDBVehicleClockCorrelationMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _TDBVehicleClockCorrelationMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _TDBVehicleClockCorrelationMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _TDBVehicleClockCorrelationMsgPayload.DoubleVector_swiginit(self, _TDBVehicleClockCorrelationMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _TDBVehicleClockCorrelationMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _TDBVehicleClockCorrelationMsgPayload.DoubleVector_front(self)

    def back(self):
        return _TDBVehicleClockCorrelationMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _TDBVehicleClockCorrelationMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _TDBVehicleClockCorrelationMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _TDBVehicleClockCorrelationMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _TDBVehicleClockCorrelationMsgPayload.delete_DoubleVector

# Register DoubleVector in _TDBVehicleClockCorrelationMsgPayload:
_TDBVehicleClockCorrelationMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TDBVehicleClockCorrelationMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TDBVehicleClockCorrelationMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _TDBVehicleClockCorrelationMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _TDBVehicleClockCorrelationMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _TDBVehicleClockCorrelationMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TDBVehicleClockCorrelationMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _TDBVehicleClockCorrelationMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _TDBVehicleClockCorrelationMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _TDBVehicleClockCorrelationMsgPayload.StringVector_empty(self)

    def size(self):
        return _TDBVehicleClockCorrelationMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _TDBVehicleClockCorrelationMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _TDBVehicleClockCorrelationMsgPayload.StringVector_begin(self)

    def end(self):
        return _TDBVehicleClockCorrelationMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _TDBVehicleClockCorrelationMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _TDBVehicleClockCorrelationMsgPayload.StringVector_rend(self)

    def clear(self):
        return _TDBVehicleClockCorrelationMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _TDBVehicleClockCorrelationMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _TDBVehicleClockCorrelationMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _TDBVehicleClockCorrelationMsgPayload.StringVector_swiginit(self, _TDBVehicleClockCorrelationMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _TDBVehicleClockCorrelationMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _TDBVehicleClockCorrelationMsgPayload.StringVector_front(self)

    def back(self):
        return _TDBVehicleClockCorrelationMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _TDBVehicleClockCorrelationMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _TDBVehicleClockCorrelationMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _TDBVehicleClockCorrelationMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _TDBVehicleClockCorrelationMsgPayload.delete_StringVector

# Register StringVector in _TDBVehicleClockCorrelationMsgPayload:
_TDBVehicleClockCorrelationMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _TDBVehicleClockCorrelationMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _TDBVehicleClockCorrelationMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _TDBVehicleClockCorrelationMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _TDBVehicleClockCorrelationMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _TDBVehicleClockCorrelationMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _TDBVehicleClockCorrelationMsgPayload.NANO2SEC
SEC2NANO = _TDBVehicleClockCorrelationMsgPayload.SEC2NANO
SEC2HOUR = _TDBVehicleClockCorrelationMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _TDBVehicleClockCorrelationMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _TDBVehicleClockCorrelationMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _TDBVehicleClockCorrelationMsgPayload.secToNano(seconds)
BOOL_FALSE = _TDBVehicleClockCorrelationMsgPayload.BOOL_FALSE
BOOL_TRUE = _TDBVehicleClockCorrelationMsgPayload.BOOL_TRUE
AVAILABLE = _TDBVehicleClockCorrelationMsgPayload.AVAILABLE
UNAVAILABLE = _TDBVehicleClockCorrelationMsgPayload.UNAVAILABLE
BalancedWheels = _TDBVehicleClockCorrelationMsgPayload.BalancedWheels
JitterSimple = _TDBVehicleClockCorrelationMsgPayload.JitterSimple
JitterFullyCoupled = _TDBVehicleClockCorrelationMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDBVehicleClockCorrelationMsgPayload.SysModel_swiginit(self, _TDBVehicleClockCorrelationMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _TDBVehicleClockCorrelationMsgPayload.delete_SysModel

    def SelfInit(self):
        return _TDBVehicleClockCorrelationMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _TDBVehicleClockCorrelationMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _TDBVehicleClockCorrelationMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _TDBVehicleClockCorrelationMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_TDBVehicleClockCorrelationMsgPayload.SysModel_ModelTag_get, _TDBVehicleClockCorrelationMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_TDBVehicleClockCorrelationMsgPayload.SysModel_CallCounts_get, _TDBVehicleClockCorrelationMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_TDBVehicleClockCorrelationMsgPayload.SysModel_RNGSeed_get, _TDBVehicleClockCorrelationMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_TDBVehicleClockCorrelationMsgPayload.SysModel_moduleID_get, _TDBVehicleClockCorrelationMsgPayload.SysModel_moduleID_set)

# Register SysModel in _TDBVehicleClockCorrelationMsgPayload:
_TDBVehicleClockCorrelationMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _TDBVehicleClockCorrelationMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _TDBVehicleClockCorrelationMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _TDBVehicleClockCorrelationMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _TDBVehicleClockCorrelationMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _TDBVehicleClockCorrelationMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _TDBVehicleClockCorrelationMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _TDBVehicleClockCorrelationMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _TDBVehicleClockCorrelationMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _TDBVehicleClockCorrelationMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _TDBVehicleClockCorrelationMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _TDBVehicleClockCorrelationMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _TDBVehicleClockCorrelationMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class TDBVehicleClockCorrelationMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ephemerisTime = property(_TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayload_ephemerisTime_get, _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayload_ephemerisTime_set)
    vehicleClockTime = property(_TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayload_vehicleClockTime_get, _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayload_vehicleClockTime_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayload_swiginit(self, _TDBVehicleClockCorrelationMsgPayload.new_TDBVehicleClockCorrelationMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _TDBVehicleClockCorrelationMsgPayload.delete_TDBVehicleClockCorrelationMsgPayload

# Register TDBVehicleClockCorrelationMsgPayload in _TDBVehicleClockCorrelationMsgPayload:
_TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayload_swigregister(TDBVehicleClockCorrelationMsgPayload)

def _pprint_TDBVehicleClockCorrelationMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[TDBVehicleClockCorrelationMsgPayload.__repr__] = _pprint_TDBVehicleClockCorrelationMsgPayload

class TDBVehicleClockCorrelationMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgReader_bskLogger_get, _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgReader_bskLogger_set)
    zeroMsgPayload = property(_TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgReader_zeroMsgPayload_get, _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgReader_swiginit(self, _TDBVehicleClockCorrelationMsgPayload.new_TDBVehicleClockCorrelationMsgReader(*args))

    def __call__(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgReader___call__(self)

    def isLinked(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgReader_isLinked(self)

    def isWritten(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgReader_isWritten(self)

    def timeWritten(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgReader_timeWritten(self)

    def moduleID(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == TDBVehicleClockCorrelationMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.TDBVehicleClockCorrelationMsgPayload import TDBVehicleClockCorrelationMsg_C
            if type(source) == TDBVehicleClockCorrelationMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<TDBVehicleClockCorrelationMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == TDBVehicleClockCorrelationMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.TDBVehicleClockCorrelationMsgPayload import TDBVehicleClockCorrelationMsg_C
        except ImportError:
            return 0

        if type(source) == TDBVehicleClockCorrelationMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _TDBVehicleClockCorrelationMsgPayload.delete_TDBVehicleClockCorrelationMsgReader

# Register TDBVehicleClockCorrelationMsgReader in _TDBVehicleClockCorrelationMsgPayload:
_TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgReader_swigregister(TDBVehicleClockCorrelationMsgReader)
class TDBVehicleClockCorrelationMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgWriter_swiginit(self, _TDBVehicleClockCorrelationMsgPayload.new_TDBVehicleClockCorrelationMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _TDBVehicleClockCorrelationMsgPayload.delete_TDBVehicleClockCorrelationMsgWriter

# Register TDBVehicleClockCorrelationMsgWriter in _TDBVehicleClockCorrelationMsgPayload:
_TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgWriter_swigregister(TDBVehicleClockCorrelationMsgWriter)
class TDBVehicleClockCorrelationMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_write_get, _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_write_set)

    def addSubscriber(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_addSubscriber(self)

    def addAuthor(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_zeroMsgPayload_get, _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_isLinked(self)

    def getPayloadSize(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_swiginit(self, _TDBVehicleClockCorrelationMsgPayload.new_TDBVehicleClockCorrelationMsg())
    __swig_destroy__ = _TDBVehicleClockCorrelationMsgPayload.delete_TDBVehicleClockCorrelationMsg

# Register TDBVehicleClockCorrelationMsg in _TDBVehicleClockCorrelationMsgPayload:
_TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_swigregister(TDBVehicleClockCorrelationMsg)
class TDBVehicleClockCorrelationMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgRecorder_swiginit(self, _TDBVehicleClockCorrelationMsgPayload.new_TDBVehicleClockCorrelationMsgRecorder(*args))
    __swig_destroy__ = _TDBVehicleClockCorrelationMsgPayload.delete_TDBVehicleClockCorrelationMsgRecorder

    def SelfInit(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgRecorder___record_vector(self)

    def size(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgRecorder_clear(self)
    bskLogger = property(_TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgRecorder_bskLogger_get, _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgRecorder_updateTimeInterval(self, timeDiff)

    def _ephemerisTime_array(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgRecorder__ephemerisTime_array(self)

    @property
    def ephemerisTime(self):
        return self._ephemerisTime_array()


    def _vehicleClockTime_array(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgRecorder__vehicleClockTime_array(self)

    @property
    def vehicleClockTime(self):
        return self._vehicleClockTime_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register TDBVehicleClockCorrelationMsgRecorder in _TDBVehicleClockCorrelationMsgPayload:
_TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgRecorder_swigregister(TDBVehicleClockCorrelationMsgRecorder)
class TDBVehicleClockCorrelationMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayloadVector___bool__(self)

    def __len__(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayloadVector_pop(self)

    def append(self, x):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayloadVector_append(self, x)

    def empty(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayloadVector_empty(self)

    def size(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayloadVector_size(self)

    def swap(self, v):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayloadVector_swap(self, v)

    def begin(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayloadVector_begin(self)

    def end(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayloadVector_end(self)

    def rbegin(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayloadVector_rbegin(self)

    def rend(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayloadVector_rend(self)

    def clear(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayloadVector_swiginit(self, _TDBVehicleClockCorrelationMsgPayload.new_TDBVehicleClockCorrelationMsgPayloadVector(*args))

    def push_back(self, x):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayloadVector_push_back(self, x)

    def front(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayloadVector_front(self)

    def back(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayloadVector_capacity(self)

    def get_all(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _TDBVehicleClockCorrelationMsgPayload.delete_TDBVehicleClockCorrelationMsgPayloadVector

# Register TDBVehicleClockCorrelationMsgPayloadVector in _TDBVehicleClockCorrelationMsgPayload:
_TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgPayloadVector_swigregister(TDBVehicleClockCorrelationMsgPayloadVector)
class TDBVehicleClockCorrelationMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsVector_empty(self)

    def size(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsVector_begin(self)

    def end(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsVector_rend(self)

    def clear(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsVector_swiginit(self, _TDBVehicleClockCorrelationMsgPayload.new_TDBVehicleClockCorrelationMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsVector_front(self)

    def back(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _TDBVehicleClockCorrelationMsgPayload.delete_TDBVehicleClockCorrelationMsgOutMsgsVector

# Register TDBVehicleClockCorrelationMsgOutMsgsVector in _TDBVehicleClockCorrelationMsgPayload:
_TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsVector_swigregister(TDBVehicleClockCorrelationMsgOutMsgsVector)
class TDBVehicleClockCorrelationMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsPtrVector_swiginit(self, _TDBVehicleClockCorrelationMsgPayload.new_TDBVehicleClockCorrelationMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _TDBVehicleClockCorrelationMsgPayload.delete_TDBVehicleClockCorrelationMsgOutMsgsPtrVector

# Register TDBVehicleClockCorrelationMsgOutMsgsPtrVector in _TDBVehicleClockCorrelationMsgPayload:
_TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgOutMsgsPtrVector_swigregister(TDBVehicleClockCorrelationMsgOutMsgsPtrVector)
class TDBVehicleClockCorrelationMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgInMsgsVector_pop(self)

    def append(self, x):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgInMsgsVector_append(self, x)

    def empty(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgInMsgsVector_empty(self)

    def size(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgInMsgsVector_size(self)

    def swap(self, v):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgInMsgsVector_begin(self)

    def end(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgInMsgsVector_end(self)

    def rbegin(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgInMsgsVector_rend(self)

    def clear(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgInMsgsVector_swiginit(self, _TDBVehicleClockCorrelationMsgPayload.new_TDBVehicleClockCorrelationMsgInMsgsVector(*args))

    def push_back(self, x):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgInMsgsVector_front(self)

    def back(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _TDBVehicleClockCorrelationMsgPayload.delete_TDBVehicleClockCorrelationMsgInMsgsVector

# Register TDBVehicleClockCorrelationMsgInMsgsVector in _TDBVehicleClockCorrelationMsgPayload:
_TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsgInMsgsVector_swigregister(TDBVehicleClockCorrelationMsgInMsgsVector)
class TDBVehicleClockCorrelationMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_C_header_get, _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_C_header_set)
    payload = property(_TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_C_payload_get, _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_C_payload_set)
    payloadPointer = property(_TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_C_payloadPointer_get, _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_C_payloadPointer_set)
    headerPointer = property(_TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_C_headerPointer_get, _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import TDBVehicleClockCorrelationMsg
        if type(source) == type(self):
            TDBVehicleClockCorrelationMsg_C_subscribe(self, source)
        elif type(source) == TDBVehicleClockCorrelationMsg:
            TDBVehicleClockCorrelationMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            TDBVehicleClockCorrelationMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe TDBVehicleClockCorrelationMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        TDBVehicleClockCorrelationMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import TDBVehicleClockCorrelationMsg
        if type(source) == type(self):
            return (TDBVehicleClockCorrelationMsg_C_isSubscribedTo(self, source))
        elif type(source) == TDBVehicleClockCorrelationMsg:
            return (TDBVehicleClockCorrelationMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (TDBVehicleClockCorrelationMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        TDBVehicleClockCorrelationMsg_C_addAuthor(self, self)
        if data:
            TDBVehicleClockCorrelationMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        TDBVehicleClockCorrelationMsg_C_addAuthor(self, self)
        TDBVehicleClockCorrelationMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return TDBVehicleClockCorrelationMsg_C_read(self)


    def __init__(self):
        _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_C_swiginit(self, _TDBVehicleClockCorrelationMsgPayload.new_TDBVehicleClockCorrelationMsg_C())
    __swig_destroy__ = _TDBVehicleClockCorrelationMsgPayload.delete_TDBVehicleClockCorrelationMsg_C

# Register TDBVehicleClockCorrelationMsg_C in _TDBVehicleClockCorrelationMsgPayload:
_TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_C_swigregister(TDBVehicleClockCorrelationMsg_C)

def TDBVehicleClockCorrelationMsg_cpp_subscribe(subscriber, source):
    return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_cpp_subscribe(subscriber, source)

def TDBVehicleClockCorrelationMsg_C_subscribe(subscriber, source):
    return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_C_subscribe(subscriber, source)

def TDBVehicleClockCorrelationMsg_addr_subscribe(subscriber, sourceAddr):
    return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_addr_subscribe(subscriber, sourceAddr)

def TDBVehicleClockCorrelationMsg_unsubscribe(subscriber):
    return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_unsubscribe(subscriber)

def TDBVehicleClockCorrelationMsg_C_isSubscribedTo(subscriber, source):
    return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_C_isSubscribedTo(subscriber, source)

def TDBVehicleClockCorrelationMsg_cpp_isSubscribedTo(subscriber, source):
    return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_cpp_isSubscribedTo(subscriber, source)

def TDBVehicleClockCorrelationMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def TDBVehicleClockCorrelationMsg_C_addAuthor(coowner, data):
    return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_C_addAuthor(coowner, data)

def TDBVehicleClockCorrelationMsg_C_init(owner):
    return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_C_init(owner)

def TDBVehicleClockCorrelationMsg_C_isLinked(data):
    return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_C_isLinked(data)

def TDBVehicleClockCorrelationMsg_C_isWritten(data):
    return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_C_isWritten(data)

def TDBVehicleClockCorrelationMsg_C_timeWritten(data):
    return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_C_timeWritten(data)

def TDBVehicleClockCorrelationMsg_C_moduleID(data):
    return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_C_moduleID(data)

def TDBVehicleClockCorrelationMsg_C_write(data, destination, moduleID, callTime):
    return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_C_write(data, destination, moduleID, callTime)

def TDBVehicleClockCorrelationMsg_C_read(source):
    return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_C_read(source)

def TDBVehicleClockCorrelationMsg_C_zeroMsgPayload():
    return _TDBVehicleClockCorrelationMsgPayload.TDBVehicleClockCorrelationMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_TDBVehicleClockCorrelationMsgPayload.MsgHeader_isLinked_get, _TDBVehicleClockCorrelationMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_TDBVehicleClockCorrelationMsgPayload.MsgHeader_isWritten_get, _TDBVehicleClockCorrelationMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_TDBVehicleClockCorrelationMsgPayload.MsgHeader_timeWritten_get, _TDBVehicleClockCorrelationMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_TDBVehicleClockCorrelationMsgPayload.MsgHeader_moduleID_get, _TDBVehicleClockCorrelationMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _TDBVehicleClockCorrelationMsgPayload.MsgHeader_swiginit(self, _TDBVehicleClockCorrelationMsgPayload.new_MsgHeader())
    __swig_destroy__ = _TDBVehicleClockCorrelationMsgPayload.delete_MsgHeader

# Register MsgHeader in _TDBVehicleClockCorrelationMsgPayload:
_TDBVehicleClockCorrelationMsgPayload.MsgHeader_swigregister(MsgHeader)

