# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CmdForceInertialMsgPayload
else:
    import _CmdForceInertialMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CmdForceInertialMsgPayload.delete_SwigPyIterator

    def value(self):
        return _CmdForceInertialMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _CmdForceInertialMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _CmdForceInertialMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _CmdForceInertialMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _CmdForceInertialMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _CmdForceInertialMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _CmdForceInertialMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _CmdForceInertialMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _CmdForceInertialMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _CmdForceInertialMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _CmdForceInertialMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _CmdForceInertialMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _CmdForceInertialMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _CmdForceInertialMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _CmdForceInertialMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _CmdForceInertialMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CmdForceInertialMsgPayload:
_CmdForceInertialMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _CmdForceInertialMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _CmdForceInertialMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _CmdForceInertialMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _CmdForceInertialMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _CmdForceInertialMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _CmdForceInertialMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _CmdForceInertialMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _CmdForceInertialMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _CmdForceInertialMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _CmdForceInertialMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _CmdForceInertialMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _CmdForceInertialMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _CmdForceInertialMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _CmdForceInertialMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _CmdForceInertialMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _CmdForceInertialMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CmdForceInertialMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CmdForceInertialMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _CmdForceInertialMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _CmdForceInertialMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _CmdForceInertialMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CmdForceInertialMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CmdForceInertialMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CmdForceInertialMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CmdForceInertialMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CmdForceInertialMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _CmdForceInertialMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _CmdForceInertialMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _CmdForceInertialMsgPayload.TimeVector_empty(self)

    def size(self):
        return _CmdForceInertialMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _CmdForceInertialMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _CmdForceInertialMsgPayload.TimeVector_begin(self)

    def end(self):
        return _CmdForceInertialMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _CmdForceInertialMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _CmdForceInertialMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _CmdForceInertialMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _CmdForceInertialMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _CmdForceInertialMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _CmdForceInertialMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _CmdForceInertialMsgPayload.TimeVector_swiginit(self, _CmdForceInertialMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _CmdForceInertialMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _CmdForceInertialMsgPayload.TimeVector_front(self)

    def back(self):
        return _CmdForceInertialMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _CmdForceInertialMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _CmdForceInertialMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _CmdForceInertialMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _CmdForceInertialMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _CmdForceInertialMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _CmdForceInertialMsgPayload.delete_TimeVector

# Register TimeVector in _CmdForceInertialMsgPayload:
_CmdForceInertialMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CmdForceInertialMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CmdForceInertialMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _CmdForceInertialMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _CmdForceInertialMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _CmdForceInertialMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CmdForceInertialMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CmdForceInertialMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CmdForceInertialMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CmdForceInertialMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CmdForceInertialMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _CmdForceInertialMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _CmdForceInertialMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _CmdForceInertialMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _CmdForceInertialMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _CmdForceInertialMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _CmdForceInertialMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _CmdForceInertialMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _CmdForceInertialMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _CmdForceInertialMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _CmdForceInertialMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _CmdForceInertialMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _CmdForceInertialMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _CmdForceInertialMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _CmdForceInertialMsgPayload.DoubleVector_swiginit(self, _CmdForceInertialMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _CmdForceInertialMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _CmdForceInertialMsgPayload.DoubleVector_front(self)

    def back(self):
        return _CmdForceInertialMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _CmdForceInertialMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _CmdForceInertialMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _CmdForceInertialMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _CmdForceInertialMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _CmdForceInertialMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _CmdForceInertialMsgPayload.delete_DoubleVector

# Register DoubleVector in _CmdForceInertialMsgPayload:
_CmdForceInertialMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CmdForceInertialMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CmdForceInertialMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _CmdForceInertialMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _CmdForceInertialMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _CmdForceInertialMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CmdForceInertialMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CmdForceInertialMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CmdForceInertialMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CmdForceInertialMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CmdForceInertialMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _CmdForceInertialMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _CmdForceInertialMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _CmdForceInertialMsgPayload.StringVector_empty(self)

    def size(self):
        return _CmdForceInertialMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _CmdForceInertialMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _CmdForceInertialMsgPayload.StringVector_begin(self)

    def end(self):
        return _CmdForceInertialMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _CmdForceInertialMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _CmdForceInertialMsgPayload.StringVector_rend(self)

    def clear(self):
        return _CmdForceInertialMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _CmdForceInertialMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _CmdForceInertialMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _CmdForceInertialMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _CmdForceInertialMsgPayload.StringVector_swiginit(self, _CmdForceInertialMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _CmdForceInertialMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _CmdForceInertialMsgPayload.StringVector_front(self)

    def back(self):
        return _CmdForceInertialMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _CmdForceInertialMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _CmdForceInertialMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _CmdForceInertialMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _CmdForceInertialMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _CmdForceInertialMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _CmdForceInertialMsgPayload.delete_StringVector

# Register StringVector in _CmdForceInertialMsgPayload:
_CmdForceInertialMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _CmdForceInertialMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _CmdForceInertialMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _CmdForceInertialMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _CmdForceInertialMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _CmdForceInertialMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _CmdForceInertialMsgPayload.NANO2SEC
SEC2NANO = _CmdForceInertialMsgPayload.SEC2NANO
SEC2HOUR = _CmdForceInertialMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _CmdForceInertialMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _CmdForceInertialMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _CmdForceInertialMsgPayload.secToNano(seconds)
BOOL_FALSE = _CmdForceInertialMsgPayload.BOOL_FALSE
BOOL_TRUE = _CmdForceInertialMsgPayload.BOOL_TRUE
AVAILABLE = _CmdForceInertialMsgPayload.AVAILABLE
UNAVAILABLE = _CmdForceInertialMsgPayload.UNAVAILABLE
BalancedWheels = _CmdForceInertialMsgPayload.BalancedWheels
JitterSimple = _CmdForceInertialMsgPayload.JitterSimple
JitterFullyCoupled = _CmdForceInertialMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CmdForceInertialMsgPayload.SysModel_swiginit(self, _CmdForceInertialMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _CmdForceInertialMsgPayload.delete_SysModel

    def SelfInit(self):
        return _CmdForceInertialMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _CmdForceInertialMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _CmdForceInertialMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _CmdForceInertialMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_CmdForceInertialMsgPayload.SysModel_ModelTag_get, _CmdForceInertialMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_CmdForceInertialMsgPayload.SysModel_CallCounts_get, _CmdForceInertialMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_CmdForceInertialMsgPayload.SysModel_RNGSeed_get, _CmdForceInertialMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_CmdForceInertialMsgPayload.SysModel_moduleID_get, _CmdForceInertialMsgPayload.SysModel_moduleID_set)

# Register SysModel in _CmdForceInertialMsgPayload:
_CmdForceInertialMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _CmdForceInertialMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _CmdForceInertialMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _CmdForceInertialMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _CmdForceInertialMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _CmdForceInertialMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _CmdForceInertialMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _CmdForceInertialMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _CmdForceInertialMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _CmdForceInertialMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _CmdForceInertialMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _CmdForceInertialMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _CmdForceInertialMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class CmdForceInertialMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    forceRequestInertial = property(_CmdForceInertialMsgPayload.CmdForceInertialMsgPayload_forceRequestInertial_get, _CmdForceInertialMsgPayload.CmdForceInertialMsgPayload_forceRequestInertial_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _CmdForceInertialMsgPayload.CmdForceInertialMsgPayload_swiginit(self, _CmdForceInertialMsgPayload.new_CmdForceInertialMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _CmdForceInertialMsgPayload.delete_CmdForceInertialMsgPayload

# Register CmdForceInertialMsgPayload in _CmdForceInertialMsgPayload:
_CmdForceInertialMsgPayload.CmdForceInertialMsgPayload_swigregister(CmdForceInertialMsgPayload)

def _pprint_CmdForceInertialMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[CmdForceInertialMsgPayload.__repr__] = _pprint_CmdForceInertialMsgPayload

class CmdForceInertialMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_CmdForceInertialMsgPayload.CmdForceInertialMsgReader_bskLogger_get, _CmdForceInertialMsgPayload.CmdForceInertialMsgReader_bskLogger_set)
    zeroMsgPayload = property(_CmdForceInertialMsgPayload.CmdForceInertialMsgReader_zeroMsgPayload_get, _CmdForceInertialMsgPayload.CmdForceInertialMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _CmdForceInertialMsgPayload.CmdForceInertialMsgReader_swiginit(self, _CmdForceInertialMsgPayload.new_CmdForceInertialMsgReader(*args))

    def __call__(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgReader___call__(self)

    def isLinked(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgReader_isLinked(self)

    def isWritten(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgReader_isWritten(self)

    def timeWritten(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgReader_timeWritten(self)

    def moduleID(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == CmdForceInertialMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.CmdForceInertialMsgPayload import CmdForceInertialMsg_C
            if type(source) == CmdForceInertialMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<CmdForceInertialMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == CmdForceInertialMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.CmdForceInertialMsgPayload import CmdForceInertialMsg_C
        except ImportError:
            return 0

        if type(source) == CmdForceInertialMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _CmdForceInertialMsgPayload.delete_CmdForceInertialMsgReader

# Register CmdForceInertialMsgReader in _CmdForceInertialMsgPayload:
_CmdForceInertialMsgPayload.CmdForceInertialMsgReader_swigregister(CmdForceInertialMsgReader)
class CmdForceInertialMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CmdForceInertialMsgPayload.CmdForceInertialMsgWriter_swiginit(self, _CmdForceInertialMsgPayload.new_CmdForceInertialMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _CmdForceInertialMsgPayload.delete_CmdForceInertialMsgWriter

# Register CmdForceInertialMsgWriter in _CmdForceInertialMsgPayload:
_CmdForceInertialMsgPayload.CmdForceInertialMsgWriter_swigregister(CmdForceInertialMsgWriter)
class CmdForceInertialMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_CmdForceInertialMsgPayload.CmdForceInertialMsg_write_get, _CmdForceInertialMsgPayload.CmdForceInertialMsg_write_set)

    def addSubscriber(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsg_addSubscriber(self)

    def addAuthor(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_CmdForceInertialMsgPayload.CmdForceInertialMsg_zeroMsgPayload_get, _CmdForceInertialMsgPayload.CmdForceInertialMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsg_isLinked(self)

    def getPayloadSize(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _CmdForceInertialMsgPayload.CmdForceInertialMsg_swiginit(self, _CmdForceInertialMsgPayload.new_CmdForceInertialMsg())
    __swig_destroy__ = _CmdForceInertialMsgPayload.delete_CmdForceInertialMsg

# Register CmdForceInertialMsg in _CmdForceInertialMsgPayload:
_CmdForceInertialMsgPayload.CmdForceInertialMsg_swigregister(CmdForceInertialMsg)
class CmdForceInertialMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CmdForceInertialMsgPayload.CmdForceInertialMsgRecorder_swiginit(self, _CmdForceInertialMsgPayload.new_CmdForceInertialMsgRecorder(*args))
    __swig_destroy__ = _CmdForceInertialMsgPayload.delete_CmdForceInertialMsgRecorder

    def SelfInit(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgRecorder___record_vector(self)

    def size(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgRecorder_clear(self)
    bskLogger = property(_CmdForceInertialMsgPayload.CmdForceInertialMsgRecorder_bskLogger_get, _CmdForceInertialMsgPayload.CmdForceInertialMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgRecorder_updateTimeInterval(self, timeDiff)

    def _forceRequestInertial_array(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgRecorder__forceRequestInertial_array(self)

    @property
    def forceRequestInertial(self):
        return self._forceRequestInertial_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register CmdForceInertialMsgRecorder in _CmdForceInertialMsgPayload:
_CmdForceInertialMsgPayload.CmdForceInertialMsgRecorder_swigregister(CmdForceInertialMsgRecorder)
class CmdForceInertialMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgPayloadVector___bool__(self)

    def __len__(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgPayloadVector_pop(self)

    def append(self, x):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgPayloadVector_append(self, x)

    def empty(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgPayloadVector_empty(self)

    def size(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgPayloadVector_size(self)

    def swap(self, v):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgPayloadVector_swap(self, v)

    def begin(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgPayloadVector_begin(self)

    def end(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgPayloadVector_end(self)

    def rbegin(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgPayloadVector_rbegin(self)

    def rend(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgPayloadVector_rend(self)

    def clear(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _CmdForceInertialMsgPayload.CmdForceInertialMsgPayloadVector_swiginit(self, _CmdForceInertialMsgPayload.new_CmdForceInertialMsgPayloadVector(*args))

    def push_back(self, x):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgPayloadVector_push_back(self, x)

    def front(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgPayloadVector_front(self)

    def back(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgPayloadVector_capacity(self)

    def get_all(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _CmdForceInertialMsgPayload.delete_CmdForceInertialMsgPayloadVector

# Register CmdForceInertialMsgPayloadVector in _CmdForceInertialMsgPayload:
_CmdForceInertialMsgPayload.CmdForceInertialMsgPayloadVector_swigregister(CmdForceInertialMsgPayloadVector)
class CmdForceInertialMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsVector_empty(self)

    def size(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsVector_begin(self)

    def end(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsVector_rend(self)

    def clear(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsVector_swiginit(self, _CmdForceInertialMsgPayload.new_CmdForceInertialMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsVector_front(self)

    def back(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _CmdForceInertialMsgPayload.delete_CmdForceInertialMsgOutMsgsVector

# Register CmdForceInertialMsgOutMsgsVector in _CmdForceInertialMsgPayload:
_CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsVector_swigregister(CmdForceInertialMsgOutMsgsVector)
class CmdForceInertialMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsPtrVector_swiginit(self, _CmdForceInertialMsgPayload.new_CmdForceInertialMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _CmdForceInertialMsgPayload.delete_CmdForceInertialMsgOutMsgsPtrVector

# Register CmdForceInertialMsgOutMsgsPtrVector in _CmdForceInertialMsgPayload:
_CmdForceInertialMsgPayload.CmdForceInertialMsgOutMsgsPtrVector_swigregister(CmdForceInertialMsgOutMsgsPtrVector)
class CmdForceInertialMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgInMsgsVector_pop(self)

    def append(self, x):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgInMsgsVector_append(self, x)

    def empty(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgInMsgsVector_empty(self)

    def size(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgInMsgsVector_size(self)

    def swap(self, v):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgInMsgsVector_begin(self)

    def end(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgInMsgsVector_end(self)

    def rbegin(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgInMsgsVector_rend(self)

    def clear(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _CmdForceInertialMsgPayload.CmdForceInertialMsgInMsgsVector_swiginit(self, _CmdForceInertialMsgPayload.new_CmdForceInertialMsgInMsgsVector(*args))

    def push_back(self, x):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgInMsgsVector_front(self)

    def back(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _CmdForceInertialMsgPayload.delete_CmdForceInertialMsgInMsgsVector

# Register CmdForceInertialMsgInMsgsVector in _CmdForceInertialMsgPayload:
_CmdForceInertialMsgPayload.CmdForceInertialMsgInMsgsVector_swigregister(CmdForceInertialMsgInMsgsVector)
class CmdForceInertialMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_CmdForceInertialMsgPayload.CmdForceInertialMsg_C_header_get, _CmdForceInertialMsgPayload.CmdForceInertialMsg_C_header_set)
    payload = property(_CmdForceInertialMsgPayload.CmdForceInertialMsg_C_payload_get, _CmdForceInertialMsgPayload.CmdForceInertialMsg_C_payload_set)
    payloadPointer = property(_CmdForceInertialMsgPayload.CmdForceInertialMsg_C_payloadPointer_get, _CmdForceInertialMsgPayload.CmdForceInertialMsg_C_payloadPointer_set)
    headerPointer = property(_CmdForceInertialMsgPayload.CmdForceInertialMsg_C_headerPointer_get, _CmdForceInertialMsgPayload.CmdForceInertialMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _CmdForceInertialMsgPayload.CmdForceInertialMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import CmdForceInertialMsg
        if type(source) == type(self):
            CmdForceInertialMsg_C_subscribe(self, source)
        elif type(source) == CmdForceInertialMsg:
            CmdForceInertialMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            CmdForceInertialMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe CmdForceInertialMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        CmdForceInertialMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import CmdForceInertialMsg
        if type(source) == type(self):
            return (CmdForceInertialMsg_C_isSubscribedTo(self, source))
        elif type(source) == CmdForceInertialMsg:
            return (CmdForceInertialMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (CmdForceInertialMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        CmdForceInertialMsg_C_addAuthor(self, self)
        if data:
            CmdForceInertialMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        CmdForceInertialMsg_C_addAuthor(self, self)
        CmdForceInertialMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return CmdForceInertialMsg_C_read(self)


    def __init__(self):
        _CmdForceInertialMsgPayload.CmdForceInertialMsg_C_swiginit(self, _CmdForceInertialMsgPayload.new_CmdForceInertialMsg_C())
    __swig_destroy__ = _CmdForceInertialMsgPayload.delete_CmdForceInertialMsg_C

# Register CmdForceInertialMsg_C in _CmdForceInertialMsgPayload:
_CmdForceInertialMsgPayload.CmdForceInertialMsg_C_swigregister(CmdForceInertialMsg_C)

def CmdForceInertialMsg_cpp_subscribe(subscriber, source):
    return _CmdForceInertialMsgPayload.CmdForceInertialMsg_cpp_subscribe(subscriber, source)

def CmdForceInertialMsg_C_subscribe(subscriber, source):
    return _CmdForceInertialMsgPayload.CmdForceInertialMsg_C_subscribe(subscriber, source)

def CmdForceInertialMsg_addr_subscribe(subscriber, sourceAddr):
    return _CmdForceInertialMsgPayload.CmdForceInertialMsg_addr_subscribe(subscriber, sourceAddr)

def CmdForceInertialMsg_unsubscribe(subscriber):
    return _CmdForceInertialMsgPayload.CmdForceInertialMsg_unsubscribe(subscriber)

def CmdForceInertialMsg_C_isSubscribedTo(subscriber, source):
    return _CmdForceInertialMsgPayload.CmdForceInertialMsg_C_isSubscribedTo(subscriber, source)

def CmdForceInertialMsg_cpp_isSubscribedTo(subscriber, source):
    return _CmdForceInertialMsgPayload.CmdForceInertialMsg_cpp_isSubscribedTo(subscriber, source)

def CmdForceInertialMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _CmdForceInertialMsgPayload.CmdForceInertialMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def CmdForceInertialMsg_C_addAuthor(coowner, data):
    return _CmdForceInertialMsgPayload.CmdForceInertialMsg_C_addAuthor(coowner, data)

def CmdForceInertialMsg_C_init(owner):
    return _CmdForceInertialMsgPayload.CmdForceInertialMsg_C_init(owner)

def CmdForceInertialMsg_C_isLinked(data):
    return _CmdForceInertialMsgPayload.CmdForceInertialMsg_C_isLinked(data)

def CmdForceInertialMsg_C_isWritten(data):
    return _CmdForceInertialMsgPayload.CmdForceInertialMsg_C_isWritten(data)

def CmdForceInertialMsg_C_timeWritten(data):
    return _CmdForceInertialMsgPayload.CmdForceInertialMsg_C_timeWritten(data)

def CmdForceInertialMsg_C_moduleID(data):
    return _CmdForceInertialMsgPayload.CmdForceInertialMsg_C_moduleID(data)

def CmdForceInertialMsg_C_write(data, destination, moduleID, callTime):
    return _CmdForceInertialMsgPayload.CmdForceInertialMsg_C_write(data, destination, moduleID, callTime)

def CmdForceInertialMsg_C_read(source):
    return _CmdForceInertialMsgPayload.CmdForceInertialMsg_C_read(source)

def CmdForceInertialMsg_C_zeroMsgPayload():
    return _CmdForceInertialMsgPayload.CmdForceInertialMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_CmdForceInertialMsgPayload.MsgHeader_isLinked_get, _CmdForceInertialMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_CmdForceInertialMsgPayload.MsgHeader_isWritten_get, _CmdForceInertialMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_CmdForceInertialMsgPayload.MsgHeader_timeWritten_get, _CmdForceInertialMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_CmdForceInertialMsgPayload.MsgHeader_moduleID_get, _CmdForceInertialMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _CmdForceInertialMsgPayload.MsgHeader_swiginit(self, _CmdForceInertialMsgPayload.new_MsgHeader())
    __swig_destroy__ = _CmdForceInertialMsgPayload.delete_MsgHeader

# Register MsgHeader in _CmdForceInertialMsgPayload:
_CmdForceInertialMsgPayload.MsgHeader_swigregister(MsgHeader)

