# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _SingleActuatorMsgPayload
else:
    import _SingleActuatorMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SingleActuatorMsgPayload.delete_SwigPyIterator

    def value(self):
        return _SingleActuatorMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _SingleActuatorMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _SingleActuatorMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _SingleActuatorMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _SingleActuatorMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _SingleActuatorMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _SingleActuatorMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _SingleActuatorMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _SingleActuatorMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _SingleActuatorMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _SingleActuatorMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _SingleActuatorMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _SingleActuatorMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _SingleActuatorMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _SingleActuatorMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _SingleActuatorMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _SingleActuatorMsgPayload:
_SingleActuatorMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _SingleActuatorMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _SingleActuatorMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _SingleActuatorMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _SingleActuatorMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _SingleActuatorMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _SingleActuatorMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _SingleActuatorMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _SingleActuatorMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _SingleActuatorMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _SingleActuatorMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _SingleActuatorMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _SingleActuatorMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _SingleActuatorMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _SingleActuatorMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _SingleActuatorMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _SingleActuatorMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SingleActuatorMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SingleActuatorMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _SingleActuatorMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _SingleActuatorMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _SingleActuatorMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SingleActuatorMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SingleActuatorMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SingleActuatorMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SingleActuatorMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SingleActuatorMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _SingleActuatorMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _SingleActuatorMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _SingleActuatorMsgPayload.TimeVector_empty(self)

    def size(self):
        return _SingleActuatorMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _SingleActuatorMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _SingleActuatorMsgPayload.TimeVector_begin(self)

    def end(self):
        return _SingleActuatorMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _SingleActuatorMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _SingleActuatorMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _SingleActuatorMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _SingleActuatorMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _SingleActuatorMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _SingleActuatorMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _SingleActuatorMsgPayload.TimeVector_swiginit(self, _SingleActuatorMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _SingleActuatorMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _SingleActuatorMsgPayload.TimeVector_front(self)

    def back(self):
        return _SingleActuatorMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _SingleActuatorMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _SingleActuatorMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _SingleActuatorMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _SingleActuatorMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _SingleActuatorMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _SingleActuatorMsgPayload.delete_TimeVector

# Register TimeVector in _SingleActuatorMsgPayload:
_SingleActuatorMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SingleActuatorMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SingleActuatorMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _SingleActuatorMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _SingleActuatorMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _SingleActuatorMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SingleActuatorMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SingleActuatorMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SingleActuatorMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SingleActuatorMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SingleActuatorMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _SingleActuatorMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _SingleActuatorMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _SingleActuatorMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _SingleActuatorMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _SingleActuatorMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _SingleActuatorMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _SingleActuatorMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _SingleActuatorMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _SingleActuatorMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _SingleActuatorMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _SingleActuatorMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _SingleActuatorMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _SingleActuatorMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _SingleActuatorMsgPayload.DoubleVector_swiginit(self, _SingleActuatorMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _SingleActuatorMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _SingleActuatorMsgPayload.DoubleVector_front(self)

    def back(self):
        return _SingleActuatorMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _SingleActuatorMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _SingleActuatorMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _SingleActuatorMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _SingleActuatorMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _SingleActuatorMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _SingleActuatorMsgPayload.delete_DoubleVector

# Register DoubleVector in _SingleActuatorMsgPayload:
_SingleActuatorMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SingleActuatorMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SingleActuatorMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _SingleActuatorMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _SingleActuatorMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _SingleActuatorMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SingleActuatorMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SingleActuatorMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SingleActuatorMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SingleActuatorMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SingleActuatorMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _SingleActuatorMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _SingleActuatorMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _SingleActuatorMsgPayload.StringVector_empty(self)

    def size(self):
        return _SingleActuatorMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _SingleActuatorMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _SingleActuatorMsgPayload.StringVector_begin(self)

    def end(self):
        return _SingleActuatorMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _SingleActuatorMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _SingleActuatorMsgPayload.StringVector_rend(self)

    def clear(self):
        return _SingleActuatorMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _SingleActuatorMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _SingleActuatorMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _SingleActuatorMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _SingleActuatorMsgPayload.StringVector_swiginit(self, _SingleActuatorMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _SingleActuatorMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _SingleActuatorMsgPayload.StringVector_front(self)

    def back(self):
        return _SingleActuatorMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _SingleActuatorMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _SingleActuatorMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _SingleActuatorMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _SingleActuatorMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _SingleActuatorMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _SingleActuatorMsgPayload.delete_StringVector

# Register StringVector in _SingleActuatorMsgPayload:
_SingleActuatorMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _SingleActuatorMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _SingleActuatorMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _SingleActuatorMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _SingleActuatorMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _SingleActuatorMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _SingleActuatorMsgPayload.NANO2SEC
SEC2NANO = _SingleActuatorMsgPayload.SEC2NANO
SEC2HOUR = _SingleActuatorMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _SingleActuatorMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _SingleActuatorMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _SingleActuatorMsgPayload.secToNano(seconds)
BOOL_FALSE = _SingleActuatorMsgPayload.BOOL_FALSE
BOOL_TRUE = _SingleActuatorMsgPayload.BOOL_TRUE
AVAILABLE = _SingleActuatorMsgPayload.AVAILABLE
UNAVAILABLE = _SingleActuatorMsgPayload.UNAVAILABLE
BalancedWheels = _SingleActuatorMsgPayload.BalancedWheels
JitterSimple = _SingleActuatorMsgPayload.JitterSimple
JitterFullyCoupled = _SingleActuatorMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SingleActuatorMsgPayload.SysModel_swiginit(self, _SingleActuatorMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _SingleActuatorMsgPayload.delete_SysModel

    def SelfInit(self):
        return _SingleActuatorMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _SingleActuatorMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _SingleActuatorMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _SingleActuatorMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_SingleActuatorMsgPayload.SysModel_ModelTag_get, _SingleActuatorMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_SingleActuatorMsgPayload.SysModel_CallCounts_get, _SingleActuatorMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_SingleActuatorMsgPayload.SysModel_RNGSeed_get, _SingleActuatorMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_SingleActuatorMsgPayload.SysModel_moduleID_get, _SingleActuatorMsgPayload.SysModel_moduleID_set)

# Register SysModel in _SingleActuatorMsgPayload:
_SingleActuatorMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _SingleActuatorMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _SingleActuatorMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _SingleActuatorMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _SingleActuatorMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _SingleActuatorMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _SingleActuatorMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _SingleActuatorMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _SingleActuatorMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _SingleActuatorMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _SingleActuatorMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _SingleActuatorMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _SingleActuatorMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class SingleActuatorMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    input = property(_SingleActuatorMsgPayload.SingleActuatorMsgPayload_input_get, _SingleActuatorMsgPayload.SingleActuatorMsgPayload_input_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _SingleActuatorMsgPayload.SingleActuatorMsgPayload_swiginit(self, _SingleActuatorMsgPayload.new_SingleActuatorMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _SingleActuatorMsgPayload.delete_SingleActuatorMsgPayload

# Register SingleActuatorMsgPayload in _SingleActuatorMsgPayload:
_SingleActuatorMsgPayload.SingleActuatorMsgPayload_swigregister(SingleActuatorMsgPayload)

def _pprint_SingleActuatorMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[SingleActuatorMsgPayload.__repr__] = _pprint_SingleActuatorMsgPayload

class SingleActuatorMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_SingleActuatorMsgPayload.SingleActuatorMsgReader_bskLogger_get, _SingleActuatorMsgPayload.SingleActuatorMsgReader_bskLogger_set)
    zeroMsgPayload = property(_SingleActuatorMsgPayload.SingleActuatorMsgReader_zeroMsgPayload_get, _SingleActuatorMsgPayload.SingleActuatorMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _SingleActuatorMsgPayload.SingleActuatorMsgReader_swiginit(self, _SingleActuatorMsgPayload.new_SingleActuatorMsgReader(*args))

    def __call__(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgReader___call__(self)

    def isLinked(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgReader_isLinked(self)

    def isWritten(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgReader_isWritten(self)

    def timeWritten(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgReader_timeWritten(self)

    def moduleID(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _SingleActuatorMsgPayload.SingleActuatorMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _SingleActuatorMsgPayload.SingleActuatorMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _SingleActuatorMsgPayload.SingleActuatorMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _SingleActuatorMsgPayload.SingleActuatorMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _SingleActuatorMsgPayload.SingleActuatorMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _SingleActuatorMsgPayload.SingleActuatorMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _SingleActuatorMsgPayload.SingleActuatorMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _SingleActuatorMsgPayload.SingleActuatorMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _SingleActuatorMsgPayload.SingleActuatorMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == SingleActuatorMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.SingleActuatorMsgPayload import SingleActuatorMsg_C
            if type(source) == SingleActuatorMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<SingleActuatorMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == SingleActuatorMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.SingleActuatorMsgPayload import SingleActuatorMsg_C
        except ImportError:
            return 0

        if type(source) == SingleActuatorMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _SingleActuatorMsgPayload.delete_SingleActuatorMsgReader

# Register SingleActuatorMsgReader in _SingleActuatorMsgPayload:
_SingleActuatorMsgPayload.SingleActuatorMsgReader_swigregister(SingleActuatorMsgReader)
class SingleActuatorMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SingleActuatorMsgPayload.SingleActuatorMsgWriter_swiginit(self, _SingleActuatorMsgPayload.new_SingleActuatorMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _SingleActuatorMsgPayload.SingleActuatorMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _SingleActuatorMsgPayload.delete_SingleActuatorMsgWriter

# Register SingleActuatorMsgWriter in _SingleActuatorMsgPayload:
_SingleActuatorMsgPayload.SingleActuatorMsgWriter_swigregister(SingleActuatorMsgWriter)
class SingleActuatorMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_SingleActuatorMsgPayload.SingleActuatorMsg_write_get, _SingleActuatorMsgPayload.SingleActuatorMsg_write_set)

    def addSubscriber(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsg_addSubscriber(self)

    def addAuthor(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _SingleActuatorMsgPayload.SingleActuatorMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _SingleActuatorMsgPayload.SingleActuatorMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _SingleActuatorMsgPayload.SingleActuatorMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_SingleActuatorMsgPayload.SingleActuatorMsg_zeroMsgPayload_get, _SingleActuatorMsgPayload.SingleActuatorMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsg_isLinked(self)

    def getPayloadSize(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _SingleActuatorMsgPayload.SingleActuatorMsg_swiginit(self, _SingleActuatorMsgPayload.new_SingleActuatorMsg())
    __swig_destroy__ = _SingleActuatorMsgPayload.delete_SingleActuatorMsg

# Register SingleActuatorMsg in _SingleActuatorMsgPayload:
_SingleActuatorMsgPayload.SingleActuatorMsg_swigregister(SingleActuatorMsg)
class SingleActuatorMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SingleActuatorMsgPayload.SingleActuatorMsgRecorder_swiginit(self, _SingleActuatorMsgPayload.new_SingleActuatorMsgRecorder(*args))
    __swig_destroy__ = _SingleActuatorMsgPayload.delete_SingleActuatorMsgRecorder

    def SelfInit(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _SingleActuatorMsgPayload.SingleActuatorMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _SingleActuatorMsgPayload.SingleActuatorMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgRecorder___record_vector(self)

    def size(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _SingleActuatorMsgPayload.SingleActuatorMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgRecorder_clear(self)
    bskLogger = property(_SingleActuatorMsgPayload.SingleActuatorMsgRecorder_bskLogger_get, _SingleActuatorMsgPayload.SingleActuatorMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _SingleActuatorMsgPayload.SingleActuatorMsgRecorder_updateTimeInterval(self, timeDiff)

    def _input_array(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgRecorder__input_array(self)

    @property
    def input(self):
        return self._input_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register SingleActuatorMsgRecorder in _SingleActuatorMsgPayload:
_SingleActuatorMsgPayload.SingleActuatorMsgRecorder_swigregister(SingleActuatorMsgRecorder)
class SingleActuatorMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgPayloadVector___bool__(self)

    def __len__(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _SingleActuatorMsgPayload.SingleActuatorMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SingleActuatorMsgPayload.SingleActuatorMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SingleActuatorMsgPayload.SingleActuatorMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SingleActuatorMsgPayload.SingleActuatorMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SingleActuatorMsgPayload.SingleActuatorMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SingleActuatorMsgPayload.SingleActuatorMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgPayloadVector_pop(self)

    def append(self, x):
        return _SingleActuatorMsgPayload.SingleActuatorMsgPayloadVector_append(self, x)

    def empty(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgPayloadVector_empty(self)

    def size(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgPayloadVector_size(self)

    def swap(self, v):
        return _SingleActuatorMsgPayload.SingleActuatorMsgPayloadVector_swap(self, v)

    def begin(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgPayloadVector_begin(self)

    def end(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgPayloadVector_end(self)

    def rbegin(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgPayloadVector_rbegin(self)

    def rend(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgPayloadVector_rend(self)

    def clear(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _SingleActuatorMsgPayload.SingleActuatorMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _SingleActuatorMsgPayload.SingleActuatorMsgPayloadVector_swiginit(self, _SingleActuatorMsgPayload.new_SingleActuatorMsgPayloadVector(*args))

    def push_back(self, x):
        return _SingleActuatorMsgPayload.SingleActuatorMsgPayloadVector_push_back(self, x)

    def front(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgPayloadVector_front(self)

    def back(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _SingleActuatorMsgPayload.SingleActuatorMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _SingleActuatorMsgPayload.SingleActuatorMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _SingleActuatorMsgPayload.SingleActuatorMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _SingleActuatorMsgPayload.SingleActuatorMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgPayloadVector_capacity(self)

    def get_all(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _SingleActuatorMsgPayload.delete_SingleActuatorMsgPayloadVector

# Register SingleActuatorMsgPayloadVector in _SingleActuatorMsgPayload:
_SingleActuatorMsgPayload.SingleActuatorMsgPayloadVector_swigregister(SingleActuatorMsgPayloadVector)
class SingleActuatorMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsVector_empty(self)

    def size(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsVector_begin(self)

    def end(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsVector_rend(self)

    def clear(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsVector_swiginit(self, _SingleActuatorMsgPayload.new_SingleActuatorMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsVector_front(self)

    def back(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _SingleActuatorMsgPayload.delete_SingleActuatorMsgOutMsgsVector

# Register SingleActuatorMsgOutMsgsVector in _SingleActuatorMsgPayload:
_SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsVector_swigregister(SingleActuatorMsgOutMsgsVector)
class SingleActuatorMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsPtrVector_swiginit(self, _SingleActuatorMsgPayload.new_SingleActuatorMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _SingleActuatorMsgPayload.delete_SingleActuatorMsgOutMsgsPtrVector

# Register SingleActuatorMsgOutMsgsPtrVector in _SingleActuatorMsgPayload:
_SingleActuatorMsgPayload.SingleActuatorMsgOutMsgsPtrVector_swigregister(SingleActuatorMsgOutMsgsPtrVector)
class SingleActuatorMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _SingleActuatorMsgPayload.SingleActuatorMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SingleActuatorMsgPayload.SingleActuatorMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SingleActuatorMsgPayload.SingleActuatorMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SingleActuatorMsgPayload.SingleActuatorMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SingleActuatorMsgPayload.SingleActuatorMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SingleActuatorMsgPayload.SingleActuatorMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgInMsgsVector_pop(self)

    def append(self, x):
        return _SingleActuatorMsgPayload.SingleActuatorMsgInMsgsVector_append(self, x)

    def empty(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgInMsgsVector_empty(self)

    def size(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgInMsgsVector_size(self)

    def swap(self, v):
        return _SingleActuatorMsgPayload.SingleActuatorMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgInMsgsVector_begin(self)

    def end(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgInMsgsVector_end(self)

    def rbegin(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgInMsgsVector_rend(self)

    def clear(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _SingleActuatorMsgPayload.SingleActuatorMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _SingleActuatorMsgPayload.SingleActuatorMsgInMsgsVector_swiginit(self, _SingleActuatorMsgPayload.new_SingleActuatorMsgInMsgsVector(*args))

    def push_back(self, x):
        return _SingleActuatorMsgPayload.SingleActuatorMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgInMsgsVector_front(self)

    def back(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _SingleActuatorMsgPayload.SingleActuatorMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _SingleActuatorMsgPayload.SingleActuatorMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _SingleActuatorMsgPayload.SingleActuatorMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _SingleActuatorMsgPayload.SingleActuatorMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _SingleActuatorMsgPayload.SingleActuatorMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _SingleActuatorMsgPayload.delete_SingleActuatorMsgInMsgsVector

# Register SingleActuatorMsgInMsgsVector in _SingleActuatorMsgPayload:
_SingleActuatorMsgPayload.SingleActuatorMsgInMsgsVector_swigregister(SingleActuatorMsgInMsgsVector)
class SingleActuatorMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_SingleActuatorMsgPayload.SingleActuatorMsg_C_header_get, _SingleActuatorMsgPayload.SingleActuatorMsg_C_header_set)
    payload = property(_SingleActuatorMsgPayload.SingleActuatorMsg_C_payload_get, _SingleActuatorMsgPayload.SingleActuatorMsg_C_payload_set)
    payloadPointer = property(_SingleActuatorMsgPayload.SingleActuatorMsg_C_payloadPointer_get, _SingleActuatorMsgPayload.SingleActuatorMsg_C_payloadPointer_set)
    headerPointer = property(_SingleActuatorMsgPayload.SingleActuatorMsg_C_headerPointer_get, _SingleActuatorMsgPayload.SingleActuatorMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _SingleActuatorMsgPayload.SingleActuatorMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import SingleActuatorMsg
        if type(source) == type(self):
            SingleActuatorMsg_C_subscribe(self, source)
        elif type(source) == SingleActuatorMsg:
            SingleActuatorMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            SingleActuatorMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe SingleActuatorMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        SingleActuatorMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import SingleActuatorMsg
        if type(source) == type(self):
            return (SingleActuatorMsg_C_isSubscribedTo(self, source))
        elif type(source) == SingleActuatorMsg:
            return (SingleActuatorMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (SingleActuatorMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        SingleActuatorMsg_C_addAuthor(self, self)
        if data:
            SingleActuatorMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        SingleActuatorMsg_C_addAuthor(self, self)
        SingleActuatorMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return SingleActuatorMsg_C_read(self)


    def __init__(self):
        _SingleActuatorMsgPayload.SingleActuatorMsg_C_swiginit(self, _SingleActuatorMsgPayload.new_SingleActuatorMsg_C())
    __swig_destroy__ = _SingleActuatorMsgPayload.delete_SingleActuatorMsg_C

# Register SingleActuatorMsg_C in _SingleActuatorMsgPayload:
_SingleActuatorMsgPayload.SingleActuatorMsg_C_swigregister(SingleActuatorMsg_C)

def SingleActuatorMsg_cpp_subscribe(subscriber, source):
    return _SingleActuatorMsgPayload.SingleActuatorMsg_cpp_subscribe(subscriber, source)

def SingleActuatorMsg_C_subscribe(subscriber, source):
    return _SingleActuatorMsgPayload.SingleActuatorMsg_C_subscribe(subscriber, source)

def SingleActuatorMsg_addr_subscribe(subscriber, sourceAddr):
    return _SingleActuatorMsgPayload.SingleActuatorMsg_addr_subscribe(subscriber, sourceAddr)

def SingleActuatorMsg_unsubscribe(subscriber):
    return _SingleActuatorMsgPayload.SingleActuatorMsg_unsubscribe(subscriber)

def SingleActuatorMsg_C_isSubscribedTo(subscriber, source):
    return _SingleActuatorMsgPayload.SingleActuatorMsg_C_isSubscribedTo(subscriber, source)

def SingleActuatorMsg_cpp_isSubscribedTo(subscriber, source):
    return _SingleActuatorMsgPayload.SingleActuatorMsg_cpp_isSubscribedTo(subscriber, source)

def SingleActuatorMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _SingleActuatorMsgPayload.SingleActuatorMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def SingleActuatorMsg_C_addAuthor(coowner, data):
    return _SingleActuatorMsgPayload.SingleActuatorMsg_C_addAuthor(coowner, data)

def SingleActuatorMsg_C_init(owner):
    return _SingleActuatorMsgPayload.SingleActuatorMsg_C_init(owner)

def SingleActuatorMsg_C_isLinked(data):
    return _SingleActuatorMsgPayload.SingleActuatorMsg_C_isLinked(data)

def SingleActuatorMsg_C_isWritten(data):
    return _SingleActuatorMsgPayload.SingleActuatorMsg_C_isWritten(data)

def SingleActuatorMsg_C_timeWritten(data):
    return _SingleActuatorMsgPayload.SingleActuatorMsg_C_timeWritten(data)

def SingleActuatorMsg_C_moduleID(data):
    return _SingleActuatorMsgPayload.SingleActuatorMsg_C_moduleID(data)

def SingleActuatorMsg_C_write(data, destination, moduleID, callTime):
    return _SingleActuatorMsgPayload.SingleActuatorMsg_C_write(data, destination, moduleID, callTime)

def SingleActuatorMsg_C_read(source):
    return _SingleActuatorMsgPayload.SingleActuatorMsg_C_read(source)

def SingleActuatorMsg_C_zeroMsgPayload():
    return _SingleActuatorMsgPayload.SingleActuatorMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_SingleActuatorMsgPayload.MsgHeader_isLinked_get, _SingleActuatorMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_SingleActuatorMsgPayload.MsgHeader_isWritten_get, _SingleActuatorMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_SingleActuatorMsgPayload.MsgHeader_timeWritten_get, _SingleActuatorMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_SingleActuatorMsgPayload.MsgHeader_moduleID_get, _SingleActuatorMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _SingleActuatorMsgPayload.MsgHeader_swiginit(self, _SingleActuatorMsgPayload.new_MsgHeader())
    __swig_destroy__ = _SingleActuatorMsgPayload.delete_MsgHeader

# Register MsgHeader in _SingleActuatorMsgPayload:
_SingleActuatorMsgPayload.MsgHeader_swigregister(MsgHeader)

