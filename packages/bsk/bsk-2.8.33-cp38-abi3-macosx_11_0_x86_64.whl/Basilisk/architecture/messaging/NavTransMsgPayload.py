# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _NavTransMsgPayload
else:
    import _NavTransMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _NavTransMsgPayload.delete_SwigPyIterator

    def value(self):
        return _NavTransMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _NavTransMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _NavTransMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _NavTransMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _NavTransMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _NavTransMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _NavTransMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _NavTransMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _NavTransMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _NavTransMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _NavTransMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _NavTransMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _NavTransMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _NavTransMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _NavTransMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _NavTransMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _NavTransMsgPayload:
_NavTransMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _NavTransMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _NavTransMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _NavTransMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _NavTransMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _NavTransMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _NavTransMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _NavTransMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _NavTransMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _NavTransMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _NavTransMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _NavTransMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _NavTransMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _NavTransMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _NavTransMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _NavTransMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _NavTransMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _NavTransMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _NavTransMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _NavTransMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _NavTransMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _NavTransMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _NavTransMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _NavTransMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _NavTransMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _NavTransMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _NavTransMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _NavTransMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _NavTransMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _NavTransMsgPayload.TimeVector_empty(self)

    def size(self):
        return _NavTransMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _NavTransMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _NavTransMsgPayload.TimeVector_begin(self)

    def end(self):
        return _NavTransMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _NavTransMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _NavTransMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _NavTransMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _NavTransMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _NavTransMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _NavTransMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _NavTransMsgPayload.TimeVector_swiginit(self, _NavTransMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _NavTransMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _NavTransMsgPayload.TimeVector_front(self)

    def back(self):
        return _NavTransMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _NavTransMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _NavTransMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _NavTransMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _NavTransMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _NavTransMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _NavTransMsgPayload.delete_TimeVector

# Register TimeVector in _NavTransMsgPayload:
_NavTransMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _NavTransMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _NavTransMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _NavTransMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _NavTransMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _NavTransMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _NavTransMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _NavTransMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _NavTransMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _NavTransMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _NavTransMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _NavTransMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _NavTransMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _NavTransMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _NavTransMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _NavTransMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _NavTransMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _NavTransMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _NavTransMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _NavTransMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _NavTransMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _NavTransMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _NavTransMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _NavTransMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _NavTransMsgPayload.DoubleVector_swiginit(self, _NavTransMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _NavTransMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _NavTransMsgPayload.DoubleVector_front(self)

    def back(self):
        return _NavTransMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _NavTransMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _NavTransMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _NavTransMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _NavTransMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _NavTransMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _NavTransMsgPayload.delete_DoubleVector

# Register DoubleVector in _NavTransMsgPayload:
_NavTransMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _NavTransMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _NavTransMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _NavTransMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _NavTransMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _NavTransMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _NavTransMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _NavTransMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _NavTransMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _NavTransMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _NavTransMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _NavTransMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _NavTransMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _NavTransMsgPayload.StringVector_empty(self)

    def size(self):
        return _NavTransMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _NavTransMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _NavTransMsgPayload.StringVector_begin(self)

    def end(self):
        return _NavTransMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _NavTransMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _NavTransMsgPayload.StringVector_rend(self)

    def clear(self):
        return _NavTransMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _NavTransMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _NavTransMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _NavTransMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _NavTransMsgPayload.StringVector_swiginit(self, _NavTransMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _NavTransMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _NavTransMsgPayload.StringVector_front(self)

    def back(self):
        return _NavTransMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _NavTransMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _NavTransMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _NavTransMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _NavTransMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _NavTransMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _NavTransMsgPayload.delete_StringVector

# Register StringVector in _NavTransMsgPayload:
_NavTransMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _NavTransMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _NavTransMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _NavTransMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _NavTransMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _NavTransMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _NavTransMsgPayload.NANO2SEC
SEC2NANO = _NavTransMsgPayload.SEC2NANO
SEC2HOUR = _NavTransMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _NavTransMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _NavTransMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _NavTransMsgPayload.secToNano(seconds)
BOOL_FALSE = _NavTransMsgPayload.BOOL_FALSE
BOOL_TRUE = _NavTransMsgPayload.BOOL_TRUE
AVAILABLE = _NavTransMsgPayload.AVAILABLE
UNAVAILABLE = _NavTransMsgPayload.UNAVAILABLE
BalancedWheels = _NavTransMsgPayload.BalancedWheels
JitterSimple = _NavTransMsgPayload.JitterSimple
JitterFullyCoupled = _NavTransMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _NavTransMsgPayload.SysModel_swiginit(self, _NavTransMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _NavTransMsgPayload.delete_SysModel

    def SelfInit(self):
        return _NavTransMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _NavTransMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _NavTransMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _NavTransMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_NavTransMsgPayload.SysModel_ModelTag_get, _NavTransMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_NavTransMsgPayload.SysModel_CallCounts_get, _NavTransMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_NavTransMsgPayload.SysModel_RNGSeed_get, _NavTransMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_NavTransMsgPayload.SysModel_moduleID_get, _NavTransMsgPayload.SysModel_moduleID_set)

# Register SysModel in _NavTransMsgPayload:
_NavTransMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _NavTransMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _NavTransMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _NavTransMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _NavTransMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _NavTransMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _NavTransMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _NavTransMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _NavTransMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _NavTransMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _NavTransMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _NavTransMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _NavTransMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class NavTransMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timeTag = property(_NavTransMsgPayload.NavTransMsgPayload_timeTag_get, _NavTransMsgPayload.NavTransMsgPayload_timeTag_set)
    r_BN_N = property(_NavTransMsgPayload.NavTransMsgPayload_r_BN_N_get, _NavTransMsgPayload.NavTransMsgPayload_r_BN_N_set)
    v_BN_N = property(_NavTransMsgPayload.NavTransMsgPayload_v_BN_N_get, _NavTransMsgPayload.NavTransMsgPayload_v_BN_N_set)
    vehAccumDV = property(_NavTransMsgPayload.NavTransMsgPayload_vehAccumDV_get, _NavTransMsgPayload.NavTransMsgPayload_vehAccumDV_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _NavTransMsgPayload.NavTransMsgPayload_swiginit(self, _NavTransMsgPayload.new_NavTransMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _NavTransMsgPayload.delete_NavTransMsgPayload

# Register NavTransMsgPayload in _NavTransMsgPayload:
_NavTransMsgPayload.NavTransMsgPayload_swigregister(NavTransMsgPayload)

def _pprint_NavTransMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[NavTransMsgPayload.__repr__] = _pprint_NavTransMsgPayload

class NavTransMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_NavTransMsgPayload.NavTransMsgReader_bskLogger_get, _NavTransMsgPayload.NavTransMsgReader_bskLogger_set)
    zeroMsgPayload = property(_NavTransMsgPayload.NavTransMsgReader_zeroMsgPayload_get, _NavTransMsgPayload.NavTransMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _NavTransMsgPayload.NavTransMsgReader_swiginit(self, _NavTransMsgPayload.new_NavTransMsgReader(*args))

    def __call__(self):
        return _NavTransMsgPayload.NavTransMsgReader___call__(self)

    def isLinked(self):
        return _NavTransMsgPayload.NavTransMsgReader_isLinked(self)

    def isWritten(self):
        return _NavTransMsgPayload.NavTransMsgReader_isWritten(self)

    def timeWritten(self):
        return _NavTransMsgPayload.NavTransMsgReader_timeWritten(self)

    def moduleID(self):
        return _NavTransMsgPayload.NavTransMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _NavTransMsgPayload.NavTransMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _NavTransMsgPayload.NavTransMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _NavTransMsgPayload.NavTransMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _NavTransMsgPayload.NavTransMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _NavTransMsgPayload.NavTransMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _NavTransMsgPayload.NavTransMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _NavTransMsgPayload.NavTransMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _NavTransMsgPayload.NavTransMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _NavTransMsgPayload.NavTransMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _NavTransMsgPayload.NavTransMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == NavTransMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.NavTransMsgPayload import NavTransMsg_C
            if type(source) == NavTransMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<NavTransMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == NavTransMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.NavTransMsgPayload import NavTransMsg_C
        except ImportError:
            return 0

        if type(source) == NavTransMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _NavTransMsgPayload.delete_NavTransMsgReader

# Register NavTransMsgReader in _NavTransMsgPayload:
_NavTransMsgPayload.NavTransMsgReader_swigregister(NavTransMsgReader)
class NavTransMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _NavTransMsgPayload.NavTransMsgWriter_swiginit(self, _NavTransMsgPayload.new_NavTransMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _NavTransMsgPayload.NavTransMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _NavTransMsgPayload.delete_NavTransMsgWriter

# Register NavTransMsgWriter in _NavTransMsgPayload:
_NavTransMsgPayload.NavTransMsgWriter_swigregister(NavTransMsgWriter)
class NavTransMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_NavTransMsgPayload.NavTransMsg_write_get, _NavTransMsgPayload.NavTransMsg_write_set)

    def addSubscriber(self):
        return _NavTransMsgPayload.NavTransMsg_addSubscriber(self)

    def addAuthor(self):
        return _NavTransMsgPayload.NavTransMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _NavTransMsgPayload.NavTransMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _NavTransMsgPayload.NavTransMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _NavTransMsgPayload.NavTransMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_NavTransMsgPayload.NavTransMsg_zeroMsgPayload_get, _NavTransMsgPayload.NavTransMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _NavTransMsgPayload.NavTransMsg_isLinked(self)

    def getPayloadSize(self):
        return _NavTransMsgPayload.NavTransMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _NavTransMsgPayload.NavTransMsg_swiginit(self, _NavTransMsgPayload.new_NavTransMsg())
    __swig_destroy__ = _NavTransMsgPayload.delete_NavTransMsg

# Register NavTransMsg in _NavTransMsgPayload:
_NavTransMsgPayload.NavTransMsg_swigregister(NavTransMsg)
class NavTransMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _NavTransMsgPayload.NavTransMsgRecorder_swiginit(self, _NavTransMsgPayload.new_NavTransMsgRecorder(*args))
    __swig_destroy__ = _NavTransMsgPayload.delete_NavTransMsgRecorder

    def SelfInit(self):
        return _NavTransMsgPayload.NavTransMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _NavTransMsgPayload.NavTransMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _NavTransMsgPayload.NavTransMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _NavTransMsgPayload.NavTransMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _NavTransMsgPayload.NavTransMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _NavTransMsgPayload.NavTransMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _NavTransMsgPayload.NavTransMsgRecorder___record_vector(self)

    def size(self):
        return _NavTransMsgPayload.NavTransMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _NavTransMsgPayload.NavTransMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _NavTransMsgPayload.NavTransMsgRecorder_clear(self)
    bskLogger = property(_NavTransMsgPayload.NavTransMsgRecorder_bskLogger_get, _NavTransMsgPayload.NavTransMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _NavTransMsgPayload.NavTransMsgRecorder_updateTimeInterval(self, timeDiff)

    def _timeTag_array(self):
        return _NavTransMsgPayload.NavTransMsgRecorder__timeTag_array(self)

    @property
    def timeTag(self):
        return self._timeTag_array()


    def _r_BN_N_array(self):
        return _NavTransMsgPayload.NavTransMsgRecorder__r_BN_N_array(self)

    @property
    def r_BN_N(self):
        return self._r_BN_N_array()


    def _v_BN_N_array(self):
        return _NavTransMsgPayload.NavTransMsgRecorder__v_BN_N_array(self)

    @property
    def v_BN_N(self):
        return self._v_BN_N_array()


    def _vehAccumDV_array(self):
        return _NavTransMsgPayload.NavTransMsgRecorder__vehAccumDV_array(self)

    @property
    def vehAccumDV(self):
        return self._vehAccumDV_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register NavTransMsgRecorder in _NavTransMsgPayload:
_NavTransMsgPayload.NavTransMsgRecorder_swigregister(NavTransMsgRecorder)
class NavTransMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _NavTransMsgPayload.NavTransMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _NavTransMsgPayload.NavTransMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _NavTransMsgPayload.NavTransMsgPayloadVector___bool__(self)

    def __len__(self):
        return _NavTransMsgPayload.NavTransMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _NavTransMsgPayload.NavTransMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _NavTransMsgPayload.NavTransMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _NavTransMsgPayload.NavTransMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _NavTransMsgPayload.NavTransMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _NavTransMsgPayload.NavTransMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _NavTransMsgPayload.NavTransMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _NavTransMsgPayload.NavTransMsgPayloadVector_pop(self)

    def append(self, x):
        return _NavTransMsgPayload.NavTransMsgPayloadVector_append(self, x)

    def empty(self):
        return _NavTransMsgPayload.NavTransMsgPayloadVector_empty(self)

    def size(self):
        return _NavTransMsgPayload.NavTransMsgPayloadVector_size(self)

    def swap(self, v):
        return _NavTransMsgPayload.NavTransMsgPayloadVector_swap(self, v)

    def begin(self):
        return _NavTransMsgPayload.NavTransMsgPayloadVector_begin(self)

    def end(self):
        return _NavTransMsgPayload.NavTransMsgPayloadVector_end(self)

    def rbegin(self):
        return _NavTransMsgPayload.NavTransMsgPayloadVector_rbegin(self)

    def rend(self):
        return _NavTransMsgPayload.NavTransMsgPayloadVector_rend(self)

    def clear(self):
        return _NavTransMsgPayload.NavTransMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _NavTransMsgPayload.NavTransMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _NavTransMsgPayload.NavTransMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _NavTransMsgPayload.NavTransMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _NavTransMsgPayload.NavTransMsgPayloadVector_swiginit(self, _NavTransMsgPayload.new_NavTransMsgPayloadVector(*args))

    def push_back(self, x):
        return _NavTransMsgPayload.NavTransMsgPayloadVector_push_back(self, x)

    def front(self):
        return _NavTransMsgPayload.NavTransMsgPayloadVector_front(self)

    def back(self):
        return _NavTransMsgPayload.NavTransMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _NavTransMsgPayload.NavTransMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _NavTransMsgPayload.NavTransMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _NavTransMsgPayload.NavTransMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _NavTransMsgPayload.NavTransMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _NavTransMsgPayload.NavTransMsgPayloadVector_capacity(self)

    def get_all(self):
        return _NavTransMsgPayload.NavTransMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _NavTransMsgPayload.delete_NavTransMsgPayloadVector

# Register NavTransMsgPayloadVector in _NavTransMsgPayload:
_NavTransMsgPayload.NavTransMsgPayloadVector_swigregister(NavTransMsgPayloadVector)
class NavTransMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _NavTransMsgPayload.NavTransMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _NavTransMsgPayload.NavTransMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _NavTransMsgPayload.NavTransMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _NavTransMsgPayload.NavTransMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _NavTransMsgPayload.NavTransMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _NavTransMsgPayload.NavTransMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _NavTransMsgPayload.NavTransMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _NavTransMsgPayload.NavTransMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _NavTransMsgPayload.NavTransMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _NavTransMsgPayload.NavTransMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _NavTransMsgPayload.NavTransMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _NavTransMsgPayload.NavTransMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _NavTransMsgPayload.NavTransMsgOutMsgsVector_empty(self)

    def size(self):
        return _NavTransMsgPayload.NavTransMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _NavTransMsgPayload.NavTransMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _NavTransMsgPayload.NavTransMsgOutMsgsVector_begin(self)

    def end(self):
        return _NavTransMsgPayload.NavTransMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _NavTransMsgPayload.NavTransMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _NavTransMsgPayload.NavTransMsgOutMsgsVector_rend(self)

    def clear(self):
        return _NavTransMsgPayload.NavTransMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _NavTransMsgPayload.NavTransMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _NavTransMsgPayload.NavTransMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _NavTransMsgPayload.NavTransMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _NavTransMsgPayload.NavTransMsgOutMsgsVector_swiginit(self, _NavTransMsgPayload.new_NavTransMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _NavTransMsgPayload.NavTransMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _NavTransMsgPayload.NavTransMsgOutMsgsVector_front(self)

    def back(self):
        return _NavTransMsgPayload.NavTransMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _NavTransMsgPayload.NavTransMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _NavTransMsgPayload.NavTransMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _NavTransMsgPayload.NavTransMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _NavTransMsgPayload.NavTransMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _NavTransMsgPayload.NavTransMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _NavTransMsgPayload.delete_NavTransMsgOutMsgsVector

# Register NavTransMsgOutMsgsVector in _NavTransMsgPayload:
_NavTransMsgPayload.NavTransMsgOutMsgsVector_swigregister(NavTransMsgOutMsgsVector)
class NavTransMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _NavTransMsgPayload.NavTransMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _NavTransMsgPayload.NavTransMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _NavTransMsgPayload.NavTransMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _NavTransMsgPayload.NavTransMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _NavTransMsgPayload.NavTransMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _NavTransMsgPayload.NavTransMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _NavTransMsgPayload.NavTransMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _NavTransMsgPayload.NavTransMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _NavTransMsgPayload.NavTransMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _NavTransMsgPayload.NavTransMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _NavTransMsgPayload.NavTransMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _NavTransMsgPayload.NavTransMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _NavTransMsgPayload.NavTransMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _NavTransMsgPayload.NavTransMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _NavTransMsgPayload.NavTransMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _NavTransMsgPayload.NavTransMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _NavTransMsgPayload.NavTransMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _NavTransMsgPayload.NavTransMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _NavTransMsgPayload.NavTransMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _NavTransMsgPayload.NavTransMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _NavTransMsgPayload.NavTransMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _NavTransMsgPayload.NavTransMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _NavTransMsgPayload.NavTransMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _NavTransMsgPayload.NavTransMsgOutMsgsPtrVector_swiginit(self, _NavTransMsgPayload.new_NavTransMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _NavTransMsgPayload.NavTransMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _NavTransMsgPayload.NavTransMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _NavTransMsgPayload.NavTransMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _NavTransMsgPayload.NavTransMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _NavTransMsgPayload.NavTransMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _NavTransMsgPayload.NavTransMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _NavTransMsgPayload.NavTransMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _NavTransMsgPayload.NavTransMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _NavTransMsgPayload.delete_NavTransMsgOutMsgsPtrVector

# Register NavTransMsgOutMsgsPtrVector in _NavTransMsgPayload:
_NavTransMsgPayload.NavTransMsgOutMsgsPtrVector_swigregister(NavTransMsgOutMsgsPtrVector)
class NavTransMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _NavTransMsgPayload.NavTransMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _NavTransMsgPayload.NavTransMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _NavTransMsgPayload.NavTransMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _NavTransMsgPayload.NavTransMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _NavTransMsgPayload.NavTransMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _NavTransMsgPayload.NavTransMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _NavTransMsgPayload.NavTransMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _NavTransMsgPayload.NavTransMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _NavTransMsgPayload.NavTransMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _NavTransMsgPayload.NavTransMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _NavTransMsgPayload.NavTransMsgInMsgsVector_pop(self)

    def append(self, x):
        return _NavTransMsgPayload.NavTransMsgInMsgsVector_append(self, x)

    def empty(self):
        return _NavTransMsgPayload.NavTransMsgInMsgsVector_empty(self)

    def size(self):
        return _NavTransMsgPayload.NavTransMsgInMsgsVector_size(self)

    def swap(self, v):
        return _NavTransMsgPayload.NavTransMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _NavTransMsgPayload.NavTransMsgInMsgsVector_begin(self)

    def end(self):
        return _NavTransMsgPayload.NavTransMsgInMsgsVector_end(self)

    def rbegin(self):
        return _NavTransMsgPayload.NavTransMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _NavTransMsgPayload.NavTransMsgInMsgsVector_rend(self)

    def clear(self):
        return _NavTransMsgPayload.NavTransMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _NavTransMsgPayload.NavTransMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _NavTransMsgPayload.NavTransMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _NavTransMsgPayload.NavTransMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _NavTransMsgPayload.NavTransMsgInMsgsVector_swiginit(self, _NavTransMsgPayload.new_NavTransMsgInMsgsVector(*args))

    def push_back(self, x):
        return _NavTransMsgPayload.NavTransMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _NavTransMsgPayload.NavTransMsgInMsgsVector_front(self)

    def back(self):
        return _NavTransMsgPayload.NavTransMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _NavTransMsgPayload.NavTransMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _NavTransMsgPayload.NavTransMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _NavTransMsgPayload.NavTransMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _NavTransMsgPayload.NavTransMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _NavTransMsgPayload.NavTransMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _NavTransMsgPayload.delete_NavTransMsgInMsgsVector

# Register NavTransMsgInMsgsVector in _NavTransMsgPayload:
_NavTransMsgPayload.NavTransMsgInMsgsVector_swigregister(NavTransMsgInMsgsVector)
class NavTransMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_NavTransMsgPayload.NavTransMsg_C_header_get, _NavTransMsgPayload.NavTransMsg_C_header_set)
    payload = property(_NavTransMsgPayload.NavTransMsg_C_payload_get, _NavTransMsgPayload.NavTransMsg_C_payload_set)
    payloadPointer = property(_NavTransMsgPayload.NavTransMsg_C_payloadPointer_get, _NavTransMsgPayload.NavTransMsg_C_payloadPointer_set)
    headerPointer = property(_NavTransMsgPayload.NavTransMsg_C_headerPointer_get, _NavTransMsgPayload.NavTransMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _NavTransMsgPayload.NavTransMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import NavTransMsg
        if type(source) == type(self):
            NavTransMsg_C_subscribe(self, source)
        elif type(source) == NavTransMsg:
            NavTransMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            NavTransMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe NavTransMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        NavTransMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import NavTransMsg
        if type(source) == type(self):
            return (NavTransMsg_C_isSubscribedTo(self, source))
        elif type(source) == NavTransMsg:
            return (NavTransMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (NavTransMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        NavTransMsg_C_addAuthor(self, self)
        if data:
            NavTransMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        NavTransMsg_C_addAuthor(self, self)
        NavTransMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return NavTransMsg_C_read(self)


    def __init__(self):
        _NavTransMsgPayload.NavTransMsg_C_swiginit(self, _NavTransMsgPayload.new_NavTransMsg_C())
    __swig_destroy__ = _NavTransMsgPayload.delete_NavTransMsg_C

# Register NavTransMsg_C in _NavTransMsgPayload:
_NavTransMsgPayload.NavTransMsg_C_swigregister(NavTransMsg_C)

def NavTransMsg_cpp_subscribe(subscriber, source):
    return _NavTransMsgPayload.NavTransMsg_cpp_subscribe(subscriber, source)

def NavTransMsg_C_subscribe(subscriber, source):
    return _NavTransMsgPayload.NavTransMsg_C_subscribe(subscriber, source)

def NavTransMsg_addr_subscribe(subscriber, sourceAddr):
    return _NavTransMsgPayload.NavTransMsg_addr_subscribe(subscriber, sourceAddr)

def NavTransMsg_unsubscribe(subscriber):
    return _NavTransMsgPayload.NavTransMsg_unsubscribe(subscriber)

def NavTransMsg_C_isSubscribedTo(subscriber, source):
    return _NavTransMsgPayload.NavTransMsg_C_isSubscribedTo(subscriber, source)

def NavTransMsg_cpp_isSubscribedTo(subscriber, source):
    return _NavTransMsgPayload.NavTransMsg_cpp_isSubscribedTo(subscriber, source)

def NavTransMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _NavTransMsgPayload.NavTransMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def NavTransMsg_C_addAuthor(coowner, data):
    return _NavTransMsgPayload.NavTransMsg_C_addAuthor(coowner, data)

def NavTransMsg_C_init(owner):
    return _NavTransMsgPayload.NavTransMsg_C_init(owner)

def NavTransMsg_C_isLinked(data):
    return _NavTransMsgPayload.NavTransMsg_C_isLinked(data)

def NavTransMsg_C_isWritten(data):
    return _NavTransMsgPayload.NavTransMsg_C_isWritten(data)

def NavTransMsg_C_timeWritten(data):
    return _NavTransMsgPayload.NavTransMsg_C_timeWritten(data)

def NavTransMsg_C_moduleID(data):
    return _NavTransMsgPayload.NavTransMsg_C_moduleID(data)

def NavTransMsg_C_write(data, destination, moduleID, callTime):
    return _NavTransMsgPayload.NavTransMsg_C_write(data, destination, moduleID, callTime)

def NavTransMsg_C_read(source):
    return _NavTransMsgPayload.NavTransMsg_C_read(source)

def NavTransMsg_C_zeroMsgPayload():
    return _NavTransMsgPayload.NavTransMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_NavTransMsgPayload.MsgHeader_isLinked_get, _NavTransMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_NavTransMsgPayload.MsgHeader_isWritten_get, _NavTransMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_NavTransMsgPayload.MsgHeader_timeWritten_get, _NavTransMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_NavTransMsgPayload.MsgHeader_moduleID_get, _NavTransMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _NavTransMsgPayload.MsgHeader_swiginit(self, _NavTransMsgPayload.new_MsgHeader())
    __swig_destroy__ = _NavTransMsgPayload.delete_MsgHeader

# Register MsgHeader in _NavTransMsgPayload:
_NavTransMsgPayload.MsgHeader_swigregister(MsgHeader)

