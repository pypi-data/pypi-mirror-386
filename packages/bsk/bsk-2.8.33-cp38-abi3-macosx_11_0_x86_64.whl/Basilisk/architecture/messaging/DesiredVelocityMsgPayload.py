# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _DesiredVelocityMsgPayload
else:
    import _DesiredVelocityMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _DesiredVelocityMsgPayload.delete_SwigPyIterator

    def value(self):
        return _DesiredVelocityMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _DesiredVelocityMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _DesiredVelocityMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _DesiredVelocityMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _DesiredVelocityMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _DesiredVelocityMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _DesiredVelocityMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _DesiredVelocityMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _DesiredVelocityMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _DesiredVelocityMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _DesiredVelocityMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _DesiredVelocityMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _DesiredVelocityMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _DesiredVelocityMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _DesiredVelocityMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _DesiredVelocityMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _DesiredVelocityMsgPayload:
_DesiredVelocityMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _DesiredVelocityMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _DesiredVelocityMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _DesiredVelocityMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _DesiredVelocityMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _DesiredVelocityMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _DesiredVelocityMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _DesiredVelocityMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _DesiredVelocityMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _DesiredVelocityMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _DesiredVelocityMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _DesiredVelocityMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _DesiredVelocityMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _DesiredVelocityMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _DesiredVelocityMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _DesiredVelocityMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _DesiredVelocityMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DesiredVelocityMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DesiredVelocityMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _DesiredVelocityMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _DesiredVelocityMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _DesiredVelocityMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DesiredVelocityMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DesiredVelocityMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DesiredVelocityMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DesiredVelocityMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DesiredVelocityMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _DesiredVelocityMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _DesiredVelocityMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _DesiredVelocityMsgPayload.TimeVector_empty(self)

    def size(self):
        return _DesiredVelocityMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _DesiredVelocityMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _DesiredVelocityMsgPayload.TimeVector_begin(self)

    def end(self):
        return _DesiredVelocityMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _DesiredVelocityMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _DesiredVelocityMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _DesiredVelocityMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _DesiredVelocityMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _DesiredVelocityMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _DesiredVelocityMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _DesiredVelocityMsgPayload.TimeVector_swiginit(self, _DesiredVelocityMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _DesiredVelocityMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _DesiredVelocityMsgPayload.TimeVector_front(self)

    def back(self):
        return _DesiredVelocityMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _DesiredVelocityMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _DesiredVelocityMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _DesiredVelocityMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _DesiredVelocityMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _DesiredVelocityMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _DesiredVelocityMsgPayload.delete_TimeVector

# Register TimeVector in _DesiredVelocityMsgPayload:
_DesiredVelocityMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DesiredVelocityMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DesiredVelocityMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _DesiredVelocityMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _DesiredVelocityMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _DesiredVelocityMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DesiredVelocityMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DesiredVelocityMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DesiredVelocityMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DesiredVelocityMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DesiredVelocityMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _DesiredVelocityMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _DesiredVelocityMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _DesiredVelocityMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _DesiredVelocityMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _DesiredVelocityMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _DesiredVelocityMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _DesiredVelocityMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _DesiredVelocityMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _DesiredVelocityMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _DesiredVelocityMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _DesiredVelocityMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _DesiredVelocityMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _DesiredVelocityMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _DesiredVelocityMsgPayload.DoubleVector_swiginit(self, _DesiredVelocityMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _DesiredVelocityMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _DesiredVelocityMsgPayload.DoubleVector_front(self)

    def back(self):
        return _DesiredVelocityMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _DesiredVelocityMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _DesiredVelocityMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _DesiredVelocityMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _DesiredVelocityMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _DesiredVelocityMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _DesiredVelocityMsgPayload.delete_DoubleVector

# Register DoubleVector in _DesiredVelocityMsgPayload:
_DesiredVelocityMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DesiredVelocityMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DesiredVelocityMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _DesiredVelocityMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _DesiredVelocityMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _DesiredVelocityMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DesiredVelocityMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DesiredVelocityMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DesiredVelocityMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DesiredVelocityMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DesiredVelocityMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _DesiredVelocityMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _DesiredVelocityMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _DesiredVelocityMsgPayload.StringVector_empty(self)

    def size(self):
        return _DesiredVelocityMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _DesiredVelocityMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _DesiredVelocityMsgPayload.StringVector_begin(self)

    def end(self):
        return _DesiredVelocityMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _DesiredVelocityMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _DesiredVelocityMsgPayload.StringVector_rend(self)

    def clear(self):
        return _DesiredVelocityMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _DesiredVelocityMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _DesiredVelocityMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _DesiredVelocityMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _DesiredVelocityMsgPayload.StringVector_swiginit(self, _DesiredVelocityMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _DesiredVelocityMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _DesiredVelocityMsgPayload.StringVector_front(self)

    def back(self):
        return _DesiredVelocityMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _DesiredVelocityMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _DesiredVelocityMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _DesiredVelocityMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _DesiredVelocityMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _DesiredVelocityMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _DesiredVelocityMsgPayload.delete_StringVector

# Register StringVector in _DesiredVelocityMsgPayload:
_DesiredVelocityMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _DesiredVelocityMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _DesiredVelocityMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _DesiredVelocityMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _DesiredVelocityMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _DesiredVelocityMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _DesiredVelocityMsgPayload.NANO2SEC
SEC2NANO = _DesiredVelocityMsgPayload.SEC2NANO
SEC2HOUR = _DesiredVelocityMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _DesiredVelocityMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _DesiredVelocityMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _DesiredVelocityMsgPayload.secToNano(seconds)
BOOL_FALSE = _DesiredVelocityMsgPayload.BOOL_FALSE
BOOL_TRUE = _DesiredVelocityMsgPayload.BOOL_TRUE
AVAILABLE = _DesiredVelocityMsgPayload.AVAILABLE
UNAVAILABLE = _DesiredVelocityMsgPayload.UNAVAILABLE
BalancedWheels = _DesiredVelocityMsgPayload.BalancedWheels
JitterSimple = _DesiredVelocityMsgPayload.JitterSimple
JitterFullyCoupled = _DesiredVelocityMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _DesiredVelocityMsgPayload.SysModel_swiginit(self, _DesiredVelocityMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _DesiredVelocityMsgPayload.delete_SysModel

    def SelfInit(self):
        return _DesiredVelocityMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _DesiredVelocityMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _DesiredVelocityMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _DesiredVelocityMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_DesiredVelocityMsgPayload.SysModel_ModelTag_get, _DesiredVelocityMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_DesiredVelocityMsgPayload.SysModel_CallCounts_get, _DesiredVelocityMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_DesiredVelocityMsgPayload.SysModel_RNGSeed_get, _DesiredVelocityMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_DesiredVelocityMsgPayload.SysModel_moduleID_get, _DesiredVelocityMsgPayload.SysModel_moduleID_set)

# Register SysModel in _DesiredVelocityMsgPayload:
_DesiredVelocityMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _DesiredVelocityMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _DesiredVelocityMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _DesiredVelocityMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _DesiredVelocityMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _DesiredVelocityMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _DesiredVelocityMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _DesiredVelocityMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _DesiredVelocityMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _DesiredVelocityMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _DesiredVelocityMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _DesiredVelocityMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _DesiredVelocityMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class DesiredVelocityMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    vDesired_N = property(_DesiredVelocityMsgPayload.DesiredVelocityMsgPayload_vDesired_N_get, _DesiredVelocityMsgPayload.DesiredVelocityMsgPayload_vDesired_N_set)
    maneuverTime = property(_DesiredVelocityMsgPayload.DesiredVelocityMsgPayload_maneuverTime_get, _DesiredVelocityMsgPayload.DesiredVelocityMsgPayload_maneuverTime_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _DesiredVelocityMsgPayload.DesiredVelocityMsgPayload_swiginit(self, _DesiredVelocityMsgPayload.new_DesiredVelocityMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _DesiredVelocityMsgPayload.delete_DesiredVelocityMsgPayload

# Register DesiredVelocityMsgPayload in _DesiredVelocityMsgPayload:
_DesiredVelocityMsgPayload.DesiredVelocityMsgPayload_swigregister(DesiredVelocityMsgPayload)

def _pprint_DesiredVelocityMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[DesiredVelocityMsgPayload.__repr__] = _pprint_DesiredVelocityMsgPayload

class DesiredVelocityMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_DesiredVelocityMsgPayload.DesiredVelocityMsgReader_bskLogger_get, _DesiredVelocityMsgPayload.DesiredVelocityMsgReader_bskLogger_set)
    zeroMsgPayload = property(_DesiredVelocityMsgPayload.DesiredVelocityMsgReader_zeroMsgPayload_get, _DesiredVelocityMsgPayload.DesiredVelocityMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _DesiredVelocityMsgPayload.DesiredVelocityMsgReader_swiginit(self, _DesiredVelocityMsgPayload.new_DesiredVelocityMsgReader(*args))

    def __call__(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgReader___call__(self)

    def isLinked(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgReader_isLinked(self)

    def isWritten(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgReader_isWritten(self)

    def timeWritten(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgReader_timeWritten(self)

    def moduleID(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == DesiredVelocityMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.DesiredVelocityMsgPayload import DesiredVelocityMsg_C
            if type(source) == DesiredVelocityMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<DesiredVelocityMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == DesiredVelocityMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.DesiredVelocityMsgPayload import DesiredVelocityMsg_C
        except ImportError:
            return 0

        if type(source) == DesiredVelocityMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _DesiredVelocityMsgPayload.delete_DesiredVelocityMsgReader

# Register DesiredVelocityMsgReader in _DesiredVelocityMsgPayload:
_DesiredVelocityMsgPayload.DesiredVelocityMsgReader_swigregister(DesiredVelocityMsgReader)
class DesiredVelocityMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _DesiredVelocityMsgPayload.DesiredVelocityMsgWriter_swiginit(self, _DesiredVelocityMsgPayload.new_DesiredVelocityMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _DesiredVelocityMsgPayload.delete_DesiredVelocityMsgWriter

# Register DesiredVelocityMsgWriter in _DesiredVelocityMsgPayload:
_DesiredVelocityMsgPayload.DesiredVelocityMsgWriter_swigregister(DesiredVelocityMsgWriter)
class DesiredVelocityMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_DesiredVelocityMsgPayload.DesiredVelocityMsg_write_get, _DesiredVelocityMsgPayload.DesiredVelocityMsg_write_set)

    def addSubscriber(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsg_addSubscriber(self)

    def addAuthor(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_DesiredVelocityMsgPayload.DesiredVelocityMsg_zeroMsgPayload_get, _DesiredVelocityMsgPayload.DesiredVelocityMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsg_isLinked(self)

    def getPayloadSize(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _DesiredVelocityMsgPayload.DesiredVelocityMsg_swiginit(self, _DesiredVelocityMsgPayload.new_DesiredVelocityMsg())
    __swig_destroy__ = _DesiredVelocityMsgPayload.delete_DesiredVelocityMsg

# Register DesiredVelocityMsg in _DesiredVelocityMsgPayload:
_DesiredVelocityMsgPayload.DesiredVelocityMsg_swigregister(DesiredVelocityMsg)
class DesiredVelocityMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _DesiredVelocityMsgPayload.DesiredVelocityMsgRecorder_swiginit(self, _DesiredVelocityMsgPayload.new_DesiredVelocityMsgRecorder(*args))
    __swig_destroy__ = _DesiredVelocityMsgPayload.delete_DesiredVelocityMsgRecorder

    def SelfInit(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgRecorder___record_vector(self)

    def size(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgRecorder_clear(self)
    bskLogger = property(_DesiredVelocityMsgPayload.DesiredVelocityMsgRecorder_bskLogger_get, _DesiredVelocityMsgPayload.DesiredVelocityMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgRecorder_updateTimeInterval(self, timeDiff)

    def _vDesired_N_array(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgRecorder__vDesired_N_array(self)

    @property
    def vDesired_N(self):
        return self._vDesired_N_array()


    def _maneuverTime_array(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgRecorder__maneuverTime_array(self)

    @property
    def maneuverTime(self):
        return self._maneuverTime_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register DesiredVelocityMsgRecorder in _DesiredVelocityMsgPayload:
_DesiredVelocityMsgPayload.DesiredVelocityMsgRecorder_swigregister(DesiredVelocityMsgRecorder)
class DesiredVelocityMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgPayloadVector___bool__(self)

    def __len__(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgPayloadVector_pop(self)

    def append(self, x):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgPayloadVector_append(self, x)

    def empty(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgPayloadVector_empty(self)

    def size(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgPayloadVector_size(self)

    def swap(self, v):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgPayloadVector_swap(self, v)

    def begin(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgPayloadVector_begin(self)

    def end(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgPayloadVector_end(self)

    def rbegin(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgPayloadVector_rbegin(self)

    def rend(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgPayloadVector_rend(self)

    def clear(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _DesiredVelocityMsgPayload.DesiredVelocityMsgPayloadVector_swiginit(self, _DesiredVelocityMsgPayload.new_DesiredVelocityMsgPayloadVector(*args))

    def push_back(self, x):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgPayloadVector_push_back(self, x)

    def front(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgPayloadVector_front(self)

    def back(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgPayloadVector_capacity(self)

    def get_all(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _DesiredVelocityMsgPayload.delete_DesiredVelocityMsgPayloadVector

# Register DesiredVelocityMsgPayloadVector in _DesiredVelocityMsgPayload:
_DesiredVelocityMsgPayload.DesiredVelocityMsgPayloadVector_swigregister(DesiredVelocityMsgPayloadVector)
class DesiredVelocityMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsVector_empty(self)

    def size(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsVector_begin(self)

    def end(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsVector_rend(self)

    def clear(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsVector_swiginit(self, _DesiredVelocityMsgPayload.new_DesiredVelocityMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsVector_front(self)

    def back(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _DesiredVelocityMsgPayload.delete_DesiredVelocityMsgOutMsgsVector

# Register DesiredVelocityMsgOutMsgsVector in _DesiredVelocityMsgPayload:
_DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsVector_swigregister(DesiredVelocityMsgOutMsgsVector)
class DesiredVelocityMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsPtrVector_swiginit(self, _DesiredVelocityMsgPayload.new_DesiredVelocityMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _DesiredVelocityMsgPayload.delete_DesiredVelocityMsgOutMsgsPtrVector

# Register DesiredVelocityMsgOutMsgsPtrVector in _DesiredVelocityMsgPayload:
_DesiredVelocityMsgPayload.DesiredVelocityMsgOutMsgsPtrVector_swigregister(DesiredVelocityMsgOutMsgsPtrVector)
class DesiredVelocityMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgInMsgsVector_pop(self)

    def append(self, x):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgInMsgsVector_append(self, x)

    def empty(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgInMsgsVector_empty(self)

    def size(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgInMsgsVector_size(self)

    def swap(self, v):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgInMsgsVector_begin(self)

    def end(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgInMsgsVector_end(self)

    def rbegin(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgInMsgsVector_rend(self)

    def clear(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _DesiredVelocityMsgPayload.DesiredVelocityMsgInMsgsVector_swiginit(self, _DesiredVelocityMsgPayload.new_DesiredVelocityMsgInMsgsVector(*args))

    def push_back(self, x):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgInMsgsVector_front(self)

    def back(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _DesiredVelocityMsgPayload.delete_DesiredVelocityMsgInMsgsVector

# Register DesiredVelocityMsgInMsgsVector in _DesiredVelocityMsgPayload:
_DesiredVelocityMsgPayload.DesiredVelocityMsgInMsgsVector_swigregister(DesiredVelocityMsgInMsgsVector)
class DesiredVelocityMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_DesiredVelocityMsgPayload.DesiredVelocityMsg_C_header_get, _DesiredVelocityMsgPayload.DesiredVelocityMsg_C_header_set)
    payload = property(_DesiredVelocityMsgPayload.DesiredVelocityMsg_C_payload_get, _DesiredVelocityMsgPayload.DesiredVelocityMsg_C_payload_set)
    payloadPointer = property(_DesiredVelocityMsgPayload.DesiredVelocityMsg_C_payloadPointer_get, _DesiredVelocityMsgPayload.DesiredVelocityMsg_C_payloadPointer_set)
    headerPointer = property(_DesiredVelocityMsgPayload.DesiredVelocityMsg_C_headerPointer_get, _DesiredVelocityMsgPayload.DesiredVelocityMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _DesiredVelocityMsgPayload.DesiredVelocityMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import DesiredVelocityMsg
        if type(source) == type(self):
            DesiredVelocityMsg_C_subscribe(self, source)
        elif type(source) == DesiredVelocityMsg:
            DesiredVelocityMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            DesiredVelocityMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe DesiredVelocityMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        DesiredVelocityMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import DesiredVelocityMsg
        if type(source) == type(self):
            return (DesiredVelocityMsg_C_isSubscribedTo(self, source))
        elif type(source) == DesiredVelocityMsg:
            return (DesiredVelocityMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (DesiredVelocityMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        DesiredVelocityMsg_C_addAuthor(self, self)
        if data:
            DesiredVelocityMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        DesiredVelocityMsg_C_addAuthor(self, self)
        DesiredVelocityMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return DesiredVelocityMsg_C_read(self)


    def __init__(self):
        _DesiredVelocityMsgPayload.DesiredVelocityMsg_C_swiginit(self, _DesiredVelocityMsgPayload.new_DesiredVelocityMsg_C())
    __swig_destroy__ = _DesiredVelocityMsgPayload.delete_DesiredVelocityMsg_C

# Register DesiredVelocityMsg_C in _DesiredVelocityMsgPayload:
_DesiredVelocityMsgPayload.DesiredVelocityMsg_C_swigregister(DesiredVelocityMsg_C)

def DesiredVelocityMsg_cpp_subscribe(subscriber, source):
    return _DesiredVelocityMsgPayload.DesiredVelocityMsg_cpp_subscribe(subscriber, source)

def DesiredVelocityMsg_C_subscribe(subscriber, source):
    return _DesiredVelocityMsgPayload.DesiredVelocityMsg_C_subscribe(subscriber, source)

def DesiredVelocityMsg_addr_subscribe(subscriber, sourceAddr):
    return _DesiredVelocityMsgPayload.DesiredVelocityMsg_addr_subscribe(subscriber, sourceAddr)

def DesiredVelocityMsg_unsubscribe(subscriber):
    return _DesiredVelocityMsgPayload.DesiredVelocityMsg_unsubscribe(subscriber)

def DesiredVelocityMsg_C_isSubscribedTo(subscriber, source):
    return _DesiredVelocityMsgPayload.DesiredVelocityMsg_C_isSubscribedTo(subscriber, source)

def DesiredVelocityMsg_cpp_isSubscribedTo(subscriber, source):
    return _DesiredVelocityMsgPayload.DesiredVelocityMsg_cpp_isSubscribedTo(subscriber, source)

def DesiredVelocityMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _DesiredVelocityMsgPayload.DesiredVelocityMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def DesiredVelocityMsg_C_addAuthor(coowner, data):
    return _DesiredVelocityMsgPayload.DesiredVelocityMsg_C_addAuthor(coowner, data)

def DesiredVelocityMsg_C_init(owner):
    return _DesiredVelocityMsgPayload.DesiredVelocityMsg_C_init(owner)

def DesiredVelocityMsg_C_isLinked(data):
    return _DesiredVelocityMsgPayload.DesiredVelocityMsg_C_isLinked(data)

def DesiredVelocityMsg_C_isWritten(data):
    return _DesiredVelocityMsgPayload.DesiredVelocityMsg_C_isWritten(data)

def DesiredVelocityMsg_C_timeWritten(data):
    return _DesiredVelocityMsgPayload.DesiredVelocityMsg_C_timeWritten(data)

def DesiredVelocityMsg_C_moduleID(data):
    return _DesiredVelocityMsgPayload.DesiredVelocityMsg_C_moduleID(data)

def DesiredVelocityMsg_C_write(data, destination, moduleID, callTime):
    return _DesiredVelocityMsgPayload.DesiredVelocityMsg_C_write(data, destination, moduleID, callTime)

def DesiredVelocityMsg_C_read(source):
    return _DesiredVelocityMsgPayload.DesiredVelocityMsg_C_read(source)

def DesiredVelocityMsg_C_zeroMsgPayload():
    return _DesiredVelocityMsgPayload.DesiredVelocityMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_DesiredVelocityMsgPayload.MsgHeader_isLinked_get, _DesiredVelocityMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_DesiredVelocityMsgPayload.MsgHeader_isWritten_get, _DesiredVelocityMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_DesiredVelocityMsgPayload.MsgHeader_timeWritten_get, _DesiredVelocityMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_DesiredVelocityMsgPayload.MsgHeader_moduleID_get, _DesiredVelocityMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _DesiredVelocityMsgPayload.MsgHeader_swiginit(self, _DesiredVelocityMsgPayload.new_MsgHeader())
    __swig_destroy__ = _DesiredVelocityMsgPayload.delete_MsgHeader

# Register MsgHeader in _DesiredVelocityMsgPayload:
_DesiredVelocityMsgPayload.MsgHeader_swigregister(MsgHeader)

