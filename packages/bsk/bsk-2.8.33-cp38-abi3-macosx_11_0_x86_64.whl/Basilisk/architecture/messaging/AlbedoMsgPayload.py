# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _AlbedoMsgPayload
else:
    import _AlbedoMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AlbedoMsgPayload.delete_SwigPyIterator

    def value(self):
        return _AlbedoMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _AlbedoMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _AlbedoMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _AlbedoMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _AlbedoMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _AlbedoMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _AlbedoMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _AlbedoMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _AlbedoMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _AlbedoMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _AlbedoMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _AlbedoMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _AlbedoMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _AlbedoMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _AlbedoMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _AlbedoMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _AlbedoMsgPayload:
_AlbedoMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _AlbedoMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _AlbedoMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _AlbedoMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _AlbedoMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _AlbedoMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _AlbedoMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _AlbedoMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _AlbedoMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _AlbedoMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _AlbedoMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _AlbedoMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _AlbedoMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _AlbedoMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _AlbedoMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _AlbedoMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _AlbedoMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AlbedoMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AlbedoMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _AlbedoMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _AlbedoMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _AlbedoMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AlbedoMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AlbedoMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AlbedoMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AlbedoMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AlbedoMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _AlbedoMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _AlbedoMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _AlbedoMsgPayload.TimeVector_empty(self)

    def size(self):
        return _AlbedoMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _AlbedoMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _AlbedoMsgPayload.TimeVector_begin(self)

    def end(self):
        return _AlbedoMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _AlbedoMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _AlbedoMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _AlbedoMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _AlbedoMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _AlbedoMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _AlbedoMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _AlbedoMsgPayload.TimeVector_swiginit(self, _AlbedoMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _AlbedoMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _AlbedoMsgPayload.TimeVector_front(self)

    def back(self):
        return _AlbedoMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _AlbedoMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _AlbedoMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _AlbedoMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _AlbedoMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _AlbedoMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _AlbedoMsgPayload.delete_TimeVector

# Register TimeVector in _AlbedoMsgPayload:
_AlbedoMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AlbedoMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AlbedoMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _AlbedoMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _AlbedoMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _AlbedoMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AlbedoMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AlbedoMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AlbedoMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AlbedoMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AlbedoMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _AlbedoMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _AlbedoMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _AlbedoMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _AlbedoMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _AlbedoMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _AlbedoMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _AlbedoMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _AlbedoMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _AlbedoMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _AlbedoMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _AlbedoMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _AlbedoMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _AlbedoMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _AlbedoMsgPayload.DoubleVector_swiginit(self, _AlbedoMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _AlbedoMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _AlbedoMsgPayload.DoubleVector_front(self)

    def back(self):
        return _AlbedoMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _AlbedoMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _AlbedoMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _AlbedoMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _AlbedoMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _AlbedoMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _AlbedoMsgPayload.delete_DoubleVector

# Register DoubleVector in _AlbedoMsgPayload:
_AlbedoMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AlbedoMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AlbedoMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _AlbedoMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _AlbedoMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _AlbedoMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AlbedoMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AlbedoMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AlbedoMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AlbedoMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AlbedoMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _AlbedoMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _AlbedoMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _AlbedoMsgPayload.StringVector_empty(self)

    def size(self):
        return _AlbedoMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _AlbedoMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _AlbedoMsgPayload.StringVector_begin(self)

    def end(self):
        return _AlbedoMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _AlbedoMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _AlbedoMsgPayload.StringVector_rend(self)

    def clear(self):
        return _AlbedoMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _AlbedoMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _AlbedoMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _AlbedoMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _AlbedoMsgPayload.StringVector_swiginit(self, _AlbedoMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _AlbedoMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _AlbedoMsgPayload.StringVector_front(self)

    def back(self):
        return _AlbedoMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _AlbedoMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _AlbedoMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _AlbedoMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _AlbedoMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _AlbedoMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _AlbedoMsgPayload.delete_StringVector

# Register StringVector in _AlbedoMsgPayload:
_AlbedoMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _AlbedoMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _AlbedoMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _AlbedoMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _AlbedoMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _AlbedoMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _AlbedoMsgPayload.NANO2SEC
SEC2NANO = _AlbedoMsgPayload.SEC2NANO
SEC2HOUR = _AlbedoMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _AlbedoMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _AlbedoMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _AlbedoMsgPayload.secToNano(seconds)
BOOL_FALSE = _AlbedoMsgPayload.BOOL_FALSE
BOOL_TRUE = _AlbedoMsgPayload.BOOL_TRUE
AVAILABLE = _AlbedoMsgPayload.AVAILABLE
UNAVAILABLE = _AlbedoMsgPayload.UNAVAILABLE
BalancedWheels = _AlbedoMsgPayload.BalancedWheels
JitterSimple = _AlbedoMsgPayload.JitterSimple
JitterFullyCoupled = _AlbedoMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AlbedoMsgPayload.SysModel_swiginit(self, _AlbedoMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _AlbedoMsgPayload.delete_SysModel

    def SelfInit(self):
        return _AlbedoMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _AlbedoMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _AlbedoMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _AlbedoMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_AlbedoMsgPayload.SysModel_ModelTag_get, _AlbedoMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_AlbedoMsgPayload.SysModel_CallCounts_get, _AlbedoMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_AlbedoMsgPayload.SysModel_RNGSeed_get, _AlbedoMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_AlbedoMsgPayload.SysModel_moduleID_get, _AlbedoMsgPayload.SysModel_moduleID_set)

# Register SysModel in _AlbedoMsgPayload:
_AlbedoMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _AlbedoMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _AlbedoMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _AlbedoMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _AlbedoMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _AlbedoMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _AlbedoMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _AlbedoMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _AlbedoMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _AlbedoMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _AlbedoMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _AlbedoMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _AlbedoMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class AlbedoMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    albedoAtInstrumentMax = property(_AlbedoMsgPayload.AlbedoMsgPayload_albedoAtInstrumentMax_get, _AlbedoMsgPayload.AlbedoMsgPayload_albedoAtInstrumentMax_set)
    AfluxAtInstrumentMax = property(_AlbedoMsgPayload.AlbedoMsgPayload_AfluxAtInstrumentMax_get, _AlbedoMsgPayload.AlbedoMsgPayload_AfluxAtInstrumentMax_set)
    albedoAtInstrument = property(_AlbedoMsgPayload.AlbedoMsgPayload_albedoAtInstrument_get, _AlbedoMsgPayload.AlbedoMsgPayload_albedoAtInstrument_set)
    AfluxAtInstrument = property(_AlbedoMsgPayload.AlbedoMsgPayload_AfluxAtInstrument_get, _AlbedoMsgPayload.AlbedoMsgPayload_AfluxAtInstrument_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _AlbedoMsgPayload.AlbedoMsgPayload_swiginit(self, _AlbedoMsgPayload.new_AlbedoMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _AlbedoMsgPayload.delete_AlbedoMsgPayload

# Register AlbedoMsgPayload in _AlbedoMsgPayload:
_AlbedoMsgPayload.AlbedoMsgPayload_swigregister(AlbedoMsgPayload)

def _pprint_AlbedoMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[AlbedoMsgPayload.__repr__] = _pprint_AlbedoMsgPayload

class AlbedoMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_AlbedoMsgPayload.AlbedoMsgReader_bskLogger_get, _AlbedoMsgPayload.AlbedoMsgReader_bskLogger_set)
    zeroMsgPayload = property(_AlbedoMsgPayload.AlbedoMsgReader_zeroMsgPayload_get, _AlbedoMsgPayload.AlbedoMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _AlbedoMsgPayload.AlbedoMsgReader_swiginit(self, _AlbedoMsgPayload.new_AlbedoMsgReader(*args))

    def __call__(self):
        return _AlbedoMsgPayload.AlbedoMsgReader___call__(self)

    def isLinked(self):
        return _AlbedoMsgPayload.AlbedoMsgReader_isLinked(self)

    def isWritten(self):
        return _AlbedoMsgPayload.AlbedoMsgReader_isWritten(self)

    def timeWritten(self):
        return _AlbedoMsgPayload.AlbedoMsgReader_timeWritten(self)

    def moduleID(self):
        return _AlbedoMsgPayload.AlbedoMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _AlbedoMsgPayload.AlbedoMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _AlbedoMsgPayload.AlbedoMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _AlbedoMsgPayload.AlbedoMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _AlbedoMsgPayload.AlbedoMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _AlbedoMsgPayload.AlbedoMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _AlbedoMsgPayload.AlbedoMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _AlbedoMsgPayload.AlbedoMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _AlbedoMsgPayload.AlbedoMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _AlbedoMsgPayload.AlbedoMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _AlbedoMsgPayload.AlbedoMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == AlbedoMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.AlbedoMsgPayload import AlbedoMsg_C
            if type(source) == AlbedoMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<AlbedoMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == AlbedoMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.AlbedoMsgPayload import AlbedoMsg_C
        except ImportError:
            return 0

        if type(source) == AlbedoMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _AlbedoMsgPayload.delete_AlbedoMsgReader

# Register AlbedoMsgReader in _AlbedoMsgPayload:
_AlbedoMsgPayload.AlbedoMsgReader_swigregister(AlbedoMsgReader)
class AlbedoMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AlbedoMsgPayload.AlbedoMsgWriter_swiginit(self, _AlbedoMsgPayload.new_AlbedoMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _AlbedoMsgPayload.AlbedoMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _AlbedoMsgPayload.delete_AlbedoMsgWriter

# Register AlbedoMsgWriter in _AlbedoMsgPayload:
_AlbedoMsgPayload.AlbedoMsgWriter_swigregister(AlbedoMsgWriter)
class AlbedoMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_AlbedoMsgPayload.AlbedoMsg_write_get, _AlbedoMsgPayload.AlbedoMsg_write_set)

    def addSubscriber(self):
        return _AlbedoMsgPayload.AlbedoMsg_addSubscriber(self)

    def addAuthor(self):
        return _AlbedoMsgPayload.AlbedoMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _AlbedoMsgPayload.AlbedoMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _AlbedoMsgPayload.AlbedoMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _AlbedoMsgPayload.AlbedoMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_AlbedoMsgPayload.AlbedoMsg_zeroMsgPayload_get, _AlbedoMsgPayload.AlbedoMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _AlbedoMsgPayload.AlbedoMsg_isLinked(self)

    def getPayloadSize(self):
        return _AlbedoMsgPayload.AlbedoMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _AlbedoMsgPayload.AlbedoMsg_swiginit(self, _AlbedoMsgPayload.new_AlbedoMsg())
    __swig_destroy__ = _AlbedoMsgPayload.delete_AlbedoMsg

# Register AlbedoMsg in _AlbedoMsgPayload:
_AlbedoMsgPayload.AlbedoMsg_swigregister(AlbedoMsg)
class AlbedoMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AlbedoMsgPayload.AlbedoMsgRecorder_swiginit(self, _AlbedoMsgPayload.new_AlbedoMsgRecorder(*args))
    __swig_destroy__ = _AlbedoMsgPayload.delete_AlbedoMsgRecorder

    def SelfInit(self):
        return _AlbedoMsgPayload.AlbedoMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _AlbedoMsgPayload.AlbedoMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _AlbedoMsgPayload.AlbedoMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _AlbedoMsgPayload.AlbedoMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _AlbedoMsgPayload.AlbedoMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _AlbedoMsgPayload.AlbedoMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _AlbedoMsgPayload.AlbedoMsgRecorder___record_vector(self)

    def size(self):
        return _AlbedoMsgPayload.AlbedoMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _AlbedoMsgPayload.AlbedoMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _AlbedoMsgPayload.AlbedoMsgRecorder_clear(self)
    bskLogger = property(_AlbedoMsgPayload.AlbedoMsgRecorder_bskLogger_get, _AlbedoMsgPayload.AlbedoMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _AlbedoMsgPayload.AlbedoMsgRecorder_updateTimeInterval(self, timeDiff)

    def _albedoAtInstrumentMax_array(self):
        return _AlbedoMsgPayload.AlbedoMsgRecorder__albedoAtInstrumentMax_array(self)

    @property
    def albedoAtInstrumentMax(self):
        return self._albedoAtInstrumentMax_array()


    def _AfluxAtInstrumentMax_array(self):
        return _AlbedoMsgPayload.AlbedoMsgRecorder__AfluxAtInstrumentMax_array(self)

    @property
    def AfluxAtInstrumentMax(self):
        return self._AfluxAtInstrumentMax_array()


    def _albedoAtInstrument_array(self):
        return _AlbedoMsgPayload.AlbedoMsgRecorder__albedoAtInstrument_array(self)

    @property
    def albedoAtInstrument(self):
        return self._albedoAtInstrument_array()


    def _AfluxAtInstrument_array(self):
        return _AlbedoMsgPayload.AlbedoMsgRecorder__AfluxAtInstrument_array(self)

    @property
    def AfluxAtInstrument(self):
        return self._AfluxAtInstrument_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register AlbedoMsgRecorder in _AlbedoMsgPayload:
_AlbedoMsgPayload.AlbedoMsgRecorder_swigregister(AlbedoMsgRecorder)
class AlbedoMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AlbedoMsgPayload.AlbedoMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AlbedoMsgPayload.AlbedoMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _AlbedoMsgPayload.AlbedoMsgPayloadVector___bool__(self)

    def __len__(self):
        return _AlbedoMsgPayload.AlbedoMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _AlbedoMsgPayload.AlbedoMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AlbedoMsgPayload.AlbedoMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AlbedoMsgPayload.AlbedoMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AlbedoMsgPayload.AlbedoMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AlbedoMsgPayload.AlbedoMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AlbedoMsgPayload.AlbedoMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _AlbedoMsgPayload.AlbedoMsgPayloadVector_pop(self)

    def append(self, x):
        return _AlbedoMsgPayload.AlbedoMsgPayloadVector_append(self, x)

    def empty(self):
        return _AlbedoMsgPayload.AlbedoMsgPayloadVector_empty(self)

    def size(self):
        return _AlbedoMsgPayload.AlbedoMsgPayloadVector_size(self)

    def swap(self, v):
        return _AlbedoMsgPayload.AlbedoMsgPayloadVector_swap(self, v)

    def begin(self):
        return _AlbedoMsgPayload.AlbedoMsgPayloadVector_begin(self)

    def end(self):
        return _AlbedoMsgPayload.AlbedoMsgPayloadVector_end(self)

    def rbegin(self):
        return _AlbedoMsgPayload.AlbedoMsgPayloadVector_rbegin(self)

    def rend(self):
        return _AlbedoMsgPayload.AlbedoMsgPayloadVector_rend(self)

    def clear(self):
        return _AlbedoMsgPayload.AlbedoMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _AlbedoMsgPayload.AlbedoMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _AlbedoMsgPayload.AlbedoMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _AlbedoMsgPayload.AlbedoMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _AlbedoMsgPayload.AlbedoMsgPayloadVector_swiginit(self, _AlbedoMsgPayload.new_AlbedoMsgPayloadVector(*args))

    def push_back(self, x):
        return _AlbedoMsgPayload.AlbedoMsgPayloadVector_push_back(self, x)

    def front(self):
        return _AlbedoMsgPayload.AlbedoMsgPayloadVector_front(self)

    def back(self):
        return _AlbedoMsgPayload.AlbedoMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _AlbedoMsgPayload.AlbedoMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _AlbedoMsgPayload.AlbedoMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _AlbedoMsgPayload.AlbedoMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _AlbedoMsgPayload.AlbedoMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _AlbedoMsgPayload.AlbedoMsgPayloadVector_capacity(self)

    def get_all(self):
        return _AlbedoMsgPayload.AlbedoMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _AlbedoMsgPayload.delete_AlbedoMsgPayloadVector

# Register AlbedoMsgPayloadVector in _AlbedoMsgPayload:
_AlbedoMsgPayload.AlbedoMsgPayloadVector_swigregister(AlbedoMsgPayloadVector)
class AlbedoMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsVector_empty(self)

    def size(self):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsVector_begin(self)

    def end(self):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsVector_rend(self)

    def clear(self):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _AlbedoMsgPayload.AlbedoMsgOutMsgsVector_swiginit(self, _AlbedoMsgPayload.new_AlbedoMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsVector_front(self)

    def back(self):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _AlbedoMsgPayload.delete_AlbedoMsgOutMsgsVector

# Register AlbedoMsgOutMsgsVector in _AlbedoMsgPayload:
_AlbedoMsgPayload.AlbedoMsgOutMsgsVector_swigregister(AlbedoMsgOutMsgsVector)
class AlbedoMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _AlbedoMsgPayload.AlbedoMsgOutMsgsPtrVector_swiginit(self, _AlbedoMsgPayload.new_AlbedoMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _AlbedoMsgPayload.AlbedoMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _AlbedoMsgPayload.delete_AlbedoMsgOutMsgsPtrVector

# Register AlbedoMsgOutMsgsPtrVector in _AlbedoMsgPayload:
_AlbedoMsgPayload.AlbedoMsgOutMsgsPtrVector_swigregister(AlbedoMsgOutMsgsPtrVector)
class AlbedoMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AlbedoMsgPayload.AlbedoMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AlbedoMsgPayload.AlbedoMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _AlbedoMsgPayload.AlbedoMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _AlbedoMsgPayload.AlbedoMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _AlbedoMsgPayload.AlbedoMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AlbedoMsgPayload.AlbedoMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AlbedoMsgPayload.AlbedoMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AlbedoMsgPayload.AlbedoMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AlbedoMsgPayload.AlbedoMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AlbedoMsgPayload.AlbedoMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _AlbedoMsgPayload.AlbedoMsgInMsgsVector_pop(self)

    def append(self, x):
        return _AlbedoMsgPayload.AlbedoMsgInMsgsVector_append(self, x)

    def empty(self):
        return _AlbedoMsgPayload.AlbedoMsgInMsgsVector_empty(self)

    def size(self):
        return _AlbedoMsgPayload.AlbedoMsgInMsgsVector_size(self)

    def swap(self, v):
        return _AlbedoMsgPayload.AlbedoMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _AlbedoMsgPayload.AlbedoMsgInMsgsVector_begin(self)

    def end(self):
        return _AlbedoMsgPayload.AlbedoMsgInMsgsVector_end(self)

    def rbegin(self):
        return _AlbedoMsgPayload.AlbedoMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _AlbedoMsgPayload.AlbedoMsgInMsgsVector_rend(self)

    def clear(self):
        return _AlbedoMsgPayload.AlbedoMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _AlbedoMsgPayload.AlbedoMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _AlbedoMsgPayload.AlbedoMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _AlbedoMsgPayload.AlbedoMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _AlbedoMsgPayload.AlbedoMsgInMsgsVector_swiginit(self, _AlbedoMsgPayload.new_AlbedoMsgInMsgsVector(*args))

    def push_back(self, x):
        return _AlbedoMsgPayload.AlbedoMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _AlbedoMsgPayload.AlbedoMsgInMsgsVector_front(self)

    def back(self):
        return _AlbedoMsgPayload.AlbedoMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _AlbedoMsgPayload.AlbedoMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _AlbedoMsgPayload.AlbedoMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _AlbedoMsgPayload.AlbedoMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _AlbedoMsgPayload.AlbedoMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _AlbedoMsgPayload.AlbedoMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _AlbedoMsgPayload.delete_AlbedoMsgInMsgsVector

# Register AlbedoMsgInMsgsVector in _AlbedoMsgPayload:
_AlbedoMsgPayload.AlbedoMsgInMsgsVector_swigregister(AlbedoMsgInMsgsVector)
class AlbedoMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_AlbedoMsgPayload.AlbedoMsg_C_header_get, _AlbedoMsgPayload.AlbedoMsg_C_header_set)
    payload = property(_AlbedoMsgPayload.AlbedoMsg_C_payload_get, _AlbedoMsgPayload.AlbedoMsg_C_payload_set)
    payloadPointer = property(_AlbedoMsgPayload.AlbedoMsg_C_payloadPointer_get, _AlbedoMsgPayload.AlbedoMsg_C_payloadPointer_set)
    headerPointer = property(_AlbedoMsgPayload.AlbedoMsg_C_headerPointer_get, _AlbedoMsgPayload.AlbedoMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _AlbedoMsgPayload.AlbedoMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import AlbedoMsg
        if type(source) == type(self):
            AlbedoMsg_C_subscribe(self, source)
        elif type(source) == AlbedoMsg:
            AlbedoMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            AlbedoMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe AlbedoMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        AlbedoMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import AlbedoMsg
        if type(source) == type(self):
            return (AlbedoMsg_C_isSubscribedTo(self, source))
        elif type(source) == AlbedoMsg:
            return (AlbedoMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (AlbedoMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        AlbedoMsg_C_addAuthor(self, self)
        if data:
            AlbedoMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        AlbedoMsg_C_addAuthor(self, self)
        AlbedoMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return AlbedoMsg_C_read(self)


    def __init__(self):
        _AlbedoMsgPayload.AlbedoMsg_C_swiginit(self, _AlbedoMsgPayload.new_AlbedoMsg_C())
    __swig_destroy__ = _AlbedoMsgPayload.delete_AlbedoMsg_C

# Register AlbedoMsg_C in _AlbedoMsgPayload:
_AlbedoMsgPayload.AlbedoMsg_C_swigregister(AlbedoMsg_C)

def AlbedoMsg_cpp_subscribe(subscriber, source):
    return _AlbedoMsgPayload.AlbedoMsg_cpp_subscribe(subscriber, source)

def AlbedoMsg_C_subscribe(subscriber, source):
    return _AlbedoMsgPayload.AlbedoMsg_C_subscribe(subscriber, source)

def AlbedoMsg_addr_subscribe(subscriber, sourceAddr):
    return _AlbedoMsgPayload.AlbedoMsg_addr_subscribe(subscriber, sourceAddr)

def AlbedoMsg_unsubscribe(subscriber):
    return _AlbedoMsgPayload.AlbedoMsg_unsubscribe(subscriber)

def AlbedoMsg_C_isSubscribedTo(subscriber, source):
    return _AlbedoMsgPayload.AlbedoMsg_C_isSubscribedTo(subscriber, source)

def AlbedoMsg_cpp_isSubscribedTo(subscriber, source):
    return _AlbedoMsgPayload.AlbedoMsg_cpp_isSubscribedTo(subscriber, source)

def AlbedoMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _AlbedoMsgPayload.AlbedoMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def AlbedoMsg_C_addAuthor(coowner, data):
    return _AlbedoMsgPayload.AlbedoMsg_C_addAuthor(coowner, data)

def AlbedoMsg_C_init(owner):
    return _AlbedoMsgPayload.AlbedoMsg_C_init(owner)

def AlbedoMsg_C_isLinked(data):
    return _AlbedoMsgPayload.AlbedoMsg_C_isLinked(data)

def AlbedoMsg_C_isWritten(data):
    return _AlbedoMsgPayload.AlbedoMsg_C_isWritten(data)

def AlbedoMsg_C_timeWritten(data):
    return _AlbedoMsgPayload.AlbedoMsg_C_timeWritten(data)

def AlbedoMsg_C_moduleID(data):
    return _AlbedoMsgPayload.AlbedoMsg_C_moduleID(data)

def AlbedoMsg_C_write(data, destination, moduleID, callTime):
    return _AlbedoMsgPayload.AlbedoMsg_C_write(data, destination, moduleID, callTime)

def AlbedoMsg_C_read(source):
    return _AlbedoMsgPayload.AlbedoMsg_C_read(source)

def AlbedoMsg_C_zeroMsgPayload():
    return _AlbedoMsgPayload.AlbedoMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_AlbedoMsgPayload.MsgHeader_isLinked_get, _AlbedoMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_AlbedoMsgPayload.MsgHeader_isWritten_get, _AlbedoMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_AlbedoMsgPayload.MsgHeader_timeWritten_get, _AlbedoMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_AlbedoMsgPayload.MsgHeader_moduleID_get, _AlbedoMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _AlbedoMsgPayload.MsgHeader_swiginit(self, _AlbedoMsgPayload.new_MsgHeader())
    __swig_destroy__ = _AlbedoMsgPayload.delete_MsgHeader

# Register MsgHeader in _AlbedoMsgPayload:
_AlbedoMsgPayload.MsgHeader_swigregister(MsgHeader)

