# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _InertialFilterMsgPayload
else:
    import _InertialFilterMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _InertialFilterMsgPayload.delete_SwigPyIterator

    def value(self):
        return _InertialFilterMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _InertialFilterMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _InertialFilterMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _InertialFilterMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _InertialFilterMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _InertialFilterMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _InertialFilterMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _InertialFilterMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _InertialFilterMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _InertialFilterMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _InertialFilterMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _InertialFilterMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _InertialFilterMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _InertialFilterMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _InertialFilterMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _InertialFilterMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _InertialFilterMsgPayload:
_InertialFilterMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _InertialFilterMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _InertialFilterMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _InertialFilterMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _InertialFilterMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _InertialFilterMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _InertialFilterMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _InertialFilterMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _InertialFilterMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _InertialFilterMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _InertialFilterMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _InertialFilterMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _InertialFilterMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _InertialFilterMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _InertialFilterMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _InertialFilterMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _InertialFilterMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _InertialFilterMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _InertialFilterMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _InertialFilterMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _InertialFilterMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _InertialFilterMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _InertialFilterMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _InertialFilterMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _InertialFilterMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _InertialFilterMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _InertialFilterMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _InertialFilterMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _InertialFilterMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _InertialFilterMsgPayload.TimeVector_empty(self)

    def size(self):
        return _InertialFilterMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _InertialFilterMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _InertialFilterMsgPayload.TimeVector_begin(self)

    def end(self):
        return _InertialFilterMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _InertialFilterMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _InertialFilterMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _InertialFilterMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _InertialFilterMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _InertialFilterMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _InertialFilterMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _InertialFilterMsgPayload.TimeVector_swiginit(self, _InertialFilterMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _InertialFilterMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _InertialFilterMsgPayload.TimeVector_front(self)

    def back(self):
        return _InertialFilterMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _InertialFilterMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _InertialFilterMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _InertialFilterMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _InertialFilterMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _InertialFilterMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _InertialFilterMsgPayload.delete_TimeVector

# Register TimeVector in _InertialFilterMsgPayload:
_InertialFilterMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _InertialFilterMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _InertialFilterMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _InertialFilterMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _InertialFilterMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _InertialFilterMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _InertialFilterMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _InertialFilterMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _InertialFilterMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _InertialFilterMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _InertialFilterMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _InertialFilterMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _InertialFilterMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _InertialFilterMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _InertialFilterMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _InertialFilterMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _InertialFilterMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _InertialFilterMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _InertialFilterMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _InertialFilterMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _InertialFilterMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _InertialFilterMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _InertialFilterMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _InertialFilterMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _InertialFilterMsgPayload.DoubleVector_swiginit(self, _InertialFilterMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _InertialFilterMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _InertialFilterMsgPayload.DoubleVector_front(self)

    def back(self):
        return _InertialFilterMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _InertialFilterMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _InertialFilterMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _InertialFilterMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _InertialFilterMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _InertialFilterMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _InertialFilterMsgPayload.delete_DoubleVector

# Register DoubleVector in _InertialFilterMsgPayload:
_InertialFilterMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _InertialFilterMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _InertialFilterMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _InertialFilterMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _InertialFilterMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _InertialFilterMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _InertialFilterMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _InertialFilterMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _InertialFilterMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _InertialFilterMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _InertialFilterMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _InertialFilterMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _InertialFilterMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _InertialFilterMsgPayload.StringVector_empty(self)

    def size(self):
        return _InertialFilterMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _InertialFilterMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _InertialFilterMsgPayload.StringVector_begin(self)

    def end(self):
        return _InertialFilterMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _InertialFilterMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _InertialFilterMsgPayload.StringVector_rend(self)

    def clear(self):
        return _InertialFilterMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _InertialFilterMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _InertialFilterMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _InertialFilterMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _InertialFilterMsgPayload.StringVector_swiginit(self, _InertialFilterMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _InertialFilterMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _InertialFilterMsgPayload.StringVector_front(self)

    def back(self):
        return _InertialFilterMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _InertialFilterMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _InertialFilterMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _InertialFilterMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _InertialFilterMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _InertialFilterMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _InertialFilterMsgPayload.delete_StringVector

# Register StringVector in _InertialFilterMsgPayload:
_InertialFilterMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _InertialFilterMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _InertialFilterMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _InertialFilterMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _InertialFilterMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _InertialFilterMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _InertialFilterMsgPayload.NANO2SEC
SEC2NANO = _InertialFilterMsgPayload.SEC2NANO
SEC2HOUR = _InertialFilterMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _InertialFilterMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _InertialFilterMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _InertialFilterMsgPayload.secToNano(seconds)
BOOL_FALSE = _InertialFilterMsgPayload.BOOL_FALSE
BOOL_TRUE = _InertialFilterMsgPayload.BOOL_TRUE
AVAILABLE = _InertialFilterMsgPayload.AVAILABLE
UNAVAILABLE = _InertialFilterMsgPayload.UNAVAILABLE
BalancedWheels = _InertialFilterMsgPayload.BalancedWheels
JitterSimple = _InertialFilterMsgPayload.JitterSimple
JitterFullyCoupled = _InertialFilterMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _InertialFilterMsgPayload.SysModel_swiginit(self, _InertialFilterMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _InertialFilterMsgPayload.delete_SysModel

    def SelfInit(self):
        return _InertialFilterMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _InertialFilterMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _InertialFilterMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _InertialFilterMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_InertialFilterMsgPayload.SysModel_ModelTag_get, _InertialFilterMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_InertialFilterMsgPayload.SysModel_CallCounts_get, _InertialFilterMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_InertialFilterMsgPayload.SysModel_RNGSeed_get, _InertialFilterMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_InertialFilterMsgPayload.SysModel_moduleID_get, _InertialFilterMsgPayload.SysModel_moduleID_set)

# Register SysModel in _InertialFilterMsgPayload:
_InertialFilterMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _InertialFilterMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _InertialFilterMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _InertialFilterMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _InertialFilterMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _InertialFilterMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _InertialFilterMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _InertialFilterMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _InertialFilterMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _InertialFilterMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _InertialFilterMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _InertialFilterMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _InertialFilterMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

AKF_N_STATES = _InertialFilterMsgPayload.AKF_N_STATES
MAX_N_ATT_STATES = _InertialFilterMsgPayload.MAX_N_ATT_STATES
class InertialFilterMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timeTag = property(_InertialFilterMsgPayload.InertialFilterMsgPayload_timeTag_get, _InertialFilterMsgPayload.InertialFilterMsgPayload_timeTag_set)
    covar = property(_InertialFilterMsgPayload.InertialFilterMsgPayload_covar_get, _InertialFilterMsgPayload.InertialFilterMsgPayload_covar_set)
    state = property(_InertialFilterMsgPayload.InertialFilterMsgPayload_state_get, _InertialFilterMsgPayload.InertialFilterMsgPayload_state_set)
    numObs = property(_InertialFilterMsgPayload.InertialFilterMsgPayload_numObs_get, _InertialFilterMsgPayload.InertialFilterMsgPayload_numObs_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _InertialFilterMsgPayload.InertialFilterMsgPayload_swiginit(self, _InertialFilterMsgPayload.new_InertialFilterMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _InertialFilterMsgPayload.delete_InertialFilterMsgPayload

# Register InertialFilterMsgPayload in _InertialFilterMsgPayload:
_InertialFilterMsgPayload.InertialFilterMsgPayload_swigregister(InertialFilterMsgPayload)

def _pprint_InertialFilterMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[InertialFilterMsgPayload.__repr__] = _pprint_InertialFilterMsgPayload

class InertialFilterMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_InertialFilterMsgPayload.InertialFilterMsgReader_bskLogger_get, _InertialFilterMsgPayload.InertialFilterMsgReader_bskLogger_set)
    zeroMsgPayload = property(_InertialFilterMsgPayload.InertialFilterMsgReader_zeroMsgPayload_get, _InertialFilterMsgPayload.InertialFilterMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _InertialFilterMsgPayload.InertialFilterMsgReader_swiginit(self, _InertialFilterMsgPayload.new_InertialFilterMsgReader(*args))

    def __call__(self):
        return _InertialFilterMsgPayload.InertialFilterMsgReader___call__(self)

    def isLinked(self):
        return _InertialFilterMsgPayload.InertialFilterMsgReader_isLinked(self)

    def isWritten(self):
        return _InertialFilterMsgPayload.InertialFilterMsgReader_isWritten(self)

    def timeWritten(self):
        return _InertialFilterMsgPayload.InertialFilterMsgReader_timeWritten(self)

    def moduleID(self):
        return _InertialFilterMsgPayload.InertialFilterMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _InertialFilterMsgPayload.InertialFilterMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _InertialFilterMsgPayload.InertialFilterMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _InertialFilterMsgPayload.InertialFilterMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _InertialFilterMsgPayload.InertialFilterMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _InertialFilterMsgPayload.InertialFilterMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _InertialFilterMsgPayload.InertialFilterMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _InertialFilterMsgPayload.InertialFilterMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _InertialFilterMsgPayload.InertialFilterMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _InertialFilterMsgPayload.InertialFilterMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _InertialFilterMsgPayload.InertialFilterMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == InertialFilterMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.InertialFilterMsgPayload import InertialFilterMsg_C
            if type(source) == InertialFilterMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<InertialFilterMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == InertialFilterMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.InertialFilterMsgPayload import InertialFilterMsg_C
        except ImportError:
            return 0

        if type(source) == InertialFilterMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _InertialFilterMsgPayload.delete_InertialFilterMsgReader

# Register InertialFilterMsgReader in _InertialFilterMsgPayload:
_InertialFilterMsgPayload.InertialFilterMsgReader_swigregister(InertialFilterMsgReader)
class InertialFilterMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _InertialFilterMsgPayload.InertialFilterMsgWriter_swiginit(self, _InertialFilterMsgPayload.new_InertialFilterMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _InertialFilterMsgPayload.InertialFilterMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _InertialFilterMsgPayload.delete_InertialFilterMsgWriter

# Register InertialFilterMsgWriter in _InertialFilterMsgPayload:
_InertialFilterMsgPayload.InertialFilterMsgWriter_swigregister(InertialFilterMsgWriter)
class InertialFilterMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_InertialFilterMsgPayload.InertialFilterMsg_write_get, _InertialFilterMsgPayload.InertialFilterMsg_write_set)

    def addSubscriber(self):
        return _InertialFilterMsgPayload.InertialFilterMsg_addSubscriber(self)

    def addAuthor(self):
        return _InertialFilterMsgPayload.InertialFilterMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _InertialFilterMsgPayload.InertialFilterMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _InertialFilterMsgPayload.InertialFilterMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _InertialFilterMsgPayload.InertialFilterMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_InertialFilterMsgPayload.InertialFilterMsg_zeroMsgPayload_get, _InertialFilterMsgPayload.InertialFilterMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _InertialFilterMsgPayload.InertialFilterMsg_isLinked(self)

    def getPayloadSize(self):
        return _InertialFilterMsgPayload.InertialFilterMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _InertialFilterMsgPayload.InertialFilterMsg_swiginit(self, _InertialFilterMsgPayload.new_InertialFilterMsg())
    __swig_destroy__ = _InertialFilterMsgPayload.delete_InertialFilterMsg

# Register InertialFilterMsg in _InertialFilterMsgPayload:
_InertialFilterMsgPayload.InertialFilterMsg_swigregister(InertialFilterMsg)
class InertialFilterMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _InertialFilterMsgPayload.InertialFilterMsgRecorder_swiginit(self, _InertialFilterMsgPayload.new_InertialFilterMsgRecorder(*args))
    __swig_destroy__ = _InertialFilterMsgPayload.delete_InertialFilterMsgRecorder

    def SelfInit(self):
        return _InertialFilterMsgPayload.InertialFilterMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _InertialFilterMsgPayload.InertialFilterMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _InertialFilterMsgPayload.InertialFilterMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _InertialFilterMsgPayload.InertialFilterMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _InertialFilterMsgPayload.InertialFilterMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _InertialFilterMsgPayload.InertialFilterMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _InertialFilterMsgPayload.InertialFilterMsgRecorder___record_vector(self)

    def size(self):
        return _InertialFilterMsgPayload.InertialFilterMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _InertialFilterMsgPayload.InertialFilterMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _InertialFilterMsgPayload.InertialFilterMsgRecorder_clear(self)
    bskLogger = property(_InertialFilterMsgPayload.InertialFilterMsgRecorder_bskLogger_get, _InertialFilterMsgPayload.InertialFilterMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _InertialFilterMsgPayload.InertialFilterMsgRecorder_updateTimeInterval(self, timeDiff)

    def _timeTag_array(self):
        return _InertialFilterMsgPayload.InertialFilterMsgRecorder__timeTag_array(self)

    @property
    def timeTag(self):
        return self._timeTag_array()


    def _covar_array(self):
        return _InertialFilterMsgPayload.InertialFilterMsgRecorder__covar_array(self)

    @property
    def covar(self):
        return self._covar_array()


    def _state_array(self):
        return _InertialFilterMsgPayload.InertialFilterMsgRecorder__state_array(self)

    @property
    def state(self):
        return self._state_array()


    def _numObs_array(self):
        return _InertialFilterMsgPayload.InertialFilterMsgRecorder__numObs_array(self)

    @property
    def numObs(self):
        return self._numObs_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register InertialFilterMsgRecorder in _InertialFilterMsgPayload:
_InertialFilterMsgPayload.InertialFilterMsgRecorder_swigregister(InertialFilterMsgRecorder)
class InertialFilterMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _InertialFilterMsgPayload.InertialFilterMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _InertialFilterMsgPayload.InertialFilterMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _InertialFilterMsgPayload.InertialFilterMsgPayloadVector___bool__(self)

    def __len__(self):
        return _InertialFilterMsgPayload.InertialFilterMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _InertialFilterMsgPayload.InertialFilterMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _InertialFilterMsgPayload.InertialFilterMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _InertialFilterMsgPayload.InertialFilterMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _InertialFilterMsgPayload.InertialFilterMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _InertialFilterMsgPayload.InertialFilterMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _InertialFilterMsgPayload.InertialFilterMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _InertialFilterMsgPayload.InertialFilterMsgPayloadVector_pop(self)

    def append(self, x):
        return _InertialFilterMsgPayload.InertialFilterMsgPayloadVector_append(self, x)

    def empty(self):
        return _InertialFilterMsgPayload.InertialFilterMsgPayloadVector_empty(self)

    def size(self):
        return _InertialFilterMsgPayload.InertialFilterMsgPayloadVector_size(self)

    def swap(self, v):
        return _InertialFilterMsgPayload.InertialFilterMsgPayloadVector_swap(self, v)

    def begin(self):
        return _InertialFilterMsgPayload.InertialFilterMsgPayloadVector_begin(self)

    def end(self):
        return _InertialFilterMsgPayload.InertialFilterMsgPayloadVector_end(self)

    def rbegin(self):
        return _InertialFilterMsgPayload.InertialFilterMsgPayloadVector_rbegin(self)

    def rend(self):
        return _InertialFilterMsgPayload.InertialFilterMsgPayloadVector_rend(self)

    def clear(self):
        return _InertialFilterMsgPayload.InertialFilterMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _InertialFilterMsgPayload.InertialFilterMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _InertialFilterMsgPayload.InertialFilterMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _InertialFilterMsgPayload.InertialFilterMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _InertialFilterMsgPayload.InertialFilterMsgPayloadVector_swiginit(self, _InertialFilterMsgPayload.new_InertialFilterMsgPayloadVector(*args))

    def push_back(self, x):
        return _InertialFilterMsgPayload.InertialFilterMsgPayloadVector_push_back(self, x)

    def front(self):
        return _InertialFilterMsgPayload.InertialFilterMsgPayloadVector_front(self)

    def back(self):
        return _InertialFilterMsgPayload.InertialFilterMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _InertialFilterMsgPayload.InertialFilterMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _InertialFilterMsgPayload.InertialFilterMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _InertialFilterMsgPayload.InertialFilterMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _InertialFilterMsgPayload.InertialFilterMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _InertialFilterMsgPayload.InertialFilterMsgPayloadVector_capacity(self)

    def get_all(self):
        return _InertialFilterMsgPayload.InertialFilterMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _InertialFilterMsgPayload.delete_InertialFilterMsgPayloadVector

# Register InertialFilterMsgPayloadVector in _InertialFilterMsgPayload:
_InertialFilterMsgPayload.InertialFilterMsgPayloadVector_swigregister(InertialFilterMsgPayloadVector)
class InertialFilterMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsVector_empty(self)

    def size(self):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsVector_begin(self)

    def end(self):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsVector_rend(self)

    def clear(self):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _InertialFilterMsgPayload.InertialFilterMsgOutMsgsVector_swiginit(self, _InertialFilterMsgPayload.new_InertialFilterMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsVector_front(self)

    def back(self):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _InertialFilterMsgPayload.delete_InertialFilterMsgOutMsgsVector

# Register InertialFilterMsgOutMsgsVector in _InertialFilterMsgPayload:
_InertialFilterMsgPayload.InertialFilterMsgOutMsgsVector_swigregister(InertialFilterMsgOutMsgsVector)
class InertialFilterMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _InertialFilterMsgPayload.InertialFilterMsgOutMsgsPtrVector_swiginit(self, _InertialFilterMsgPayload.new_InertialFilterMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _InertialFilterMsgPayload.InertialFilterMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _InertialFilterMsgPayload.delete_InertialFilterMsgOutMsgsPtrVector

# Register InertialFilterMsgOutMsgsPtrVector in _InertialFilterMsgPayload:
_InertialFilterMsgPayload.InertialFilterMsgOutMsgsPtrVector_swigregister(InertialFilterMsgOutMsgsPtrVector)
class InertialFilterMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _InertialFilterMsgPayload.InertialFilterMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _InertialFilterMsgPayload.InertialFilterMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _InertialFilterMsgPayload.InertialFilterMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _InertialFilterMsgPayload.InertialFilterMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _InertialFilterMsgPayload.InertialFilterMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _InertialFilterMsgPayload.InertialFilterMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _InertialFilterMsgPayload.InertialFilterMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _InertialFilterMsgPayload.InertialFilterMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _InertialFilterMsgPayload.InertialFilterMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _InertialFilterMsgPayload.InertialFilterMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _InertialFilterMsgPayload.InertialFilterMsgInMsgsVector_pop(self)

    def append(self, x):
        return _InertialFilterMsgPayload.InertialFilterMsgInMsgsVector_append(self, x)

    def empty(self):
        return _InertialFilterMsgPayload.InertialFilterMsgInMsgsVector_empty(self)

    def size(self):
        return _InertialFilterMsgPayload.InertialFilterMsgInMsgsVector_size(self)

    def swap(self, v):
        return _InertialFilterMsgPayload.InertialFilterMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _InertialFilterMsgPayload.InertialFilterMsgInMsgsVector_begin(self)

    def end(self):
        return _InertialFilterMsgPayload.InertialFilterMsgInMsgsVector_end(self)

    def rbegin(self):
        return _InertialFilterMsgPayload.InertialFilterMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _InertialFilterMsgPayload.InertialFilterMsgInMsgsVector_rend(self)

    def clear(self):
        return _InertialFilterMsgPayload.InertialFilterMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _InertialFilterMsgPayload.InertialFilterMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _InertialFilterMsgPayload.InertialFilterMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _InertialFilterMsgPayload.InertialFilterMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _InertialFilterMsgPayload.InertialFilterMsgInMsgsVector_swiginit(self, _InertialFilterMsgPayload.new_InertialFilterMsgInMsgsVector(*args))

    def push_back(self, x):
        return _InertialFilterMsgPayload.InertialFilterMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _InertialFilterMsgPayload.InertialFilterMsgInMsgsVector_front(self)

    def back(self):
        return _InertialFilterMsgPayload.InertialFilterMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _InertialFilterMsgPayload.InertialFilterMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _InertialFilterMsgPayload.InertialFilterMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _InertialFilterMsgPayload.InertialFilterMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _InertialFilterMsgPayload.InertialFilterMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _InertialFilterMsgPayload.InertialFilterMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _InertialFilterMsgPayload.delete_InertialFilterMsgInMsgsVector

# Register InertialFilterMsgInMsgsVector in _InertialFilterMsgPayload:
_InertialFilterMsgPayload.InertialFilterMsgInMsgsVector_swigregister(InertialFilterMsgInMsgsVector)
class InertialFilterMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_InertialFilterMsgPayload.InertialFilterMsg_C_header_get, _InertialFilterMsgPayload.InertialFilterMsg_C_header_set)
    payload = property(_InertialFilterMsgPayload.InertialFilterMsg_C_payload_get, _InertialFilterMsgPayload.InertialFilterMsg_C_payload_set)
    payloadPointer = property(_InertialFilterMsgPayload.InertialFilterMsg_C_payloadPointer_get, _InertialFilterMsgPayload.InertialFilterMsg_C_payloadPointer_set)
    headerPointer = property(_InertialFilterMsgPayload.InertialFilterMsg_C_headerPointer_get, _InertialFilterMsgPayload.InertialFilterMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _InertialFilterMsgPayload.InertialFilterMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import InertialFilterMsg
        if type(source) == type(self):
            InertialFilterMsg_C_subscribe(self, source)
        elif type(source) == InertialFilterMsg:
            InertialFilterMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            InertialFilterMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe InertialFilterMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        InertialFilterMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import InertialFilterMsg
        if type(source) == type(self):
            return (InertialFilterMsg_C_isSubscribedTo(self, source))
        elif type(source) == InertialFilterMsg:
            return (InertialFilterMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (InertialFilterMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        InertialFilterMsg_C_addAuthor(self, self)
        if data:
            InertialFilterMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        InertialFilterMsg_C_addAuthor(self, self)
        InertialFilterMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return InertialFilterMsg_C_read(self)


    def __init__(self):
        _InertialFilterMsgPayload.InertialFilterMsg_C_swiginit(self, _InertialFilterMsgPayload.new_InertialFilterMsg_C())
    __swig_destroy__ = _InertialFilterMsgPayload.delete_InertialFilterMsg_C

# Register InertialFilterMsg_C in _InertialFilterMsgPayload:
_InertialFilterMsgPayload.InertialFilterMsg_C_swigregister(InertialFilterMsg_C)

def InertialFilterMsg_cpp_subscribe(subscriber, source):
    return _InertialFilterMsgPayload.InertialFilterMsg_cpp_subscribe(subscriber, source)

def InertialFilterMsg_C_subscribe(subscriber, source):
    return _InertialFilterMsgPayload.InertialFilterMsg_C_subscribe(subscriber, source)

def InertialFilterMsg_addr_subscribe(subscriber, sourceAddr):
    return _InertialFilterMsgPayload.InertialFilterMsg_addr_subscribe(subscriber, sourceAddr)

def InertialFilterMsg_unsubscribe(subscriber):
    return _InertialFilterMsgPayload.InertialFilterMsg_unsubscribe(subscriber)

def InertialFilterMsg_C_isSubscribedTo(subscriber, source):
    return _InertialFilterMsgPayload.InertialFilterMsg_C_isSubscribedTo(subscriber, source)

def InertialFilterMsg_cpp_isSubscribedTo(subscriber, source):
    return _InertialFilterMsgPayload.InertialFilterMsg_cpp_isSubscribedTo(subscriber, source)

def InertialFilterMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _InertialFilterMsgPayload.InertialFilterMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def InertialFilterMsg_C_addAuthor(coowner, data):
    return _InertialFilterMsgPayload.InertialFilterMsg_C_addAuthor(coowner, data)

def InertialFilterMsg_C_init(owner):
    return _InertialFilterMsgPayload.InertialFilterMsg_C_init(owner)

def InertialFilterMsg_C_isLinked(data):
    return _InertialFilterMsgPayload.InertialFilterMsg_C_isLinked(data)

def InertialFilterMsg_C_isWritten(data):
    return _InertialFilterMsgPayload.InertialFilterMsg_C_isWritten(data)

def InertialFilterMsg_C_timeWritten(data):
    return _InertialFilterMsgPayload.InertialFilterMsg_C_timeWritten(data)

def InertialFilterMsg_C_moduleID(data):
    return _InertialFilterMsgPayload.InertialFilterMsg_C_moduleID(data)

def InertialFilterMsg_C_write(data, destination, moduleID, callTime):
    return _InertialFilterMsgPayload.InertialFilterMsg_C_write(data, destination, moduleID, callTime)

def InertialFilterMsg_C_read(source):
    return _InertialFilterMsgPayload.InertialFilterMsg_C_read(source)

def InertialFilterMsg_C_zeroMsgPayload():
    return _InertialFilterMsgPayload.InertialFilterMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_InertialFilterMsgPayload.MsgHeader_isLinked_get, _InertialFilterMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_InertialFilterMsgPayload.MsgHeader_isWritten_get, _InertialFilterMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_InertialFilterMsgPayload.MsgHeader_timeWritten_get, _InertialFilterMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_InertialFilterMsgPayload.MsgHeader_moduleID_get, _InertialFilterMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _InertialFilterMsgPayload.MsgHeader_swiginit(self, _InertialFilterMsgPayload.new_MsgHeader())
    __swig_destroy__ = _InertialFilterMsgPayload.delete_MsgHeader

# Register MsgHeader in _InertialFilterMsgPayload:
_InertialFilterMsgPayload.MsgHeader_swigregister(MsgHeader)

