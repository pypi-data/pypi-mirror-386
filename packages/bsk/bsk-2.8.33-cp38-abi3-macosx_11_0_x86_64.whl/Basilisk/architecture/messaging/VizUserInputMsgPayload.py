# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _VizUserInputMsgPayload
else:
    import _VizUserInputMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VizUserInputMsgPayload.delete_SwigPyIterator

    def value(self):
        return _VizUserInputMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VizUserInputMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VizUserInputMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VizUserInputMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VizUserInputMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VizUserInputMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _VizUserInputMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _VizUserInputMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _VizUserInputMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VizUserInputMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VizUserInputMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VizUserInputMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VizUserInputMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VizUserInputMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VizUserInputMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VizUserInputMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _VizUserInputMsgPayload:
_VizUserInputMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _VizUserInputMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _VizUserInputMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _VizUserInputMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _VizUserInputMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _VizUserInputMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _VizUserInputMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _VizUserInputMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _VizUserInputMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _VizUserInputMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _VizUserInputMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _VizUserInputMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _VizUserInputMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _VizUserInputMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _VizUserInputMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _VizUserInputMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _VizUserInputMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VizUserInputMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VizUserInputMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _VizUserInputMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _VizUserInputMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _VizUserInputMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VizUserInputMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VizUserInputMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VizUserInputMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VizUserInputMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VizUserInputMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _VizUserInputMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _VizUserInputMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _VizUserInputMsgPayload.TimeVector_empty(self)

    def size(self):
        return _VizUserInputMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _VizUserInputMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _VizUserInputMsgPayload.TimeVector_begin(self)

    def end(self):
        return _VizUserInputMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _VizUserInputMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _VizUserInputMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _VizUserInputMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _VizUserInputMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _VizUserInputMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _VizUserInputMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _VizUserInputMsgPayload.TimeVector_swiginit(self, _VizUserInputMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _VizUserInputMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _VizUserInputMsgPayload.TimeVector_front(self)

    def back(self):
        return _VizUserInputMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _VizUserInputMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _VizUserInputMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _VizUserInputMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _VizUserInputMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _VizUserInputMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _VizUserInputMsgPayload.delete_TimeVector

# Register TimeVector in _VizUserInputMsgPayload:
_VizUserInputMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VizUserInputMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VizUserInputMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _VizUserInputMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _VizUserInputMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _VizUserInputMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VizUserInputMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VizUserInputMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VizUserInputMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VizUserInputMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VizUserInputMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _VizUserInputMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _VizUserInputMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _VizUserInputMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _VizUserInputMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _VizUserInputMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _VizUserInputMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _VizUserInputMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _VizUserInputMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _VizUserInputMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _VizUserInputMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _VizUserInputMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _VizUserInputMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _VizUserInputMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _VizUserInputMsgPayload.DoubleVector_swiginit(self, _VizUserInputMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _VizUserInputMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _VizUserInputMsgPayload.DoubleVector_front(self)

    def back(self):
        return _VizUserInputMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _VizUserInputMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _VizUserInputMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _VizUserInputMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _VizUserInputMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _VizUserInputMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _VizUserInputMsgPayload.delete_DoubleVector

# Register DoubleVector in _VizUserInputMsgPayload:
_VizUserInputMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VizUserInputMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VizUserInputMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _VizUserInputMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _VizUserInputMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _VizUserInputMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VizUserInputMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VizUserInputMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VizUserInputMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VizUserInputMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VizUserInputMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _VizUserInputMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _VizUserInputMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _VizUserInputMsgPayload.StringVector_empty(self)

    def size(self):
        return _VizUserInputMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _VizUserInputMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _VizUserInputMsgPayload.StringVector_begin(self)

    def end(self):
        return _VizUserInputMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _VizUserInputMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _VizUserInputMsgPayload.StringVector_rend(self)

    def clear(self):
        return _VizUserInputMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _VizUserInputMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _VizUserInputMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _VizUserInputMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _VizUserInputMsgPayload.StringVector_swiginit(self, _VizUserInputMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _VizUserInputMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _VizUserInputMsgPayload.StringVector_front(self)

    def back(self):
        return _VizUserInputMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _VizUserInputMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _VizUserInputMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _VizUserInputMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _VizUserInputMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _VizUserInputMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _VizUserInputMsgPayload.delete_StringVector

# Register StringVector in _VizUserInputMsgPayload:
_VizUserInputMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _VizUserInputMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _VizUserInputMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _VizUserInputMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _VizUserInputMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _VizUserInputMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _VizUserInputMsgPayload.NANO2SEC
SEC2NANO = _VizUserInputMsgPayload.SEC2NANO
SEC2HOUR = _VizUserInputMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _VizUserInputMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _VizUserInputMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _VizUserInputMsgPayload.secToNano(seconds)
BOOL_FALSE = _VizUserInputMsgPayload.BOOL_FALSE
BOOL_TRUE = _VizUserInputMsgPayload.BOOL_TRUE
AVAILABLE = _VizUserInputMsgPayload.AVAILABLE
UNAVAILABLE = _VizUserInputMsgPayload.UNAVAILABLE
BalancedWheels = _VizUserInputMsgPayload.BalancedWheels
JitterSimple = _VizUserInputMsgPayload.JitterSimple
JitterFullyCoupled = _VizUserInputMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VizUserInputMsgPayload.SysModel_swiginit(self, _VizUserInputMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _VizUserInputMsgPayload.delete_SysModel

    def SelfInit(self):
        return _VizUserInputMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _VizUserInputMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _VizUserInputMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _VizUserInputMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_VizUserInputMsgPayload.SysModel_ModelTag_get, _VizUserInputMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_VizUserInputMsgPayload.SysModel_CallCounts_get, _VizUserInputMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_VizUserInputMsgPayload.SysModel_RNGSeed_get, _VizUserInputMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_VizUserInputMsgPayload.SysModel_moduleID_get, _VizUserInputMsgPayload.SysModel_moduleID_set)

# Register SysModel in _VizUserInputMsgPayload:
_VizUserInputMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _VizUserInputMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _VizUserInputMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _VizUserInputMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _VizUserInputMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _VizUserInputMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _VizUserInputMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _VizUserInputMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _VizUserInputMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _VizUserInputMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _VizUserInputMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _VizUserInputMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _VizUserInputMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class VizEventReply(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    eventHandlerID = property(_VizUserInputMsgPayload.VizEventReply_eventHandlerID_get, _VizUserInputMsgPayload.VizEventReply_eventHandlerID_set)
    reply = property(_VizUserInputMsgPayload.VizEventReply_reply_get, _VizUserInputMsgPayload.VizEventReply_reply_set)
    eventHandlerDestroyed = property(_VizUserInputMsgPayload.VizEventReply_eventHandlerDestroyed_get, _VizUserInputMsgPayload.VizEventReply_eventHandlerDestroyed_set)

    def __init__(self):
        _VizUserInputMsgPayload.VizEventReply_swiginit(self, _VizUserInputMsgPayload.new_VizEventReply())
    __swig_destroy__ = _VizUserInputMsgPayload.delete_VizEventReply

# Register VizEventReply in _VizUserInputMsgPayload:
_VizUserInputMsgPayload.VizEventReply_swigregister(VizEventReply)
class VizUserInputMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    frameNumber = property(_VizUserInputMsgPayload.VizUserInputMsgPayload_frameNumber_get, _VizUserInputMsgPayload.VizUserInputMsgPayload_frameNumber_set)
    keyboardInput = property(_VizUserInputMsgPayload.VizUserInputMsgPayload_keyboardInput_get, _VizUserInputMsgPayload.VizUserInputMsgPayload_keyboardInput_set)
    vizEventReplies = property(_VizUserInputMsgPayload.VizUserInputMsgPayload_vizEventReplies_get, _VizUserInputMsgPayload.VizUserInputMsgPayload_vizEventReplies_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _VizUserInputMsgPayload.VizUserInputMsgPayload_swiginit(self, _VizUserInputMsgPayload.new_VizUserInputMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _VizUserInputMsgPayload.delete_VizUserInputMsgPayload

# Register VizUserInputMsgPayload in _VizUserInputMsgPayload:
_VizUserInputMsgPayload.VizUserInputMsgPayload_swigregister(VizUserInputMsgPayload)

def _pprint_VizUserInputMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[VizUserInputMsgPayload.__repr__] = _pprint_VizUserInputMsgPayload

class VizUserInputMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_VizUserInputMsgPayload.VizUserInputMsgReader_bskLogger_get, _VizUserInputMsgPayload.VizUserInputMsgReader_bskLogger_set)
    zeroMsgPayload = property(_VizUserInputMsgPayload.VizUserInputMsgReader_zeroMsgPayload_get, _VizUserInputMsgPayload.VizUserInputMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _VizUserInputMsgPayload.VizUserInputMsgReader_swiginit(self, _VizUserInputMsgPayload.new_VizUserInputMsgReader(*args))

    def __call__(self):
        return _VizUserInputMsgPayload.VizUserInputMsgReader___call__(self)

    def isLinked(self):
        return _VizUserInputMsgPayload.VizUserInputMsgReader_isLinked(self)

    def isWritten(self):
        return _VizUserInputMsgPayload.VizUserInputMsgReader_isWritten(self)

    def timeWritten(self):
        return _VizUserInputMsgPayload.VizUserInputMsgReader_timeWritten(self)

    def moduleID(self):
        return _VizUserInputMsgPayload.VizUserInputMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _VizUserInputMsgPayload.VizUserInputMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _VizUserInputMsgPayload.VizUserInputMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _VizUserInputMsgPayload.VizUserInputMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _VizUserInputMsgPayload.VizUserInputMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _VizUserInputMsgPayload.VizUserInputMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _VizUserInputMsgPayload.VizUserInputMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _VizUserInputMsgPayload.VizUserInputMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _VizUserInputMsgPayload.VizUserInputMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _VizUserInputMsgPayload.VizUserInputMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _VizUserInputMsgPayload.VizUserInputMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == VizUserInputMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.VizUserInputMsgPayload import VizUserInputMsg_C
            if type(source) == VizUserInputMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<VizUserInputMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == VizUserInputMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.VizUserInputMsgPayload import VizUserInputMsg_C
        except ImportError:
            return 0

        if type(source) == VizUserInputMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _VizUserInputMsgPayload.delete_VizUserInputMsgReader

# Register VizUserInputMsgReader in _VizUserInputMsgPayload:
_VizUserInputMsgPayload.VizUserInputMsgReader_swigregister(VizUserInputMsgReader)
class VizUserInputMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VizUserInputMsgPayload.VizUserInputMsgWriter_swiginit(self, _VizUserInputMsgPayload.new_VizUserInputMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _VizUserInputMsgPayload.VizUserInputMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _VizUserInputMsgPayload.delete_VizUserInputMsgWriter

# Register VizUserInputMsgWriter in _VizUserInputMsgPayload:
_VizUserInputMsgPayload.VizUserInputMsgWriter_swigregister(VizUserInputMsgWriter)
class VizUserInputMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_VizUserInputMsgPayload.VizUserInputMsg_write_get, _VizUserInputMsgPayload.VizUserInputMsg_write_set)

    def addSubscriber(self):
        return _VizUserInputMsgPayload.VizUserInputMsg_addSubscriber(self)

    def addAuthor(self):
        return _VizUserInputMsgPayload.VizUserInputMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _VizUserInputMsgPayload.VizUserInputMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _VizUserInputMsgPayload.VizUserInputMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _VizUserInputMsgPayload.VizUserInputMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_VizUserInputMsgPayload.VizUserInputMsg_zeroMsgPayload_get, _VizUserInputMsgPayload.VizUserInputMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _VizUserInputMsgPayload.VizUserInputMsg_isLinked(self)

    def getPayloadSize(self):
        return _VizUserInputMsgPayload.VizUserInputMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _VizUserInputMsgPayload.VizUserInputMsg_swiginit(self, _VizUserInputMsgPayload.new_VizUserInputMsg())
    __swig_destroy__ = _VizUserInputMsgPayload.delete_VizUserInputMsg

# Register VizUserInputMsg in _VizUserInputMsgPayload:
_VizUserInputMsgPayload.VizUserInputMsg_swigregister(VizUserInputMsg)
class VizUserInputMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VizUserInputMsgPayload.VizUserInputMsgRecorder_swiginit(self, _VizUserInputMsgPayload.new_VizUserInputMsgRecorder(*args))
    __swig_destroy__ = _VizUserInputMsgPayload.delete_VizUserInputMsgRecorder

    def SelfInit(self):
        return _VizUserInputMsgPayload.VizUserInputMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _VizUserInputMsgPayload.VizUserInputMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _VizUserInputMsgPayload.VizUserInputMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _VizUserInputMsgPayload.VizUserInputMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _VizUserInputMsgPayload.VizUserInputMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _VizUserInputMsgPayload.VizUserInputMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _VizUserInputMsgPayload.VizUserInputMsgRecorder___record_vector(self)

    def size(self):
        return _VizUserInputMsgPayload.VizUserInputMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _VizUserInputMsgPayload.VizUserInputMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _VizUserInputMsgPayload.VizUserInputMsgRecorder_clear(self)
    bskLogger = property(_VizUserInputMsgPayload.VizUserInputMsgRecorder_bskLogger_get, _VizUserInputMsgPayload.VizUserInputMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _VizUserInputMsgPayload.VizUserInputMsgRecorder_updateTimeInterval(self, timeDiff)

    def _frameNumber_array(self):
        return _VizUserInputMsgPayload.VizUserInputMsgRecorder__frameNumber_array(self)

    @property
    def frameNumber(self):
        return self._frameNumber_array()


    def _keyboardInput_list(self):
        return _VizUserInputMsgPayload.VizUserInputMsgRecorder__keyboardInput_list(self)

    @property
    def keyboardInput(self):
        return np.array(self._keyboardInput_list())


    def _vizEventReplies_list(self):
        return _VizUserInputMsgPayload.VizUserInputMsgRecorder__vizEventReplies_list(self)

    @property
    def vizEventReplies(self):
        return np.array(self._vizEventReplies_list())


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register VizUserInputMsgRecorder in _VizUserInputMsgPayload:
_VizUserInputMsgPayload.VizUserInputMsgRecorder_swigregister(VizUserInputMsgRecorder)
class VizUserInputMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VizUserInputMsgPayload.VizUserInputMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VizUserInputMsgPayload.VizUserInputMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _VizUserInputMsgPayload.VizUserInputMsgPayloadVector___bool__(self)

    def __len__(self):
        return _VizUserInputMsgPayload.VizUserInputMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _VizUserInputMsgPayload.VizUserInputMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VizUserInputMsgPayload.VizUserInputMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VizUserInputMsgPayload.VizUserInputMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VizUserInputMsgPayload.VizUserInputMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VizUserInputMsgPayload.VizUserInputMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VizUserInputMsgPayload.VizUserInputMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _VizUserInputMsgPayload.VizUserInputMsgPayloadVector_pop(self)

    def append(self, x):
        return _VizUserInputMsgPayload.VizUserInputMsgPayloadVector_append(self, x)

    def empty(self):
        return _VizUserInputMsgPayload.VizUserInputMsgPayloadVector_empty(self)

    def size(self):
        return _VizUserInputMsgPayload.VizUserInputMsgPayloadVector_size(self)

    def swap(self, v):
        return _VizUserInputMsgPayload.VizUserInputMsgPayloadVector_swap(self, v)

    def begin(self):
        return _VizUserInputMsgPayload.VizUserInputMsgPayloadVector_begin(self)

    def end(self):
        return _VizUserInputMsgPayload.VizUserInputMsgPayloadVector_end(self)

    def rbegin(self):
        return _VizUserInputMsgPayload.VizUserInputMsgPayloadVector_rbegin(self)

    def rend(self):
        return _VizUserInputMsgPayload.VizUserInputMsgPayloadVector_rend(self)

    def clear(self):
        return _VizUserInputMsgPayload.VizUserInputMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _VizUserInputMsgPayload.VizUserInputMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _VizUserInputMsgPayload.VizUserInputMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _VizUserInputMsgPayload.VizUserInputMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _VizUserInputMsgPayload.VizUserInputMsgPayloadVector_swiginit(self, _VizUserInputMsgPayload.new_VizUserInputMsgPayloadVector(*args))

    def push_back(self, x):
        return _VizUserInputMsgPayload.VizUserInputMsgPayloadVector_push_back(self, x)

    def front(self):
        return _VizUserInputMsgPayload.VizUserInputMsgPayloadVector_front(self)

    def back(self):
        return _VizUserInputMsgPayload.VizUserInputMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _VizUserInputMsgPayload.VizUserInputMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _VizUserInputMsgPayload.VizUserInputMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _VizUserInputMsgPayload.VizUserInputMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _VizUserInputMsgPayload.VizUserInputMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _VizUserInputMsgPayload.VizUserInputMsgPayloadVector_capacity(self)

    def get_all(self):
        return _VizUserInputMsgPayload.VizUserInputMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _VizUserInputMsgPayload.delete_VizUserInputMsgPayloadVector

# Register VizUserInputMsgPayloadVector in _VizUserInputMsgPayload:
_VizUserInputMsgPayload.VizUserInputMsgPayloadVector_swigregister(VizUserInputMsgPayloadVector)
class VizUserInputMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsVector_empty(self)

    def size(self):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsVector_begin(self)

    def end(self):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsVector_rend(self)

    def clear(self):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _VizUserInputMsgPayload.VizUserInputMsgOutMsgsVector_swiginit(self, _VizUserInputMsgPayload.new_VizUserInputMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsVector_front(self)

    def back(self):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _VizUserInputMsgPayload.delete_VizUserInputMsgOutMsgsVector

# Register VizUserInputMsgOutMsgsVector in _VizUserInputMsgPayload:
_VizUserInputMsgPayload.VizUserInputMsgOutMsgsVector_swigregister(VizUserInputMsgOutMsgsVector)
class VizUserInputMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _VizUserInputMsgPayload.VizUserInputMsgOutMsgsPtrVector_swiginit(self, _VizUserInputMsgPayload.new_VizUserInputMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _VizUserInputMsgPayload.VizUserInputMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _VizUserInputMsgPayload.delete_VizUserInputMsgOutMsgsPtrVector

# Register VizUserInputMsgOutMsgsPtrVector in _VizUserInputMsgPayload:
_VizUserInputMsgPayload.VizUserInputMsgOutMsgsPtrVector_swigregister(VizUserInputMsgOutMsgsPtrVector)
class VizUserInputMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VizUserInputMsgPayload.VizUserInputMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VizUserInputMsgPayload.VizUserInputMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _VizUserInputMsgPayload.VizUserInputMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _VizUserInputMsgPayload.VizUserInputMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _VizUserInputMsgPayload.VizUserInputMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VizUserInputMsgPayload.VizUserInputMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VizUserInputMsgPayload.VizUserInputMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VizUserInputMsgPayload.VizUserInputMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VizUserInputMsgPayload.VizUserInputMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VizUserInputMsgPayload.VizUserInputMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _VizUserInputMsgPayload.VizUserInputMsgInMsgsVector_pop(self)

    def append(self, x):
        return _VizUserInputMsgPayload.VizUserInputMsgInMsgsVector_append(self, x)

    def empty(self):
        return _VizUserInputMsgPayload.VizUserInputMsgInMsgsVector_empty(self)

    def size(self):
        return _VizUserInputMsgPayload.VizUserInputMsgInMsgsVector_size(self)

    def swap(self, v):
        return _VizUserInputMsgPayload.VizUserInputMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _VizUserInputMsgPayload.VizUserInputMsgInMsgsVector_begin(self)

    def end(self):
        return _VizUserInputMsgPayload.VizUserInputMsgInMsgsVector_end(self)

    def rbegin(self):
        return _VizUserInputMsgPayload.VizUserInputMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _VizUserInputMsgPayload.VizUserInputMsgInMsgsVector_rend(self)

    def clear(self):
        return _VizUserInputMsgPayload.VizUserInputMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _VizUserInputMsgPayload.VizUserInputMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _VizUserInputMsgPayload.VizUserInputMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _VizUserInputMsgPayload.VizUserInputMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _VizUserInputMsgPayload.VizUserInputMsgInMsgsVector_swiginit(self, _VizUserInputMsgPayload.new_VizUserInputMsgInMsgsVector(*args))

    def push_back(self, x):
        return _VizUserInputMsgPayload.VizUserInputMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _VizUserInputMsgPayload.VizUserInputMsgInMsgsVector_front(self)

    def back(self):
        return _VizUserInputMsgPayload.VizUserInputMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _VizUserInputMsgPayload.VizUserInputMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _VizUserInputMsgPayload.VizUserInputMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _VizUserInputMsgPayload.VizUserInputMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _VizUserInputMsgPayload.VizUserInputMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _VizUserInputMsgPayload.VizUserInputMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _VizUserInputMsgPayload.delete_VizUserInputMsgInMsgsVector

# Register VizUserInputMsgInMsgsVector in _VizUserInputMsgPayload:
_VizUserInputMsgPayload.VizUserInputMsgInMsgsVector_swigregister(VizUserInputMsgInMsgsVector)

