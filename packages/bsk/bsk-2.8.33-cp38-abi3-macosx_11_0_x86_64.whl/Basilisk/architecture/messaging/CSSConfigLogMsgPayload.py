# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CSSConfigLogMsgPayload
else:
    import _CSSConfigLogMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CSSConfigLogMsgPayload.delete_SwigPyIterator

    def value(self):
        return _CSSConfigLogMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _CSSConfigLogMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _CSSConfigLogMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _CSSConfigLogMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _CSSConfigLogMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _CSSConfigLogMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _CSSConfigLogMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _CSSConfigLogMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _CSSConfigLogMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _CSSConfigLogMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _CSSConfigLogMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _CSSConfigLogMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _CSSConfigLogMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _CSSConfigLogMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _CSSConfigLogMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _CSSConfigLogMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CSSConfigLogMsgPayload:
_CSSConfigLogMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _CSSConfigLogMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _CSSConfigLogMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _CSSConfigLogMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _CSSConfigLogMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _CSSConfigLogMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _CSSConfigLogMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _CSSConfigLogMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _CSSConfigLogMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _CSSConfigLogMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _CSSConfigLogMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _CSSConfigLogMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _CSSConfigLogMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _CSSConfigLogMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _CSSConfigLogMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _CSSConfigLogMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _CSSConfigLogMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSConfigLogMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSConfigLogMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _CSSConfigLogMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _CSSConfigLogMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSConfigLogMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSConfigLogMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSConfigLogMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSConfigLogMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSConfigLogMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSConfigLogMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _CSSConfigLogMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _CSSConfigLogMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _CSSConfigLogMsgPayload.TimeVector_empty(self)

    def size(self):
        return _CSSConfigLogMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _CSSConfigLogMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _CSSConfigLogMsgPayload.TimeVector_begin(self)

    def end(self):
        return _CSSConfigLogMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _CSSConfigLogMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _CSSConfigLogMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _CSSConfigLogMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _CSSConfigLogMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _CSSConfigLogMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _CSSConfigLogMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _CSSConfigLogMsgPayload.TimeVector_swiginit(self, _CSSConfigLogMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _CSSConfigLogMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _CSSConfigLogMsgPayload.TimeVector_front(self)

    def back(self):
        return _CSSConfigLogMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _CSSConfigLogMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSConfigLogMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _CSSConfigLogMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _CSSConfigLogMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _CSSConfigLogMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _CSSConfigLogMsgPayload.delete_TimeVector

# Register TimeVector in _CSSConfigLogMsgPayload:
_CSSConfigLogMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSConfigLogMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSConfigLogMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _CSSConfigLogMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _CSSConfigLogMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSConfigLogMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSConfigLogMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSConfigLogMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSConfigLogMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSConfigLogMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSConfigLogMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _CSSConfigLogMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _CSSConfigLogMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _CSSConfigLogMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _CSSConfigLogMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _CSSConfigLogMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _CSSConfigLogMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _CSSConfigLogMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _CSSConfigLogMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _CSSConfigLogMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _CSSConfigLogMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _CSSConfigLogMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _CSSConfigLogMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _CSSConfigLogMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _CSSConfigLogMsgPayload.DoubleVector_swiginit(self, _CSSConfigLogMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _CSSConfigLogMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _CSSConfigLogMsgPayload.DoubleVector_front(self)

    def back(self):
        return _CSSConfigLogMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _CSSConfigLogMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSConfigLogMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _CSSConfigLogMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _CSSConfigLogMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _CSSConfigLogMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _CSSConfigLogMsgPayload.delete_DoubleVector

# Register DoubleVector in _CSSConfigLogMsgPayload:
_CSSConfigLogMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSConfigLogMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSConfigLogMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _CSSConfigLogMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _CSSConfigLogMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSConfigLogMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSConfigLogMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSConfigLogMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSConfigLogMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSConfigLogMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSConfigLogMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _CSSConfigLogMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _CSSConfigLogMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _CSSConfigLogMsgPayload.StringVector_empty(self)

    def size(self):
        return _CSSConfigLogMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _CSSConfigLogMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _CSSConfigLogMsgPayload.StringVector_begin(self)

    def end(self):
        return _CSSConfigLogMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _CSSConfigLogMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _CSSConfigLogMsgPayload.StringVector_rend(self)

    def clear(self):
        return _CSSConfigLogMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _CSSConfigLogMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _CSSConfigLogMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _CSSConfigLogMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _CSSConfigLogMsgPayload.StringVector_swiginit(self, _CSSConfigLogMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _CSSConfigLogMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _CSSConfigLogMsgPayload.StringVector_front(self)

    def back(self):
        return _CSSConfigLogMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _CSSConfigLogMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSConfigLogMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _CSSConfigLogMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _CSSConfigLogMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _CSSConfigLogMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _CSSConfigLogMsgPayload.delete_StringVector

# Register StringVector in _CSSConfigLogMsgPayload:
_CSSConfigLogMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _CSSConfigLogMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _CSSConfigLogMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _CSSConfigLogMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _CSSConfigLogMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _CSSConfigLogMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _CSSConfigLogMsgPayload.NANO2SEC
SEC2NANO = _CSSConfigLogMsgPayload.SEC2NANO
SEC2HOUR = _CSSConfigLogMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _CSSConfigLogMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _CSSConfigLogMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _CSSConfigLogMsgPayload.secToNano(seconds)
BOOL_FALSE = _CSSConfigLogMsgPayload.BOOL_FALSE
BOOL_TRUE = _CSSConfigLogMsgPayload.BOOL_TRUE
AVAILABLE = _CSSConfigLogMsgPayload.AVAILABLE
UNAVAILABLE = _CSSConfigLogMsgPayload.UNAVAILABLE
BalancedWheels = _CSSConfigLogMsgPayload.BalancedWheels
JitterSimple = _CSSConfigLogMsgPayload.JitterSimple
JitterFullyCoupled = _CSSConfigLogMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSSConfigLogMsgPayload.SysModel_swiginit(self, _CSSConfigLogMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _CSSConfigLogMsgPayload.delete_SysModel

    def SelfInit(self):
        return _CSSConfigLogMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _CSSConfigLogMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _CSSConfigLogMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _CSSConfigLogMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_CSSConfigLogMsgPayload.SysModel_ModelTag_get, _CSSConfigLogMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_CSSConfigLogMsgPayload.SysModel_CallCounts_get, _CSSConfigLogMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_CSSConfigLogMsgPayload.SysModel_RNGSeed_get, _CSSConfigLogMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_CSSConfigLogMsgPayload.SysModel_moduleID_get, _CSSConfigLogMsgPayload.SysModel_moduleID_set)

# Register SysModel in _CSSConfigLogMsgPayload:
_CSSConfigLogMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _CSSConfigLogMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _CSSConfigLogMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _CSSConfigLogMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _CSSConfigLogMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _CSSConfigLogMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _CSSConfigLogMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _CSSConfigLogMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _CSSConfigLogMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _CSSConfigLogMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _CSSConfigLogMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _CSSConfigLogMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _CSSConfigLogMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class CSSConfigLogMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r_B = property(_CSSConfigLogMsgPayload.CSSConfigLogMsgPayload_r_B_get, _CSSConfigLogMsgPayload.CSSConfigLogMsgPayload_r_B_set)
    nHat_B = property(_CSSConfigLogMsgPayload.CSSConfigLogMsgPayload_nHat_B_get, _CSSConfigLogMsgPayload.CSSConfigLogMsgPayload_nHat_B_set)
    fov = property(_CSSConfigLogMsgPayload.CSSConfigLogMsgPayload_fov_get, _CSSConfigLogMsgPayload.CSSConfigLogMsgPayload_fov_set)
    signal = property(_CSSConfigLogMsgPayload.CSSConfigLogMsgPayload_signal_get, _CSSConfigLogMsgPayload.CSSConfigLogMsgPayload_signal_set)
    maxSignal = property(_CSSConfigLogMsgPayload.CSSConfigLogMsgPayload_maxSignal_get, _CSSConfigLogMsgPayload.CSSConfigLogMsgPayload_maxSignal_set)
    minSignal = property(_CSSConfigLogMsgPayload.CSSConfigLogMsgPayload_minSignal_get, _CSSConfigLogMsgPayload.CSSConfigLogMsgPayload_minSignal_set)
    CSSGroupID = property(_CSSConfigLogMsgPayload.CSSConfigLogMsgPayload_CSSGroupID_get, _CSSConfigLogMsgPayload.CSSConfigLogMsgPayload_CSSGroupID_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _CSSConfigLogMsgPayload.CSSConfigLogMsgPayload_swiginit(self, _CSSConfigLogMsgPayload.new_CSSConfigLogMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _CSSConfigLogMsgPayload.delete_CSSConfigLogMsgPayload

# Register CSSConfigLogMsgPayload in _CSSConfigLogMsgPayload:
_CSSConfigLogMsgPayload.CSSConfigLogMsgPayload_swigregister(CSSConfigLogMsgPayload)

def _pprint_CSSConfigLogMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[CSSConfigLogMsgPayload.__repr__] = _pprint_CSSConfigLogMsgPayload

class CSSConfigLogMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_CSSConfigLogMsgPayload.CSSConfigLogMsgReader_bskLogger_get, _CSSConfigLogMsgPayload.CSSConfigLogMsgReader_bskLogger_set)
    zeroMsgPayload = property(_CSSConfigLogMsgPayload.CSSConfigLogMsgReader_zeroMsgPayload_get, _CSSConfigLogMsgPayload.CSSConfigLogMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _CSSConfigLogMsgPayload.CSSConfigLogMsgReader_swiginit(self, _CSSConfigLogMsgPayload.new_CSSConfigLogMsgReader(*args))

    def __call__(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgReader___call__(self)

    def isLinked(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgReader_isLinked(self)

    def isWritten(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgReader_isWritten(self)

    def timeWritten(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgReader_timeWritten(self)

    def moduleID(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == CSSConfigLogMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.CSSConfigLogMsgPayload import CSSConfigLogMsg_C
            if type(source) == CSSConfigLogMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<CSSConfigLogMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == CSSConfigLogMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.CSSConfigLogMsgPayload import CSSConfigLogMsg_C
        except ImportError:
            return 0

        if type(source) == CSSConfigLogMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _CSSConfigLogMsgPayload.delete_CSSConfigLogMsgReader

# Register CSSConfigLogMsgReader in _CSSConfigLogMsgPayload:
_CSSConfigLogMsgPayload.CSSConfigLogMsgReader_swigregister(CSSConfigLogMsgReader)
class CSSConfigLogMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSSConfigLogMsgPayload.CSSConfigLogMsgWriter_swiginit(self, _CSSConfigLogMsgPayload.new_CSSConfigLogMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _CSSConfigLogMsgPayload.delete_CSSConfigLogMsgWriter

# Register CSSConfigLogMsgWriter in _CSSConfigLogMsgPayload:
_CSSConfigLogMsgPayload.CSSConfigLogMsgWriter_swigregister(CSSConfigLogMsgWriter)
class CSSConfigLogMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_CSSConfigLogMsgPayload.CSSConfigLogMsg_write_get, _CSSConfigLogMsgPayload.CSSConfigLogMsg_write_set)

    def addSubscriber(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsg_addSubscriber(self)

    def addAuthor(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_CSSConfigLogMsgPayload.CSSConfigLogMsg_zeroMsgPayload_get, _CSSConfigLogMsgPayload.CSSConfigLogMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsg_isLinked(self)

    def getPayloadSize(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _CSSConfigLogMsgPayload.CSSConfigLogMsg_swiginit(self, _CSSConfigLogMsgPayload.new_CSSConfigLogMsg())
    __swig_destroy__ = _CSSConfigLogMsgPayload.delete_CSSConfigLogMsg

# Register CSSConfigLogMsg in _CSSConfigLogMsgPayload:
_CSSConfigLogMsgPayload.CSSConfigLogMsg_swigregister(CSSConfigLogMsg)
class CSSConfigLogMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSSConfigLogMsgPayload.CSSConfigLogMsgRecorder_swiginit(self, _CSSConfigLogMsgPayload.new_CSSConfigLogMsgRecorder(*args))
    __swig_destroy__ = _CSSConfigLogMsgPayload.delete_CSSConfigLogMsgRecorder

    def SelfInit(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgRecorder___record_vector(self)

    def size(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgRecorder_clear(self)
    bskLogger = property(_CSSConfigLogMsgPayload.CSSConfigLogMsgRecorder_bskLogger_get, _CSSConfigLogMsgPayload.CSSConfigLogMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgRecorder_updateTimeInterval(self, timeDiff)

    def _r_B_array(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgRecorder__r_B_array(self)

    @property
    def r_B(self):
        return self._r_B_array()


    def _nHat_B_array(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgRecorder__nHat_B_array(self)

    @property
    def nHat_B(self):
        return self._nHat_B_array()


    def _fov_array(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgRecorder__fov_array(self)

    @property
    def fov(self):
        return self._fov_array()


    def _signal_array(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgRecorder__signal_array(self)

    @property
    def signal(self):
        return self._signal_array()


    def _maxSignal_array(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgRecorder__maxSignal_array(self)

    @property
    def maxSignal(self):
        return self._maxSignal_array()


    def _minSignal_array(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgRecorder__minSignal_array(self)

    @property
    def minSignal(self):
        return self._minSignal_array()


    def _CSSGroupID_array(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgRecorder__CSSGroupID_array(self)

    @property
    def CSSGroupID(self):
        return self._CSSGroupID_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register CSSConfigLogMsgRecorder in _CSSConfigLogMsgPayload:
_CSSConfigLogMsgPayload.CSSConfigLogMsgRecorder_swigregister(CSSConfigLogMsgRecorder)
class CSSConfigLogMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgPayloadVector___bool__(self)

    def __len__(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgPayloadVector_pop(self)

    def append(self, x):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgPayloadVector_append(self, x)

    def empty(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgPayloadVector_empty(self)

    def size(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgPayloadVector_size(self)

    def swap(self, v):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgPayloadVector_swap(self, v)

    def begin(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgPayloadVector_begin(self)

    def end(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgPayloadVector_end(self)

    def rbegin(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgPayloadVector_rbegin(self)

    def rend(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgPayloadVector_rend(self)

    def clear(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _CSSConfigLogMsgPayload.CSSConfigLogMsgPayloadVector_swiginit(self, _CSSConfigLogMsgPayload.new_CSSConfigLogMsgPayloadVector(*args))

    def push_back(self, x):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgPayloadVector_push_back(self, x)

    def front(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgPayloadVector_front(self)

    def back(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgPayloadVector_capacity(self)

    def get_all(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _CSSConfigLogMsgPayload.delete_CSSConfigLogMsgPayloadVector

# Register CSSConfigLogMsgPayloadVector in _CSSConfigLogMsgPayload:
_CSSConfigLogMsgPayload.CSSConfigLogMsgPayloadVector_swigregister(CSSConfigLogMsgPayloadVector)
class CSSConfigLogMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsVector_empty(self)

    def size(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsVector_begin(self)

    def end(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsVector_rend(self)

    def clear(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsVector_swiginit(self, _CSSConfigLogMsgPayload.new_CSSConfigLogMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsVector_front(self)

    def back(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _CSSConfigLogMsgPayload.delete_CSSConfigLogMsgOutMsgsVector

# Register CSSConfigLogMsgOutMsgsVector in _CSSConfigLogMsgPayload:
_CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsVector_swigregister(CSSConfigLogMsgOutMsgsVector)
class CSSConfigLogMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsPtrVector_swiginit(self, _CSSConfigLogMsgPayload.new_CSSConfigLogMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _CSSConfigLogMsgPayload.delete_CSSConfigLogMsgOutMsgsPtrVector

# Register CSSConfigLogMsgOutMsgsPtrVector in _CSSConfigLogMsgPayload:
_CSSConfigLogMsgPayload.CSSConfigLogMsgOutMsgsPtrVector_swigregister(CSSConfigLogMsgOutMsgsPtrVector)
class CSSConfigLogMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgInMsgsVector_pop(self)

    def append(self, x):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgInMsgsVector_append(self, x)

    def empty(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgInMsgsVector_empty(self)

    def size(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgInMsgsVector_size(self)

    def swap(self, v):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgInMsgsVector_begin(self)

    def end(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgInMsgsVector_end(self)

    def rbegin(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgInMsgsVector_rend(self)

    def clear(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _CSSConfigLogMsgPayload.CSSConfigLogMsgInMsgsVector_swiginit(self, _CSSConfigLogMsgPayload.new_CSSConfigLogMsgInMsgsVector(*args))

    def push_back(self, x):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgInMsgsVector_front(self)

    def back(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _CSSConfigLogMsgPayload.CSSConfigLogMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _CSSConfigLogMsgPayload.delete_CSSConfigLogMsgInMsgsVector

# Register CSSConfigLogMsgInMsgsVector in _CSSConfigLogMsgPayload:
_CSSConfigLogMsgPayload.CSSConfigLogMsgInMsgsVector_swigregister(CSSConfigLogMsgInMsgsVector)

