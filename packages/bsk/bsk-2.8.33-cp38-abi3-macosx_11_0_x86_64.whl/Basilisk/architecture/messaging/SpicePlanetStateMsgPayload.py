# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _SpicePlanetStateMsgPayload
else:
    import _SpicePlanetStateMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SpicePlanetStateMsgPayload.delete_SwigPyIterator

    def value(self):
        return _SpicePlanetStateMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _SpicePlanetStateMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _SpicePlanetStateMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _SpicePlanetStateMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _SpicePlanetStateMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _SpicePlanetStateMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _SpicePlanetStateMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _SpicePlanetStateMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _SpicePlanetStateMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _SpicePlanetStateMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _SpicePlanetStateMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _SpicePlanetStateMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _SpicePlanetStateMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _SpicePlanetStateMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _SpicePlanetStateMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _SpicePlanetStateMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _SpicePlanetStateMsgPayload:
_SpicePlanetStateMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _SpicePlanetStateMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _SpicePlanetStateMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _SpicePlanetStateMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _SpicePlanetStateMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _SpicePlanetStateMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _SpicePlanetStateMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _SpicePlanetStateMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _SpicePlanetStateMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _SpicePlanetStateMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _SpicePlanetStateMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _SpicePlanetStateMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _SpicePlanetStateMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _SpicePlanetStateMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _SpicePlanetStateMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _SpicePlanetStateMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _SpicePlanetStateMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SpicePlanetStateMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SpicePlanetStateMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _SpicePlanetStateMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _SpicePlanetStateMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _SpicePlanetStateMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SpicePlanetStateMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SpicePlanetStateMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SpicePlanetStateMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SpicePlanetStateMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SpicePlanetStateMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _SpicePlanetStateMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _SpicePlanetStateMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _SpicePlanetStateMsgPayload.TimeVector_empty(self)

    def size(self):
        return _SpicePlanetStateMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _SpicePlanetStateMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _SpicePlanetStateMsgPayload.TimeVector_begin(self)

    def end(self):
        return _SpicePlanetStateMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _SpicePlanetStateMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _SpicePlanetStateMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _SpicePlanetStateMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _SpicePlanetStateMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _SpicePlanetStateMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _SpicePlanetStateMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _SpicePlanetStateMsgPayload.TimeVector_swiginit(self, _SpicePlanetStateMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _SpicePlanetStateMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _SpicePlanetStateMsgPayload.TimeVector_front(self)

    def back(self):
        return _SpicePlanetStateMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _SpicePlanetStateMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _SpicePlanetStateMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _SpicePlanetStateMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _SpicePlanetStateMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _SpicePlanetStateMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _SpicePlanetStateMsgPayload.delete_TimeVector

# Register TimeVector in _SpicePlanetStateMsgPayload:
_SpicePlanetStateMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SpicePlanetStateMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SpicePlanetStateMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _SpicePlanetStateMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _SpicePlanetStateMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _SpicePlanetStateMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SpicePlanetStateMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SpicePlanetStateMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SpicePlanetStateMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SpicePlanetStateMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SpicePlanetStateMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _SpicePlanetStateMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _SpicePlanetStateMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _SpicePlanetStateMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _SpicePlanetStateMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _SpicePlanetStateMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _SpicePlanetStateMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _SpicePlanetStateMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _SpicePlanetStateMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _SpicePlanetStateMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _SpicePlanetStateMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _SpicePlanetStateMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _SpicePlanetStateMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _SpicePlanetStateMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _SpicePlanetStateMsgPayload.DoubleVector_swiginit(self, _SpicePlanetStateMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _SpicePlanetStateMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _SpicePlanetStateMsgPayload.DoubleVector_front(self)

    def back(self):
        return _SpicePlanetStateMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _SpicePlanetStateMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _SpicePlanetStateMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _SpicePlanetStateMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _SpicePlanetStateMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _SpicePlanetStateMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _SpicePlanetStateMsgPayload.delete_DoubleVector

# Register DoubleVector in _SpicePlanetStateMsgPayload:
_SpicePlanetStateMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SpicePlanetStateMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SpicePlanetStateMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _SpicePlanetStateMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _SpicePlanetStateMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _SpicePlanetStateMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SpicePlanetStateMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SpicePlanetStateMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SpicePlanetStateMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SpicePlanetStateMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SpicePlanetStateMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _SpicePlanetStateMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _SpicePlanetStateMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _SpicePlanetStateMsgPayload.StringVector_empty(self)

    def size(self):
        return _SpicePlanetStateMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _SpicePlanetStateMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _SpicePlanetStateMsgPayload.StringVector_begin(self)

    def end(self):
        return _SpicePlanetStateMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _SpicePlanetStateMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _SpicePlanetStateMsgPayload.StringVector_rend(self)

    def clear(self):
        return _SpicePlanetStateMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _SpicePlanetStateMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _SpicePlanetStateMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _SpicePlanetStateMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _SpicePlanetStateMsgPayload.StringVector_swiginit(self, _SpicePlanetStateMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _SpicePlanetStateMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _SpicePlanetStateMsgPayload.StringVector_front(self)

    def back(self):
        return _SpicePlanetStateMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _SpicePlanetStateMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _SpicePlanetStateMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _SpicePlanetStateMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _SpicePlanetStateMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _SpicePlanetStateMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _SpicePlanetStateMsgPayload.delete_StringVector

# Register StringVector in _SpicePlanetStateMsgPayload:
_SpicePlanetStateMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _SpicePlanetStateMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _SpicePlanetStateMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _SpicePlanetStateMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _SpicePlanetStateMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _SpicePlanetStateMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _SpicePlanetStateMsgPayload.NANO2SEC
SEC2NANO = _SpicePlanetStateMsgPayload.SEC2NANO
SEC2HOUR = _SpicePlanetStateMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _SpicePlanetStateMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _SpicePlanetStateMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _SpicePlanetStateMsgPayload.secToNano(seconds)
BOOL_FALSE = _SpicePlanetStateMsgPayload.BOOL_FALSE
BOOL_TRUE = _SpicePlanetStateMsgPayload.BOOL_TRUE
AVAILABLE = _SpicePlanetStateMsgPayload.AVAILABLE
UNAVAILABLE = _SpicePlanetStateMsgPayload.UNAVAILABLE
BalancedWheels = _SpicePlanetStateMsgPayload.BalancedWheels
JitterSimple = _SpicePlanetStateMsgPayload.JitterSimple
JitterFullyCoupled = _SpicePlanetStateMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SpicePlanetStateMsgPayload.SysModel_swiginit(self, _SpicePlanetStateMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _SpicePlanetStateMsgPayload.delete_SysModel

    def SelfInit(self):
        return _SpicePlanetStateMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _SpicePlanetStateMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _SpicePlanetStateMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _SpicePlanetStateMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_SpicePlanetStateMsgPayload.SysModel_ModelTag_get, _SpicePlanetStateMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_SpicePlanetStateMsgPayload.SysModel_CallCounts_get, _SpicePlanetStateMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_SpicePlanetStateMsgPayload.SysModel_RNGSeed_get, _SpicePlanetStateMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_SpicePlanetStateMsgPayload.SysModel_moduleID_get, _SpicePlanetStateMsgPayload.SysModel_moduleID_set)

# Register SysModel in _SpicePlanetStateMsgPayload:
_SpicePlanetStateMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _SpicePlanetStateMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _SpicePlanetStateMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _SpicePlanetStateMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _SpicePlanetStateMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _SpicePlanetStateMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _SpicePlanetStateMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _SpicePlanetStateMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _SpicePlanetStateMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _SpicePlanetStateMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _SpicePlanetStateMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _SpicePlanetStateMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _SpicePlanetStateMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

MAX_BODY_NAME_LENGTH = _SpicePlanetStateMsgPayload.MAX_BODY_NAME_LENGTH
class SpicePlanetStateMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    J2000Current = property(_SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayload_J2000Current_get, _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayload_J2000Current_set)
    PositionVector = property(_SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayload_PositionVector_get, _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayload_PositionVector_set)
    VelocityVector = property(_SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayload_VelocityVector_get, _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayload_VelocityVector_set)
    J20002Pfix = property(_SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayload_J20002Pfix_get, _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayload_J20002Pfix_set)
    J20002Pfix_dot = property(_SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayload_J20002Pfix_dot_get, _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayload_J20002Pfix_dot_set)
    computeOrient = property(_SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayload_computeOrient_get, _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayload_computeOrient_set)
    PlanetName = property(_SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayload_PlanetName_get, _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayload_PlanetName_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayload_swiginit(self, _SpicePlanetStateMsgPayload.new_SpicePlanetStateMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _SpicePlanetStateMsgPayload.delete_SpicePlanetStateMsgPayload

# Register SpicePlanetStateMsgPayload in _SpicePlanetStateMsgPayload:
_SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayload_swigregister(SpicePlanetStateMsgPayload)

def _pprint_SpicePlanetStateMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[SpicePlanetStateMsgPayload.__repr__] = _pprint_SpicePlanetStateMsgPayload

class SpicePlanetStateMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_SpicePlanetStateMsgPayload.SpicePlanetStateMsgReader_bskLogger_get, _SpicePlanetStateMsgPayload.SpicePlanetStateMsgReader_bskLogger_set)
    zeroMsgPayload = property(_SpicePlanetStateMsgPayload.SpicePlanetStateMsgReader_zeroMsgPayload_get, _SpicePlanetStateMsgPayload.SpicePlanetStateMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _SpicePlanetStateMsgPayload.SpicePlanetStateMsgReader_swiginit(self, _SpicePlanetStateMsgPayload.new_SpicePlanetStateMsgReader(*args))

    def __call__(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgReader___call__(self)

    def isLinked(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgReader_isLinked(self)

    def isWritten(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgReader_isWritten(self)

    def timeWritten(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgReader_timeWritten(self)

    def moduleID(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == SpicePlanetStateMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.SpicePlanetStateMsgPayload import SpicePlanetStateMsg_C
            if type(source) == SpicePlanetStateMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<SpicePlanetStateMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == SpicePlanetStateMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.SpicePlanetStateMsgPayload import SpicePlanetStateMsg_C
        except ImportError:
            return 0

        if type(source) == SpicePlanetStateMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _SpicePlanetStateMsgPayload.delete_SpicePlanetStateMsgReader

# Register SpicePlanetStateMsgReader in _SpicePlanetStateMsgPayload:
_SpicePlanetStateMsgPayload.SpicePlanetStateMsgReader_swigregister(SpicePlanetStateMsgReader)
class SpicePlanetStateMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SpicePlanetStateMsgPayload.SpicePlanetStateMsgWriter_swiginit(self, _SpicePlanetStateMsgPayload.new_SpicePlanetStateMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _SpicePlanetStateMsgPayload.delete_SpicePlanetStateMsgWriter

# Register SpicePlanetStateMsgWriter in _SpicePlanetStateMsgPayload:
_SpicePlanetStateMsgPayload.SpicePlanetStateMsgWriter_swigregister(SpicePlanetStateMsgWriter)
class SpicePlanetStateMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_SpicePlanetStateMsgPayload.SpicePlanetStateMsg_write_get, _SpicePlanetStateMsgPayload.SpicePlanetStateMsg_write_set)

    def addSubscriber(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsg_addSubscriber(self)

    def addAuthor(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_SpicePlanetStateMsgPayload.SpicePlanetStateMsg_zeroMsgPayload_get, _SpicePlanetStateMsgPayload.SpicePlanetStateMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsg_isLinked(self)

    def getPayloadSize(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _SpicePlanetStateMsgPayload.SpicePlanetStateMsg_swiginit(self, _SpicePlanetStateMsgPayload.new_SpicePlanetStateMsg())
    __swig_destroy__ = _SpicePlanetStateMsgPayload.delete_SpicePlanetStateMsg

# Register SpicePlanetStateMsg in _SpicePlanetStateMsgPayload:
_SpicePlanetStateMsgPayload.SpicePlanetStateMsg_swigregister(SpicePlanetStateMsg)
class SpicePlanetStateMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SpicePlanetStateMsgPayload.SpicePlanetStateMsgRecorder_swiginit(self, _SpicePlanetStateMsgPayload.new_SpicePlanetStateMsgRecorder(*args))
    __swig_destroy__ = _SpicePlanetStateMsgPayload.delete_SpicePlanetStateMsgRecorder

    def SelfInit(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgRecorder___record_vector(self)

    def size(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgRecorder_clear(self)
    bskLogger = property(_SpicePlanetStateMsgPayload.SpicePlanetStateMsgRecorder_bskLogger_get, _SpicePlanetStateMsgPayload.SpicePlanetStateMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgRecorder_updateTimeInterval(self, timeDiff)

    def _J2000Current_array(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgRecorder__J2000Current_array(self)

    @property
    def J2000Current(self):
        return self._J2000Current_array()


    def _PositionVector_array(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgRecorder__PositionVector_array(self)

    @property
    def PositionVector(self):
        return self._PositionVector_array()


    def _VelocityVector_array(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgRecorder__VelocityVector_array(self)

    @property
    def VelocityVector(self):
        return self._VelocityVector_array()


    def _J20002Pfix_array(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgRecorder__J20002Pfix_array(self)

    @property
    def J20002Pfix(self):
        return self._J20002Pfix_array()


    def _J20002Pfix_dot_array(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgRecorder__J20002Pfix_dot_array(self)

    @property
    def J20002Pfix_dot(self):
        return self._J20002Pfix_dot_array()


    def _computeOrient_array(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgRecorder__computeOrient_array(self)

    @property
    def computeOrient(self):
        return self._computeOrient_array()


    def _PlanetName_list(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgRecorder__PlanetName_list(self)

    @property
    def PlanetName(self):
        return np.array(self._PlanetName_list())


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register SpicePlanetStateMsgRecorder in _SpicePlanetStateMsgPayload:
_SpicePlanetStateMsgPayload.SpicePlanetStateMsgRecorder_swigregister(SpicePlanetStateMsgRecorder)
class SpicePlanetStateMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayloadVector___bool__(self)

    def __len__(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayloadVector_pop(self)

    def append(self, x):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayloadVector_append(self, x)

    def empty(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayloadVector_empty(self)

    def size(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayloadVector_size(self)

    def swap(self, v):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayloadVector_swap(self, v)

    def begin(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayloadVector_begin(self)

    def end(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayloadVector_end(self)

    def rbegin(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayloadVector_rbegin(self)

    def rend(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayloadVector_rend(self)

    def clear(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayloadVector_swiginit(self, _SpicePlanetStateMsgPayload.new_SpicePlanetStateMsgPayloadVector(*args))

    def push_back(self, x):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayloadVector_push_back(self, x)

    def front(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayloadVector_front(self)

    def back(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayloadVector_capacity(self)

    def get_all(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _SpicePlanetStateMsgPayload.delete_SpicePlanetStateMsgPayloadVector

# Register SpicePlanetStateMsgPayloadVector in _SpicePlanetStateMsgPayload:
_SpicePlanetStateMsgPayload.SpicePlanetStateMsgPayloadVector_swigregister(SpicePlanetStateMsgPayloadVector)
class SpicePlanetStateMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsVector_empty(self)

    def size(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsVector_begin(self)

    def end(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsVector_rend(self)

    def clear(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsVector_swiginit(self, _SpicePlanetStateMsgPayload.new_SpicePlanetStateMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsVector_front(self)

    def back(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _SpicePlanetStateMsgPayload.delete_SpicePlanetStateMsgOutMsgsVector

# Register SpicePlanetStateMsgOutMsgsVector in _SpicePlanetStateMsgPayload:
_SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsVector_swigregister(SpicePlanetStateMsgOutMsgsVector)
class SpicePlanetStateMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsPtrVector_swiginit(self, _SpicePlanetStateMsgPayload.new_SpicePlanetStateMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _SpicePlanetStateMsgPayload.delete_SpicePlanetStateMsgOutMsgsPtrVector

# Register SpicePlanetStateMsgOutMsgsPtrVector in _SpicePlanetStateMsgPayload:
_SpicePlanetStateMsgPayload.SpicePlanetStateMsgOutMsgsPtrVector_swigregister(SpicePlanetStateMsgOutMsgsPtrVector)
class SpicePlanetStateMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgInMsgsVector_pop(self)

    def append(self, x):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgInMsgsVector_append(self, x)

    def empty(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgInMsgsVector_empty(self)

    def size(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgInMsgsVector_size(self)

    def swap(self, v):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgInMsgsVector_begin(self)

    def end(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgInMsgsVector_end(self)

    def rbegin(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgInMsgsVector_rend(self)

    def clear(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _SpicePlanetStateMsgPayload.SpicePlanetStateMsgInMsgsVector_swiginit(self, _SpicePlanetStateMsgPayload.new_SpicePlanetStateMsgInMsgsVector(*args))

    def push_back(self, x):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgInMsgsVector_front(self)

    def back(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _SpicePlanetStateMsgPayload.delete_SpicePlanetStateMsgInMsgsVector

# Register SpicePlanetStateMsgInMsgsVector in _SpicePlanetStateMsgPayload:
_SpicePlanetStateMsgPayload.SpicePlanetStateMsgInMsgsVector_swigregister(SpicePlanetStateMsgInMsgsVector)
class SpicePlanetStateMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_SpicePlanetStateMsgPayload.SpicePlanetStateMsg_C_header_get, _SpicePlanetStateMsgPayload.SpicePlanetStateMsg_C_header_set)
    payload = property(_SpicePlanetStateMsgPayload.SpicePlanetStateMsg_C_payload_get, _SpicePlanetStateMsgPayload.SpicePlanetStateMsg_C_payload_set)
    payloadPointer = property(_SpicePlanetStateMsgPayload.SpicePlanetStateMsg_C_payloadPointer_get, _SpicePlanetStateMsgPayload.SpicePlanetStateMsg_C_payloadPointer_set)
    headerPointer = property(_SpicePlanetStateMsgPayload.SpicePlanetStateMsg_C_headerPointer_get, _SpicePlanetStateMsgPayload.SpicePlanetStateMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _SpicePlanetStateMsgPayload.SpicePlanetStateMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import SpicePlanetStateMsg
        if type(source) == type(self):
            SpicePlanetStateMsg_C_subscribe(self, source)
        elif type(source) == SpicePlanetStateMsg:
            SpicePlanetStateMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            SpicePlanetStateMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe SpicePlanetStateMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        SpicePlanetStateMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import SpicePlanetStateMsg
        if type(source) == type(self):
            return (SpicePlanetStateMsg_C_isSubscribedTo(self, source))
        elif type(source) == SpicePlanetStateMsg:
            return (SpicePlanetStateMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (SpicePlanetStateMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        SpicePlanetStateMsg_C_addAuthor(self, self)
        if data:
            SpicePlanetStateMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        SpicePlanetStateMsg_C_addAuthor(self, self)
        SpicePlanetStateMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return SpicePlanetStateMsg_C_read(self)


    def __init__(self):
        _SpicePlanetStateMsgPayload.SpicePlanetStateMsg_C_swiginit(self, _SpicePlanetStateMsgPayload.new_SpicePlanetStateMsg_C())
    __swig_destroy__ = _SpicePlanetStateMsgPayload.delete_SpicePlanetStateMsg_C

# Register SpicePlanetStateMsg_C in _SpicePlanetStateMsgPayload:
_SpicePlanetStateMsgPayload.SpicePlanetStateMsg_C_swigregister(SpicePlanetStateMsg_C)

def SpicePlanetStateMsg_cpp_subscribe(subscriber, source):
    return _SpicePlanetStateMsgPayload.SpicePlanetStateMsg_cpp_subscribe(subscriber, source)

def SpicePlanetStateMsg_C_subscribe(subscriber, source):
    return _SpicePlanetStateMsgPayload.SpicePlanetStateMsg_C_subscribe(subscriber, source)

def SpicePlanetStateMsg_addr_subscribe(subscriber, sourceAddr):
    return _SpicePlanetStateMsgPayload.SpicePlanetStateMsg_addr_subscribe(subscriber, sourceAddr)

def SpicePlanetStateMsg_unsubscribe(subscriber):
    return _SpicePlanetStateMsgPayload.SpicePlanetStateMsg_unsubscribe(subscriber)

def SpicePlanetStateMsg_C_isSubscribedTo(subscriber, source):
    return _SpicePlanetStateMsgPayload.SpicePlanetStateMsg_C_isSubscribedTo(subscriber, source)

def SpicePlanetStateMsg_cpp_isSubscribedTo(subscriber, source):
    return _SpicePlanetStateMsgPayload.SpicePlanetStateMsg_cpp_isSubscribedTo(subscriber, source)

def SpicePlanetStateMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _SpicePlanetStateMsgPayload.SpicePlanetStateMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def SpicePlanetStateMsg_C_addAuthor(coowner, data):
    return _SpicePlanetStateMsgPayload.SpicePlanetStateMsg_C_addAuthor(coowner, data)

def SpicePlanetStateMsg_C_init(owner):
    return _SpicePlanetStateMsgPayload.SpicePlanetStateMsg_C_init(owner)

def SpicePlanetStateMsg_C_isLinked(data):
    return _SpicePlanetStateMsgPayload.SpicePlanetStateMsg_C_isLinked(data)

def SpicePlanetStateMsg_C_isWritten(data):
    return _SpicePlanetStateMsgPayload.SpicePlanetStateMsg_C_isWritten(data)

def SpicePlanetStateMsg_C_timeWritten(data):
    return _SpicePlanetStateMsgPayload.SpicePlanetStateMsg_C_timeWritten(data)

def SpicePlanetStateMsg_C_moduleID(data):
    return _SpicePlanetStateMsgPayload.SpicePlanetStateMsg_C_moduleID(data)

def SpicePlanetStateMsg_C_write(data, destination, moduleID, callTime):
    return _SpicePlanetStateMsgPayload.SpicePlanetStateMsg_C_write(data, destination, moduleID, callTime)

def SpicePlanetStateMsg_C_read(source):
    return _SpicePlanetStateMsgPayload.SpicePlanetStateMsg_C_read(source)

def SpicePlanetStateMsg_C_zeroMsgPayload():
    return _SpicePlanetStateMsgPayload.SpicePlanetStateMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_SpicePlanetStateMsgPayload.MsgHeader_isLinked_get, _SpicePlanetStateMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_SpicePlanetStateMsgPayload.MsgHeader_isWritten_get, _SpicePlanetStateMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_SpicePlanetStateMsgPayload.MsgHeader_timeWritten_get, _SpicePlanetStateMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_SpicePlanetStateMsgPayload.MsgHeader_moduleID_get, _SpicePlanetStateMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _SpicePlanetStateMsgPayload.MsgHeader_swiginit(self, _SpicePlanetStateMsgPayload.new_MsgHeader())
    __swig_destroy__ = _SpicePlanetStateMsgPayload.delete_MsgHeader

# Register MsgHeader in _SpicePlanetStateMsgPayload:
_SpicePlanetStateMsgPayload.MsgHeader_swigregister(MsgHeader)

