# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _SCStatesMsgPayload
else:
    import _SCStatesMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SCStatesMsgPayload.delete_SwigPyIterator

    def value(self):
        return _SCStatesMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _SCStatesMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _SCStatesMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _SCStatesMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _SCStatesMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _SCStatesMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _SCStatesMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _SCStatesMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _SCStatesMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _SCStatesMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _SCStatesMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _SCStatesMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _SCStatesMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _SCStatesMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _SCStatesMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _SCStatesMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _SCStatesMsgPayload:
_SCStatesMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _SCStatesMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _SCStatesMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _SCStatesMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _SCStatesMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _SCStatesMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _SCStatesMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _SCStatesMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _SCStatesMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _SCStatesMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _SCStatesMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _SCStatesMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _SCStatesMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _SCStatesMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _SCStatesMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _SCStatesMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _SCStatesMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SCStatesMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SCStatesMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _SCStatesMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _SCStatesMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _SCStatesMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SCStatesMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SCStatesMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SCStatesMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SCStatesMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SCStatesMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _SCStatesMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _SCStatesMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _SCStatesMsgPayload.TimeVector_empty(self)

    def size(self):
        return _SCStatesMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _SCStatesMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _SCStatesMsgPayload.TimeVector_begin(self)

    def end(self):
        return _SCStatesMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _SCStatesMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _SCStatesMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _SCStatesMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _SCStatesMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _SCStatesMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _SCStatesMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _SCStatesMsgPayload.TimeVector_swiginit(self, _SCStatesMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _SCStatesMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _SCStatesMsgPayload.TimeVector_front(self)

    def back(self):
        return _SCStatesMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _SCStatesMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _SCStatesMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _SCStatesMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _SCStatesMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _SCStatesMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _SCStatesMsgPayload.delete_TimeVector

# Register TimeVector in _SCStatesMsgPayload:
_SCStatesMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SCStatesMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SCStatesMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _SCStatesMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _SCStatesMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _SCStatesMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SCStatesMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SCStatesMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SCStatesMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SCStatesMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SCStatesMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _SCStatesMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _SCStatesMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _SCStatesMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _SCStatesMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _SCStatesMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _SCStatesMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _SCStatesMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _SCStatesMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _SCStatesMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _SCStatesMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _SCStatesMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _SCStatesMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _SCStatesMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _SCStatesMsgPayload.DoubleVector_swiginit(self, _SCStatesMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _SCStatesMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _SCStatesMsgPayload.DoubleVector_front(self)

    def back(self):
        return _SCStatesMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _SCStatesMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _SCStatesMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _SCStatesMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _SCStatesMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _SCStatesMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _SCStatesMsgPayload.delete_DoubleVector

# Register DoubleVector in _SCStatesMsgPayload:
_SCStatesMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SCStatesMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SCStatesMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _SCStatesMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _SCStatesMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _SCStatesMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SCStatesMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SCStatesMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SCStatesMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SCStatesMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SCStatesMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _SCStatesMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _SCStatesMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _SCStatesMsgPayload.StringVector_empty(self)

    def size(self):
        return _SCStatesMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _SCStatesMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _SCStatesMsgPayload.StringVector_begin(self)

    def end(self):
        return _SCStatesMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _SCStatesMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _SCStatesMsgPayload.StringVector_rend(self)

    def clear(self):
        return _SCStatesMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _SCStatesMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _SCStatesMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _SCStatesMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _SCStatesMsgPayload.StringVector_swiginit(self, _SCStatesMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _SCStatesMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _SCStatesMsgPayload.StringVector_front(self)

    def back(self):
        return _SCStatesMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _SCStatesMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _SCStatesMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _SCStatesMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _SCStatesMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _SCStatesMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _SCStatesMsgPayload.delete_StringVector

# Register StringVector in _SCStatesMsgPayload:
_SCStatesMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _SCStatesMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _SCStatesMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _SCStatesMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _SCStatesMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _SCStatesMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _SCStatesMsgPayload.NANO2SEC
SEC2NANO = _SCStatesMsgPayload.SEC2NANO
SEC2HOUR = _SCStatesMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _SCStatesMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _SCStatesMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _SCStatesMsgPayload.secToNano(seconds)
BOOL_FALSE = _SCStatesMsgPayload.BOOL_FALSE
BOOL_TRUE = _SCStatesMsgPayload.BOOL_TRUE
AVAILABLE = _SCStatesMsgPayload.AVAILABLE
UNAVAILABLE = _SCStatesMsgPayload.UNAVAILABLE
BalancedWheels = _SCStatesMsgPayload.BalancedWheels
JitterSimple = _SCStatesMsgPayload.JitterSimple
JitterFullyCoupled = _SCStatesMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SCStatesMsgPayload.SysModel_swiginit(self, _SCStatesMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _SCStatesMsgPayload.delete_SysModel

    def SelfInit(self):
        return _SCStatesMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _SCStatesMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _SCStatesMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _SCStatesMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_SCStatesMsgPayload.SysModel_ModelTag_get, _SCStatesMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_SCStatesMsgPayload.SysModel_CallCounts_get, _SCStatesMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_SCStatesMsgPayload.SysModel_RNGSeed_get, _SCStatesMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_SCStatesMsgPayload.SysModel_moduleID_get, _SCStatesMsgPayload.SysModel_moduleID_set)

# Register SysModel in _SCStatesMsgPayload:
_SCStatesMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _SCStatesMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _SCStatesMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _SCStatesMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _SCStatesMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _SCStatesMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _SCStatesMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _SCStatesMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _SCStatesMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _SCStatesMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _SCStatesMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _SCStatesMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _SCStatesMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class SCStatesMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r_BN_N = property(_SCStatesMsgPayload.SCStatesMsgPayload_r_BN_N_get, _SCStatesMsgPayload.SCStatesMsgPayload_r_BN_N_set)
    v_BN_N = property(_SCStatesMsgPayload.SCStatesMsgPayload_v_BN_N_get, _SCStatesMsgPayload.SCStatesMsgPayload_v_BN_N_set)
    r_CN_N = property(_SCStatesMsgPayload.SCStatesMsgPayload_r_CN_N_get, _SCStatesMsgPayload.SCStatesMsgPayload_r_CN_N_set)
    v_CN_N = property(_SCStatesMsgPayload.SCStatesMsgPayload_v_CN_N_get, _SCStatesMsgPayload.SCStatesMsgPayload_v_CN_N_set)
    sigma_BN = property(_SCStatesMsgPayload.SCStatesMsgPayload_sigma_BN_get, _SCStatesMsgPayload.SCStatesMsgPayload_sigma_BN_set)
    omega_BN_B = property(_SCStatesMsgPayload.SCStatesMsgPayload_omega_BN_B_get, _SCStatesMsgPayload.SCStatesMsgPayload_omega_BN_B_set)
    omegaDot_BN_B = property(_SCStatesMsgPayload.SCStatesMsgPayload_omegaDot_BN_B_get, _SCStatesMsgPayload.SCStatesMsgPayload_omegaDot_BN_B_set)
    TotalAccumDVBdy = property(_SCStatesMsgPayload.SCStatesMsgPayload_TotalAccumDVBdy_get, _SCStatesMsgPayload.SCStatesMsgPayload_TotalAccumDVBdy_set)
    TotalAccumDV_BN_B = property(_SCStatesMsgPayload.SCStatesMsgPayload_TotalAccumDV_BN_B_get, _SCStatesMsgPayload.SCStatesMsgPayload_TotalAccumDV_BN_B_set)
    TotalAccumDV_CN_N = property(_SCStatesMsgPayload.SCStatesMsgPayload_TotalAccumDV_CN_N_get, _SCStatesMsgPayload.SCStatesMsgPayload_TotalAccumDV_CN_N_set)
    nonConservativeAccelpntB_B = property(_SCStatesMsgPayload.SCStatesMsgPayload_nonConservativeAccelpntB_B_get, _SCStatesMsgPayload.SCStatesMsgPayload_nonConservativeAccelpntB_B_set)
    MRPSwitchCount = property(_SCStatesMsgPayload.SCStatesMsgPayload_MRPSwitchCount_get, _SCStatesMsgPayload.SCStatesMsgPayload_MRPSwitchCount_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _SCStatesMsgPayload.SCStatesMsgPayload_swiginit(self, _SCStatesMsgPayload.new_SCStatesMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _SCStatesMsgPayload.delete_SCStatesMsgPayload

# Register SCStatesMsgPayload in _SCStatesMsgPayload:
_SCStatesMsgPayload.SCStatesMsgPayload_swigregister(SCStatesMsgPayload)

def _pprint_SCStatesMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[SCStatesMsgPayload.__repr__] = _pprint_SCStatesMsgPayload

class SCStatesMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_SCStatesMsgPayload.SCStatesMsgReader_bskLogger_get, _SCStatesMsgPayload.SCStatesMsgReader_bskLogger_set)
    zeroMsgPayload = property(_SCStatesMsgPayload.SCStatesMsgReader_zeroMsgPayload_get, _SCStatesMsgPayload.SCStatesMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _SCStatesMsgPayload.SCStatesMsgReader_swiginit(self, _SCStatesMsgPayload.new_SCStatesMsgReader(*args))

    def __call__(self):
        return _SCStatesMsgPayload.SCStatesMsgReader___call__(self)

    def isLinked(self):
        return _SCStatesMsgPayload.SCStatesMsgReader_isLinked(self)

    def isWritten(self):
        return _SCStatesMsgPayload.SCStatesMsgReader_isWritten(self)

    def timeWritten(self):
        return _SCStatesMsgPayload.SCStatesMsgReader_timeWritten(self)

    def moduleID(self):
        return _SCStatesMsgPayload.SCStatesMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _SCStatesMsgPayload.SCStatesMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _SCStatesMsgPayload.SCStatesMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _SCStatesMsgPayload.SCStatesMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _SCStatesMsgPayload.SCStatesMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _SCStatesMsgPayload.SCStatesMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _SCStatesMsgPayload.SCStatesMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _SCStatesMsgPayload.SCStatesMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _SCStatesMsgPayload.SCStatesMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _SCStatesMsgPayload.SCStatesMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _SCStatesMsgPayload.SCStatesMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == SCStatesMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.SCStatesMsgPayload import SCStatesMsg_C
            if type(source) == SCStatesMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<SCStatesMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == SCStatesMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.SCStatesMsgPayload import SCStatesMsg_C
        except ImportError:
            return 0

        if type(source) == SCStatesMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _SCStatesMsgPayload.delete_SCStatesMsgReader

# Register SCStatesMsgReader in _SCStatesMsgPayload:
_SCStatesMsgPayload.SCStatesMsgReader_swigregister(SCStatesMsgReader)
class SCStatesMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SCStatesMsgPayload.SCStatesMsgWriter_swiginit(self, _SCStatesMsgPayload.new_SCStatesMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _SCStatesMsgPayload.SCStatesMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _SCStatesMsgPayload.delete_SCStatesMsgWriter

# Register SCStatesMsgWriter in _SCStatesMsgPayload:
_SCStatesMsgPayload.SCStatesMsgWriter_swigregister(SCStatesMsgWriter)
class SCStatesMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_SCStatesMsgPayload.SCStatesMsg_write_get, _SCStatesMsgPayload.SCStatesMsg_write_set)

    def addSubscriber(self):
        return _SCStatesMsgPayload.SCStatesMsg_addSubscriber(self)

    def addAuthor(self):
        return _SCStatesMsgPayload.SCStatesMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _SCStatesMsgPayload.SCStatesMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _SCStatesMsgPayload.SCStatesMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _SCStatesMsgPayload.SCStatesMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_SCStatesMsgPayload.SCStatesMsg_zeroMsgPayload_get, _SCStatesMsgPayload.SCStatesMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _SCStatesMsgPayload.SCStatesMsg_isLinked(self)

    def getPayloadSize(self):
        return _SCStatesMsgPayload.SCStatesMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _SCStatesMsgPayload.SCStatesMsg_swiginit(self, _SCStatesMsgPayload.new_SCStatesMsg())
    __swig_destroy__ = _SCStatesMsgPayload.delete_SCStatesMsg

# Register SCStatesMsg in _SCStatesMsgPayload:
_SCStatesMsgPayload.SCStatesMsg_swigregister(SCStatesMsg)
class SCStatesMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SCStatesMsgPayload.SCStatesMsgRecorder_swiginit(self, _SCStatesMsgPayload.new_SCStatesMsgRecorder(*args))
    __swig_destroy__ = _SCStatesMsgPayload.delete_SCStatesMsgRecorder

    def SelfInit(self):
        return _SCStatesMsgPayload.SCStatesMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _SCStatesMsgPayload.SCStatesMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _SCStatesMsgPayload.SCStatesMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _SCStatesMsgPayload.SCStatesMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _SCStatesMsgPayload.SCStatesMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _SCStatesMsgPayload.SCStatesMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _SCStatesMsgPayload.SCStatesMsgRecorder___record_vector(self)

    def size(self):
        return _SCStatesMsgPayload.SCStatesMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _SCStatesMsgPayload.SCStatesMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _SCStatesMsgPayload.SCStatesMsgRecorder_clear(self)
    bskLogger = property(_SCStatesMsgPayload.SCStatesMsgRecorder_bskLogger_get, _SCStatesMsgPayload.SCStatesMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _SCStatesMsgPayload.SCStatesMsgRecorder_updateTimeInterval(self, timeDiff)

    def _r_BN_N_array(self):
        return _SCStatesMsgPayload.SCStatesMsgRecorder__r_BN_N_array(self)

    @property
    def r_BN_N(self):
        return self._r_BN_N_array()


    def _v_BN_N_array(self):
        return _SCStatesMsgPayload.SCStatesMsgRecorder__v_BN_N_array(self)

    @property
    def v_BN_N(self):
        return self._v_BN_N_array()


    def _r_CN_N_array(self):
        return _SCStatesMsgPayload.SCStatesMsgRecorder__r_CN_N_array(self)

    @property
    def r_CN_N(self):
        return self._r_CN_N_array()


    def _v_CN_N_array(self):
        return _SCStatesMsgPayload.SCStatesMsgRecorder__v_CN_N_array(self)

    @property
    def v_CN_N(self):
        return self._v_CN_N_array()


    def _sigma_BN_array(self):
        return _SCStatesMsgPayload.SCStatesMsgRecorder__sigma_BN_array(self)

    @property
    def sigma_BN(self):
        return self._sigma_BN_array()


    def _omega_BN_B_array(self):
        return _SCStatesMsgPayload.SCStatesMsgRecorder__omega_BN_B_array(self)

    @property
    def omega_BN_B(self):
        return self._omega_BN_B_array()


    def _omegaDot_BN_B_array(self):
        return _SCStatesMsgPayload.SCStatesMsgRecorder__omegaDot_BN_B_array(self)

    @property
    def omegaDot_BN_B(self):
        return self._omegaDot_BN_B_array()


    def _TotalAccumDVBdy_array(self):
        return _SCStatesMsgPayload.SCStatesMsgRecorder__TotalAccumDVBdy_array(self)

    @property
    def TotalAccumDVBdy(self):
        return self._TotalAccumDVBdy_array()


    def _TotalAccumDV_BN_B_array(self):
        return _SCStatesMsgPayload.SCStatesMsgRecorder__TotalAccumDV_BN_B_array(self)

    @property
    def TotalAccumDV_BN_B(self):
        return self._TotalAccumDV_BN_B_array()


    def _TotalAccumDV_CN_N_array(self):
        return _SCStatesMsgPayload.SCStatesMsgRecorder__TotalAccumDV_CN_N_array(self)

    @property
    def TotalAccumDV_CN_N(self):
        return self._TotalAccumDV_CN_N_array()


    def _nonConservativeAccelpntB_B_array(self):
        return _SCStatesMsgPayload.SCStatesMsgRecorder__nonConservativeAccelpntB_B_array(self)

    @property
    def nonConservativeAccelpntB_B(self):
        return self._nonConservativeAccelpntB_B_array()


    def _MRPSwitchCount_array(self):
        return _SCStatesMsgPayload.SCStatesMsgRecorder__MRPSwitchCount_array(self)

    @property
    def MRPSwitchCount(self):
        return self._MRPSwitchCount_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register SCStatesMsgRecorder in _SCStatesMsgPayload:
_SCStatesMsgPayload.SCStatesMsgRecorder_swigregister(SCStatesMsgRecorder)
class SCStatesMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SCStatesMsgPayload.SCStatesMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SCStatesMsgPayload.SCStatesMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _SCStatesMsgPayload.SCStatesMsgPayloadVector___bool__(self)

    def __len__(self):
        return _SCStatesMsgPayload.SCStatesMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _SCStatesMsgPayload.SCStatesMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SCStatesMsgPayload.SCStatesMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SCStatesMsgPayload.SCStatesMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SCStatesMsgPayload.SCStatesMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SCStatesMsgPayload.SCStatesMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SCStatesMsgPayload.SCStatesMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _SCStatesMsgPayload.SCStatesMsgPayloadVector_pop(self)

    def append(self, x):
        return _SCStatesMsgPayload.SCStatesMsgPayloadVector_append(self, x)

    def empty(self):
        return _SCStatesMsgPayload.SCStatesMsgPayloadVector_empty(self)

    def size(self):
        return _SCStatesMsgPayload.SCStatesMsgPayloadVector_size(self)

    def swap(self, v):
        return _SCStatesMsgPayload.SCStatesMsgPayloadVector_swap(self, v)

    def begin(self):
        return _SCStatesMsgPayload.SCStatesMsgPayloadVector_begin(self)

    def end(self):
        return _SCStatesMsgPayload.SCStatesMsgPayloadVector_end(self)

    def rbegin(self):
        return _SCStatesMsgPayload.SCStatesMsgPayloadVector_rbegin(self)

    def rend(self):
        return _SCStatesMsgPayload.SCStatesMsgPayloadVector_rend(self)

    def clear(self):
        return _SCStatesMsgPayload.SCStatesMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _SCStatesMsgPayload.SCStatesMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _SCStatesMsgPayload.SCStatesMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _SCStatesMsgPayload.SCStatesMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _SCStatesMsgPayload.SCStatesMsgPayloadVector_swiginit(self, _SCStatesMsgPayload.new_SCStatesMsgPayloadVector(*args))

    def push_back(self, x):
        return _SCStatesMsgPayload.SCStatesMsgPayloadVector_push_back(self, x)

    def front(self):
        return _SCStatesMsgPayload.SCStatesMsgPayloadVector_front(self)

    def back(self):
        return _SCStatesMsgPayload.SCStatesMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _SCStatesMsgPayload.SCStatesMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _SCStatesMsgPayload.SCStatesMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _SCStatesMsgPayload.SCStatesMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _SCStatesMsgPayload.SCStatesMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _SCStatesMsgPayload.SCStatesMsgPayloadVector_capacity(self)

    def get_all(self):
        return _SCStatesMsgPayload.SCStatesMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _SCStatesMsgPayload.delete_SCStatesMsgPayloadVector

# Register SCStatesMsgPayloadVector in _SCStatesMsgPayload:
_SCStatesMsgPayload.SCStatesMsgPayloadVector_swigregister(SCStatesMsgPayloadVector)
class SCStatesMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsVector_empty(self)

    def size(self):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsVector_begin(self)

    def end(self):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsVector_rend(self)

    def clear(self):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _SCStatesMsgPayload.SCStatesMsgOutMsgsVector_swiginit(self, _SCStatesMsgPayload.new_SCStatesMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsVector_front(self)

    def back(self):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _SCStatesMsgPayload.delete_SCStatesMsgOutMsgsVector

# Register SCStatesMsgOutMsgsVector in _SCStatesMsgPayload:
_SCStatesMsgPayload.SCStatesMsgOutMsgsVector_swigregister(SCStatesMsgOutMsgsVector)
class SCStatesMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _SCStatesMsgPayload.SCStatesMsgOutMsgsPtrVector_swiginit(self, _SCStatesMsgPayload.new_SCStatesMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _SCStatesMsgPayload.SCStatesMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _SCStatesMsgPayload.delete_SCStatesMsgOutMsgsPtrVector

# Register SCStatesMsgOutMsgsPtrVector in _SCStatesMsgPayload:
_SCStatesMsgPayload.SCStatesMsgOutMsgsPtrVector_swigregister(SCStatesMsgOutMsgsPtrVector)
class SCStatesMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SCStatesMsgPayload.SCStatesMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SCStatesMsgPayload.SCStatesMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _SCStatesMsgPayload.SCStatesMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _SCStatesMsgPayload.SCStatesMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _SCStatesMsgPayload.SCStatesMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SCStatesMsgPayload.SCStatesMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SCStatesMsgPayload.SCStatesMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SCStatesMsgPayload.SCStatesMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SCStatesMsgPayload.SCStatesMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SCStatesMsgPayload.SCStatesMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _SCStatesMsgPayload.SCStatesMsgInMsgsVector_pop(self)

    def append(self, x):
        return _SCStatesMsgPayload.SCStatesMsgInMsgsVector_append(self, x)

    def empty(self):
        return _SCStatesMsgPayload.SCStatesMsgInMsgsVector_empty(self)

    def size(self):
        return _SCStatesMsgPayload.SCStatesMsgInMsgsVector_size(self)

    def swap(self, v):
        return _SCStatesMsgPayload.SCStatesMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _SCStatesMsgPayload.SCStatesMsgInMsgsVector_begin(self)

    def end(self):
        return _SCStatesMsgPayload.SCStatesMsgInMsgsVector_end(self)

    def rbegin(self):
        return _SCStatesMsgPayload.SCStatesMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _SCStatesMsgPayload.SCStatesMsgInMsgsVector_rend(self)

    def clear(self):
        return _SCStatesMsgPayload.SCStatesMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _SCStatesMsgPayload.SCStatesMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _SCStatesMsgPayload.SCStatesMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _SCStatesMsgPayload.SCStatesMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _SCStatesMsgPayload.SCStatesMsgInMsgsVector_swiginit(self, _SCStatesMsgPayload.new_SCStatesMsgInMsgsVector(*args))

    def push_back(self, x):
        return _SCStatesMsgPayload.SCStatesMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _SCStatesMsgPayload.SCStatesMsgInMsgsVector_front(self)

    def back(self):
        return _SCStatesMsgPayload.SCStatesMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _SCStatesMsgPayload.SCStatesMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _SCStatesMsgPayload.SCStatesMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _SCStatesMsgPayload.SCStatesMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _SCStatesMsgPayload.SCStatesMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _SCStatesMsgPayload.SCStatesMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _SCStatesMsgPayload.delete_SCStatesMsgInMsgsVector

# Register SCStatesMsgInMsgsVector in _SCStatesMsgPayload:
_SCStatesMsgPayload.SCStatesMsgInMsgsVector_swigregister(SCStatesMsgInMsgsVector)
class SCStatesMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_SCStatesMsgPayload.SCStatesMsg_C_header_get, _SCStatesMsgPayload.SCStatesMsg_C_header_set)
    payload = property(_SCStatesMsgPayload.SCStatesMsg_C_payload_get, _SCStatesMsgPayload.SCStatesMsg_C_payload_set)
    payloadPointer = property(_SCStatesMsgPayload.SCStatesMsg_C_payloadPointer_get, _SCStatesMsgPayload.SCStatesMsg_C_payloadPointer_set)
    headerPointer = property(_SCStatesMsgPayload.SCStatesMsg_C_headerPointer_get, _SCStatesMsgPayload.SCStatesMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _SCStatesMsgPayload.SCStatesMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import SCStatesMsg
        if type(source) == type(self):
            SCStatesMsg_C_subscribe(self, source)
        elif type(source) == SCStatesMsg:
            SCStatesMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            SCStatesMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe SCStatesMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        SCStatesMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import SCStatesMsg
        if type(source) == type(self):
            return (SCStatesMsg_C_isSubscribedTo(self, source))
        elif type(source) == SCStatesMsg:
            return (SCStatesMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (SCStatesMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        SCStatesMsg_C_addAuthor(self, self)
        if data:
            SCStatesMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        SCStatesMsg_C_addAuthor(self, self)
        SCStatesMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return SCStatesMsg_C_read(self)


    def __init__(self):
        _SCStatesMsgPayload.SCStatesMsg_C_swiginit(self, _SCStatesMsgPayload.new_SCStatesMsg_C())
    __swig_destroy__ = _SCStatesMsgPayload.delete_SCStatesMsg_C

# Register SCStatesMsg_C in _SCStatesMsgPayload:
_SCStatesMsgPayload.SCStatesMsg_C_swigregister(SCStatesMsg_C)

def SCStatesMsg_cpp_subscribe(subscriber, source):
    return _SCStatesMsgPayload.SCStatesMsg_cpp_subscribe(subscriber, source)

def SCStatesMsg_C_subscribe(subscriber, source):
    return _SCStatesMsgPayload.SCStatesMsg_C_subscribe(subscriber, source)

def SCStatesMsg_addr_subscribe(subscriber, sourceAddr):
    return _SCStatesMsgPayload.SCStatesMsg_addr_subscribe(subscriber, sourceAddr)

def SCStatesMsg_unsubscribe(subscriber):
    return _SCStatesMsgPayload.SCStatesMsg_unsubscribe(subscriber)

def SCStatesMsg_C_isSubscribedTo(subscriber, source):
    return _SCStatesMsgPayload.SCStatesMsg_C_isSubscribedTo(subscriber, source)

def SCStatesMsg_cpp_isSubscribedTo(subscriber, source):
    return _SCStatesMsgPayload.SCStatesMsg_cpp_isSubscribedTo(subscriber, source)

def SCStatesMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _SCStatesMsgPayload.SCStatesMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def SCStatesMsg_C_addAuthor(coowner, data):
    return _SCStatesMsgPayload.SCStatesMsg_C_addAuthor(coowner, data)

def SCStatesMsg_C_init(owner):
    return _SCStatesMsgPayload.SCStatesMsg_C_init(owner)

def SCStatesMsg_C_isLinked(data):
    return _SCStatesMsgPayload.SCStatesMsg_C_isLinked(data)

def SCStatesMsg_C_isWritten(data):
    return _SCStatesMsgPayload.SCStatesMsg_C_isWritten(data)

def SCStatesMsg_C_timeWritten(data):
    return _SCStatesMsgPayload.SCStatesMsg_C_timeWritten(data)

def SCStatesMsg_C_moduleID(data):
    return _SCStatesMsgPayload.SCStatesMsg_C_moduleID(data)

def SCStatesMsg_C_write(data, destination, moduleID, callTime):
    return _SCStatesMsgPayload.SCStatesMsg_C_write(data, destination, moduleID, callTime)

def SCStatesMsg_C_read(source):
    return _SCStatesMsgPayload.SCStatesMsg_C_read(source)

def SCStatesMsg_C_zeroMsgPayload():
    return _SCStatesMsgPayload.SCStatesMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_SCStatesMsgPayload.MsgHeader_isLinked_get, _SCStatesMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_SCStatesMsgPayload.MsgHeader_isWritten_get, _SCStatesMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_SCStatesMsgPayload.MsgHeader_timeWritten_get, _SCStatesMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_SCStatesMsgPayload.MsgHeader_moduleID_get, _SCStatesMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _SCStatesMsgPayload.MsgHeader_swiginit(self, _SCStatesMsgPayload.new_MsgHeader())
    __swig_destroy__ = _SCStatesMsgPayload.delete_MsgHeader

# Register MsgHeader in _SCStatesMsgPayload:
_SCStatesMsgPayload.MsgHeader_swigregister(MsgHeader)

