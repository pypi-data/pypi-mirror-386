# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _LambertProblemMsgPayload
else:
    import _LambertProblemMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LambertProblemMsgPayload.delete_SwigPyIterator

    def value(self):
        return _LambertProblemMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _LambertProblemMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _LambertProblemMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _LambertProblemMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _LambertProblemMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _LambertProblemMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _LambertProblemMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _LambertProblemMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _LambertProblemMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _LambertProblemMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _LambertProblemMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _LambertProblemMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _LambertProblemMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _LambertProblemMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _LambertProblemMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _LambertProblemMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _LambertProblemMsgPayload:
_LambertProblemMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _LambertProblemMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _LambertProblemMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _LambertProblemMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _LambertProblemMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _LambertProblemMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _LambertProblemMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _LambertProblemMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _LambertProblemMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _LambertProblemMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _LambertProblemMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _LambertProblemMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _LambertProblemMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _LambertProblemMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _LambertProblemMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _LambertProblemMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _LambertProblemMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LambertProblemMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LambertProblemMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _LambertProblemMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _LambertProblemMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _LambertProblemMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LambertProblemMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LambertProblemMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LambertProblemMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LambertProblemMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LambertProblemMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _LambertProblemMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _LambertProblemMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _LambertProblemMsgPayload.TimeVector_empty(self)

    def size(self):
        return _LambertProblemMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _LambertProblemMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _LambertProblemMsgPayload.TimeVector_begin(self)

    def end(self):
        return _LambertProblemMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _LambertProblemMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _LambertProblemMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _LambertProblemMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _LambertProblemMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _LambertProblemMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _LambertProblemMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _LambertProblemMsgPayload.TimeVector_swiginit(self, _LambertProblemMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _LambertProblemMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _LambertProblemMsgPayload.TimeVector_front(self)

    def back(self):
        return _LambertProblemMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _LambertProblemMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _LambertProblemMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _LambertProblemMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _LambertProblemMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _LambertProblemMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _LambertProblemMsgPayload.delete_TimeVector

# Register TimeVector in _LambertProblemMsgPayload:
_LambertProblemMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LambertProblemMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LambertProblemMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _LambertProblemMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _LambertProblemMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _LambertProblemMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LambertProblemMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LambertProblemMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LambertProblemMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LambertProblemMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LambertProblemMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _LambertProblemMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _LambertProblemMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _LambertProblemMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _LambertProblemMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _LambertProblemMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _LambertProblemMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _LambertProblemMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _LambertProblemMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _LambertProblemMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _LambertProblemMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _LambertProblemMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _LambertProblemMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _LambertProblemMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _LambertProblemMsgPayload.DoubleVector_swiginit(self, _LambertProblemMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _LambertProblemMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _LambertProblemMsgPayload.DoubleVector_front(self)

    def back(self):
        return _LambertProblemMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _LambertProblemMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _LambertProblemMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _LambertProblemMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _LambertProblemMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _LambertProblemMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _LambertProblemMsgPayload.delete_DoubleVector

# Register DoubleVector in _LambertProblemMsgPayload:
_LambertProblemMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LambertProblemMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LambertProblemMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _LambertProblemMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _LambertProblemMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _LambertProblemMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LambertProblemMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LambertProblemMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LambertProblemMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LambertProblemMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LambertProblemMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _LambertProblemMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _LambertProblemMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _LambertProblemMsgPayload.StringVector_empty(self)

    def size(self):
        return _LambertProblemMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _LambertProblemMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _LambertProblemMsgPayload.StringVector_begin(self)

    def end(self):
        return _LambertProblemMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _LambertProblemMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _LambertProblemMsgPayload.StringVector_rend(self)

    def clear(self):
        return _LambertProblemMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _LambertProblemMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _LambertProblemMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _LambertProblemMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _LambertProblemMsgPayload.StringVector_swiginit(self, _LambertProblemMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _LambertProblemMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _LambertProblemMsgPayload.StringVector_front(self)

    def back(self):
        return _LambertProblemMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _LambertProblemMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _LambertProblemMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _LambertProblemMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _LambertProblemMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _LambertProblemMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _LambertProblemMsgPayload.delete_StringVector

# Register StringVector in _LambertProblemMsgPayload:
_LambertProblemMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _LambertProblemMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _LambertProblemMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _LambertProblemMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _LambertProblemMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _LambertProblemMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _LambertProblemMsgPayload.NANO2SEC
SEC2NANO = _LambertProblemMsgPayload.SEC2NANO
SEC2HOUR = _LambertProblemMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _LambertProblemMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _LambertProblemMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _LambertProblemMsgPayload.secToNano(seconds)
BOOL_FALSE = _LambertProblemMsgPayload.BOOL_FALSE
BOOL_TRUE = _LambertProblemMsgPayload.BOOL_TRUE
AVAILABLE = _LambertProblemMsgPayload.AVAILABLE
UNAVAILABLE = _LambertProblemMsgPayload.UNAVAILABLE
BalancedWheels = _LambertProblemMsgPayload.BalancedWheels
JitterSimple = _LambertProblemMsgPayload.JitterSimple
JitterFullyCoupled = _LambertProblemMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LambertProblemMsgPayload.SysModel_swiginit(self, _LambertProblemMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _LambertProblemMsgPayload.delete_SysModel

    def SelfInit(self):
        return _LambertProblemMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _LambertProblemMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _LambertProblemMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _LambertProblemMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_LambertProblemMsgPayload.SysModel_ModelTag_get, _LambertProblemMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_LambertProblemMsgPayload.SysModel_CallCounts_get, _LambertProblemMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_LambertProblemMsgPayload.SysModel_RNGSeed_get, _LambertProblemMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_LambertProblemMsgPayload.SysModel_moduleID_get, _LambertProblemMsgPayload.SysModel_moduleID_set)

# Register SysModel in _LambertProblemMsgPayload:
_LambertProblemMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _LambertProblemMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _LambertProblemMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _LambertProblemMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _LambertProblemMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _LambertProblemMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _LambertProblemMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _LambertProblemMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _LambertProblemMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _LambertProblemMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _LambertProblemMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _LambertProblemMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _LambertProblemMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

IZZO = _LambertProblemMsgPayload.IZZO
GOODING = _LambertProblemMsgPayload.GOODING
class LambertProblemMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    solverMethod = property(_LambertProblemMsgPayload.LambertProblemMsgPayload_solverMethod_get, _LambertProblemMsgPayload.LambertProblemMsgPayload_solverMethod_set)
    r1_N = property(_LambertProblemMsgPayload.LambertProblemMsgPayload_r1_N_get, _LambertProblemMsgPayload.LambertProblemMsgPayload_r1_N_set)
    r2_N = property(_LambertProblemMsgPayload.LambertProblemMsgPayload_r2_N_get, _LambertProblemMsgPayload.LambertProblemMsgPayload_r2_N_set)
    transferTime = property(_LambertProblemMsgPayload.LambertProblemMsgPayload_transferTime_get, _LambertProblemMsgPayload.LambertProblemMsgPayload_transferTime_set)
    mu = property(_LambertProblemMsgPayload.LambertProblemMsgPayload_mu_get, _LambertProblemMsgPayload.LambertProblemMsgPayload_mu_set)
    numRevolutions = property(_LambertProblemMsgPayload.LambertProblemMsgPayload_numRevolutions_get, _LambertProblemMsgPayload.LambertProblemMsgPayload_numRevolutions_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _LambertProblemMsgPayload.LambertProblemMsgPayload_swiginit(self, _LambertProblemMsgPayload.new_LambertProblemMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _LambertProblemMsgPayload.delete_LambertProblemMsgPayload

# Register LambertProblemMsgPayload in _LambertProblemMsgPayload:
_LambertProblemMsgPayload.LambertProblemMsgPayload_swigregister(LambertProblemMsgPayload)

def _pprint_LambertProblemMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[LambertProblemMsgPayload.__repr__] = _pprint_LambertProblemMsgPayload

class LambertProblemMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_LambertProblemMsgPayload.LambertProblemMsgReader_bskLogger_get, _LambertProblemMsgPayload.LambertProblemMsgReader_bskLogger_set)
    zeroMsgPayload = property(_LambertProblemMsgPayload.LambertProblemMsgReader_zeroMsgPayload_get, _LambertProblemMsgPayload.LambertProblemMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _LambertProblemMsgPayload.LambertProblemMsgReader_swiginit(self, _LambertProblemMsgPayload.new_LambertProblemMsgReader(*args))

    def __call__(self):
        return _LambertProblemMsgPayload.LambertProblemMsgReader___call__(self)

    def isLinked(self):
        return _LambertProblemMsgPayload.LambertProblemMsgReader_isLinked(self)

    def isWritten(self):
        return _LambertProblemMsgPayload.LambertProblemMsgReader_isWritten(self)

    def timeWritten(self):
        return _LambertProblemMsgPayload.LambertProblemMsgReader_timeWritten(self)

    def moduleID(self):
        return _LambertProblemMsgPayload.LambertProblemMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _LambertProblemMsgPayload.LambertProblemMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _LambertProblemMsgPayload.LambertProblemMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _LambertProblemMsgPayload.LambertProblemMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _LambertProblemMsgPayload.LambertProblemMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _LambertProblemMsgPayload.LambertProblemMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _LambertProblemMsgPayload.LambertProblemMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _LambertProblemMsgPayload.LambertProblemMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _LambertProblemMsgPayload.LambertProblemMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _LambertProblemMsgPayload.LambertProblemMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _LambertProblemMsgPayload.LambertProblemMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == LambertProblemMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.LambertProblemMsgPayload import LambertProblemMsg_C
            if type(source) == LambertProblemMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<LambertProblemMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == LambertProblemMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.LambertProblemMsgPayload import LambertProblemMsg_C
        except ImportError:
            return 0

        if type(source) == LambertProblemMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _LambertProblemMsgPayload.delete_LambertProblemMsgReader

# Register LambertProblemMsgReader in _LambertProblemMsgPayload:
_LambertProblemMsgPayload.LambertProblemMsgReader_swigregister(LambertProblemMsgReader)
class LambertProblemMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LambertProblemMsgPayload.LambertProblemMsgWriter_swiginit(self, _LambertProblemMsgPayload.new_LambertProblemMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _LambertProblemMsgPayload.LambertProblemMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _LambertProblemMsgPayload.delete_LambertProblemMsgWriter

# Register LambertProblemMsgWriter in _LambertProblemMsgPayload:
_LambertProblemMsgPayload.LambertProblemMsgWriter_swigregister(LambertProblemMsgWriter)
class LambertProblemMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_LambertProblemMsgPayload.LambertProblemMsg_write_get, _LambertProblemMsgPayload.LambertProblemMsg_write_set)

    def addSubscriber(self):
        return _LambertProblemMsgPayload.LambertProblemMsg_addSubscriber(self)

    def addAuthor(self):
        return _LambertProblemMsgPayload.LambertProblemMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _LambertProblemMsgPayload.LambertProblemMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _LambertProblemMsgPayload.LambertProblemMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _LambertProblemMsgPayload.LambertProblemMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_LambertProblemMsgPayload.LambertProblemMsg_zeroMsgPayload_get, _LambertProblemMsgPayload.LambertProblemMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _LambertProblemMsgPayload.LambertProblemMsg_isLinked(self)

    def getPayloadSize(self):
        return _LambertProblemMsgPayload.LambertProblemMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _LambertProblemMsgPayload.LambertProblemMsg_swiginit(self, _LambertProblemMsgPayload.new_LambertProblemMsg())
    __swig_destroy__ = _LambertProblemMsgPayload.delete_LambertProblemMsg

# Register LambertProblemMsg in _LambertProblemMsgPayload:
_LambertProblemMsgPayload.LambertProblemMsg_swigregister(LambertProblemMsg)
class LambertProblemMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LambertProblemMsgPayload.LambertProblemMsgRecorder_swiginit(self, _LambertProblemMsgPayload.new_LambertProblemMsgRecorder(*args))
    __swig_destroy__ = _LambertProblemMsgPayload.delete_LambertProblemMsgRecorder

    def SelfInit(self):
        return _LambertProblemMsgPayload.LambertProblemMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _LambertProblemMsgPayload.LambertProblemMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _LambertProblemMsgPayload.LambertProblemMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _LambertProblemMsgPayload.LambertProblemMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _LambertProblemMsgPayload.LambertProblemMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _LambertProblemMsgPayload.LambertProblemMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _LambertProblemMsgPayload.LambertProblemMsgRecorder___record_vector(self)

    def size(self):
        return _LambertProblemMsgPayload.LambertProblemMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _LambertProblemMsgPayload.LambertProblemMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _LambertProblemMsgPayload.LambertProblemMsgRecorder_clear(self)
    bskLogger = property(_LambertProblemMsgPayload.LambertProblemMsgRecorder_bskLogger_get, _LambertProblemMsgPayload.LambertProblemMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _LambertProblemMsgPayload.LambertProblemMsgRecorder_updateTimeInterval(self, timeDiff)

    def _solverMethod_list(self):
        return _LambertProblemMsgPayload.LambertProblemMsgRecorder__solverMethod_list(self)

    @property
    def solverMethod(self):
        return np.array(self._solverMethod_list())


    def _r1_N_array(self):
        return _LambertProblemMsgPayload.LambertProblemMsgRecorder__r1_N_array(self)

    @property
    def r1_N(self):
        return self._r1_N_array()


    def _r2_N_array(self):
        return _LambertProblemMsgPayload.LambertProblemMsgRecorder__r2_N_array(self)

    @property
    def r2_N(self):
        return self._r2_N_array()


    def _transferTime_array(self):
        return _LambertProblemMsgPayload.LambertProblemMsgRecorder__transferTime_array(self)

    @property
    def transferTime(self):
        return self._transferTime_array()


    def _mu_array(self):
        return _LambertProblemMsgPayload.LambertProblemMsgRecorder__mu_array(self)

    @property
    def mu(self):
        return self._mu_array()


    def _numRevolutions_array(self):
        return _LambertProblemMsgPayload.LambertProblemMsgRecorder__numRevolutions_array(self)

    @property
    def numRevolutions(self):
        return self._numRevolutions_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register LambertProblemMsgRecorder in _LambertProblemMsgPayload:
_LambertProblemMsgPayload.LambertProblemMsgRecorder_swigregister(LambertProblemMsgRecorder)
class LambertProblemMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LambertProblemMsgPayload.LambertProblemMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LambertProblemMsgPayload.LambertProblemMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _LambertProblemMsgPayload.LambertProblemMsgPayloadVector___bool__(self)

    def __len__(self):
        return _LambertProblemMsgPayload.LambertProblemMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _LambertProblemMsgPayload.LambertProblemMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LambertProblemMsgPayload.LambertProblemMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LambertProblemMsgPayload.LambertProblemMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LambertProblemMsgPayload.LambertProblemMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LambertProblemMsgPayload.LambertProblemMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LambertProblemMsgPayload.LambertProblemMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _LambertProblemMsgPayload.LambertProblemMsgPayloadVector_pop(self)

    def append(self, x):
        return _LambertProblemMsgPayload.LambertProblemMsgPayloadVector_append(self, x)

    def empty(self):
        return _LambertProblemMsgPayload.LambertProblemMsgPayloadVector_empty(self)

    def size(self):
        return _LambertProblemMsgPayload.LambertProblemMsgPayloadVector_size(self)

    def swap(self, v):
        return _LambertProblemMsgPayload.LambertProblemMsgPayloadVector_swap(self, v)

    def begin(self):
        return _LambertProblemMsgPayload.LambertProblemMsgPayloadVector_begin(self)

    def end(self):
        return _LambertProblemMsgPayload.LambertProblemMsgPayloadVector_end(self)

    def rbegin(self):
        return _LambertProblemMsgPayload.LambertProblemMsgPayloadVector_rbegin(self)

    def rend(self):
        return _LambertProblemMsgPayload.LambertProblemMsgPayloadVector_rend(self)

    def clear(self):
        return _LambertProblemMsgPayload.LambertProblemMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _LambertProblemMsgPayload.LambertProblemMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _LambertProblemMsgPayload.LambertProblemMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _LambertProblemMsgPayload.LambertProblemMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _LambertProblemMsgPayload.LambertProblemMsgPayloadVector_swiginit(self, _LambertProblemMsgPayload.new_LambertProblemMsgPayloadVector(*args))

    def push_back(self, x):
        return _LambertProblemMsgPayload.LambertProblemMsgPayloadVector_push_back(self, x)

    def front(self):
        return _LambertProblemMsgPayload.LambertProblemMsgPayloadVector_front(self)

    def back(self):
        return _LambertProblemMsgPayload.LambertProblemMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _LambertProblemMsgPayload.LambertProblemMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _LambertProblemMsgPayload.LambertProblemMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _LambertProblemMsgPayload.LambertProblemMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _LambertProblemMsgPayload.LambertProblemMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _LambertProblemMsgPayload.LambertProblemMsgPayloadVector_capacity(self)

    def get_all(self):
        return _LambertProblemMsgPayload.LambertProblemMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _LambertProblemMsgPayload.delete_LambertProblemMsgPayloadVector

# Register LambertProblemMsgPayloadVector in _LambertProblemMsgPayload:
_LambertProblemMsgPayload.LambertProblemMsgPayloadVector_swigregister(LambertProblemMsgPayloadVector)
class LambertProblemMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsVector_empty(self)

    def size(self):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsVector_begin(self)

    def end(self):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsVector_rend(self)

    def clear(self):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _LambertProblemMsgPayload.LambertProblemMsgOutMsgsVector_swiginit(self, _LambertProblemMsgPayload.new_LambertProblemMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsVector_front(self)

    def back(self):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _LambertProblemMsgPayload.delete_LambertProblemMsgOutMsgsVector

# Register LambertProblemMsgOutMsgsVector in _LambertProblemMsgPayload:
_LambertProblemMsgPayload.LambertProblemMsgOutMsgsVector_swigregister(LambertProblemMsgOutMsgsVector)
class LambertProblemMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _LambertProblemMsgPayload.LambertProblemMsgOutMsgsPtrVector_swiginit(self, _LambertProblemMsgPayload.new_LambertProblemMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _LambertProblemMsgPayload.LambertProblemMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _LambertProblemMsgPayload.delete_LambertProblemMsgOutMsgsPtrVector

# Register LambertProblemMsgOutMsgsPtrVector in _LambertProblemMsgPayload:
_LambertProblemMsgPayload.LambertProblemMsgOutMsgsPtrVector_swigregister(LambertProblemMsgOutMsgsPtrVector)
class LambertProblemMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LambertProblemMsgPayload.LambertProblemMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LambertProblemMsgPayload.LambertProblemMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _LambertProblemMsgPayload.LambertProblemMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _LambertProblemMsgPayload.LambertProblemMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _LambertProblemMsgPayload.LambertProblemMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LambertProblemMsgPayload.LambertProblemMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LambertProblemMsgPayload.LambertProblemMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LambertProblemMsgPayload.LambertProblemMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LambertProblemMsgPayload.LambertProblemMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LambertProblemMsgPayload.LambertProblemMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _LambertProblemMsgPayload.LambertProblemMsgInMsgsVector_pop(self)

    def append(self, x):
        return _LambertProblemMsgPayload.LambertProblemMsgInMsgsVector_append(self, x)

    def empty(self):
        return _LambertProblemMsgPayload.LambertProblemMsgInMsgsVector_empty(self)

    def size(self):
        return _LambertProblemMsgPayload.LambertProblemMsgInMsgsVector_size(self)

    def swap(self, v):
        return _LambertProblemMsgPayload.LambertProblemMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _LambertProblemMsgPayload.LambertProblemMsgInMsgsVector_begin(self)

    def end(self):
        return _LambertProblemMsgPayload.LambertProblemMsgInMsgsVector_end(self)

    def rbegin(self):
        return _LambertProblemMsgPayload.LambertProblemMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _LambertProblemMsgPayload.LambertProblemMsgInMsgsVector_rend(self)

    def clear(self):
        return _LambertProblemMsgPayload.LambertProblemMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _LambertProblemMsgPayload.LambertProblemMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _LambertProblemMsgPayload.LambertProblemMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _LambertProblemMsgPayload.LambertProblemMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _LambertProblemMsgPayload.LambertProblemMsgInMsgsVector_swiginit(self, _LambertProblemMsgPayload.new_LambertProblemMsgInMsgsVector(*args))

    def push_back(self, x):
        return _LambertProblemMsgPayload.LambertProblemMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _LambertProblemMsgPayload.LambertProblemMsgInMsgsVector_front(self)

    def back(self):
        return _LambertProblemMsgPayload.LambertProblemMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _LambertProblemMsgPayload.LambertProblemMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _LambertProblemMsgPayload.LambertProblemMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _LambertProblemMsgPayload.LambertProblemMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _LambertProblemMsgPayload.LambertProblemMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _LambertProblemMsgPayload.LambertProblemMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _LambertProblemMsgPayload.delete_LambertProblemMsgInMsgsVector

# Register LambertProblemMsgInMsgsVector in _LambertProblemMsgPayload:
_LambertProblemMsgPayload.LambertProblemMsgInMsgsVector_swigregister(LambertProblemMsgInMsgsVector)
class LambertProblemMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_LambertProblemMsgPayload.LambertProblemMsg_C_header_get, _LambertProblemMsgPayload.LambertProblemMsg_C_header_set)
    payload = property(_LambertProblemMsgPayload.LambertProblemMsg_C_payload_get, _LambertProblemMsgPayload.LambertProblemMsg_C_payload_set)
    payloadPointer = property(_LambertProblemMsgPayload.LambertProblemMsg_C_payloadPointer_get, _LambertProblemMsgPayload.LambertProblemMsg_C_payloadPointer_set)
    headerPointer = property(_LambertProblemMsgPayload.LambertProblemMsg_C_headerPointer_get, _LambertProblemMsgPayload.LambertProblemMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _LambertProblemMsgPayload.LambertProblemMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import LambertProblemMsg
        if type(source) == type(self):
            LambertProblemMsg_C_subscribe(self, source)
        elif type(source) == LambertProblemMsg:
            LambertProblemMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            LambertProblemMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe LambertProblemMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        LambertProblemMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import LambertProblemMsg
        if type(source) == type(self):
            return (LambertProblemMsg_C_isSubscribedTo(self, source))
        elif type(source) == LambertProblemMsg:
            return (LambertProblemMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (LambertProblemMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        LambertProblemMsg_C_addAuthor(self, self)
        if data:
            LambertProblemMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        LambertProblemMsg_C_addAuthor(self, self)
        LambertProblemMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return LambertProblemMsg_C_read(self)


    def __init__(self):
        _LambertProblemMsgPayload.LambertProblemMsg_C_swiginit(self, _LambertProblemMsgPayload.new_LambertProblemMsg_C())
    __swig_destroy__ = _LambertProblemMsgPayload.delete_LambertProblemMsg_C

# Register LambertProblemMsg_C in _LambertProblemMsgPayload:
_LambertProblemMsgPayload.LambertProblemMsg_C_swigregister(LambertProblemMsg_C)

def LambertProblemMsg_cpp_subscribe(subscriber, source):
    return _LambertProblemMsgPayload.LambertProblemMsg_cpp_subscribe(subscriber, source)

def LambertProblemMsg_C_subscribe(subscriber, source):
    return _LambertProblemMsgPayload.LambertProblemMsg_C_subscribe(subscriber, source)

def LambertProblemMsg_addr_subscribe(subscriber, sourceAddr):
    return _LambertProblemMsgPayload.LambertProblemMsg_addr_subscribe(subscriber, sourceAddr)

def LambertProblemMsg_unsubscribe(subscriber):
    return _LambertProblemMsgPayload.LambertProblemMsg_unsubscribe(subscriber)

def LambertProblemMsg_C_isSubscribedTo(subscriber, source):
    return _LambertProblemMsgPayload.LambertProblemMsg_C_isSubscribedTo(subscriber, source)

def LambertProblemMsg_cpp_isSubscribedTo(subscriber, source):
    return _LambertProblemMsgPayload.LambertProblemMsg_cpp_isSubscribedTo(subscriber, source)

def LambertProblemMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _LambertProblemMsgPayload.LambertProblemMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def LambertProblemMsg_C_addAuthor(coowner, data):
    return _LambertProblemMsgPayload.LambertProblemMsg_C_addAuthor(coowner, data)

def LambertProblemMsg_C_init(owner):
    return _LambertProblemMsgPayload.LambertProblemMsg_C_init(owner)

def LambertProblemMsg_C_isLinked(data):
    return _LambertProblemMsgPayload.LambertProblemMsg_C_isLinked(data)

def LambertProblemMsg_C_isWritten(data):
    return _LambertProblemMsgPayload.LambertProblemMsg_C_isWritten(data)

def LambertProblemMsg_C_timeWritten(data):
    return _LambertProblemMsgPayload.LambertProblemMsg_C_timeWritten(data)

def LambertProblemMsg_C_moduleID(data):
    return _LambertProblemMsgPayload.LambertProblemMsg_C_moduleID(data)

def LambertProblemMsg_C_write(data, destination, moduleID, callTime):
    return _LambertProblemMsgPayload.LambertProblemMsg_C_write(data, destination, moduleID, callTime)

def LambertProblemMsg_C_read(source):
    return _LambertProblemMsgPayload.LambertProblemMsg_C_read(source)

def LambertProblemMsg_C_zeroMsgPayload():
    return _LambertProblemMsgPayload.LambertProblemMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_LambertProblemMsgPayload.MsgHeader_isLinked_get, _LambertProblemMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_LambertProblemMsgPayload.MsgHeader_isWritten_get, _LambertProblemMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_LambertProblemMsgPayload.MsgHeader_timeWritten_get, _LambertProblemMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_LambertProblemMsgPayload.MsgHeader_moduleID_get, _LambertProblemMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _LambertProblemMsgPayload.MsgHeader_swiginit(self, _LambertProblemMsgPayload.new_MsgHeader())
    __swig_destroy__ = _LambertProblemMsgPayload.delete_MsgHeader

# Register MsgHeader in _LambertProblemMsgPayload:
_LambertProblemMsgPayload.MsgHeader_swigregister(MsgHeader)

