# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _RWSpeedMsgPayload
else:
    import _RWSpeedMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RWSpeedMsgPayload.delete_SwigPyIterator

    def value(self):
        return _RWSpeedMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _RWSpeedMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _RWSpeedMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _RWSpeedMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _RWSpeedMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _RWSpeedMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _RWSpeedMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _RWSpeedMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _RWSpeedMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _RWSpeedMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _RWSpeedMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _RWSpeedMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _RWSpeedMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _RWSpeedMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _RWSpeedMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _RWSpeedMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _RWSpeedMsgPayload:
_RWSpeedMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _RWSpeedMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _RWSpeedMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _RWSpeedMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _RWSpeedMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _RWSpeedMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _RWSpeedMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _RWSpeedMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _RWSpeedMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _RWSpeedMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _RWSpeedMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _RWSpeedMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _RWSpeedMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _RWSpeedMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _RWSpeedMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _RWSpeedMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _RWSpeedMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWSpeedMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWSpeedMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _RWSpeedMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _RWSpeedMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _RWSpeedMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWSpeedMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWSpeedMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWSpeedMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWSpeedMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWSpeedMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _RWSpeedMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _RWSpeedMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _RWSpeedMsgPayload.TimeVector_empty(self)

    def size(self):
        return _RWSpeedMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _RWSpeedMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _RWSpeedMsgPayload.TimeVector_begin(self)

    def end(self):
        return _RWSpeedMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _RWSpeedMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _RWSpeedMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _RWSpeedMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _RWSpeedMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _RWSpeedMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _RWSpeedMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _RWSpeedMsgPayload.TimeVector_swiginit(self, _RWSpeedMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _RWSpeedMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _RWSpeedMsgPayload.TimeVector_front(self)

    def back(self):
        return _RWSpeedMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _RWSpeedMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _RWSpeedMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _RWSpeedMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _RWSpeedMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _RWSpeedMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _RWSpeedMsgPayload.delete_TimeVector

# Register TimeVector in _RWSpeedMsgPayload:
_RWSpeedMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWSpeedMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWSpeedMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _RWSpeedMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _RWSpeedMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _RWSpeedMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWSpeedMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWSpeedMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWSpeedMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWSpeedMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWSpeedMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _RWSpeedMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _RWSpeedMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _RWSpeedMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _RWSpeedMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _RWSpeedMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _RWSpeedMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _RWSpeedMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _RWSpeedMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _RWSpeedMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _RWSpeedMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _RWSpeedMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _RWSpeedMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _RWSpeedMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _RWSpeedMsgPayload.DoubleVector_swiginit(self, _RWSpeedMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _RWSpeedMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _RWSpeedMsgPayload.DoubleVector_front(self)

    def back(self):
        return _RWSpeedMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _RWSpeedMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _RWSpeedMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _RWSpeedMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _RWSpeedMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _RWSpeedMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _RWSpeedMsgPayload.delete_DoubleVector

# Register DoubleVector in _RWSpeedMsgPayload:
_RWSpeedMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWSpeedMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWSpeedMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _RWSpeedMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _RWSpeedMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _RWSpeedMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWSpeedMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWSpeedMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWSpeedMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWSpeedMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWSpeedMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _RWSpeedMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _RWSpeedMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _RWSpeedMsgPayload.StringVector_empty(self)

    def size(self):
        return _RWSpeedMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _RWSpeedMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _RWSpeedMsgPayload.StringVector_begin(self)

    def end(self):
        return _RWSpeedMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _RWSpeedMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _RWSpeedMsgPayload.StringVector_rend(self)

    def clear(self):
        return _RWSpeedMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _RWSpeedMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _RWSpeedMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _RWSpeedMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _RWSpeedMsgPayload.StringVector_swiginit(self, _RWSpeedMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _RWSpeedMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _RWSpeedMsgPayload.StringVector_front(self)

    def back(self):
        return _RWSpeedMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _RWSpeedMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _RWSpeedMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _RWSpeedMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _RWSpeedMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _RWSpeedMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _RWSpeedMsgPayload.delete_StringVector

# Register StringVector in _RWSpeedMsgPayload:
_RWSpeedMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _RWSpeedMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _RWSpeedMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _RWSpeedMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _RWSpeedMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _RWSpeedMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _RWSpeedMsgPayload.NANO2SEC
SEC2NANO = _RWSpeedMsgPayload.SEC2NANO
SEC2HOUR = _RWSpeedMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _RWSpeedMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _RWSpeedMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _RWSpeedMsgPayload.secToNano(seconds)
BOOL_FALSE = _RWSpeedMsgPayload.BOOL_FALSE
BOOL_TRUE = _RWSpeedMsgPayload.BOOL_TRUE
AVAILABLE = _RWSpeedMsgPayload.AVAILABLE
UNAVAILABLE = _RWSpeedMsgPayload.UNAVAILABLE
BalancedWheels = _RWSpeedMsgPayload.BalancedWheels
JitterSimple = _RWSpeedMsgPayload.JitterSimple
JitterFullyCoupled = _RWSpeedMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RWSpeedMsgPayload.SysModel_swiginit(self, _RWSpeedMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _RWSpeedMsgPayload.delete_SysModel

    def SelfInit(self):
        return _RWSpeedMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _RWSpeedMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _RWSpeedMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _RWSpeedMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_RWSpeedMsgPayload.SysModel_ModelTag_get, _RWSpeedMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_RWSpeedMsgPayload.SysModel_CallCounts_get, _RWSpeedMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_RWSpeedMsgPayload.SysModel_RNGSeed_get, _RWSpeedMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_RWSpeedMsgPayload.SysModel_moduleID_get, _RWSpeedMsgPayload.SysModel_moduleID_set)

# Register SysModel in _RWSpeedMsgPayload:
_RWSpeedMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _RWSpeedMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _RWSpeedMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _RWSpeedMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _RWSpeedMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _RWSpeedMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _RWSpeedMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _RWSpeedMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _RWSpeedMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _RWSpeedMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _RWSpeedMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _RWSpeedMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _RWSpeedMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class RWSpeedMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    wheelSpeeds = property(_RWSpeedMsgPayload.RWSpeedMsgPayload_wheelSpeeds_get, _RWSpeedMsgPayload.RWSpeedMsgPayload_wheelSpeeds_set)
    wheelThetas = property(_RWSpeedMsgPayload.RWSpeedMsgPayload_wheelThetas_get, _RWSpeedMsgPayload.RWSpeedMsgPayload_wheelThetas_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _RWSpeedMsgPayload.RWSpeedMsgPayload_swiginit(self, _RWSpeedMsgPayload.new_RWSpeedMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _RWSpeedMsgPayload.delete_RWSpeedMsgPayload

# Register RWSpeedMsgPayload in _RWSpeedMsgPayload:
_RWSpeedMsgPayload.RWSpeedMsgPayload_swigregister(RWSpeedMsgPayload)

def _pprint_RWSpeedMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[RWSpeedMsgPayload.__repr__] = _pprint_RWSpeedMsgPayload

class RWSpeedMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_RWSpeedMsgPayload.RWSpeedMsgReader_bskLogger_get, _RWSpeedMsgPayload.RWSpeedMsgReader_bskLogger_set)
    zeroMsgPayload = property(_RWSpeedMsgPayload.RWSpeedMsgReader_zeroMsgPayload_get, _RWSpeedMsgPayload.RWSpeedMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _RWSpeedMsgPayload.RWSpeedMsgReader_swiginit(self, _RWSpeedMsgPayload.new_RWSpeedMsgReader(*args))

    def __call__(self):
        return _RWSpeedMsgPayload.RWSpeedMsgReader___call__(self)

    def isLinked(self):
        return _RWSpeedMsgPayload.RWSpeedMsgReader_isLinked(self)

    def isWritten(self):
        return _RWSpeedMsgPayload.RWSpeedMsgReader_isWritten(self)

    def timeWritten(self):
        return _RWSpeedMsgPayload.RWSpeedMsgReader_timeWritten(self)

    def moduleID(self):
        return _RWSpeedMsgPayload.RWSpeedMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _RWSpeedMsgPayload.RWSpeedMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _RWSpeedMsgPayload.RWSpeedMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _RWSpeedMsgPayload.RWSpeedMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _RWSpeedMsgPayload.RWSpeedMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _RWSpeedMsgPayload.RWSpeedMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _RWSpeedMsgPayload.RWSpeedMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _RWSpeedMsgPayload.RWSpeedMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _RWSpeedMsgPayload.RWSpeedMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _RWSpeedMsgPayload.RWSpeedMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _RWSpeedMsgPayload.RWSpeedMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == RWSpeedMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.RWSpeedMsgPayload import RWSpeedMsg_C
            if type(source) == RWSpeedMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<RWSpeedMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == RWSpeedMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.RWSpeedMsgPayload import RWSpeedMsg_C
        except ImportError:
            return 0

        if type(source) == RWSpeedMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _RWSpeedMsgPayload.delete_RWSpeedMsgReader

# Register RWSpeedMsgReader in _RWSpeedMsgPayload:
_RWSpeedMsgPayload.RWSpeedMsgReader_swigregister(RWSpeedMsgReader)
class RWSpeedMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RWSpeedMsgPayload.RWSpeedMsgWriter_swiginit(self, _RWSpeedMsgPayload.new_RWSpeedMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _RWSpeedMsgPayload.RWSpeedMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _RWSpeedMsgPayload.delete_RWSpeedMsgWriter

# Register RWSpeedMsgWriter in _RWSpeedMsgPayload:
_RWSpeedMsgPayload.RWSpeedMsgWriter_swigregister(RWSpeedMsgWriter)
class RWSpeedMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_RWSpeedMsgPayload.RWSpeedMsg_write_get, _RWSpeedMsgPayload.RWSpeedMsg_write_set)

    def addSubscriber(self):
        return _RWSpeedMsgPayload.RWSpeedMsg_addSubscriber(self)

    def addAuthor(self):
        return _RWSpeedMsgPayload.RWSpeedMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _RWSpeedMsgPayload.RWSpeedMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _RWSpeedMsgPayload.RWSpeedMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _RWSpeedMsgPayload.RWSpeedMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_RWSpeedMsgPayload.RWSpeedMsg_zeroMsgPayload_get, _RWSpeedMsgPayload.RWSpeedMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _RWSpeedMsgPayload.RWSpeedMsg_isLinked(self)

    def getPayloadSize(self):
        return _RWSpeedMsgPayload.RWSpeedMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _RWSpeedMsgPayload.RWSpeedMsg_swiginit(self, _RWSpeedMsgPayload.new_RWSpeedMsg())
    __swig_destroy__ = _RWSpeedMsgPayload.delete_RWSpeedMsg

# Register RWSpeedMsg in _RWSpeedMsgPayload:
_RWSpeedMsgPayload.RWSpeedMsg_swigregister(RWSpeedMsg)
class RWSpeedMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RWSpeedMsgPayload.RWSpeedMsgRecorder_swiginit(self, _RWSpeedMsgPayload.new_RWSpeedMsgRecorder(*args))
    __swig_destroy__ = _RWSpeedMsgPayload.delete_RWSpeedMsgRecorder

    def SelfInit(self):
        return _RWSpeedMsgPayload.RWSpeedMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _RWSpeedMsgPayload.RWSpeedMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _RWSpeedMsgPayload.RWSpeedMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _RWSpeedMsgPayload.RWSpeedMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _RWSpeedMsgPayload.RWSpeedMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _RWSpeedMsgPayload.RWSpeedMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _RWSpeedMsgPayload.RWSpeedMsgRecorder___record_vector(self)

    def size(self):
        return _RWSpeedMsgPayload.RWSpeedMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _RWSpeedMsgPayload.RWSpeedMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _RWSpeedMsgPayload.RWSpeedMsgRecorder_clear(self)
    bskLogger = property(_RWSpeedMsgPayload.RWSpeedMsgRecorder_bskLogger_get, _RWSpeedMsgPayload.RWSpeedMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _RWSpeedMsgPayload.RWSpeedMsgRecorder_updateTimeInterval(self, timeDiff)

    def _wheelSpeeds_array(self):
        return _RWSpeedMsgPayload.RWSpeedMsgRecorder__wheelSpeeds_array(self)

    @property
    def wheelSpeeds(self):
        return self._wheelSpeeds_array()


    def _wheelThetas_array(self):
        return _RWSpeedMsgPayload.RWSpeedMsgRecorder__wheelThetas_array(self)

    @property
    def wheelThetas(self):
        return self._wheelThetas_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register RWSpeedMsgRecorder in _RWSpeedMsgPayload:
_RWSpeedMsgPayload.RWSpeedMsgRecorder_swigregister(RWSpeedMsgRecorder)
class RWSpeedMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWSpeedMsgPayload.RWSpeedMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWSpeedMsgPayload.RWSpeedMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _RWSpeedMsgPayload.RWSpeedMsgPayloadVector___bool__(self)

    def __len__(self):
        return _RWSpeedMsgPayload.RWSpeedMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _RWSpeedMsgPayload.RWSpeedMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWSpeedMsgPayload.RWSpeedMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWSpeedMsgPayload.RWSpeedMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWSpeedMsgPayload.RWSpeedMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWSpeedMsgPayload.RWSpeedMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWSpeedMsgPayload.RWSpeedMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _RWSpeedMsgPayload.RWSpeedMsgPayloadVector_pop(self)

    def append(self, x):
        return _RWSpeedMsgPayload.RWSpeedMsgPayloadVector_append(self, x)

    def empty(self):
        return _RWSpeedMsgPayload.RWSpeedMsgPayloadVector_empty(self)

    def size(self):
        return _RWSpeedMsgPayload.RWSpeedMsgPayloadVector_size(self)

    def swap(self, v):
        return _RWSpeedMsgPayload.RWSpeedMsgPayloadVector_swap(self, v)

    def begin(self):
        return _RWSpeedMsgPayload.RWSpeedMsgPayloadVector_begin(self)

    def end(self):
        return _RWSpeedMsgPayload.RWSpeedMsgPayloadVector_end(self)

    def rbegin(self):
        return _RWSpeedMsgPayload.RWSpeedMsgPayloadVector_rbegin(self)

    def rend(self):
        return _RWSpeedMsgPayload.RWSpeedMsgPayloadVector_rend(self)

    def clear(self):
        return _RWSpeedMsgPayload.RWSpeedMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _RWSpeedMsgPayload.RWSpeedMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _RWSpeedMsgPayload.RWSpeedMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _RWSpeedMsgPayload.RWSpeedMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _RWSpeedMsgPayload.RWSpeedMsgPayloadVector_swiginit(self, _RWSpeedMsgPayload.new_RWSpeedMsgPayloadVector(*args))

    def push_back(self, x):
        return _RWSpeedMsgPayload.RWSpeedMsgPayloadVector_push_back(self, x)

    def front(self):
        return _RWSpeedMsgPayload.RWSpeedMsgPayloadVector_front(self)

    def back(self):
        return _RWSpeedMsgPayload.RWSpeedMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _RWSpeedMsgPayload.RWSpeedMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _RWSpeedMsgPayload.RWSpeedMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _RWSpeedMsgPayload.RWSpeedMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _RWSpeedMsgPayload.RWSpeedMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _RWSpeedMsgPayload.RWSpeedMsgPayloadVector_capacity(self)

    def get_all(self):
        return _RWSpeedMsgPayload.RWSpeedMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _RWSpeedMsgPayload.delete_RWSpeedMsgPayloadVector

# Register RWSpeedMsgPayloadVector in _RWSpeedMsgPayload:
_RWSpeedMsgPayload.RWSpeedMsgPayloadVector_swigregister(RWSpeedMsgPayloadVector)
class RWSpeedMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsVector_empty(self)

    def size(self):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsVector_begin(self)

    def end(self):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsVector_rend(self)

    def clear(self):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _RWSpeedMsgPayload.RWSpeedMsgOutMsgsVector_swiginit(self, _RWSpeedMsgPayload.new_RWSpeedMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsVector_front(self)

    def back(self):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _RWSpeedMsgPayload.delete_RWSpeedMsgOutMsgsVector

# Register RWSpeedMsgOutMsgsVector in _RWSpeedMsgPayload:
_RWSpeedMsgPayload.RWSpeedMsgOutMsgsVector_swigregister(RWSpeedMsgOutMsgsVector)
class RWSpeedMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _RWSpeedMsgPayload.RWSpeedMsgOutMsgsPtrVector_swiginit(self, _RWSpeedMsgPayload.new_RWSpeedMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _RWSpeedMsgPayload.RWSpeedMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _RWSpeedMsgPayload.delete_RWSpeedMsgOutMsgsPtrVector

# Register RWSpeedMsgOutMsgsPtrVector in _RWSpeedMsgPayload:
_RWSpeedMsgPayload.RWSpeedMsgOutMsgsPtrVector_swigregister(RWSpeedMsgOutMsgsPtrVector)
class RWSpeedMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWSpeedMsgPayload.RWSpeedMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWSpeedMsgPayload.RWSpeedMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _RWSpeedMsgPayload.RWSpeedMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _RWSpeedMsgPayload.RWSpeedMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _RWSpeedMsgPayload.RWSpeedMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWSpeedMsgPayload.RWSpeedMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWSpeedMsgPayload.RWSpeedMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWSpeedMsgPayload.RWSpeedMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWSpeedMsgPayload.RWSpeedMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWSpeedMsgPayload.RWSpeedMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _RWSpeedMsgPayload.RWSpeedMsgInMsgsVector_pop(self)

    def append(self, x):
        return _RWSpeedMsgPayload.RWSpeedMsgInMsgsVector_append(self, x)

    def empty(self):
        return _RWSpeedMsgPayload.RWSpeedMsgInMsgsVector_empty(self)

    def size(self):
        return _RWSpeedMsgPayload.RWSpeedMsgInMsgsVector_size(self)

    def swap(self, v):
        return _RWSpeedMsgPayload.RWSpeedMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _RWSpeedMsgPayload.RWSpeedMsgInMsgsVector_begin(self)

    def end(self):
        return _RWSpeedMsgPayload.RWSpeedMsgInMsgsVector_end(self)

    def rbegin(self):
        return _RWSpeedMsgPayload.RWSpeedMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _RWSpeedMsgPayload.RWSpeedMsgInMsgsVector_rend(self)

    def clear(self):
        return _RWSpeedMsgPayload.RWSpeedMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _RWSpeedMsgPayload.RWSpeedMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _RWSpeedMsgPayload.RWSpeedMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _RWSpeedMsgPayload.RWSpeedMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _RWSpeedMsgPayload.RWSpeedMsgInMsgsVector_swiginit(self, _RWSpeedMsgPayload.new_RWSpeedMsgInMsgsVector(*args))

    def push_back(self, x):
        return _RWSpeedMsgPayload.RWSpeedMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _RWSpeedMsgPayload.RWSpeedMsgInMsgsVector_front(self)

    def back(self):
        return _RWSpeedMsgPayload.RWSpeedMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _RWSpeedMsgPayload.RWSpeedMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _RWSpeedMsgPayload.RWSpeedMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _RWSpeedMsgPayload.RWSpeedMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _RWSpeedMsgPayload.RWSpeedMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _RWSpeedMsgPayload.RWSpeedMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _RWSpeedMsgPayload.delete_RWSpeedMsgInMsgsVector

# Register RWSpeedMsgInMsgsVector in _RWSpeedMsgPayload:
_RWSpeedMsgPayload.RWSpeedMsgInMsgsVector_swigregister(RWSpeedMsgInMsgsVector)
class RWSpeedMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_RWSpeedMsgPayload.RWSpeedMsg_C_header_get, _RWSpeedMsgPayload.RWSpeedMsg_C_header_set)
    payload = property(_RWSpeedMsgPayload.RWSpeedMsg_C_payload_get, _RWSpeedMsgPayload.RWSpeedMsg_C_payload_set)
    payloadPointer = property(_RWSpeedMsgPayload.RWSpeedMsg_C_payloadPointer_get, _RWSpeedMsgPayload.RWSpeedMsg_C_payloadPointer_set)
    headerPointer = property(_RWSpeedMsgPayload.RWSpeedMsg_C_headerPointer_get, _RWSpeedMsgPayload.RWSpeedMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _RWSpeedMsgPayload.RWSpeedMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import RWSpeedMsg
        if type(source) == type(self):
            RWSpeedMsg_C_subscribe(self, source)
        elif type(source) == RWSpeedMsg:
            RWSpeedMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            RWSpeedMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe RWSpeedMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        RWSpeedMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import RWSpeedMsg
        if type(source) == type(self):
            return (RWSpeedMsg_C_isSubscribedTo(self, source))
        elif type(source) == RWSpeedMsg:
            return (RWSpeedMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (RWSpeedMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        RWSpeedMsg_C_addAuthor(self, self)
        if data:
            RWSpeedMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        RWSpeedMsg_C_addAuthor(self, self)
        RWSpeedMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return RWSpeedMsg_C_read(self)


    def __init__(self):
        _RWSpeedMsgPayload.RWSpeedMsg_C_swiginit(self, _RWSpeedMsgPayload.new_RWSpeedMsg_C())
    __swig_destroy__ = _RWSpeedMsgPayload.delete_RWSpeedMsg_C

# Register RWSpeedMsg_C in _RWSpeedMsgPayload:
_RWSpeedMsgPayload.RWSpeedMsg_C_swigregister(RWSpeedMsg_C)

def RWSpeedMsg_cpp_subscribe(subscriber, source):
    return _RWSpeedMsgPayload.RWSpeedMsg_cpp_subscribe(subscriber, source)

def RWSpeedMsg_C_subscribe(subscriber, source):
    return _RWSpeedMsgPayload.RWSpeedMsg_C_subscribe(subscriber, source)

def RWSpeedMsg_addr_subscribe(subscriber, sourceAddr):
    return _RWSpeedMsgPayload.RWSpeedMsg_addr_subscribe(subscriber, sourceAddr)

def RWSpeedMsg_unsubscribe(subscriber):
    return _RWSpeedMsgPayload.RWSpeedMsg_unsubscribe(subscriber)

def RWSpeedMsg_C_isSubscribedTo(subscriber, source):
    return _RWSpeedMsgPayload.RWSpeedMsg_C_isSubscribedTo(subscriber, source)

def RWSpeedMsg_cpp_isSubscribedTo(subscriber, source):
    return _RWSpeedMsgPayload.RWSpeedMsg_cpp_isSubscribedTo(subscriber, source)

def RWSpeedMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _RWSpeedMsgPayload.RWSpeedMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def RWSpeedMsg_C_addAuthor(coowner, data):
    return _RWSpeedMsgPayload.RWSpeedMsg_C_addAuthor(coowner, data)

def RWSpeedMsg_C_init(owner):
    return _RWSpeedMsgPayload.RWSpeedMsg_C_init(owner)

def RWSpeedMsg_C_isLinked(data):
    return _RWSpeedMsgPayload.RWSpeedMsg_C_isLinked(data)

def RWSpeedMsg_C_isWritten(data):
    return _RWSpeedMsgPayload.RWSpeedMsg_C_isWritten(data)

def RWSpeedMsg_C_timeWritten(data):
    return _RWSpeedMsgPayload.RWSpeedMsg_C_timeWritten(data)

def RWSpeedMsg_C_moduleID(data):
    return _RWSpeedMsgPayload.RWSpeedMsg_C_moduleID(data)

def RWSpeedMsg_C_write(data, destination, moduleID, callTime):
    return _RWSpeedMsgPayload.RWSpeedMsg_C_write(data, destination, moduleID, callTime)

def RWSpeedMsg_C_read(source):
    return _RWSpeedMsgPayload.RWSpeedMsg_C_read(source)

def RWSpeedMsg_C_zeroMsgPayload():
    return _RWSpeedMsgPayload.RWSpeedMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_RWSpeedMsgPayload.MsgHeader_isLinked_get, _RWSpeedMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_RWSpeedMsgPayload.MsgHeader_isWritten_get, _RWSpeedMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_RWSpeedMsgPayload.MsgHeader_timeWritten_get, _RWSpeedMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_RWSpeedMsgPayload.MsgHeader_moduleID_get, _RWSpeedMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _RWSpeedMsgPayload.MsgHeader_swiginit(self, _RWSpeedMsgPayload.new_MsgHeader())
    __swig_destroy__ = _RWSpeedMsgPayload.delete_MsgHeader

# Register MsgHeader in _RWSpeedMsgPayload:
_RWSpeedMsgPayload.MsgHeader_swigregister(MsgHeader)

