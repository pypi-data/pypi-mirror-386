# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


from typing import Union, Iterable



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _thrForceMapping
else:
    import _thrForceMapping

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



from Basilisk.architecture.swig_common_model import *


def new_doubleArray(nelements):
    return _thrForceMapping.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _thrForceMapping.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _thrForceMapping.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _thrForceMapping.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _thrForceMapping.new_longArray(nelements)

def delete_longArray(ary):
    return _thrForceMapping.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _thrForceMapping.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _thrForceMapping.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _thrForceMapping.new_intArray(nelements)

def delete_intArray(ary):
    return _thrForceMapping.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _thrForceMapping.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _thrForceMapping.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _thrForceMapping.new_shortArray(nelements)

def delete_shortArray(ary):
    return _thrForceMapping.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _thrForceMapping.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _thrForceMapping.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _thrForceMapping.delete_SwigPyIterator

    def value(self):
        return _thrForceMapping.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _thrForceMapping.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _thrForceMapping.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _thrForceMapping.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _thrForceMapping.SwigPyIterator_equal(self, x)

    def copy(self):
        return _thrForceMapping.SwigPyIterator_copy(self)

    def next(self):
        return _thrForceMapping.SwigPyIterator_next(self)

    def __next__(self):
        return _thrForceMapping.SwigPyIterator___next__(self)

    def previous(self):
        return _thrForceMapping.SwigPyIterator_previous(self)

    def advance(self, n):
        return _thrForceMapping.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _thrForceMapping.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _thrForceMapping.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _thrForceMapping.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _thrForceMapping.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _thrForceMapping.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _thrForceMapping.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _thrForceMapping:
_thrForceMapping.SwigPyIterator_swigregister(SwigPyIterator)
MAX_LOGGING_LENGTH = _thrForceMapping.MAX_LOGGING_LENGTH
BSK_DEBUG = _thrForceMapping.BSK_DEBUG
BSK_INFORMATION = _thrForceMapping.BSK_INFORMATION
BSK_WARNING = _thrForceMapping.BSK_WARNING
BSK_ERROR = _thrForceMapping.BSK_ERROR
BSK_SILENT = _thrForceMapping.BSK_SILENT

def printDefaultLogLevel():
    return _thrForceMapping.printDefaultLogLevel()

def setDefaultLogLevel(logLevel):
    return _thrForceMapping.setDefaultLogLevel(logLevel)

def getDefaultLogLevel():
    return _thrForceMapping.getDefaultLogLevel()
class BasiliskError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _thrForceMapping.BasiliskError_swiginit(self, _thrForceMapping.new_BasiliskError(*args))
    __swig_destroy__ = _thrForceMapping.delete_BasiliskError

# Register BasiliskError in _thrForceMapping:
_thrForceMapping.BasiliskError_swigregister(BasiliskError)
cvar = _thrForceMapping.cvar

class BSKLogger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _thrForceMapping.BSKLogger_swiginit(self, _thrForceMapping.new_BSKLogger(*args))
    __swig_destroy__ = _thrForceMapping.delete_BSKLogger

    def setLogLevel(self, logLevel):
        return _thrForceMapping.BSKLogger_setLogLevel(self, logLevel)

    def printLogLevel(self):
        return _thrForceMapping.BSKLogger_printLogLevel(self)

    def getLogLevel(self):
        return _thrForceMapping.BSKLogger_getLogLevel(self)

    def bskLog(self, targetLevel, info):
        return _thrForceMapping.BSKLogger_bskLog(self, targetLevel, info)
    logLevelMap = property(_thrForceMapping.BSKLogger_logLevelMap_get, _thrForceMapping.BSKLogger_logLevelMap_set)

# Register BSKLogger in _thrForceMapping:
_thrForceMapping.BSKLogger_swigregister(BSKLogger)

def _BSKLogger():
    return _thrForceMapping._BSKLogger()

def _BSKLogger_d(arg1):
    return _thrForceMapping._BSKLogger_d(arg1)

def _printLogLevel(arg1):
    return _thrForceMapping._printLogLevel(arg1)

def _setLogLevel(arg1, arg2):
    return _thrForceMapping._setLogLevel(arg1, arg2)

def _bskLog(arg1, arg2, arg3):
    return _thrForceMapping._bskLog(arg1, arg2, arg3)
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _thrForceMapping.SysModel_swiginit(self, _thrForceMapping.new_SysModel(*args))
    __swig_destroy__ = _thrForceMapping.delete_SysModel

    def SelfInit(self):
        return _thrForceMapping.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _thrForceMapping.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _thrForceMapping.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _thrForceMapping.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_thrForceMapping.SysModel_ModelTag_get, _thrForceMapping.SysModel_ModelTag_set)
    CallCounts = property(_thrForceMapping.SysModel_CallCounts_get, _thrForceMapping.SysModel_CallCounts_set)
    RNGSeed = property(_thrForceMapping.SysModel_RNGSeed_get, _thrForceMapping.SysModel_RNGSeed_set)
    moduleID = property(_thrForceMapping.SysModel_moduleID_get, _thrForceMapping.SysModel_moduleID_set)

    def logger(self, variableNames: Union[str, Iterable[str]], recordingTime: int = 0):
        """Generate a logger from one or more variables in this model.

        Each variable must be public or private with a standard-named getter.
        For example, if you want to log the variable `foo` from the model
        `mod`, then `mod.foo` or `mod.getFoo()` must be available.

        Args:
            variableNames (Union[str, Iterable[str]]): The name or names
                of the variables to log.
            recordingTime (int, optional): The minimum interval between variable
                recordings. Defaults to 0.
        """
        if isinstance(variableNames, str):
            variableNames = [variableNames]

        loggingFunctions = {}
        for variableName in variableNames:
            if hasattr(self, variableName):
                loggingFunctions[variableName] = lambda _, variableName=variableName: getattr(self, variableName)
                continue

            getterStr = f"get{variableName[0].upper()}{variableName[1:]}"
            getter = getattr(self, getterStr, None)
            if getter is not None:
                loggingFunctions[variableName] = lambda _, getter=getter: getter()
                continue

            raise ValueError(f"Cannot log {variableName} as it is not a "
                f"public variable of {type(self).__name__} and the getter "
                f"{getterStr} does not exist.")

        from Basilisk.utilities import pythonVariableLogger
        return pythonVariableLogger.PythonVariableLogger(loggingFunctions, recordingTime)


# Register SysModel in _thrForceMapping:
_thrForceMapping.SysModel_swigregister(SysModel)
class thrForceMappingConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    controlAxes_B = property(_thrForceMapping.thrForceMappingConfig_controlAxes_B_get, _thrForceMapping.thrForceMappingConfig_controlAxes_B_set)
    rThruster_B = property(_thrForceMapping.thrForceMappingConfig_rThruster_B_get, _thrForceMapping.thrForceMappingConfig_rThruster_B_set)
    gtThruster_B = property(_thrForceMapping.thrForceMappingConfig_gtThruster_B_get, _thrForceMapping.thrForceMappingConfig_gtThruster_B_set)
    thrForceSign = property(_thrForceMapping.thrForceMappingConfig_thrForceSign_get, _thrForceMapping.thrForceMappingConfig_thrForceSign_set)
    angErrThresh = property(_thrForceMapping.thrForceMappingConfig_angErrThresh_get, _thrForceMapping.thrForceMappingConfig_angErrThresh_set)
    epsilon = property(_thrForceMapping.thrForceMappingConfig_epsilon_get, _thrForceMapping.thrForceMappingConfig_epsilon_set)
    use2ndLoop = property(_thrForceMapping.thrForceMappingConfig_use2ndLoop_get, _thrForceMapping.thrForceMappingConfig_use2ndLoop_set)
    numControlAxes = property(_thrForceMapping.thrForceMappingConfig_numControlAxes_get, _thrForceMapping.thrForceMappingConfig_numControlAxes_set)
    numThrusters = property(_thrForceMapping.thrForceMappingConfig_numThrusters_get, _thrForceMapping.thrForceMappingConfig_numThrusters_set)
    outTorqAngErr = property(_thrForceMapping.thrForceMappingConfig_outTorqAngErr_get, _thrForceMapping.thrForceMappingConfig_outTorqAngErr_set)
    thrForcMag = property(_thrForceMapping.thrForceMappingConfig_thrForcMag_get, _thrForceMapping.thrForceMappingConfig_thrForcMag_set)
    thrForceCmdOutMsg = property(_thrForceMapping.thrForceMappingConfig_thrForceCmdOutMsg_get, _thrForceMapping.thrForceMappingConfig_thrForceCmdOutMsg_set)
    cmdTorqueInMsg = property(_thrForceMapping.thrForceMappingConfig_cmdTorqueInMsg_get, _thrForceMapping.thrForceMappingConfig_cmdTorqueInMsg_set)
    thrConfigInMsg = property(_thrForceMapping.thrForceMappingConfig_thrConfigInMsg_get, _thrForceMapping.thrForceMappingConfig_thrConfigInMsg_set)
    vehConfigInMsg = property(_thrForceMapping.thrForceMappingConfig_vehConfigInMsg_get, _thrForceMapping.thrForceMappingConfig_vehConfigInMsg_set)
    sc = property(_thrForceMapping.thrForceMappingConfig_sc_get, _thrForceMapping.thrForceMappingConfig_sc_set)
    bskLogger = property(_thrForceMapping.thrForceMappingConfig_bskLogger_get, _thrForceMapping.thrForceMappingConfig_bskLogger_set)

    def createWrapper(self):
        return thrForceMapping(self)


    def __init__(self):
        _thrForceMapping.thrForceMappingConfig_swiginit(self, _thrForceMapping.new_thrForceMappingConfig())
    __swig_destroy__ = _thrForceMapping.delete_thrForceMappingConfig

# Register thrForceMappingConfig in _thrForceMapping:
_thrForceMapping.thrForceMappingConfig_swigregister(thrForceMappingConfig)

def substractMin(F, size):
    return _thrForceMapping.substractMin(F, size)

def findMinimumNormForce(configData, D, Lr_B, numForces, F):
    return _thrForceMapping.findMinimumNormForce(configData, D, Lr_B, numForces, F)

def computeTorqueAngErr(D, BLr, numForces, epsilon, F, FMag):
    return _thrForceMapping.computeTorqueAngErr(D, BLr, numForces, epsilon, F, FMag)
class thrForceMapping(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _thrForceMapping.thrForceMapping_swiginit(self, _thrForceMapping.new_thrForceMapping(*args))

        if (len(args)) > 0:
            args[0].thisown = False




    def SelfInit(self):
        return _thrForceMapping.thrForceMapping_SelfInit(self)

    def UpdateState(self, currentSimNanos):
        return _thrForceMapping.thrForceMapping_UpdateState(self, currentSimNanos)

    def Reset(self, currentSimNanos):
        return _thrForceMapping.thrForceMapping_Reset(self, currentSimNanos)

    def __deref__(self):
        return _thrForceMapping.thrForceMapping___deref__(self)

    def getConfig(self):
        return _thrForceMapping.thrForceMapping_getConfig(self)
    __swig_destroy__ = _thrForceMapping.delete_thrForceMapping
    controlAxes_B = property(_thrForceMapping.thrForceMapping_controlAxes_B_get, _thrForceMapping.thrForceMapping_controlAxes_B_set)
    rThruster_B = property(_thrForceMapping.thrForceMapping_rThruster_B_get, _thrForceMapping.thrForceMapping_rThruster_B_set)
    gtThruster_B = property(_thrForceMapping.thrForceMapping_gtThruster_B_get, _thrForceMapping.thrForceMapping_gtThruster_B_set)
    thrForceSign = property(_thrForceMapping.thrForceMapping_thrForceSign_get, _thrForceMapping.thrForceMapping_thrForceSign_set)
    angErrThresh = property(_thrForceMapping.thrForceMapping_angErrThresh_get, _thrForceMapping.thrForceMapping_angErrThresh_set)
    epsilon = property(_thrForceMapping.thrForceMapping_epsilon_get, _thrForceMapping.thrForceMapping_epsilon_set)
    use2ndLoop = property(_thrForceMapping.thrForceMapping_use2ndLoop_get, _thrForceMapping.thrForceMapping_use2ndLoop_set)
    numControlAxes = property(_thrForceMapping.thrForceMapping_numControlAxes_get, _thrForceMapping.thrForceMapping_numControlAxes_set)
    numThrusters = property(_thrForceMapping.thrForceMapping_numThrusters_get, _thrForceMapping.thrForceMapping_numThrusters_set)
    outTorqAngErr = property(_thrForceMapping.thrForceMapping_outTorqAngErr_get, _thrForceMapping.thrForceMapping_outTorqAngErr_set)
    thrForcMag = property(_thrForceMapping.thrForceMapping_thrForcMag_get, _thrForceMapping.thrForceMapping_thrForcMag_set)
    thrForceCmdOutMsg = property(_thrForceMapping.thrForceMapping_thrForceCmdOutMsg_get, _thrForceMapping.thrForceMapping_thrForceCmdOutMsg_set)
    cmdTorqueInMsg = property(_thrForceMapping.thrForceMapping_cmdTorqueInMsg_get, _thrForceMapping.thrForceMapping_cmdTorqueInMsg_set)
    thrConfigInMsg = property(_thrForceMapping.thrForceMapping_thrConfigInMsg_get, _thrForceMapping.thrForceMapping_thrConfigInMsg_set)
    vehConfigInMsg = property(_thrForceMapping.thrForceMapping_vehConfigInMsg_get, _thrForceMapping.thrForceMapping_vehConfigInMsg_set)
    sc = property(_thrForceMapping.thrForceMapping_sc_get, _thrForceMapping.thrForceMapping_sc_set)
    bskLogger = property(_thrForceMapping.thrForceMapping_bskLogger_get, _thrForceMapping.thrForceMapping_bskLogger_set)

# Register thrForceMapping in _thrForceMapping:
_thrForceMapping.thrForceMapping_swigregister(thrForceMapping)
class THRArrayCmdForceMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    thrForce = property(_thrForceMapping.THRArrayCmdForceMsgPayload_thrForce_get, _thrForceMapping.THRArrayCmdForceMsgPayload_thrForce_set)

    def __init__(self):
        _thrForceMapping.THRArrayCmdForceMsgPayload_swiginit(self, _thrForceMapping.new_THRArrayCmdForceMsgPayload())
    __swig_destroy__ = _thrForceMapping.delete_THRArrayCmdForceMsgPayload

# Register THRArrayCmdForceMsgPayload in _thrForceMapping:
_thrForceMapping.THRArrayCmdForceMsgPayload_swigregister(THRArrayCmdForceMsgPayload)
class VehicleConfigMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ISCPntB_B = property(_thrForceMapping.VehicleConfigMsgPayload_ISCPntB_B_get, _thrForceMapping.VehicleConfigMsgPayload_ISCPntB_B_set)
    CoM_B = property(_thrForceMapping.VehicleConfigMsgPayload_CoM_B_get, _thrForceMapping.VehicleConfigMsgPayload_CoM_B_set)
    massSC = property(_thrForceMapping.VehicleConfigMsgPayload_massSC_get, _thrForceMapping.VehicleConfigMsgPayload_massSC_set)
    CurrentADCSState = property(_thrForceMapping.VehicleConfigMsgPayload_CurrentADCSState_get, _thrForceMapping.VehicleConfigMsgPayload_CurrentADCSState_set)

    def __init__(self):
        _thrForceMapping.VehicleConfigMsgPayload_swiginit(self, _thrForceMapping.new_VehicleConfigMsgPayload())
    __swig_destroy__ = _thrForceMapping.delete_VehicleConfigMsgPayload

# Register VehicleConfigMsgPayload in _thrForceMapping:
_thrForceMapping.VehicleConfigMsgPayload_swigregister(VehicleConfigMsgPayload)
class THRArrayConfigMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    numThrusters = property(_thrForceMapping.THRArrayConfigMsgPayload_numThrusters_get, _thrForceMapping.THRArrayConfigMsgPayload_numThrusters_set)
    thrusters = property(_thrForceMapping.THRArrayConfigMsgPayload_thrusters_get, _thrForceMapping.THRArrayConfigMsgPayload_thrusters_set)

    def __init__(self):
        _thrForceMapping.THRArrayConfigMsgPayload_swiginit(self, _thrForceMapping.new_THRArrayConfigMsgPayload())
    __swig_destroy__ = _thrForceMapping.delete_THRArrayConfigMsgPayload

# Register THRArrayConfigMsgPayload in _thrForceMapping:
_thrForceMapping.THRArrayConfigMsgPayload_swigregister(THRArrayConfigMsgPayload)
class CmdTorqueBodyMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    torqueRequestBody = property(_thrForceMapping.CmdTorqueBodyMsgPayload_torqueRequestBody_get, _thrForceMapping.CmdTorqueBodyMsgPayload_torqueRequestBody_set)

    def __init__(self):
        _thrForceMapping.CmdTorqueBodyMsgPayload_swiginit(self, _thrForceMapping.new_CmdTorqueBodyMsgPayload())
    __swig_destroy__ = _thrForceMapping.delete_CmdTorqueBodyMsgPayload

# Register CmdTorqueBodyMsgPayload in _thrForceMapping:
_thrForceMapping.CmdTorqueBodyMsgPayload_swigregister(CmdTorqueBodyMsgPayload)

import sys
protectAllClasses(sys.modules[__name__])

''' '''
import numpy as np


class Results_thrForceMapping():
    def __init__(self, Lr, COrig, COM, rData, gData, thrForceSign, thrForceMag, angErrThresh, numThrusters, epsilon, use2ndLoop):
        self.rData = np.array(rData)
        self.gData = np.array(gData)
        self.Lr_B = np.array(Lr) #Original Requested Torque in B Frame
        self.COM = COM

        self.thrForceSign = thrForceSign # -1 is DV thrusters; +1 is RCS thrusters
        self.thrForceMag = thrForceMag # specifies the max thrust for each thruster
        self.angErrThresh = angErrThresh # Determines when the thrusters are considered saturated

        self.numThrusters = numThrusters # number of explicitly configured thrusters

        self.C = np.array(COrig) # Control "Frame" (could be 1, 2, or 3 axii controllable)
        self.C = np.reshape(self.C, ((len(self.C)//3), 3), order='C')

        self.epsilon = epsilon
        self.use2ndLoop = use2ndLoop
        return

    def results_thrForceMapping(self):
# Produce the forces with all thrusters included
        Lr_offset = [0.0, 0.0, 0.0]
        CT = np.transpose(self.C)

# Compute D Matrix and Determine Force
        D = np.zeros((3,len(self.rData)))
        for i in range(len(self.rData)):
            D[:,i] = np.cross((self.rData[i,:] - self.COM), self.gData[i,:])
            if(self.thrForceSign < 0):
                Lr_offset -= self.thrForceMag[i]*D[:,i]

        self.Lr_B = self.Lr_B + Lr_offset
        Lr_Bar = np.dot(self.C, self.Lr_B)
        F = self.mapToForce(D, Lr_Bar)

# Subtract off minimum force (remove null space contribution)
        if self.thrForceSign > 0:
#F = self.subtractPairwiseNullSpace(F, D)
            F = self.subtractMin(F, self.numThrusters)

# Identify any negative forces
        t = (F[:]*self.thrForceSign > self.epsilon)

# Recompute the D Matrix with negative forces removed and compute Force
        if self.thrForceSign < 0 or self.use2ndLoop:
            DNew = np.array([])
            for i in range(0,len(F)):
                if t[i]:
                    DNew = np.append(DNew, np.cross((self.rData[i,:] - self.COM), self.gData[i]))
            DNew = np.reshape(DNew, (3, (len(DNew) // 3)), order='F')
            FNew = self.mapToForce(DNew, Lr_Bar)
            if (self.thrForceSign > 0):
                FNew = self.subtractMin(FNew,len(DNew[0])) # Produced negative forces when doing 2nd loop, dropped thruster, and COM offset
# Remove minumum force
            count = 0
            for i in range(0,len(F)):
                if t[i]:
                    F[i] = FNew[count]
                    count += 1
                else:
                    F[i] = 0.0
        else:
            DNew = D
        angle = self.results_computeAngErr(D, Lr_Bar, F)

        if angle > self.angErrThresh:

            maxFractUse = 0.0
            for i in range(0, self.numThrusters):
                if self.thrForceMag[i] > 0 and abs(F[i])/self.thrForceMag[i] > maxFractUse:
                    maxFractUse = abs(F[i])/self.thrForceMag[i]
            if maxFractUse > 1.0:
                F = F/maxFractUse
                angleErr = self.results_computeAngErr(D, Lr_Bar, F)

        return F, DNew

    def results_computeAngErr(self, D, BLr_B, F):
        returnAngle = 0.0
        DT = np.transpose(D)

        if np.linalg.norm(BLr_B) > 10 ** -9:
            tauActual_B = [0.0, 0.0, 0.0]
            BLr_B_hat = BLr_B / np.linalg.norm(BLr_B)
            for i in range(0, self.numThrusters):
                if abs(F[i]) < self.thrForceMag[i]:
                    thrForce = F[i]
                else:
                    thrForce = self.thrForceMag[i] * abs(F[i]) / F[i]

                LrEffector_B = thrForce * DT[i, :]
                tauActual_B += LrEffector_B

            tauActual_B = tauActual_B / np.linalg.norm(tauActual_B)

            if np.dot(BLr_B_hat, tauActual_B) < 1.0:
                returnAngle = np.arccos(np.dot(BLr_B_hat, tauActual_B))

        return returnAngle

    def numRelEqualElements(self, array1, array2, accuracy):
        count = 0
        for i in range(3):
            if abs(array1[i] - array2[i]) < accuracy:
                count += 1
        return count

    def mapToForce(self, D, Lr_Bar):
        numControlAxes = 0
        for i in range(0, len(self.C[0])):
            if not np.array_equal(self.C[:, i], [0.0, 0.0, 0.0]):
                numControlAxes = numControlAxes + 1
        numThr = 0
        for i in range(0, len(D[0])):
            if not np.array_equal(D[:, i], [0.0, 0.0, 0.0]):
                numThr = numThr + 1
        D = np.matmul(self.C, D)
        DT = np.transpose(D)
        DDT = np.eye(3)
        for i in range(0, numControlAxes):
            for j in range(0, numControlAxes):
                DDT[i][j] = 0.0
                for k in range(0, numThr):
                    DDT[i][j] += D[i][k] * D[j][k]
        try:
            DDTInv = np.linalg.inv(DDT)
            if np.linalg.det(DDT) < self.epsilon:
                raise np.linalg.LinAlgError()
        except:
            DDTInv = np.zeros((3, 3))
            print("Singular Matrix! Outputting Zeros.")

        DDTInvLr_Bar = np.dot(DDTInv, Lr_Bar)
        F = np.dot(DT, DDTInvLr_Bar)
        return F

    def subtractPairwiseNullSpace(self, F, D):

        for i in range(self.numThrusters):
            if F[i] < 0.0:
                for j in range(self.numThrusters):
                    if (np.allclose(D[:, i], D[:, j], atol=self.epsilon) and i != j):
                        F[j] -= F[i]
                        break
                F[i] = 0.0

        return F

    def subtractMin(self, F, size):
        minValue = 0.0
        for i in range(size):
            if F[i] < minValue:
                minValue = F[i]

        for i in range(size):
            F[i] -= minValue

        return F


