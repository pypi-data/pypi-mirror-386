# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


from typing import Union, Iterable



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _svIntegrators
else:
    import _svIntegrators

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



from Basilisk.architecture.swig_common_model import *

# The following maps store the RK base classes w.r.t their stage number
_rk_base_classes = {}
_rk_adaptive_base_classes = {}

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _svIntegrators.delete_SwigPyIterator

    def value(self):
        return _svIntegrators.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _svIntegrators.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _svIntegrators.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _svIntegrators.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _svIntegrators.SwigPyIterator_equal(self, x)

    def copy(self):
        return _svIntegrators.SwigPyIterator_copy(self)

    def next(self):
        return _svIntegrators.SwigPyIterator_next(self)

    def __next__(self):
        return _svIntegrators.SwigPyIterator___next__(self)

    def previous(self):
        return _svIntegrators.SwigPyIterator_previous(self)

    def advance(self, n):
        return _svIntegrators.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _svIntegrators.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _svIntegrators.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _svIntegrators.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _svIntegrators.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _svIntegrators.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _svIntegrators.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _svIntegrators:
_svIntegrators.SwigPyIterator_swigregister(SwigPyIterator)

from Basilisk.architecture.swig_common_model import *


def new_doubleArray(nelements):
    return _svIntegrators.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _svIntegrators.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _svIntegrators.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _svIntegrators.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _svIntegrators.new_longArray(nelements)

def delete_longArray(ary):
    return _svIntegrators.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _svIntegrators.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _svIntegrators.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _svIntegrators.new_intArray(nelements)

def delete_intArray(ary):
    return _svIntegrators.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _svIntegrators.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _svIntegrators.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _svIntegrators.new_shortArray(nelements)

def delete_shortArray(ary):
    return _svIntegrators.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _svIntegrators.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _svIntegrators.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


MAX_LOGGING_LENGTH = _svIntegrators.MAX_LOGGING_LENGTH
BSK_DEBUG = _svIntegrators.BSK_DEBUG
BSK_INFORMATION = _svIntegrators.BSK_INFORMATION
BSK_WARNING = _svIntegrators.BSK_WARNING
BSK_ERROR = _svIntegrators.BSK_ERROR
BSK_SILENT = _svIntegrators.BSK_SILENT

def printDefaultLogLevel():
    return _svIntegrators.printDefaultLogLevel()

def setDefaultLogLevel(logLevel):
    return _svIntegrators.setDefaultLogLevel(logLevel)

def getDefaultLogLevel():
    return _svIntegrators.getDefaultLogLevel()
class BasiliskError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _svIntegrators.BasiliskError_swiginit(self, _svIntegrators.new_BasiliskError(*args))
    __swig_destroy__ = _svIntegrators.delete_BasiliskError

# Register BasiliskError in _svIntegrators:
_svIntegrators.BasiliskError_swigregister(BasiliskError)
cvar = _svIntegrators.cvar

class BSKLogger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _svIntegrators.BSKLogger_swiginit(self, _svIntegrators.new_BSKLogger(*args))
    __swig_destroy__ = _svIntegrators.delete_BSKLogger

    def setLogLevel(self, logLevel):
        return _svIntegrators.BSKLogger_setLogLevel(self, logLevel)

    def printLogLevel(self):
        return _svIntegrators.BSKLogger_printLogLevel(self)

    def getLogLevel(self):
        return _svIntegrators.BSKLogger_getLogLevel(self)

    def bskLog(self, targetLevel, info):
        return _svIntegrators.BSKLogger_bskLog(self, targetLevel, info)
    logLevelMap = property(_svIntegrators.BSKLogger_logLevelMap_get, _svIntegrators.BSKLogger_logLevelMap_set)

# Register BSKLogger in _svIntegrators:
_svIntegrators.BSKLogger_swigregister(BSKLogger)

def _BSKLogger():
    return _svIntegrators._BSKLogger()

def _BSKLogger_d(arg1):
    return _svIntegrators._BSKLogger_d(arg1)

def _printLogLevel(arg1):
    return _svIntegrators._printLogLevel(arg1)

def _setLogLevel(arg1, arg2):
    return _svIntegrators._setLogLevel(arg1, arg2)

def _bskLog(arg1, arg2, arg3):
    return _svIntegrators._bskLog(arg1, arg2, arg3)
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _svIntegrators.SysModel_swiginit(self, _svIntegrators.new_SysModel(*args))
    __swig_destroy__ = _svIntegrators.delete_SysModel

    def SelfInit(self):
        return _svIntegrators.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _svIntegrators.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _svIntegrators.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _svIntegrators.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_svIntegrators.SysModel_ModelTag_get, _svIntegrators.SysModel_ModelTag_set)
    CallCounts = property(_svIntegrators.SysModel_CallCounts_get, _svIntegrators.SysModel_CallCounts_set)
    RNGSeed = property(_svIntegrators.SysModel_RNGSeed_get, _svIntegrators.SysModel_RNGSeed_set)
    moduleID = property(_svIntegrators.SysModel_moduleID_get, _svIntegrators.SysModel_moduleID_set)

    def logger(self, variableNames: Union[str, Iterable[str]], recordingTime: int = 0):
        """Generate a logger from one or more variables in this model.

        Each variable must be public or private with a standard-named getter.
        For example, if you want to log the variable `foo` from the model
        `mod`, then `mod.foo` or `mod.getFoo()` must be available.

        Args:
            variableNames (Union[str, Iterable[str]]): The name or names
                of the variables to log.
            recordingTime (int, optional): The minimum interval between variable
                recordings. Defaults to 0.
        """
        if isinstance(variableNames, str):
            variableNames = [variableNames]

        loggingFunctions = {}
        for variableName in variableNames:
            if hasattr(self, variableName):
                loggingFunctions[variableName] = lambda _, variableName=variableName: getattr(self, variableName)
                continue

            getterStr = f"get{variableName[0].upper()}{variableName[1:]}"
            getter = getattr(self, getterStr, None)
            if getter is not None:
                loggingFunctions[variableName] = lambda _, getter=getter: getter()
                continue

            raise ValueError(f"Cannot log {variableName} as it is not a "
                f"public variable of {type(self).__name__} and the getter "
                f"{getterStr} does not exist.")

        from Basilisk.utilities import pythonVariableLogger
        return pythonVariableLogger.PythonVariableLogger(loggingFunctions, recordingTime)


# Register SysModel in _svIntegrators:
_svIntegrators.SysModel_swigregister(SysModel)
class StateVecIntegrator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _svIntegrators.delete_StateVecIntegrator

    def integrate(self, currentTime, timeStep):
        return _svIntegrators.StateVecIntegrator_integrate(self, currentTime, timeStep)
    dynPtrs = property(_svIntegrators.StateVecIntegrator_dynPtrs_get, _svIntegrators.StateVecIntegrator_dynPtrs_set)

# Register StateVecIntegrator in _svIntegrators:
_svIntegrators.StateVecIntegrator_swigregister(StateVecIntegrator)
class svIntegratorRungeKutta1(StateVecIntegrator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def integrate(self, currentTime, timeStep):
        return _svIntegrators.svIntegratorRungeKutta1_integrate(self, currentTime, timeStep)

    def __init__(self, *args):
        _svIntegrators.svIntegratorRungeKutta1_swiginit(self, _svIntegrators.new_svIntegratorRungeKutta1(*args))
    __swig_destroy__ = _svIntegrators.delete_svIntegratorRungeKutta1

# Register svIntegratorRungeKutta1 in _svIntegrators:
_svIntegrators.svIntegratorRungeKutta1_swigregister(svIntegratorRungeKutta1)
class svIntegratorAdaptiveRungeKutta1(svIntegratorRungeKutta1):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def integrate(self, currentTime, timeStep):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta1_integrate(self, currentTime, timeStep)

    def setRelativeTolerance(self, *args):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta1_setRelativeTolerance(self, *args)

    def getRelativeTolerance(self, *args):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta1_getRelativeTolerance(self, *args)

    def setAbsoluteTolerance(self, *args):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta1_setAbsoluteTolerance(self, *args)

    def getAbsoluteTolerance(self, *args):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta1_getAbsoluteTolerance(self, *args)
    relTol = property(_svIntegrators.svIntegratorAdaptiveRungeKutta1_relTol_get, _svIntegrators.svIntegratorAdaptiveRungeKutta1_relTol_set)
    absTol = property(_svIntegrators.svIntegratorAdaptiveRungeKutta1_absTol_get, _svIntegrators.svIntegratorAdaptiveRungeKutta1_absTol_set)
    safetyFactorForNextStepSize = property(_svIntegrators.svIntegratorAdaptiveRungeKutta1_safetyFactorForNextStepSize_get, _svIntegrators.svIntegratorAdaptiveRungeKutta1_safetyFactorForNextStepSize_set)
    maximumFactorIncreaseForNextStepSize = property(_svIntegrators.svIntegratorAdaptiveRungeKutta1_maximumFactorIncreaseForNextStepSize_get, _svIntegrators.svIntegratorAdaptiveRungeKutta1_maximumFactorIncreaseForNextStepSize_set)
    minimumFactorDecreaseForNextStepSize = property(_svIntegrators.svIntegratorAdaptiveRungeKutta1_minimumFactorDecreaseForNextStepSize_get, _svIntegrators.svIntegratorAdaptiveRungeKutta1_minimumFactorDecreaseForNextStepSize_set)

    def __init__(self, *args):
        _svIntegrators.svIntegratorAdaptiveRungeKutta1_swiginit(self, _svIntegrators.new_svIntegratorAdaptiveRungeKutta1(*args))
    __swig_destroy__ = _svIntegrators.delete_svIntegratorAdaptiveRungeKutta1

# Register svIntegratorAdaptiveRungeKutta1 in _svIntegrators:
_svIntegrators.svIntegratorAdaptiveRungeKutta1_swigregister(svIntegratorAdaptiveRungeKutta1)

_rk_base_classes[1] = svIntegratorRungeKutta1
_rk_adaptive_base_classes[1] = svIntegratorAdaptiveRungeKutta1

class svIntegratorRungeKutta2(StateVecIntegrator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def integrate(self, currentTime, timeStep):
        return _svIntegrators.svIntegratorRungeKutta2_integrate(self, currentTime, timeStep)

    def __init__(self, *args):
        _svIntegrators.svIntegratorRungeKutta2_swiginit(self, _svIntegrators.new_svIntegratorRungeKutta2(*args))
    __swig_destroy__ = _svIntegrators.delete_svIntegratorRungeKutta2

# Register svIntegratorRungeKutta2 in _svIntegrators:
_svIntegrators.svIntegratorRungeKutta2_swigregister(svIntegratorRungeKutta2)
class svIntegratorAdaptiveRungeKutta2(svIntegratorRungeKutta2):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def integrate(self, currentTime, timeStep):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta2_integrate(self, currentTime, timeStep)

    def setRelativeTolerance(self, *args):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta2_setRelativeTolerance(self, *args)

    def getRelativeTolerance(self, *args):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta2_getRelativeTolerance(self, *args)

    def setAbsoluteTolerance(self, *args):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta2_setAbsoluteTolerance(self, *args)

    def getAbsoluteTolerance(self, *args):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta2_getAbsoluteTolerance(self, *args)
    relTol = property(_svIntegrators.svIntegratorAdaptiveRungeKutta2_relTol_get, _svIntegrators.svIntegratorAdaptiveRungeKutta2_relTol_set)
    absTol = property(_svIntegrators.svIntegratorAdaptiveRungeKutta2_absTol_get, _svIntegrators.svIntegratorAdaptiveRungeKutta2_absTol_set)
    safetyFactorForNextStepSize = property(_svIntegrators.svIntegratorAdaptiveRungeKutta2_safetyFactorForNextStepSize_get, _svIntegrators.svIntegratorAdaptiveRungeKutta2_safetyFactorForNextStepSize_set)
    maximumFactorIncreaseForNextStepSize = property(_svIntegrators.svIntegratorAdaptiveRungeKutta2_maximumFactorIncreaseForNextStepSize_get, _svIntegrators.svIntegratorAdaptiveRungeKutta2_maximumFactorIncreaseForNextStepSize_set)
    minimumFactorDecreaseForNextStepSize = property(_svIntegrators.svIntegratorAdaptiveRungeKutta2_minimumFactorDecreaseForNextStepSize_get, _svIntegrators.svIntegratorAdaptiveRungeKutta2_minimumFactorDecreaseForNextStepSize_set)

    def __init__(self, *args):
        _svIntegrators.svIntegratorAdaptiveRungeKutta2_swiginit(self, _svIntegrators.new_svIntegratorAdaptiveRungeKutta2(*args))
    __swig_destroy__ = _svIntegrators.delete_svIntegratorAdaptiveRungeKutta2

# Register svIntegratorAdaptiveRungeKutta2 in _svIntegrators:
_svIntegrators.svIntegratorAdaptiveRungeKutta2_swigregister(svIntegratorAdaptiveRungeKutta2)

_rk_base_classes[2] = svIntegratorRungeKutta2
_rk_adaptive_base_classes[2] = svIntegratorAdaptiveRungeKutta2

class svIntegratorRungeKutta3(StateVecIntegrator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def integrate(self, currentTime, timeStep):
        return _svIntegrators.svIntegratorRungeKutta3_integrate(self, currentTime, timeStep)

    def __init__(self, *args):
        _svIntegrators.svIntegratorRungeKutta3_swiginit(self, _svIntegrators.new_svIntegratorRungeKutta3(*args))
    __swig_destroy__ = _svIntegrators.delete_svIntegratorRungeKutta3

# Register svIntegratorRungeKutta3 in _svIntegrators:
_svIntegrators.svIntegratorRungeKutta3_swigregister(svIntegratorRungeKutta3)
class svIntegratorAdaptiveRungeKutta3(svIntegratorRungeKutta3):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def integrate(self, currentTime, timeStep):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta3_integrate(self, currentTime, timeStep)

    def setRelativeTolerance(self, *args):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta3_setRelativeTolerance(self, *args)

    def getRelativeTolerance(self, *args):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta3_getRelativeTolerance(self, *args)

    def setAbsoluteTolerance(self, *args):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta3_setAbsoluteTolerance(self, *args)

    def getAbsoluteTolerance(self, *args):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta3_getAbsoluteTolerance(self, *args)
    relTol = property(_svIntegrators.svIntegratorAdaptiveRungeKutta3_relTol_get, _svIntegrators.svIntegratorAdaptiveRungeKutta3_relTol_set)
    absTol = property(_svIntegrators.svIntegratorAdaptiveRungeKutta3_absTol_get, _svIntegrators.svIntegratorAdaptiveRungeKutta3_absTol_set)
    safetyFactorForNextStepSize = property(_svIntegrators.svIntegratorAdaptiveRungeKutta3_safetyFactorForNextStepSize_get, _svIntegrators.svIntegratorAdaptiveRungeKutta3_safetyFactorForNextStepSize_set)
    maximumFactorIncreaseForNextStepSize = property(_svIntegrators.svIntegratorAdaptiveRungeKutta3_maximumFactorIncreaseForNextStepSize_get, _svIntegrators.svIntegratorAdaptiveRungeKutta3_maximumFactorIncreaseForNextStepSize_set)
    minimumFactorDecreaseForNextStepSize = property(_svIntegrators.svIntegratorAdaptiveRungeKutta3_minimumFactorDecreaseForNextStepSize_get, _svIntegrators.svIntegratorAdaptiveRungeKutta3_minimumFactorDecreaseForNextStepSize_set)

    def __init__(self, *args):
        _svIntegrators.svIntegratorAdaptiveRungeKutta3_swiginit(self, _svIntegrators.new_svIntegratorAdaptiveRungeKutta3(*args))
    __swig_destroy__ = _svIntegrators.delete_svIntegratorAdaptiveRungeKutta3

# Register svIntegratorAdaptiveRungeKutta3 in _svIntegrators:
_svIntegrators.svIntegratorAdaptiveRungeKutta3_swigregister(svIntegratorAdaptiveRungeKutta3)

_rk_base_classes[3] = svIntegratorRungeKutta3
_rk_adaptive_base_classes[3] = svIntegratorAdaptiveRungeKutta3

class svIntegratorRungeKutta4(StateVecIntegrator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def integrate(self, currentTime, timeStep):
        return _svIntegrators.svIntegratorRungeKutta4_integrate(self, currentTime, timeStep)

    def __init__(self, *args):
        _svIntegrators.svIntegratorRungeKutta4_swiginit(self, _svIntegrators.new_svIntegratorRungeKutta4(*args))
    __swig_destroy__ = _svIntegrators.delete_svIntegratorRungeKutta4

# Register svIntegratorRungeKutta4 in _svIntegrators:
_svIntegrators.svIntegratorRungeKutta4_swigregister(svIntegratorRungeKutta4)
class svIntegratorAdaptiveRungeKutta4(svIntegratorRungeKutta4):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def integrate(self, currentTime, timeStep):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta4_integrate(self, currentTime, timeStep)

    def setRelativeTolerance(self, *args):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta4_setRelativeTolerance(self, *args)

    def getRelativeTolerance(self, *args):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta4_getRelativeTolerance(self, *args)

    def setAbsoluteTolerance(self, *args):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta4_setAbsoluteTolerance(self, *args)

    def getAbsoluteTolerance(self, *args):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta4_getAbsoluteTolerance(self, *args)
    relTol = property(_svIntegrators.svIntegratorAdaptiveRungeKutta4_relTol_get, _svIntegrators.svIntegratorAdaptiveRungeKutta4_relTol_set)
    absTol = property(_svIntegrators.svIntegratorAdaptiveRungeKutta4_absTol_get, _svIntegrators.svIntegratorAdaptiveRungeKutta4_absTol_set)
    safetyFactorForNextStepSize = property(_svIntegrators.svIntegratorAdaptiveRungeKutta4_safetyFactorForNextStepSize_get, _svIntegrators.svIntegratorAdaptiveRungeKutta4_safetyFactorForNextStepSize_set)
    maximumFactorIncreaseForNextStepSize = property(_svIntegrators.svIntegratorAdaptiveRungeKutta4_maximumFactorIncreaseForNextStepSize_get, _svIntegrators.svIntegratorAdaptiveRungeKutta4_maximumFactorIncreaseForNextStepSize_set)
    minimumFactorDecreaseForNextStepSize = property(_svIntegrators.svIntegratorAdaptiveRungeKutta4_minimumFactorDecreaseForNextStepSize_get, _svIntegrators.svIntegratorAdaptiveRungeKutta4_minimumFactorDecreaseForNextStepSize_set)

    def __init__(self, *args):
        _svIntegrators.svIntegratorAdaptiveRungeKutta4_swiginit(self, _svIntegrators.new_svIntegratorAdaptiveRungeKutta4(*args))
    __swig_destroy__ = _svIntegrators.delete_svIntegratorAdaptiveRungeKutta4

# Register svIntegratorAdaptiveRungeKutta4 in _svIntegrators:
_svIntegrators.svIntegratorAdaptiveRungeKutta4_swigregister(svIntegratorAdaptiveRungeKutta4)

_rk_base_classes[4] = svIntegratorRungeKutta4
_rk_adaptive_base_classes[4] = svIntegratorAdaptiveRungeKutta4

class svIntegratorRungeKutta6(StateVecIntegrator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def integrate(self, currentTime, timeStep):
        return _svIntegrators.svIntegratorRungeKutta6_integrate(self, currentTime, timeStep)

    def __init__(self, *args):
        _svIntegrators.svIntegratorRungeKutta6_swiginit(self, _svIntegrators.new_svIntegratorRungeKutta6(*args))
    __swig_destroy__ = _svIntegrators.delete_svIntegratorRungeKutta6

# Register svIntegratorRungeKutta6 in _svIntegrators:
_svIntegrators.svIntegratorRungeKutta6_swigregister(svIntegratorRungeKutta6)
class svIntegratorAdaptiveRungeKutta6(svIntegratorRungeKutta6):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def integrate(self, currentTime, timeStep):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta6_integrate(self, currentTime, timeStep)

    def setRelativeTolerance(self, *args):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta6_setRelativeTolerance(self, *args)

    def getRelativeTolerance(self, *args):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta6_getRelativeTolerance(self, *args)

    def setAbsoluteTolerance(self, *args):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta6_setAbsoluteTolerance(self, *args)

    def getAbsoluteTolerance(self, *args):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta6_getAbsoluteTolerance(self, *args)
    relTol = property(_svIntegrators.svIntegratorAdaptiveRungeKutta6_relTol_get, _svIntegrators.svIntegratorAdaptiveRungeKutta6_relTol_set)
    absTol = property(_svIntegrators.svIntegratorAdaptiveRungeKutta6_absTol_get, _svIntegrators.svIntegratorAdaptiveRungeKutta6_absTol_set)
    safetyFactorForNextStepSize = property(_svIntegrators.svIntegratorAdaptiveRungeKutta6_safetyFactorForNextStepSize_get, _svIntegrators.svIntegratorAdaptiveRungeKutta6_safetyFactorForNextStepSize_set)
    maximumFactorIncreaseForNextStepSize = property(_svIntegrators.svIntegratorAdaptiveRungeKutta6_maximumFactorIncreaseForNextStepSize_get, _svIntegrators.svIntegratorAdaptiveRungeKutta6_maximumFactorIncreaseForNextStepSize_set)
    minimumFactorDecreaseForNextStepSize = property(_svIntegrators.svIntegratorAdaptiveRungeKutta6_minimumFactorDecreaseForNextStepSize_get, _svIntegrators.svIntegratorAdaptiveRungeKutta6_minimumFactorDecreaseForNextStepSize_set)

    def __init__(self, *args):
        _svIntegrators.svIntegratorAdaptiveRungeKutta6_swiginit(self, _svIntegrators.new_svIntegratorAdaptiveRungeKutta6(*args))
    __swig_destroy__ = _svIntegrators.delete_svIntegratorAdaptiveRungeKutta6

# Register svIntegratorAdaptiveRungeKutta6 in _svIntegrators:
_svIntegrators.svIntegratorAdaptiveRungeKutta6_swigregister(svIntegratorAdaptiveRungeKutta6)

_rk_base_classes[6] = svIntegratorRungeKutta6
_rk_adaptive_base_classes[6] = svIntegratorAdaptiveRungeKutta6

class svIntegratorRungeKutta7(StateVecIntegrator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def integrate(self, currentTime, timeStep):
        return _svIntegrators.svIntegratorRungeKutta7_integrate(self, currentTime, timeStep)

    def __init__(self, *args):
        _svIntegrators.svIntegratorRungeKutta7_swiginit(self, _svIntegrators.new_svIntegratorRungeKutta7(*args))
    __swig_destroy__ = _svIntegrators.delete_svIntegratorRungeKutta7

# Register svIntegratorRungeKutta7 in _svIntegrators:
_svIntegrators.svIntegratorRungeKutta7_swigregister(svIntegratorRungeKutta7)
class svIntegratorAdaptiveRungeKutta7(svIntegratorRungeKutta7):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def integrate(self, currentTime, timeStep):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta7_integrate(self, currentTime, timeStep)

    def setRelativeTolerance(self, *args):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta7_setRelativeTolerance(self, *args)

    def getRelativeTolerance(self, *args):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta7_getRelativeTolerance(self, *args)

    def setAbsoluteTolerance(self, *args):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta7_setAbsoluteTolerance(self, *args)

    def getAbsoluteTolerance(self, *args):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta7_getAbsoluteTolerance(self, *args)
    relTol = property(_svIntegrators.svIntegratorAdaptiveRungeKutta7_relTol_get, _svIntegrators.svIntegratorAdaptiveRungeKutta7_relTol_set)
    absTol = property(_svIntegrators.svIntegratorAdaptiveRungeKutta7_absTol_get, _svIntegrators.svIntegratorAdaptiveRungeKutta7_absTol_set)
    safetyFactorForNextStepSize = property(_svIntegrators.svIntegratorAdaptiveRungeKutta7_safetyFactorForNextStepSize_get, _svIntegrators.svIntegratorAdaptiveRungeKutta7_safetyFactorForNextStepSize_set)
    maximumFactorIncreaseForNextStepSize = property(_svIntegrators.svIntegratorAdaptiveRungeKutta7_maximumFactorIncreaseForNextStepSize_get, _svIntegrators.svIntegratorAdaptiveRungeKutta7_maximumFactorIncreaseForNextStepSize_set)
    minimumFactorDecreaseForNextStepSize = property(_svIntegrators.svIntegratorAdaptiveRungeKutta7_minimumFactorDecreaseForNextStepSize_get, _svIntegrators.svIntegratorAdaptiveRungeKutta7_minimumFactorDecreaseForNextStepSize_set)

    def __init__(self, *args):
        _svIntegrators.svIntegratorAdaptiveRungeKutta7_swiginit(self, _svIntegrators.new_svIntegratorAdaptiveRungeKutta7(*args))
    __swig_destroy__ = _svIntegrators.delete_svIntegratorAdaptiveRungeKutta7

# Register svIntegratorAdaptiveRungeKutta7 in _svIntegrators:
_svIntegrators.svIntegratorAdaptiveRungeKutta7_swigregister(svIntegratorAdaptiveRungeKutta7)

_rk_base_classes[7] = svIntegratorRungeKutta7
_rk_adaptive_base_classes[7] = svIntegratorAdaptiveRungeKutta7

class svIntegratorRungeKutta9(StateVecIntegrator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def integrate(self, currentTime, timeStep):
        return _svIntegrators.svIntegratorRungeKutta9_integrate(self, currentTime, timeStep)

    def __init__(self, *args):
        _svIntegrators.svIntegratorRungeKutta9_swiginit(self, _svIntegrators.new_svIntegratorRungeKutta9(*args))
    __swig_destroy__ = _svIntegrators.delete_svIntegratorRungeKutta9

# Register svIntegratorRungeKutta9 in _svIntegrators:
_svIntegrators.svIntegratorRungeKutta9_swigregister(svIntegratorRungeKutta9)
class svIntegratorAdaptiveRungeKutta9(svIntegratorRungeKutta9):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def integrate(self, currentTime, timeStep):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta9_integrate(self, currentTime, timeStep)

    def setRelativeTolerance(self, *args):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta9_setRelativeTolerance(self, *args)

    def getRelativeTolerance(self, *args):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta9_getRelativeTolerance(self, *args)

    def setAbsoluteTolerance(self, *args):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta9_setAbsoluteTolerance(self, *args)

    def getAbsoluteTolerance(self, *args):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta9_getAbsoluteTolerance(self, *args)
    relTol = property(_svIntegrators.svIntegratorAdaptiveRungeKutta9_relTol_get, _svIntegrators.svIntegratorAdaptiveRungeKutta9_relTol_set)
    absTol = property(_svIntegrators.svIntegratorAdaptiveRungeKutta9_absTol_get, _svIntegrators.svIntegratorAdaptiveRungeKutta9_absTol_set)
    safetyFactorForNextStepSize = property(_svIntegrators.svIntegratorAdaptiveRungeKutta9_safetyFactorForNextStepSize_get, _svIntegrators.svIntegratorAdaptiveRungeKutta9_safetyFactorForNextStepSize_set)
    maximumFactorIncreaseForNextStepSize = property(_svIntegrators.svIntegratorAdaptiveRungeKutta9_maximumFactorIncreaseForNextStepSize_get, _svIntegrators.svIntegratorAdaptiveRungeKutta9_maximumFactorIncreaseForNextStepSize_set)
    minimumFactorDecreaseForNextStepSize = property(_svIntegrators.svIntegratorAdaptiveRungeKutta9_minimumFactorDecreaseForNextStepSize_get, _svIntegrators.svIntegratorAdaptiveRungeKutta9_minimumFactorDecreaseForNextStepSize_set)

    def __init__(self, *args):
        _svIntegrators.svIntegratorAdaptiveRungeKutta9_swiginit(self, _svIntegrators.new_svIntegratorAdaptiveRungeKutta9(*args))
    __swig_destroy__ = _svIntegrators.delete_svIntegratorAdaptiveRungeKutta9

# Register svIntegratorAdaptiveRungeKutta9 in _svIntegrators:
_svIntegrators.svIntegratorAdaptiveRungeKutta9_swigregister(svIntegratorAdaptiveRungeKutta9)

_rk_base_classes[9] = svIntegratorRungeKutta9
_rk_adaptive_base_classes[9] = svIntegratorAdaptiveRungeKutta9

class svIntegratorRungeKutta13(StateVecIntegrator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def integrate(self, currentTime, timeStep):
        return _svIntegrators.svIntegratorRungeKutta13_integrate(self, currentTime, timeStep)

    def __init__(self, *args):
        _svIntegrators.svIntegratorRungeKutta13_swiginit(self, _svIntegrators.new_svIntegratorRungeKutta13(*args))
    __swig_destroy__ = _svIntegrators.delete_svIntegratorRungeKutta13

# Register svIntegratorRungeKutta13 in _svIntegrators:
_svIntegrators.svIntegratorRungeKutta13_swigregister(svIntegratorRungeKutta13)
class svIntegratorAdaptiveRungeKutta13(svIntegratorRungeKutta13):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def integrate(self, currentTime, timeStep):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta13_integrate(self, currentTime, timeStep)

    def setRelativeTolerance(self, *args):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta13_setRelativeTolerance(self, *args)

    def getRelativeTolerance(self, *args):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta13_getRelativeTolerance(self, *args)

    def setAbsoluteTolerance(self, *args):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta13_setAbsoluteTolerance(self, *args)

    def getAbsoluteTolerance(self, *args):
        return _svIntegrators.svIntegratorAdaptiveRungeKutta13_getAbsoluteTolerance(self, *args)
    relTol = property(_svIntegrators.svIntegratorAdaptiveRungeKutta13_relTol_get, _svIntegrators.svIntegratorAdaptiveRungeKutta13_relTol_set)
    absTol = property(_svIntegrators.svIntegratorAdaptiveRungeKutta13_absTol_get, _svIntegrators.svIntegratorAdaptiveRungeKutta13_absTol_set)
    safetyFactorForNextStepSize = property(_svIntegrators.svIntegratorAdaptiveRungeKutta13_safetyFactorForNextStepSize_get, _svIntegrators.svIntegratorAdaptiveRungeKutta13_safetyFactorForNextStepSize_set)
    maximumFactorIncreaseForNextStepSize = property(_svIntegrators.svIntegratorAdaptiveRungeKutta13_maximumFactorIncreaseForNextStepSize_get, _svIntegrators.svIntegratorAdaptiveRungeKutta13_maximumFactorIncreaseForNextStepSize_set)
    minimumFactorDecreaseForNextStepSize = property(_svIntegrators.svIntegratorAdaptiveRungeKutta13_minimumFactorDecreaseForNextStepSize_get, _svIntegrators.svIntegratorAdaptiveRungeKutta13_minimumFactorDecreaseForNextStepSize_set)

    def __init__(self, *args):
        _svIntegrators.svIntegratorAdaptiveRungeKutta13_swiginit(self, _svIntegrators.new_svIntegratorAdaptiveRungeKutta13(*args))
    __swig_destroy__ = _svIntegrators.delete_svIntegratorAdaptiveRungeKutta13

# Register svIntegratorAdaptiveRungeKutta13 in _svIntegrators:
_svIntegrators.svIntegratorAdaptiveRungeKutta13_swigregister(svIntegratorAdaptiveRungeKutta13)

_rk_base_classes[13] = svIntegratorRungeKutta13
_rk_adaptive_base_classes[13] = svIntegratorAdaptiveRungeKutta13

class svIntegratorRK4(svIntegratorRungeKutta4):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dyn):
        _svIntegrators.svIntegratorRK4_swiginit(self, _svIntegrators.new_svIntegratorRK4(dyn))
    __swig_destroy__ = _svIntegrators.delete_svIntegratorRK4

# Register svIntegratorRK4 in _svIntegrators:
_svIntegrators.svIntegratorRK4_swigregister(svIntegratorRK4)
class svIntegratorEuler(svIntegratorRungeKutta1):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dyn):
        _svIntegrators.svIntegratorEuler_swiginit(self, _svIntegrators.new_svIntegratorEuler(dyn))
    __swig_destroy__ = _svIntegrators.delete_svIntegratorEuler

# Register svIntegratorEuler in _svIntegrators:
_svIntegrators.svIntegratorEuler_swigregister(svIntegratorEuler)
class svIntegratorRK2(svIntegratorRungeKutta2):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dyn):
        _svIntegrators.svIntegratorRK2_swiginit(self, _svIntegrators.new_svIntegratorRK2(dyn))
    __swig_destroy__ = _svIntegrators.delete_svIntegratorRK2

# Register svIntegratorRK2 in _svIntegrators:
_svIntegrators.svIntegratorRK2_swigregister(svIntegratorRK2)
class svIntegratorRKF45(svIntegratorAdaptiveRungeKutta6):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dyn):
        _svIntegrators.svIntegratorRKF45_swiginit(self, _svIntegrators.new_svIntegratorRKF45(dyn))
    __swig_destroy__ = _svIntegrators.delete_svIntegratorRKF45

# Register svIntegratorRKF45 in _svIntegrators:
_svIntegrators.svIntegratorRKF45_swigregister(svIntegratorRKF45)
class svIntegratorRKF78(svIntegratorAdaptiveRungeKutta13):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dyn):
        _svIntegrators.svIntegratorRKF78_swiginit(self, _svIntegrators.new_svIntegratorRKF78(dyn))
    __swig_destroy__ = _svIntegrators.delete_svIntegratorRKF78

# Register svIntegratorRKF78 in _svIntegrators:
_svIntegrators.svIntegratorRKF78_swigregister(svIntegratorRKF78)

from typing import Sequence, Union
import numpy as np

def _validate_coefficients(a_coefficients, **array_coefficients):
    try:
        a_coefficients = np.array(a_coefficients, dtype=float)
        assert a_coefficients.ndim == 2
    except:
        raise ValueError("a_coefficients must be a square matrix or a non-ragged sequence of sequences")

    if a_coefficients.shape[0] != a_coefficients.shape[1]:
        raise ValueError("a_coefficients must be a square matrix")

    stages = a_coefficients.shape[0]
    for input_name, array_coefficient in array_coefficients.items():
        if stages != len(array_coefficient):
            raise ValueError(
                f"The size of a_coefficients is {stages}x{stages}, "
                f"but the size of {input_name} is {len(array_coefficient)}. "
                 "These must be consistent")

def svIntegratorRungeKutta(
    dynamic_object,
    a_coefficients: Union[Sequence[Sequence[float]], np.ndarray],
    b_coefficients: Union[Sequence[float], np.ndarray],
    c_coefficients: Union[Sequence[float], np.ndarray],
    ) -> StateVecIntegrator:
    """Generates an explicit, fixed-step Runge-Kutta integrator
    from the given coefficients.

    The coefficients for an RK method are normally expressed
    in a Butcher table, with the `a_coefficients` being a lower
    triangular square matrix, the `b_coefficients` being the
    bottom of the table, and the `c_coefficients` being on the
    left side.

    Args:
        a_coefficients (Sequence[Sequence[float]] | np.ndarray):
            "a" matrix in the Butcher table.
        b_coefficients (Sequence[float] | np.ndarray):
            "b" array in the Butcher table
        c_coefficients (Sequence[float] | np.ndarray):
            "c" array in the Butcher table

    Returns:
        StateVecIntegrator: A Runge-Kutta integrator object
    """
    _validate_coefficients(a_coefficients, b_coefficients=b_coefficients, c_coefficients=c_coefficients)
    stages = len(b_coefficients)

    return _rk_base_classes[stages](dynamic_object, a_coefficients, b_coefficients, c_coefficients)

def svIntegratorAdaptiveRungeKutta(
    dynamic_object,
    largest_order: float,
    a_coefficients: Union[Sequence[Sequence[float]], np.ndarray],
    b_coefficients: Union[Sequence[float], np.ndarray],
    b_star_coefficients: Union[Sequence[float], np.ndarray],
    c_coefficients: Union[Sequence[float], np.ndarray],
    ) -> StateVecIntegrator:
    """Generates an explicit, adaptive Runge-Kutta integrator
    from the given coefficients.

    The coefficients for an RK method are normally expressed
    in a Butcher table, with the `a_coefficients` being a lower
    triangular square matrix, the `b_coefficients` being the
    bottom of the table, and the `c_coefficients` being on the
    left side. Finally, `b_star_coefficients` are also usually
    represented at the bottom of the table. These coefficients
    represent those of the lower order RK method.

    Args:
        largest_order (float): The order of the higher-order RK method
            used in this adaptive RK method. For example, for RKF45,
            largest_order should be 5.
        a_coefficients (Sequence[Sequence[float]] | np.ndarray):
            "a" matrix in the Butcher table.
        b_coefficients (Sequence[float] | np.ndarray):
            "b" array in the Butcher table
        b_star_coefficients (Sequence[float] | np.ndarray):
            "b" array for the lower order method in the Butcher table
        c_coefficients (Sequence[float] | np.ndarray):
            "c" array in the Butcher table

    Returns:
        StateVecIntegrator: A Runge-Kutta integrator object
    """
    _validate_coefficients(
      a_coefficients, b_coefficients=b_coefficients,
      b_star_coefficients=b_star_coefficients, c_coefficients=c_coefficients)
    stages = len(b_coefficients)

    return _rk_adaptive_base_classes[stages](dynamic_object, a_coefficients, b_coefficients, b_star_coefficients, c_coefficients, largest_order)

import sys
protectAllClasses(sys.modules[__name__])


