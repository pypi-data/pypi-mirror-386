# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pyStatefulSysModel
else:
    import _pyStatefulSysModel

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref


import sys
import traceback
from Basilisk.architecture.swig_common_model import *

MAX_LOGGING_LENGTH = _pyStatefulSysModel.MAX_LOGGING_LENGTH
BSK_DEBUG = _pyStatefulSysModel.BSK_DEBUG
BSK_INFORMATION = _pyStatefulSysModel.BSK_INFORMATION
BSK_WARNING = _pyStatefulSysModel.BSK_WARNING
BSK_ERROR = _pyStatefulSysModel.BSK_ERROR
BSK_SILENT = _pyStatefulSysModel.BSK_SILENT

def printDefaultLogLevel():
    return _pyStatefulSysModel.printDefaultLogLevel()

def setDefaultLogLevel(logLevel):
    return _pyStatefulSysModel.setDefaultLogLevel(logLevel)

def getDefaultLogLevel():
    return _pyStatefulSysModel.getDefaultLogLevel()
class BasiliskError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyStatefulSysModel.BasiliskError_swiginit(self, _pyStatefulSysModel.new_BasiliskError(*args))
    __swig_destroy__ = _pyStatefulSysModel.delete_BasiliskError

# Register BasiliskError in _pyStatefulSysModel:
_pyStatefulSysModel.BasiliskError_swigregister(BasiliskError)
cvar = _pyStatefulSysModel.cvar

class BSKLogger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyStatefulSysModel.BSKLogger_swiginit(self, _pyStatefulSysModel.new_BSKLogger(*args))
    __swig_destroy__ = _pyStatefulSysModel.delete_BSKLogger

    def setLogLevel(self, logLevel):
        return _pyStatefulSysModel.BSKLogger_setLogLevel(self, logLevel)

    def printLogLevel(self):
        return _pyStatefulSysModel.BSKLogger_printLogLevel(self)

    def getLogLevel(self):
        return _pyStatefulSysModel.BSKLogger_getLogLevel(self)

    def bskLog(self, targetLevel, info):
        return _pyStatefulSysModel.BSKLogger_bskLog(self, targetLevel, info)
    logLevelMap = property(_pyStatefulSysModel.BSKLogger_logLevelMap_get, _pyStatefulSysModel.BSKLogger_logLevelMap_set)

# Register BSKLogger in _pyStatefulSysModel:
_pyStatefulSysModel.BSKLogger_swigregister(BSKLogger)

def _BSKLogger():
    return _pyStatefulSysModel._BSKLogger()

def _BSKLogger_d(arg1):
    return _pyStatefulSysModel._BSKLogger_d(arg1)

def _printLogLevel(arg1):
    return _pyStatefulSysModel._printLogLevel(arg1)

def _setLogLevel(arg1, arg2):
    return _pyStatefulSysModel._setLogLevel(arg1, arg2)

def _bskLog(arg1, arg2, arg3):
    return _pyStatefulSysModel._bskLog(arg1, arg2, arg3)
import Basilisk.architecture.sysModel
class DynParamRegisterer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def registerState(self, nRow, nCol, stateName):
        return _pyStatefulSysModel.DynParamRegisterer_registerState(self, nRow, nCol, stateName)
    __swig_destroy__ = _pyStatefulSysModel.delete_DynParamRegisterer

# Register DynParamRegisterer in _pyStatefulSysModel:
_pyStatefulSysModel.DynParamRegisterer_swigregister(DynParamRegisterer)
class _StatefulSysModel(Basilisk.architecture.sysModel._SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == _StatefulSysModel:
            _self = None
        else:
            _self = self
        _pyStatefulSysModel._StatefulSysModel_swiginit(self, _pyStatefulSysModel.new__StatefulSysModel(_self, ))

        self.__super_init_called__ = True



    def registerStates(self, registerer):
        return _pyStatefulSysModel._StatefulSysModel_registerStates(self, registerer)
    __swig_destroy__ = _pyStatefulSysModel.delete__StatefulSysModel
    def __disown__(self):
        self.this.disown()
        _pyStatefulSysModel.disown__StatefulSysModel(self)
        return weakref.proxy(self)

# Register _StatefulSysModel in _pyStatefulSysModel:
_pyStatefulSysModel._StatefulSysModel_swigregister(_StatefulSysModel)

class StatefulSysModel(_StatefulSysModel, metaclass=Basilisk.architecture.sysModel.SuperInitChecker):
    bskLogger: BSKLogger = None

    def __init_subclass__(cls):
# Make it so any exceptions in UpdateState and Reset
# print any exceptions before returning control to
# C++ (at which point exceptions will crash the program)
        cls.UpdateState = Basilisk.architecture.sysModel.logError(cls.UpdateState)
        cls.Reset = Basilisk.architecture.sysModel.logError(cls.Reset)
        cls.registerStates = Basilisk.architecture.sysModel.logError(cls.registerStates)


