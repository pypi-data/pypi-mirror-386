# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


from typing import Union, Iterable



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _inertialUKF
else:
    import _inertialUKF

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def new_doubleArray(nelements):
    return _inertialUKF.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _inertialUKF.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _inertialUKF.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _inertialUKF.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _inertialUKF.new_longArray(nelements)

def delete_longArray(ary):
    return _inertialUKF.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _inertialUKF.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _inertialUKF.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _inertialUKF.new_intArray(nelements)

def delete_intArray(ary):
    return _inertialUKF.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _inertialUKF.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _inertialUKF.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _inertialUKF.new_shortArray(nelements)

def delete_shortArray(ary):
    return _inertialUKF.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _inertialUKF.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _inertialUKF.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass



from Basilisk.architecture.swig_common_model import *

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _inertialUKF.delete_SwigPyIterator

    def value(self):
        return _inertialUKF.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _inertialUKF.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _inertialUKF.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _inertialUKF.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _inertialUKF.SwigPyIterator_equal(self, x)

    def copy(self):
        return _inertialUKF.SwigPyIterator_copy(self)

    def next(self):
        return _inertialUKF.SwigPyIterator_next(self)

    def __next__(self):
        return _inertialUKF.SwigPyIterator___next__(self)

    def previous(self):
        return _inertialUKF.SwigPyIterator_previous(self)

    def advance(self, n):
        return _inertialUKF.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _inertialUKF.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _inertialUKF.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _inertialUKF.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _inertialUKF.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _inertialUKF.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _inertialUKF.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _inertialUKF:
_inertialUKF.SwigPyIterator_swigregister(SwigPyIterator)
MAX_LOGGING_LENGTH = _inertialUKF.MAX_LOGGING_LENGTH
BSK_DEBUG = _inertialUKF.BSK_DEBUG
BSK_INFORMATION = _inertialUKF.BSK_INFORMATION
BSK_WARNING = _inertialUKF.BSK_WARNING
BSK_ERROR = _inertialUKF.BSK_ERROR
BSK_SILENT = _inertialUKF.BSK_SILENT

def printDefaultLogLevel():
    return _inertialUKF.printDefaultLogLevel()

def setDefaultLogLevel(logLevel):
    return _inertialUKF.setDefaultLogLevel(logLevel)

def getDefaultLogLevel():
    return _inertialUKF.getDefaultLogLevel()
class BasiliskError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _inertialUKF.BasiliskError_swiginit(self, _inertialUKF.new_BasiliskError(*args))
    __swig_destroy__ = _inertialUKF.delete_BasiliskError

# Register BasiliskError in _inertialUKF:
_inertialUKF.BasiliskError_swigregister(BasiliskError)
cvar = _inertialUKF.cvar

class BSKLogger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _inertialUKF.BSKLogger_swiginit(self, _inertialUKF.new_BSKLogger(*args))
    __swig_destroy__ = _inertialUKF.delete_BSKLogger

    def setLogLevel(self, logLevel):
        return _inertialUKF.BSKLogger_setLogLevel(self, logLevel)

    def printLogLevel(self):
        return _inertialUKF.BSKLogger_printLogLevel(self)

    def getLogLevel(self):
        return _inertialUKF.BSKLogger_getLogLevel(self)

    def bskLog(self, targetLevel, info):
        return _inertialUKF.BSKLogger_bskLog(self, targetLevel, info)
    logLevelMap = property(_inertialUKF.BSKLogger_logLevelMap_get, _inertialUKF.BSKLogger_logLevelMap_set)

# Register BSKLogger in _inertialUKF:
_inertialUKF.BSKLogger_swigregister(BSKLogger)

def _BSKLogger():
    return _inertialUKF._BSKLogger()

def _BSKLogger_d(arg1):
    return _inertialUKF._BSKLogger_d(arg1)

def _printLogLevel(arg1):
    return _inertialUKF._printLogLevel(arg1)

def _setLogLevel(arg1, arg2):
    return _inertialUKF._setLogLevel(arg1, arg2)

def _bskLog(arg1, arg2, arg3):
    return _inertialUKF._bskLog(arg1, arg2, arg3)
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _inertialUKF.SysModel_swiginit(self, _inertialUKF.new_SysModel(*args))
    __swig_destroy__ = _inertialUKF.delete_SysModel

    def SelfInit(self):
        return _inertialUKF.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _inertialUKF.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _inertialUKF.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _inertialUKF.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_inertialUKF.SysModel_ModelTag_get, _inertialUKF.SysModel_ModelTag_set)
    CallCounts = property(_inertialUKF.SysModel_CallCounts_get, _inertialUKF.SysModel_CallCounts_set)
    RNGSeed = property(_inertialUKF.SysModel_RNGSeed_get, _inertialUKF.SysModel_RNGSeed_set)
    moduleID = property(_inertialUKF.SysModel_moduleID_get, _inertialUKF.SysModel_moduleID_set)

    def logger(self, variableNames: Union[str, Iterable[str]], recordingTime: int = 0):
        """Generate a logger from one or more variables in this model.

        Each variable must be public or private with a standard-named getter.
        For example, if you want to log the variable `foo` from the model
        `mod`, then `mod.foo` or `mod.getFoo()` must be available.

        Args:
            variableNames (Union[str, Iterable[str]]): The name or names
                of the variables to log.
            recordingTime (int, optional): The minimum interval between variable
                recordings. Defaults to 0.
        """
        if isinstance(variableNames, str):
            variableNames = [variableNames]

        loggingFunctions = {}
        for variableName in variableNames:
            if hasattr(self, variableName):
                loggingFunctions[variableName] = lambda _, variableName=variableName: getattr(self, variableName)
                continue

            getterStr = f"get{variableName[0].upper()}{variableName[1:]}"
            getter = getattr(self, getterStr, None)
            if getter is not None:
                loggingFunctions[variableName] = lambda _, getter=getter: getter()
                continue

            raise ValueError(f"Cannot log {variableName} as it is not a "
                f"public variable of {type(self).__name__} and the getter "
                f"{getterStr} does not exist.")

        from Basilisk.utilities import pythonVariableLogger
        return pythonVariableLogger.PythonVariableLogger(loggingFunctions, recordingTime)


# Register SysModel in _inertialUKF:
_inertialUKF.SysModel_swigregister(SysModel)
class STMessage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    stInMsg = property(_inertialUKF.STMessage_stInMsg_get, _inertialUKF.STMessage_stInMsg_set)
    noise = property(_inertialUKF.STMessage_noise_get, _inertialUKF.STMessage_noise_set)

    def __init__(self):
        _inertialUKF.STMessage_swiginit(self, _inertialUKF.new_STMessage())
    __swig_destroy__ = _inertialUKF.delete_STMessage

# Register STMessage in _inertialUKF:
_inertialUKF.STMessage_swigregister(STMessage)
class STDataParsing(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    numST = property(_inertialUKF.STDataParsing_numST_get, _inertialUKF.STDataParsing_numST_set)
    STMessages = property(_inertialUKF.STDataParsing_STMessages_get, _inertialUKF.STDataParsing_STMessages_set)

    def __init__(self):
        _inertialUKF.STDataParsing_swiginit(self, _inertialUKF.new_STDataParsing())
    __swig_destroy__ = _inertialUKF.delete_STDataParsing

# Register STDataParsing in _inertialUKF:
_inertialUKF.STDataParsing_swigregister(STDataParsing)
class InertialUKFConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    navStateOutMsg = property(_inertialUKF.InertialUKFConfig_navStateOutMsg_get, _inertialUKF.InertialUKFConfig_navStateOutMsg_set)
    filtDataOutMsg = property(_inertialUKF.InertialUKFConfig_filtDataOutMsg_get, _inertialUKF.InertialUKFConfig_filtDataOutMsg_set)
    massPropsInMsg = property(_inertialUKF.InertialUKFConfig_massPropsInMsg_get, _inertialUKF.InertialUKFConfig_massPropsInMsg_set)
    rwParamsInMsg = property(_inertialUKF.InertialUKFConfig_rwParamsInMsg_get, _inertialUKF.InertialUKFConfig_rwParamsInMsg_set)
    rwSpeedsInMsg = property(_inertialUKF.InertialUKFConfig_rwSpeedsInMsg_get, _inertialUKF.InertialUKFConfig_rwSpeedsInMsg_set)
    gyrBuffInMsg = property(_inertialUKF.InertialUKFConfig_gyrBuffInMsg_get, _inertialUKF.InertialUKFConfig_gyrBuffInMsg_set)
    numStates = property(_inertialUKF.InertialUKFConfig_numStates_get, _inertialUKF.InertialUKFConfig_numStates_set)
    countHalfSPs = property(_inertialUKF.InertialUKFConfig_countHalfSPs_get, _inertialUKF.InertialUKFConfig_countHalfSPs_set)
    numObs = property(_inertialUKF.InertialUKFConfig_numObs_get, _inertialUKF.InertialUKFConfig_numObs_set)
    beta = property(_inertialUKF.InertialUKFConfig_beta_get, _inertialUKF.InertialUKFConfig_beta_set)
    alpha = property(_inertialUKF.InertialUKFConfig_alpha_get, _inertialUKF.InertialUKFConfig_alpha_set)
    kappa = property(_inertialUKF.InertialUKFConfig_kappa_get, _inertialUKF.InertialUKFConfig_kappa_set)
    lambdaVal = property(_inertialUKF.InertialUKFConfig_lambdaVal_get, _inertialUKF.InertialUKFConfig_lambdaVal_set)
    gamma = property(_inertialUKF.InertialUKFConfig_gamma_get, _inertialUKF.InertialUKFConfig_gamma_set)
    switchMag = property(_inertialUKF.InertialUKFConfig_switchMag_get, _inertialUKF.InertialUKFConfig_switchMag_set)
    dt = property(_inertialUKF.InertialUKFConfig_dt_get, _inertialUKF.InertialUKFConfig_dt_set)
    timeTag = property(_inertialUKF.InertialUKFConfig_timeTag_get, _inertialUKF.InertialUKFConfig_timeTag_set)
    gyrAggTimeTag = property(_inertialUKF.InertialUKFConfig_gyrAggTimeTag_get, _inertialUKF.InertialUKFConfig_gyrAggTimeTag_set)
    aggSigma_b2b1 = property(_inertialUKF.InertialUKFConfig_aggSigma_b2b1_get, _inertialUKF.InertialUKFConfig_aggSigma_b2b1_set)
    dcm_BdyGyrpltf = property(_inertialUKF.InertialUKFConfig_dcm_BdyGyrpltf_get, _inertialUKF.InertialUKFConfig_dcm_BdyGyrpltf_set)
    wM = property(_inertialUKF.InertialUKFConfig_wM_get, _inertialUKF.InertialUKFConfig_wM_set)
    wC = property(_inertialUKF.InertialUKFConfig_wC_get, _inertialUKF.InertialUKFConfig_wC_set)
    stateInit = property(_inertialUKF.InertialUKFConfig_stateInit_get, _inertialUKF.InertialUKFConfig_stateInit_set)
    state = property(_inertialUKF.InertialUKFConfig_state_get, _inertialUKF.InertialUKFConfig_state_set)
    statePrev = property(_inertialUKF.InertialUKFConfig_statePrev_get, _inertialUKF.InertialUKFConfig_statePrev_set)
    sBar = property(_inertialUKF.InertialUKFConfig_sBar_get, _inertialUKF.InertialUKFConfig_sBar_set)
    sBarPrev = property(_inertialUKF.InertialUKFConfig_sBarPrev_get, _inertialUKF.InertialUKFConfig_sBarPrev_set)
    covar = property(_inertialUKF.InertialUKFConfig_covar_get, _inertialUKF.InertialUKFConfig_covar_set)
    covarPrev = property(_inertialUKF.InertialUKFConfig_covarPrev_get, _inertialUKF.InertialUKFConfig_covarPrev_set)
    covarInit = property(_inertialUKF.InertialUKFConfig_covarInit_get, _inertialUKF.InertialUKFConfig_covarInit_set)
    xBar = property(_inertialUKF.InertialUKFConfig_xBar_get, _inertialUKF.InertialUKFConfig_xBar_set)
    obs = property(_inertialUKF.InertialUKFConfig_obs_get, _inertialUKF.InertialUKFConfig_obs_set)
    yMeas = property(_inertialUKF.InertialUKFConfig_yMeas_get, _inertialUKF.InertialUKFConfig_yMeas_set)
    SP = property(_inertialUKF.InertialUKFConfig_SP_get, _inertialUKF.InertialUKFConfig_SP_set)
    qNoise = property(_inertialUKF.InertialUKFConfig_qNoise_get, _inertialUKF.InertialUKFConfig_qNoise_set)
    sQnoise = property(_inertialUKF.InertialUKFConfig_sQnoise_get, _inertialUKF.InertialUKFConfig_sQnoise_set)
    IInv = property(_inertialUKF.InertialUKFConfig_IInv_get, _inertialUKF.InertialUKFConfig_IInv_set)
    numUsedGyros = property(_inertialUKF.InertialUKFConfig_numUsedGyros_get, _inertialUKF.InertialUKFConfig_numUsedGyros_set)
    firstPassComplete = property(_inertialUKF.InertialUKFConfig_firstPassComplete_get, _inertialUKF.InertialUKFConfig_firstPassComplete_set)
    sigma_BNOut = property(_inertialUKF.InertialUKFConfig_sigma_BNOut_get, _inertialUKF.InertialUKFConfig_sigma_BNOut_set)
    omega_BN_BOut = property(_inertialUKF.InertialUKFConfig_omega_BN_BOut_get, _inertialUKF.InertialUKFConfig_omega_BN_BOut_set)
    timeTagOut = property(_inertialUKF.InertialUKFConfig_timeTagOut_get, _inertialUKF.InertialUKFConfig_timeTagOut_set)
    maxTimeJump = property(_inertialUKF.InertialUKFConfig_maxTimeJump_get, _inertialUKF.InertialUKFConfig_maxTimeJump_set)
    stSensorIn = property(_inertialUKF.InertialUKFConfig_stSensorIn_get, _inertialUKF.InertialUKFConfig_stSensorIn_set)
    stSensorOrder = property(_inertialUKF.InertialUKFConfig_stSensorOrder_get, _inertialUKF.InertialUKFConfig_stSensorOrder_set)
    ClockTimeST = property(_inertialUKF.InertialUKFConfig_ClockTimeST_get, _inertialUKF.InertialUKFConfig_ClockTimeST_set)
    isFreshST = property(_inertialUKF.InertialUKFConfig_isFreshST_get, _inertialUKF.InertialUKFConfig_isFreshST_set)
    rwConfigParams = property(_inertialUKF.InertialUKFConfig_rwConfigParams_get, _inertialUKF.InertialUKFConfig_rwConfigParams_set)
    rwSpeeds = property(_inertialUKF.InertialUKFConfig_rwSpeeds_get, _inertialUKF.InertialUKFConfig_rwSpeeds_set)
    rwSpeedPrev = property(_inertialUKF.InertialUKFConfig_rwSpeedPrev_get, _inertialUKF.InertialUKFConfig_rwSpeedPrev_set)
    speedDt = property(_inertialUKF.InertialUKFConfig_speedDt_get, _inertialUKF.InertialUKFConfig_speedDt_set)
    timeWheelPrev = property(_inertialUKF.InertialUKFConfig_timeWheelPrev_get, _inertialUKF.InertialUKFConfig_timeWheelPrev_set)
    localConfigData = property(_inertialUKF.InertialUKFConfig_localConfigData_get, _inertialUKF.InertialUKFConfig_localConfigData_set)
    gyroFilt = property(_inertialUKF.InertialUKFConfig_gyroFilt_get, _inertialUKF.InertialUKFConfig_gyroFilt_set)
    STDatasStruct = property(_inertialUKF.InertialUKFConfig_STDatasStruct_get, _inertialUKF.InertialUKFConfig_STDatasStruct_set)
    bskLogger = property(_inertialUKF.InertialUKFConfig_bskLogger_get, _inertialUKF.InertialUKFConfig_bskLogger_set)

    def createWrapper(self):
        return inertialUKF(self)


    def __init__(self):
        _inertialUKF.InertialUKFConfig_swiginit(self, _inertialUKF.new_InertialUKFConfig())
    __swig_destroy__ = _inertialUKF.delete_InertialUKFConfig

# Register InertialUKFConfig in _inertialUKF:
_inertialUKF.InertialUKFConfig_swigregister(InertialUKFConfig)

def Read_STMessages(configData):
    return _inertialUKF.Read_STMessages(configData)

def inertialUKFAggGyrData(configData, prevTime, propTime, gyrData):
    return _inertialUKF.inertialUKFAggGyrData(configData, prevTime, propTime, gyrData)

def inertialUKFTimeUpdate(configData, updateTime):
    return _inertialUKF.inertialUKFTimeUpdate(configData, updateTime)

def inertialUKFMeasUpdate(configData, currentST):
    return _inertialUKF.inertialUKFMeasUpdate(configData, currentST)

def inertialUKFCleanUpdate(configData):
    return _inertialUKF.inertialUKFCleanUpdate(configData)

def inertialStateProp(configData, stateInOut, dt):
    return _inertialUKF.inertialStateProp(configData, stateInOut, dt)

def inertialUKFMeasModel(configData, currentST):
    return _inertialUKF.inertialUKFMeasModel(configData, currentST)
class inertialUKF(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _inertialUKF.inertialUKF_swiginit(self, _inertialUKF.new_inertialUKF(*args))

        if (len(args)) > 0:
            args[0].thisown = False




    def SelfInit(self):
        return _inertialUKF.inertialUKF_SelfInit(self)

    def UpdateState(self, currentSimNanos):
        return _inertialUKF.inertialUKF_UpdateState(self, currentSimNanos)

    def Reset(self, currentSimNanos):
        return _inertialUKF.inertialUKF_Reset(self, currentSimNanos)

    def __deref__(self):
        return _inertialUKF.inertialUKF___deref__(self)

    def getConfig(self):
        return _inertialUKF.inertialUKF_getConfig(self)
    __swig_destroy__ = _inertialUKF.delete_inertialUKF
    navStateOutMsg = property(_inertialUKF.inertialUKF_navStateOutMsg_get, _inertialUKF.inertialUKF_navStateOutMsg_set)
    filtDataOutMsg = property(_inertialUKF.inertialUKF_filtDataOutMsg_get, _inertialUKF.inertialUKF_filtDataOutMsg_set)
    massPropsInMsg = property(_inertialUKF.inertialUKF_massPropsInMsg_get, _inertialUKF.inertialUKF_massPropsInMsg_set)
    rwParamsInMsg = property(_inertialUKF.inertialUKF_rwParamsInMsg_get, _inertialUKF.inertialUKF_rwParamsInMsg_set)
    rwSpeedsInMsg = property(_inertialUKF.inertialUKF_rwSpeedsInMsg_get, _inertialUKF.inertialUKF_rwSpeedsInMsg_set)
    gyrBuffInMsg = property(_inertialUKF.inertialUKF_gyrBuffInMsg_get, _inertialUKF.inertialUKF_gyrBuffInMsg_set)
    numStates = property(_inertialUKF.inertialUKF_numStates_get, _inertialUKF.inertialUKF_numStates_set)
    countHalfSPs = property(_inertialUKF.inertialUKF_countHalfSPs_get, _inertialUKF.inertialUKF_countHalfSPs_set)
    numObs = property(_inertialUKF.inertialUKF_numObs_get, _inertialUKF.inertialUKF_numObs_set)
    beta = property(_inertialUKF.inertialUKF_beta_get, _inertialUKF.inertialUKF_beta_set)
    alpha = property(_inertialUKF.inertialUKF_alpha_get, _inertialUKF.inertialUKF_alpha_set)
    kappa = property(_inertialUKF.inertialUKF_kappa_get, _inertialUKF.inertialUKF_kappa_set)
    lambdaVal = property(_inertialUKF.inertialUKF_lambdaVal_get, _inertialUKF.inertialUKF_lambdaVal_set)
    gamma = property(_inertialUKF.inertialUKF_gamma_get, _inertialUKF.inertialUKF_gamma_set)
    switchMag = property(_inertialUKF.inertialUKF_switchMag_get, _inertialUKF.inertialUKF_switchMag_set)
    dt = property(_inertialUKF.inertialUKF_dt_get, _inertialUKF.inertialUKF_dt_set)
    timeTag = property(_inertialUKF.inertialUKF_timeTag_get, _inertialUKF.inertialUKF_timeTag_set)
    gyrAggTimeTag = property(_inertialUKF.inertialUKF_gyrAggTimeTag_get, _inertialUKF.inertialUKF_gyrAggTimeTag_set)
    aggSigma_b2b1 = property(_inertialUKF.inertialUKF_aggSigma_b2b1_get, _inertialUKF.inertialUKF_aggSigma_b2b1_set)
    dcm_BdyGyrpltf = property(_inertialUKF.inertialUKF_dcm_BdyGyrpltf_get, _inertialUKF.inertialUKF_dcm_BdyGyrpltf_set)
    wM = property(_inertialUKF.inertialUKF_wM_get, _inertialUKF.inertialUKF_wM_set)
    wC = property(_inertialUKF.inertialUKF_wC_get, _inertialUKF.inertialUKF_wC_set)
    stateInit = property(_inertialUKF.inertialUKF_stateInit_get, _inertialUKF.inertialUKF_stateInit_set)
    state = property(_inertialUKF.inertialUKF_state_get, _inertialUKF.inertialUKF_state_set)
    statePrev = property(_inertialUKF.inertialUKF_statePrev_get, _inertialUKF.inertialUKF_statePrev_set)
    sBar = property(_inertialUKF.inertialUKF_sBar_get, _inertialUKF.inertialUKF_sBar_set)
    sBarPrev = property(_inertialUKF.inertialUKF_sBarPrev_get, _inertialUKF.inertialUKF_sBarPrev_set)
    covar = property(_inertialUKF.inertialUKF_covar_get, _inertialUKF.inertialUKF_covar_set)
    covarPrev = property(_inertialUKF.inertialUKF_covarPrev_get, _inertialUKF.inertialUKF_covarPrev_set)
    covarInit = property(_inertialUKF.inertialUKF_covarInit_get, _inertialUKF.inertialUKF_covarInit_set)
    xBar = property(_inertialUKF.inertialUKF_xBar_get, _inertialUKF.inertialUKF_xBar_set)
    obs = property(_inertialUKF.inertialUKF_obs_get, _inertialUKF.inertialUKF_obs_set)
    yMeas = property(_inertialUKF.inertialUKF_yMeas_get, _inertialUKF.inertialUKF_yMeas_set)
    SP = property(_inertialUKF.inertialUKF_SP_get, _inertialUKF.inertialUKF_SP_set)
    qNoise = property(_inertialUKF.inertialUKF_qNoise_get, _inertialUKF.inertialUKF_qNoise_set)
    sQnoise = property(_inertialUKF.inertialUKF_sQnoise_get, _inertialUKF.inertialUKF_sQnoise_set)
    IInv = property(_inertialUKF.inertialUKF_IInv_get, _inertialUKF.inertialUKF_IInv_set)
    numUsedGyros = property(_inertialUKF.inertialUKF_numUsedGyros_get, _inertialUKF.inertialUKF_numUsedGyros_set)
    firstPassComplete = property(_inertialUKF.inertialUKF_firstPassComplete_get, _inertialUKF.inertialUKF_firstPassComplete_set)
    sigma_BNOut = property(_inertialUKF.inertialUKF_sigma_BNOut_get, _inertialUKF.inertialUKF_sigma_BNOut_set)
    omega_BN_BOut = property(_inertialUKF.inertialUKF_omega_BN_BOut_get, _inertialUKF.inertialUKF_omega_BN_BOut_set)
    timeTagOut = property(_inertialUKF.inertialUKF_timeTagOut_get, _inertialUKF.inertialUKF_timeTagOut_set)
    maxTimeJump = property(_inertialUKF.inertialUKF_maxTimeJump_get, _inertialUKF.inertialUKF_maxTimeJump_set)
    stSensorIn = property(_inertialUKF.inertialUKF_stSensorIn_get, _inertialUKF.inertialUKF_stSensorIn_set)
    stSensorOrder = property(_inertialUKF.inertialUKF_stSensorOrder_get, _inertialUKF.inertialUKF_stSensorOrder_set)
    ClockTimeST = property(_inertialUKF.inertialUKF_ClockTimeST_get, _inertialUKF.inertialUKF_ClockTimeST_set)
    isFreshST = property(_inertialUKF.inertialUKF_isFreshST_get, _inertialUKF.inertialUKF_isFreshST_set)
    rwConfigParams = property(_inertialUKF.inertialUKF_rwConfigParams_get, _inertialUKF.inertialUKF_rwConfigParams_set)
    rwSpeeds = property(_inertialUKF.inertialUKF_rwSpeeds_get, _inertialUKF.inertialUKF_rwSpeeds_set)
    rwSpeedPrev = property(_inertialUKF.inertialUKF_rwSpeedPrev_get, _inertialUKF.inertialUKF_rwSpeedPrev_set)
    speedDt = property(_inertialUKF.inertialUKF_speedDt_get, _inertialUKF.inertialUKF_speedDt_set)
    timeWheelPrev = property(_inertialUKF.inertialUKF_timeWheelPrev_get, _inertialUKF.inertialUKF_timeWheelPrev_set)
    localConfigData = property(_inertialUKF.inertialUKF_localConfigData_get, _inertialUKF.inertialUKF_localConfigData_set)
    gyroFilt = property(_inertialUKF.inertialUKF_gyroFilt_get, _inertialUKF.inertialUKF_gyroFilt_set)
    STDatasStruct = property(_inertialUKF.inertialUKF_STDatasStruct_get, _inertialUKF.inertialUKF_STDatasStruct_set)
    bskLogger = property(_inertialUKF.inertialUKF_bskLogger_get, _inertialUKF.inertialUKF_bskLogger_set)

# Register inertialUKF in _inertialUKF:
_inertialUKF.inertialUKF_swigregister(inertialUKF)
UKF_MAX_DIM = _inertialUKF.UKF_MAX_DIM

def ukfQRDJustR(sourceMat, nRow, nCol, destMat):
    return _inertialUKF.ukfQRDJustR(sourceMat, nRow, nCol, destMat)

def ukfLInv(sourceMat, nRow, nCol, destMat):
    return _inertialUKF.ukfLInv(sourceMat, nRow, nCol, destMat)

def ukfUInv(sourceMat, nRow, nCol, destMat):
    return _inertialUKF.ukfUInv(sourceMat, nRow, nCol, destMat)

def ukfLUD(sourceMat, nRow, nCol, destMat, indx):
    return _inertialUKF.ukfLUD(sourceMat, nRow, nCol, destMat, indx)

def ukfLUBckSlv(sourceMat, nRow, nCol, indx, bmat, destMat):
    return _inertialUKF.ukfLUBckSlv(sourceMat, nRow, nCol, indx, bmat, destMat)

def ukfMatInv(sourceMat, nRow, nCol, destMat):
    return _inertialUKF.ukfMatInv(sourceMat, nRow, nCol, destMat)

def ukfCholDecomp(sourceMat, nRow, nCol, destMat):
    return _inertialUKF.ukfCholDecomp(sourceMat, nRow, nCol, destMat)

def ukfCholDownDate(rMat, xVec, beta, nStates, rOut):
    return _inertialUKF.ukfCholDownDate(rMat, xVec, beta, nStates, rOut)
AKF_N_STATES = _inertialUKF.AKF_N_STATES
MAX_N_ATT_STATES = _inertialUKF.MAX_N_ATT_STATES
class InertialFilterMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timeTag = property(_inertialUKF.InertialFilterMsgPayload_timeTag_get, _inertialUKF.InertialFilterMsgPayload_timeTag_set)
    covar = property(_inertialUKF.InertialFilterMsgPayload_covar_get, _inertialUKF.InertialFilterMsgPayload_covar_set)
    state = property(_inertialUKF.InertialFilterMsgPayload_state_get, _inertialUKF.InertialFilterMsgPayload_state_set)
    numObs = property(_inertialUKF.InertialFilterMsgPayload_numObs_get, _inertialUKF.InertialFilterMsgPayload_numObs_set)

    def __init__(self):
        _inertialUKF.InertialFilterMsgPayload_swiginit(self, _inertialUKF.new_InertialFilterMsgPayload())
    __swig_destroy__ = _inertialUKF.delete_InertialFilterMsgPayload

# Register InertialFilterMsgPayload in _inertialUKF:
_inertialUKF.InertialFilterMsgPayload_swigregister(InertialFilterMsgPayload)
class STAttMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timeTag = property(_inertialUKF.STAttMsgPayload_timeTag_get, _inertialUKF.STAttMsgPayload_timeTag_set)
    MRP_BdyInrtl = property(_inertialUKF.STAttMsgPayload_MRP_BdyInrtl_get, _inertialUKF.STAttMsgPayload_MRP_BdyInrtl_set)

    def __init__(self):
        _inertialUKF.STAttMsgPayload_swiginit(self, _inertialUKF.new_STAttMsgPayload())
    __swig_destroy__ = _inertialUKF.delete_STAttMsgPayload

# Register STAttMsgPayload in _inertialUKF:
_inertialUKF.STAttMsgPayload_swigregister(STAttMsgPayload)
class VehicleConfigMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ISCPntB_B = property(_inertialUKF.VehicleConfigMsgPayload_ISCPntB_B_get, _inertialUKF.VehicleConfigMsgPayload_ISCPntB_B_set)
    CoM_B = property(_inertialUKF.VehicleConfigMsgPayload_CoM_B_get, _inertialUKF.VehicleConfigMsgPayload_CoM_B_set)
    massSC = property(_inertialUKF.VehicleConfigMsgPayload_massSC_get, _inertialUKF.VehicleConfigMsgPayload_massSC_set)
    CurrentADCSState = property(_inertialUKF.VehicleConfigMsgPayload_CurrentADCSState_get, _inertialUKF.VehicleConfigMsgPayload_CurrentADCSState_set)

    def __init__(self):
        _inertialUKF.VehicleConfigMsgPayload_swiginit(self, _inertialUKF.new_VehicleConfigMsgPayload())
    __swig_destroy__ = _inertialUKF.delete_VehicleConfigMsgPayload

# Register VehicleConfigMsgPayload in _inertialUKF:
_inertialUKF.VehicleConfigMsgPayload_swigregister(VehicleConfigMsgPayload)
class RWArrayConfigMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GsMatrix_B = property(_inertialUKF.RWArrayConfigMsgPayload_GsMatrix_B_get, _inertialUKF.RWArrayConfigMsgPayload_GsMatrix_B_set)
    JsList = property(_inertialUKF.RWArrayConfigMsgPayload_JsList_get, _inertialUKF.RWArrayConfigMsgPayload_JsList_set)
    numRW = property(_inertialUKF.RWArrayConfigMsgPayload_numRW_get, _inertialUKF.RWArrayConfigMsgPayload_numRW_set)
    uMax = property(_inertialUKF.RWArrayConfigMsgPayload_uMax_get, _inertialUKF.RWArrayConfigMsgPayload_uMax_set)

    def __init__(self):
        _inertialUKF.RWArrayConfigMsgPayload_swiginit(self, _inertialUKF.new_RWArrayConfigMsgPayload())
    __swig_destroy__ = _inertialUKF.delete_RWArrayConfigMsgPayload

# Register RWArrayConfigMsgPayload in _inertialUKF:
_inertialUKF.RWArrayConfigMsgPayload_swigregister(RWArrayConfigMsgPayload)
class RWSpeedMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    wheelSpeeds = property(_inertialUKF.RWSpeedMsgPayload_wheelSpeeds_get, _inertialUKF.RWSpeedMsgPayload_wheelSpeeds_set)
    wheelThetas = property(_inertialUKF.RWSpeedMsgPayload_wheelThetas_get, _inertialUKF.RWSpeedMsgPayload_wheelThetas_set)

    def __init__(self):
        _inertialUKF.RWSpeedMsgPayload_swiginit(self, _inertialUKF.new_RWSpeedMsgPayload())
    __swig_destroy__ = _inertialUKF.delete_RWSpeedMsgPayload

# Register RWSpeedMsgPayload in _inertialUKF:
_inertialUKF.RWSpeedMsgPayload_swigregister(RWSpeedMsgPayload)
MAX_ACC_BUF_PKT = _inertialUKF.MAX_ACC_BUF_PKT
class AccDataMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    accPkts = property(_inertialUKF.AccDataMsgPayload_accPkts_get, _inertialUKF.AccDataMsgPayload_accPkts_set)

    def __init__(self):
        _inertialUKF.AccDataMsgPayload_swiginit(self, _inertialUKF.new_AccDataMsgPayload())
    __swig_destroy__ = _inertialUKF.delete_AccDataMsgPayload

# Register AccDataMsgPayload in _inertialUKF:
_inertialUKF.AccDataMsgPayload_swigregister(AccDataMsgPayload)
class AccPktDataMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    measTime = property(_inertialUKF.AccPktDataMsgPayload_measTime_get, _inertialUKF.AccPktDataMsgPayload_measTime_set)
    gyro_B = property(_inertialUKF.AccPktDataMsgPayload_gyro_B_get, _inertialUKF.AccPktDataMsgPayload_gyro_B_set)
    accel_B = property(_inertialUKF.AccPktDataMsgPayload_accel_B_get, _inertialUKF.AccPktDataMsgPayload_accel_B_set)

    def __init__(self):
        _inertialUKF.AccPktDataMsgPayload_swiginit(self, _inertialUKF.new_AccPktDataMsgPayload())
    __swig_destroy__ = _inertialUKF.delete_AccPktDataMsgPayload

# Register AccPktDataMsgPayload in _inertialUKF:
_inertialUKF.AccPktDataMsgPayload_swigregister(AccPktDataMsgPayload)
class NavAttMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timeTag = property(_inertialUKF.NavAttMsgPayload_timeTag_get, _inertialUKF.NavAttMsgPayload_timeTag_set)
    sigma_BN = property(_inertialUKF.NavAttMsgPayload_sigma_BN_get, _inertialUKF.NavAttMsgPayload_sigma_BN_set)
    omega_BN_B = property(_inertialUKF.NavAttMsgPayload_omega_BN_B_get, _inertialUKF.NavAttMsgPayload_omega_BN_B_set)
    vehSunPntBdy = property(_inertialUKF.NavAttMsgPayload_vehSunPntBdy_get, _inertialUKF.NavAttMsgPayload_vehSunPntBdy_set)

    def __init__(self):
        _inertialUKF.NavAttMsgPayload_swiginit(self, _inertialUKF.new_NavAttMsgPayload())
    __swig_destroy__ = _inertialUKF.delete_NavAttMsgPayload

# Register NavAttMsgPayload in _inertialUKF:
_inertialUKF.NavAttMsgPayload_swigregister(NavAttMsgPayload)
class LowPassFilterData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    hStep = property(_inertialUKF.LowPassFilterData_hStep_get, _inertialUKF.LowPassFilterData_hStep_set)
    omegCutoff = property(_inertialUKF.LowPassFilterData_omegCutoff_get, _inertialUKF.LowPassFilterData_omegCutoff_set)
    currentState = property(_inertialUKF.LowPassFilterData_currentState_get, _inertialUKF.LowPassFilterData_currentState_set)
    currentMeas = property(_inertialUKF.LowPassFilterData_currentMeas_get, _inertialUKF.LowPassFilterData_currentMeas_set)

    def __init__(self):
        _inertialUKF.LowPassFilterData_swiginit(self, _inertialUKF.new_LowPassFilterData())
    __swig_destroy__ = _inertialUKF.delete_LowPassFilterData

# Register LowPassFilterData in _inertialUKF:
_inertialUKF.LowPassFilterData_swigregister(LowPassFilterData)

def lowPassFilterSignal(newMeas, lpData):
    return _inertialUKF.lowPassFilterSignal(newMeas, lpData)

import sys
protectAllClasses(sys.modules[__name__])


