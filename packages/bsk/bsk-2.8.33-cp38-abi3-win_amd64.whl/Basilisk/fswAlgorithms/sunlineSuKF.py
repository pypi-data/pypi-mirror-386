# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


from typing import Union, Iterable



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _sunlineSuKF
else:
    import _sunlineSuKF

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def new_doubleArray(nelements):
    return _sunlineSuKF.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _sunlineSuKF.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _sunlineSuKF.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _sunlineSuKF.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _sunlineSuKF.new_longArray(nelements)

def delete_longArray(ary):
    return _sunlineSuKF.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _sunlineSuKF.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _sunlineSuKF.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _sunlineSuKF.new_intArray(nelements)

def delete_intArray(ary):
    return _sunlineSuKF.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _sunlineSuKF.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _sunlineSuKF.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _sunlineSuKF.new_shortArray(nelements)

def delete_shortArray(ary):
    return _sunlineSuKF.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _sunlineSuKF.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _sunlineSuKF.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass



from Basilisk.architecture.swig_common_model import *

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sunlineSuKF.delete_SwigPyIterator

    def value(self):
        return _sunlineSuKF.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _sunlineSuKF.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _sunlineSuKF.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _sunlineSuKF.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _sunlineSuKF.SwigPyIterator_equal(self, x)

    def copy(self):
        return _sunlineSuKF.SwigPyIterator_copy(self)

    def next(self):
        return _sunlineSuKF.SwigPyIterator_next(self)

    def __next__(self):
        return _sunlineSuKF.SwigPyIterator___next__(self)

    def previous(self):
        return _sunlineSuKF.SwigPyIterator_previous(self)

    def advance(self, n):
        return _sunlineSuKF.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _sunlineSuKF.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _sunlineSuKF.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _sunlineSuKF.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _sunlineSuKF.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _sunlineSuKF.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _sunlineSuKF.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _sunlineSuKF:
_sunlineSuKF.SwigPyIterator_swigregister(SwigPyIterator)
MAX_LOGGING_LENGTH = _sunlineSuKF.MAX_LOGGING_LENGTH
BSK_DEBUG = _sunlineSuKF.BSK_DEBUG
BSK_INFORMATION = _sunlineSuKF.BSK_INFORMATION
BSK_WARNING = _sunlineSuKF.BSK_WARNING
BSK_ERROR = _sunlineSuKF.BSK_ERROR
BSK_SILENT = _sunlineSuKF.BSK_SILENT

def printDefaultLogLevel():
    return _sunlineSuKF.printDefaultLogLevel()

def setDefaultLogLevel(logLevel):
    return _sunlineSuKF.setDefaultLogLevel(logLevel)

def getDefaultLogLevel():
    return _sunlineSuKF.getDefaultLogLevel()
class BasiliskError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sunlineSuKF.BasiliskError_swiginit(self, _sunlineSuKF.new_BasiliskError(*args))
    __swig_destroy__ = _sunlineSuKF.delete_BasiliskError

# Register BasiliskError in _sunlineSuKF:
_sunlineSuKF.BasiliskError_swigregister(BasiliskError)
cvar = _sunlineSuKF.cvar

class BSKLogger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sunlineSuKF.BSKLogger_swiginit(self, _sunlineSuKF.new_BSKLogger(*args))
    __swig_destroy__ = _sunlineSuKF.delete_BSKLogger

    def setLogLevel(self, logLevel):
        return _sunlineSuKF.BSKLogger_setLogLevel(self, logLevel)

    def printLogLevel(self):
        return _sunlineSuKF.BSKLogger_printLogLevel(self)

    def getLogLevel(self):
        return _sunlineSuKF.BSKLogger_getLogLevel(self)

    def bskLog(self, targetLevel, info):
        return _sunlineSuKF.BSKLogger_bskLog(self, targetLevel, info)
    logLevelMap = property(_sunlineSuKF.BSKLogger_logLevelMap_get, _sunlineSuKF.BSKLogger_logLevelMap_set)

# Register BSKLogger in _sunlineSuKF:
_sunlineSuKF.BSKLogger_swigregister(BSKLogger)

def _BSKLogger():
    return _sunlineSuKF._BSKLogger()

def _BSKLogger_d(arg1):
    return _sunlineSuKF._BSKLogger_d(arg1)

def _printLogLevel(arg1):
    return _sunlineSuKF._printLogLevel(arg1)

def _setLogLevel(arg1, arg2):
    return _sunlineSuKF._setLogLevel(arg1, arg2)

def _bskLog(arg1, arg2, arg3):
    return _sunlineSuKF._bskLog(arg1, arg2, arg3)
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sunlineSuKF.SysModel_swiginit(self, _sunlineSuKF.new_SysModel(*args))
    __swig_destroy__ = _sunlineSuKF.delete_SysModel

    def SelfInit(self):
        return _sunlineSuKF.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _sunlineSuKF.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _sunlineSuKF.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _sunlineSuKF.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_sunlineSuKF.SysModel_ModelTag_get, _sunlineSuKF.SysModel_ModelTag_set)
    CallCounts = property(_sunlineSuKF.SysModel_CallCounts_get, _sunlineSuKF.SysModel_CallCounts_set)
    RNGSeed = property(_sunlineSuKF.SysModel_RNGSeed_get, _sunlineSuKF.SysModel_RNGSeed_set)
    moduleID = property(_sunlineSuKF.SysModel_moduleID_get, _sunlineSuKF.SysModel_moduleID_set)

    def logger(self, variableNames: Union[str, Iterable[str]], recordingTime: int = 0):
        """Generate a logger from one or more variables in this model.

        Each variable must be public or private with a standard-named getter.
        For example, if you want to log the variable `foo` from the model
        `mod`, then `mod.foo` or `mod.getFoo()` must be available.

        Args:
            variableNames (Union[str, Iterable[str]]): The name or names
                of the variables to log.
            recordingTime (int, optional): The minimum interval between variable
                recordings. Defaults to 0.
        """
        if isinstance(variableNames, str):
            variableNames = [variableNames]

        loggingFunctions = {}
        for variableName in variableNames:
            if hasattr(self, variableName):
                loggingFunctions[variableName] = lambda _, variableName=variableName: getattr(self, variableName)
                continue

            getterStr = f"get{variableName[0].upper()}{variableName[1:]}"
            getter = getattr(self, getterStr, None)
            if getter is not None:
                loggingFunctions[variableName] = lambda _, getter=getter: getter()
                continue

            raise ValueError(f"Cannot log {variableName} as it is not a "
                f"public variable of {type(self).__name__} and the getter "
                f"{getterStr} does not exist.")

        from Basilisk.utilities import pythonVariableLogger
        return pythonVariableLogger.PythonVariableLogger(loggingFunctions, recordingTime)


# Register SysModel in _sunlineSuKF:
_sunlineSuKF.SysModel_swigregister(SysModel)
class SunlineSuKFCFit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cssRelScale = property(_sunlineSuKF.SunlineSuKFCFit_cssRelScale_get, _sunlineSuKF.SunlineSuKFCFit_cssRelScale_set)
    cssKellPow = property(_sunlineSuKF.SunlineSuKFCFit_cssKellPow_get, _sunlineSuKF.SunlineSuKFCFit_cssKellPow_set)
    cssKellFact = property(_sunlineSuKF.SunlineSuKFCFit_cssKellFact_get, _sunlineSuKF.SunlineSuKFCFit_cssKellFact_set)

    def __init__(self):
        _sunlineSuKF.SunlineSuKFCFit_swiginit(self, _sunlineSuKF.new_SunlineSuKFCFit())
    __swig_destroy__ = _sunlineSuKF.delete_SunlineSuKFCFit

# Register SunlineSuKFCFit in _sunlineSuKF:
_sunlineSuKF.SunlineSuKFCFit_swigregister(SunlineSuKFCFit)
class SunlineSuKFConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    navStateOutMsg = property(_sunlineSuKF.SunlineSuKFConfig_navStateOutMsg_get, _sunlineSuKF.SunlineSuKFConfig_navStateOutMsg_set)
    filtDataOutMsg = property(_sunlineSuKF.SunlineSuKFConfig_filtDataOutMsg_get, _sunlineSuKF.SunlineSuKFConfig_filtDataOutMsg_set)
    cssDataInMsg = property(_sunlineSuKF.SunlineSuKFConfig_cssDataInMsg_get, _sunlineSuKF.SunlineSuKFConfig_cssDataInMsg_set)
    cssConfigInMsg = property(_sunlineSuKF.SunlineSuKFConfig_cssConfigInMsg_get, _sunlineSuKF.SunlineSuKFConfig_cssConfigInMsg_set)
    numStates = property(_sunlineSuKF.SunlineSuKFConfig_numStates_get, _sunlineSuKF.SunlineSuKFConfig_numStates_set)
    countHalfSPs = property(_sunlineSuKF.SunlineSuKFConfig_countHalfSPs_get, _sunlineSuKF.SunlineSuKFConfig_countHalfSPs_set)
    numObs = property(_sunlineSuKF.SunlineSuKFConfig_numObs_get, _sunlineSuKF.SunlineSuKFConfig_numObs_set)
    beta = property(_sunlineSuKF.SunlineSuKFConfig_beta_get, _sunlineSuKF.SunlineSuKFConfig_beta_set)
    alpha = property(_sunlineSuKF.SunlineSuKFConfig_alpha_get, _sunlineSuKF.SunlineSuKFConfig_alpha_set)
    kappa = property(_sunlineSuKF.SunlineSuKFConfig_kappa_get, _sunlineSuKF.SunlineSuKFConfig_kappa_set)
    lambdaVal = property(_sunlineSuKF.SunlineSuKFConfig_lambdaVal_get, _sunlineSuKF.SunlineSuKFConfig_lambdaVal_set)
    gamma = property(_sunlineSuKF.SunlineSuKFConfig_gamma_get, _sunlineSuKF.SunlineSuKFConfig_gamma_set)
    qObsVal = property(_sunlineSuKF.SunlineSuKFConfig_qObsVal_get, _sunlineSuKF.SunlineSuKFConfig_qObsVal_set)
    dt = property(_sunlineSuKF.SunlineSuKFConfig_dt_get, _sunlineSuKF.SunlineSuKFConfig_dt_set)
    timeTag = property(_sunlineSuKF.SunlineSuKFConfig_timeTag_get, _sunlineSuKF.SunlineSuKFConfig_timeTag_set)
    bVec_B = property(_sunlineSuKF.SunlineSuKFConfig_bVec_B_get, _sunlineSuKF.SunlineSuKFConfig_bVec_B_set)
    switchTresh = property(_sunlineSuKF.SunlineSuKFConfig_switchTresh_get, _sunlineSuKF.SunlineSuKFConfig_switchTresh_set)
    stateInit = property(_sunlineSuKF.SunlineSuKFConfig_stateInit_get, _sunlineSuKF.SunlineSuKFConfig_stateInit_set)
    state = property(_sunlineSuKF.SunlineSuKFConfig_state_get, _sunlineSuKF.SunlineSuKFConfig_state_set)
    statePrev = property(_sunlineSuKF.SunlineSuKFConfig_statePrev_get, _sunlineSuKF.SunlineSuKFConfig_statePrev_set)
    wM = property(_sunlineSuKF.SunlineSuKFConfig_wM_get, _sunlineSuKF.SunlineSuKFConfig_wM_set)
    wC = property(_sunlineSuKF.SunlineSuKFConfig_wC_get, _sunlineSuKF.SunlineSuKFConfig_wC_set)
    sBar = property(_sunlineSuKF.SunlineSuKFConfig_sBar_get, _sunlineSuKF.SunlineSuKFConfig_sBar_set)
    sBarPrev = property(_sunlineSuKF.SunlineSuKFConfig_sBarPrev_get, _sunlineSuKF.SunlineSuKFConfig_sBarPrev_set)
    covarInit = property(_sunlineSuKF.SunlineSuKFConfig_covarInit_get, _sunlineSuKF.SunlineSuKFConfig_covarInit_set)
    covar = property(_sunlineSuKF.SunlineSuKFConfig_covar_get, _sunlineSuKF.SunlineSuKFConfig_covar_set)
    covarPrev = property(_sunlineSuKF.SunlineSuKFConfig_covarPrev_get, _sunlineSuKF.SunlineSuKFConfig_covarPrev_set)
    xBar = property(_sunlineSuKF.SunlineSuKFConfig_xBar_get, _sunlineSuKF.SunlineSuKFConfig_xBar_set)
    obs = property(_sunlineSuKF.SunlineSuKFConfig_obs_get, _sunlineSuKF.SunlineSuKFConfig_obs_set)
    yMeas = property(_sunlineSuKF.SunlineSuKFConfig_yMeas_get, _sunlineSuKF.SunlineSuKFConfig_yMeas_set)
    postFits = property(_sunlineSuKF.SunlineSuKFConfig_postFits_get, _sunlineSuKF.SunlineSuKFConfig_postFits_set)
    SP = property(_sunlineSuKF.SunlineSuKFConfig_SP_get, _sunlineSuKF.SunlineSuKFConfig_SP_set)
    qNoise = property(_sunlineSuKF.SunlineSuKFConfig_qNoise_get, _sunlineSuKF.SunlineSuKFConfig_qNoise_set)
    sQnoise = property(_sunlineSuKF.SunlineSuKFConfig_sQnoise_get, _sunlineSuKF.SunlineSuKFConfig_sQnoise_set)
    qObs = property(_sunlineSuKF.SunlineSuKFConfig_qObs_get, _sunlineSuKF.SunlineSuKFConfig_qObs_set)
    cssNHat_B = property(_sunlineSuKF.SunlineSuKFConfig_cssNHat_B_get, _sunlineSuKF.SunlineSuKFConfig_cssNHat_B_set)
    CBias = property(_sunlineSuKF.SunlineSuKFConfig_CBias_get, _sunlineSuKF.SunlineSuKFConfig_CBias_set)
    kellFits = property(_sunlineSuKF.SunlineSuKFConfig_kellFits_get, _sunlineSuKF.SunlineSuKFConfig_kellFits_set)
    numActiveCss = property(_sunlineSuKF.SunlineSuKFConfig_numActiveCss_get, _sunlineSuKF.SunlineSuKFConfig_numActiveCss_set)
    numCSSTotal = property(_sunlineSuKF.SunlineSuKFConfig_numCSSTotal_get, _sunlineSuKF.SunlineSuKFConfig_numCSSTotal_set)
    sensorUseThresh = property(_sunlineSuKF.SunlineSuKFConfig_sensorUseThresh_get, _sunlineSuKF.SunlineSuKFConfig_sensorUseThresh_set)
    outputSunline = property(_sunlineSuKF.SunlineSuKFConfig_outputSunline_get, _sunlineSuKF.SunlineSuKFConfig_outputSunline_set)
    cssSensorInBuffer = property(_sunlineSuKF.SunlineSuKFConfig_cssSensorInBuffer_get, _sunlineSuKF.SunlineSuKFConfig_cssSensorInBuffer_set)
    filterInitialized = property(_sunlineSuKF.SunlineSuKFConfig_filterInitialized_get, _sunlineSuKF.SunlineSuKFConfig_filterInitialized_set)
    bskLogger = property(_sunlineSuKF.SunlineSuKFConfig_bskLogger_get, _sunlineSuKF.SunlineSuKFConfig_bskLogger_set)

    def createWrapper(self):
        return sunlineSuKF(self)


    def __init__(self):
        _sunlineSuKF.SunlineSuKFConfig_swiginit(self, _sunlineSuKF.new_SunlineSuKFConfig())
    __swig_destroy__ = _sunlineSuKF.delete_SunlineSuKFConfig

# Register SunlineSuKFConfig in _sunlineSuKF:
_sunlineSuKF.SunlineSuKFConfig_swigregister(SunlineSuKFConfig)

def sunlineSuKFTimeUpdate(configData, updateTime):
    return _sunlineSuKF.sunlineSuKFTimeUpdate(configData, updateTime)

def sunlineSuKFMeasUpdate(configData, updateTime):
    return _sunlineSuKF.sunlineSuKFMeasUpdate(configData, updateTime)

def sunlineStateProp(stateInOut, b_vec, dt):
    return _sunlineSuKF.sunlineStateProp(stateInOut, b_vec, dt)

def sunlineSuKFMeasModel(configData):
    return _sunlineSuKF.sunlineSuKFMeasModel(configData)

def sunlineSuKFComputeDCM_BS(sunheading, bVec, dcm):
    return _sunlineSuKF.sunlineSuKFComputeDCM_BS(sunheading, bVec, dcm)

def sunlineSuKFSwitch(bVec_B, states, covar):
    return _sunlineSuKF.sunlineSuKFSwitch(bVec_B, states, covar)

def sunlineSuKFCleanUpdate(configData):
    return _sunlineSuKF.sunlineSuKFCleanUpdate(configData)
class sunlineSuKF(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sunlineSuKF.sunlineSuKF_swiginit(self, _sunlineSuKF.new_sunlineSuKF(*args))

        if (len(args)) > 0:
            args[0].thisown = False




    def SelfInit(self):
        return _sunlineSuKF.sunlineSuKF_SelfInit(self)

    def UpdateState(self, currentSimNanos):
        return _sunlineSuKF.sunlineSuKF_UpdateState(self, currentSimNanos)

    def Reset(self, currentSimNanos):
        return _sunlineSuKF.sunlineSuKF_Reset(self, currentSimNanos)

    def __deref__(self):
        return _sunlineSuKF.sunlineSuKF___deref__(self)

    def getConfig(self):
        return _sunlineSuKF.sunlineSuKF_getConfig(self)
    __swig_destroy__ = _sunlineSuKF.delete_sunlineSuKF
    navStateOutMsg = property(_sunlineSuKF.sunlineSuKF_navStateOutMsg_get, _sunlineSuKF.sunlineSuKF_navStateOutMsg_set)
    filtDataOutMsg = property(_sunlineSuKF.sunlineSuKF_filtDataOutMsg_get, _sunlineSuKF.sunlineSuKF_filtDataOutMsg_set)
    cssDataInMsg = property(_sunlineSuKF.sunlineSuKF_cssDataInMsg_get, _sunlineSuKF.sunlineSuKF_cssDataInMsg_set)
    cssConfigInMsg = property(_sunlineSuKF.sunlineSuKF_cssConfigInMsg_get, _sunlineSuKF.sunlineSuKF_cssConfigInMsg_set)
    numStates = property(_sunlineSuKF.sunlineSuKF_numStates_get, _sunlineSuKF.sunlineSuKF_numStates_set)
    countHalfSPs = property(_sunlineSuKF.sunlineSuKF_countHalfSPs_get, _sunlineSuKF.sunlineSuKF_countHalfSPs_set)
    numObs = property(_sunlineSuKF.sunlineSuKF_numObs_get, _sunlineSuKF.sunlineSuKF_numObs_set)
    beta = property(_sunlineSuKF.sunlineSuKF_beta_get, _sunlineSuKF.sunlineSuKF_beta_set)
    alpha = property(_sunlineSuKF.sunlineSuKF_alpha_get, _sunlineSuKF.sunlineSuKF_alpha_set)
    kappa = property(_sunlineSuKF.sunlineSuKF_kappa_get, _sunlineSuKF.sunlineSuKF_kappa_set)
    lambdaVal = property(_sunlineSuKF.sunlineSuKF_lambdaVal_get, _sunlineSuKF.sunlineSuKF_lambdaVal_set)
    gamma = property(_sunlineSuKF.sunlineSuKF_gamma_get, _sunlineSuKF.sunlineSuKF_gamma_set)
    qObsVal = property(_sunlineSuKF.sunlineSuKF_qObsVal_get, _sunlineSuKF.sunlineSuKF_qObsVal_set)
    dt = property(_sunlineSuKF.sunlineSuKF_dt_get, _sunlineSuKF.sunlineSuKF_dt_set)
    timeTag = property(_sunlineSuKF.sunlineSuKF_timeTag_get, _sunlineSuKF.sunlineSuKF_timeTag_set)
    bVec_B = property(_sunlineSuKF.sunlineSuKF_bVec_B_get, _sunlineSuKF.sunlineSuKF_bVec_B_set)
    switchTresh = property(_sunlineSuKF.sunlineSuKF_switchTresh_get, _sunlineSuKF.sunlineSuKF_switchTresh_set)
    stateInit = property(_sunlineSuKF.sunlineSuKF_stateInit_get, _sunlineSuKF.sunlineSuKF_stateInit_set)
    state = property(_sunlineSuKF.sunlineSuKF_state_get, _sunlineSuKF.sunlineSuKF_state_set)
    statePrev = property(_sunlineSuKF.sunlineSuKF_statePrev_get, _sunlineSuKF.sunlineSuKF_statePrev_set)
    wM = property(_sunlineSuKF.sunlineSuKF_wM_get, _sunlineSuKF.sunlineSuKF_wM_set)
    wC = property(_sunlineSuKF.sunlineSuKF_wC_get, _sunlineSuKF.sunlineSuKF_wC_set)
    sBar = property(_sunlineSuKF.sunlineSuKF_sBar_get, _sunlineSuKF.sunlineSuKF_sBar_set)
    sBarPrev = property(_sunlineSuKF.sunlineSuKF_sBarPrev_get, _sunlineSuKF.sunlineSuKF_sBarPrev_set)
    covarInit = property(_sunlineSuKF.sunlineSuKF_covarInit_get, _sunlineSuKF.sunlineSuKF_covarInit_set)
    covar = property(_sunlineSuKF.sunlineSuKF_covar_get, _sunlineSuKF.sunlineSuKF_covar_set)
    covarPrev = property(_sunlineSuKF.sunlineSuKF_covarPrev_get, _sunlineSuKF.sunlineSuKF_covarPrev_set)
    xBar = property(_sunlineSuKF.sunlineSuKF_xBar_get, _sunlineSuKF.sunlineSuKF_xBar_set)
    obs = property(_sunlineSuKF.sunlineSuKF_obs_get, _sunlineSuKF.sunlineSuKF_obs_set)
    yMeas = property(_sunlineSuKF.sunlineSuKF_yMeas_get, _sunlineSuKF.sunlineSuKF_yMeas_set)
    postFits = property(_sunlineSuKF.sunlineSuKF_postFits_get, _sunlineSuKF.sunlineSuKF_postFits_set)
    SP = property(_sunlineSuKF.sunlineSuKF_SP_get, _sunlineSuKF.sunlineSuKF_SP_set)
    qNoise = property(_sunlineSuKF.sunlineSuKF_qNoise_get, _sunlineSuKF.sunlineSuKF_qNoise_set)
    sQnoise = property(_sunlineSuKF.sunlineSuKF_sQnoise_get, _sunlineSuKF.sunlineSuKF_sQnoise_set)
    qObs = property(_sunlineSuKF.sunlineSuKF_qObs_get, _sunlineSuKF.sunlineSuKF_qObs_set)
    cssNHat_B = property(_sunlineSuKF.sunlineSuKF_cssNHat_B_get, _sunlineSuKF.sunlineSuKF_cssNHat_B_set)
    CBias = property(_sunlineSuKF.sunlineSuKF_CBias_get, _sunlineSuKF.sunlineSuKF_CBias_set)
    kellFits = property(_sunlineSuKF.sunlineSuKF_kellFits_get, _sunlineSuKF.sunlineSuKF_kellFits_set)
    numActiveCss = property(_sunlineSuKF.sunlineSuKF_numActiveCss_get, _sunlineSuKF.sunlineSuKF_numActiveCss_set)
    numCSSTotal = property(_sunlineSuKF.sunlineSuKF_numCSSTotal_get, _sunlineSuKF.sunlineSuKF_numCSSTotal_set)
    sensorUseThresh = property(_sunlineSuKF.sunlineSuKF_sensorUseThresh_get, _sunlineSuKF.sunlineSuKF_sensorUseThresh_set)
    outputSunline = property(_sunlineSuKF.sunlineSuKF_outputSunline_get, _sunlineSuKF.sunlineSuKF_outputSunline_set)
    cssSensorInBuffer = property(_sunlineSuKF.sunlineSuKF_cssSensorInBuffer_get, _sunlineSuKF.sunlineSuKF_cssSensorInBuffer_set)
    filterInitialized = property(_sunlineSuKF.sunlineSuKF_filterInitialized_get, _sunlineSuKF.sunlineSuKF_filterInitialized_set)
    bskLogger = property(_sunlineSuKF.sunlineSuKF_bskLogger_get, _sunlineSuKF.sunlineSuKF_bskLogger_set)

# Register sunlineSuKF in _sunlineSuKF:
_sunlineSuKF.sunlineSuKF_swigregister(sunlineSuKF)
class NavAttMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timeTag = property(_sunlineSuKF.NavAttMsgPayload_timeTag_get, _sunlineSuKF.NavAttMsgPayload_timeTag_set)
    sigma_BN = property(_sunlineSuKF.NavAttMsgPayload_sigma_BN_get, _sunlineSuKF.NavAttMsgPayload_sigma_BN_set)
    omega_BN_B = property(_sunlineSuKF.NavAttMsgPayload_omega_BN_B_get, _sunlineSuKF.NavAttMsgPayload_omega_BN_B_set)
    vehSunPntBdy = property(_sunlineSuKF.NavAttMsgPayload_vehSunPntBdy_get, _sunlineSuKF.NavAttMsgPayload_vehSunPntBdy_set)

    def __init__(self):
        _sunlineSuKF.NavAttMsgPayload_swiginit(self, _sunlineSuKF.new_NavAttMsgPayload())
    __swig_destroy__ = _sunlineSuKF.delete_NavAttMsgPayload

# Register NavAttMsgPayload in _sunlineSuKF:
_sunlineSuKF.NavAttMsgPayload_swigregister(NavAttMsgPayload)
class CSSArraySensorMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timeTag = property(_sunlineSuKF.CSSArraySensorMsgPayload_timeTag_get, _sunlineSuKF.CSSArraySensorMsgPayload_timeTag_set)
    CosValue = property(_sunlineSuKF.CSSArraySensorMsgPayload_CosValue_get, _sunlineSuKF.CSSArraySensorMsgPayload_CosValue_set)

    def __init__(self):
        _sunlineSuKF.CSSArraySensorMsgPayload_swiginit(self, _sunlineSuKF.new_CSSArraySensorMsgPayload())
    __swig_destroy__ = _sunlineSuKF.delete_CSSArraySensorMsgPayload

# Register CSSArraySensorMsgPayload in _sunlineSuKF:
_sunlineSuKF.CSSArraySensorMsgPayload_swigregister(CSSArraySensorMsgPayload)
SKF_N_STATES = _sunlineSuKF.SKF_N_STATES
SKF_N_STATES_SWITCH = _sunlineSuKF.SKF_N_STATES_SWITCH
EKF_N_STATES_SWITCH = _sunlineSuKF.EKF_N_STATES_SWITCH
SKF_N_STATES_HALF = _sunlineSuKF.SKF_N_STATES_HALF
MAX_N_CSS_MEAS = _sunlineSuKF.MAX_N_CSS_MEAS
class SunlineFilterMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timeTag = property(_sunlineSuKF.SunlineFilterMsgPayload_timeTag_get, _sunlineSuKF.SunlineFilterMsgPayload_timeTag_set)
    covar = property(_sunlineSuKF.SunlineFilterMsgPayload_covar_get, _sunlineSuKF.SunlineFilterMsgPayload_covar_set)
    state = property(_sunlineSuKF.SunlineFilterMsgPayload_state_get, _sunlineSuKF.SunlineFilterMsgPayload_state_set)
    stateError = property(_sunlineSuKF.SunlineFilterMsgPayload_stateError_get, _sunlineSuKF.SunlineFilterMsgPayload_stateError_set)
    postFitRes = property(_sunlineSuKF.SunlineFilterMsgPayload_postFitRes_get, _sunlineSuKF.SunlineFilterMsgPayload_postFitRes_set)
    numObs = property(_sunlineSuKF.SunlineFilterMsgPayload_numObs_get, _sunlineSuKF.SunlineFilterMsgPayload_numObs_set)

    def __init__(self):
        _sunlineSuKF.SunlineFilterMsgPayload_swiginit(self, _sunlineSuKF.new_SunlineFilterMsgPayload())
    __swig_destroy__ = _sunlineSuKF.delete_SunlineFilterMsgPayload

# Register SunlineFilterMsgPayload in _sunlineSuKF:
_sunlineSuKF.SunlineFilterMsgPayload_swigregister(SunlineFilterMsgPayload)
class CSSConfigMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nCSS = property(_sunlineSuKF.CSSConfigMsgPayload_nCSS_get, _sunlineSuKF.CSSConfigMsgPayload_nCSS_set)
    cssVals = property(_sunlineSuKF.CSSConfigMsgPayload_cssVals_get, _sunlineSuKF.CSSConfigMsgPayload_cssVals_set)

    def __init__(self):
        _sunlineSuKF.CSSConfigMsgPayload_swiginit(self, _sunlineSuKF.new_CSSConfigMsgPayload())
    __swig_destroy__ = _sunlineSuKF.delete_CSSConfigMsgPayload

# Register CSSConfigMsgPayload in _sunlineSuKF:
_sunlineSuKF.CSSConfigMsgPayload_swigregister(CSSConfigMsgPayload)
UKF_MAX_DIM = _sunlineSuKF.UKF_MAX_DIM

def ukfQRDJustR(sourceMat, nRow, nCol, destMat):
    return _sunlineSuKF.ukfQRDJustR(sourceMat, nRow, nCol, destMat)

def ukfLInv(sourceMat, nRow, nCol, destMat):
    return _sunlineSuKF.ukfLInv(sourceMat, nRow, nCol, destMat)

def ukfUInv(sourceMat, nRow, nCol, destMat):
    return _sunlineSuKF.ukfUInv(sourceMat, nRow, nCol, destMat)

def ukfLUD(sourceMat, nRow, nCol, destMat, indx):
    return _sunlineSuKF.ukfLUD(sourceMat, nRow, nCol, destMat, indx)

def ukfLUBckSlv(sourceMat, nRow, nCol, indx, bmat, destMat):
    return _sunlineSuKF.ukfLUBckSlv(sourceMat, nRow, nCol, indx, bmat, destMat)

def ukfMatInv(sourceMat, nRow, nCol, destMat):
    return _sunlineSuKF.ukfMatInv(sourceMat, nRow, nCol, destMat)

def ukfCholDecomp(sourceMat, nRow, nCol, destMat):
    return _sunlineSuKF.ukfCholDecomp(sourceMat, nRow, nCol, destMat)

def ukfCholDownDate(rMat, xVec, beta, nStates, rOut):
    return _sunlineSuKF.ukfCholDownDate(rMat, xVec, beta, nStates, rOut)

import sys
protectAllClasses(sys.modules[__name__])


