# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


from typing import Union, Iterable



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _lambertValidator
else:
    import _lambertValidator

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



from Basilisk.architecture.swig_common_model import *


def new_doubleArray(nelements):
    return _lambertValidator.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _lambertValidator.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _lambertValidator.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _lambertValidator.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _lambertValidator.new_longArray(nelements)

def delete_longArray(ary):
    return _lambertValidator.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _lambertValidator.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _lambertValidator.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _lambertValidator.new_intArray(nelements)

def delete_intArray(ary):
    return _lambertValidator.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _lambertValidator.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _lambertValidator.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _lambertValidator.new_shortArray(nelements)

def delete_shortArray(ary):
    return _lambertValidator.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _lambertValidator.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _lambertValidator.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _lambertValidator.delete_SwigPyIterator

    def value(self):
        return _lambertValidator.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _lambertValidator.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _lambertValidator.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _lambertValidator.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _lambertValidator.SwigPyIterator_equal(self, x)

    def copy(self):
        return _lambertValidator.SwigPyIterator_copy(self)

    def next(self):
        return _lambertValidator.SwigPyIterator_next(self)

    def __next__(self):
        return _lambertValidator.SwigPyIterator___next__(self)

    def previous(self):
        return _lambertValidator.SwigPyIterator_previous(self)

    def advance(self, n):
        return _lambertValidator.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _lambertValidator.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _lambertValidator.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _lambertValidator.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _lambertValidator.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _lambertValidator.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _lambertValidator.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _lambertValidator:
_lambertValidator.SwigPyIterator_swigregister(SwigPyIterator)

from Basilisk.architecture.swig_common_model import *

MAX_LOGGING_LENGTH = _lambertValidator.MAX_LOGGING_LENGTH
BSK_DEBUG = _lambertValidator.BSK_DEBUG
BSK_INFORMATION = _lambertValidator.BSK_INFORMATION
BSK_WARNING = _lambertValidator.BSK_WARNING
BSK_ERROR = _lambertValidator.BSK_ERROR
BSK_SILENT = _lambertValidator.BSK_SILENT

def printDefaultLogLevel():
    return _lambertValidator.printDefaultLogLevel()

def setDefaultLogLevel(logLevel):
    return _lambertValidator.setDefaultLogLevel(logLevel)

def getDefaultLogLevel():
    return _lambertValidator.getDefaultLogLevel()
class BasiliskError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _lambertValidator.BasiliskError_swiginit(self, _lambertValidator.new_BasiliskError(*args))
    __swig_destroy__ = _lambertValidator.delete_BasiliskError

# Register BasiliskError in _lambertValidator:
_lambertValidator.BasiliskError_swigregister(BasiliskError)
cvar = _lambertValidator.cvar

class BSKLogger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _lambertValidator.BSKLogger_swiginit(self, _lambertValidator.new_BSKLogger(*args))
    __swig_destroy__ = _lambertValidator.delete_BSKLogger

    def setLogLevel(self, logLevel):
        return _lambertValidator.BSKLogger_setLogLevel(self, logLevel)

    def printLogLevel(self):
        return _lambertValidator.BSKLogger_printLogLevel(self)

    def getLogLevel(self):
        return _lambertValidator.BSKLogger_getLogLevel(self)

    def bskLog(self, targetLevel, info):
        return _lambertValidator.BSKLogger_bskLog(self, targetLevel, info)
    logLevelMap = property(_lambertValidator.BSKLogger_logLevelMap_get, _lambertValidator.BSKLogger_logLevelMap_set)

# Register BSKLogger in _lambertValidator:
_lambertValidator.BSKLogger_swigregister(BSKLogger)

def _BSKLogger():
    return _lambertValidator._BSKLogger()

def _BSKLogger_d(arg1):
    return _lambertValidator._BSKLogger_d(arg1)

def _printLogLevel(arg1):
    return _lambertValidator._printLogLevel(arg1)

def _setLogLevel(arg1, arg2):
    return _lambertValidator._setLogLevel(arg1, arg2)

def _bskLog(arg1, arg2, arg3):
    return _lambertValidator._bskLog(arg1, arg2, arg3)
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _lambertValidator.SysModel_swiginit(self, _lambertValidator.new_SysModel(*args))
    __swig_destroy__ = _lambertValidator.delete_SysModel

    def SelfInit(self):
        return _lambertValidator.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _lambertValidator.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _lambertValidator.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _lambertValidator.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_lambertValidator.SysModel_ModelTag_get, _lambertValidator.SysModel_ModelTag_set)
    CallCounts = property(_lambertValidator.SysModel_CallCounts_get, _lambertValidator.SysModel_CallCounts_set)
    RNGSeed = property(_lambertValidator.SysModel_RNGSeed_get, _lambertValidator.SysModel_RNGSeed_set)
    moduleID = property(_lambertValidator.SysModel_moduleID_get, _lambertValidator.SysModel_moduleID_set)

    def logger(self, variableNames: Union[str, Iterable[str]], recordingTime: int = 0):
        """Generate a logger from one or more variables in this model.

        Each variable must be public or private with a standard-named getter.
        For example, if you want to log the variable `foo` from the model
        `mod`, then `mod.foo` or `mod.getFoo()` must be available.

        Args:
            variableNames (Union[str, Iterable[str]]): The name or names
                of the variables to log.
            recordingTime (int, optional): The minimum interval between variable
                recordings. Defaults to 0.
        """
        if isinstance(variableNames, str):
            variableNames = [variableNames]

        loggingFunctions = {}
        for variableName in variableNames:
            if hasattr(self, variableName):
                loggingFunctions[variableName] = lambda _, variableName=variableName: getattr(self, variableName)
                continue

            getterStr = f"get{variableName[0].upper()}{variableName[1:]}"
            getter = getattr(self, getterStr, None)
            if getter is not None:
                loggingFunctions[variableName] = lambda _, getter=getter: getter()
                continue

            raise ValueError(f"Cannot log {variableName} as it is not a "
                f"public variable of {type(self).__name__} and the getter "
                f"{getterStr} does not exist.")

        from Basilisk.utilities import pythonVariableLogger
        return pythonVariableLogger.PythonVariableLogger(loggingFunctions, recordingTime)


# Register SysModel in _lambertValidator:
_lambertValidator.SysModel_swigregister(SysModel)
NUM_INITIALSTATES = _lambertValidator.NUM_INITIALSTATES
class LambertValidator(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _lambertValidator.LambertValidator_swiginit(self, _lambertValidator.new_LambertValidator())
    __swig_destroy__ = _lambertValidator.delete_LambertValidator

    def Reset(self, currentSimNanos):
        return _lambertValidator.LambertValidator_Reset(self, currentSimNanos)

    def UpdateState(self, currentSimNanos):
        return _lambertValidator.LambertValidator_UpdateState(self, currentSimNanos)
    navTransInMsg = property(_lambertValidator.LambertValidator_navTransInMsg_get, _lambertValidator.LambertValidator_navTransInMsg_set)
    lambertProblemInMsg = property(_lambertValidator.LambertValidator_lambertProblemInMsg_get, _lambertValidator.LambertValidator_lambertProblemInMsg_set)
    lambertSolutionInMsg = property(_lambertValidator.LambertValidator_lambertSolutionInMsg_get, _lambertValidator.LambertValidator_lambertSolutionInMsg_set)
    lambertPerformanceInMsg = property(_lambertValidator.LambertValidator_lambertPerformanceInMsg_get, _lambertValidator.LambertValidator_lambertPerformanceInMsg_set)
    dvBurnCmdOutMsg = property(_lambertValidator.LambertValidator_dvBurnCmdOutMsg_get, _lambertValidator.LambertValidator_dvBurnCmdOutMsg_set)
    lambertValidatorOutMsg = property(_lambertValidator.LambertValidator_lambertValidatorOutMsg_get, _lambertValidator.LambertValidator_lambertValidatorOutMsg_set)
    bskLogger = property(_lambertValidator.LambertValidator_bskLogger_get, _lambertValidator.LambertValidator_bskLogger_set)

    def setLambertSolutionSpecifier(self, value):
        return _lambertValidator.LambertValidator_setLambertSolutionSpecifier(self, value)

    def getLambertSolutionSpecifier(self):
        return _lambertValidator.LambertValidator_getLambertSolutionSpecifier(self)

    def setFinalTime(self, value):
        return _lambertValidator.LambertValidator_setFinalTime(self, value)

    def getFinalTime(self):
        return _lambertValidator.LambertValidator_getFinalTime(self)

    def setManeuverTime(self, value):
        return _lambertValidator.LambertValidator_setManeuverTime(self, value)

    def getManeuverTime(self):
        return _lambertValidator.LambertValidator_getManeuverTime(self)

    def setMaxDistanceTarget(self, value):
        return _lambertValidator.LambertValidator_setMaxDistanceTarget(self, value)

    def getMaxDistanceTarget(self):
        return _lambertValidator.LambertValidator_getMaxDistanceTarget(self)

    def setMinOrbitRadius(self, value):
        return _lambertValidator.LambertValidator_setMinOrbitRadius(self, value)

    def getMinOrbitRadius(self):
        return _lambertValidator.LambertValidator_getMinOrbitRadius(self)

    def setUncertaintyStates(self, value):
        return _lambertValidator.LambertValidator_setUncertaintyStates(self, value)

    def getUncertaintyStates(self):
        return _lambertValidator.LambertValidator_getUncertaintyStates(self)

    def setUncertaintyDV(self, value):
        return _lambertValidator.LambertValidator_setUncertaintyDV(self, value)

    def getUncertaintyDV(self):
        return _lambertValidator.LambertValidator_getUncertaintyDV(self)

    def setDvConvergenceTolerance(self, value):
        return _lambertValidator.LambertValidator_setDvConvergenceTolerance(self, value)

    def getDvConvergenceTolerance(self):
        return _lambertValidator.LambertValidator_getDvConvergenceTolerance(self)

    def setIgnoreConstraintViolations(self, value):
        return _lambertValidator.LambertValidator_setIgnoreConstraintViolations(self, value)

    def getIgnoreConstraintViolations(self):
        return _lambertValidator.LambertValidator_getIgnoreConstraintViolations(self)

# Register LambertValidator in _lambertValidator:
_lambertValidator.LambertValidator_swigregister(LambertValidator)
class NavTransMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timeTag = property(_lambertValidator.NavTransMsgPayload_timeTag_get, _lambertValidator.NavTransMsgPayload_timeTag_set)
    r_BN_N = property(_lambertValidator.NavTransMsgPayload_r_BN_N_get, _lambertValidator.NavTransMsgPayload_r_BN_N_set)
    v_BN_N = property(_lambertValidator.NavTransMsgPayload_v_BN_N_get, _lambertValidator.NavTransMsgPayload_v_BN_N_set)
    vehAccumDV = property(_lambertValidator.NavTransMsgPayload_vehAccumDV_get, _lambertValidator.NavTransMsgPayload_vehAccumDV_set)

    def __init__(self):
        _lambertValidator.NavTransMsgPayload_swiginit(self, _lambertValidator.new_NavTransMsgPayload())
    __swig_destroy__ = _lambertValidator.delete_NavTransMsgPayload

# Register NavTransMsgPayload in _lambertValidator:
_lambertValidator.NavTransMsgPayload_swigregister(NavTransMsgPayload)
IZZO = _lambertValidator.IZZO
GOODING = _lambertValidator.GOODING
class LambertProblemMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    solverMethod = property(_lambertValidator.LambertProblemMsgPayload_solverMethod_get, _lambertValidator.LambertProblemMsgPayload_solverMethod_set)
    r1_N = property(_lambertValidator.LambertProblemMsgPayload_r1_N_get, _lambertValidator.LambertProblemMsgPayload_r1_N_set)
    r2_N = property(_lambertValidator.LambertProblemMsgPayload_r2_N_get, _lambertValidator.LambertProblemMsgPayload_r2_N_set)
    transferTime = property(_lambertValidator.LambertProblemMsgPayload_transferTime_get, _lambertValidator.LambertProblemMsgPayload_transferTime_set)
    mu = property(_lambertValidator.LambertProblemMsgPayload_mu_get, _lambertValidator.LambertProblemMsgPayload_mu_set)
    numRevolutions = property(_lambertValidator.LambertProblemMsgPayload_numRevolutions_get, _lambertValidator.LambertProblemMsgPayload_numRevolutions_set)

    def __init__(self):
        _lambertValidator.LambertProblemMsgPayload_swiginit(self, _lambertValidator.new_LambertProblemMsgPayload())
    __swig_destroy__ = _lambertValidator.delete_LambertProblemMsgPayload

# Register LambertProblemMsgPayload in _lambertValidator:
_lambertValidator.LambertProblemMsgPayload_swigregister(LambertProblemMsgPayload)
class LambertSolutionMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    v1_N = property(_lambertValidator.LambertSolutionMsgPayload_v1_N_get, _lambertValidator.LambertSolutionMsgPayload_v1_N_set)
    v2_N = property(_lambertValidator.LambertSolutionMsgPayload_v2_N_get, _lambertValidator.LambertSolutionMsgPayload_v2_N_set)
    valid = property(_lambertValidator.LambertSolutionMsgPayload_valid_get, _lambertValidator.LambertSolutionMsgPayload_valid_set)
    v1Sol2_N = property(_lambertValidator.LambertSolutionMsgPayload_v1Sol2_N_get, _lambertValidator.LambertSolutionMsgPayload_v1Sol2_N_set)
    v2Sol2_N = property(_lambertValidator.LambertSolutionMsgPayload_v2Sol2_N_get, _lambertValidator.LambertSolutionMsgPayload_v2Sol2_N_set)
    validSol2 = property(_lambertValidator.LambertSolutionMsgPayload_validSol2_get, _lambertValidator.LambertSolutionMsgPayload_validSol2_set)

    def __init__(self):
        _lambertValidator.LambertSolutionMsgPayload_swiginit(self, _lambertValidator.new_LambertSolutionMsgPayload())
    __swig_destroy__ = _lambertValidator.delete_LambertSolutionMsgPayload

# Register LambertSolutionMsgPayload in _lambertValidator:
_lambertValidator.LambertSolutionMsgPayload_swigregister(LambertSolutionMsgPayload)
class LambertPerformanceMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_lambertValidator.LambertPerformanceMsgPayload_x_get, _lambertValidator.LambertPerformanceMsgPayload_x_set)
    numIter = property(_lambertValidator.LambertPerformanceMsgPayload_numIter_get, _lambertValidator.LambertPerformanceMsgPayload_numIter_set)
    errX = property(_lambertValidator.LambertPerformanceMsgPayload_errX_get, _lambertValidator.LambertPerformanceMsgPayload_errX_set)
    xSol2 = property(_lambertValidator.LambertPerformanceMsgPayload_xSol2_get, _lambertValidator.LambertPerformanceMsgPayload_xSol2_set)
    numIterSol2 = property(_lambertValidator.LambertPerformanceMsgPayload_numIterSol2_get, _lambertValidator.LambertPerformanceMsgPayload_numIterSol2_set)
    errXSol2 = property(_lambertValidator.LambertPerformanceMsgPayload_errXSol2_get, _lambertValidator.LambertPerformanceMsgPayload_errXSol2_set)

    def __init__(self):
        _lambertValidator.LambertPerformanceMsgPayload_swiginit(self, _lambertValidator.new_LambertPerformanceMsgPayload())
    __swig_destroy__ = _lambertValidator.delete_LambertPerformanceMsgPayload

# Register LambertPerformanceMsgPayload in _lambertValidator:
_lambertValidator.LambertPerformanceMsgPayload_swigregister(LambertPerformanceMsgPayload)
class DvBurnCmdMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dvInrtlCmd = property(_lambertValidator.DvBurnCmdMsgPayload_dvInrtlCmd_get, _lambertValidator.DvBurnCmdMsgPayload_dvInrtlCmd_set)
    dvRotVecUnit = property(_lambertValidator.DvBurnCmdMsgPayload_dvRotVecUnit_get, _lambertValidator.DvBurnCmdMsgPayload_dvRotVecUnit_set)
    dvRotVecMag = property(_lambertValidator.DvBurnCmdMsgPayload_dvRotVecMag_get, _lambertValidator.DvBurnCmdMsgPayload_dvRotVecMag_set)
    burnStartTime = property(_lambertValidator.DvBurnCmdMsgPayload_burnStartTime_get, _lambertValidator.DvBurnCmdMsgPayload_burnStartTime_set)

    def __init__(self):
        _lambertValidator.DvBurnCmdMsgPayload_swiginit(self, _lambertValidator.new_DvBurnCmdMsgPayload())
    __swig_destroy__ = _lambertValidator.delete_DvBurnCmdMsgPayload

# Register DvBurnCmdMsgPayload in _lambertValidator:
_lambertValidator.DvBurnCmdMsgPayload_swigregister(DvBurnCmdMsgPayload)
class LambertValidatorMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    failedValidLambert = property(_lambertValidator.LambertValidatorMsgPayload_failedValidLambert_get, _lambertValidator.LambertValidatorMsgPayload_failedValidLambert_set)
    failedNumIterationsLambert = property(_lambertValidator.LambertValidatorMsgPayload_failedNumIterationsLambert_get, _lambertValidator.LambertValidatorMsgPayload_failedNumIterationsLambert_set)
    failedXToleranceLambert = property(_lambertValidator.LambertValidatorMsgPayload_failedXToleranceLambert_get, _lambertValidator.LambertValidatorMsgPayload_failedXToleranceLambert_set)
    failedXSolutionConvergence = property(_lambertValidator.LambertValidatorMsgPayload_failedXSolutionConvergence_get, _lambertValidator.LambertValidatorMsgPayload_failedXSolutionConvergence_set)
    failedDvSolutionConvergence = property(_lambertValidator.LambertValidatorMsgPayload_failedDvSolutionConvergence_get, _lambertValidator.LambertValidatorMsgPayload_failedDvSolutionConvergence_set)
    failedDistanceTargetConstraint = property(_lambertValidator.LambertValidatorMsgPayload_failedDistanceTargetConstraint_get, _lambertValidator.LambertValidatorMsgPayload_failedDistanceTargetConstraint_set)
    failedOrbitRadiusConstraint = property(_lambertValidator.LambertValidatorMsgPayload_failedOrbitRadiusConstraint_get, _lambertValidator.LambertValidatorMsgPayload_failedOrbitRadiusConstraint_set)
    xSolutionDifference = property(_lambertValidator.LambertValidatorMsgPayload_xSolutionDifference_get, _lambertValidator.LambertValidatorMsgPayload_xSolutionDifference_set)
    dvSolutionDifference = property(_lambertValidator.LambertValidatorMsgPayload_dvSolutionDifference_get, _lambertValidator.LambertValidatorMsgPayload_dvSolutionDifference_set)
    violationsDistanceTarget = property(_lambertValidator.LambertValidatorMsgPayload_violationsDistanceTarget_get, _lambertValidator.LambertValidatorMsgPayload_violationsDistanceTarget_set)
    violationsOrbitRadius = property(_lambertValidator.LambertValidatorMsgPayload_violationsOrbitRadius_get, _lambertValidator.LambertValidatorMsgPayload_violationsOrbitRadius_set)
    dv_N = property(_lambertValidator.LambertValidatorMsgPayload_dv_N_get, _lambertValidator.LambertValidatorMsgPayload_dv_N_set)

    def __init__(self):
        _lambertValidator.LambertValidatorMsgPayload_swiginit(self, _lambertValidator.new_LambertValidatorMsgPayload())
    __swig_destroy__ = _lambertValidator.delete_LambertValidatorMsgPayload

# Register LambertValidatorMsgPayload in _lambertValidator:
_lambertValidator.LambertValidatorMsgPayload_swigregister(LambertValidatorMsgPayload)

import sys
protectAllClasses(sys.modules[__name__])


