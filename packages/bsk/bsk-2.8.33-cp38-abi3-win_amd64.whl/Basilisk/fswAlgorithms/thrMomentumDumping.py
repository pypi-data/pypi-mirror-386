# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


from typing import Union, Iterable



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _thrMomentumDumping
else:
    import _thrMomentumDumping

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



from Basilisk.architecture.swig_common_model import *


def new_doubleArray(nelements):
    return _thrMomentumDumping.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _thrMomentumDumping.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _thrMomentumDumping.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _thrMomentumDumping.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _thrMomentumDumping.new_longArray(nelements)

def delete_longArray(ary):
    return _thrMomentumDumping.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _thrMomentumDumping.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _thrMomentumDumping.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _thrMomentumDumping.new_intArray(nelements)

def delete_intArray(ary):
    return _thrMomentumDumping.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _thrMomentumDumping.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _thrMomentumDumping.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _thrMomentumDumping.new_shortArray(nelements)

def delete_shortArray(ary):
    return _thrMomentumDumping.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _thrMomentumDumping.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _thrMomentumDumping.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _thrMomentumDumping.delete_SwigPyIterator

    def value(self):
        return _thrMomentumDumping.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _thrMomentumDumping.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _thrMomentumDumping.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _thrMomentumDumping.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _thrMomentumDumping.SwigPyIterator_equal(self, x)

    def copy(self):
        return _thrMomentumDumping.SwigPyIterator_copy(self)

    def next(self):
        return _thrMomentumDumping.SwigPyIterator_next(self)

    def __next__(self):
        return _thrMomentumDumping.SwigPyIterator___next__(self)

    def previous(self):
        return _thrMomentumDumping.SwigPyIterator_previous(self)

    def advance(self, n):
        return _thrMomentumDumping.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _thrMomentumDumping.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _thrMomentumDumping.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _thrMomentumDumping.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _thrMomentumDumping.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _thrMomentumDumping.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _thrMomentumDumping.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _thrMomentumDumping:
_thrMomentumDumping.SwigPyIterator_swigregister(SwigPyIterator)
MAX_LOGGING_LENGTH = _thrMomentumDumping.MAX_LOGGING_LENGTH
BSK_DEBUG = _thrMomentumDumping.BSK_DEBUG
BSK_INFORMATION = _thrMomentumDumping.BSK_INFORMATION
BSK_WARNING = _thrMomentumDumping.BSK_WARNING
BSK_ERROR = _thrMomentumDumping.BSK_ERROR
BSK_SILENT = _thrMomentumDumping.BSK_SILENT

def printDefaultLogLevel():
    return _thrMomentumDumping.printDefaultLogLevel()

def setDefaultLogLevel(logLevel):
    return _thrMomentumDumping.setDefaultLogLevel(logLevel)

def getDefaultLogLevel():
    return _thrMomentumDumping.getDefaultLogLevel()
class BasiliskError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _thrMomentumDumping.BasiliskError_swiginit(self, _thrMomentumDumping.new_BasiliskError(*args))
    __swig_destroy__ = _thrMomentumDumping.delete_BasiliskError

# Register BasiliskError in _thrMomentumDumping:
_thrMomentumDumping.BasiliskError_swigregister(BasiliskError)
cvar = _thrMomentumDumping.cvar

class BSKLogger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _thrMomentumDumping.BSKLogger_swiginit(self, _thrMomentumDumping.new_BSKLogger(*args))
    __swig_destroy__ = _thrMomentumDumping.delete_BSKLogger

    def setLogLevel(self, logLevel):
        return _thrMomentumDumping.BSKLogger_setLogLevel(self, logLevel)

    def printLogLevel(self):
        return _thrMomentumDumping.BSKLogger_printLogLevel(self)

    def getLogLevel(self):
        return _thrMomentumDumping.BSKLogger_getLogLevel(self)

    def bskLog(self, targetLevel, info):
        return _thrMomentumDumping.BSKLogger_bskLog(self, targetLevel, info)
    logLevelMap = property(_thrMomentumDumping.BSKLogger_logLevelMap_get, _thrMomentumDumping.BSKLogger_logLevelMap_set)

# Register BSKLogger in _thrMomentumDumping:
_thrMomentumDumping.BSKLogger_swigregister(BSKLogger)

def _BSKLogger():
    return _thrMomentumDumping._BSKLogger()

def _BSKLogger_d(arg1):
    return _thrMomentumDumping._BSKLogger_d(arg1)

def _printLogLevel(arg1):
    return _thrMomentumDumping._printLogLevel(arg1)

def _setLogLevel(arg1, arg2):
    return _thrMomentumDumping._setLogLevel(arg1, arg2)

def _bskLog(arg1, arg2, arg3):
    return _thrMomentumDumping._bskLog(arg1, arg2, arg3)
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _thrMomentumDumping.SysModel_swiginit(self, _thrMomentumDumping.new_SysModel(*args))
    __swig_destroy__ = _thrMomentumDumping.delete_SysModel

    def SelfInit(self):
        return _thrMomentumDumping.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _thrMomentumDumping.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _thrMomentumDumping.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _thrMomentumDumping.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_thrMomentumDumping.SysModel_ModelTag_get, _thrMomentumDumping.SysModel_ModelTag_set)
    CallCounts = property(_thrMomentumDumping.SysModel_CallCounts_get, _thrMomentumDumping.SysModel_CallCounts_set)
    RNGSeed = property(_thrMomentumDumping.SysModel_RNGSeed_get, _thrMomentumDumping.SysModel_RNGSeed_set)
    moduleID = property(_thrMomentumDumping.SysModel_moduleID_get, _thrMomentumDumping.SysModel_moduleID_set)

    def logger(self, variableNames: Union[str, Iterable[str]], recordingTime: int = 0):
        """Generate a logger from one or more variables in this model.

        Each variable must be public or private with a standard-named getter.
        For example, if you want to log the variable `foo` from the model
        `mod`, then `mod.foo` or `mod.getFoo()` must be available.

        Args:
            variableNames (Union[str, Iterable[str]]): The name or names
                of the variables to log.
            recordingTime (int, optional): The minimum interval between variable
                recordings. Defaults to 0.
        """
        if isinstance(variableNames, str):
            variableNames = [variableNames]

        loggingFunctions = {}
        for variableName in variableNames:
            if hasattr(self, variableName):
                loggingFunctions[variableName] = lambda _, variableName=variableName: getattr(self, variableName)
                continue

            getterStr = f"get{variableName[0].upper()}{variableName[1:]}"
            getter = getattr(self, getterStr, None)
            if getter is not None:
                loggingFunctions[variableName] = lambda _, getter=getter: getter()
                continue

            raise ValueError(f"Cannot log {variableName} as it is not a "
                f"public variable of {type(self).__name__} and the getter "
                f"{getterStr} does not exist.")

        from Basilisk.utilities import pythonVariableLogger
        return pythonVariableLogger.PythonVariableLogger(loggingFunctions, recordingTime)


# Register SysModel in _thrMomentumDumping:
_thrMomentumDumping.SysModel_swigregister(SysModel)
class thrMomentumDumpingConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    thrDumpingCounter = property(_thrMomentumDumping.thrMomentumDumpingConfig_thrDumpingCounter_get, _thrMomentumDumping.thrMomentumDumpingConfig_thrDumpingCounter_set)
    Delta_p = property(_thrMomentumDumping.thrMomentumDumpingConfig_Delta_p_get, _thrMomentumDumping.thrMomentumDumpingConfig_Delta_p_set)
    lastDeltaHInMsgTime = property(_thrMomentumDumping.thrMomentumDumpingConfig_lastDeltaHInMsgTime_get, _thrMomentumDumping.thrMomentumDumpingConfig_lastDeltaHInMsgTime_set)
    thrOnTimeRemaining = property(_thrMomentumDumping.thrMomentumDumpingConfig_thrOnTimeRemaining_get, _thrMomentumDumping.thrMomentumDumpingConfig_thrOnTimeRemaining_set)
    priorTime = property(_thrMomentumDumping.thrMomentumDumpingConfig_priorTime_get, _thrMomentumDumping.thrMomentumDumpingConfig_priorTime_set)
    numThrusters = property(_thrMomentumDumping.thrMomentumDumpingConfig_numThrusters_get, _thrMomentumDumping.thrMomentumDumpingConfig_numThrusters_set)
    thrMaxForce = property(_thrMomentumDumping.thrMomentumDumpingConfig_thrMaxForce_get, _thrMomentumDumping.thrMomentumDumpingConfig_thrMaxForce_set)
    maxCounterValue = property(_thrMomentumDumping.thrMomentumDumpingConfig_maxCounterValue_get, _thrMomentumDumping.thrMomentumDumpingConfig_maxCounterValue_set)
    thrMinFireTime = property(_thrMomentumDumping.thrMomentumDumpingConfig_thrMinFireTime_get, _thrMomentumDumping.thrMomentumDumpingConfig_thrMinFireTime_set)
    thrusterOnTimeOutMsg = property(_thrMomentumDumping.thrMomentumDumpingConfig_thrusterOnTimeOutMsg_get, _thrMomentumDumping.thrMomentumDumpingConfig_thrusterOnTimeOutMsg_set)
    thrusterImpulseInMsg = property(_thrMomentumDumping.thrMomentumDumpingConfig_thrusterImpulseInMsg_get, _thrMomentumDumping.thrMomentumDumpingConfig_thrusterImpulseInMsg_set)
    thrusterConfInMsg = property(_thrMomentumDumping.thrMomentumDumpingConfig_thrusterConfInMsg_get, _thrMomentumDumping.thrMomentumDumpingConfig_thrusterConfInMsg_set)
    deltaHInMsg = property(_thrMomentumDumping.thrMomentumDumpingConfig_deltaHInMsg_get, _thrMomentumDumping.thrMomentumDumpingConfig_deltaHInMsg_set)
    bskLogger = property(_thrMomentumDumping.thrMomentumDumpingConfig_bskLogger_get, _thrMomentumDumping.thrMomentumDumpingConfig_bskLogger_set)

    def createWrapper(self):
        return thrMomentumDumping(self)


    def __init__(self):
        _thrMomentumDumping.thrMomentumDumpingConfig_swiginit(self, _thrMomentumDumping.new_thrMomentumDumpingConfig())
    __swig_destroy__ = _thrMomentumDumping.delete_thrMomentumDumpingConfig

# Register thrMomentumDumpingConfig in _thrMomentumDumping:
_thrMomentumDumping.thrMomentumDumpingConfig_swigregister(thrMomentumDumpingConfig)
class thrMomentumDumping(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _thrMomentumDumping.thrMomentumDumping_swiginit(self, _thrMomentumDumping.new_thrMomentumDumping(*args))

        if (len(args)) > 0:
            args[0].thisown = False




    def SelfInit(self):
        return _thrMomentumDumping.thrMomentumDumping_SelfInit(self)

    def UpdateState(self, currentSimNanos):
        return _thrMomentumDumping.thrMomentumDumping_UpdateState(self, currentSimNanos)

    def Reset(self, currentSimNanos):
        return _thrMomentumDumping.thrMomentumDumping_Reset(self, currentSimNanos)

    def __deref__(self):
        return _thrMomentumDumping.thrMomentumDumping___deref__(self)

    def getConfig(self):
        return _thrMomentumDumping.thrMomentumDumping_getConfig(self)
    __swig_destroy__ = _thrMomentumDumping.delete_thrMomentumDumping
    thrDumpingCounter = property(_thrMomentumDumping.thrMomentumDumping_thrDumpingCounter_get, _thrMomentumDumping.thrMomentumDumping_thrDumpingCounter_set)
    Delta_p = property(_thrMomentumDumping.thrMomentumDumping_Delta_p_get, _thrMomentumDumping.thrMomentumDumping_Delta_p_set)
    lastDeltaHInMsgTime = property(_thrMomentumDumping.thrMomentumDumping_lastDeltaHInMsgTime_get, _thrMomentumDumping.thrMomentumDumping_lastDeltaHInMsgTime_set)
    thrOnTimeRemaining = property(_thrMomentumDumping.thrMomentumDumping_thrOnTimeRemaining_get, _thrMomentumDumping.thrMomentumDumping_thrOnTimeRemaining_set)
    priorTime = property(_thrMomentumDumping.thrMomentumDumping_priorTime_get, _thrMomentumDumping.thrMomentumDumping_priorTime_set)
    numThrusters = property(_thrMomentumDumping.thrMomentumDumping_numThrusters_get, _thrMomentumDumping.thrMomentumDumping_numThrusters_set)
    thrMaxForce = property(_thrMomentumDumping.thrMomentumDumping_thrMaxForce_get, _thrMomentumDumping.thrMomentumDumping_thrMaxForce_set)
    maxCounterValue = property(_thrMomentumDumping.thrMomentumDumping_maxCounterValue_get, _thrMomentumDumping.thrMomentumDumping_maxCounterValue_set)
    thrMinFireTime = property(_thrMomentumDumping.thrMomentumDumping_thrMinFireTime_get, _thrMomentumDumping.thrMomentumDumping_thrMinFireTime_set)
    thrusterOnTimeOutMsg = property(_thrMomentumDumping.thrMomentumDumping_thrusterOnTimeOutMsg_get, _thrMomentumDumping.thrMomentumDumping_thrusterOnTimeOutMsg_set)
    thrusterImpulseInMsg = property(_thrMomentumDumping.thrMomentumDumping_thrusterImpulseInMsg_get, _thrMomentumDumping.thrMomentumDumping_thrusterImpulseInMsg_set)
    thrusterConfInMsg = property(_thrMomentumDumping.thrMomentumDumping_thrusterConfInMsg_get, _thrMomentumDumping.thrMomentumDumping_thrusterConfInMsg_set)
    deltaHInMsg = property(_thrMomentumDumping.thrMomentumDumping_deltaHInMsg_get, _thrMomentumDumping.thrMomentumDumping_deltaHInMsg_set)
    bskLogger = property(_thrMomentumDumping.thrMomentumDumping_bskLogger_get, _thrMomentumDumping.thrMomentumDumping_bskLogger_set)

# Register thrMomentumDumping in _thrMomentumDumping:
_thrMomentumDumping.thrMomentumDumping_swigregister(thrMomentumDumping)
class THRArrayCmdForceMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    thrForce = property(_thrMomentumDumping.THRArrayCmdForceMsgPayload_thrForce_get, _thrMomentumDumping.THRArrayCmdForceMsgPayload_thrForce_set)

    def __init__(self):
        _thrMomentumDumping.THRArrayCmdForceMsgPayload_swiginit(self, _thrMomentumDumping.new_THRArrayCmdForceMsgPayload())
    __swig_destroy__ = _thrMomentumDumping.delete_THRArrayCmdForceMsgPayload

# Register THRArrayCmdForceMsgPayload in _thrMomentumDumping:
_thrMomentumDumping.THRArrayCmdForceMsgPayload_swigregister(THRArrayCmdForceMsgPayload)
class THRArrayOnTimeCmdMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    OnTimeRequest = property(_thrMomentumDumping.THRArrayOnTimeCmdMsgPayload_OnTimeRequest_get, _thrMomentumDumping.THRArrayOnTimeCmdMsgPayload_OnTimeRequest_set)

    def __init__(self):
        _thrMomentumDumping.THRArrayOnTimeCmdMsgPayload_swiginit(self, _thrMomentumDumping.new_THRArrayOnTimeCmdMsgPayload())
    __swig_destroy__ = _thrMomentumDumping.delete_THRArrayOnTimeCmdMsgPayload

# Register THRArrayOnTimeCmdMsgPayload in _thrMomentumDumping:
_thrMomentumDumping.THRArrayOnTimeCmdMsgPayload_swigregister(THRArrayOnTimeCmdMsgPayload)
class THRArrayConfigMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    numThrusters = property(_thrMomentumDumping.THRArrayConfigMsgPayload_numThrusters_get, _thrMomentumDumping.THRArrayConfigMsgPayload_numThrusters_set)
    thrusters = property(_thrMomentumDumping.THRArrayConfigMsgPayload_thrusters_get, _thrMomentumDumping.THRArrayConfigMsgPayload_thrusters_set)

    def __init__(self):
        _thrMomentumDumping.THRArrayConfigMsgPayload_swiginit(self, _thrMomentumDumping.new_THRArrayConfigMsgPayload())
    __swig_destroy__ = _thrMomentumDumping.delete_THRArrayConfigMsgPayload

# Register THRArrayConfigMsgPayload in _thrMomentumDumping:
_thrMomentumDumping.THRArrayConfigMsgPayload_swigregister(THRArrayConfigMsgPayload)
class CmdTorqueBodyMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    torqueRequestBody = property(_thrMomentumDumping.CmdTorqueBodyMsgPayload_torqueRequestBody_get, _thrMomentumDumping.CmdTorqueBodyMsgPayload_torqueRequestBody_set)

    def __init__(self):
        _thrMomentumDumping.CmdTorqueBodyMsgPayload_swiginit(self, _thrMomentumDumping.new_CmdTorqueBodyMsgPayload())
    __swig_destroy__ = _thrMomentumDumping.delete_CmdTorqueBodyMsgPayload

# Register CmdTorqueBodyMsgPayload in _thrMomentumDumping:
_thrMomentumDumping.CmdTorqueBodyMsgPayload_swigregister(CmdTorqueBodyMsgPayload)

import sys
protectAllClasses(sys.modules[__name__])


