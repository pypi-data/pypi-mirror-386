# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _swig_common_model
else:
    import _swig_common_model

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _swig_common_model.delete_SwigPyIterator

    def value(self):
        return _swig_common_model.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _swig_common_model.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _swig_common_model.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _swig_common_model.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _swig_common_model.SwigPyIterator_equal(self, x)

    def copy(self):
        return _swig_common_model.SwigPyIterator_copy(self)

    def next(self):
        return _swig_common_model.SwigPyIterator_next(self)

    def __next__(self):
        return _swig_common_model.SwigPyIterator___next__(self)

    def previous(self):
        return _swig_common_model.SwigPyIterator_previous(self)

    def advance(self, n):
        return _swig_common_model.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _swig_common_model.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _swig_common_model.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _swig_common_model.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _swig_common_model.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _swig_common_model.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _swig_common_model.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _swig_common_model:
_swig_common_model.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _swig_common_model.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _swig_common_model.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _swig_common_model.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _swig_common_model.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _swig_common_model.new_longArray(nelements)

def delete_longArray(ary):
    return _swig_common_model.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _swig_common_model.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _swig_common_model.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _swig_common_model.new_intArray(nelements)

def delete_intArray(ary):
    return _swig_common_model.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _swig_common_model.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _swig_common_model.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _swig_common_model.new_shortArray(nelements)

def delete_shortArray(ary):
    return _swig_common_model.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _swig_common_model.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _swig_common_model.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass



def new_boolArray(nelements):
    return _swig_common_model.new_boolArray(nelements)

def delete_boolArray(ary):
    return _swig_common_model.delete_boolArray(ary)

def boolArray_getitem(ary, index):
    return _swig_common_model.boolArray_getitem(ary, index)

def boolArray_setitem(ary, index, value):
    return _swig_common_model.boolArray_setitem(ary, index, value)
class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swig_common_model.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swig_common_model.IntVector___nonzero__(self)

    def __bool__(self):
        return _swig_common_model.IntVector___bool__(self)

    def __len__(self):
        return _swig_common_model.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _swig_common_model.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swig_common_model.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swig_common_model.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swig_common_model.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swig_common_model.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swig_common_model.IntVector___setitem__(self, *args)

    def pop(self):
        return _swig_common_model.IntVector_pop(self)

    def append(self, x):
        return _swig_common_model.IntVector_append(self, x)

    def empty(self):
        return _swig_common_model.IntVector_empty(self)

    def size(self):
        return _swig_common_model.IntVector_size(self)

    def swap(self, v):
        return _swig_common_model.IntVector_swap(self, v)

    def begin(self):
        return _swig_common_model.IntVector_begin(self)

    def end(self):
        return _swig_common_model.IntVector_end(self)

    def rbegin(self):
        return _swig_common_model.IntVector_rbegin(self)

    def rend(self):
        return _swig_common_model.IntVector_rend(self)

    def clear(self):
        return _swig_common_model.IntVector_clear(self)

    def get_allocator(self):
        return _swig_common_model.IntVector_get_allocator(self)

    def pop_back(self):
        return _swig_common_model.IntVector_pop_back(self)

    def erase(self, *args):
        return _swig_common_model.IntVector_erase(self, *args)

    def __init__(self, *args):
        _swig_common_model.IntVector_swiginit(self, _swig_common_model.new_IntVector(*args))

    def push_back(self, x):
        return _swig_common_model.IntVector_push_back(self, x)

    def front(self):
        return _swig_common_model.IntVector_front(self)

    def back(self):
        return _swig_common_model.IntVector_back(self)

    def assign(self, n, x):
        return _swig_common_model.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _swig_common_model.IntVector_resize(self, *args)

    def insert(self, *args):
        return _swig_common_model.IntVector_insert(self, *args)

    def reserve(self, n):
        return _swig_common_model.IntVector_reserve(self, n)

    def capacity(self):
        return _swig_common_model.IntVector_capacity(self)
    __swig_destroy__ = _swig_common_model.delete_IntVector

# Register IntVector in _swig_common_model:
_swig_common_model.IntVector_swigregister(IntVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swig_common_model.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swig_common_model.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _swig_common_model.DoubleVector___bool__(self)

    def __len__(self):
        return _swig_common_model.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _swig_common_model.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swig_common_model.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swig_common_model.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swig_common_model.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swig_common_model.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swig_common_model.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _swig_common_model.DoubleVector_pop(self)

    def append(self, x):
        return _swig_common_model.DoubleVector_append(self, x)

    def empty(self):
        return _swig_common_model.DoubleVector_empty(self)

    def size(self):
        return _swig_common_model.DoubleVector_size(self)

    def swap(self, v):
        return _swig_common_model.DoubleVector_swap(self, v)

    def begin(self):
        return _swig_common_model.DoubleVector_begin(self)

    def end(self):
        return _swig_common_model.DoubleVector_end(self)

    def rbegin(self):
        return _swig_common_model.DoubleVector_rbegin(self)

    def rend(self):
        return _swig_common_model.DoubleVector_rend(self)

    def clear(self):
        return _swig_common_model.DoubleVector_clear(self)

    def get_allocator(self):
        return _swig_common_model.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _swig_common_model.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _swig_common_model.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _swig_common_model.DoubleVector_swiginit(self, _swig_common_model.new_DoubleVector(*args))

    def push_back(self, x):
        return _swig_common_model.DoubleVector_push_back(self, x)

    def front(self):
        return _swig_common_model.DoubleVector_front(self)

    def back(self):
        return _swig_common_model.DoubleVector_back(self)

    def assign(self, n, x):
        return _swig_common_model.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _swig_common_model.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _swig_common_model.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _swig_common_model.DoubleVector_reserve(self, n)

    def capacity(self):
        return _swig_common_model.DoubleVector_capacity(self)
    __swig_destroy__ = _swig_common_model.delete_DoubleVector

# Register DoubleVector in _swig_common_model:
_swig_common_model.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swig_common_model.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swig_common_model.StringVector___nonzero__(self)

    def __bool__(self):
        return _swig_common_model.StringVector___bool__(self)

    def __len__(self):
        return _swig_common_model.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _swig_common_model.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swig_common_model.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swig_common_model.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swig_common_model.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swig_common_model.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swig_common_model.StringVector___setitem__(self, *args)

    def pop(self):
        return _swig_common_model.StringVector_pop(self)

    def append(self, x):
        return _swig_common_model.StringVector_append(self, x)

    def empty(self):
        return _swig_common_model.StringVector_empty(self)

    def size(self):
        return _swig_common_model.StringVector_size(self)

    def swap(self, v):
        return _swig_common_model.StringVector_swap(self, v)

    def begin(self):
        return _swig_common_model.StringVector_begin(self)

    def end(self):
        return _swig_common_model.StringVector_end(self)

    def rbegin(self):
        return _swig_common_model.StringVector_rbegin(self)

    def rend(self):
        return _swig_common_model.StringVector_rend(self)

    def clear(self):
        return _swig_common_model.StringVector_clear(self)

    def get_allocator(self):
        return _swig_common_model.StringVector_get_allocator(self)

    def pop_back(self):
        return _swig_common_model.StringVector_pop_back(self)

    def erase(self, *args):
        return _swig_common_model.StringVector_erase(self, *args)

    def __init__(self, *args):
        _swig_common_model.StringVector_swiginit(self, _swig_common_model.new_StringVector(*args))

    def push_back(self, x):
        return _swig_common_model.StringVector_push_back(self, x)

    def front(self):
        return _swig_common_model.StringVector_front(self)

    def back(self):
        return _swig_common_model.StringVector_back(self)

    def assign(self, n, x):
        return _swig_common_model.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _swig_common_model.StringVector_resize(self, *args)

    def insert(self, *args):
        return _swig_common_model.StringVector_insert(self, *args)

    def reserve(self, n):
        return _swig_common_model.StringVector_reserve(self, n)

    def capacity(self):
        return _swig_common_model.StringVector_capacity(self)
    __swig_destroy__ = _swig_common_model.delete_StringVector

# Register StringVector in _swig_common_model:
_swig_common_model.StringVector_swigregister(StringVector)
class StringSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swig_common_model.StringSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swig_common_model.StringSet___nonzero__(self)

    def __bool__(self):
        return _swig_common_model.StringSet___bool__(self)

    def __len__(self):
        return _swig_common_model.StringSet___len__(self)

    def append(self, x):
        return _swig_common_model.StringSet_append(self, x)

    def __contains__(self, x):
        return _swig_common_model.StringSet___contains__(self, x)

    def __getitem__(self, i):
        return _swig_common_model.StringSet___getitem__(self, i)

    def add(self, x):
        return _swig_common_model.StringSet_add(self, x)

    def discard(self, x):
        return _swig_common_model.StringSet_discard(self, x)

    def __init__(self, *args):
        _swig_common_model.StringSet_swiginit(self, _swig_common_model.new_StringSet(*args))

    def empty(self):
        return _swig_common_model.StringSet_empty(self)

    def size(self):
        return _swig_common_model.StringSet_size(self)

    def clear(self):
        return _swig_common_model.StringSet_clear(self)

    def swap(self, v):
        return _swig_common_model.StringSet_swap(self, v)

    def count(self, x):
        return _swig_common_model.StringSet_count(self, x)

    def begin(self):
        return _swig_common_model.StringSet_begin(self)

    def end(self):
        return _swig_common_model.StringSet_end(self)

    def rbegin(self):
        return _swig_common_model.StringSet_rbegin(self)

    def rend(self):
        return _swig_common_model.StringSet_rend(self)

    def erase(self, *args):
        return _swig_common_model.StringSet_erase(self, *args)

    def find(self, x):
        return _swig_common_model.StringSet_find(self, x)

    def lower_bound(self, x):
        return _swig_common_model.StringSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _swig_common_model.StringSet_upper_bound(self, x)

    def equal_range(self, x):
        return _swig_common_model.StringSet_equal_range(self, x)

    def insert(self, __x):
        return _swig_common_model.StringSet_insert(self, __x)
    __swig_destroy__ = _swig_common_model.delete_StringSet

# Register StringSet in _swig_common_model:
_swig_common_model.StringSet_swigregister(StringSet)
class intSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swig_common_model.intSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swig_common_model.intSet___nonzero__(self)

    def __bool__(self):
        return _swig_common_model.intSet___bool__(self)

    def __len__(self):
        return _swig_common_model.intSet___len__(self)

    def append(self, x):
        return _swig_common_model.intSet_append(self, x)

    def __contains__(self, x):
        return _swig_common_model.intSet___contains__(self, x)

    def __getitem__(self, i):
        return _swig_common_model.intSet___getitem__(self, i)

    def add(self, x):
        return _swig_common_model.intSet_add(self, x)

    def discard(self, x):
        return _swig_common_model.intSet_discard(self, x)

    def __init__(self, *args):
        _swig_common_model.intSet_swiginit(self, _swig_common_model.new_intSet(*args))

    def empty(self):
        return _swig_common_model.intSet_empty(self)

    def size(self):
        return _swig_common_model.intSet_size(self)

    def clear(self):
        return _swig_common_model.intSet_clear(self)

    def swap(self, v):
        return _swig_common_model.intSet_swap(self, v)

    def count(self, x):
        return _swig_common_model.intSet_count(self, x)

    def begin(self):
        return _swig_common_model.intSet_begin(self)

    def end(self):
        return _swig_common_model.intSet_end(self)

    def rbegin(self):
        return _swig_common_model.intSet_rbegin(self)

    def rend(self):
        return _swig_common_model.intSet_rend(self)

    def erase(self, *args):
        return _swig_common_model.intSet_erase(self, *args)

    def find(self, x):
        return _swig_common_model.intSet_find(self, x)

    def lower_bound(self, x):
        return _swig_common_model.intSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _swig_common_model.intSet_upper_bound(self, x)

    def equal_range(self, x):
        return _swig_common_model.intSet_equal_range(self, x)

    def insert(self, __x):
        return _swig_common_model.intSet_insert(self, __x)
    __swig_destroy__ = _swig_common_model.delete_intSet

# Register intSet in _swig_common_model:
_swig_common_model.intSet_swigregister(intSet)
class ConstCharVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swig_common_model.ConstCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swig_common_model.ConstCharVector___nonzero__(self)

    def __bool__(self):
        return _swig_common_model.ConstCharVector___bool__(self)

    def __len__(self):
        return _swig_common_model.ConstCharVector___len__(self)

    def __getslice__(self, i, j):
        return _swig_common_model.ConstCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swig_common_model.ConstCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swig_common_model.ConstCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swig_common_model.ConstCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swig_common_model.ConstCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swig_common_model.ConstCharVector___setitem__(self, *args)

    def pop(self):
        return _swig_common_model.ConstCharVector_pop(self)

    def append(self, x):
        return _swig_common_model.ConstCharVector_append(self, x)

    def empty(self):
        return _swig_common_model.ConstCharVector_empty(self)

    def size(self):
        return _swig_common_model.ConstCharVector_size(self)

    def swap(self, v):
        return _swig_common_model.ConstCharVector_swap(self, v)

    def begin(self):
        return _swig_common_model.ConstCharVector_begin(self)

    def end(self):
        return _swig_common_model.ConstCharVector_end(self)

    def rbegin(self):
        return _swig_common_model.ConstCharVector_rbegin(self)

    def rend(self):
        return _swig_common_model.ConstCharVector_rend(self)

    def clear(self):
        return _swig_common_model.ConstCharVector_clear(self)

    def get_allocator(self):
        return _swig_common_model.ConstCharVector_get_allocator(self)

    def pop_back(self):
        return _swig_common_model.ConstCharVector_pop_back(self)

    def erase(self, *args):
        return _swig_common_model.ConstCharVector_erase(self, *args)

    def __init__(self, *args):
        _swig_common_model.ConstCharVector_swiginit(self, _swig_common_model.new_ConstCharVector(*args))

    def push_back(self, x):
        return _swig_common_model.ConstCharVector_push_back(self, x)

    def front(self):
        return _swig_common_model.ConstCharVector_front(self)

    def back(self):
        return _swig_common_model.ConstCharVector_back(self)

    def assign(self, n, x):
        return _swig_common_model.ConstCharVector_assign(self, n, x)

    def resize(self, *args):
        return _swig_common_model.ConstCharVector_resize(self, *args)

    def insert(self, *args):
        return _swig_common_model.ConstCharVector_insert(self, *args)

    def reserve(self, n):
        return _swig_common_model.ConstCharVector_reserve(self, n)

    def capacity(self):
        return _swig_common_model.ConstCharVector_capacity(self)
    __swig_destroy__ = _swig_common_model.delete_ConstCharVector

# Register ConstCharVector in _swig_common_model:
_swig_common_model.ConstCharVector_swigregister(ConstCharVector)
class MultiArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swig_common_model.MultiArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swig_common_model.MultiArray___nonzero__(self)

    def __bool__(self):
        return _swig_common_model.MultiArray___bool__(self)

    def __len__(self):
        return _swig_common_model.MultiArray___len__(self)

    def __getslice__(self, i, j):
        return _swig_common_model.MultiArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swig_common_model.MultiArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swig_common_model.MultiArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swig_common_model.MultiArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swig_common_model.MultiArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swig_common_model.MultiArray___setitem__(self, *args)

    def pop(self):
        return _swig_common_model.MultiArray_pop(self)

    def append(self, x):
        return _swig_common_model.MultiArray_append(self, x)

    def empty(self):
        return _swig_common_model.MultiArray_empty(self)

    def size(self):
        return _swig_common_model.MultiArray_size(self)

    def swap(self, v):
        return _swig_common_model.MultiArray_swap(self, v)

    def begin(self):
        return _swig_common_model.MultiArray_begin(self)

    def end(self):
        return _swig_common_model.MultiArray_end(self)

    def rbegin(self):
        return _swig_common_model.MultiArray_rbegin(self)

    def rend(self):
        return _swig_common_model.MultiArray_rend(self)

    def clear(self):
        return _swig_common_model.MultiArray_clear(self)

    def get_allocator(self):
        return _swig_common_model.MultiArray_get_allocator(self)

    def pop_back(self):
        return _swig_common_model.MultiArray_pop_back(self)

    def erase(self, *args):
        return _swig_common_model.MultiArray_erase(self, *args)

    def __init__(self, *args):
        _swig_common_model.MultiArray_swiginit(self, _swig_common_model.new_MultiArray(*args))

    def push_back(self, x):
        return _swig_common_model.MultiArray_push_back(self, x)

    def front(self):
        return _swig_common_model.MultiArray_front(self)

    def back(self):
        return _swig_common_model.MultiArray_back(self)

    def assign(self, n, x):
        return _swig_common_model.MultiArray_assign(self, n, x)

    def resize(self, *args):
        return _swig_common_model.MultiArray_resize(self, *args)

    def insert(self, *args):
        return _swig_common_model.MultiArray_insert(self, *args)

    def reserve(self, n):
        return _swig_common_model.MultiArray_reserve(self, n)

    def capacity(self):
        return _swig_common_model.MultiArray_capacity(self)
    __swig_destroy__ = _swig_common_model.delete_MultiArray

# Register MultiArray in _swig_common_model:
_swig_common_model.MultiArray_swigregister(MultiArray)
class MultiArray3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swig_common_model.MultiArray3d_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swig_common_model.MultiArray3d___nonzero__(self)

    def __bool__(self):
        return _swig_common_model.MultiArray3d___bool__(self)

    def __len__(self):
        return _swig_common_model.MultiArray3d___len__(self)

    def __getslice__(self, i, j):
        return _swig_common_model.MultiArray3d___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swig_common_model.MultiArray3d___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swig_common_model.MultiArray3d___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swig_common_model.MultiArray3d___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swig_common_model.MultiArray3d___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swig_common_model.MultiArray3d___setitem__(self, *args)

    def pop(self):
        return _swig_common_model.MultiArray3d_pop(self)

    def append(self, x):
        return _swig_common_model.MultiArray3d_append(self, x)

    def empty(self):
        return _swig_common_model.MultiArray3d_empty(self)

    def size(self):
        return _swig_common_model.MultiArray3d_size(self)

    def swap(self, v):
        return _swig_common_model.MultiArray3d_swap(self, v)

    def begin(self):
        return _swig_common_model.MultiArray3d_begin(self)

    def end(self):
        return _swig_common_model.MultiArray3d_end(self)

    def rbegin(self):
        return _swig_common_model.MultiArray3d_rbegin(self)

    def rend(self):
        return _swig_common_model.MultiArray3d_rend(self)

    def clear(self):
        return _swig_common_model.MultiArray3d_clear(self)

    def get_allocator(self):
        return _swig_common_model.MultiArray3d_get_allocator(self)

    def pop_back(self):
        return _swig_common_model.MultiArray3d_pop_back(self)

    def erase(self, *args):
        return _swig_common_model.MultiArray3d_erase(self, *args)

    def __init__(self, *args):
        _swig_common_model.MultiArray3d_swiginit(self, _swig_common_model.new_MultiArray3d(*args))

    def push_back(self, x):
        return _swig_common_model.MultiArray3d_push_back(self, x)

    def front(self):
        return _swig_common_model.MultiArray3d_front(self)

    def back(self):
        return _swig_common_model.MultiArray3d_back(self)

    def assign(self, n, x):
        return _swig_common_model.MultiArray3d_assign(self, n, x)

    def resize(self, *args):
        return _swig_common_model.MultiArray3d_resize(self, *args)

    def insert(self, *args):
        return _swig_common_model.MultiArray3d_insert(self, *args)

    def reserve(self, n):
        return _swig_common_model.MultiArray3d_reserve(self, n)

    def capacity(self):
        return _swig_common_model.MultiArray3d_capacity(self)
    __swig_destroy__ = _swig_common_model.delete_MultiArray3d

# Register MultiArray3d in _swig_common_model:
_swig_common_model.MultiArray3d_swigregister(MultiArray3d)

