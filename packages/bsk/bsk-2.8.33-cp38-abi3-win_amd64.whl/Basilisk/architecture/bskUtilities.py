# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _bskUtilities
else:
    import _bskUtilities

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bskUtilities.delete_SwigPyIterator

    def value(self):
        return _bskUtilities.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _bskUtilities.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _bskUtilities.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _bskUtilities.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _bskUtilities.SwigPyIterator_equal(self, x)

    def copy(self):
        return _bskUtilities.SwigPyIterator_copy(self)

    def next(self):
        return _bskUtilities.SwigPyIterator_next(self)

    def __next__(self):
        return _bskUtilities.SwigPyIterator___next__(self)

    def previous(self):
        return _bskUtilities.SwigPyIterator_previous(self)

    def advance(self, n):
        return _bskUtilities.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _bskUtilities.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _bskUtilities.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _bskUtilities.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _bskUtilities.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _bskUtilities.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _bskUtilities.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _bskUtilities:
_bskUtilities.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _bskUtilities.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _bskUtilities.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _bskUtilities.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _bskUtilities.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _bskUtilities.new_longArray(nelements)

def delete_longArray(ary):
    return _bskUtilities.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _bskUtilities.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _bskUtilities.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _bskUtilities.new_intArray(nelements)

def delete_intArray(ary):
    return _bskUtilities.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _bskUtilities.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _bskUtilities.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _bskUtilities.new_shortArray(nelements)

def delete_shortArray(ary):
    return _bskUtilities.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _bskUtilities.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _bskUtilities.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


MAX_CIRCLE_NUM = _bskUtilities.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _bskUtilities.MAX_LIMB_PNTS
MAX_EFF_CNT = _bskUtilities.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _bskUtilities.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _bskUtilities.MAX_ST_VEH_COUNT
NANO2SEC = _bskUtilities.NANO2SEC
SEC2NANO = _bskUtilities.SEC2NANO
SEC2HOUR = _bskUtilities.SEC2HOUR

def nanoToSec(nanos):
    return _bskUtilities.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _bskUtilities.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _bskUtilities.secToNano(seconds)
BOOL_FALSE = _bskUtilities.BOOL_FALSE
BOOL_TRUE = _bskUtilities.BOOL_TRUE
AVAILABLE = _bskUtilities.AVAILABLE
UNAVAILABLE = _bskUtilities.UNAVAILABLE
BalancedWheels = _bskUtilities.BalancedWheels
JitterSimple = _bskUtilities.JitterSimple
JitterFullyCoupled = _bskUtilities.JitterFullyCoupled
class Eigen3dVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _bskUtilities.Eigen3dVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _bskUtilities.Eigen3dVector___nonzero__(self)

    def __bool__(self):
        return _bskUtilities.Eigen3dVector___bool__(self)

    def __len__(self):
        return _bskUtilities.Eigen3dVector___len__(self)

    def __getslice__(self, i, j):
        return _bskUtilities.Eigen3dVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _bskUtilities.Eigen3dVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _bskUtilities.Eigen3dVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _bskUtilities.Eigen3dVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _bskUtilities.Eigen3dVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _bskUtilities.Eigen3dVector___setitem__(self, *args)

    def pop(self):
        return _bskUtilities.Eigen3dVector_pop(self)

    def append(self, x):
        return _bskUtilities.Eigen3dVector_append(self, x)

    def empty(self):
        return _bskUtilities.Eigen3dVector_empty(self)

    def size(self):
        return _bskUtilities.Eigen3dVector_size(self)

    def swap(self, v):
        return _bskUtilities.Eigen3dVector_swap(self, v)

    def begin(self):
        return _bskUtilities.Eigen3dVector_begin(self)

    def end(self):
        return _bskUtilities.Eigen3dVector_end(self)

    def rbegin(self):
        return _bskUtilities.Eigen3dVector_rbegin(self)

    def rend(self):
        return _bskUtilities.Eigen3dVector_rend(self)

    def clear(self):
        return _bskUtilities.Eigen3dVector_clear(self)

    def get_allocator(self):
        return _bskUtilities.Eigen3dVector_get_allocator(self)

    def pop_back(self):
        return _bskUtilities.Eigen3dVector_pop_back(self)

    def erase(self, *args):
        return _bskUtilities.Eigen3dVector_erase(self, *args)

    def __init__(self, *args):
        _bskUtilities.Eigen3dVector_swiginit(self, _bskUtilities.new_Eigen3dVector(*args))

    def push_back(self, x):
        return _bskUtilities.Eigen3dVector_push_back(self, x)

    def front(self):
        return _bskUtilities.Eigen3dVector_front(self)

    def back(self):
        return _bskUtilities.Eigen3dVector_back(self)

    def assign(self, n, x):
        return _bskUtilities.Eigen3dVector_assign(self, n, x)

    def resize(self, *args):
        return _bskUtilities.Eigen3dVector_resize(self, *args)

    def insert(self, *args):
        return _bskUtilities.Eigen3dVector_insert(self, *args)

    def reserve(self, n):
        return _bskUtilities.Eigen3dVector_reserve(self, n)

    def capacity(self):
        return _bskUtilities.Eigen3dVector_capacity(self)
    __swig_destroy__ = _bskUtilities.delete_Eigen3dVector

# Register Eigen3dVector in _bskUtilities:
_bskUtilities.Eigen3dVector_swigregister(Eigen3dVector)

import sys
protectAllClasses(sys.modules[__name__])


