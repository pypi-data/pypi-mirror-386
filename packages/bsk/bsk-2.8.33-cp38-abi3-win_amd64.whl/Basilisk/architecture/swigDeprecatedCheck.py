# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _swigDeprecatedCheck
else:
    import _swigDeprecatedCheck

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import sys
from Basilisk.utilities import deprecated

class _DeprecatedWrapper:
    def __init__(self, target, aliasName=None,
                               targetName=None,
                               deprecatedFields=None,
                               typeConversion=None,
                               removalDate=None):
        self._target = target
        self._aliasName = aliasName
        self._targetName = targetName
        self._deprecatedFields = deprecatedFields or {}
        self._typeConversion = typeConversion
        self._removalDate = removalDate

    def __call__(self, *args, **kwargs):
        if self._aliasName:
            deprecated.deprecationWarn(self._aliasName, self._removalDate, f"Use '{self._targetName}' instead.")

        instance = self._target(*args, **kwargs)

        for old_attr, new_attr in self._deprecatedFields.items():
            if hasattr(instance, new_attr):  # Ensure new attribute exists
                _inject_deprecated_property(instance, old_attr, new_attr, self._removalDate, self._typeConversion)

        return instance  # Always return the original instance

def _inject_deprecated_property(instance, old_attr, new_attr, removal_date, typeConversion=None):
    def getter(self):
        deprecated.deprecationWarn(old_attr, removal_date, f"Use '{new_attr}' instead.")
        return getattr(self, new_attr)

    def setter(self, value):
        deprecated.deprecationWarn(old_attr, removal_date, f"Use '{new_attr}' instead.")
# Conduct type conversions if new variable type is changed
        if typeConversion and typeConversion == "scalarTo3D":
            setattr(self, new_attr, [value, value, value])
        elif typeConversion and typeConversion == "useDefaultDouble":
            setattr(self, new_attr, -1.0)
        else:
            setattr(self, new_attr, value)

    setattr(instance.__class__, old_attr, property(getter, setter))



def test1(arg1, arg2):

    from Basilisk.utilities import deprecated
    deprecated.deprecationWarn(f"{__name__}.test1".replace("::","."), "2023/01/01", "test1 Msg")


    return _swigDeprecatedCheck.test1(arg1, arg2)
class SwigDeprecatedTestClass(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def test2(self):

        from Basilisk.utilities import deprecated
        deprecated.deprecationWarn(f"{__name__}.SwigDeprecatedTestClass::test2".replace("::","."), "2023/01/01", "test2 Msg")


        return _swigDeprecatedCheck.SwigDeprecatedTestClass_test2(self)


    def test3(self):

        from Basilisk.utilities import deprecated
        deprecated.deprecationWarn(f"{__name__}.SwigDeprecatedTestClass::test3".replace("::","."), "2099/01/01", "test3 Msg")


        return _swigDeprecatedCheck.SwigDeprecatedTestClass_test3(self)

    test4 = property(_swigDeprecatedCheck.SwigDeprecatedTestClass_test4_get, _swigDeprecatedCheck.SwigDeprecatedTestClass_test4_set)

    from Basilisk.utilities import deprecated
    test4 = deprecated.DeprecatedProperty("2099/01/01", "test4 Msg", test4)


    def __init__(self):

        from Basilisk.utilities import deprecated
        deprecated.deprecationWarn(f"{__name__}.SwigDeprecatedTestClass::SwigDeprecatedTestClass".replace("::","."), "2099/01/01", "class Msg")


        _swigDeprecatedCheck.SwigDeprecatedTestClass_swiginit(self, _swigDeprecatedCheck.new_SwigDeprecatedTestClass())
    __swig_destroy__ = _swigDeprecatedCheck.delete_SwigDeprecatedTestClass

# Register SwigDeprecatedTestClass in _swigDeprecatedCheck:
_swigDeprecatedCheck.SwigDeprecatedTestClass_swigregister(SwigDeprecatedTestClass)

