# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _EpochMsgPayload
else:
    import _EpochMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _EpochMsgPayload.delete_SwigPyIterator

    def value(self):
        return _EpochMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _EpochMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _EpochMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _EpochMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _EpochMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _EpochMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _EpochMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _EpochMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _EpochMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _EpochMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _EpochMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _EpochMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _EpochMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _EpochMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _EpochMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _EpochMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _EpochMsgPayload:
_EpochMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _EpochMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _EpochMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _EpochMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _EpochMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _EpochMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _EpochMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _EpochMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _EpochMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _EpochMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _EpochMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _EpochMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _EpochMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _EpochMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _EpochMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _EpochMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _EpochMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _EpochMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _EpochMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _EpochMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _EpochMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _EpochMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _EpochMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _EpochMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _EpochMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _EpochMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _EpochMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _EpochMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _EpochMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _EpochMsgPayload.TimeVector_empty(self)

    def size(self):
        return _EpochMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _EpochMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _EpochMsgPayload.TimeVector_begin(self)

    def end(self):
        return _EpochMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _EpochMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _EpochMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _EpochMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _EpochMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _EpochMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _EpochMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _EpochMsgPayload.TimeVector_swiginit(self, _EpochMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _EpochMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _EpochMsgPayload.TimeVector_front(self)

    def back(self):
        return _EpochMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _EpochMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _EpochMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _EpochMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _EpochMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _EpochMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _EpochMsgPayload.delete_TimeVector

# Register TimeVector in _EpochMsgPayload:
_EpochMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _EpochMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _EpochMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _EpochMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _EpochMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _EpochMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _EpochMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _EpochMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _EpochMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _EpochMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _EpochMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _EpochMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _EpochMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _EpochMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _EpochMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _EpochMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _EpochMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _EpochMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _EpochMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _EpochMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _EpochMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _EpochMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _EpochMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _EpochMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _EpochMsgPayload.DoubleVector_swiginit(self, _EpochMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _EpochMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _EpochMsgPayload.DoubleVector_front(self)

    def back(self):
        return _EpochMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _EpochMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _EpochMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _EpochMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _EpochMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _EpochMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _EpochMsgPayload.delete_DoubleVector

# Register DoubleVector in _EpochMsgPayload:
_EpochMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _EpochMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _EpochMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _EpochMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _EpochMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _EpochMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _EpochMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _EpochMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _EpochMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _EpochMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _EpochMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _EpochMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _EpochMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _EpochMsgPayload.StringVector_empty(self)

    def size(self):
        return _EpochMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _EpochMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _EpochMsgPayload.StringVector_begin(self)

    def end(self):
        return _EpochMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _EpochMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _EpochMsgPayload.StringVector_rend(self)

    def clear(self):
        return _EpochMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _EpochMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _EpochMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _EpochMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _EpochMsgPayload.StringVector_swiginit(self, _EpochMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _EpochMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _EpochMsgPayload.StringVector_front(self)

    def back(self):
        return _EpochMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _EpochMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _EpochMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _EpochMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _EpochMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _EpochMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _EpochMsgPayload.delete_StringVector

# Register StringVector in _EpochMsgPayload:
_EpochMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _EpochMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _EpochMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _EpochMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _EpochMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _EpochMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _EpochMsgPayload.NANO2SEC
SEC2NANO = _EpochMsgPayload.SEC2NANO
SEC2HOUR = _EpochMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _EpochMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _EpochMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _EpochMsgPayload.secToNano(seconds)
BOOL_FALSE = _EpochMsgPayload.BOOL_FALSE
BOOL_TRUE = _EpochMsgPayload.BOOL_TRUE
AVAILABLE = _EpochMsgPayload.AVAILABLE
UNAVAILABLE = _EpochMsgPayload.UNAVAILABLE
BalancedWheels = _EpochMsgPayload.BalancedWheels
JitterSimple = _EpochMsgPayload.JitterSimple
JitterFullyCoupled = _EpochMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _EpochMsgPayload.SysModel_swiginit(self, _EpochMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _EpochMsgPayload.delete_SysModel

    def SelfInit(self):
        return _EpochMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _EpochMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _EpochMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _EpochMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_EpochMsgPayload.SysModel_ModelTag_get, _EpochMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_EpochMsgPayload.SysModel_CallCounts_get, _EpochMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_EpochMsgPayload.SysModel_RNGSeed_get, _EpochMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_EpochMsgPayload.SysModel_moduleID_get, _EpochMsgPayload.SysModel_moduleID_set)

# Register SysModel in _EpochMsgPayload:
_EpochMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _EpochMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _EpochMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _EpochMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _EpochMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _EpochMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _EpochMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _EpochMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _EpochMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _EpochMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _EpochMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _EpochMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _EpochMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class EpochMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    year = property(_EpochMsgPayload.EpochMsgPayload_year_get, _EpochMsgPayload.EpochMsgPayload_year_set)
    month = property(_EpochMsgPayload.EpochMsgPayload_month_get, _EpochMsgPayload.EpochMsgPayload_month_set)
    day = property(_EpochMsgPayload.EpochMsgPayload_day_get, _EpochMsgPayload.EpochMsgPayload_day_set)
    hours = property(_EpochMsgPayload.EpochMsgPayload_hours_get, _EpochMsgPayload.EpochMsgPayload_hours_set)
    minutes = property(_EpochMsgPayload.EpochMsgPayload_minutes_get, _EpochMsgPayload.EpochMsgPayload_minutes_set)
    seconds = property(_EpochMsgPayload.EpochMsgPayload_seconds_get, _EpochMsgPayload.EpochMsgPayload_seconds_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _EpochMsgPayload.EpochMsgPayload_swiginit(self, _EpochMsgPayload.new_EpochMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _EpochMsgPayload.delete_EpochMsgPayload

# Register EpochMsgPayload in _EpochMsgPayload:
_EpochMsgPayload.EpochMsgPayload_swigregister(EpochMsgPayload)

def _pprint_EpochMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[EpochMsgPayload.__repr__] = _pprint_EpochMsgPayload

class EpochMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_EpochMsgPayload.EpochMsgReader_bskLogger_get, _EpochMsgPayload.EpochMsgReader_bskLogger_set)
    zeroMsgPayload = property(_EpochMsgPayload.EpochMsgReader_zeroMsgPayload_get, _EpochMsgPayload.EpochMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _EpochMsgPayload.EpochMsgReader_swiginit(self, _EpochMsgPayload.new_EpochMsgReader(*args))

    def __call__(self):
        return _EpochMsgPayload.EpochMsgReader___call__(self)

    def isLinked(self):
        return _EpochMsgPayload.EpochMsgReader_isLinked(self)

    def isWritten(self):
        return _EpochMsgPayload.EpochMsgReader_isWritten(self)

    def timeWritten(self):
        return _EpochMsgPayload.EpochMsgReader_timeWritten(self)

    def moduleID(self):
        return _EpochMsgPayload.EpochMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _EpochMsgPayload.EpochMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _EpochMsgPayload.EpochMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _EpochMsgPayload.EpochMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _EpochMsgPayload.EpochMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _EpochMsgPayload.EpochMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _EpochMsgPayload.EpochMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _EpochMsgPayload.EpochMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _EpochMsgPayload.EpochMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _EpochMsgPayload.EpochMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _EpochMsgPayload.EpochMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == EpochMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.EpochMsgPayload import EpochMsg_C
            if type(source) == EpochMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<EpochMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == EpochMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.EpochMsgPayload import EpochMsg_C
        except ImportError:
            return 0

        if type(source) == EpochMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _EpochMsgPayload.delete_EpochMsgReader

# Register EpochMsgReader in _EpochMsgPayload:
_EpochMsgPayload.EpochMsgReader_swigregister(EpochMsgReader)
class EpochMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _EpochMsgPayload.EpochMsgWriter_swiginit(self, _EpochMsgPayload.new_EpochMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _EpochMsgPayload.EpochMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _EpochMsgPayload.delete_EpochMsgWriter

# Register EpochMsgWriter in _EpochMsgPayload:
_EpochMsgPayload.EpochMsgWriter_swigregister(EpochMsgWriter)
class EpochMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_EpochMsgPayload.EpochMsg_write_get, _EpochMsgPayload.EpochMsg_write_set)

    def addSubscriber(self):
        return _EpochMsgPayload.EpochMsg_addSubscriber(self)

    def addAuthor(self):
        return _EpochMsgPayload.EpochMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _EpochMsgPayload.EpochMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _EpochMsgPayload.EpochMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _EpochMsgPayload.EpochMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_EpochMsgPayload.EpochMsg_zeroMsgPayload_get, _EpochMsgPayload.EpochMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _EpochMsgPayload.EpochMsg_isLinked(self)

    def getPayloadSize(self):
        return _EpochMsgPayload.EpochMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _EpochMsgPayload.EpochMsg_swiginit(self, _EpochMsgPayload.new_EpochMsg())
    __swig_destroy__ = _EpochMsgPayload.delete_EpochMsg

# Register EpochMsg in _EpochMsgPayload:
_EpochMsgPayload.EpochMsg_swigregister(EpochMsg)
class EpochMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _EpochMsgPayload.EpochMsgRecorder_swiginit(self, _EpochMsgPayload.new_EpochMsgRecorder(*args))
    __swig_destroy__ = _EpochMsgPayload.delete_EpochMsgRecorder

    def SelfInit(self):
        return _EpochMsgPayload.EpochMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _EpochMsgPayload.EpochMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _EpochMsgPayload.EpochMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _EpochMsgPayload.EpochMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _EpochMsgPayload.EpochMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _EpochMsgPayload.EpochMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _EpochMsgPayload.EpochMsgRecorder___record_vector(self)

    def size(self):
        return _EpochMsgPayload.EpochMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _EpochMsgPayload.EpochMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _EpochMsgPayload.EpochMsgRecorder_clear(self)
    bskLogger = property(_EpochMsgPayload.EpochMsgRecorder_bskLogger_get, _EpochMsgPayload.EpochMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _EpochMsgPayload.EpochMsgRecorder_updateTimeInterval(self, timeDiff)

    def _year_array(self):
        return _EpochMsgPayload.EpochMsgRecorder__year_array(self)

    @property
    def year(self):
        return self._year_array()


    def _month_array(self):
        return _EpochMsgPayload.EpochMsgRecorder__month_array(self)

    @property
    def month(self):
        return self._month_array()


    def _day_array(self):
        return _EpochMsgPayload.EpochMsgRecorder__day_array(self)

    @property
    def day(self):
        return self._day_array()


    def _hours_array(self):
        return _EpochMsgPayload.EpochMsgRecorder__hours_array(self)

    @property
    def hours(self):
        return self._hours_array()


    def _minutes_array(self):
        return _EpochMsgPayload.EpochMsgRecorder__minutes_array(self)

    @property
    def minutes(self):
        return self._minutes_array()


    def _seconds_array(self):
        return _EpochMsgPayload.EpochMsgRecorder__seconds_array(self)

    @property
    def seconds(self):
        return self._seconds_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register EpochMsgRecorder in _EpochMsgPayload:
_EpochMsgPayload.EpochMsgRecorder_swigregister(EpochMsgRecorder)
class EpochMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _EpochMsgPayload.EpochMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _EpochMsgPayload.EpochMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _EpochMsgPayload.EpochMsgPayloadVector___bool__(self)

    def __len__(self):
        return _EpochMsgPayload.EpochMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _EpochMsgPayload.EpochMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _EpochMsgPayload.EpochMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _EpochMsgPayload.EpochMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _EpochMsgPayload.EpochMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _EpochMsgPayload.EpochMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _EpochMsgPayload.EpochMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _EpochMsgPayload.EpochMsgPayloadVector_pop(self)

    def append(self, x):
        return _EpochMsgPayload.EpochMsgPayloadVector_append(self, x)

    def empty(self):
        return _EpochMsgPayload.EpochMsgPayloadVector_empty(self)

    def size(self):
        return _EpochMsgPayload.EpochMsgPayloadVector_size(self)

    def swap(self, v):
        return _EpochMsgPayload.EpochMsgPayloadVector_swap(self, v)

    def begin(self):
        return _EpochMsgPayload.EpochMsgPayloadVector_begin(self)

    def end(self):
        return _EpochMsgPayload.EpochMsgPayloadVector_end(self)

    def rbegin(self):
        return _EpochMsgPayload.EpochMsgPayloadVector_rbegin(self)

    def rend(self):
        return _EpochMsgPayload.EpochMsgPayloadVector_rend(self)

    def clear(self):
        return _EpochMsgPayload.EpochMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _EpochMsgPayload.EpochMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _EpochMsgPayload.EpochMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _EpochMsgPayload.EpochMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _EpochMsgPayload.EpochMsgPayloadVector_swiginit(self, _EpochMsgPayload.new_EpochMsgPayloadVector(*args))

    def push_back(self, x):
        return _EpochMsgPayload.EpochMsgPayloadVector_push_back(self, x)

    def front(self):
        return _EpochMsgPayload.EpochMsgPayloadVector_front(self)

    def back(self):
        return _EpochMsgPayload.EpochMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _EpochMsgPayload.EpochMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _EpochMsgPayload.EpochMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _EpochMsgPayload.EpochMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _EpochMsgPayload.EpochMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _EpochMsgPayload.EpochMsgPayloadVector_capacity(self)

    def get_all(self):
        return _EpochMsgPayload.EpochMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _EpochMsgPayload.delete_EpochMsgPayloadVector

# Register EpochMsgPayloadVector in _EpochMsgPayload:
_EpochMsgPayload.EpochMsgPayloadVector_swigregister(EpochMsgPayloadVector)
class EpochMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _EpochMsgPayload.EpochMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _EpochMsgPayload.EpochMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _EpochMsgPayload.EpochMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _EpochMsgPayload.EpochMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _EpochMsgPayload.EpochMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _EpochMsgPayload.EpochMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _EpochMsgPayload.EpochMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _EpochMsgPayload.EpochMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _EpochMsgPayload.EpochMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _EpochMsgPayload.EpochMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _EpochMsgPayload.EpochMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _EpochMsgPayload.EpochMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _EpochMsgPayload.EpochMsgOutMsgsVector_empty(self)

    def size(self):
        return _EpochMsgPayload.EpochMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _EpochMsgPayload.EpochMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _EpochMsgPayload.EpochMsgOutMsgsVector_begin(self)

    def end(self):
        return _EpochMsgPayload.EpochMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _EpochMsgPayload.EpochMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _EpochMsgPayload.EpochMsgOutMsgsVector_rend(self)

    def clear(self):
        return _EpochMsgPayload.EpochMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _EpochMsgPayload.EpochMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _EpochMsgPayload.EpochMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _EpochMsgPayload.EpochMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _EpochMsgPayload.EpochMsgOutMsgsVector_swiginit(self, _EpochMsgPayload.new_EpochMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _EpochMsgPayload.EpochMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _EpochMsgPayload.EpochMsgOutMsgsVector_front(self)

    def back(self):
        return _EpochMsgPayload.EpochMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _EpochMsgPayload.EpochMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _EpochMsgPayload.EpochMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _EpochMsgPayload.EpochMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _EpochMsgPayload.EpochMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _EpochMsgPayload.EpochMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _EpochMsgPayload.delete_EpochMsgOutMsgsVector

# Register EpochMsgOutMsgsVector in _EpochMsgPayload:
_EpochMsgPayload.EpochMsgOutMsgsVector_swigregister(EpochMsgOutMsgsVector)
class EpochMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _EpochMsgPayload.EpochMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _EpochMsgPayload.EpochMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _EpochMsgPayload.EpochMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _EpochMsgPayload.EpochMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _EpochMsgPayload.EpochMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _EpochMsgPayload.EpochMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _EpochMsgPayload.EpochMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _EpochMsgPayload.EpochMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _EpochMsgPayload.EpochMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _EpochMsgPayload.EpochMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _EpochMsgPayload.EpochMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _EpochMsgPayload.EpochMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _EpochMsgPayload.EpochMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _EpochMsgPayload.EpochMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _EpochMsgPayload.EpochMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _EpochMsgPayload.EpochMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _EpochMsgPayload.EpochMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _EpochMsgPayload.EpochMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _EpochMsgPayload.EpochMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _EpochMsgPayload.EpochMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _EpochMsgPayload.EpochMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _EpochMsgPayload.EpochMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _EpochMsgPayload.EpochMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _EpochMsgPayload.EpochMsgOutMsgsPtrVector_swiginit(self, _EpochMsgPayload.new_EpochMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _EpochMsgPayload.EpochMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _EpochMsgPayload.EpochMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _EpochMsgPayload.EpochMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _EpochMsgPayload.EpochMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _EpochMsgPayload.EpochMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _EpochMsgPayload.EpochMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _EpochMsgPayload.EpochMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _EpochMsgPayload.EpochMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _EpochMsgPayload.delete_EpochMsgOutMsgsPtrVector

# Register EpochMsgOutMsgsPtrVector in _EpochMsgPayload:
_EpochMsgPayload.EpochMsgOutMsgsPtrVector_swigregister(EpochMsgOutMsgsPtrVector)
class EpochMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _EpochMsgPayload.EpochMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _EpochMsgPayload.EpochMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _EpochMsgPayload.EpochMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _EpochMsgPayload.EpochMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _EpochMsgPayload.EpochMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _EpochMsgPayload.EpochMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _EpochMsgPayload.EpochMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _EpochMsgPayload.EpochMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _EpochMsgPayload.EpochMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _EpochMsgPayload.EpochMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _EpochMsgPayload.EpochMsgInMsgsVector_pop(self)

    def append(self, x):
        return _EpochMsgPayload.EpochMsgInMsgsVector_append(self, x)

    def empty(self):
        return _EpochMsgPayload.EpochMsgInMsgsVector_empty(self)

    def size(self):
        return _EpochMsgPayload.EpochMsgInMsgsVector_size(self)

    def swap(self, v):
        return _EpochMsgPayload.EpochMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _EpochMsgPayload.EpochMsgInMsgsVector_begin(self)

    def end(self):
        return _EpochMsgPayload.EpochMsgInMsgsVector_end(self)

    def rbegin(self):
        return _EpochMsgPayload.EpochMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _EpochMsgPayload.EpochMsgInMsgsVector_rend(self)

    def clear(self):
        return _EpochMsgPayload.EpochMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _EpochMsgPayload.EpochMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _EpochMsgPayload.EpochMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _EpochMsgPayload.EpochMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _EpochMsgPayload.EpochMsgInMsgsVector_swiginit(self, _EpochMsgPayload.new_EpochMsgInMsgsVector(*args))

    def push_back(self, x):
        return _EpochMsgPayload.EpochMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _EpochMsgPayload.EpochMsgInMsgsVector_front(self)

    def back(self):
        return _EpochMsgPayload.EpochMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _EpochMsgPayload.EpochMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _EpochMsgPayload.EpochMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _EpochMsgPayload.EpochMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _EpochMsgPayload.EpochMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _EpochMsgPayload.EpochMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _EpochMsgPayload.delete_EpochMsgInMsgsVector

# Register EpochMsgInMsgsVector in _EpochMsgPayload:
_EpochMsgPayload.EpochMsgInMsgsVector_swigregister(EpochMsgInMsgsVector)
class EpochMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_EpochMsgPayload.EpochMsg_C_header_get, _EpochMsgPayload.EpochMsg_C_header_set)
    payload = property(_EpochMsgPayload.EpochMsg_C_payload_get, _EpochMsgPayload.EpochMsg_C_payload_set)
    payloadPointer = property(_EpochMsgPayload.EpochMsg_C_payloadPointer_get, _EpochMsgPayload.EpochMsg_C_payloadPointer_set)
    headerPointer = property(_EpochMsgPayload.EpochMsg_C_headerPointer_get, _EpochMsgPayload.EpochMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _EpochMsgPayload.EpochMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import EpochMsg
        if type(source) == type(self):
            EpochMsg_C_subscribe(self, source)
        elif type(source) == EpochMsg:
            EpochMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            EpochMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe EpochMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        EpochMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import EpochMsg
        if type(source) == type(self):
            return (EpochMsg_C_isSubscribedTo(self, source))
        elif type(source) == EpochMsg:
            return (EpochMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (EpochMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        EpochMsg_C_addAuthor(self, self)
        if data:
            EpochMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        EpochMsg_C_addAuthor(self, self)
        EpochMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return EpochMsg_C_read(self)


    def __init__(self):
        _EpochMsgPayload.EpochMsg_C_swiginit(self, _EpochMsgPayload.new_EpochMsg_C())
    __swig_destroy__ = _EpochMsgPayload.delete_EpochMsg_C

# Register EpochMsg_C in _EpochMsgPayload:
_EpochMsgPayload.EpochMsg_C_swigregister(EpochMsg_C)

def EpochMsg_cpp_subscribe(subscriber, source):
    return _EpochMsgPayload.EpochMsg_cpp_subscribe(subscriber, source)

def EpochMsg_C_subscribe(subscriber, source):
    return _EpochMsgPayload.EpochMsg_C_subscribe(subscriber, source)

def EpochMsg_addr_subscribe(subscriber, sourceAddr):
    return _EpochMsgPayload.EpochMsg_addr_subscribe(subscriber, sourceAddr)

def EpochMsg_unsubscribe(subscriber):
    return _EpochMsgPayload.EpochMsg_unsubscribe(subscriber)

def EpochMsg_C_isSubscribedTo(subscriber, source):
    return _EpochMsgPayload.EpochMsg_C_isSubscribedTo(subscriber, source)

def EpochMsg_cpp_isSubscribedTo(subscriber, source):
    return _EpochMsgPayload.EpochMsg_cpp_isSubscribedTo(subscriber, source)

def EpochMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _EpochMsgPayload.EpochMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def EpochMsg_C_addAuthor(coowner, data):
    return _EpochMsgPayload.EpochMsg_C_addAuthor(coowner, data)

def EpochMsg_C_init(owner):
    return _EpochMsgPayload.EpochMsg_C_init(owner)

def EpochMsg_C_isLinked(data):
    return _EpochMsgPayload.EpochMsg_C_isLinked(data)

def EpochMsg_C_isWritten(data):
    return _EpochMsgPayload.EpochMsg_C_isWritten(data)

def EpochMsg_C_timeWritten(data):
    return _EpochMsgPayload.EpochMsg_C_timeWritten(data)

def EpochMsg_C_moduleID(data):
    return _EpochMsgPayload.EpochMsg_C_moduleID(data)

def EpochMsg_C_write(data, destination, moduleID, callTime):
    return _EpochMsgPayload.EpochMsg_C_write(data, destination, moduleID, callTime)

def EpochMsg_C_read(source):
    return _EpochMsgPayload.EpochMsg_C_read(source)

def EpochMsg_C_zeroMsgPayload():
    return _EpochMsgPayload.EpochMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_EpochMsgPayload.MsgHeader_isLinked_get, _EpochMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_EpochMsgPayload.MsgHeader_isWritten_get, _EpochMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_EpochMsgPayload.MsgHeader_timeWritten_get, _EpochMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_EpochMsgPayload.MsgHeader_moduleID_get, _EpochMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _EpochMsgPayload.MsgHeader_swiginit(self, _EpochMsgPayload.new_MsgHeader())
    __swig_destroy__ = _EpochMsgPayload.delete_MsgHeader

# Register MsgHeader in _EpochMsgPayload:
_EpochMsgPayload.MsgHeader_swigregister(MsgHeader)

