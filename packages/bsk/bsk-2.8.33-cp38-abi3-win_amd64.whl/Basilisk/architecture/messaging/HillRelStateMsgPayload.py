# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _HillRelStateMsgPayload
else:
    import _HillRelStateMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _HillRelStateMsgPayload.delete_SwigPyIterator

    def value(self):
        return _HillRelStateMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _HillRelStateMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _HillRelStateMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _HillRelStateMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _HillRelStateMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _HillRelStateMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _HillRelStateMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _HillRelStateMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _HillRelStateMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _HillRelStateMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _HillRelStateMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _HillRelStateMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _HillRelStateMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _HillRelStateMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _HillRelStateMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _HillRelStateMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _HillRelStateMsgPayload:
_HillRelStateMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _HillRelStateMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _HillRelStateMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _HillRelStateMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _HillRelStateMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _HillRelStateMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _HillRelStateMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _HillRelStateMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _HillRelStateMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _HillRelStateMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _HillRelStateMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _HillRelStateMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _HillRelStateMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _HillRelStateMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _HillRelStateMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _HillRelStateMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _HillRelStateMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _HillRelStateMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _HillRelStateMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _HillRelStateMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _HillRelStateMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _HillRelStateMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _HillRelStateMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _HillRelStateMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _HillRelStateMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _HillRelStateMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _HillRelStateMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _HillRelStateMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _HillRelStateMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _HillRelStateMsgPayload.TimeVector_empty(self)

    def size(self):
        return _HillRelStateMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _HillRelStateMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _HillRelStateMsgPayload.TimeVector_begin(self)

    def end(self):
        return _HillRelStateMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _HillRelStateMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _HillRelStateMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _HillRelStateMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _HillRelStateMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _HillRelStateMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _HillRelStateMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _HillRelStateMsgPayload.TimeVector_swiginit(self, _HillRelStateMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _HillRelStateMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _HillRelStateMsgPayload.TimeVector_front(self)

    def back(self):
        return _HillRelStateMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _HillRelStateMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _HillRelStateMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _HillRelStateMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _HillRelStateMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _HillRelStateMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _HillRelStateMsgPayload.delete_TimeVector

# Register TimeVector in _HillRelStateMsgPayload:
_HillRelStateMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _HillRelStateMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _HillRelStateMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _HillRelStateMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _HillRelStateMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _HillRelStateMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _HillRelStateMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _HillRelStateMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _HillRelStateMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _HillRelStateMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _HillRelStateMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _HillRelStateMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _HillRelStateMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _HillRelStateMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _HillRelStateMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _HillRelStateMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _HillRelStateMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _HillRelStateMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _HillRelStateMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _HillRelStateMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _HillRelStateMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _HillRelStateMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _HillRelStateMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _HillRelStateMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _HillRelStateMsgPayload.DoubleVector_swiginit(self, _HillRelStateMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _HillRelStateMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _HillRelStateMsgPayload.DoubleVector_front(self)

    def back(self):
        return _HillRelStateMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _HillRelStateMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _HillRelStateMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _HillRelStateMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _HillRelStateMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _HillRelStateMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _HillRelStateMsgPayload.delete_DoubleVector

# Register DoubleVector in _HillRelStateMsgPayload:
_HillRelStateMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _HillRelStateMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _HillRelStateMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _HillRelStateMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _HillRelStateMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _HillRelStateMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _HillRelStateMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _HillRelStateMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _HillRelStateMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _HillRelStateMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _HillRelStateMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _HillRelStateMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _HillRelStateMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _HillRelStateMsgPayload.StringVector_empty(self)

    def size(self):
        return _HillRelStateMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _HillRelStateMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _HillRelStateMsgPayload.StringVector_begin(self)

    def end(self):
        return _HillRelStateMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _HillRelStateMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _HillRelStateMsgPayload.StringVector_rend(self)

    def clear(self):
        return _HillRelStateMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _HillRelStateMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _HillRelStateMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _HillRelStateMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _HillRelStateMsgPayload.StringVector_swiginit(self, _HillRelStateMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _HillRelStateMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _HillRelStateMsgPayload.StringVector_front(self)

    def back(self):
        return _HillRelStateMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _HillRelStateMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _HillRelStateMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _HillRelStateMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _HillRelStateMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _HillRelStateMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _HillRelStateMsgPayload.delete_StringVector

# Register StringVector in _HillRelStateMsgPayload:
_HillRelStateMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _HillRelStateMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _HillRelStateMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _HillRelStateMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _HillRelStateMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _HillRelStateMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _HillRelStateMsgPayload.NANO2SEC
SEC2NANO = _HillRelStateMsgPayload.SEC2NANO
SEC2HOUR = _HillRelStateMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _HillRelStateMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _HillRelStateMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _HillRelStateMsgPayload.secToNano(seconds)
BOOL_FALSE = _HillRelStateMsgPayload.BOOL_FALSE
BOOL_TRUE = _HillRelStateMsgPayload.BOOL_TRUE
AVAILABLE = _HillRelStateMsgPayload.AVAILABLE
UNAVAILABLE = _HillRelStateMsgPayload.UNAVAILABLE
BalancedWheels = _HillRelStateMsgPayload.BalancedWheels
JitterSimple = _HillRelStateMsgPayload.JitterSimple
JitterFullyCoupled = _HillRelStateMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HillRelStateMsgPayload.SysModel_swiginit(self, _HillRelStateMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _HillRelStateMsgPayload.delete_SysModel

    def SelfInit(self):
        return _HillRelStateMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _HillRelStateMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _HillRelStateMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _HillRelStateMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_HillRelStateMsgPayload.SysModel_ModelTag_get, _HillRelStateMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_HillRelStateMsgPayload.SysModel_CallCounts_get, _HillRelStateMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_HillRelStateMsgPayload.SysModel_RNGSeed_get, _HillRelStateMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_HillRelStateMsgPayload.SysModel_moduleID_get, _HillRelStateMsgPayload.SysModel_moduleID_set)

# Register SysModel in _HillRelStateMsgPayload:
_HillRelStateMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _HillRelStateMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _HillRelStateMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _HillRelStateMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _HillRelStateMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _HillRelStateMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _HillRelStateMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _HillRelStateMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _HillRelStateMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _HillRelStateMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _HillRelStateMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _HillRelStateMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _HillRelStateMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class HillRelStateMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r_DC_H = property(_HillRelStateMsgPayload.HillRelStateMsgPayload_r_DC_H_get, _HillRelStateMsgPayload.HillRelStateMsgPayload_r_DC_H_set)
    v_DC_H = property(_HillRelStateMsgPayload.HillRelStateMsgPayload_v_DC_H_get, _HillRelStateMsgPayload.HillRelStateMsgPayload_v_DC_H_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _HillRelStateMsgPayload.HillRelStateMsgPayload_swiginit(self, _HillRelStateMsgPayload.new_HillRelStateMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _HillRelStateMsgPayload.delete_HillRelStateMsgPayload

# Register HillRelStateMsgPayload in _HillRelStateMsgPayload:
_HillRelStateMsgPayload.HillRelStateMsgPayload_swigregister(HillRelStateMsgPayload)

def _pprint_HillRelStateMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[HillRelStateMsgPayload.__repr__] = _pprint_HillRelStateMsgPayload

class HillRelStateMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_HillRelStateMsgPayload.HillRelStateMsgReader_bskLogger_get, _HillRelStateMsgPayload.HillRelStateMsgReader_bskLogger_set)
    zeroMsgPayload = property(_HillRelStateMsgPayload.HillRelStateMsgReader_zeroMsgPayload_get, _HillRelStateMsgPayload.HillRelStateMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _HillRelStateMsgPayload.HillRelStateMsgReader_swiginit(self, _HillRelStateMsgPayload.new_HillRelStateMsgReader(*args))

    def __call__(self):
        return _HillRelStateMsgPayload.HillRelStateMsgReader___call__(self)

    def isLinked(self):
        return _HillRelStateMsgPayload.HillRelStateMsgReader_isLinked(self)

    def isWritten(self):
        return _HillRelStateMsgPayload.HillRelStateMsgReader_isWritten(self)

    def timeWritten(self):
        return _HillRelStateMsgPayload.HillRelStateMsgReader_timeWritten(self)

    def moduleID(self):
        return _HillRelStateMsgPayload.HillRelStateMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _HillRelStateMsgPayload.HillRelStateMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _HillRelStateMsgPayload.HillRelStateMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _HillRelStateMsgPayload.HillRelStateMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _HillRelStateMsgPayload.HillRelStateMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _HillRelStateMsgPayload.HillRelStateMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _HillRelStateMsgPayload.HillRelStateMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _HillRelStateMsgPayload.HillRelStateMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _HillRelStateMsgPayload.HillRelStateMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _HillRelStateMsgPayload.HillRelStateMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _HillRelStateMsgPayload.HillRelStateMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == HillRelStateMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.HillRelStateMsgPayload import HillRelStateMsg_C
            if type(source) == HillRelStateMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<HillRelStateMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == HillRelStateMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.HillRelStateMsgPayload import HillRelStateMsg_C
        except ImportError:
            return 0

        if type(source) == HillRelStateMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _HillRelStateMsgPayload.delete_HillRelStateMsgReader

# Register HillRelStateMsgReader in _HillRelStateMsgPayload:
_HillRelStateMsgPayload.HillRelStateMsgReader_swigregister(HillRelStateMsgReader)
class HillRelStateMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HillRelStateMsgPayload.HillRelStateMsgWriter_swiginit(self, _HillRelStateMsgPayload.new_HillRelStateMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _HillRelStateMsgPayload.HillRelStateMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _HillRelStateMsgPayload.delete_HillRelStateMsgWriter

# Register HillRelStateMsgWriter in _HillRelStateMsgPayload:
_HillRelStateMsgPayload.HillRelStateMsgWriter_swigregister(HillRelStateMsgWriter)
class HillRelStateMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_HillRelStateMsgPayload.HillRelStateMsg_write_get, _HillRelStateMsgPayload.HillRelStateMsg_write_set)

    def addSubscriber(self):
        return _HillRelStateMsgPayload.HillRelStateMsg_addSubscriber(self)

    def addAuthor(self):
        return _HillRelStateMsgPayload.HillRelStateMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _HillRelStateMsgPayload.HillRelStateMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _HillRelStateMsgPayload.HillRelStateMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _HillRelStateMsgPayload.HillRelStateMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_HillRelStateMsgPayload.HillRelStateMsg_zeroMsgPayload_get, _HillRelStateMsgPayload.HillRelStateMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _HillRelStateMsgPayload.HillRelStateMsg_isLinked(self)

    def getPayloadSize(self):
        return _HillRelStateMsgPayload.HillRelStateMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _HillRelStateMsgPayload.HillRelStateMsg_swiginit(self, _HillRelStateMsgPayload.new_HillRelStateMsg())
    __swig_destroy__ = _HillRelStateMsgPayload.delete_HillRelStateMsg

# Register HillRelStateMsg in _HillRelStateMsgPayload:
_HillRelStateMsgPayload.HillRelStateMsg_swigregister(HillRelStateMsg)
class HillRelStateMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HillRelStateMsgPayload.HillRelStateMsgRecorder_swiginit(self, _HillRelStateMsgPayload.new_HillRelStateMsgRecorder(*args))
    __swig_destroy__ = _HillRelStateMsgPayload.delete_HillRelStateMsgRecorder

    def SelfInit(self):
        return _HillRelStateMsgPayload.HillRelStateMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _HillRelStateMsgPayload.HillRelStateMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _HillRelStateMsgPayload.HillRelStateMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _HillRelStateMsgPayload.HillRelStateMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _HillRelStateMsgPayload.HillRelStateMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _HillRelStateMsgPayload.HillRelStateMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _HillRelStateMsgPayload.HillRelStateMsgRecorder___record_vector(self)

    def size(self):
        return _HillRelStateMsgPayload.HillRelStateMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _HillRelStateMsgPayload.HillRelStateMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _HillRelStateMsgPayload.HillRelStateMsgRecorder_clear(self)
    bskLogger = property(_HillRelStateMsgPayload.HillRelStateMsgRecorder_bskLogger_get, _HillRelStateMsgPayload.HillRelStateMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _HillRelStateMsgPayload.HillRelStateMsgRecorder_updateTimeInterval(self, timeDiff)

    def _r_DC_H_array(self):
        return _HillRelStateMsgPayload.HillRelStateMsgRecorder__r_DC_H_array(self)

    @property
    def r_DC_H(self):
        return self._r_DC_H_array()


    def _v_DC_H_array(self):
        return _HillRelStateMsgPayload.HillRelStateMsgRecorder__v_DC_H_array(self)

    @property
    def v_DC_H(self):
        return self._v_DC_H_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register HillRelStateMsgRecorder in _HillRelStateMsgPayload:
_HillRelStateMsgPayload.HillRelStateMsgRecorder_swigregister(HillRelStateMsgRecorder)
class HillRelStateMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _HillRelStateMsgPayload.HillRelStateMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _HillRelStateMsgPayload.HillRelStateMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _HillRelStateMsgPayload.HillRelStateMsgPayloadVector___bool__(self)

    def __len__(self):
        return _HillRelStateMsgPayload.HillRelStateMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _HillRelStateMsgPayload.HillRelStateMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _HillRelStateMsgPayload.HillRelStateMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _HillRelStateMsgPayload.HillRelStateMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _HillRelStateMsgPayload.HillRelStateMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _HillRelStateMsgPayload.HillRelStateMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _HillRelStateMsgPayload.HillRelStateMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _HillRelStateMsgPayload.HillRelStateMsgPayloadVector_pop(self)

    def append(self, x):
        return _HillRelStateMsgPayload.HillRelStateMsgPayloadVector_append(self, x)

    def empty(self):
        return _HillRelStateMsgPayload.HillRelStateMsgPayloadVector_empty(self)

    def size(self):
        return _HillRelStateMsgPayload.HillRelStateMsgPayloadVector_size(self)

    def swap(self, v):
        return _HillRelStateMsgPayload.HillRelStateMsgPayloadVector_swap(self, v)

    def begin(self):
        return _HillRelStateMsgPayload.HillRelStateMsgPayloadVector_begin(self)

    def end(self):
        return _HillRelStateMsgPayload.HillRelStateMsgPayloadVector_end(self)

    def rbegin(self):
        return _HillRelStateMsgPayload.HillRelStateMsgPayloadVector_rbegin(self)

    def rend(self):
        return _HillRelStateMsgPayload.HillRelStateMsgPayloadVector_rend(self)

    def clear(self):
        return _HillRelStateMsgPayload.HillRelStateMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _HillRelStateMsgPayload.HillRelStateMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _HillRelStateMsgPayload.HillRelStateMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _HillRelStateMsgPayload.HillRelStateMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _HillRelStateMsgPayload.HillRelStateMsgPayloadVector_swiginit(self, _HillRelStateMsgPayload.new_HillRelStateMsgPayloadVector(*args))

    def push_back(self, x):
        return _HillRelStateMsgPayload.HillRelStateMsgPayloadVector_push_back(self, x)

    def front(self):
        return _HillRelStateMsgPayload.HillRelStateMsgPayloadVector_front(self)

    def back(self):
        return _HillRelStateMsgPayload.HillRelStateMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _HillRelStateMsgPayload.HillRelStateMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _HillRelStateMsgPayload.HillRelStateMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _HillRelStateMsgPayload.HillRelStateMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _HillRelStateMsgPayload.HillRelStateMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _HillRelStateMsgPayload.HillRelStateMsgPayloadVector_capacity(self)

    def get_all(self):
        return _HillRelStateMsgPayload.HillRelStateMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _HillRelStateMsgPayload.delete_HillRelStateMsgPayloadVector

# Register HillRelStateMsgPayloadVector in _HillRelStateMsgPayload:
_HillRelStateMsgPayload.HillRelStateMsgPayloadVector_swigregister(HillRelStateMsgPayloadVector)
class HillRelStateMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsVector_empty(self)

    def size(self):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsVector_begin(self)

    def end(self):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsVector_rend(self)

    def clear(self):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _HillRelStateMsgPayload.HillRelStateMsgOutMsgsVector_swiginit(self, _HillRelStateMsgPayload.new_HillRelStateMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsVector_front(self)

    def back(self):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _HillRelStateMsgPayload.delete_HillRelStateMsgOutMsgsVector

# Register HillRelStateMsgOutMsgsVector in _HillRelStateMsgPayload:
_HillRelStateMsgPayload.HillRelStateMsgOutMsgsVector_swigregister(HillRelStateMsgOutMsgsVector)
class HillRelStateMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _HillRelStateMsgPayload.HillRelStateMsgOutMsgsPtrVector_swiginit(self, _HillRelStateMsgPayload.new_HillRelStateMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _HillRelStateMsgPayload.HillRelStateMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _HillRelStateMsgPayload.delete_HillRelStateMsgOutMsgsPtrVector

# Register HillRelStateMsgOutMsgsPtrVector in _HillRelStateMsgPayload:
_HillRelStateMsgPayload.HillRelStateMsgOutMsgsPtrVector_swigregister(HillRelStateMsgOutMsgsPtrVector)
class HillRelStateMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _HillRelStateMsgPayload.HillRelStateMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _HillRelStateMsgPayload.HillRelStateMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _HillRelStateMsgPayload.HillRelStateMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _HillRelStateMsgPayload.HillRelStateMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _HillRelStateMsgPayload.HillRelStateMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _HillRelStateMsgPayload.HillRelStateMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _HillRelStateMsgPayload.HillRelStateMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _HillRelStateMsgPayload.HillRelStateMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _HillRelStateMsgPayload.HillRelStateMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _HillRelStateMsgPayload.HillRelStateMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _HillRelStateMsgPayload.HillRelStateMsgInMsgsVector_pop(self)

    def append(self, x):
        return _HillRelStateMsgPayload.HillRelStateMsgInMsgsVector_append(self, x)

    def empty(self):
        return _HillRelStateMsgPayload.HillRelStateMsgInMsgsVector_empty(self)

    def size(self):
        return _HillRelStateMsgPayload.HillRelStateMsgInMsgsVector_size(self)

    def swap(self, v):
        return _HillRelStateMsgPayload.HillRelStateMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _HillRelStateMsgPayload.HillRelStateMsgInMsgsVector_begin(self)

    def end(self):
        return _HillRelStateMsgPayload.HillRelStateMsgInMsgsVector_end(self)

    def rbegin(self):
        return _HillRelStateMsgPayload.HillRelStateMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _HillRelStateMsgPayload.HillRelStateMsgInMsgsVector_rend(self)

    def clear(self):
        return _HillRelStateMsgPayload.HillRelStateMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _HillRelStateMsgPayload.HillRelStateMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _HillRelStateMsgPayload.HillRelStateMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _HillRelStateMsgPayload.HillRelStateMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _HillRelStateMsgPayload.HillRelStateMsgInMsgsVector_swiginit(self, _HillRelStateMsgPayload.new_HillRelStateMsgInMsgsVector(*args))

    def push_back(self, x):
        return _HillRelStateMsgPayload.HillRelStateMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _HillRelStateMsgPayload.HillRelStateMsgInMsgsVector_front(self)

    def back(self):
        return _HillRelStateMsgPayload.HillRelStateMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _HillRelStateMsgPayload.HillRelStateMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _HillRelStateMsgPayload.HillRelStateMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _HillRelStateMsgPayload.HillRelStateMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _HillRelStateMsgPayload.HillRelStateMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _HillRelStateMsgPayload.HillRelStateMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _HillRelStateMsgPayload.delete_HillRelStateMsgInMsgsVector

# Register HillRelStateMsgInMsgsVector in _HillRelStateMsgPayload:
_HillRelStateMsgPayload.HillRelStateMsgInMsgsVector_swigregister(HillRelStateMsgInMsgsVector)
class HillRelStateMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_HillRelStateMsgPayload.HillRelStateMsg_C_header_get, _HillRelStateMsgPayload.HillRelStateMsg_C_header_set)
    payload = property(_HillRelStateMsgPayload.HillRelStateMsg_C_payload_get, _HillRelStateMsgPayload.HillRelStateMsg_C_payload_set)
    payloadPointer = property(_HillRelStateMsgPayload.HillRelStateMsg_C_payloadPointer_get, _HillRelStateMsgPayload.HillRelStateMsg_C_payloadPointer_set)
    headerPointer = property(_HillRelStateMsgPayload.HillRelStateMsg_C_headerPointer_get, _HillRelStateMsgPayload.HillRelStateMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _HillRelStateMsgPayload.HillRelStateMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import HillRelStateMsg
        if type(source) == type(self):
            HillRelStateMsg_C_subscribe(self, source)
        elif type(source) == HillRelStateMsg:
            HillRelStateMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            HillRelStateMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe HillRelStateMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        HillRelStateMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import HillRelStateMsg
        if type(source) == type(self):
            return (HillRelStateMsg_C_isSubscribedTo(self, source))
        elif type(source) == HillRelStateMsg:
            return (HillRelStateMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (HillRelStateMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        HillRelStateMsg_C_addAuthor(self, self)
        if data:
            HillRelStateMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        HillRelStateMsg_C_addAuthor(self, self)
        HillRelStateMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return HillRelStateMsg_C_read(self)


    def __init__(self):
        _HillRelStateMsgPayload.HillRelStateMsg_C_swiginit(self, _HillRelStateMsgPayload.new_HillRelStateMsg_C())
    __swig_destroy__ = _HillRelStateMsgPayload.delete_HillRelStateMsg_C

# Register HillRelStateMsg_C in _HillRelStateMsgPayload:
_HillRelStateMsgPayload.HillRelStateMsg_C_swigregister(HillRelStateMsg_C)

def HillRelStateMsg_cpp_subscribe(subscriber, source):
    return _HillRelStateMsgPayload.HillRelStateMsg_cpp_subscribe(subscriber, source)

def HillRelStateMsg_C_subscribe(subscriber, source):
    return _HillRelStateMsgPayload.HillRelStateMsg_C_subscribe(subscriber, source)

def HillRelStateMsg_addr_subscribe(subscriber, sourceAddr):
    return _HillRelStateMsgPayload.HillRelStateMsg_addr_subscribe(subscriber, sourceAddr)

def HillRelStateMsg_unsubscribe(subscriber):
    return _HillRelStateMsgPayload.HillRelStateMsg_unsubscribe(subscriber)

def HillRelStateMsg_C_isSubscribedTo(subscriber, source):
    return _HillRelStateMsgPayload.HillRelStateMsg_C_isSubscribedTo(subscriber, source)

def HillRelStateMsg_cpp_isSubscribedTo(subscriber, source):
    return _HillRelStateMsgPayload.HillRelStateMsg_cpp_isSubscribedTo(subscriber, source)

def HillRelStateMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _HillRelStateMsgPayload.HillRelStateMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def HillRelStateMsg_C_addAuthor(coowner, data):
    return _HillRelStateMsgPayload.HillRelStateMsg_C_addAuthor(coowner, data)

def HillRelStateMsg_C_init(owner):
    return _HillRelStateMsgPayload.HillRelStateMsg_C_init(owner)

def HillRelStateMsg_C_isLinked(data):
    return _HillRelStateMsgPayload.HillRelStateMsg_C_isLinked(data)

def HillRelStateMsg_C_isWritten(data):
    return _HillRelStateMsgPayload.HillRelStateMsg_C_isWritten(data)

def HillRelStateMsg_C_timeWritten(data):
    return _HillRelStateMsgPayload.HillRelStateMsg_C_timeWritten(data)

def HillRelStateMsg_C_moduleID(data):
    return _HillRelStateMsgPayload.HillRelStateMsg_C_moduleID(data)

def HillRelStateMsg_C_write(data, destination, moduleID, callTime):
    return _HillRelStateMsgPayload.HillRelStateMsg_C_write(data, destination, moduleID, callTime)

def HillRelStateMsg_C_read(source):
    return _HillRelStateMsgPayload.HillRelStateMsg_C_read(source)

def HillRelStateMsg_C_zeroMsgPayload():
    return _HillRelStateMsgPayload.HillRelStateMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_HillRelStateMsgPayload.MsgHeader_isLinked_get, _HillRelStateMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_HillRelStateMsgPayload.MsgHeader_isWritten_get, _HillRelStateMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_HillRelStateMsgPayload.MsgHeader_timeWritten_get, _HillRelStateMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_HillRelStateMsgPayload.MsgHeader_moduleID_get, _HillRelStateMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _HillRelStateMsgPayload.MsgHeader_swiginit(self, _HillRelStateMsgPayload.new_MsgHeader())
    __swig_destroy__ = _HillRelStateMsgPayload.delete_MsgHeader

# Register MsgHeader in _HillRelStateMsgPayload:
_HillRelStateMsgPayload.MsgHeader_swigregister(MsgHeader)

