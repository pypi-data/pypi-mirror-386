# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _PixelLineFilterMsgPayload
else:
    import _PixelLineFilterMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PixelLineFilterMsgPayload.delete_SwigPyIterator

    def value(self):
        return _PixelLineFilterMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _PixelLineFilterMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _PixelLineFilterMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _PixelLineFilterMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _PixelLineFilterMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _PixelLineFilterMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _PixelLineFilterMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _PixelLineFilterMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _PixelLineFilterMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _PixelLineFilterMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _PixelLineFilterMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _PixelLineFilterMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _PixelLineFilterMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _PixelLineFilterMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _PixelLineFilterMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _PixelLineFilterMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _PixelLineFilterMsgPayload:
_PixelLineFilterMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _PixelLineFilterMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _PixelLineFilterMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _PixelLineFilterMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _PixelLineFilterMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _PixelLineFilterMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _PixelLineFilterMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _PixelLineFilterMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _PixelLineFilterMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _PixelLineFilterMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _PixelLineFilterMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _PixelLineFilterMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _PixelLineFilterMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _PixelLineFilterMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _PixelLineFilterMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _PixelLineFilterMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _PixelLineFilterMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PixelLineFilterMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PixelLineFilterMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _PixelLineFilterMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _PixelLineFilterMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _PixelLineFilterMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PixelLineFilterMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PixelLineFilterMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PixelLineFilterMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PixelLineFilterMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PixelLineFilterMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _PixelLineFilterMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _PixelLineFilterMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _PixelLineFilterMsgPayload.TimeVector_empty(self)

    def size(self):
        return _PixelLineFilterMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _PixelLineFilterMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _PixelLineFilterMsgPayload.TimeVector_begin(self)

    def end(self):
        return _PixelLineFilterMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _PixelLineFilterMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _PixelLineFilterMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _PixelLineFilterMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _PixelLineFilterMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _PixelLineFilterMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _PixelLineFilterMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _PixelLineFilterMsgPayload.TimeVector_swiginit(self, _PixelLineFilterMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _PixelLineFilterMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _PixelLineFilterMsgPayload.TimeVector_front(self)

    def back(self):
        return _PixelLineFilterMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _PixelLineFilterMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _PixelLineFilterMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _PixelLineFilterMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _PixelLineFilterMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _PixelLineFilterMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _PixelLineFilterMsgPayload.delete_TimeVector

# Register TimeVector in _PixelLineFilterMsgPayload:
_PixelLineFilterMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PixelLineFilterMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PixelLineFilterMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _PixelLineFilterMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _PixelLineFilterMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _PixelLineFilterMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PixelLineFilterMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PixelLineFilterMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PixelLineFilterMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PixelLineFilterMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PixelLineFilterMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _PixelLineFilterMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _PixelLineFilterMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _PixelLineFilterMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _PixelLineFilterMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _PixelLineFilterMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _PixelLineFilterMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _PixelLineFilterMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _PixelLineFilterMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _PixelLineFilterMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _PixelLineFilterMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _PixelLineFilterMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _PixelLineFilterMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _PixelLineFilterMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _PixelLineFilterMsgPayload.DoubleVector_swiginit(self, _PixelLineFilterMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _PixelLineFilterMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _PixelLineFilterMsgPayload.DoubleVector_front(self)

    def back(self):
        return _PixelLineFilterMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _PixelLineFilterMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _PixelLineFilterMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _PixelLineFilterMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _PixelLineFilterMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _PixelLineFilterMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _PixelLineFilterMsgPayload.delete_DoubleVector

# Register DoubleVector in _PixelLineFilterMsgPayload:
_PixelLineFilterMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PixelLineFilterMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PixelLineFilterMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _PixelLineFilterMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _PixelLineFilterMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _PixelLineFilterMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PixelLineFilterMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PixelLineFilterMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PixelLineFilterMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PixelLineFilterMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PixelLineFilterMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _PixelLineFilterMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _PixelLineFilterMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _PixelLineFilterMsgPayload.StringVector_empty(self)

    def size(self):
        return _PixelLineFilterMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _PixelLineFilterMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _PixelLineFilterMsgPayload.StringVector_begin(self)

    def end(self):
        return _PixelLineFilterMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _PixelLineFilterMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _PixelLineFilterMsgPayload.StringVector_rend(self)

    def clear(self):
        return _PixelLineFilterMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _PixelLineFilterMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _PixelLineFilterMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _PixelLineFilterMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _PixelLineFilterMsgPayload.StringVector_swiginit(self, _PixelLineFilterMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _PixelLineFilterMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _PixelLineFilterMsgPayload.StringVector_front(self)

    def back(self):
        return _PixelLineFilterMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _PixelLineFilterMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _PixelLineFilterMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _PixelLineFilterMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _PixelLineFilterMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _PixelLineFilterMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _PixelLineFilterMsgPayload.delete_StringVector

# Register StringVector in _PixelLineFilterMsgPayload:
_PixelLineFilterMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _PixelLineFilterMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _PixelLineFilterMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _PixelLineFilterMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _PixelLineFilterMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _PixelLineFilterMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _PixelLineFilterMsgPayload.NANO2SEC
SEC2NANO = _PixelLineFilterMsgPayload.SEC2NANO
SEC2HOUR = _PixelLineFilterMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _PixelLineFilterMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _PixelLineFilterMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _PixelLineFilterMsgPayload.secToNano(seconds)
BOOL_FALSE = _PixelLineFilterMsgPayload.BOOL_FALSE
BOOL_TRUE = _PixelLineFilterMsgPayload.BOOL_TRUE
AVAILABLE = _PixelLineFilterMsgPayload.AVAILABLE
UNAVAILABLE = _PixelLineFilterMsgPayload.UNAVAILABLE
BalancedWheels = _PixelLineFilterMsgPayload.BalancedWheels
JitterSimple = _PixelLineFilterMsgPayload.JitterSimple
JitterFullyCoupled = _PixelLineFilterMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PixelLineFilterMsgPayload.SysModel_swiginit(self, _PixelLineFilterMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _PixelLineFilterMsgPayload.delete_SysModel

    def SelfInit(self):
        return _PixelLineFilterMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _PixelLineFilterMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _PixelLineFilterMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _PixelLineFilterMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_PixelLineFilterMsgPayload.SysModel_ModelTag_get, _PixelLineFilterMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_PixelLineFilterMsgPayload.SysModel_CallCounts_get, _PixelLineFilterMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_PixelLineFilterMsgPayload.SysModel_RNGSeed_get, _PixelLineFilterMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_PixelLineFilterMsgPayload.SysModel_moduleID_get, _PixelLineFilterMsgPayload.SysModel_moduleID_set)

# Register SysModel in _PixelLineFilterMsgPayload:
_PixelLineFilterMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _PixelLineFilterMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _PixelLineFilterMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _PixelLineFilterMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _PixelLineFilterMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _PixelLineFilterMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _PixelLineFilterMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _PixelLineFilterMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _PixelLineFilterMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _PixelLineFilterMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _PixelLineFilterMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _PixelLineFilterMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _PixelLineFilterMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

PIXLINE_N_STATES = _PixelLineFilterMsgPayload.PIXLINE_N_STATES
PIXLINE_DYN_STATES = _PixelLineFilterMsgPayload.PIXLINE_DYN_STATES
PIXLINE_N_MEAS = _PixelLineFilterMsgPayload.PIXLINE_N_MEAS
class PixelLineFilterMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timeTag = property(_PixelLineFilterMsgPayload.PixelLineFilterMsgPayload_timeTag_get, _PixelLineFilterMsgPayload.PixelLineFilterMsgPayload_timeTag_set)
    covar = property(_PixelLineFilterMsgPayload.PixelLineFilterMsgPayload_covar_get, _PixelLineFilterMsgPayload.PixelLineFilterMsgPayload_covar_set)
    state = property(_PixelLineFilterMsgPayload.PixelLineFilterMsgPayload_state_get, _PixelLineFilterMsgPayload.PixelLineFilterMsgPayload_state_set)
    stateError = property(_PixelLineFilterMsgPayload.PixelLineFilterMsgPayload_stateError_get, _PixelLineFilterMsgPayload.PixelLineFilterMsgPayload_stateError_set)
    postFitRes = property(_PixelLineFilterMsgPayload.PixelLineFilterMsgPayload_postFitRes_get, _PixelLineFilterMsgPayload.PixelLineFilterMsgPayload_postFitRes_set)
    numObs = property(_PixelLineFilterMsgPayload.PixelLineFilterMsgPayload_numObs_get, _PixelLineFilterMsgPayload.PixelLineFilterMsgPayload_numObs_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _PixelLineFilterMsgPayload.PixelLineFilterMsgPayload_swiginit(self, _PixelLineFilterMsgPayload.new_PixelLineFilterMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _PixelLineFilterMsgPayload.delete_PixelLineFilterMsgPayload

# Register PixelLineFilterMsgPayload in _PixelLineFilterMsgPayload:
_PixelLineFilterMsgPayload.PixelLineFilterMsgPayload_swigregister(PixelLineFilterMsgPayload)

def _pprint_PixelLineFilterMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[PixelLineFilterMsgPayload.__repr__] = _pprint_PixelLineFilterMsgPayload

class PixelLineFilterMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_PixelLineFilterMsgPayload.PixelLineFilterMsgReader_bskLogger_get, _PixelLineFilterMsgPayload.PixelLineFilterMsgReader_bskLogger_set)
    zeroMsgPayload = property(_PixelLineFilterMsgPayload.PixelLineFilterMsgReader_zeroMsgPayload_get, _PixelLineFilterMsgPayload.PixelLineFilterMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _PixelLineFilterMsgPayload.PixelLineFilterMsgReader_swiginit(self, _PixelLineFilterMsgPayload.new_PixelLineFilterMsgReader(*args))

    def __call__(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgReader___call__(self)

    def isLinked(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgReader_isLinked(self)

    def isWritten(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgReader_isWritten(self)

    def timeWritten(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgReader_timeWritten(self)

    def moduleID(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == PixelLineFilterMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.PixelLineFilterMsgPayload import PixelLineFilterMsg_C
            if type(source) == PixelLineFilterMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<PixelLineFilterMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == PixelLineFilterMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.PixelLineFilterMsgPayload import PixelLineFilterMsg_C
        except ImportError:
            return 0

        if type(source) == PixelLineFilterMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _PixelLineFilterMsgPayload.delete_PixelLineFilterMsgReader

# Register PixelLineFilterMsgReader in _PixelLineFilterMsgPayload:
_PixelLineFilterMsgPayload.PixelLineFilterMsgReader_swigregister(PixelLineFilterMsgReader)
class PixelLineFilterMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PixelLineFilterMsgPayload.PixelLineFilterMsgWriter_swiginit(self, _PixelLineFilterMsgPayload.new_PixelLineFilterMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _PixelLineFilterMsgPayload.delete_PixelLineFilterMsgWriter

# Register PixelLineFilterMsgWriter in _PixelLineFilterMsgPayload:
_PixelLineFilterMsgPayload.PixelLineFilterMsgWriter_swigregister(PixelLineFilterMsgWriter)
class PixelLineFilterMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_PixelLineFilterMsgPayload.PixelLineFilterMsg_write_get, _PixelLineFilterMsgPayload.PixelLineFilterMsg_write_set)

    def addSubscriber(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsg_addSubscriber(self)

    def addAuthor(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_PixelLineFilterMsgPayload.PixelLineFilterMsg_zeroMsgPayload_get, _PixelLineFilterMsgPayload.PixelLineFilterMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsg_isLinked(self)

    def getPayloadSize(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _PixelLineFilterMsgPayload.PixelLineFilterMsg_swiginit(self, _PixelLineFilterMsgPayload.new_PixelLineFilterMsg())
    __swig_destroy__ = _PixelLineFilterMsgPayload.delete_PixelLineFilterMsg

# Register PixelLineFilterMsg in _PixelLineFilterMsgPayload:
_PixelLineFilterMsgPayload.PixelLineFilterMsg_swigregister(PixelLineFilterMsg)
class PixelLineFilterMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PixelLineFilterMsgPayload.PixelLineFilterMsgRecorder_swiginit(self, _PixelLineFilterMsgPayload.new_PixelLineFilterMsgRecorder(*args))
    __swig_destroy__ = _PixelLineFilterMsgPayload.delete_PixelLineFilterMsgRecorder

    def SelfInit(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgRecorder___record_vector(self)

    def size(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgRecorder_clear(self)
    bskLogger = property(_PixelLineFilterMsgPayload.PixelLineFilterMsgRecorder_bskLogger_get, _PixelLineFilterMsgPayload.PixelLineFilterMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgRecorder_updateTimeInterval(self, timeDiff)

    def _timeTag_array(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgRecorder__timeTag_array(self)

    @property
    def timeTag(self):
        return self._timeTag_array()


    def _covar_array(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgRecorder__covar_array(self)

    @property
    def covar(self):
        return self._covar_array()


    def _state_array(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgRecorder__state_array(self)

    @property
    def state(self):
        return self._state_array()


    def _stateError_array(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgRecorder__stateError_array(self)

    @property
    def stateError(self):
        return self._stateError_array()


    def _postFitRes_array(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgRecorder__postFitRes_array(self)

    @property
    def postFitRes(self):
        return self._postFitRes_array()


    def _numObs_array(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgRecorder__numObs_array(self)

    @property
    def numObs(self):
        return self._numObs_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register PixelLineFilterMsgRecorder in _PixelLineFilterMsgPayload:
_PixelLineFilterMsgPayload.PixelLineFilterMsgRecorder_swigregister(PixelLineFilterMsgRecorder)
class PixelLineFilterMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgPayloadVector___bool__(self)

    def __len__(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgPayloadVector_pop(self)

    def append(self, x):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgPayloadVector_append(self, x)

    def empty(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgPayloadVector_empty(self)

    def size(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgPayloadVector_size(self)

    def swap(self, v):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgPayloadVector_swap(self, v)

    def begin(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgPayloadVector_begin(self)

    def end(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgPayloadVector_end(self)

    def rbegin(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgPayloadVector_rbegin(self)

    def rend(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgPayloadVector_rend(self)

    def clear(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _PixelLineFilterMsgPayload.PixelLineFilterMsgPayloadVector_swiginit(self, _PixelLineFilterMsgPayload.new_PixelLineFilterMsgPayloadVector(*args))

    def push_back(self, x):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgPayloadVector_push_back(self, x)

    def front(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgPayloadVector_front(self)

    def back(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgPayloadVector_capacity(self)

    def get_all(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _PixelLineFilterMsgPayload.delete_PixelLineFilterMsgPayloadVector

# Register PixelLineFilterMsgPayloadVector in _PixelLineFilterMsgPayload:
_PixelLineFilterMsgPayload.PixelLineFilterMsgPayloadVector_swigregister(PixelLineFilterMsgPayloadVector)
class PixelLineFilterMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsVector_empty(self)

    def size(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsVector_begin(self)

    def end(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsVector_rend(self)

    def clear(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsVector_swiginit(self, _PixelLineFilterMsgPayload.new_PixelLineFilterMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsVector_front(self)

    def back(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _PixelLineFilterMsgPayload.delete_PixelLineFilterMsgOutMsgsVector

# Register PixelLineFilterMsgOutMsgsVector in _PixelLineFilterMsgPayload:
_PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsVector_swigregister(PixelLineFilterMsgOutMsgsVector)
class PixelLineFilterMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsPtrVector_swiginit(self, _PixelLineFilterMsgPayload.new_PixelLineFilterMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _PixelLineFilterMsgPayload.delete_PixelLineFilterMsgOutMsgsPtrVector

# Register PixelLineFilterMsgOutMsgsPtrVector in _PixelLineFilterMsgPayload:
_PixelLineFilterMsgPayload.PixelLineFilterMsgOutMsgsPtrVector_swigregister(PixelLineFilterMsgOutMsgsPtrVector)
class PixelLineFilterMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgInMsgsVector_pop(self)

    def append(self, x):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgInMsgsVector_append(self, x)

    def empty(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgInMsgsVector_empty(self)

    def size(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgInMsgsVector_size(self)

    def swap(self, v):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgInMsgsVector_begin(self)

    def end(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgInMsgsVector_end(self)

    def rbegin(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgInMsgsVector_rend(self)

    def clear(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _PixelLineFilterMsgPayload.PixelLineFilterMsgInMsgsVector_swiginit(self, _PixelLineFilterMsgPayload.new_PixelLineFilterMsgInMsgsVector(*args))

    def push_back(self, x):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgInMsgsVector_front(self)

    def back(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _PixelLineFilterMsgPayload.delete_PixelLineFilterMsgInMsgsVector

# Register PixelLineFilterMsgInMsgsVector in _PixelLineFilterMsgPayload:
_PixelLineFilterMsgPayload.PixelLineFilterMsgInMsgsVector_swigregister(PixelLineFilterMsgInMsgsVector)
class PixelLineFilterMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_PixelLineFilterMsgPayload.PixelLineFilterMsg_C_header_get, _PixelLineFilterMsgPayload.PixelLineFilterMsg_C_header_set)
    payload = property(_PixelLineFilterMsgPayload.PixelLineFilterMsg_C_payload_get, _PixelLineFilterMsgPayload.PixelLineFilterMsg_C_payload_set)
    payloadPointer = property(_PixelLineFilterMsgPayload.PixelLineFilterMsg_C_payloadPointer_get, _PixelLineFilterMsgPayload.PixelLineFilterMsg_C_payloadPointer_set)
    headerPointer = property(_PixelLineFilterMsgPayload.PixelLineFilterMsg_C_headerPointer_get, _PixelLineFilterMsgPayload.PixelLineFilterMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _PixelLineFilterMsgPayload.PixelLineFilterMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import PixelLineFilterMsg
        if type(source) == type(self):
            PixelLineFilterMsg_C_subscribe(self, source)
        elif type(source) == PixelLineFilterMsg:
            PixelLineFilterMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            PixelLineFilterMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe PixelLineFilterMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        PixelLineFilterMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import PixelLineFilterMsg
        if type(source) == type(self):
            return (PixelLineFilterMsg_C_isSubscribedTo(self, source))
        elif type(source) == PixelLineFilterMsg:
            return (PixelLineFilterMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (PixelLineFilterMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        PixelLineFilterMsg_C_addAuthor(self, self)
        if data:
            PixelLineFilterMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        PixelLineFilterMsg_C_addAuthor(self, self)
        PixelLineFilterMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return PixelLineFilterMsg_C_read(self)


    def __init__(self):
        _PixelLineFilterMsgPayload.PixelLineFilterMsg_C_swiginit(self, _PixelLineFilterMsgPayload.new_PixelLineFilterMsg_C())
    __swig_destroy__ = _PixelLineFilterMsgPayload.delete_PixelLineFilterMsg_C

# Register PixelLineFilterMsg_C in _PixelLineFilterMsgPayload:
_PixelLineFilterMsgPayload.PixelLineFilterMsg_C_swigregister(PixelLineFilterMsg_C)

def PixelLineFilterMsg_cpp_subscribe(subscriber, source):
    return _PixelLineFilterMsgPayload.PixelLineFilterMsg_cpp_subscribe(subscriber, source)

def PixelLineFilterMsg_C_subscribe(subscriber, source):
    return _PixelLineFilterMsgPayload.PixelLineFilterMsg_C_subscribe(subscriber, source)

def PixelLineFilterMsg_addr_subscribe(subscriber, sourceAddr):
    return _PixelLineFilterMsgPayload.PixelLineFilterMsg_addr_subscribe(subscriber, sourceAddr)

def PixelLineFilterMsg_unsubscribe(subscriber):
    return _PixelLineFilterMsgPayload.PixelLineFilterMsg_unsubscribe(subscriber)

def PixelLineFilterMsg_C_isSubscribedTo(subscriber, source):
    return _PixelLineFilterMsgPayload.PixelLineFilterMsg_C_isSubscribedTo(subscriber, source)

def PixelLineFilterMsg_cpp_isSubscribedTo(subscriber, source):
    return _PixelLineFilterMsgPayload.PixelLineFilterMsg_cpp_isSubscribedTo(subscriber, source)

def PixelLineFilterMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _PixelLineFilterMsgPayload.PixelLineFilterMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def PixelLineFilterMsg_C_addAuthor(coowner, data):
    return _PixelLineFilterMsgPayload.PixelLineFilterMsg_C_addAuthor(coowner, data)

def PixelLineFilterMsg_C_init(owner):
    return _PixelLineFilterMsgPayload.PixelLineFilterMsg_C_init(owner)

def PixelLineFilterMsg_C_isLinked(data):
    return _PixelLineFilterMsgPayload.PixelLineFilterMsg_C_isLinked(data)

def PixelLineFilterMsg_C_isWritten(data):
    return _PixelLineFilterMsgPayload.PixelLineFilterMsg_C_isWritten(data)

def PixelLineFilterMsg_C_timeWritten(data):
    return _PixelLineFilterMsgPayload.PixelLineFilterMsg_C_timeWritten(data)

def PixelLineFilterMsg_C_moduleID(data):
    return _PixelLineFilterMsgPayload.PixelLineFilterMsg_C_moduleID(data)

def PixelLineFilterMsg_C_write(data, destination, moduleID, callTime):
    return _PixelLineFilterMsgPayload.PixelLineFilterMsg_C_write(data, destination, moduleID, callTime)

def PixelLineFilterMsg_C_read(source):
    return _PixelLineFilterMsgPayload.PixelLineFilterMsg_C_read(source)

def PixelLineFilterMsg_C_zeroMsgPayload():
    return _PixelLineFilterMsgPayload.PixelLineFilterMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_PixelLineFilterMsgPayload.MsgHeader_isLinked_get, _PixelLineFilterMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_PixelLineFilterMsgPayload.MsgHeader_isWritten_get, _PixelLineFilterMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_PixelLineFilterMsgPayload.MsgHeader_timeWritten_get, _PixelLineFilterMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_PixelLineFilterMsgPayload.MsgHeader_moduleID_get, _PixelLineFilterMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _PixelLineFilterMsgPayload.MsgHeader_swiginit(self, _PixelLineFilterMsgPayload.new_MsgHeader())
    __swig_destroy__ = _PixelLineFilterMsgPayload.delete_MsgHeader

# Register MsgHeader in _PixelLineFilterMsgPayload:
_PixelLineFilterMsgPayload.MsgHeader_swigregister(MsgHeader)

