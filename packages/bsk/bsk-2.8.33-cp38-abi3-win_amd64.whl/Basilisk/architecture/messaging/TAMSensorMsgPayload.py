# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _TAMSensorMsgPayload
else:
    import _TAMSensorMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TAMSensorMsgPayload.delete_SwigPyIterator

    def value(self):
        return _TAMSensorMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _TAMSensorMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _TAMSensorMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _TAMSensorMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _TAMSensorMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _TAMSensorMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _TAMSensorMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _TAMSensorMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _TAMSensorMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _TAMSensorMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _TAMSensorMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _TAMSensorMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _TAMSensorMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _TAMSensorMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _TAMSensorMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _TAMSensorMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _TAMSensorMsgPayload:
_TAMSensorMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _TAMSensorMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _TAMSensorMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _TAMSensorMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _TAMSensorMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _TAMSensorMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _TAMSensorMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _TAMSensorMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _TAMSensorMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _TAMSensorMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _TAMSensorMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _TAMSensorMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _TAMSensorMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _TAMSensorMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _TAMSensorMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _TAMSensorMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _TAMSensorMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TAMSensorMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TAMSensorMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _TAMSensorMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _TAMSensorMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _TAMSensorMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TAMSensorMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TAMSensorMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TAMSensorMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TAMSensorMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TAMSensorMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _TAMSensorMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _TAMSensorMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _TAMSensorMsgPayload.TimeVector_empty(self)

    def size(self):
        return _TAMSensorMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _TAMSensorMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _TAMSensorMsgPayload.TimeVector_begin(self)

    def end(self):
        return _TAMSensorMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _TAMSensorMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _TAMSensorMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _TAMSensorMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _TAMSensorMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _TAMSensorMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _TAMSensorMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _TAMSensorMsgPayload.TimeVector_swiginit(self, _TAMSensorMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _TAMSensorMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _TAMSensorMsgPayload.TimeVector_front(self)

    def back(self):
        return _TAMSensorMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _TAMSensorMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _TAMSensorMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _TAMSensorMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _TAMSensorMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _TAMSensorMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _TAMSensorMsgPayload.delete_TimeVector

# Register TimeVector in _TAMSensorMsgPayload:
_TAMSensorMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TAMSensorMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TAMSensorMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _TAMSensorMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _TAMSensorMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _TAMSensorMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TAMSensorMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TAMSensorMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TAMSensorMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TAMSensorMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TAMSensorMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _TAMSensorMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _TAMSensorMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _TAMSensorMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _TAMSensorMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _TAMSensorMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _TAMSensorMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _TAMSensorMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _TAMSensorMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _TAMSensorMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _TAMSensorMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _TAMSensorMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _TAMSensorMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _TAMSensorMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _TAMSensorMsgPayload.DoubleVector_swiginit(self, _TAMSensorMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _TAMSensorMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _TAMSensorMsgPayload.DoubleVector_front(self)

    def back(self):
        return _TAMSensorMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _TAMSensorMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _TAMSensorMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _TAMSensorMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _TAMSensorMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _TAMSensorMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _TAMSensorMsgPayload.delete_DoubleVector

# Register DoubleVector in _TAMSensorMsgPayload:
_TAMSensorMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TAMSensorMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TAMSensorMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _TAMSensorMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _TAMSensorMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _TAMSensorMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TAMSensorMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TAMSensorMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TAMSensorMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TAMSensorMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TAMSensorMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _TAMSensorMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _TAMSensorMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _TAMSensorMsgPayload.StringVector_empty(self)

    def size(self):
        return _TAMSensorMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _TAMSensorMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _TAMSensorMsgPayload.StringVector_begin(self)

    def end(self):
        return _TAMSensorMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _TAMSensorMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _TAMSensorMsgPayload.StringVector_rend(self)

    def clear(self):
        return _TAMSensorMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _TAMSensorMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _TAMSensorMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _TAMSensorMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _TAMSensorMsgPayload.StringVector_swiginit(self, _TAMSensorMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _TAMSensorMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _TAMSensorMsgPayload.StringVector_front(self)

    def back(self):
        return _TAMSensorMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _TAMSensorMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _TAMSensorMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _TAMSensorMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _TAMSensorMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _TAMSensorMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _TAMSensorMsgPayload.delete_StringVector

# Register StringVector in _TAMSensorMsgPayload:
_TAMSensorMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _TAMSensorMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _TAMSensorMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _TAMSensorMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _TAMSensorMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _TAMSensorMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _TAMSensorMsgPayload.NANO2SEC
SEC2NANO = _TAMSensorMsgPayload.SEC2NANO
SEC2HOUR = _TAMSensorMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _TAMSensorMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _TAMSensorMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _TAMSensorMsgPayload.secToNano(seconds)
BOOL_FALSE = _TAMSensorMsgPayload.BOOL_FALSE
BOOL_TRUE = _TAMSensorMsgPayload.BOOL_TRUE
AVAILABLE = _TAMSensorMsgPayload.AVAILABLE
UNAVAILABLE = _TAMSensorMsgPayload.UNAVAILABLE
BalancedWheels = _TAMSensorMsgPayload.BalancedWheels
JitterSimple = _TAMSensorMsgPayload.JitterSimple
JitterFullyCoupled = _TAMSensorMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TAMSensorMsgPayload.SysModel_swiginit(self, _TAMSensorMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _TAMSensorMsgPayload.delete_SysModel

    def SelfInit(self):
        return _TAMSensorMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _TAMSensorMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _TAMSensorMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _TAMSensorMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_TAMSensorMsgPayload.SysModel_ModelTag_get, _TAMSensorMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_TAMSensorMsgPayload.SysModel_CallCounts_get, _TAMSensorMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_TAMSensorMsgPayload.SysModel_RNGSeed_get, _TAMSensorMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_TAMSensorMsgPayload.SysModel_moduleID_get, _TAMSensorMsgPayload.SysModel_moduleID_set)

# Register SysModel in _TAMSensorMsgPayload:
_TAMSensorMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _TAMSensorMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _TAMSensorMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _TAMSensorMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _TAMSensorMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _TAMSensorMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _TAMSensorMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _TAMSensorMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _TAMSensorMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _TAMSensorMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _TAMSensorMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _TAMSensorMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _TAMSensorMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class TAMSensorMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    tam_S = property(_TAMSensorMsgPayload.TAMSensorMsgPayload_tam_S_get, _TAMSensorMsgPayload.TAMSensorMsgPayload_tam_S_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _TAMSensorMsgPayload.TAMSensorMsgPayload_swiginit(self, _TAMSensorMsgPayload.new_TAMSensorMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _TAMSensorMsgPayload.delete_TAMSensorMsgPayload

# Register TAMSensorMsgPayload in _TAMSensorMsgPayload:
_TAMSensorMsgPayload.TAMSensorMsgPayload_swigregister(TAMSensorMsgPayload)

def _pprint_TAMSensorMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[TAMSensorMsgPayload.__repr__] = _pprint_TAMSensorMsgPayload

class TAMSensorMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_TAMSensorMsgPayload.TAMSensorMsgReader_bskLogger_get, _TAMSensorMsgPayload.TAMSensorMsgReader_bskLogger_set)
    zeroMsgPayload = property(_TAMSensorMsgPayload.TAMSensorMsgReader_zeroMsgPayload_get, _TAMSensorMsgPayload.TAMSensorMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _TAMSensorMsgPayload.TAMSensorMsgReader_swiginit(self, _TAMSensorMsgPayload.new_TAMSensorMsgReader(*args))

    def __call__(self):
        return _TAMSensorMsgPayload.TAMSensorMsgReader___call__(self)

    def isLinked(self):
        return _TAMSensorMsgPayload.TAMSensorMsgReader_isLinked(self)

    def isWritten(self):
        return _TAMSensorMsgPayload.TAMSensorMsgReader_isWritten(self)

    def timeWritten(self):
        return _TAMSensorMsgPayload.TAMSensorMsgReader_timeWritten(self)

    def moduleID(self):
        return _TAMSensorMsgPayload.TAMSensorMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _TAMSensorMsgPayload.TAMSensorMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _TAMSensorMsgPayload.TAMSensorMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _TAMSensorMsgPayload.TAMSensorMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _TAMSensorMsgPayload.TAMSensorMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _TAMSensorMsgPayload.TAMSensorMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _TAMSensorMsgPayload.TAMSensorMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _TAMSensorMsgPayload.TAMSensorMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _TAMSensorMsgPayload.TAMSensorMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _TAMSensorMsgPayload.TAMSensorMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _TAMSensorMsgPayload.TAMSensorMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == TAMSensorMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.TAMSensorMsgPayload import TAMSensorMsg_C
            if type(source) == TAMSensorMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<TAMSensorMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == TAMSensorMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.TAMSensorMsgPayload import TAMSensorMsg_C
        except ImportError:
            return 0

        if type(source) == TAMSensorMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _TAMSensorMsgPayload.delete_TAMSensorMsgReader

# Register TAMSensorMsgReader in _TAMSensorMsgPayload:
_TAMSensorMsgPayload.TAMSensorMsgReader_swigregister(TAMSensorMsgReader)
class TAMSensorMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TAMSensorMsgPayload.TAMSensorMsgWriter_swiginit(self, _TAMSensorMsgPayload.new_TAMSensorMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _TAMSensorMsgPayload.TAMSensorMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _TAMSensorMsgPayload.delete_TAMSensorMsgWriter

# Register TAMSensorMsgWriter in _TAMSensorMsgPayload:
_TAMSensorMsgPayload.TAMSensorMsgWriter_swigregister(TAMSensorMsgWriter)
class TAMSensorMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_TAMSensorMsgPayload.TAMSensorMsg_write_get, _TAMSensorMsgPayload.TAMSensorMsg_write_set)

    def addSubscriber(self):
        return _TAMSensorMsgPayload.TAMSensorMsg_addSubscriber(self)

    def addAuthor(self):
        return _TAMSensorMsgPayload.TAMSensorMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _TAMSensorMsgPayload.TAMSensorMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _TAMSensorMsgPayload.TAMSensorMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _TAMSensorMsgPayload.TAMSensorMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_TAMSensorMsgPayload.TAMSensorMsg_zeroMsgPayload_get, _TAMSensorMsgPayload.TAMSensorMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _TAMSensorMsgPayload.TAMSensorMsg_isLinked(self)

    def getPayloadSize(self):
        return _TAMSensorMsgPayload.TAMSensorMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _TAMSensorMsgPayload.TAMSensorMsg_swiginit(self, _TAMSensorMsgPayload.new_TAMSensorMsg())
    __swig_destroy__ = _TAMSensorMsgPayload.delete_TAMSensorMsg

# Register TAMSensorMsg in _TAMSensorMsgPayload:
_TAMSensorMsgPayload.TAMSensorMsg_swigregister(TAMSensorMsg)
class TAMSensorMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TAMSensorMsgPayload.TAMSensorMsgRecorder_swiginit(self, _TAMSensorMsgPayload.new_TAMSensorMsgRecorder(*args))
    __swig_destroy__ = _TAMSensorMsgPayload.delete_TAMSensorMsgRecorder

    def SelfInit(self):
        return _TAMSensorMsgPayload.TAMSensorMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _TAMSensorMsgPayload.TAMSensorMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _TAMSensorMsgPayload.TAMSensorMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _TAMSensorMsgPayload.TAMSensorMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _TAMSensorMsgPayload.TAMSensorMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _TAMSensorMsgPayload.TAMSensorMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _TAMSensorMsgPayload.TAMSensorMsgRecorder___record_vector(self)

    def size(self):
        return _TAMSensorMsgPayload.TAMSensorMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _TAMSensorMsgPayload.TAMSensorMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _TAMSensorMsgPayload.TAMSensorMsgRecorder_clear(self)
    bskLogger = property(_TAMSensorMsgPayload.TAMSensorMsgRecorder_bskLogger_get, _TAMSensorMsgPayload.TAMSensorMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _TAMSensorMsgPayload.TAMSensorMsgRecorder_updateTimeInterval(self, timeDiff)

    def _tam_S_array(self):
        return _TAMSensorMsgPayload.TAMSensorMsgRecorder__tam_S_array(self)

    @property
    def tam_S(self):
        return self._tam_S_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register TAMSensorMsgRecorder in _TAMSensorMsgPayload:
_TAMSensorMsgPayload.TAMSensorMsgRecorder_swigregister(TAMSensorMsgRecorder)
class TAMSensorMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TAMSensorMsgPayload.TAMSensorMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TAMSensorMsgPayload.TAMSensorMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _TAMSensorMsgPayload.TAMSensorMsgPayloadVector___bool__(self)

    def __len__(self):
        return _TAMSensorMsgPayload.TAMSensorMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _TAMSensorMsgPayload.TAMSensorMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TAMSensorMsgPayload.TAMSensorMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TAMSensorMsgPayload.TAMSensorMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TAMSensorMsgPayload.TAMSensorMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TAMSensorMsgPayload.TAMSensorMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TAMSensorMsgPayload.TAMSensorMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _TAMSensorMsgPayload.TAMSensorMsgPayloadVector_pop(self)

    def append(self, x):
        return _TAMSensorMsgPayload.TAMSensorMsgPayloadVector_append(self, x)

    def empty(self):
        return _TAMSensorMsgPayload.TAMSensorMsgPayloadVector_empty(self)

    def size(self):
        return _TAMSensorMsgPayload.TAMSensorMsgPayloadVector_size(self)

    def swap(self, v):
        return _TAMSensorMsgPayload.TAMSensorMsgPayloadVector_swap(self, v)

    def begin(self):
        return _TAMSensorMsgPayload.TAMSensorMsgPayloadVector_begin(self)

    def end(self):
        return _TAMSensorMsgPayload.TAMSensorMsgPayloadVector_end(self)

    def rbegin(self):
        return _TAMSensorMsgPayload.TAMSensorMsgPayloadVector_rbegin(self)

    def rend(self):
        return _TAMSensorMsgPayload.TAMSensorMsgPayloadVector_rend(self)

    def clear(self):
        return _TAMSensorMsgPayload.TAMSensorMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _TAMSensorMsgPayload.TAMSensorMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _TAMSensorMsgPayload.TAMSensorMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _TAMSensorMsgPayload.TAMSensorMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _TAMSensorMsgPayload.TAMSensorMsgPayloadVector_swiginit(self, _TAMSensorMsgPayload.new_TAMSensorMsgPayloadVector(*args))

    def push_back(self, x):
        return _TAMSensorMsgPayload.TAMSensorMsgPayloadVector_push_back(self, x)

    def front(self):
        return _TAMSensorMsgPayload.TAMSensorMsgPayloadVector_front(self)

    def back(self):
        return _TAMSensorMsgPayload.TAMSensorMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _TAMSensorMsgPayload.TAMSensorMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _TAMSensorMsgPayload.TAMSensorMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _TAMSensorMsgPayload.TAMSensorMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _TAMSensorMsgPayload.TAMSensorMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _TAMSensorMsgPayload.TAMSensorMsgPayloadVector_capacity(self)

    def get_all(self):
        return _TAMSensorMsgPayload.TAMSensorMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _TAMSensorMsgPayload.delete_TAMSensorMsgPayloadVector

# Register TAMSensorMsgPayloadVector in _TAMSensorMsgPayload:
_TAMSensorMsgPayload.TAMSensorMsgPayloadVector_swigregister(TAMSensorMsgPayloadVector)
class TAMSensorMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsVector_empty(self)

    def size(self):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsVector_begin(self)

    def end(self):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsVector_rend(self)

    def clear(self):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _TAMSensorMsgPayload.TAMSensorMsgOutMsgsVector_swiginit(self, _TAMSensorMsgPayload.new_TAMSensorMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsVector_front(self)

    def back(self):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _TAMSensorMsgPayload.delete_TAMSensorMsgOutMsgsVector

# Register TAMSensorMsgOutMsgsVector in _TAMSensorMsgPayload:
_TAMSensorMsgPayload.TAMSensorMsgOutMsgsVector_swigregister(TAMSensorMsgOutMsgsVector)
class TAMSensorMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _TAMSensorMsgPayload.TAMSensorMsgOutMsgsPtrVector_swiginit(self, _TAMSensorMsgPayload.new_TAMSensorMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _TAMSensorMsgPayload.TAMSensorMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _TAMSensorMsgPayload.delete_TAMSensorMsgOutMsgsPtrVector

# Register TAMSensorMsgOutMsgsPtrVector in _TAMSensorMsgPayload:
_TAMSensorMsgPayload.TAMSensorMsgOutMsgsPtrVector_swigregister(TAMSensorMsgOutMsgsPtrVector)
class TAMSensorMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TAMSensorMsgPayload.TAMSensorMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TAMSensorMsgPayload.TAMSensorMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _TAMSensorMsgPayload.TAMSensorMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _TAMSensorMsgPayload.TAMSensorMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _TAMSensorMsgPayload.TAMSensorMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TAMSensorMsgPayload.TAMSensorMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TAMSensorMsgPayload.TAMSensorMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TAMSensorMsgPayload.TAMSensorMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TAMSensorMsgPayload.TAMSensorMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TAMSensorMsgPayload.TAMSensorMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _TAMSensorMsgPayload.TAMSensorMsgInMsgsVector_pop(self)

    def append(self, x):
        return _TAMSensorMsgPayload.TAMSensorMsgInMsgsVector_append(self, x)

    def empty(self):
        return _TAMSensorMsgPayload.TAMSensorMsgInMsgsVector_empty(self)

    def size(self):
        return _TAMSensorMsgPayload.TAMSensorMsgInMsgsVector_size(self)

    def swap(self, v):
        return _TAMSensorMsgPayload.TAMSensorMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _TAMSensorMsgPayload.TAMSensorMsgInMsgsVector_begin(self)

    def end(self):
        return _TAMSensorMsgPayload.TAMSensorMsgInMsgsVector_end(self)

    def rbegin(self):
        return _TAMSensorMsgPayload.TAMSensorMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _TAMSensorMsgPayload.TAMSensorMsgInMsgsVector_rend(self)

    def clear(self):
        return _TAMSensorMsgPayload.TAMSensorMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _TAMSensorMsgPayload.TAMSensorMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _TAMSensorMsgPayload.TAMSensorMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _TAMSensorMsgPayload.TAMSensorMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _TAMSensorMsgPayload.TAMSensorMsgInMsgsVector_swiginit(self, _TAMSensorMsgPayload.new_TAMSensorMsgInMsgsVector(*args))

    def push_back(self, x):
        return _TAMSensorMsgPayload.TAMSensorMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _TAMSensorMsgPayload.TAMSensorMsgInMsgsVector_front(self)

    def back(self):
        return _TAMSensorMsgPayload.TAMSensorMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _TAMSensorMsgPayload.TAMSensorMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _TAMSensorMsgPayload.TAMSensorMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _TAMSensorMsgPayload.TAMSensorMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _TAMSensorMsgPayload.TAMSensorMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _TAMSensorMsgPayload.TAMSensorMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _TAMSensorMsgPayload.delete_TAMSensorMsgInMsgsVector

# Register TAMSensorMsgInMsgsVector in _TAMSensorMsgPayload:
_TAMSensorMsgPayload.TAMSensorMsgInMsgsVector_swigregister(TAMSensorMsgInMsgsVector)
class TAMSensorMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_TAMSensorMsgPayload.TAMSensorMsg_C_header_get, _TAMSensorMsgPayload.TAMSensorMsg_C_header_set)
    payload = property(_TAMSensorMsgPayload.TAMSensorMsg_C_payload_get, _TAMSensorMsgPayload.TAMSensorMsg_C_payload_set)
    payloadPointer = property(_TAMSensorMsgPayload.TAMSensorMsg_C_payloadPointer_get, _TAMSensorMsgPayload.TAMSensorMsg_C_payloadPointer_set)
    headerPointer = property(_TAMSensorMsgPayload.TAMSensorMsg_C_headerPointer_get, _TAMSensorMsgPayload.TAMSensorMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _TAMSensorMsgPayload.TAMSensorMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import TAMSensorMsg
        if type(source) == type(self):
            TAMSensorMsg_C_subscribe(self, source)
        elif type(source) == TAMSensorMsg:
            TAMSensorMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            TAMSensorMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe TAMSensorMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        TAMSensorMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import TAMSensorMsg
        if type(source) == type(self):
            return (TAMSensorMsg_C_isSubscribedTo(self, source))
        elif type(source) == TAMSensorMsg:
            return (TAMSensorMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (TAMSensorMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        TAMSensorMsg_C_addAuthor(self, self)
        if data:
            TAMSensorMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        TAMSensorMsg_C_addAuthor(self, self)
        TAMSensorMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return TAMSensorMsg_C_read(self)


    def __init__(self):
        _TAMSensorMsgPayload.TAMSensorMsg_C_swiginit(self, _TAMSensorMsgPayload.new_TAMSensorMsg_C())
    __swig_destroy__ = _TAMSensorMsgPayload.delete_TAMSensorMsg_C

# Register TAMSensorMsg_C in _TAMSensorMsgPayload:
_TAMSensorMsgPayload.TAMSensorMsg_C_swigregister(TAMSensorMsg_C)

def TAMSensorMsg_cpp_subscribe(subscriber, source):
    return _TAMSensorMsgPayload.TAMSensorMsg_cpp_subscribe(subscriber, source)

def TAMSensorMsg_C_subscribe(subscriber, source):
    return _TAMSensorMsgPayload.TAMSensorMsg_C_subscribe(subscriber, source)

def TAMSensorMsg_addr_subscribe(subscriber, sourceAddr):
    return _TAMSensorMsgPayload.TAMSensorMsg_addr_subscribe(subscriber, sourceAddr)

def TAMSensorMsg_unsubscribe(subscriber):
    return _TAMSensorMsgPayload.TAMSensorMsg_unsubscribe(subscriber)

def TAMSensorMsg_C_isSubscribedTo(subscriber, source):
    return _TAMSensorMsgPayload.TAMSensorMsg_C_isSubscribedTo(subscriber, source)

def TAMSensorMsg_cpp_isSubscribedTo(subscriber, source):
    return _TAMSensorMsgPayload.TAMSensorMsg_cpp_isSubscribedTo(subscriber, source)

def TAMSensorMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _TAMSensorMsgPayload.TAMSensorMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def TAMSensorMsg_C_addAuthor(coowner, data):
    return _TAMSensorMsgPayload.TAMSensorMsg_C_addAuthor(coowner, data)

def TAMSensorMsg_C_init(owner):
    return _TAMSensorMsgPayload.TAMSensorMsg_C_init(owner)

def TAMSensorMsg_C_isLinked(data):
    return _TAMSensorMsgPayload.TAMSensorMsg_C_isLinked(data)

def TAMSensorMsg_C_isWritten(data):
    return _TAMSensorMsgPayload.TAMSensorMsg_C_isWritten(data)

def TAMSensorMsg_C_timeWritten(data):
    return _TAMSensorMsgPayload.TAMSensorMsg_C_timeWritten(data)

def TAMSensorMsg_C_moduleID(data):
    return _TAMSensorMsgPayload.TAMSensorMsg_C_moduleID(data)

def TAMSensorMsg_C_write(data, destination, moduleID, callTime):
    return _TAMSensorMsgPayload.TAMSensorMsg_C_write(data, destination, moduleID, callTime)

def TAMSensorMsg_C_read(source):
    return _TAMSensorMsgPayload.TAMSensorMsg_C_read(source)

def TAMSensorMsg_C_zeroMsgPayload():
    return _TAMSensorMsgPayload.TAMSensorMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_TAMSensorMsgPayload.MsgHeader_isLinked_get, _TAMSensorMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_TAMSensorMsgPayload.MsgHeader_isWritten_get, _TAMSensorMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_TAMSensorMsgPayload.MsgHeader_timeWritten_get, _TAMSensorMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_TAMSensorMsgPayload.MsgHeader_moduleID_get, _TAMSensorMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _TAMSensorMsgPayload.MsgHeader_swiginit(self, _TAMSensorMsgPayload.new_MsgHeader())
    __swig_destroy__ = _TAMSensorMsgPayload.delete_MsgHeader

# Register MsgHeader in _TAMSensorMsgPayload:
_TAMSensorMsgPayload.MsgHeader_swigregister(MsgHeader)

