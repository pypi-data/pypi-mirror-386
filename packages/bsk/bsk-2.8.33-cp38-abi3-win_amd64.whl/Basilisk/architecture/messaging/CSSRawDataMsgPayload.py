# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CSSRawDataMsgPayload
else:
    import _CSSRawDataMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CSSRawDataMsgPayload.delete_SwigPyIterator

    def value(self):
        return _CSSRawDataMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _CSSRawDataMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _CSSRawDataMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _CSSRawDataMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _CSSRawDataMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _CSSRawDataMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _CSSRawDataMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _CSSRawDataMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _CSSRawDataMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _CSSRawDataMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _CSSRawDataMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _CSSRawDataMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _CSSRawDataMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _CSSRawDataMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _CSSRawDataMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _CSSRawDataMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CSSRawDataMsgPayload:
_CSSRawDataMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _CSSRawDataMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _CSSRawDataMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _CSSRawDataMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _CSSRawDataMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _CSSRawDataMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _CSSRawDataMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _CSSRawDataMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _CSSRawDataMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _CSSRawDataMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _CSSRawDataMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _CSSRawDataMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _CSSRawDataMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _CSSRawDataMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _CSSRawDataMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _CSSRawDataMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _CSSRawDataMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSRawDataMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSRawDataMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _CSSRawDataMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _CSSRawDataMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSRawDataMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSRawDataMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSRawDataMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSRawDataMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSRawDataMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSRawDataMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _CSSRawDataMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _CSSRawDataMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _CSSRawDataMsgPayload.TimeVector_empty(self)

    def size(self):
        return _CSSRawDataMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _CSSRawDataMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _CSSRawDataMsgPayload.TimeVector_begin(self)

    def end(self):
        return _CSSRawDataMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _CSSRawDataMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _CSSRawDataMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _CSSRawDataMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _CSSRawDataMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _CSSRawDataMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _CSSRawDataMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _CSSRawDataMsgPayload.TimeVector_swiginit(self, _CSSRawDataMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _CSSRawDataMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _CSSRawDataMsgPayload.TimeVector_front(self)

    def back(self):
        return _CSSRawDataMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _CSSRawDataMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSRawDataMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _CSSRawDataMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _CSSRawDataMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _CSSRawDataMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _CSSRawDataMsgPayload.delete_TimeVector

# Register TimeVector in _CSSRawDataMsgPayload:
_CSSRawDataMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSRawDataMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSRawDataMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _CSSRawDataMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _CSSRawDataMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSRawDataMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSRawDataMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSRawDataMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSRawDataMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSRawDataMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSRawDataMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _CSSRawDataMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _CSSRawDataMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _CSSRawDataMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _CSSRawDataMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _CSSRawDataMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _CSSRawDataMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _CSSRawDataMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _CSSRawDataMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _CSSRawDataMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _CSSRawDataMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _CSSRawDataMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _CSSRawDataMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _CSSRawDataMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _CSSRawDataMsgPayload.DoubleVector_swiginit(self, _CSSRawDataMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _CSSRawDataMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _CSSRawDataMsgPayload.DoubleVector_front(self)

    def back(self):
        return _CSSRawDataMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _CSSRawDataMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSRawDataMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _CSSRawDataMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _CSSRawDataMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _CSSRawDataMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _CSSRawDataMsgPayload.delete_DoubleVector

# Register DoubleVector in _CSSRawDataMsgPayload:
_CSSRawDataMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSRawDataMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSRawDataMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _CSSRawDataMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _CSSRawDataMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSRawDataMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSRawDataMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSRawDataMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSRawDataMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSRawDataMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSRawDataMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _CSSRawDataMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _CSSRawDataMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _CSSRawDataMsgPayload.StringVector_empty(self)

    def size(self):
        return _CSSRawDataMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _CSSRawDataMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _CSSRawDataMsgPayload.StringVector_begin(self)

    def end(self):
        return _CSSRawDataMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _CSSRawDataMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _CSSRawDataMsgPayload.StringVector_rend(self)

    def clear(self):
        return _CSSRawDataMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _CSSRawDataMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _CSSRawDataMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _CSSRawDataMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _CSSRawDataMsgPayload.StringVector_swiginit(self, _CSSRawDataMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _CSSRawDataMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _CSSRawDataMsgPayload.StringVector_front(self)

    def back(self):
        return _CSSRawDataMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _CSSRawDataMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSRawDataMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _CSSRawDataMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _CSSRawDataMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _CSSRawDataMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _CSSRawDataMsgPayload.delete_StringVector

# Register StringVector in _CSSRawDataMsgPayload:
_CSSRawDataMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _CSSRawDataMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _CSSRawDataMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _CSSRawDataMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _CSSRawDataMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _CSSRawDataMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _CSSRawDataMsgPayload.NANO2SEC
SEC2NANO = _CSSRawDataMsgPayload.SEC2NANO
SEC2HOUR = _CSSRawDataMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _CSSRawDataMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _CSSRawDataMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _CSSRawDataMsgPayload.secToNano(seconds)
BOOL_FALSE = _CSSRawDataMsgPayload.BOOL_FALSE
BOOL_TRUE = _CSSRawDataMsgPayload.BOOL_TRUE
AVAILABLE = _CSSRawDataMsgPayload.AVAILABLE
UNAVAILABLE = _CSSRawDataMsgPayload.UNAVAILABLE
BalancedWheels = _CSSRawDataMsgPayload.BalancedWheels
JitterSimple = _CSSRawDataMsgPayload.JitterSimple
JitterFullyCoupled = _CSSRawDataMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSSRawDataMsgPayload.SysModel_swiginit(self, _CSSRawDataMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _CSSRawDataMsgPayload.delete_SysModel

    def SelfInit(self):
        return _CSSRawDataMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _CSSRawDataMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _CSSRawDataMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _CSSRawDataMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_CSSRawDataMsgPayload.SysModel_ModelTag_get, _CSSRawDataMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_CSSRawDataMsgPayload.SysModel_CallCounts_get, _CSSRawDataMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_CSSRawDataMsgPayload.SysModel_RNGSeed_get, _CSSRawDataMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_CSSRawDataMsgPayload.SysModel_moduleID_get, _CSSRawDataMsgPayload.SysModel_moduleID_set)

# Register SysModel in _CSSRawDataMsgPayload:
_CSSRawDataMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _CSSRawDataMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _CSSRawDataMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _CSSRawDataMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _CSSRawDataMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _CSSRawDataMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _CSSRawDataMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _CSSRawDataMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _CSSRawDataMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _CSSRawDataMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _CSSRawDataMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _CSSRawDataMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _CSSRawDataMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class CSSRawDataMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    OutputData = property(_CSSRawDataMsgPayload.CSSRawDataMsgPayload_OutputData_get, _CSSRawDataMsgPayload.CSSRawDataMsgPayload_OutputData_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _CSSRawDataMsgPayload.CSSRawDataMsgPayload_swiginit(self, _CSSRawDataMsgPayload.new_CSSRawDataMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _CSSRawDataMsgPayload.delete_CSSRawDataMsgPayload

# Register CSSRawDataMsgPayload in _CSSRawDataMsgPayload:
_CSSRawDataMsgPayload.CSSRawDataMsgPayload_swigregister(CSSRawDataMsgPayload)

def _pprint_CSSRawDataMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[CSSRawDataMsgPayload.__repr__] = _pprint_CSSRawDataMsgPayload

class CSSRawDataMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_CSSRawDataMsgPayload.CSSRawDataMsgReader_bskLogger_get, _CSSRawDataMsgPayload.CSSRawDataMsgReader_bskLogger_set)
    zeroMsgPayload = property(_CSSRawDataMsgPayload.CSSRawDataMsgReader_zeroMsgPayload_get, _CSSRawDataMsgPayload.CSSRawDataMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _CSSRawDataMsgPayload.CSSRawDataMsgReader_swiginit(self, _CSSRawDataMsgPayload.new_CSSRawDataMsgReader(*args))

    def __call__(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgReader___call__(self)

    def isLinked(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgReader_isLinked(self)

    def isWritten(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgReader_isWritten(self)

    def timeWritten(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgReader_timeWritten(self)

    def moduleID(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _CSSRawDataMsgPayload.CSSRawDataMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _CSSRawDataMsgPayload.CSSRawDataMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _CSSRawDataMsgPayload.CSSRawDataMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _CSSRawDataMsgPayload.CSSRawDataMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _CSSRawDataMsgPayload.CSSRawDataMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _CSSRawDataMsgPayload.CSSRawDataMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _CSSRawDataMsgPayload.CSSRawDataMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _CSSRawDataMsgPayload.CSSRawDataMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _CSSRawDataMsgPayload.CSSRawDataMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == CSSRawDataMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.CSSRawDataMsgPayload import CSSRawDataMsg_C
            if type(source) == CSSRawDataMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<CSSRawDataMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == CSSRawDataMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.CSSRawDataMsgPayload import CSSRawDataMsg_C
        except ImportError:
            return 0

        if type(source) == CSSRawDataMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _CSSRawDataMsgPayload.delete_CSSRawDataMsgReader

# Register CSSRawDataMsgReader in _CSSRawDataMsgPayload:
_CSSRawDataMsgPayload.CSSRawDataMsgReader_swigregister(CSSRawDataMsgReader)
class CSSRawDataMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSSRawDataMsgPayload.CSSRawDataMsgWriter_swiginit(self, _CSSRawDataMsgPayload.new_CSSRawDataMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _CSSRawDataMsgPayload.CSSRawDataMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _CSSRawDataMsgPayload.delete_CSSRawDataMsgWriter

# Register CSSRawDataMsgWriter in _CSSRawDataMsgPayload:
_CSSRawDataMsgPayload.CSSRawDataMsgWriter_swigregister(CSSRawDataMsgWriter)
class CSSRawDataMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_CSSRawDataMsgPayload.CSSRawDataMsg_write_get, _CSSRawDataMsgPayload.CSSRawDataMsg_write_set)

    def addSubscriber(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsg_addSubscriber(self)

    def addAuthor(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _CSSRawDataMsgPayload.CSSRawDataMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _CSSRawDataMsgPayload.CSSRawDataMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _CSSRawDataMsgPayload.CSSRawDataMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_CSSRawDataMsgPayload.CSSRawDataMsg_zeroMsgPayload_get, _CSSRawDataMsgPayload.CSSRawDataMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsg_isLinked(self)

    def getPayloadSize(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _CSSRawDataMsgPayload.CSSRawDataMsg_swiginit(self, _CSSRawDataMsgPayload.new_CSSRawDataMsg())
    __swig_destroy__ = _CSSRawDataMsgPayload.delete_CSSRawDataMsg

# Register CSSRawDataMsg in _CSSRawDataMsgPayload:
_CSSRawDataMsgPayload.CSSRawDataMsg_swigregister(CSSRawDataMsg)
class CSSRawDataMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSSRawDataMsgPayload.CSSRawDataMsgRecorder_swiginit(self, _CSSRawDataMsgPayload.new_CSSRawDataMsgRecorder(*args))
    __swig_destroy__ = _CSSRawDataMsgPayload.delete_CSSRawDataMsgRecorder

    def SelfInit(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _CSSRawDataMsgPayload.CSSRawDataMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _CSSRawDataMsgPayload.CSSRawDataMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgRecorder___record_vector(self)

    def size(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _CSSRawDataMsgPayload.CSSRawDataMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgRecorder_clear(self)
    bskLogger = property(_CSSRawDataMsgPayload.CSSRawDataMsgRecorder_bskLogger_get, _CSSRawDataMsgPayload.CSSRawDataMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _CSSRawDataMsgPayload.CSSRawDataMsgRecorder_updateTimeInterval(self, timeDiff)

    def _OutputData_array(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgRecorder__OutputData_array(self)

    @property
    def OutputData(self):
        return self._OutputData_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register CSSRawDataMsgRecorder in _CSSRawDataMsgPayload:
_CSSRawDataMsgPayload.CSSRawDataMsgRecorder_swigregister(CSSRawDataMsgRecorder)
class CSSRawDataMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgPayloadVector___bool__(self)

    def __len__(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSRawDataMsgPayload.CSSRawDataMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSRawDataMsgPayload.CSSRawDataMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSRawDataMsgPayload.CSSRawDataMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSRawDataMsgPayload.CSSRawDataMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSRawDataMsgPayload.CSSRawDataMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSRawDataMsgPayload.CSSRawDataMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgPayloadVector_pop(self)

    def append(self, x):
        return _CSSRawDataMsgPayload.CSSRawDataMsgPayloadVector_append(self, x)

    def empty(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgPayloadVector_empty(self)

    def size(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgPayloadVector_size(self)

    def swap(self, v):
        return _CSSRawDataMsgPayload.CSSRawDataMsgPayloadVector_swap(self, v)

    def begin(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgPayloadVector_begin(self)

    def end(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgPayloadVector_end(self)

    def rbegin(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgPayloadVector_rbegin(self)

    def rend(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgPayloadVector_rend(self)

    def clear(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _CSSRawDataMsgPayload.CSSRawDataMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _CSSRawDataMsgPayload.CSSRawDataMsgPayloadVector_swiginit(self, _CSSRawDataMsgPayload.new_CSSRawDataMsgPayloadVector(*args))

    def push_back(self, x):
        return _CSSRawDataMsgPayload.CSSRawDataMsgPayloadVector_push_back(self, x)

    def front(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgPayloadVector_front(self)

    def back(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _CSSRawDataMsgPayload.CSSRawDataMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSRawDataMsgPayload.CSSRawDataMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _CSSRawDataMsgPayload.CSSRawDataMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _CSSRawDataMsgPayload.CSSRawDataMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgPayloadVector_capacity(self)

    def get_all(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _CSSRawDataMsgPayload.delete_CSSRawDataMsgPayloadVector

# Register CSSRawDataMsgPayloadVector in _CSSRawDataMsgPayload:
_CSSRawDataMsgPayload.CSSRawDataMsgPayloadVector_swigregister(CSSRawDataMsgPayloadVector)
class CSSRawDataMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsVector_empty(self)

    def size(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsVector_begin(self)

    def end(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsVector_rend(self)

    def clear(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsVector_swiginit(self, _CSSRawDataMsgPayload.new_CSSRawDataMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsVector_front(self)

    def back(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _CSSRawDataMsgPayload.delete_CSSRawDataMsgOutMsgsVector

# Register CSSRawDataMsgOutMsgsVector in _CSSRawDataMsgPayload:
_CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsVector_swigregister(CSSRawDataMsgOutMsgsVector)
class CSSRawDataMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsPtrVector_swiginit(self, _CSSRawDataMsgPayload.new_CSSRawDataMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _CSSRawDataMsgPayload.delete_CSSRawDataMsgOutMsgsPtrVector

# Register CSSRawDataMsgOutMsgsPtrVector in _CSSRawDataMsgPayload:
_CSSRawDataMsgPayload.CSSRawDataMsgOutMsgsPtrVector_swigregister(CSSRawDataMsgOutMsgsPtrVector)
class CSSRawDataMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSRawDataMsgPayload.CSSRawDataMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSRawDataMsgPayload.CSSRawDataMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSRawDataMsgPayload.CSSRawDataMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSRawDataMsgPayload.CSSRawDataMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSRawDataMsgPayload.CSSRawDataMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSRawDataMsgPayload.CSSRawDataMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgInMsgsVector_pop(self)

    def append(self, x):
        return _CSSRawDataMsgPayload.CSSRawDataMsgInMsgsVector_append(self, x)

    def empty(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgInMsgsVector_empty(self)

    def size(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgInMsgsVector_size(self)

    def swap(self, v):
        return _CSSRawDataMsgPayload.CSSRawDataMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgInMsgsVector_begin(self)

    def end(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgInMsgsVector_end(self)

    def rbegin(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgInMsgsVector_rend(self)

    def clear(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _CSSRawDataMsgPayload.CSSRawDataMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _CSSRawDataMsgPayload.CSSRawDataMsgInMsgsVector_swiginit(self, _CSSRawDataMsgPayload.new_CSSRawDataMsgInMsgsVector(*args))

    def push_back(self, x):
        return _CSSRawDataMsgPayload.CSSRawDataMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgInMsgsVector_front(self)

    def back(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _CSSRawDataMsgPayload.CSSRawDataMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSRawDataMsgPayload.CSSRawDataMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _CSSRawDataMsgPayload.CSSRawDataMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _CSSRawDataMsgPayload.CSSRawDataMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _CSSRawDataMsgPayload.CSSRawDataMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _CSSRawDataMsgPayload.delete_CSSRawDataMsgInMsgsVector

# Register CSSRawDataMsgInMsgsVector in _CSSRawDataMsgPayload:
_CSSRawDataMsgPayload.CSSRawDataMsgInMsgsVector_swigregister(CSSRawDataMsgInMsgsVector)
class CSSRawDataMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_CSSRawDataMsgPayload.CSSRawDataMsg_C_header_get, _CSSRawDataMsgPayload.CSSRawDataMsg_C_header_set)
    payload = property(_CSSRawDataMsgPayload.CSSRawDataMsg_C_payload_get, _CSSRawDataMsgPayload.CSSRawDataMsg_C_payload_set)
    payloadPointer = property(_CSSRawDataMsgPayload.CSSRawDataMsg_C_payloadPointer_get, _CSSRawDataMsgPayload.CSSRawDataMsg_C_payloadPointer_set)
    headerPointer = property(_CSSRawDataMsgPayload.CSSRawDataMsg_C_headerPointer_get, _CSSRawDataMsgPayload.CSSRawDataMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _CSSRawDataMsgPayload.CSSRawDataMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import CSSRawDataMsg
        if type(source) == type(self):
            CSSRawDataMsg_C_subscribe(self, source)
        elif type(source) == CSSRawDataMsg:
            CSSRawDataMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            CSSRawDataMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe CSSRawDataMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        CSSRawDataMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import CSSRawDataMsg
        if type(source) == type(self):
            return (CSSRawDataMsg_C_isSubscribedTo(self, source))
        elif type(source) == CSSRawDataMsg:
            return (CSSRawDataMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (CSSRawDataMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        CSSRawDataMsg_C_addAuthor(self, self)
        if data:
            CSSRawDataMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        CSSRawDataMsg_C_addAuthor(self, self)
        CSSRawDataMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return CSSRawDataMsg_C_read(self)


    def __init__(self):
        _CSSRawDataMsgPayload.CSSRawDataMsg_C_swiginit(self, _CSSRawDataMsgPayload.new_CSSRawDataMsg_C())
    __swig_destroy__ = _CSSRawDataMsgPayload.delete_CSSRawDataMsg_C

# Register CSSRawDataMsg_C in _CSSRawDataMsgPayload:
_CSSRawDataMsgPayload.CSSRawDataMsg_C_swigregister(CSSRawDataMsg_C)

def CSSRawDataMsg_cpp_subscribe(subscriber, source):
    return _CSSRawDataMsgPayload.CSSRawDataMsg_cpp_subscribe(subscriber, source)

def CSSRawDataMsg_C_subscribe(subscriber, source):
    return _CSSRawDataMsgPayload.CSSRawDataMsg_C_subscribe(subscriber, source)

def CSSRawDataMsg_addr_subscribe(subscriber, sourceAddr):
    return _CSSRawDataMsgPayload.CSSRawDataMsg_addr_subscribe(subscriber, sourceAddr)

def CSSRawDataMsg_unsubscribe(subscriber):
    return _CSSRawDataMsgPayload.CSSRawDataMsg_unsubscribe(subscriber)

def CSSRawDataMsg_C_isSubscribedTo(subscriber, source):
    return _CSSRawDataMsgPayload.CSSRawDataMsg_C_isSubscribedTo(subscriber, source)

def CSSRawDataMsg_cpp_isSubscribedTo(subscriber, source):
    return _CSSRawDataMsgPayload.CSSRawDataMsg_cpp_isSubscribedTo(subscriber, source)

def CSSRawDataMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _CSSRawDataMsgPayload.CSSRawDataMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def CSSRawDataMsg_C_addAuthor(coowner, data):
    return _CSSRawDataMsgPayload.CSSRawDataMsg_C_addAuthor(coowner, data)

def CSSRawDataMsg_C_init(owner):
    return _CSSRawDataMsgPayload.CSSRawDataMsg_C_init(owner)

def CSSRawDataMsg_C_isLinked(data):
    return _CSSRawDataMsgPayload.CSSRawDataMsg_C_isLinked(data)

def CSSRawDataMsg_C_isWritten(data):
    return _CSSRawDataMsgPayload.CSSRawDataMsg_C_isWritten(data)

def CSSRawDataMsg_C_timeWritten(data):
    return _CSSRawDataMsgPayload.CSSRawDataMsg_C_timeWritten(data)

def CSSRawDataMsg_C_moduleID(data):
    return _CSSRawDataMsgPayload.CSSRawDataMsg_C_moduleID(data)

def CSSRawDataMsg_C_write(data, destination, moduleID, callTime):
    return _CSSRawDataMsgPayload.CSSRawDataMsg_C_write(data, destination, moduleID, callTime)

def CSSRawDataMsg_C_read(source):
    return _CSSRawDataMsgPayload.CSSRawDataMsg_C_read(source)

def CSSRawDataMsg_C_zeroMsgPayload():
    return _CSSRawDataMsgPayload.CSSRawDataMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_CSSRawDataMsgPayload.MsgHeader_isLinked_get, _CSSRawDataMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_CSSRawDataMsgPayload.MsgHeader_isWritten_get, _CSSRawDataMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_CSSRawDataMsgPayload.MsgHeader_timeWritten_get, _CSSRawDataMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_CSSRawDataMsgPayload.MsgHeader_moduleID_get, _CSSRawDataMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _CSSRawDataMsgPayload.MsgHeader_swiginit(self, _CSSRawDataMsgPayload.new_MsgHeader())
    __swig_destroy__ = _CSSRawDataMsgPayload.delete_MsgHeader

# Register MsgHeader in _CSSRawDataMsgPayload:
_CSSRawDataMsgPayload.MsgHeader_swigregister(MsgHeader)

