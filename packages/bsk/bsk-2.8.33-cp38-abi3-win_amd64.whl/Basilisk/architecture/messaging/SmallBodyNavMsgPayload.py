# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _SmallBodyNavMsgPayload
else:
    import _SmallBodyNavMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SmallBodyNavMsgPayload.delete_SwigPyIterator

    def value(self):
        return _SmallBodyNavMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _SmallBodyNavMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _SmallBodyNavMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _SmallBodyNavMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _SmallBodyNavMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _SmallBodyNavMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _SmallBodyNavMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _SmallBodyNavMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _SmallBodyNavMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _SmallBodyNavMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _SmallBodyNavMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _SmallBodyNavMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _SmallBodyNavMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _SmallBodyNavMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _SmallBodyNavMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _SmallBodyNavMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _SmallBodyNavMsgPayload:
_SmallBodyNavMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _SmallBodyNavMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _SmallBodyNavMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _SmallBodyNavMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _SmallBodyNavMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _SmallBodyNavMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _SmallBodyNavMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _SmallBodyNavMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _SmallBodyNavMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _SmallBodyNavMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _SmallBodyNavMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _SmallBodyNavMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _SmallBodyNavMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _SmallBodyNavMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _SmallBodyNavMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _SmallBodyNavMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _SmallBodyNavMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _SmallBodyNavMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _SmallBodyNavMsgPayload.TimeVector_empty(self)

    def size(self):
        return _SmallBodyNavMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _SmallBodyNavMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavMsgPayload.TimeVector_begin(self)

    def end(self):
        return _SmallBodyNavMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _SmallBodyNavMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _SmallBodyNavMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavMsgPayload.TimeVector_swiginit(self, _SmallBodyNavMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _SmallBodyNavMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavMsgPayload.TimeVector_front(self)

    def back(self):
        return _SmallBodyNavMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _SmallBodyNavMsgPayload.delete_TimeVector

# Register TimeVector in _SmallBodyNavMsgPayload:
_SmallBodyNavMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _SmallBodyNavMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _SmallBodyNavMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _SmallBodyNavMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _SmallBodyNavMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _SmallBodyNavMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _SmallBodyNavMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _SmallBodyNavMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavMsgPayload.DoubleVector_swiginit(self, _SmallBodyNavMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _SmallBodyNavMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavMsgPayload.DoubleVector_front(self)

    def back(self):
        return _SmallBodyNavMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _SmallBodyNavMsgPayload.delete_DoubleVector

# Register DoubleVector in _SmallBodyNavMsgPayload:
_SmallBodyNavMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _SmallBodyNavMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _SmallBodyNavMsgPayload.StringVector_empty(self)

    def size(self):
        return _SmallBodyNavMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _SmallBodyNavMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavMsgPayload.StringVector_begin(self)

    def end(self):
        return _SmallBodyNavMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _SmallBodyNavMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavMsgPayload.StringVector_rend(self)

    def clear(self):
        return _SmallBodyNavMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavMsgPayload.StringVector_swiginit(self, _SmallBodyNavMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _SmallBodyNavMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavMsgPayload.StringVector_front(self)

    def back(self):
        return _SmallBodyNavMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _SmallBodyNavMsgPayload.delete_StringVector

# Register StringVector in _SmallBodyNavMsgPayload:
_SmallBodyNavMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _SmallBodyNavMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _SmallBodyNavMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _SmallBodyNavMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _SmallBodyNavMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _SmallBodyNavMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _SmallBodyNavMsgPayload.NANO2SEC
SEC2NANO = _SmallBodyNavMsgPayload.SEC2NANO
SEC2HOUR = _SmallBodyNavMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _SmallBodyNavMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _SmallBodyNavMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _SmallBodyNavMsgPayload.secToNano(seconds)
BOOL_FALSE = _SmallBodyNavMsgPayload.BOOL_FALSE
BOOL_TRUE = _SmallBodyNavMsgPayload.BOOL_TRUE
AVAILABLE = _SmallBodyNavMsgPayload.AVAILABLE
UNAVAILABLE = _SmallBodyNavMsgPayload.UNAVAILABLE
BalancedWheels = _SmallBodyNavMsgPayload.BalancedWheels
JitterSimple = _SmallBodyNavMsgPayload.JitterSimple
JitterFullyCoupled = _SmallBodyNavMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SmallBodyNavMsgPayload.SysModel_swiginit(self, _SmallBodyNavMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _SmallBodyNavMsgPayload.delete_SysModel

    def SelfInit(self):
        return _SmallBodyNavMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _SmallBodyNavMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _SmallBodyNavMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _SmallBodyNavMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_SmallBodyNavMsgPayload.SysModel_ModelTag_get, _SmallBodyNavMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_SmallBodyNavMsgPayload.SysModel_CallCounts_get, _SmallBodyNavMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_SmallBodyNavMsgPayload.SysModel_RNGSeed_get, _SmallBodyNavMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_SmallBodyNavMsgPayload.SysModel_moduleID_get, _SmallBodyNavMsgPayload.SysModel_moduleID_set)

# Register SysModel in _SmallBodyNavMsgPayload:
_SmallBodyNavMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _SmallBodyNavMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _SmallBodyNavMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _SmallBodyNavMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _SmallBodyNavMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _SmallBodyNavMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _SmallBodyNavMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _SmallBodyNavMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _SmallBodyNavMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _SmallBodyNavMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _SmallBodyNavMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _SmallBodyNavMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _SmallBodyNavMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

SMALL_BODY_NAV_N_STATES = _SmallBodyNavMsgPayload.SMALL_BODY_NAV_N_STATES
class SmallBodyNavMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    state = property(_SmallBodyNavMsgPayload.SmallBodyNavMsgPayload_state_get, _SmallBodyNavMsgPayload.SmallBodyNavMsgPayload_state_set)
    covar = property(_SmallBodyNavMsgPayload.SmallBodyNavMsgPayload_covar_get, _SmallBodyNavMsgPayload.SmallBodyNavMsgPayload_covar_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _SmallBodyNavMsgPayload.SmallBodyNavMsgPayload_swiginit(self, _SmallBodyNavMsgPayload.new_SmallBodyNavMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _SmallBodyNavMsgPayload.delete_SmallBodyNavMsgPayload

# Register SmallBodyNavMsgPayload in _SmallBodyNavMsgPayload:
_SmallBodyNavMsgPayload.SmallBodyNavMsgPayload_swigregister(SmallBodyNavMsgPayload)

def _pprint_SmallBodyNavMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[SmallBodyNavMsgPayload.__repr__] = _pprint_SmallBodyNavMsgPayload

class SmallBodyNavMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_SmallBodyNavMsgPayload.SmallBodyNavMsgReader_bskLogger_get, _SmallBodyNavMsgPayload.SmallBodyNavMsgReader_bskLogger_set)
    zeroMsgPayload = property(_SmallBodyNavMsgPayload.SmallBodyNavMsgReader_zeroMsgPayload_get, _SmallBodyNavMsgPayload.SmallBodyNavMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _SmallBodyNavMsgPayload.SmallBodyNavMsgReader_swiginit(self, _SmallBodyNavMsgPayload.new_SmallBodyNavMsgReader(*args))

    def __call__(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgReader___call__(self)

    def isLinked(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgReader_isLinked(self)

    def isWritten(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgReader_isWritten(self)

    def timeWritten(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgReader_timeWritten(self)

    def moduleID(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == SmallBodyNavMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.SmallBodyNavMsgPayload import SmallBodyNavMsg_C
            if type(source) == SmallBodyNavMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<SmallBodyNavMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == SmallBodyNavMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.SmallBodyNavMsgPayload import SmallBodyNavMsg_C
        except ImportError:
            return 0

        if type(source) == SmallBodyNavMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _SmallBodyNavMsgPayload.delete_SmallBodyNavMsgReader

# Register SmallBodyNavMsgReader in _SmallBodyNavMsgPayload:
_SmallBodyNavMsgPayload.SmallBodyNavMsgReader_swigregister(SmallBodyNavMsgReader)
class SmallBodyNavMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SmallBodyNavMsgPayload.SmallBodyNavMsgWriter_swiginit(self, _SmallBodyNavMsgPayload.new_SmallBodyNavMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _SmallBodyNavMsgPayload.delete_SmallBodyNavMsgWriter

# Register SmallBodyNavMsgWriter in _SmallBodyNavMsgPayload:
_SmallBodyNavMsgPayload.SmallBodyNavMsgWriter_swigregister(SmallBodyNavMsgWriter)
class SmallBodyNavMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_SmallBodyNavMsgPayload.SmallBodyNavMsg_write_get, _SmallBodyNavMsgPayload.SmallBodyNavMsg_write_set)

    def addSubscriber(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsg_addSubscriber(self)

    def addAuthor(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_SmallBodyNavMsgPayload.SmallBodyNavMsg_zeroMsgPayload_get, _SmallBodyNavMsgPayload.SmallBodyNavMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsg_isLinked(self)

    def getPayloadSize(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _SmallBodyNavMsgPayload.SmallBodyNavMsg_swiginit(self, _SmallBodyNavMsgPayload.new_SmallBodyNavMsg())
    __swig_destroy__ = _SmallBodyNavMsgPayload.delete_SmallBodyNavMsg

# Register SmallBodyNavMsg in _SmallBodyNavMsgPayload:
_SmallBodyNavMsgPayload.SmallBodyNavMsg_swigregister(SmallBodyNavMsg)
class SmallBodyNavMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SmallBodyNavMsgPayload.SmallBodyNavMsgRecorder_swiginit(self, _SmallBodyNavMsgPayload.new_SmallBodyNavMsgRecorder(*args))
    __swig_destroy__ = _SmallBodyNavMsgPayload.delete_SmallBodyNavMsgRecorder

    def SelfInit(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgRecorder___record_vector(self)

    def size(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgRecorder_clear(self)
    bskLogger = property(_SmallBodyNavMsgPayload.SmallBodyNavMsgRecorder_bskLogger_get, _SmallBodyNavMsgPayload.SmallBodyNavMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgRecorder_updateTimeInterval(self, timeDiff)

    def _state_array(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgRecorder__state_array(self)

    @property
    def state(self):
        return self._state_array()


    def _covar_array(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgRecorder__covar_array(self)

    @property
    def covar(self):
        return self._covar_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register SmallBodyNavMsgRecorder in _SmallBodyNavMsgPayload:
_SmallBodyNavMsgPayload.SmallBodyNavMsgRecorder_swigregister(SmallBodyNavMsgRecorder)
class SmallBodyNavMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgPayloadVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgPayloadVector_pop(self)

    def append(self, x):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgPayloadVector_append(self, x)

    def empty(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgPayloadVector_empty(self)

    def size(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgPayloadVector_size(self)

    def swap(self, v):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgPayloadVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgPayloadVector_begin(self)

    def end(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgPayloadVector_end(self)

    def rbegin(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgPayloadVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgPayloadVector_rend(self)

    def clear(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavMsgPayload.SmallBodyNavMsgPayloadVector_swiginit(self, _SmallBodyNavMsgPayload.new_SmallBodyNavMsgPayloadVector(*args))

    def push_back(self, x):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgPayloadVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgPayloadVector_front(self)

    def back(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgPayloadVector_capacity(self)

    def get_all(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _SmallBodyNavMsgPayload.delete_SmallBodyNavMsgPayloadVector

# Register SmallBodyNavMsgPayloadVector in _SmallBodyNavMsgPayload:
_SmallBodyNavMsgPayload.SmallBodyNavMsgPayloadVector_swigregister(SmallBodyNavMsgPayloadVector)
class SmallBodyNavMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsVector_empty(self)

    def size(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsVector_begin(self)

    def end(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsVector_rend(self)

    def clear(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsVector_swiginit(self, _SmallBodyNavMsgPayload.new_SmallBodyNavMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsVector_front(self)

    def back(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _SmallBodyNavMsgPayload.delete_SmallBodyNavMsgOutMsgsVector

# Register SmallBodyNavMsgOutMsgsVector in _SmallBodyNavMsgPayload:
_SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsVector_swigregister(SmallBodyNavMsgOutMsgsVector)
class SmallBodyNavMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsPtrVector_swiginit(self, _SmallBodyNavMsgPayload.new_SmallBodyNavMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _SmallBodyNavMsgPayload.delete_SmallBodyNavMsgOutMsgsPtrVector

# Register SmallBodyNavMsgOutMsgsPtrVector in _SmallBodyNavMsgPayload:
_SmallBodyNavMsgPayload.SmallBodyNavMsgOutMsgsPtrVector_swigregister(SmallBodyNavMsgOutMsgsPtrVector)
class SmallBodyNavMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgInMsgsVector_pop(self)

    def append(self, x):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgInMsgsVector_append(self, x)

    def empty(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgInMsgsVector_empty(self)

    def size(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgInMsgsVector_size(self)

    def swap(self, v):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgInMsgsVector_begin(self)

    def end(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgInMsgsVector_end(self)

    def rbegin(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgInMsgsVector_rend(self)

    def clear(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavMsgPayload.SmallBodyNavMsgInMsgsVector_swiginit(self, _SmallBodyNavMsgPayload.new_SmallBodyNavMsgInMsgsVector(*args))

    def push_back(self, x):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgInMsgsVector_front(self)

    def back(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _SmallBodyNavMsgPayload.delete_SmallBodyNavMsgInMsgsVector

# Register SmallBodyNavMsgInMsgsVector in _SmallBodyNavMsgPayload:
_SmallBodyNavMsgPayload.SmallBodyNavMsgInMsgsVector_swigregister(SmallBodyNavMsgInMsgsVector)
class SmallBodyNavMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_SmallBodyNavMsgPayload.SmallBodyNavMsg_C_header_get, _SmallBodyNavMsgPayload.SmallBodyNavMsg_C_header_set)
    payload = property(_SmallBodyNavMsgPayload.SmallBodyNavMsg_C_payload_get, _SmallBodyNavMsgPayload.SmallBodyNavMsg_C_payload_set)
    payloadPointer = property(_SmallBodyNavMsgPayload.SmallBodyNavMsg_C_payloadPointer_get, _SmallBodyNavMsgPayload.SmallBodyNavMsg_C_payloadPointer_set)
    headerPointer = property(_SmallBodyNavMsgPayload.SmallBodyNavMsg_C_headerPointer_get, _SmallBodyNavMsgPayload.SmallBodyNavMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _SmallBodyNavMsgPayload.SmallBodyNavMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import SmallBodyNavMsg
        if type(source) == type(self):
            SmallBodyNavMsg_C_subscribe(self, source)
        elif type(source) == SmallBodyNavMsg:
            SmallBodyNavMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            SmallBodyNavMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe SmallBodyNavMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        SmallBodyNavMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import SmallBodyNavMsg
        if type(source) == type(self):
            return (SmallBodyNavMsg_C_isSubscribedTo(self, source))
        elif type(source) == SmallBodyNavMsg:
            return (SmallBodyNavMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (SmallBodyNavMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        SmallBodyNavMsg_C_addAuthor(self, self)
        if data:
            SmallBodyNavMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        SmallBodyNavMsg_C_addAuthor(self, self)
        SmallBodyNavMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return SmallBodyNavMsg_C_read(self)


    def __init__(self):
        _SmallBodyNavMsgPayload.SmallBodyNavMsg_C_swiginit(self, _SmallBodyNavMsgPayload.new_SmallBodyNavMsg_C())
    __swig_destroy__ = _SmallBodyNavMsgPayload.delete_SmallBodyNavMsg_C

# Register SmallBodyNavMsg_C in _SmallBodyNavMsgPayload:
_SmallBodyNavMsgPayload.SmallBodyNavMsg_C_swigregister(SmallBodyNavMsg_C)

def SmallBodyNavMsg_cpp_subscribe(subscriber, source):
    return _SmallBodyNavMsgPayload.SmallBodyNavMsg_cpp_subscribe(subscriber, source)

def SmallBodyNavMsg_C_subscribe(subscriber, source):
    return _SmallBodyNavMsgPayload.SmallBodyNavMsg_C_subscribe(subscriber, source)

def SmallBodyNavMsg_addr_subscribe(subscriber, sourceAddr):
    return _SmallBodyNavMsgPayload.SmallBodyNavMsg_addr_subscribe(subscriber, sourceAddr)

def SmallBodyNavMsg_unsubscribe(subscriber):
    return _SmallBodyNavMsgPayload.SmallBodyNavMsg_unsubscribe(subscriber)

def SmallBodyNavMsg_C_isSubscribedTo(subscriber, source):
    return _SmallBodyNavMsgPayload.SmallBodyNavMsg_C_isSubscribedTo(subscriber, source)

def SmallBodyNavMsg_cpp_isSubscribedTo(subscriber, source):
    return _SmallBodyNavMsgPayload.SmallBodyNavMsg_cpp_isSubscribedTo(subscriber, source)

def SmallBodyNavMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _SmallBodyNavMsgPayload.SmallBodyNavMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def SmallBodyNavMsg_C_addAuthor(coowner, data):
    return _SmallBodyNavMsgPayload.SmallBodyNavMsg_C_addAuthor(coowner, data)

def SmallBodyNavMsg_C_init(owner):
    return _SmallBodyNavMsgPayload.SmallBodyNavMsg_C_init(owner)

def SmallBodyNavMsg_C_isLinked(data):
    return _SmallBodyNavMsgPayload.SmallBodyNavMsg_C_isLinked(data)

def SmallBodyNavMsg_C_isWritten(data):
    return _SmallBodyNavMsgPayload.SmallBodyNavMsg_C_isWritten(data)

def SmallBodyNavMsg_C_timeWritten(data):
    return _SmallBodyNavMsgPayload.SmallBodyNavMsg_C_timeWritten(data)

def SmallBodyNavMsg_C_moduleID(data):
    return _SmallBodyNavMsgPayload.SmallBodyNavMsg_C_moduleID(data)

def SmallBodyNavMsg_C_write(data, destination, moduleID, callTime):
    return _SmallBodyNavMsgPayload.SmallBodyNavMsg_C_write(data, destination, moduleID, callTime)

def SmallBodyNavMsg_C_read(source):
    return _SmallBodyNavMsgPayload.SmallBodyNavMsg_C_read(source)

def SmallBodyNavMsg_C_zeroMsgPayload():
    return _SmallBodyNavMsgPayload.SmallBodyNavMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_SmallBodyNavMsgPayload.MsgHeader_isLinked_get, _SmallBodyNavMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_SmallBodyNavMsgPayload.MsgHeader_isWritten_get, _SmallBodyNavMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_SmallBodyNavMsgPayload.MsgHeader_timeWritten_get, _SmallBodyNavMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_SmallBodyNavMsgPayload.MsgHeader_moduleID_get, _SmallBodyNavMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _SmallBodyNavMsgPayload.MsgHeader_swiginit(self, _SmallBodyNavMsgPayload.new_MsgHeader())
    __swig_destroy__ = _SmallBodyNavMsgPayload.delete_MsgHeader

# Register MsgHeader in _SmallBodyNavMsgPayload:
_SmallBodyNavMsgPayload.MsgHeader_swigregister(MsgHeader)

