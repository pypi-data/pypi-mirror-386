# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _PrescribedRotationMsgPayload
else:
    import _PrescribedRotationMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PrescribedRotationMsgPayload.delete_SwigPyIterator

    def value(self):
        return _PrescribedRotationMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _PrescribedRotationMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _PrescribedRotationMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _PrescribedRotationMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _PrescribedRotationMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _PrescribedRotationMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _PrescribedRotationMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _PrescribedRotationMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _PrescribedRotationMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _PrescribedRotationMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _PrescribedRotationMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _PrescribedRotationMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _PrescribedRotationMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _PrescribedRotationMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _PrescribedRotationMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _PrescribedRotationMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _PrescribedRotationMsgPayload:
_PrescribedRotationMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _PrescribedRotationMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _PrescribedRotationMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _PrescribedRotationMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _PrescribedRotationMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _PrescribedRotationMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _PrescribedRotationMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _PrescribedRotationMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _PrescribedRotationMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _PrescribedRotationMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _PrescribedRotationMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _PrescribedRotationMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _PrescribedRotationMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _PrescribedRotationMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _PrescribedRotationMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _PrescribedRotationMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _PrescribedRotationMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PrescribedRotationMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PrescribedRotationMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _PrescribedRotationMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _PrescribedRotationMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _PrescribedRotationMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PrescribedRotationMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PrescribedRotationMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PrescribedRotationMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PrescribedRotationMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PrescribedRotationMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _PrescribedRotationMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _PrescribedRotationMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _PrescribedRotationMsgPayload.TimeVector_empty(self)

    def size(self):
        return _PrescribedRotationMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _PrescribedRotationMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _PrescribedRotationMsgPayload.TimeVector_begin(self)

    def end(self):
        return _PrescribedRotationMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _PrescribedRotationMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _PrescribedRotationMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _PrescribedRotationMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _PrescribedRotationMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _PrescribedRotationMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _PrescribedRotationMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _PrescribedRotationMsgPayload.TimeVector_swiginit(self, _PrescribedRotationMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _PrescribedRotationMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _PrescribedRotationMsgPayload.TimeVector_front(self)

    def back(self):
        return _PrescribedRotationMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _PrescribedRotationMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _PrescribedRotationMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _PrescribedRotationMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _PrescribedRotationMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _PrescribedRotationMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _PrescribedRotationMsgPayload.delete_TimeVector

# Register TimeVector in _PrescribedRotationMsgPayload:
_PrescribedRotationMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PrescribedRotationMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PrescribedRotationMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _PrescribedRotationMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _PrescribedRotationMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _PrescribedRotationMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PrescribedRotationMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PrescribedRotationMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PrescribedRotationMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PrescribedRotationMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PrescribedRotationMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _PrescribedRotationMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _PrescribedRotationMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _PrescribedRotationMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _PrescribedRotationMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _PrescribedRotationMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _PrescribedRotationMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _PrescribedRotationMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _PrescribedRotationMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _PrescribedRotationMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _PrescribedRotationMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _PrescribedRotationMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _PrescribedRotationMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _PrescribedRotationMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _PrescribedRotationMsgPayload.DoubleVector_swiginit(self, _PrescribedRotationMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _PrescribedRotationMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _PrescribedRotationMsgPayload.DoubleVector_front(self)

    def back(self):
        return _PrescribedRotationMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _PrescribedRotationMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _PrescribedRotationMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _PrescribedRotationMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _PrescribedRotationMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _PrescribedRotationMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _PrescribedRotationMsgPayload.delete_DoubleVector

# Register DoubleVector in _PrescribedRotationMsgPayload:
_PrescribedRotationMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PrescribedRotationMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PrescribedRotationMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _PrescribedRotationMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _PrescribedRotationMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _PrescribedRotationMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PrescribedRotationMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PrescribedRotationMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PrescribedRotationMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PrescribedRotationMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PrescribedRotationMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _PrescribedRotationMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _PrescribedRotationMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _PrescribedRotationMsgPayload.StringVector_empty(self)

    def size(self):
        return _PrescribedRotationMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _PrescribedRotationMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _PrescribedRotationMsgPayload.StringVector_begin(self)

    def end(self):
        return _PrescribedRotationMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _PrescribedRotationMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _PrescribedRotationMsgPayload.StringVector_rend(self)

    def clear(self):
        return _PrescribedRotationMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _PrescribedRotationMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _PrescribedRotationMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _PrescribedRotationMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _PrescribedRotationMsgPayload.StringVector_swiginit(self, _PrescribedRotationMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _PrescribedRotationMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _PrescribedRotationMsgPayload.StringVector_front(self)

    def back(self):
        return _PrescribedRotationMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _PrescribedRotationMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _PrescribedRotationMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _PrescribedRotationMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _PrescribedRotationMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _PrescribedRotationMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _PrescribedRotationMsgPayload.delete_StringVector

# Register StringVector in _PrescribedRotationMsgPayload:
_PrescribedRotationMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _PrescribedRotationMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _PrescribedRotationMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _PrescribedRotationMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _PrescribedRotationMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _PrescribedRotationMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _PrescribedRotationMsgPayload.NANO2SEC
SEC2NANO = _PrescribedRotationMsgPayload.SEC2NANO
SEC2HOUR = _PrescribedRotationMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _PrescribedRotationMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _PrescribedRotationMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _PrescribedRotationMsgPayload.secToNano(seconds)
BOOL_FALSE = _PrescribedRotationMsgPayload.BOOL_FALSE
BOOL_TRUE = _PrescribedRotationMsgPayload.BOOL_TRUE
AVAILABLE = _PrescribedRotationMsgPayload.AVAILABLE
UNAVAILABLE = _PrescribedRotationMsgPayload.UNAVAILABLE
BalancedWheels = _PrescribedRotationMsgPayload.BalancedWheels
JitterSimple = _PrescribedRotationMsgPayload.JitterSimple
JitterFullyCoupled = _PrescribedRotationMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PrescribedRotationMsgPayload.SysModel_swiginit(self, _PrescribedRotationMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _PrescribedRotationMsgPayload.delete_SysModel

    def SelfInit(self):
        return _PrescribedRotationMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _PrescribedRotationMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _PrescribedRotationMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _PrescribedRotationMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_PrescribedRotationMsgPayload.SysModel_ModelTag_get, _PrescribedRotationMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_PrescribedRotationMsgPayload.SysModel_CallCounts_get, _PrescribedRotationMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_PrescribedRotationMsgPayload.SysModel_RNGSeed_get, _PrescribedRotationMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_PrescribedRotationMsgPayload.SysModel_moduleID_get, _PrescribedRotationMsgPayload.SysModel_moduleID_set)

# Register SysModel in _PrescribedRotationMsgPayload:
_PrescribedRotationMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _PrescribedRotationMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _PrescribedRotationMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _PrescribedRotationMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _PrescribedRotationMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _PrescribedRotationMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _PrescribedRotationMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _PrescribedRotationMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _PrescribedRotationMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _PrescribedRotationMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _PrescribedRotationMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _PrescribedRotationMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _PrescribedRotationMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class PrescribedRotationMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    omega_PM_P = property(_PrescribedRotationMsgPayload.PrescribedRotationMsgPayload_omega_PM_P_get, _PrescribedRotationMsgPayload.PrescribedRotationMsgPayload_omega_PM_P_set)
    omegaPrime_PM_P = property(_PrescribedRotationMsgPayload.PrescribedRotationMsgPayload_omegaPrime_PM_P_get, _PrescribedRotationMsgPayload.PrescribedRotationMsgPayload_omegaPrime_PM_P_set)
    sigma_PM = property(_PrescribedRotationMsgPayload.PrescribedRotationMsgPayload_sigma_PM_get, _PrescribedRotationMsgPayload.PrescribedRotationMsgPayload_sigma_PM_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _PrescribedRotationMsgPayload.PrescribedRotationMsgPayload_swiginit(self, _PrescribedRotationMsgPayload.new_PrescribedRotationMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _PrescribedRotationMsgPayload.delete_PrescribedRotationMsgPayload

# Register PrescribedRotationMsgPayload in _PrescribedRotationMsgPayload:
_PrescribedRotationMsgPayload.PrescribedRotationMsgPayload_swigregister(PrescribedRotationMsgPayload)

def _pprint_PrescribedRotationMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[PrescribedRotationMsgPayload.__repr__] = _pprint_PrescribedRotationMsgPayload

class PrescribedRotationMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_PrescribedRotationMsgPayload.PrescribedRotationMsgReader_bskLogger_get, _PrescribedRotationMsgPayload.PrescribedRotationMsgReader_bskLogger_set)
    zeroMsgPayload = property(_PrescribedRotationMsgPayload.PrescribedRotationMsgReader_zeroMsgPayload_get, _PrescribedRotationMsgPayload.PrescribedRotationMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _PrescribedRotationMsgPayload.PrescribedRotationMsgReader_swiginit(self, _PrescribedRotationMsgPayload.new_PrescribedRotationMsgReader(*args))

    def __call__(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgReader___call__(self)

    def isLinked(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgReader_isLinked(self)

    def isWritten(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgReader_isWritten(self)

    def timeWritten(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgReader_timeWritten(self)

    def moduleID(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == PrescribedRotationMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.PrescribedRotationMsgPayload import PrescribedRotationMsg_C
            if type(source) == PrescribedRotationMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<PrescribedRotationMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == PrescribedRotationMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.PrescribedRotationMsgPayload import PrescribedRotationMsg_C
        except ImportError:
            return 0

        if type(source) == PrescribedRotationMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _PrescribedRotationMsgPayload.delete_PrescribedRotationMsgReader

# Register PrescribedRotationMsgReader in _PrescribedRotationMsgPayload:
_PrescribedRotationMsgPayload.PrescribedRotationMsgReader_swigregister(PrescribedRotationMsgReader)
class PrescribedRotationMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PrescribedRotationMsgPayload.PrescribedRotationMsgWriter_swiginit(self, _PrescribedRotationMsgPayload.new_PrescribedRotationMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _PrescribedRotationMsgPayload.delete_PrescribedRotationMsgWriter

# Register PrescribedRotationMsgWriter in _PrescribedRotationMsgPayload:
_PrescribedRotationMsgPayload.PrescribedRotationMsgWriter_swigregister(PrescribedRotationMsgWriter)
class PrescribedRotationMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_PrescribedRotationMsgPayload.PrescribedRotationMsg_write_get, _PrescribedRotationMsgPayload.PrescribedRotationMsg_write_set)

    def addSubscriber(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsg_addSubscriber(self)

    def addAuthor(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_PrescribedRotationMsgPayload.PrescribedRotationMsg_zeroMsgPayload_get, _PrescribedRotationMsgPayload.PrescribedRotationMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsg_isLinked(self)

    def getPayloadSize(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _PrescribedRotationMsgPayload.PrescribedRotationMsg_swiginit(self, _PrescribedRotationMsgPayload.new_PrescribedRotationMsg())
    __swig_destroy__ = _PrescribedRotationMsgPayload.delete_PrescribedRotationMsg

# Register PrescribedRotationMsg in _PrescribedRotationMsgPayload:
_PrescribedRotationMsgPayload.PrescribedRotationMsg_swigregister(PrescribedRotationMsg)
class PrescribedRotationMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PrescribedRotationMsgPayload.PrescribedRotationMsgRecorder_swiginit(self, _PrescribedRotationMsgPayload.new_PrescribedRotationMsgRecorder(*args))
    __swig_destroy__ = _PrescribedRotationMsgPayload.delete_PrescribedRotationMsgRecorder

    def SelfInit(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgRecorder___record_vector(self)

    def size(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgRecorder_clear(self)
    bskLogger = property(_PrescribedRotationMsgPayload.PrescribedRotationMsgRecorder_bskLogger_get, _PrescribedRotationMsgPayload.PrescribedRotationMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgRecorder_updateTimeInterval(self, timeDiff)

    def _omega_PM_P_array(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgRecorder__omega_PM_P_array(self)

    @property
    def omega_PM_P(self):
        return self._omega_PM_P_array()


    def _omegaPrime_PM_P_array(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgRecorder__omegaPrime_PM_P_array(self)

    @property
    def omegaPrime_PM_P(self):
        return self._omegaPrime_PM_P_array()


    def _sigma_PM_array(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgRecorder__sigma_PM_array(self)

    @property
    def sigma_PM(self):
        return self._sigma_PM_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register PrescribedRotationMsgRecorder in _PrescribedRotationMsgPayload:
_PrescribedRotationMsgPayload.PrescribedRotationMsgRecorder_swigregister(PrescribedRotationMsgRecorder)
class PrescribedRotationMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgPayloadVector___bool__(self)

    def __len__(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgPayloadVector_pop(self)

    def append(self, x):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgPayloadVector_append(self, x)

    def empty(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgPayloadVector_empty(self)

    def size(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgPayloadVector_size(self)

    def swap(self, v):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgPayloadVector_swap(self, v)

    def begin(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgPayloadVector_begin(self)

    def end(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgPayloadVector_end(self)

    def rbegin(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgPayloadVector_rbegin(self)

    def rend(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgPayloadVector_rend(self)

    def clear(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _PrescribedRotationMsgPayload.PrescribedRotationMsgPayloadVector_swiginit(self, _PrescribedRotationMsgPayload.new_PrescribedRotationMsgPayloadVector(*args))

    def push_back(self, x):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgPayloadVector_push_back(self, x)

    def front(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgPayloadVector_front(self)

    def back(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgPayloadVector_capacity(self)

    def get_all(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _PrescribedRotationMsgPayload.delete_PrescribedRotationMsgPayloadVector

# Register PrescribedRotationMsgPayloadVector in _PrescribedRotationMsgPayload:
_PrescribedRotationMsgPayload.PrescribedRotationMsgPayloadVector_swigregister(PrescribedRotationMsgPayloadVector)
class PrescribedRotationMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsVector_empty(self)

    def size(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsVector_begin(self)

    def end(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsVector_rend(self)

    def clear(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsVector_swiginit(self, _PrescribedRotationMsgPayload.new_PrescribedRotationMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsVector_front(self)

    def back(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _PrescribedRotationMsgPayload.delete_PrescribedRotationMsgOutMsgsVector

# Register PrescribedRotationMsgOutMsgsVector in _PrescribedRotationMsgPayload:
_PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsVector_swigregister(PrescribedRotationMsgOutMsgsVector)
class PrescribedRotationMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsPtrVector_swiginit(self, _PrescribedRotationMsgPayload.new_PrescribedRotationMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _PrescribedRotationMsgPayload.delete_PrescribedRotationMsgOutMsgsPtrVector

# Register PrescribedRotationMsgOutMsgsPtrVector in _PrescribedRotationMsgPayload:
_PrescribedRotationMsgPayload.PrescribedRotationMsgOutMsgsPtrVector_swigregister(PrescribedRotationMsgOutMsgsPtrVector)
class PrescribedRotationMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgInMsgsVector_pop(self)

    def append(self, x):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgInMsgsVector_append(self, x)

    def empty(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgInMsgsVector_empty(self)

    def size(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgInMsgsVector_size(self)

    def swap(self, v):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgInMsgsVector_begin(self)

    def end(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgInMsgsVector_end(self)

    def rbegin(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgInMsgsVector_rend(self)

    def clear(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _PrescribedRotationMsgPayload.PrescribedRotationMsgInMsgsVector_swiginit(self, _PrescribedRotationMsgPayload.new_PrescribedRotationMsgInMsgsVector(*args))

    def push_back(self, x):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgInMsgsVector_front(self)

    def back(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _PrescribedRotationMsgPayload.delete_PrescribedRotationMsgInMsgsVector

# Register PrescribedRotationMsgInMsgsVector in _PrescribedRotationMsgPayload:
_PrescribedRotationMsgPayload.PrescribedRotationMsgInMsgsVector_swigregister(PrescribedRotationMsgInMsgsVector)
class PrescribedRotationMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_PrescribedRotationMsgPayload.PrescribedRotationMsg_C_header_get, _PrescribedRotationMsgPayload.PrescribedRotationMsg_C_header_set)
    payload = property(_PrescribedRotationMsgPayload.PrescribedRotationMsg_C_payload_get, _PrescribedRotationMsgPayload.PrescribedRotationMsg_C_payload_set)
    payloadPointer = property(_PrescribedRotationMsgPayload.PrescribedRotationMsg_C_payloadPointer_get, _PrescribedRotationMsgPayload.PrescribedRotationMsg_C_payloadPointer_set)
    headerPointer = property(_PrescribedRotationMsgPayload.PrescribedRotationMsg_C_headerPointer_get, _PrescribedRotationMsgPayload.PrescribedRotationMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _PrescribedRotationMsgPayload.PrescribedRotationMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import PrescribedRotationMsg
        if type(source) == type(self):
            PrescribedRotationMsg_C_subscribe(self, source)
        elif type(source) == PrescribedRotationMsg:
            PrescribedRotationMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            PrescribedRotationMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe PrescribedRotationMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        PrescribedRotationMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import PrescribedRotationMsg
        if type(source) == type(self):
            return (PrescribedRotationMsg_C_isSubscribedTo(self, source))
        elif type(source) == PrescribedRotationMsg:
            return (PrescribedRotationMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (PrescribedRotationMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        PrescribedRotationMsg_C_addAuthor(self, self)
        if data:
            PrescribedRotationMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        PrescribedRotationMsg_C_addAuthor(self, self)
        PrescribedRotationMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return PrescribedRotationMsg_C_read(self)


    def __init__(self):
        _PrescribedRotationMsgPayload.PrescribedRotationMsg_C_swiginit(self, _PrescribedRotationMsgPayload.new_PrescribedRotationMsg_C())
    __swig_destroy__ = _PrescribedRotationMsgPayload.delete_PrescribedRotationMsg_C

# Register PrescribedRotationMsg_C in _PrescribedRotationMsgPayload:
_PrescribedRotationMsgPayload.PrescribedRotationMsg_C_swigregister(PrescribedRotationMsg_C)

def PrescribedRotationMsg_cpp_subscribe(subscriber, source):
    return _PrescribedRotationMsgPayload.PrescribedRotationMsg_cpp_subscribe(subscriber, source)

def PrescribedRotationMsg_C_subscribe(subscriber, source):
    return _PrescribedRotationMsgPayload.PrescribedRotationMsg_C_subscribe(subscriber, source)

def PrescribedRotationMsg_addr_subscribe(subscriber, sourceAddr):
    return _PrescribedRotationMsgPayload.PrescribedRotationMsg_addr_subscribe(subscriber, sourceAddr)

def PrescribedRotationMsg_unsubscribe(subscriber):
    return _PrescribedRotationMsgPayload.PrescribedRotationMsg_unsubscribe(subscriber)

def PrescribedRotationMsg_C_isSubscribedTo(subscriber, source):
    return _PrescribedRotationMsgPayload.PrescribedRotationMsg_C_isSubscribedTo(subscriber, source)

def PrescribedRotationMsg_cpp_isSubscribedTo(subscriber, source):
    return _PrescribedRotationMsgPayload.PrescribedRotationMsg_cpp_isSubscribedTo(subscriber, source)

def PrescribedRotationMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _PrescribedRotationMsgPayload.PrescribedRotationMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def PrescribedRotationMsg_C_addAuthor(coowner, data):
    return _PrescribedRotationMsgPayload.PrescribedRotationMsg_C_addAuthor(coowner, data)

def PrescribedRotationMsg_C_init(owner):
    return _PrescribedRotationMsgPayload.PrescribedRotationMsg_C_init(owner)

def PrescribedRotationMsg_C_isLinked(data):
    return _PrescribedRotationMsgPayload.PrescribedRotationMsg_C_isLinked(data)

def PrescribedRotationMsg_C_isWritten(data):
    return _PrescribedRotationMsgPayload.PrescribedRotationMsg_C_isWritten(data)

def PrescribedRotationMsg_C_timeWritten(data):
    return _PrescribedRotationMsgPayload.PrescribedRotationMsg_C_timeWritten(data)

def PrescribedRotationMsg_C_moduleID(data):
    return _PrescribedRotationMsgPayload.PrescribedRotationMsg_C_moduleID(data)

def PrescribedRotationMsg_C_write(data, destination, moduleID, callTime):
    return _PrescribedRotationMsgPayload.PrescribedRotationMsg_C_write(data, destination, moduleID, callTime)

def PrescribedRotationMsg_C_read(source):
    return _PrescribedRotationMsgPayload.PrescribedRotationMsg_C_read(source)

def PrescribedRotationMsg_C_zeroMsgPayload():
    return _PrescribedRotationMsgPayload.PrescribedRotationMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_PrescribedRotationMsgPayload.MsgHeader_isLinked_get, _PrescribedRotationMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_PrescribedRotationMsgPayload.MsgHeader_isWritten_get, _PrescribedRotationMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_PrescribedRotationMsgPayload.MsgHeader_timeWritten_get, _PrescribedRotationMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_PrescribedRotationMsgPayload.MsgHeader_moduleID_get, _PrescribedRotationMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _PrescribedRotationMsgPayload.MsgHeader_swiginit(self, _PrescribedRotationMsgPayload.new_MsgHeader())
    __swig_destroy__ = _PrescribedRotationMsgPayload.delete_MsgHeader

# Register MsgHeader in _PrescribedRotationMsgPayload:
_PrescribedRotationMsgPayload.MsgHeader_swigregister(MsgHeader)

