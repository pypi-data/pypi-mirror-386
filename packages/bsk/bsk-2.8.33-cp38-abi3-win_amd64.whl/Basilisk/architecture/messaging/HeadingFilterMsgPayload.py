# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _HeadingFilterMsgPayload
else:
    import _HeadingFilterMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _HeadingFilterMsgPayload.delete_SwigPyIterator

    def value(self):
        return _HeadingFilterMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _HeadingFilterMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _HeadingFilterMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _HeadingFilterMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _HeadingFilterMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _HeadingFilterMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _HeadingFilterMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _HeadingFilterMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _HeadingFilterMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _HeadingFilterMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _HeadingFilterMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _HeadingFilterMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _HeadingFilterMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _HeadingFilterMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _HeadingFilterMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _HeadingFilterMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _HeadingFilterMsgPayload:
_HeadingFilterMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _HeadingFilterMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _HeadingFilterMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _HeadingFilterMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _HeadingFilterMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _HeadingFilterMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _HeadingFilterMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _HeadingFilterMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _HeadingFilterMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _HeadingFilterMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _HeadingFilterMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _HeadingFilterMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _HeadingFilterMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _HeadingFilterMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _HeadingFilterMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _HeadingFilterMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _HeadingFilterMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _HeadingFilterMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _HeadingFilterMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _HeadingFilterMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _HeadingFilterMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _HeadingFilterMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _HeadingFilterMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _HeadingFilterMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _HeadingFilterMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _HeadingFilterMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _HeadingFilterMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _HeadingFilterMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _HeadingFilterMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _HeadingFilterMsgPayload.TimeVector_empty(self)

    def size(self):
        return _HeadingFilterMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _HeadingFilterMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _HeadingFilterMsgPayload.TimeVector_begin(self)

    def end(self):
        return _HeadingFilterMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _HeadingFilterMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _HeadingFilterMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _HeadingFilterMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _HeadingFilterMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _HeadingFilterMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _HeadingFilterMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _HeadingFilterMsgPayload.TimeVector_swiginit(self, _HeadingFilterMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _HeadingFilterMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _HeadingFilterMsgPayload.TimeVector_front(self)

    def back(self):
        return _HeadingFilterMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _HeadingFilterMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _HeadingFilterMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _HeadingFilterMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _HeadingFilterMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _HeadingFilterMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _HeadingFilterMsgPayload.delete_TimeVector

# Register TimeVector in _HeadingFilterMsgPayload:
_HeadingFilterMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _HeadingFilterMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _HeadingFilterMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _HeadingFilterMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _HeadingFilterMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _HeadingFilterMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _HeadingFilterMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _HeadingFilterMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _HeadingFilterMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _HeadingFilterMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _HeadingFilterMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _HeadingFilterMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _HeadingFilterMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _HeadingFilterMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _HeadingFilterMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _HeadingFilterMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _HeadingFilterMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _HeadingFilterMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _HeadingFilterMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _HeadingFilterMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _HeadingFilterMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _HeadingFilterMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _HeadingFilterMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _HeadingFilterMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _HeadingFilterMsgPayload.DoubleVector_swiginit(self, _HeadingFilterMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _HeadingFilterMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _HeadingFilterMsgPayload.DoubleVector_front(self)

    def back(self):
        return _HeadingFilterMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _HeadingFilterMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _HeadingFilterMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _HeadingFilterMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _HeadingFilterMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _HeadingFilterMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _HeadingFilterMsgPayload.delete_DoubleVector

# Register DoubleVector in _HeadingFilterMsgPayload:
_HeadingFilterMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _HeadingFilterMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _HeadingFilterMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _HeadingFilterMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _HeadingFilterMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _HeadingFilterMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _HeadingFilterMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _HeadingFilterMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _HeadingFilterMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _HeadingFilterMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _HeadingFilterMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _HeadingFilterMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _HeadingFilterMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _HeadingFilterMsgPayload.StringVector_empty(self)

    def size(self):
        return _HeadingFilterMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _HeadingFilterMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _HeadingFilterMsgPayload.StringVector_begin(self)

    def end(self):
        return _HeadingFilterMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _HeadingFilterMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _HeadingFilterMsgPayload.StringVector_rend(self)

    def clear(self):
        return _HeadingFilterMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _HeadingFilterMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _HeadingFilterMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _HeadingFilterMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _HeadingFilterMsgPayload.StringVector_swiginit(self, _HeadingFilterMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _HeadingFilterMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _HeadingFilterMsgPayload.StringVector_front(self)

    def back(self):
        return _HeadingFilterMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _HeadingFilterMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _HeadingFilterMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _HeadingFilterMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _HeadingFilterMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _HeadingFilterMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _HeadingFilterMsgPayload.delete_StringVector

# Register StringVector in _HeadingFilterMsgPayload:
_HeadingFilterMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _HeadingFilterMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _HeadingFilterMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _HeadingFilterMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _HeadingFilterMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _HeadingFilterMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _HeadingFilterMsgPayload.NANO2SEC
SEC2NANO = _HeadingFilterMsgPayload.SEC2NANO
SEC2HOUR = _HeadingFilterMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _HeadingFilterMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _HeadingFilterMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _HeadingFilterMsgPayload.secToNano(seconds)
BOOL_FALSE = _HeadingFilterMsgPayload.BOOL_FALSE
BOOL_TRUE = _HeadingFilterMsgPayload.BOOL_TRUE
AVAILABLE = _HeadingFilterMsgPayload.AVAILABLE
UNAVAILABLE = _HeadingFilterMsgPayload.UNAVAILABLE
BalancedWheels = _HeadingFilterMsgPayload.BalancedWheels
JitterSimple = _HeadingFilterMsgPayload.JitterSimple
JitterFullyCoupled = _HeadingFilterMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HeadingFilterMsgPayload.SysModel_swiginit(self, _HeadingFilterMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _HeadingFilterMsgPayload.delete_SysModel

    def SelfInit(self):
        return _HeadingFilterMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _HeadingFilterMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _HeadingFilterMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _HeadingFilterMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_HeadingFilterMsgPayload.SysModel_ModelTag_get, _HeadingFilterMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_HeadingFilterMsgPayload.SysModel_CallCounts_get, _HeadingFilterMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_HeadingFilterMsgPayload.SysModel_RNGSeed_get, _HeadingFilterMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_HeadingFilterMsgPayload.SysModel_moduleID_get, _HeadingFilterMsgPayload.SysModel_moduleID_set)

# Register SysModel in _HeadingFilterMsgPayload:
_HeadingFilterMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _HeadingFilterMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _HeadingFilterMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _HeadingFilterMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _HeadingFilterMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _HeadingFilterMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _HeadingFilterMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _HeadingFilterMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _HeadingFilterMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _HeadingFilterMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _HeadingFilterMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _HeadingFilterMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _HeadingFilterMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

HEAD_N_STATES = _HeadingFilterMsgPayload.HEAD_N_STATES
HEAD_N_STATES_SWITCH = _HeadingFilterMsgPayload.HEAD_N_STATES_SWITCH
OPNAV_MEAS = _HeadingFilterMsgPayload.OPNAV_MEAS
class HeadingFilterMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timeTag = property(_HeadingFilterMsgPayload.HeadingFilterMsgPayload_timeTag_get, _HeadingFilterMsgPayload.HeadingFilterMsgPayload_timeTag_set)
    covar = property(_HeadingFilterMsgPayload.HeadingFilterMsgPayload_covar_get, _HeadingFilterMsgPayload.HeadingFilterMsgPayload_covar_set)
    state = property(_HeadingFilterMsgPayload.HeadingFilterMsgPayload_state_get, _HeadingFilterMsgPayload.HeadingFilterMsgPayload_state_set)
    stateError = property(_HeadingFilterMsgPayload.HeadingFilterMsgPayload_stateError_get, _HeadingFilterMsgPayload.HeadingFilterMsgPayload_stateError_set)
    postFitRes = property(_HeadingFilterMsgPayload.HeadingFilterMsgPayload_postFitRes_get, _HeadingFilterMsgPayload.HeadingFilterMsgPayload_postFitRes_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _HeadingFilterMsgPayload.HeadingFilterMsgPayload_swiginit(self, _HeadingFilterMsgPayload.new_HeadingFilterMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _HeadingFilterMsgPayload.delete_HeadingFilterMsgPayload

# Register HeadingFilterMsgPayload in _HeadingFilterMsgPayload:
_HeadingFilterMsgPayload.HeadingFilterMsgPayload_swigregister(HeadingFilterMsgPayload)

def _pprint_HeadingFilterMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[HeadingFilterMsgPayload.__repr__] = _pprint_HeadingFilterMsgPayload

class HeadingFilterMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_HeadingFilterMsgPayload.HeadingFilterMsgReader_bskLogger_get, _HeadingFilterMsgPayload.HeadingFilterMsgReader_bskLogger_set)
    zeroMsgPayload = property(_HeadingFilterMsgPayload.HeadingFilterMsgReader_zeroMsgPayload_get, _HeadingFilterMsgPayload.HeadingFilterMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _HeadingFilterMsgPayload.HeadingFilterMsgReader_swiginit(self, _HeadingFilterMsgPayload.new_HeadingFilterMsgReader(*args))

    def __call__(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgReader___call__(self)

    def isLinked(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgReader_isLinked(self)

    def isWritten(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgReader_isWritten(self)

    def timeWritten(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgReader_timeWritten(self)

    def moduleID(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _HeadingFilterMsgPayload.HeadingFilterMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _HeadingFilterMsgPayload.HeadingFilterMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _HeadingFilterMsgPayload.HeadingFilterMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _HeadingFilterMsgPayload.HeadingFilterMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _HeadingFilterMsgPayload.HeadingFilterMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _HeadingFilterMsgPayload.HeadingFilterMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _HeadingFilterMsgPayload.HeadingFilterMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _HeadingFilterMsgPayload.HeadingFilterMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _HeadingFilterMsgPayload.HeadingFilterMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == HeadingFilterMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.HeadingFilterMsgPayload import HeadingFilterMsg_C
            if type(source) == HeadingFilterMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<HeadingFilterMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == HeadingFilterMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.HeadingFilterMsgPayload import HeadingFilterMsg_C
        except ImportError:
            return 0

        if type(source) == HeadingFilterMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _HeadingFilterMsgPayload.delete_HeadingFilterMsgReader

# Register HeadingFilterMsgReader in _HeadingFilterMsgPayload:
_HeadingFilterMsgPayload.HeadingFilterMsgReader_swigregister(HeadingFilterMsgReader)
class HeadingFilterMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HeadingFilterMsgPayload.HeadingFilterMsgWriter_swiginit(self, _HeadingFilterMsgPayload.new_HeadingFilterMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _HeadingFilterMsgPayload.HeadingFilterMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _HeadingFilterMsgPayload.delete_HeadingFilterMsgWriter

# Register HeadingFilterMsgWriter in _HeadingFilterMsgPayload:
_HeadingFilterMsgPayload.HeadingFilterMsgWriter_swigregister(HeadingFilterMsgWriter)
class HeadingFilterMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_HeadingFilterMsgPayload.HeadingFilterMsg_write_get, _HeadingFilterMsgPayload.HeadingFilterMsg_write_set)

    def addSubscriber(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsg_addSubscriber(self)

    def addAuthor(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _HeadingFilterMsgPayload.HeadingFilterMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _HeadingFilterMsgPayload.HeadingFilterMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _HeadingFilterMsgPayload.HeadingFilterMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_HeadingFilterMsgPayload.HeadingFilterMsg_zeroMsgPayload_get, _HeadingFilterMsgPayload.HeadingFilterMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsg_isLinked(self)

    def getPayloadSize(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _HeadingFilterMsgPayload.HeadingFilterMsg_swiginit(self, _HeadingFilterMsgPayload.new_HeadingFilterMsg())
    __swig_destroy__ = _HeadingFilterMsgPayload.delete_HeadingFilterMsg

# Register HeadingFilterMsg in _HeadingFilterMsgPayload:
_HeadingFilterMsgPayload.HeadingFilterMsg_swigregister(HeadingFilterMsg)
class HeadingFilterMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HeadingFilterMsgPayload.HeadingFilterMsgRecorder_swiginit(self, _HeadingFilterMsgPayload.new_HeadingFilterMsgRecorder(*args))
    __swig_destroy__ = _HeadingFilterMsgPayload.delete_HeadingFilterMsgRecorder

    def SelfInit(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _HeadingFilterMsgPayload.HeadingFilterMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _HeadingFilterMsgPayload.HeadingFilterMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgRecorder___record_vector(self)

    def size(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _HeadingFilterMsgPayload.HeadingFilterMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgRecorder_clear(self)
    bskLogger = property(_HeadingFilterMsgPayload.HeadingFilterMsgRecorder_bskLogger_get, _HeadingFilterMsgPayload.HeadingFilterMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _HeadingFilterMsgPayload.HeadingFilterMsgRecorder_updateTimeInterval(self, timeDiff)

    def _timeTag_array(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgRecorder__timeTag_array(self)

    @property
    def timeTag(self):
        return self._timeTag_array()


    def _covar_array(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgRecorder__covar_array(self)

    @property
    def covar(self):
        return self._covar_array()


    def _state_array(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgRecorder__state_array(self)

    @property
    def state(self):
        return self._state_array()


    def _stateError_array(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgRecorder__stateError_array(self)

    @property
    def stateError(self):
        return self._stateError_array()


    def _postFitRes_array(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgRecorder__postFitRes_array(self)

    @property
    def postFitRes(self):
        return self._postFitRes_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register HeadingFilterMsgRecorder in _HeadingFilterMsgPayload:
_HeadingFilterMsgPayload.HeadingFilterMsgRecorder_swigregister(HeadingFilterMsgRecorder)
class HeadingFilterMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgPayloadVector___bool__(self)

    def __len__(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _HeadingFilterMsgPayload.HeadingFilterMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _HeadingFilterMsgPayload.HeadingFilterMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _HeadingFilterMsgPayload.HeadingFilterMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _HeadingFilterMsgPayload.HeadingFilterMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _HeadingFilterMsgPayload.HeadingFilterMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _HeadingFilterMsgPayload.HeadingFilterMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgPayloadVector_pop(self)

    def append(self, x):
        return _HeadingFilterMsgPayload.HeadingFilterMsgPayloadVector_append(self, x)

    def empty(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgPayloadVector_empty(self)

    def size(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgPayloadVector_size(self)

    def swap(self, v):
        return _HeadingFilterMsgPayload.HeadingFilterMsgPayloadVector_swap(self, v)

    def begin(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgPayloadVector_begin(self)

    def end(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgPayloadVector_end(self)

    def rbegin(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgPayloadVector_rbegin(self)

    def rend(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgPayloadVector_rend(self)

    def clear(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _HeadingFilterMsgPayload.HeadingFilterMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _HeadingFilterMsgPayload.HeadingFilterMsgPayloadVector_swiginit(self, _HeadingFilterMsgPayload.new_HeadingFilterMsgPayloadVector(*args))

    def push_back(self, x):
        return _HeadingFilterMsgPayload.HeadingFilterMsgPayloadVector_push_back(self, x)

    def front(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgPayloadVector_front(self)

    def back(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _HeadingFilterMsgPayload.HeadingFilterMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _HeadingFilterMsgPayload.HeadingFilterMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _HeadingFilterMsgPayload.HeadingFilterMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _HeadingFilterMsgPayload.HeadingFilterMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgPayloadVector_capacity(self)

    def get_all(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _HeadingFilterMsgPayload.delete_HeadingFilterMsgPayloadVector

# Register HeadingFilterMsgPayloadVector in _HeadingFilterMsgPayload:
_HeadingFilterMsgPayload.HeadingFilterMsgPayloadVector_swigregister(HeadingFilterMsgPayloadVector)
class HeadingFilterMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsVector_empty(self)

    def size(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsVector_begin(self)

    def end(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsVector_rend(self)

    def clear(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsVector_swiginit(self, _HeadingFilterMsgPayload.new_HeadingFilterMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsVector_front(self)

    def back(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _HeadingFilterMsgPayload.delete_HeadingFilterMsgOutMsgsVector

# Register HeadingFilterMsgOutMsgsVector in _HeadingFilterMsgPayload:
_HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsVector_swigregister(HeadingFilterMsgOutMsgsVector)
class HeadingFilterMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsPtrVector_swiginit(self, _HeadingFilterMsgPayload.new_HeadingFilterMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _HeadingFilterMsgPayload.delete_HeadingFilterMsgOutMsgsPtrVector

# Register HeadingFilterMsgOutMsgsPtrVector in _HeadingFilterMsgPayload:
_HeadingFilterMsgPayload.HeadingFilterMsgOutMsgsPtrVector_swigregister(HeadingFilterMsgOutMsgsPtrVector)
class HeadingFilterMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _HeadingFilterMsgPayload.HeadingFilterMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _HeadingFilterMsgPayload.HeadingFilterMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _HeadingFilterMsgPayload.HeadingFilterMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _HeadingFilterMsgPayload.HeadingFilterMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _HeadingFilterMsgPayload.HeadingFilterMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _HeadingFilterMsgPayload.HeadingFilterMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgInMsgsVector_pop(self)

    def append(self, x):
        return _HeadingFilterMsgPayload.HeadingFilterMsgInMsgsVector_append(self, x)

    def empty(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgInMsgsVector_empty(self)

    def size(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgInMsgsVector_size(self)

    def swap(self, v):
        return _HeadingFilterMsgPayload.HeadingFilterMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgInMsgsVector_begin(self)

    def end(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgInMsgsVector_end(self)

    def rbegin(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgInMsgsVector_rend(self)

    def clear(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _HeadingFilterMsgPayload.HeadingFilterMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _HeadingFilterMsgPayload.HeadingFilterMsgInMsgsVector_swiginit(self, _HeadingFilterMsgPayload.new_HeadingFilterMsgInMsgsVector(*args))

    def push_back(self, x):
        return _HeadingFilterMsgPayload.HeadingFilterMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgInMsgsVector_front(self)

    def back(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _HeadingFilterMsgPayload.HeadingFilterMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _HeadingFilterMsgPayload.HeadingFilterMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _HeadingFilterMsgPayload.HeadingFilterMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _HeadingFilterMsgPayload.HeadingFilterMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _HeadingFilterMsgPayload.HeadingFilterMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _HeadingFilterMsgPayload.delete_HeadingFilterMsgInMsgsVector

# Register HeadingFilterMsgInMsgsVector in _HeadingFilterMsgPayload:
_HeadingFilterMsgPayload.HeadingFilterMsgInMsgsVector_swigregister(HeadingFilterMsgInMsgsVector)
class HeadingFilterMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_HeadingFilterMsgPayload.HeadingFilterMsg_C_header_get, _HeadingFilterMsgPayload.HeadingFilterMsg_C_header_set)
    payload = property(_HeadingFilterMsgPayload.HeadingFilterMsg_C_payload_get, _HeadingFilterMsgPayload.HeadingFilterMsg_C_payload_set)
    payloadPointer = property(_HeadingFilterMsgPayload.HeadingFilterMsg_C_payloadPointer_get, _HeadingFilterMsgPayload.HeadingFilterMsg_C_payloadPointer_set)
    headerPointer = property(_HeadingFilterMsgPayload.HeadingFilterMsg_C_headerPointer_get, _HeadingFilterMsgPayload.HeadingFilterMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _HeadingFilterMsgPayload.HeadingFilterMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import HeadingFilterMsg
        if type(source) == type(self):
            HeadingFilterMsg_C_subscribe(self, source)
        elif type(source) == HeadingFilterMsg:
            HeadingFilterMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            HeadingFilterMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe HeadingFilterMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        HeadingFilterMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import HeadingFilterMsg
        if type(source) == type(self):
            return (HeadingFilterMsg_C_isSubscribedTo(self, source))
        elif type(source) == HeadingFilterMsg:
            return (HeadingFilterMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (HeadingFilterMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        HeadingFilterMsg_C_addAuthor(self, self)
        if data:
            HeadingFilterMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        HeadingFilterMsg_C_addAuthor(self, self)
        HeadingFilterMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return HeadingFilterMsg_C_read(self)


    def __init__(self):
        _HeadingFilterMsgPayload.HeadingFilterMsg_C_swiginit(self, _HeadingFilterMsgPayload.new_HeadingFilterMsg_C())
    __swig_destroy__ = _HeadingFilterMsgPayload.delete_HeadingFilterMsg_C

# Register HeadingFilterMsg_C in _HeadingFilterMsgPayload:
_HeadingFilterMsgPayload.HeadingFilterMsg_C_swigregister(HeadingFilterMsg_C)

def HeadingFilterMsg_cpp_subscribe(subscriber, source):
    return _HeadingFilterMsgPayload.HeadingFilterMsg_cpp_subscribe(subscriber, source)

def HeadingFilterMsg_C_subscribe(subscriber, source):
    return _HeadingFilterMsgPayload.HeadingFilterMsg_C_subscribe(subscriber, source)

def HeadingFilterMsg_addr_subscribe(subscriber, sourceAddr):
    return _HeadingFilterMsgPayload.HeadingFilterMsg_addr_subscribe(subscriber, sourceAddr)

def HeadingFilterMsg_unsubscribe(subscriber):
    return _HeadingFilterMsgPayload.HeadingFilterMsg_unsubscribe(subscriber)

def HeadingFilterMsg_C_isSubscribedTo(subscriber, source):
    return _HeadingFilterMsgPayload.HeadingFilterMsg_C_isSubscribedTo(subscriber, source)

def HeadingFilterMsg_cpp_isSubscribedTo(subscriber, source):
    return _HeadingFilterMsgPayload.HeadingFilterMsg_cpp_isSubscribedTo(subscriber, source)

def HeadingFilterMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _HeadingFilterMsgPayload.HeadingFilterMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def HeadingFilterMsg_C_addAuthor(coowner, data):
    return _HeadingFilterMsgPayload.HeadingFilterMsg_C_addAuthor(coowner, data)

def HeadingFilterMsg_C_init(owner):
    return _HeadingFilterMsgPayload.HeadingFilterMsg_C_init(owner)

def HeadingFilterMsg_C_isLinked(data):
    return _HeadingFilterMsgPayload.HeadingFilterMsg_C_isLinked(data)

def HeadingFilterMsg_C_isWritten(data):
    return _HeadingFilterMsgPayload.HeadingFilterMsg_C_isWritten(data)

def HeadingFilterMsg_C_timeWritten(data):
    return _HeadingFilterMsgPayload.HeadingFilterMsg_C_timeWritten(data)

def HeadingFilterMsg_C_moduleID(data):
    return _HeadingFilterMsgPayload.HeadingFilterMsg_C_moduleID(data)

def HeadingFilterMsg_C_write(data, destination, moduleID, callTime):
    return _HeadingFilterMsgPayload.HeadingFilterMsg_C_write(data, destination, moduleID, callTime)

def HeadingFilterMsg_C_read(source):
    return _HeadingFilterMsgPayload.HeadingFilterMsg_C_read(source)

def HeadingFilterMsg_C_zeroMsgPayload():
    return _HeadingFilterMsgPayload.HeadingFilterMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_HeadingFilterMsgPayload.MsgHeader_isLinked_get, _HeadingFilterMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_HeadingFilterMsgPayload.MsgHeader_isWritten_get, _HeadingFilterMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_HeadingFilterMsgPayload.MsgHeader_timeWritten_get, _HeadingFilterMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_HeadingFilterMsgPayload.MsgHeader_moduleID_get, _HeadingFilterMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _HeadingFilterMsgPayload.MsgHeader_swiginit(self, _HeadingFilterMsgPayload.new_MsgHeader())
    __swig_destroy__ = _HeadingFilterMsgPayload.delete_MsgHeader

# Register MsgHeader in _HeadingFilterMsgPayload:
_HeadingFilterMsgPayload.MsgHeader_swigregister(MsgHeader)

