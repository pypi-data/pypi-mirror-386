# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CmdForceBodyMsgPayload
else:
    import _CmdForceBodyMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CmdForceBodyMsgPayload.delete_SwigPyIterator

    def value(self):
        return _CmdForceBodyMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _CmdForceBodyMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _CmdForceBodyMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _CmdForceBodyMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _CmdForceBodyMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _CmdForceBodyMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _CmdForceBodyMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _CmdForceBodyMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _CmdForceBodyMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _CmdForceBodyMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _CmdForceBodyMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _CmdForceBodyMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _CmdForceBodyMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _CmdForceBodyMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _CmdForceBodyMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _CmdForceBodyMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CmdForceBodyMsgPayload:
_CmdForceBodyMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _CmdForceBodyMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _CmdForceBodyMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _CmdForceBodyMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _CmdForceBodyMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _CmdForceBodyMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _CmdForceBodyMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _CmdForceBodyMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _CmdForceBodyMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _CmdForceBodyMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _CmdForceBodyMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _CmdForceBodyMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _CmdForceBodyMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _CmdForceBodyMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _CmdForceBodyMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _CmdForceBodyMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _CmdForceBodyMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CmdForceBodyMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CmdForceBodyMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _CmdForceBodyMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _CmdForceBodyMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _CmdForceBodyMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CmdForceBodyMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CmdForceBodyMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CmdForceBodyMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CmdForceBodyMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CmdForceBodyMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _CmdForceBodyMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _CmdForceBodyMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _CmdForceBodyMsgPayload.TimeVector_empty(self)

    def size(self):
        return _CmdForceBodyMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _CmdForceBodyMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _CmdForceBodyMsgPayload.TimeVector_begin(self)

    def end(self):
        return _CmdForceBodyMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _CmdForceBodyMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _CmdForceBodyMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _CmdForceBodyMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _CmdForceBodyMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _CmdForceBodyMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _CmdForceBodyMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _CmdForceBodyMsgPayload.TimeVector_swiginit(self, _CmdForceBodyMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _CmdForceBodyMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _CmdForceBodyMsgPayload.TimeVector_front(self)

    def back(self):
        return _CmdForceBodyMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _CmdForceBodyMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _CmdForceBodyMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _CmdForceBodyMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _CmdForceBodyMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _CmdForceBodyMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _CmdForceBodyMsgPayload.delete_TimeVector

# Register TimeVector in _CmdForceBodyMsgPayload:
_CmdForceBodyMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CmdForceBodyMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CmdForceBodyMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _CmdForceBodyMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _CmdForceBodyMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _CmdForceBodyMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CmdForceBodyMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CmdForceBodyMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CmdForceBodyMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CmdForceBodyMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CmdForceBodyMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _CmdForceBodyMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _CmdForceBodyMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _CmdForceBodyMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _CmdForceBodyMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _CmdForceBodyMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _CmdForceBodyMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _CmdForceBodyMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _CmdForceBodyMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _CmdForceBodyMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _CmdForceBodyMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _CmdForceBodyMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _CmdForceBodyMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _CmdForceBodyMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _CmdForceBodyMsgPayload.DoubleVector_swiginit(self, _CmdForceBodyMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _CmdForceBodyMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _CmdForceBodyMsgPayload.DoubleVector_front(self)

    def back(self):
        return _CmdForceBodyMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _CmdForceBodyMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _CmdForceBodyMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _CmdForceBodyMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _CmdForceBodyMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _CmdForceBodyMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _CmdForceBodyMsgPayload.delete_DoubleVector

# Register DoubleVector in _CmdForceBodyMsgPayload:
_CmdForceBodyMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CmdForceBodyMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CmdForceBodyMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _CmdForceBodyMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _CmdForceBodyMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _CmdForceBodyMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CmdForceBodyMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CmdForceBodyMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CmdForceBodyMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CmdForceBodyMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CmdForceBodyMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _CmdForceBodyMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _CmdForceBodyMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _CmdForceBodyMsgPayload.StringVector_empty(self)

    def size(self):
        return _CmdForceBodyMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _CmdForceBodyMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _CmdForceBodyMsgPayload.StringVector_begin(self)

    def end(self):
        return _CmdForceBodyMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _CmdForceBodyMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _CmdForceBodyMsgPayload.StringVector_rend(self)

    def clear(self):
        return _CmdForceBodyMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _CmdForceBodyMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _CmdForceBodyMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _CmdForceBodyMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _CmdForceBodyMsgPayload.StringVector_swiginit(self, _CmdForceBodyMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _CmdForceBodyMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _CmdForceBodyMsgPayload.StringVector_front(self)

    def back(self):
        return _CmdForceBodyMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _CmdForceBodyMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _CmdForceBodyMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _CmdForceBodyMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _CmdForceBodyMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _CmdForceBodyMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _CmdForceBodyMsgPayload.delete_StringVector

# Register StringVector in _CmdForceBodyMsgPayload:
_CmdForceBodyMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _CmdForceBodyMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _CmdForceBodyMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _CmdForceBodyMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _CmdForceBodyMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _CmdForceBodyMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _CmdForceBodyMsgPayload.NANO2SEC
SEC2NANO = _CmdForceBodyMsgPayload.SEC2NANO
SEC2HOUR = _CmdForceBodyMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _CmdForceBodyMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _CmdForceBodyMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _CmdForceBodyMsgPayload.secToNano(seconds)
BOOL_FALSE = _CmdForceBodyMsgPayload.BOOL_FALSE
BOOL_TRUE = _CmdForceBodyMsgPayload.BOOL_TRUE
AVAILABLE = _CmdForceBodyMsgPayload.AVAILABLE
UNAVAILABLE = _CmdForceBodyMsgPayload.UNAVAILABLE
BalancedWheels = _CmdForceBodyMsgPayload.BalancedWheels
JitterSimple = _CmdForceBodyMsgPayload.JitterSimple
JitterFullyCoupled = _CmdForceBodyMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CmdForceBodyMsgPayload.SysModel_swiginit(self, _CmdForceBodyMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _CmdForceBodyMsgPayload.delete_SysModel

    def SelfInit(self):
        return _CmdForceBodyMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _CmdForceBodyMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _CmdForceBodyMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _CmdForceBodyMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_CmdForceBodyMsgPayload.SysModel_ModelTag_get, _CmdForceBodyMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_CmdForceBodyMsgPayload.SysModel_CallCounts_get, _CmdForceBodyMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_CmdForceBodyMsgPayload.SysModel_RNGSeed_get, _CmdForceBodyMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_CmdForceBodyMsgPayload.SysModel_moduleID_get, _CmdForceBodyMsgPayload.SysModel_moduleID_set)

# Register SysModel in _CmdForceBodyMsgPayload:
_CmdForceBodyMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _CmdForceBodyMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _CmdForceBodyMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _CmdForceBodyMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _CmdForceBodyMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _CmdForceBodyMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _CmdForceBodyMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _CmdForceBodyMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _CmdForceBodyMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _CmdForceBodyMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _CmdForceBodyMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _CmdForceBodyMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _CmdForceBodyMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class CmdForceBodyMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    forceRequestBody = property(_CmdForceBodyMsgPayload.CmdForceBodyMsgPayload_forceRequestBody_get, _CmdForceBodyMsgPayload.CmdForceBodyMsgPayload_forceRequestBody_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _CmdForceBodyMsgPayload.CmdForceBodyMsgPayload_swiginit(self, _CmdForceBodyMsgPayload.new_CmdForceBodyMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _CmdForceBodyMsgPayload.delete_CmdForceBodyMsgPayload

# Register CmdForceBodyMsgPayload in _CmdForceBodyMsgPayload:
_CmdForceBodyMsgPayload.CmdForceBodyMsgPayload_swigregister(CmdForceBodyMsgPayload)

def _pprint_CmdForceBodyMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[CmdForceBodyMsgPayload.__repr__] = _pprint_CmdForceBodyMsgPayload

class CmdForceBodyMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_CmdForceBodyMsgPayload.CmdForceBodyMsgReader_bskLogger_get, _CmdForceBodyMsgPayload.CmdForceBodyMsgReader_bskLogger_set)
    zeroMsgPayload = property(_CmdForceBodyMsgPayload.CmdForceBodyMsgReader_zeroMsgPayload_get, _CmdForceBodyMsgPayload.CmdForceBodyMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _CmdForceBodyMsgPayload.CmdForceBodyMsgReader_swiginit(self, _CmdForceBodyMsgPayload.new_CmdForceBodyMsgReader(*args))

    def __call__(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgReader___call__(self)

    def isLinked(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgReader_isLinked(self)

    def isWritten(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgReader_isWritten(self)

    def timeWritten(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgReader_timeWritten(self)

    def moduleID(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == CmdForceBodyMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.CmdForceBodyMsgPayload import CmdForceBodyMsg_C
            if type(source) == CmdForceBodyMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<CmdForceBodyMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == CmdForceBodyMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.CmdForceBodyMsgPayload import CmdForceBodyMsg_C
        except ImportError:
            return 0

        if type(source) == CmdForceBodyMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _CmdForceBodyMsgPayload.delete_CmdForceBodyMsgReader

# Register CmdForceBodyMsgReader in _CmdForceBodyMsgPayload:
_CmdForceBodyMsgPayload.CmdForceBodyMsgReader_swigregister(CmdForceBodyMsgReader)
class CmdForceBodyMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CmdForceBodyMsgPayload.CmdForceBodyMsgWriter_swiginit(self, _CmdForceBodyMsgPayload.new_CmdForceBodyMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _CmdForceBodyMsgPayload.delete_CmdForceBodyMsgWriter

# Register CmdForceBodyMsgWriter in _CmdForceBodyMsgPayload:
_CmdForceBodyMsgPayload.CmdForceBodyMsgWriter_swigregister(CmdForceBodyMsgWriter)
class CmdForceBodyMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_CmdForceBodyMsgPayload.CmdForceBodyMsg_write_get, _CmdForceBodyMsgPayload.CmdForceBodyMsg_write_set)

    def addSubscriber(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsg_addSubscriber(self)

    def addAuthor(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_CmdForceBodyMsgPayload.CmdForceBodyMsg_zeroMsgPayload_get, _CmdForceBodyMsgPayload.CmdForceBodyMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsg_isLinked(self)

    def getPayloadSize(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _CmdForceBodyMsgPayload.CmdForceBodyMsg_swiginit(self, _CmdForceBodyMsgPayload.new_CmdForceBodyMsg())
    __swig_destroy__ = _CmdForceBodyMsgPayload.delete_CmdForceBodyMsg

# Register CmdForceBodyMsg in _CmdForceBodyMsgPayload:
_CmdForceBodyMsgPayload.CmdForceBodyMsg_swigregister(CmdForceBodyMsg)
class CmdForceBodyMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CmdForceBodyMsgPayload.CmdForceBodyMsgRecorder_swiginit(self, _CmdForceBodyMsgPayload.new_CmdForceBodyMsgRecorder(*args))
    __swig_destroy__ = _CmdForceBodyMsgPayload.delete_CmdForceBodyMsgRecorder

    def SelfInit(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgRecorder___record_vector(self)

    def size(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgRecorder_clear(self)
    bskLogger = property(_CmdForceBodyMsgPayload.CmdForceBodyMsgRecorder_bskLogger_get, _CmdForceBodyMsgPayload.CmdForceBodyMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgRecorder_updateTimeInterval(self, timeDiff)

    def _forceRequestBody_array(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgRecorder__forceRequestBody_array(self)

    @property
    def forceRequestBody(self):
        return self._forceRequestBody_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register CmdForceBodyMsgRecorder in _CmdForceBodyMsgPayload:
_CmdForceBodyMsgPayload.CmdForceBodyMsgRecorder_swigregister(CmdForceBodyMsgRecorder)
class CmdForceBodyMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgPayloadVector___bool__(self)

    def __len__(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgPayloadVector_pop(self)

    def append(self, x):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgPayloadVector_append(self, x)

    def empty(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgPayloadVector_empty(self)

    def size(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgPayloadVector_size(self)

    def swap(self, v):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgPayloadVector_swap(self, v)

    def begin(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgPayloadVector_begin(self)

    def end(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgPayloadVector_end(self)

    def rbegin(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgPayloadVector_rbegin(self)

    def rend(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgPayloadVector_rend(self)

    def clear(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _CmdForceBodyMsgPayload.CmdForceBodyMsgPayloadVector_swiginit(self, _CmdForceBodyMsgPayload.new_CmdForceBodyMsgPayloadVector(*args))

    def push_back(self, x):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgPayloadVector_push_back(self, x)

    def front(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgPayloadVector_front(self)

    def back(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgPayloadVector_capacity(self)

    def get_all(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _CmdForceBodyMsgPayload.delete_CmdForceBodyMsgPayloadVector

# Register CmdForceBodyMsgPayloadVector in _CmdForceBodyMsgPayload:
_CmdForceBodyMsgPayload.CmdForceBodyMsgPayloadVector_swigregister(CmdForceBodyMsgPayloadVector)
class CmdForceBodyMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsVector_empty(self)

    def size(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsVector_begin(self)

    def end(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsVector_rend(self)

    def clear(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsVector_swiginit(self, _CmdForceBodyMsgPayload.new_CmdForceBodyMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsVector_front(self)

    def back(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _CmdForceBodyMsgPayload.delete_CmdForceBodyMsgOutMsgsVector

# Register CmdForceBodyMsgOutMsgsVector in _CmdForceBodyMsgPayload:
_CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsVector_swigregister(CmdForceBodyMsgOutMsgsVector)
class CmdForceBodyMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsPtrVector_swiginit(self, _CmdForceBodyMsgPayload.new_CmdForceBodyMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _CmdForceBodyMsgPayload.delete_CmdForceBodyMsgOutMsgsPtrVector

# Register CmdForceBodyMsgOutMsgsPtrVector in _CmdForceBodyMsgPayload:
_CmdForceBodyMsgPayload.CmdForceBodyMsgOutMsgsPtrVector_swigregister(CmdForceBodyMsgOutMsgsPtrVector)
class CmdForceBodyMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgInMsgsVector_pop(self)

    def append(self, x):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgInMsgsVector_append(self, x)

    def empty(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgInMsgsVector_empty(self)

    def size(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgInMsgsVector_size(self)

    def swap(self, v):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgInMsgsVector_begin(self)

    def end(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgInMsgsVector_end(self)

    def rbegin(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgInMsgsVector_rend(self)

    def clear(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _CmdForceBodyMsgPayload.CmdForceBodyMsgInMsgsVector_swiginit(self, _CmdForceBodyMsgPayload.new_CmdForceBodyMsgInMsgsVector(*args))

    def push_back(self, x):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgInMsgsVector_front(self)

    def back(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _CmdForceBodyMsgPayload.delete_CmdForceBodyMsgInMsgsVector

# Register CmdForceBodyMsgInMsgsVector in _CmdForceBodyMsgPayload:
_CmdForceBodyMsgPayload.CmdForceBodyMsgInMsgsVector_swigregister(CmdForceBodyMsgInMsgsVector)
class CmdForceBodyMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_CmdForceBodyMsgPayload.CmdForceBodyMsg_C_header_get, _CmdForceBodyMsgPayload.CmdForceBodyMsg_C_header_set)
    payload = property(_CmdForceBodyMsgPayload.CmdForceBodyMsg_C_payload_get, _CmdForceBodyMsgPayload.CmdForceBodyMsg_C_payload_set)
    payloadPointer = property(_CmdForceBodyMsgPayload.CmdForceBodyMsg_C_payloadPointer_get, _CmdForceBodyMsgPayload.CmdForceBodyMsg_C_payloadPointer_set)
    headerPointer = property(_CmdForceBodyMsgPayload.CmdForceBodyMsg_C_headerPointer_get, _CmdForceBodyMsgPayload.CmdForceBodyMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _CmdForceBodyMsgPayload.CmdForceBodyMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import CmdForceBodyMsg
        if type(source) == type(self):
            CmdForceBodyMsg_C_subscribe(self, source)
        elif type(source) == CmdForceBodyMsg:
            CmdForceBodyMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            CmdForceBodyMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe CmdForceBodyMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        CmdForceBodyMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import CmdForceBodyMsg
        if type(source) == type(self):
            return (CmdForceBodyMsg_C_isSubscribedTo(self, source))
        elif type(source) == CmdForceBodyMsg:
            return (CmdForceBodyMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (CmdForceBodyMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        CmdForceBodyMsg_C_addAuthor(self, self)
        if data:
            CmdForceBodyMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        CmdForceBodyMsg_C_addAuthor(self, self)
        CmdForceBodyMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return CmdForceBodyMsg_C_read(self)


    def __init__(self):
        _CmdForceBodyMsgPayload.CmdForceBodyMsg_C_swiginit(self, _CmdForceBodyMsgPayload.new_CmdForceBodyMsg_C())
    __swig_destroy__ = _CmdForceBodyMsgPayload.delete_CmdForceBodyMsg_C

# Register CmdForceBodyMsg_C in _CmdForceBodyMsgPayload:
_CmdForceBodyMsgPayload.CmdForceBodyMsg_C_swigregister(CmdForceBodyMsg_C)

def CmdForceBodyMsg_cpp_subscribe(subscriber, source):
    return _CmdForceBodyMsgPayload.CmdForceBodyMsg_cpp_subscribe(subscriber, source)

def CmdForceBodyMsg_C_subscribe(subscriber, source):
    return _CmdForceBodyMsgPayload.CmdForceBodyMsg_C_subscribe(subscriber, source)

def CmdForceBodyMsg_addr_subscribe(subscriber, sourceAddr):
    return _CmdForceBodyMsgPayload.CmdForceBodyMsg_addr_subscribe(subscriber, sourceAddr)

def CmdForceBodyMsg_unsubscribe(subscriber):
    return _CmdForceBodyMsgPayload.CmdForceBodyMsg_unsubscribe(subscriber)

def CmdForceBodyMsg_C_isSubscribedTo(subscriber, source):
    return _CmdForceBodyMsgPayload.CmdForceBodyMsg_C_isSubscribedTo(subscriber, source)

def CmdForceBodyMsg_cpp_isSubscribedTo(subscriber, source):
    return _CmdForceBodyMsgPayload.CmdForceBodyMsg_cpp_isSubscribedTo(subscriber, source)

def CmdForceBodyMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _CmdForceBodyMsgPayload.CmdForceBodyMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def CmdForceBodyMsg_C_addAuthor(coowner, data):
    return _CmdForceBodyMsgPayload.CmdForceBodyMsg_C_addAuthor(coowner, data)

def CmdForceBodyMsg_C_init(owner):
    return _CmdForceBodyMsgPayload.CmdForceBodyMsg_C_init(owner)

def CmdForceBodyMsg_C_isLinked(data):
    return _CmdForceBodyMsgPayload.CmdForceBodyMsg_C_isLinked(data)

def CmdForceBodyMsg_C_isWritten(data):
    return _CmdForceBodyMsgPayload.CmdForceBodyMsg_C_isWritten(data)

def CmdForceBodyMsg_C_timeWritten(data):
    return _CmdForceBodyMsgPayload.CmdForceBodyMsg_C_timeWritten(data)

def CmdForceBodyMsg_C_moduleID(data):
    return _CmdForceBodyMsgPayload.CmdForceBodyMsg_C_moduleID(data)

def CmdForceBodyMsg_C_write(data, destination, moduleID, callTime):
    return _CmdForceBodyMsgPayload.CmdForceBodyMsg_C_write(data, destination, moduleID, callTime)

def CmdForceBodyMsg_C_read(source):
    return _CmdForceBodyMsgPayload.CmdForceBodyMsg_C_read(source)

def CmdForceBodyMsg_C_zeroMsgPayload():
    return _CmdForceBodyMsgPayload.CmdForceBodyMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_CmdForceBodyMsgPayload.MsgHeader_isLinked_get, _CmdForceBodyMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_CmdForceBodyMsgPayload.MsgHeader_isWritten_get, _CmdForceBodyMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_CmdForceBodyMsgPayload.MsgHeader_timeWritten_get, _CmdForceBodyMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_CmdForceBodyMsgPayload.MsgHeader_moduleID_get, _CmdForceBodyMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _CmdForceBodyMsgPayload.MsgHeader_swiginit(self, _CmdForceBodyMsgPayload.new_MsgHeader())
    __swig_destroy__ = _CmdForceBodyMsgPayload.delete_MsgHeader

# Register MsgHeader in _CmdForceBodyMsgPayload:
_CmdForceBodyMsgPayload.MsgHeader_swigregister(MsgHeader)

