# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ScalarJointStateMsgPayload
else:
    import _ScalarJointStateMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ScalarJointStateMsgPayload.delete_SwigPyIterator

    def value(self):
        return _ScalarJointStateMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ScalarJointStateMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ScalarJointStateMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ScalarJointStateMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ScalarJointStateMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ScalarJointStateMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _ScalarJointStateMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _ScalarJointStateMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _ScalarJointStateMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ScalarJointStateMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ScalarJointStateMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ScalarJointStateMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ScalarJointStateMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ScalarJointStateMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ScalarJointStateMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ScalarJointStateMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ScalarJointStateMsgPayload:
_ScalarJointStateMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _ScalarJointStateMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _ScalarJointStateMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _ScalarJointStateMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _ScalarJointStateMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _ScalarJointStateMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _ScalarJointStateMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _ScalarJointStateMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _ScalarJointStateMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _ScalarJointStateMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _ScalarJointStateMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _ScalarJointStateMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _ScalarJointStateMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _ScalarJointStateMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _ScalarJointStateMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _ScalarJointStateMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _ScalarJointStateMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ScalarJointStateMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ScalarJointStateMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _ScalarJointStateMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _ScalarJointStateMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _ScalarJointStateMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ScalarJointStateMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ScalarJointStateMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ScalarJointStateMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ScalarJointStateMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ScalarJointStateMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _ScalarJointStateMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _ScalarJointStateMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _ScalarJointStateMsgPayload.TimeVector_empty(self)

    def size(self):
        return _ScalarJointStateMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _ScalarJointStateMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _ScalarJointStateMsgPayload.TimeVector_begin(self)

    def end(self):
        return _ScalarJointStateMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _ScalarJointStateMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _ScalarJointStateMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _ScalarJointStateMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _ScalarJointStateMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _ScalarJointStateMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _ScalarJointStateMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _ScalarJointStateMsgPayload.TimeVector_swiginit(self, _ScalarJointStateMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _ScalarJointStateMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _ScalarJointStateMsgPayload.TimeVector_front(self)

    def back(self):
        return _ScalarJointStateMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _ScalarJointStateMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _ScalarJointStateMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _ScalarJointStateMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _ScalarJointStateMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _ScalarJointStateMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _ScalarJointStateMsgPayload.delete_TimeVector

# Register TimeVector in _ScalarJointStateMsgPayload:
_ScalarJointStateMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ScalarJointStateMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ScalarJointStateMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _ScalarJointStateMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _ScalarJointStateMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _ScalarJointStateMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ScalarJointStateMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ScalarJointStateMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ScalarJointStateMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ScalarJointStateMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ScalarJointStateMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _ScalarJointStateMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _ScalarJointStateMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _ScalarJointStateMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _ScalarJointStateMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _ScalarJointStateMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _ScalarJointStateMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _ScalarJointStateMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _ScalarJointStateMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _ScalarJointStateMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _ScalarJointStateMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _ScalarJointStateMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _ScalarJointStateMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _ScalarJointStateMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _ScalarJointStateMsgPayload.DoubleVector_swiginit(self, _ScalarJointStateMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _ScalarJointStateMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _ScalarJointStateMsgPayload.DoubleVector_front(self)

    def back(self):
        return _ScalarJointStateMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _ScalarJointStateMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _ScalarJointStateMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _ScalarJointStateMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _ScalarJointStateMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _ScalarJointStateMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _ScalarJointStateMsgPayload.delete_DoubleVector

# Register DoubleVector in _ScalarJointStateMsgPayload:
_ScalarJointStateMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ScalarJointStateMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ScalarJointStateMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _ScalarJointStateMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _ScalarJointStateMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _ScalarJointStateMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ScalarJointStateMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ScalarJointStateMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ScalarJointStateMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ScalarJointStateMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ScalarJointStateMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _ScalarJointStateMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _ScalarJointStateMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _ScalarJointStateMsgPayload.StringVector_empty(self)

    def size(self):
        return _ScalarJointStateMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _ScalarJointStateMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _ScalarJointStateMsgPayload.StringVector_begin(self)

    def end(self):
        return _ScalarJointStateMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _ScalarJointStateMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _ScalarJointStateMsgPayload.StringVector_rend(self)

    def clear(self):
        return _ScalarJointStateMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _ScalarJointStateMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _ScalarJointStateMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _ScalarJointStateMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _ScalarJointStateMsgPayload.StringVector_swiginit(self, _ScalarJointStateMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _ScalarJointStateMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _ScalarJointStateMsgPayload.StringVector_front(self)

    def back(self):
        return _ScalarJointStateMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _ScalarJointStateMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _ScalarJointStateMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _ScalarJointStateMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _ScalarJointStateMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _ScalarJointStateMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _ScalarJointStateMsgPayload.delete_StringVector

# Register StringVector in _ScalarJointStateMsgPayload:
_ScalarJointStateMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _ScalarJointStateMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _ScalarJointStateMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _ScalarJointStateMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _ScalarJointStateMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _ScalarJointStateMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _ScalarJointStateMsgPayload.NANO2SEC
SEC2NANO = _ScalarJointStateMsgPayload.SEC2NANO
SEC2HOUR = _ScalarJointStateMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _ScalarJointStateMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _ScalarJointStateMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _ScalarJointStateMsgPayload.secToNano(seconds)
BOOL_FALSE = _ScalarJointStateMsgPayload.BOOL_FALSE
BOOL_TRUE = _ScalarJointStateMsgPayload.BOOL_TRUE
AVAILABLE = _ScalarJointStateMsgPayload.AVAILABLE
UNAVAILABLE = _ScalarJointStateMsgPayload.UNAVAILABLE
BalancedWheels = _ScalarJointStateMsgPayload.BalancedWheels
JitterSimple = _ScalarJointStateMsgPayload.JitterSimple
JitterFullyCoupled = _ScalarJointStateMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ScalarJointStateMsgPayload.SysModel_swiginit(self, _ScalarJointStateMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _ScalarJointStateMsgPayload.delete_SysModel

    def SelfInit(self):
        return _ScalarJointStateMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _ScalarJointStateMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _ScalarJointStateMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _ScalarJointStateMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_ScalarJointStateMsgPayload.SysModel_ModelTag_get, _ScalarJointStateMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_ScalarJointStateMsgPayload.SysModel_CallCounts_get, _ScalarJointStateMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_ScalarJointStateMsgPayload.SysModel_RNGSeed_get, _ScalarJointStateMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_ScalarJointStateMsgPayload.SysModel_moduleID_get, _ScalarJointStateMsgPayload.SysModel_moduleID_set)

# Register SysModel in _ScalarJointStateMsgPayload:
_ScalarJointStateMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _ScalarJointStateMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _ScalarJointStateMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _ScalarJointStateMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _ScalarJointStateMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _ScalarJointStateMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _ScalarJointStateMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _ScalarJointStateMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _ScalarJointStateMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _ScalarJointStateMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _ScalarJointStateMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _ScalarJointStateMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _ScalarJointStateMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class ScalarJointStateMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    state = property(_ScalarJointStateMsgPayload.ScalarJointStateMsgPayload_state_get, _ScalarJointStateMsgPayload.ScalarJointStateMsgPayload_state_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _ScalarJointStateMsgPayload.ScalarJointStateMsgPayload_swiginit(self, _ScalarJointStateMsgPayload.new_ScalarJointStateMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _ScalarJointStateMsgPayload.delete_ScalarJointStateMsgPayload

# Register ScalarJointStateMsgPayload in _ScalarJointStateMsgPayload:
_ScalarJointStateMsgPayload.ScalarJointStateMsgPayload_swigregister(ScalarJointStateMsgPayload)

def _pprint_ScalarJointStateMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[ScalarJointStateMsgPayload.__repr__] = _pprint_ScalarJointStateMsgPayload

class ScalarJointStateMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_ScalarJointStateMsgPayload.ScalarJointStateMsgReader_bskLogger_get, _ScalarJointStateMsgPayload.ScalarJointStateMsgReader_bskLogger_set)
    zeroMsgPayload = property(_ScalarJointStateMsgPayload.ScalarJointStateMsgReader_zeroMsgPayload_get, _ScalarJointStateMsgPayload.ScalarJointStateMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _ScalarJointStateMsgPayload.ScalarJointStateMsgReader_swiginit(self, _ScalarJointStateMsgPayload.new_ScalarJointStateMsgReader(*args))

    def __call__(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgReader___call__(self)

    def isLinked(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgReader_isLinked(self)

    def isWritten(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgReader_isWritten(self)

    def timeWritten(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgReader_timeWritten(self)

    def moduleID(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == ScalarJointStateMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.ScalarJointStateMsgPayload import ScalarJointStateMsg_C
            if type(source) == ScalarJointStateMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<ScalarJointStateMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == ScalarJointStateMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.ScalarJointStateMsgPayload import ScalarJointStateMsg_C
        except ImportError:
            return 0

        if type(source) == ScalarJointStateMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _ScalarJointStateMsgPayload.delete_ScalarJointStateMsgReader

# Register ScalarJointStateMsgReader in _ScalarJointStateMsgPayload:
_ScalarJointStateMsgPayload.ScalarJointStateMsgReader_swigregister(ScalarJointStateMsgReader)
class ScalarJointStateMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ScalarJointStateMsgPayload.ScalarJointStateMsgWriter_swiginit(self, _ScalarJointStateMsgPayload.new_ScalarJointStateMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _ScalarJointStateMsgPayload.delete_ScalarJointStateMsgWriter

# Register ScalarJointStateMsgWriter in _ScalarJointStateMsgPayload:
_ScalarJointStateMsgPayload.ScalarJointStateMsgWriter_swigregister(ScalarJointStateMsgWriter)
class ScalarJointStateMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_ScalarJointStateMsgPayload.ScalarJointStateMsg_write_get, _ScalarJointStateMsgPayload.ScalarJointStateMsg_write_set)

    def addSubscriber(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsg_addSubscriber(self)

    def addAuthor(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_ScalarJointStateMsgPayload.ScalarJointStateMsg_zeroMsgPayload_get, _ScalarJointStateMsgPayload.ScalarJointStateMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsg_isLinked(self)

    def getPayloadSize(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _ScalarJointStateMsgPayload.ScalarJointStateMsg_swiginit(self, _ScalarJointStateMsgPayload.new_ScalarJointStateMsg())
    __swig_destroy__ = _ScalarJointStateMsgPayload.delete_ScalarJointStateMsg

# Register ScalarJointStateMsg in _ScalarJointStateMsgPayload:
_ScalarJointStateMsgPayload.ScalarJointStateMsg_swigregister(ScalarJointStateMsg)
class ScalarJointStateMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ScalarJointStateMsgPayload.ScalarJointStateMsgRecorder_swiginit(self, _ScalarJointStateMsgPayload.new_ScalarJointStateMsgRecorder(*args))
    __swig_destroy__ = _ScalarJointStateMsgPayload.delete_ScalarJointStateMsgRecorder

    def SelfInit(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgRecorder___record_vector(self)

    def size(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgRecorder_clear(self)
    bskLogger = property(_ScalarJointStateMsgPayload.ScalarJointStateMsgRecorder_bskLogger_get, _ScalarJointStateMsgPayload.ScalarJointStateMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgRecorder_updateTimeInterval(self, timeDiff)

    def _state_array(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgRecorder__state_array(self)

    @property
    def state(self):
        return self._state_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register ScalarJointStateMsgRecorder in _ScalarJointStateMsgPayload:
_ScalarJointStateMsgPayload.ScalarJointStateMsgRecorder_swigregister(ScalarJointStateMsgRecorder)
class ScalarJointStateMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgPayloadVector___bool__(self)

    def __len__(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgPayloadVector_pop(self)

    def append(self, x):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgPayloadVector_append(self, x)

    def empty(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgPayloadVector_empty(self)

    def size(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgPayloadVector_size(self)

    def swap(self, v):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgPayloadVector_swap(self, v)

    def begin(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgPayloadVector_begin(self)

    def end(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgPayloadVector_end(self)

    def rbegin(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgPayloadVector_rbegin(self)

    def rend(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgPayloadVector_rend(self)

    def clear(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _ScalarJointStateMsgPayload.ScalarJointStateMsgPayloadVector_swiginit(self, _ScalarJointStateMsgPayload.new_ScalarJointStateMsgPayloadVector(*args))

    def push_back(self, x):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgPayloadVector_push_back(self, x)

    def front(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgPayloadVector_front(self)

    def back(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgPayloadVector_capacity(self)

    def get_all(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _ScalarJointStateMsgPayload.delete_ScalarJointStateMsgPayloadVector

# Register ScalarJointStateMsgPayloadVector in _ScalarJointStateMsgPayload:
_ScalarJointStateMsgPayload.ScalarJointStateMsgPayloadVector_swigregister(ScalarJointStateMsgPayloadVector)
class ScalarJointStateMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsVector_empty(self)

    def size(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsVector_begin(self)

    def end(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsVector_rend(self)

    def clear(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsVector_swiginit(self, _ScalarJointStateMsgPayload.new_ScalarJointStateMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsVector_front(self)

    def back(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _ScalarJointStateMsgPayload.delete_ScalarJointStateMsgOutMsgsVector

# Register ScalarJointStateMsgOutMsgsVector in _ScalarJointStateMsgPayload:
_ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsVector_swigregister(ScalarJointStateMsgOutMsgsVector)
class ScalarJointStateMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsPtrVector_swiginit(self, _ScalarJointStateMsgPayload.new_ScalarJointStateMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _ScalarJointStateMsgPayload.delete_ScalarJointStateMsgOutMsgsPtrVector

# Register ScalarJointStateMsgOutMsgsPtrVector in _ScalarJointStateMsgPayload:
_ScalarJointStateMsgPayload.ScalarJointStateMsgOutMsgsPtrVector_swigregister(ScalarJointStateMsgOutMsgsPtrVector)
class ScalarJointStateMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgInMsgsVector_pop(self)

    def append(self, x):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgInMsgsVector_append(self, x)

    def empty(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgInMsgsVector_empty(self)

    def size(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgInMsgsVector_size(self)

    def swap(self, v):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgInMsgsVector_begin(self)

    def end(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgInMsgsVector_end(self)

    def rbegin(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgInMsgsVector_rend(self)

    def clear(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _ScalarJointStateMsgPayload.ScalarJointStateMsgInMsgsVector_swiginit(self, _ScalarJointStateMsgPayload.new_ScalarJointStateMsgInMsgsVector(*args))

    def push_back(self, x):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgInMsgsVector_front(self)

    def back(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _ScalarJointStateMsgPayload.delete_ScalarJointStateMsgInMsgsVector

# Register ScalarJointStateMsgInMsgsVector in _ScalarJointStateMsgPayload:
_ScalarJointStateMsgPayload.ScalarJointStateMsgInMsgsVector_swigregister(ScalarJointStateMsgInMsgsVector)
class ScalarJointStateMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_ScalarJointStateMsgPayload.ScalarJointStateMsg_C_header_get, _ScalarJointStateMsgPayload.ScalarJointStateMsg_C_header_set)
    payload = property(_ScalarJointStateMsgPayload.ScalarJointStateMsg_C_payload_get, _ScalarJointStateMsgPayload.ScalarJointStateMsg_C_payload_set)
    payloadPointer = property(_ScalarJointStateMsgPayload.ScalarJointStateMsg_C_payloadPointer_get, _ScalarJointStateMsgPayload.ScalarJointStateMsg_C_payloadPointer_set)
    headerPointer = property(_ScalarJointStateMsgPayload.ScalarJointStateMsg_C_headerPointer_get, _ScalarJointStateMsgPayload.ScalarJointStateMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _ScalarJointStateMsgPayload.ScalarJointStateMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import ScalarJointStateMsg
        if type(source) == type(self):
            ScalarJointStateMsg_C_subscribe(self, source)
        elif type(source) == ScalarJointStateMsg:
            ScalarJointStateMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            ScalarJointStateMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe ScalarJointStateMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        ScalarJointStateMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import ScalarJointStateMsg
        if type(source) == type(self):
            return (ScalarJointStateMsg_C_isSubscribedTo(self, source))
        elif type(source) == ScalarJointStateMsg:
            return (ScalarJointStateMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (ScalarJointStateMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        ScalarJointStateMsg_C_addAuthor(self, self)
        if data:
            ScalarJointStateMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        ScalarJointStateMsg_C_addAuthor(self, self)
        ScalarJointStateMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return ScalarJointStateMsg_C_read(self)


    def __init__(self):
        _ScalarJointStateMsgPayload.ScalarJointStateMsg_C_swiginit(self, _ScalarJointStateMsgPayload.new_ScalarJointStateMsg_C())
    __swig_destroy__ = _ScalarJointStateMsgPayload.delete_ScalarJointStateMsg_C

# Register ScalarJointStateMsg_C in _ScalarJointStateMsgPayload:
_ScalarJointStateMsgPayload.ScalarJointStateMsg_C_swigregister(ScalarJointStateMsg_C)

def ScalarJointStateMsg_cpp_subscribe(subscriber, source):
    return _ScalarJointStateMsgPayload.ScalarJointStateMsg_cpp_subscribe(subscriber, source)

def ScalarJointStateMsg_C_subscribe(subscriber, source):
    return _ScalarJointStateMsgPayload.ScalarJointStateMsg_C_subscribe(subscriber, source)

def ScalarJointStateMsg_addr_subscribe(subscriber, sourceAddr):
    return _ScalarJointStateMsgPayload.ScalarJointStateMsg_addr_subscribe(subscriber, sourceAddr)

def ScalarJointStateMsg_unsubscribe(subscriber):
    return _ScalarJointStateMsgPayload.ScalarJointStateMsg_unsubscribe(subscriber)

def ScalarJointStateMsg_C_isSubscribedTo(subscriber, source):
    return _ScalarJointStateMsgPayload.ScalarJointStateMsg_C_isSubscribedTo(subscriber, source)

def ScalarJointStateMsg_cpp_isSubscribedTo(subscriber, source):
    return _ScalarJointStateMsgPayload.ScalarJointStateMsg_cpp_isSubscribedTo(subscriber, source)

def ScalarJointStateMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _ScalarJointStateMsgPayload.ScalarJointStateMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def ScalarJointStateMsg_C_addAuthor(coowner, data):
    return _ScalarJointStateMsgPayload.ScalarJointStateMsg_C_addAuthor(coowner, data)

def ScalarJointStateMsg_C_init(owner):
    return _ScalarJointStateMsgPayload.ScalarJointStateMsg_C_init(owner)

def ScalarJointStateMsg_C_isLinked(data):
    return _ScalarJointStateMsgPayload.ScalarJointStateMsg_C_isLinked(data)

def ScalarJointStateMsg_C_isWritten(data):
    return _ScalarJointStateMsgPayload.ScalarJointStateMsg_C_isWritten(data)

def ScalarJointStateMsg_C_timeWritten(data):
    return _ScalarJointStateMsgPayload.ScalarJointStateMsg_C_timeWritten(data)

def ScalarJointStateMsg_C_moduleID(data):
    return _ScalarJointStateMsgPayload.ScalarJointStateMsg_C_moduleID(data)

def ScalarJointStateMsg_C_write(data, destination, moduleID, callTime):
    return _ScalarJointStateMsgPayload.ScalarJointStateMsg_C_write(data, destination, moduleID, callTime)

def ScalarJointStateMsg_C_read(source):
    return _ScalarJointStateMsgPayload.ScalarJointStateMsg_C_read(source)

def ScalarJointStateMsg_C_zeroMsgPayload():
    return _ScalarJointStateMsgPayload.ScalarJointStateMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_ScalarJointStateMsgPayload.MsgHeader_isLinked_get, _ScalarJointStateMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_ScalarJointStateMsgPayload.MsgHeader_isWritten_get, _ScalarJointStateMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_ScalarJointStateMsgPayload.MsgHeader_timeWritten_get, _ScalarJointStateMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_ScalarJointStateMsgPayload.MsgHeader_moduleID_get, _ScalarJointStateMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _ScalarJointStateMsgPayload.MsgHeader_swiginit(self, _ScalarJointStateMsgPayload.new_MsgHeader())
    __swig_destroy__ = _ScalarJointStateMsgPayload.delete_MsgHeader

# Register MsgHeader in _ScalarJointStateMsgPayload:
_ScalarJointStateMsgPayload.MsgHeader_swigregister(MsgHeader)

