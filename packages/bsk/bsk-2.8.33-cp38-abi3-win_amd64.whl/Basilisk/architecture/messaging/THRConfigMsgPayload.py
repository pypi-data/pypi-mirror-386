# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _THRConfigMsgPayload
else:
    import _THRConfigMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _THRConfigMsgPayload.delete_SwigPyIterator

    def value(self):
        return _THRConfigMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _THRConfigMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _THRConfigMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _THRConfigMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _THRConfigMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _THRConfigMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _THRConfigMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _THRConfigMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _THRConfigMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _THRConfigMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _THRConfigMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _THRConfigMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _THRConfigMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _THRConfigMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _THRConfigMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _THRConfigMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _THRConfigMsgPayload:
_THRConfigMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _THRConfigMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _THRConfigMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _THRConfigMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _THRConfigMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _THRConfigMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _THRConfigMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _THRConfigMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _THRConfigMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _THRConfigMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _THRConfigMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _THRConfigMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _THRConfigMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _THRConfigMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _THRConfigMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _THRConfigMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _THRConfigMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _THRConfigMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _THRConfigMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _THRConfigMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _THRConfigMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _THRConfigMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _THRConfigMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _THRConfigMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _THRConfigMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _THRConfigMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _THRConfigMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _THRConfigMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _THRConfigMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _THRConfigMsgPayload.TimeVector_empty(self)

    def size(self):
        return _THRConfigMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _THRConfigMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _THRConfigMsgPayload.TimeVector_begin(self)

    def end(self):
        return _THRConfigMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _THRConfigMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _THRConfigMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _THRConfigMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _THRConfigMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _THRConfigMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _THRConfigMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _THRConfigMsgPayload.TimeVector_swiginit(self, _THRConfigMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _THRConfigMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _THRConfigMsgPayload.TimeVector_front(self)

    def back(self):
        return _THRConfigMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _THRConfigMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _THRConfigMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _THRConfigMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _THRConfigMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _THRConfigMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _THRConfigMsgPayload.delete_TimeVector

# Register TimeVector in _THRConfigMsgPayload:
_THRConfigMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _THRConfigMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _THRConfigMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _THRConfigMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _THRConfigMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _THRConfigMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _THRConfigMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _THRConfigMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _THRConfigMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _THRConfigMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _THRConfigMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _THRConfigMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _THRConfigMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _THRConfigMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _THRConfigMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _THRConfigMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _THRConfigMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _THRConfigMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _THRConfigMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _THRConfigMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _THRConfigMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _THRConfigMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _THRConfigMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _THRConfigMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _THRConfigMsgPayload.DoubleVector_swiginit(self, _THRConfigMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _THRConfigMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _THRConfigMsgPayload.DoubleVector_front(self)

    def back(self):
        return _THRConfigMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _THRConfigMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _THRConfigMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _THRConfigMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _THRConfigMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _THRConfigMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _THRConfigMsgPayload.delete_DoubleVector

# Register DoubleVector in _THRConfigMsgPayload:
_THRConfigMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _THRConfigMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _THRConfigMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _THRConfigMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _THRConfigMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _THRConfigMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _THRConfigMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _THRConfigMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _THRConfigMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _THRConfigMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _THRConfigMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _THRConfigMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _THRConfigMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _THRConfigMsgPayload.StringVector_empty(self)

    def size(self):
        return _THRConfigMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _THRConfigMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _THRConfigMsgPayload.StringVector_begin(self)

    def end(self):
        return _THRConfigMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _THRConfigMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _THRConfigMsgPayload.StringVector_rend(self)

    def clear(self):
        return _THRConfigMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _THRConfigMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _THRConfigMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _THRConfigMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _THRConfigMsgPayload.StringVector_swiginit(self, _THRConfigMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _THRConfigMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _THRConfigMsgPayload.StringVector_front(self)

    def back(self):
        return _THRConfigMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _THRConfigMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _THRConfigMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _THRConfigMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _THRConfigMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _THRConfigMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _THRConfigMsgPayload.delete_StringVector

# Register StringVector in _THRConfigMsgPayload:
_THRConfigMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _THRConfigMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _THRConfigMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _THRConfigMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _THRConfigMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _THRConfigMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _THRConfigMsgPayload.NANO2SEC
SEC2NANO = _THRConfigMsgPayload.SEC2NANO
SEC2HOUR = _THRConfigMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _THRConfigMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _THRConfigMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _THRConfigMsgPayload.secToNano(seconds)
BOOL_FALSE = _THRConfigMsgPayload.BOOL_FALSE
BOOL_TRUE = _THRConfigMsgPayload.BOOL_TRUE
AVAILABLE = _THRConfigMsgPayload.AVAILABLE
UNAVAILABLE = _THRConfigMsgPayload.UNAVAILABLE
BalancedWheels = _THRConfigMsgPayload.BalancedWheels
JitterSimple = _THRConfigMsgPayload.JitterSimple
JitterFullyCoupled = _THRConfigMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _THRConfigMsgPayload.SysModel_swiginit(self, _THRConfigMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _THRConfigMsgPayload.delete_SysModel

    def SelfInit(self):
        return _THRConfigMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _THRConfigMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _THRConfigMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _THRConfigMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_THRConfigMsgPayload.SysModel_ModelTag_get, _THRConfigMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_THRConfigMsgPayload.SysModel_CallCounts_get, _THRConfigMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_THRConfigMsgPayload.SysModel_RNGSeed_get, _THRConfigMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_THRConfigMsgPayload.SysModel_moduleID_get, _THRConfigMsgPayload.SysModel_moduleID_set)

# Register SysModel in _THRConfigMsgPayload:
_THRConfigMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _THRConfigMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _THRConfigMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _THRConfigMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _THRConfigMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _THRConfigMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _THRConfigMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _THRConfigMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _THRConfigMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _THRConfigMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _THRConfigMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _THRConfigMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _THRConfigMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class THRConfigMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rThrust_B = property(_THRConfigMsgPayload.THRConfigMsgPayload_rThrust_B_get, _THRConfigMsgPayload.THRConfigMsgPayload_rThrust_B_set)
    tHatThrust_B = property(_THRConfigMsgPayload.THRConfigMsgPayload_tHatThrust_B_get, _THRConfigMsgPayload.THRConfigMsgPayload_tHatThrust_B_set)
    maxThrust = property(_THRConfigMsgPayload.THRConfigMsgPayload_maxThrust_get, _THRConfigMsgPayload.THRConfigMsgPayload_maxThrust_set)
    swirlTorque = property(_THRConfigMsgPayload.THRConfigMsgPayload_swirlTorque_get, _THRConfigMsgPayload.THRConfigMsgPayload_swirlTorque_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _THRConfigMsgPayload.THRConfigMsgPayload_swiginit(self, _THRConfigMsgPayload.new_THRConfigMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _THRConfigMsgPayload.delete_THRConfigMsgPayload

# Register THRConfigMsgPayload in _THRConfigMsgPayload:
_THRConfigMsgPayload.THRConfigMsgPayload_swigregister(THRConfigMsgPayload)

def _pprint_THRConfigMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[THRConfigMsgPayload.__repr__] = _pprint_THRConfigMsgPayload

class THRConfigMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_THRConfigMsgPayload.THRConfigMsgReader_bskLogger_get, _THRConfigMsgPayload.THRConfigMsgReader_bskLogger_set)
    zeroMsgPayload = property(_THRConfigMsgPayload.THRConfigMsgReader_zeroMsgPayload_get, _THRConfigMsgPayload.THRConfigMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _THRConfigMsgPayload.THRConfigMsgReader_swiginit(self, _THRConfigMsgPayload.new_THRConfigMsgReader(*args))

    def __call__(self):
        return _THRConfigMsgPayload.THRConfigMsgReader___call__(self)

    def isLinked(self):
        return _THRConfigMsgPayload.THRConfigMsgReader_isLinked(self)

    def isWritten(self):
        return _THRConfigMsgPayload.THRConfigMsgReader_isWritten(self)

    def timeWritten(self):
        return _THRConfigMsgPayload.THRConfigMsgReader_timeWritten(self)

    def moduleID(self):
        return _THRConfigMsgPayload.THRConfigMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _THRConfigMsgPayload.THRConfigMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _THRConfigMsgPayload.THRConfigMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _THRConfigMsgPayload.THRConfigMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _THRConfigMsgPayload.THRConfigMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _THRConfigMsgPayload.THRConfigMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _THRConfigMsgPayload.THRConfigMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _THRConfigMsgPayload.THRConfigMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _THRConfigMsgPayload.THRConfigMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _THRConfigMsgPayload.THRConfigMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _THRConfigMsgPayload.THRConfigMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == THRConfigMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.THRConfigMsgPayload import THRConfigMsg_C
            if type(source) == THRConfigMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<THRConfigMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == THRConfigMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.THRConfigMsgPayload import THRConfigMsg_C
        except ImportError:
            return 0

        if type(source) == THRConfigMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _THRConfigMsgPayload.delete_THRConfigMsgReader

# Register THRConfigMsgReader in _THRConfigMsgPayload:
_THRConfigMsgPayload.THRConfigMsgReader_swigregister(THRConfigMsgReader)
class THRConfigMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _THRConfigMsgPayload.THRConfigMsgWriter_swiginit(self, _THRConfigMsgPayload.new_THRConfigMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _THRConfigMsgPayload.THRConfigMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _THRConfigMsgPayload.delete_THRConfigMsgWriter

# Register THRConfigMsgWriter in _THRConfigMsgPayload:
_THRConfigMsgPayload.THRConfigMsgWriter_swigregister(THRConfigMsgWriter)
class THRConfigMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_THRConfigMsgPayload.THRConfigMsg_write_get, _THRConfigMsgPayload.THRConfigMsg_write_set)

    def addSubscriber(self):
        return _THRConfigMsgPayload.THRConfigMsg_addSubscriber(self)

    def addAuthor(self):
        return _THRConfigMsgPayload.THRConfigMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _THRConfigMsgPayload.THRConfigMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _THRConfigMsgPayload.THRConfigMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _THRConfigMsgPayload.THRConfigMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_THRConfigMsgPayload.THRConfigMsg_zeroMsgPayload_get, _THRConfigMsgPayload.THRConfigMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _THRConfigMsgPayload.THRConfigMsg_isLinked(self)

    def getPayloadSize(self):
        return _THRConfigMsgPayload.THRConfigMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _THRConfigMsgPayload.THRConfigMsg_swiginit(self, _THRConfigMsgPayload.new_THRConfigMsg())
    __swig_destroy__ = _THRConfigMsgPayload.delete_THRConfigMsg

# Register THRConfigMsg in _THRConfigMsgPayload:
_THRConfigMsgPayload.THRConfigMsg_swigregister(THRConfigMsg)
class THRConfigMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _THRConfigMsgPayload.THRConfigMsgRecorder_swiginit(self, _THRConfigMsgPayload.new_THRConfigMsgRecorder(*args))
    __swig_destroy__ = _THRConfigMsgPayload.delete_THRConfigMsgRecorder

    def SelfInit(self):
        return _THRConfigMsgPayload.THRConfigMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _THRConfigMsgPayload.THRConfigMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _THRConfigMsgPayload.THRConfigMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _THRConfigMsgPayload.THRConfigMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _THRConfigMsgPayload.THRConfigMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _THRConfigMsgPayload.THRConfigMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _THRConfigMsgPayload.THRConfigMsgRecorder___record_vector(self)

    def size(self):
        return _THRConfigMsgPayload.THRConfigMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _THRConfigMsgPayload.THRConfigMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _THRConfigMsgPayload.THRConfigMsgRecorder_clear(self)
    bskLogger = property(_THRConfigMsgPayload.THRConfigMsgRecorder_bskLogger_get, _THRConfigMsgPayload.THRConfigMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _THRConfigMsgPayload.THRConfigMsgRecorder_updateTimeInterval(self, timeDiff)

    def _rThrust_B_array(self):
        return _THRConfigMsgPayload.THRConfigMsgRecorder__rThrust_B_array(self)

    @property
    def rThrust_B(self):
        return self._rThrust_B_array()


    def _tHatThrust_B_array(self):
        return _THRConfigMsgPayload.THRConfigMsgRecorder__tHatThrust_B_array(self)

    @property
    def tHatThrust_B(self):
        return self._tHatThrust_B_array()


    def _maxThrust_array(self):
        return _THRConfigMsgPayload.THRConfigMsgRecorder__maxThrust_array(self)

    @property
    def maxThrust(self):
        return self._maxThrust_array()


    def _swirlTorque_array(self):
        return _THRConfigMsgPayload.THRConfigMsgRecorder__swirlTorque_array(self)

    @property
    def swirlTorque(self):
        return self._swirlTorque_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register THRConfigMsgRecorder in _THRConfigMsgPayload:
_THRConfigMsgPayload.THRConfigMsgRecorder_swigregister(THRConfigMsgRecorder)
class THRConfigMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _THRConfigMsgPayload.THRConfigMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _THRConfigMsgPayload.THRConfigMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _THRConfigMsgPayload.THRConfigMsgPayloadVector___bool__(self)

    def __len__(self):
        return _THRConfigMsgPayload.THRConfigMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _THRConfigMsgPayload.THRConfigMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _THRConfigMsgPayload.THRConfigMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _THRConfigMsgPayload.THRConfigMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _THRConfigMsgPayload.THRConfigMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _THRConfigMsgPayload.THRConfigMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _THRConfigMsgPayload.THRConfigMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _THRConfigMsgPayload.THRConfigMsgPayloadVector_pop(self)

    def append(self, x):
        return _THRConfigMsgPayload.THRConfigMsgPayloadVector_append(self, x)

    def empty(self):
        return _THRConfigMsgPayload.THRConfigMsgPayloadVector_empty(self)

    def size(self):
        return _THRConfigMsgPayload.THRConfigMsgPayloadVector_size(self)

    def swap(self, v):
        return _THRConfigMsgPayload.THRConfigMsgPayloadVector_swap(self, v)

    def begin(self):
        return _THRConfigMsgPayload.THRConfigMsgPayloadVector_begin(self)

    def end(self):
        return _THRConfigMsgPayload.THRConfigMsgPayloadVector_end(self)

    def rbegin(self):
        return _THRConfigMsgPayload.THRConfigMsgPayloadVector_rbegin(self)

    def rend(self):
        return _THRConfigMsgPayload.THRConfigMsgPayloadVector_rend(self)

    def clear(self):
        return _THRConfigMsgPayload.THRConfigMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _THRConfigMsgPayload.THRConfigMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _THRConfigMsgPayload.THRConfigMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _THRConfigMsgPayload.THRConfigMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _THRConfigMsgPayload.THRConfigMsgPayloadVector_swiginit(self, _THRConfigMsgPayload.new_THRConfigMsgPayloadVector(*args))

    def push_back(self, x):
        return _THRConfigMsgPayload.THRConfigMsgPayloadVector_push_back(self, x)

    def front(self):
        return _THRConfigMsgPayload.THRConfigMsgPayloadVector_front(self)

    def back(self):
        return _THRConfigMsgPayload.THRConfigMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _THRConfigMsgPayload.THRConfigMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _THRConfigMsgPayload.THRConfigMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _THRConfigMsgPayload.THRConfigMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _THRConfigMsgPayload.THRConfigMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _THRConfigMsgPayload.THRConfigMsgPayloadVector_capacity(self)

    def get_all(self):
        return _THRConfigMsgPayload.THRConfigMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _THRConfigMsgPayload.delete_THRConfigMsgPayloadVector

# Register THRConfigMsgPayloadVector in _THRConfigMsgPayload:
_THRConfigMsgPayload.THRConfigMsgPayloadVector_swigregister(THRConfigMsgPayloadVector)
class THRConfigMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsVector_empty(self)

    def size(self):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsVector_begin(self)

    def end(self):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsVector_rend(self)

    def clear(self):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _THRConfigMsgPayload.THRConfigMsgOutMsgsVector_swiginit(self, _THRConfigMsgPayload.new_THRConfigMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsVector_front(self)

    def back(self):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _THRConfigMsgPayload.delete_THRConfigMsgOutMsgsVector

# Register THRConfigMsgOutMsgsVector in _THRConfigMsgPayload:
_THRConfigMsgPayload.THRConfigMsgOutMsgsVector_swigregister(THRConfigMsgOutMsgsVector)
class THRConfigMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _THRConfigMsgPayload.THRConfigMsgOutMsgsPtrVector_swiginit(self, _THRConfigMsgPayload.new_THRConfigMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _THRConfigMsgPayload.THRConfigMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _THRConfigMsgPayload.delete_THRConfigMsgOutMsgsPtrVector

# Register THRConfigMsgOutMsgsPtrVector in _THRConfigMsgPayload:
_THRConfigMsgPayload.THRConfigMsgOutMsgsPtrVector_swigregister(THRConfigMsgOutMsgsPtrVector)
class THRConfigMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _THRConfigMsgPayload.THRConfigMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _THRConfigMsgPayload.THRConfigMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _THRConfigMsgPayload.THRConfigMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _THRConfigMsgPayload.THRConfigMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _THRConfigMsgPayload.THRConfigMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _THRConfigMsgPayload.THRConfigMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _THRConfigMsgPayload.THRConfigMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _THRConfigMsgPayload.THRConfigMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _THRConfigMsgPayload.THRConfigMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _THRConfigMsgPayload.THRConfigMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _THRConfigMsgPayload.THRConfigMsgInMsgsVector_pop(self)

    def append(self, x):
        return _THRConfigMsgPayload.THRConfigMsgInMsgsVector_append(self, x)

    def empty(self):
        return _THRConfigMsgPayload.THRConfigMsgInMsgsVector_empty(self)

    def size(self):
        return _THRConfigMsgPayload.THRConfigMsgInMsgsVector_size(self)

    def swap(self, v):
        return _THRConfigMsgPayload.THRConfigMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _THRConfigMsgPayload.THRConfigMsgInMsgsVector_begin(self)

    def end(self):
        return _THRConfigMsgPayload.THRConfigMsgInMsgsVector_end(self)

    def rbegin(self):
        return _THRConfigMsgPayload.THRConfigMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _THRConfigMsgPayload.THRConfigMsgInMsgsVector_rend(self)

    def clear(self):
        return _THRConfigMsgPayload.THRConfigMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _THRConfigMsgPayload.THRConfigMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _THRConfigMsgPayload.THRConfigMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _THRConfigMsgPayload.THRConfigMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _THRConfigMsgPayload.THRConfigMsgInMsgsVector_swiginit(self, _THRConfigMsgPayload.new_THRConfigMsgInMsgsVector(*args))

    def push_back(self, x):
        return _THRConfigMsgPayload.THRConfigMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _THRConfigMsgPayload.THRConfigMsgInMsgsVector_front(self)

    def back(self):
        return _THRConfigMsgPayload.THRConfigMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _THRConfigMsgPayload.THRConfigMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _THRConfigMsgPayload.THRConfigMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _THRConfigMsgPayload.THRConfigMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _THRConfigMsgPayload.THRConfigMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _THRConfigMsgPayload.THRConfigMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _THRConfigMsgPayload.delete_THRConfigMsgInMsgsVector

# Register THRConfigMsgInMsgsVector in _THRConfigMsgPayload:
_THRConfigMsgPayload.THRConfigMsgInMsgsVector_swigregister(THRConfigMsgInMsgsVector)
class THRConfigMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_THRConfigMsgPayload.THRConfigMsg_C_header_get, _THRConfigMsgPayload.THRConfigMsg_C_header_set)
    payload = property(_THRConfigMsgPayload.THRConfigMsg_C_payload_get, _THRConfigMsgPayload.THRConfigMsg_C_payload_set)
    payloadPointer = property(_THRConfigMsgPayload.THRConfigMsg_C_payloadPointer_get, _THRConfigMsgPayload.THRConfigMsg_C_payloadPointer_set)
    headerPointer = property(_THRConfigMsgPayload.THRConfigMsg_C_headerPointer_get, _THRConfigMsgPayload.THRConfigMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _THRConfigMsgPayload.THRConfigMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import THRConfigMsg
        if type(source) == type(self):
            THRConfigMsg_C_subscribe(self, source)
        elif type(source) == THRConfigMsg:
            THRConfigMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            THRConfigMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe THRConfigMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        THRConfigMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import THRConfigMsg
        if type(source) == type(self):
            return (THRConfigMsg_C_isSubscribedTo(self, source))
        elif type(source) == THRConfigMsg:
            return (THRConfigMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (THRConfigMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        THRConfigMsg_C_addAuthor(self, self)
        if data:
            THRConfigMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        THRConfigMsg_C_addAuthor(self, self)
        THRConfigMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return THRConfigMsg_C_read(self)


    def __init__(self):
        _THRConfigMsgPayload.THRConfigMsg_C_swiginit(self, _THRConfigMsgPayload.new_THRConfigMsg_C())
    __swig_destroy__ = _THRConfigMsgPayload.delete_THRConfigMsg_C

# Register THRConfigMsg_C in _THRConfigMsgPayload:
_THRConfigMsgPayload.THRConfigMsg_C_swigregister(THRConfigMsg_C)

def THRConfigMsg_cpp_subscribe(subscriber, source):
    return _THRConfigMsgPayload.THRConfigMsg_cpp_subscribe(subscriber, source)

def THRConfigMsg_C_subscribe(subscriber, source):
    return _THRConfigMsgPayload.THRConfigMsg_C_subscribe(subscriber, source)

def THRConfigMsg_addr_subscribe(subscriber, sourceAddr):
    return _THRConfigMsgPayload.THRConfigMsg_addr_subscribe(subscriber, sourceAddr)

def THRConfigMsg_unsubscribe(subscriber):
    return _THRConfigMsgPayload.THRConfigMsg_unsubscribe(subscriber)

def THRConfigMsg_C_isSubscribedTo(subscriber, source):
    return _THRConfigMsgPayload.THRConfigMsg_C_isSubscribedTo(subscriber, source)

def THRConfigMsg_cpp_isSubscribedTo(subscriber, source):
    return _THRConfigMsgPayload.THRConfigMsg_cpp_isSubscribedTo(subscriber, source)

def THRConfigMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _THRConfigMsgPayload.THRConfigMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def THRConfigMsg_C_addAuthor(coowner, data):
    return _THRConfigMsgPayload.THRConfigMsg_C_addAuthor(coowner, data)

def THRConfigMsg_C_init(owner):
    return _THRConfigMsgPayload.THRConfigMsg_C_init(owner)

def THRConfigMsg_C_isLinked(data):
    return _THRConfigMsgPayload.THRConfigMsg_C_isLinked(data)

def THRConfigMsg_C_isWritten(data):
    return _THRConfigMsgPayload.THRConfigMsg_C_isWritten(data)

def THRConfigMsg_C_timeWritten(data):
    return _THRConfigMsgPayload.THRConfigMsg_C_timeWritten(data)

def THRConfigMsg_C_moduleID(data):
    return _THRConfigMsgPayload.THRConfigMsg_C_moduleID(data)

def THRConfigMsg_C_write(data, destination, moduleID, callTime):
    return _THRConfigMsgPayload.THRConfigMsg_C_write(data, destination, moduleID, callTime)

def THRConfigMsg_C_read(source):
    return _THRConfigMsgPayload.THRConfigMsg_C_read(source)

def THRConfigMsg_C_zeroMsgPayload():
    return _THRConfigMsgPayload.THRConfigMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_THRConfigMsgPayload.MsgHeader_isLinked_get, _THRConfigMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_THRConfigMsgPayload.MsgHeader_isWritten_get, _THRConfigMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_THRConfigMsgPayload.MsgHeader_timeWritten_get, _THRConfigMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_THRConfigMsgPayload.MsgHeader_moduleID_get, _THRConfigMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _THRConfigMsgPayload.MsgHeader_swiginit(self, _THRConfigMsgPayload.new_MsgHeader())
    __swig_destroy__ = _THRConfigMsgPayload.delete_MsgHeader

# Register MsgHeader in _THRConfigMsgPayload:
_THRConfigMsgPayload.MsgHeader_swigregister(MsgHeader)

