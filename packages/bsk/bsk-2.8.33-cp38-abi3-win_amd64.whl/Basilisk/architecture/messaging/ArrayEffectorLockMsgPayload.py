# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ArrayEffectorLockMsgPayload
else:
    import _ArrayEffectorLockMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ArrayEffectorLockMsgPayload.delete_SwigPyIterator

    def value(self):
        return _ArrayEffectorLockMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ArrayEffectorLockMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ArrayEffectorLockMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ArrayEffectorLockMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ArrayEffectorLockMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ArrayEffectorLockMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _ArrayEffectorLockMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _ArrayEffectorLockMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _ArrayEffectorLockMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ArrayEffectorLockMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ArrayEffectorLockMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ArrayEffectorLockMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ArrayEffectorLockMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ArrayEffectorLockMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ArrayEffectorLockMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ArrayEffectorLockMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ArrayEffectorLockMsgPayload:
_ArrayEffectorLockMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _ArrayEffectorLockMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _ArrayEffectorLockMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _ArrayEffectorLockMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _ArrayEffectorLockMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _ArrayEffectorLockMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _ArrayEffectorLockMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _ArrayEffectorLockMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _ArrayEffectorLockMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _ArrayEffectorLockMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _ArrayEffectorLockMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _ArrayEffectorLockMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _ArrayEffectorLockMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _ArrayEffectorLockMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _ArrayEffectorLockMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _ArrayEffectorLockMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _ArrayEffectorLockMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ArrayEffectorLockMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ArrayEffectorLockMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _ArrayEffectorLockMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _ArrayEffectorLockMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _ArrayEffectorLockMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ArrayEffectorLockMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ArrayEffectorLockMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ArrayEffectorLockMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ArrayEffectorLockMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ArrayEffectorLockMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _ArrayEffectorLockMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _ArrayEffectorLockMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _ArrayEffectorLockMsgPayload.TimeVector_empty(self)

    def size(self):
        return _ArrayEffectorLockMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _ArrayEffectorLockMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _ArrayEffectorLockMsgPayload.TimeVector_begin(self)

    def end(self):
        return _ArrayEffectorLockMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _ArrayEffectorLockMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _ArrayEffectorLockMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _ArrayEffectorLockMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _ArrayEffectorLockMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _ArrayEffectorLockMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _ArrayEffectorLockMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _ArrayEffectorLockMsgPayload.TimeVector_swiginit(self, _ArrayEffectorLockMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _ArrayEffectorLockMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _ArrayEffectorLockMsgPayload.TimeVector_front(self)

    def back(self):
        return _ArrayEffectorLockMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _ArrayEffectorLockMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _ArrayEffectorLockMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _ArrayEffectorLockMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _ArrayEffectorLockMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _ArrayEffectorLockMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _ArrayEffectorLockMsgPayload.delete_TimeVector

# Register TimeVector in _ArrayEffectorLockMsgPayload:
_ArrayEffectorLockMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ArrayEffectorLockMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ArrayEffectorLockMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _ArrayEffectorLockMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _ArrayEffectorLockMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _ArrayEffectorLockMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ArrayEffectorLockMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ArrayEffectorLockMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ArrayEffectorLockMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ArrayEffectorLockMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ArrayEffectorLockMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _ArrayEffectorLockMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _ArrayEffectorLockMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _ArrayEffectorLockMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _ArrayEffectorLockMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _ArrayEffectorLockMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _ArrayEffectorLockMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _ArrayEffectorLockMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _ArrayEffectorLockMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _ArrayEffectorLockMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _ArrayEffectorLockMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _ArrayEffectorLockMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _ArrayEffectorLockMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _ArrayEffectorLockMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _ArrayEffectorLockMsgPayload.DoubleVector_swiginit(self, _ArrayEffectorLockMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _ArrayEffectorLockMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _ArrayEffectorLockMsgPayload.DoubleVector_front(self)

    def back(self):
        return _ArrayEffectorLockMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _ArrayEffectorLockMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _ArrayEffectorLockMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _ArrayEffectorLockMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _ArrayEffectorLockMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _ArrayEffectorLockMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _ArrayEffectorLockMsgPayload.delete_DoubleVector

# Register DoubleVector in _ArrayEffectorLockMsgPayload:
_ArrayEffectorLockMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ArrayEffectorLockMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ArrayEffectorLockMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _ArrayEffectorLockMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _ArrayEffectorLockMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _ArrayEffectorLockMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ArrayEffectorLockMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ArrayEffectorLockMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ArrayEffectorLockMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ArrayEffectorLockMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ArrayEffectorLockMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _ArrayEffectorLockMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _ArrayEffectorLockMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _ArrayEffectorLockMsgPayload.StringVector_empty(self)

    def size(self):
        return _ArrayEffectorLockMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _ArrayEffectorLockMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _ArrayEffectorLockMsgPayload.StringVector_begin(self)

    def end(self):
        return _ArrayEffectorLockMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _ArrayEffectorLockMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _ArrayEffectorLockMsgPayload.StringVector_rend(self)

    def clear(self):
        return _ArrayEffectorLockMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _ArrayEffectorLockMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _ArrayEffectorLockMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _ArrayEffectorLockMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _ArrayEffectorLockMsgPayload.StringVector_swiginit(self, _ArrayEffectorLockMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _ArrayEffectorLockMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _ArrayEffectorLockMsgPayload.StringVector_front(self)

    def back(self):
        return _ArrayEffectorLockMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _ArrayEffectorLockMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _ArrayEffectorLockMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _ArrayEffectorLockMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _ArrayEffectorLockMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _ArrayEffectorLockMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _ArrayEffectorLockMsgPayload.delete_StringVector

# Register StringVector in _ArrayEffectorLockMsgPayload:
_ArrayEffectorLockMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _ArrayEffectorLockMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _ArrayEffectorLockMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _ArrayEffectorLockMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _ArrayEffectorLockMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _ArrayEffectorLockMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _ArrayEffectorLockMsgPayload.NANO2SEC
SEC2NANO = _ArrayEffectorLockMsgPayload.SEC2NANO
SEC2HOUR = _ArrayEffectorLockMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _ArrayEffectorLockMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _ArrayEffectorLockMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _ArrayEffectorLockMsgPayload.secToNano(seconds)
BOOL_FALSE = _ArrayEffectorLockMsgPayload.BOOL_FALSE
BOOL_TRUE = _ArrayEffectorLockMsgPayload.BOOL_TRUE
AVAILABLE = _ArrayEffectorLockMsgPayload.AVAILABLE
UNAVAILABLE = _ArrayEffectorLockMsgPayload.UNAVAILABLE
BalancedWheels = _ArrayEffectorLockMsgPayload.BalancedWheels
JitterSimple = _ArrayEffectorLockMsgPayload.JitterSimple
JitterFullyCoupled = _ArrayEffectorLockMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ArrayEffectorLockMsgPayload.SysModel_swiginit(self, _ArrayEffectorLockMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _ArrayEffectorLockMsgPayload.delete_SysModel

    def SelfInit(self):
        return _ArrayEffectorLockMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _ArrayEffectorLockMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _ArrayEffectorLockMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _ArrayEffectorLockMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_ArrayEffectorLockMsgPayload.SysModel_ModelTag_get, _ArrayEffectorLockMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_ArrayEffectorLockMsgPayload.SysModel_CallCounts_get, _ArrayEffectorLockMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_ArrayEffectorLockMsgPayload.SysModel_RNGSeed_get, _ArrayEffectorLockMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_ArrayEffectorLockMsgPayload.SysModel_moduleID_get, _ArrayEffectorLockMsgPayload.SysModel_moduleID_set)

# Register SysModel in _ArrayEffectorLockMsgPayload:
_ArrayEffectorLockMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _ArrayEffectorLockMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _ArrayEffectorLockMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _ArrayEffectorLockMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _ArrayEffectorLockMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _ArrayEffectorLockMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _ArrayEffectorLockMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _ArrayEffectorLockMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _ArrayEffectorLockMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _ArrayEffectorLockMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _ArrayEffectorLockMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _ArrayEffectorLockMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _ArrayEffectorLockMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class ArrayEffectorLockMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    effectorLockFlag = property(_ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayload_effectorLockFlag_get, _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayload_effectorLockFlag_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayload_swiginit(self, _ArrayEffectorLockMsgPayload.new_ArrayEffectorLockMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _ArrayEffectorLockMsgPayload.delete_ArrayEffectorLockMsgPayload

# Register ArrayEffectorLockMsgPayload in _ArrayEffectorLockMsgPayload:
_ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayload_swigregister(ArrayEffectorLockMsgPayload)

def _pprint_ArrayEffectorLockMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[ArrayEffectorLockMsgPayload.__repr__] = _pprint_ArrayEffectorLockMsgPayload

class ArrayEffectorLockMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgReader_bskLogger_get, _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgReader_bskLogger_set)
    zeroMsgPayload = property(_ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgReader_zeroMsgPayload_get, _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgReader_swiginit(self, _ArrayEffectorLockMsgPayload.new_ArrayEffectorLockMsgReader(*args))

    def __call__(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgReader___call__(self)

    def isLinked(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgReader_isLinked(self)

    def isWritten(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgReader_isWritten(self)

    def timeWritten(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgReader_timeWritten(self)

    def moduleID(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == ArrayEffectorLockMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.ArrayEffectorLockMsgPayload import ArrayEffectorLockMsg_C
            if type(source) == ArrayEffectorLockMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<ArrayEffectorLockMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == ArrayEffectorLockMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.ArrayEffectorLockMsgPayload import ArrayEffectorLockMsg_C
        except ImportError:
            return 0

        if type(source) == ArrayEffectorLockMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _ArrayEffectorLockMsgPayload.delete_ArrayEffectorLockMsgReader

# Register ArrayEffectorLockMsgReader in _ArrayEffectorLockMsgPayload:
_ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgReader_swigregister(ArrayEffectorLockMsgReader)
class ArrayEffectorLockMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgWriter_swiginit(self, _ArrayEffectorLockMsgPayload.new_ArrayEffectorLockMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _ArrayEffectorLockMsgPayload.delete_ArrayEffectorLockMsgWriter

# Register ArrayEffectorLockMsgWriter in _ArrayEffectorLockMsgPayload:
_ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgWriter_swigregister(ArrayEffectorLockMsgWriter)
class ArrayEffectorLockMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_write_get, _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_write_set)

    def addSubscriber(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_addSubscriber(self)

    def addAuthor(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_zeroMsgPayload_get, _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_isLinked(self)

    def getPayloadSize(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_swiginit(self, _ArrayEffectorLockMsgPayload.new_ArrayEffectorLockMsg())
    __swig_destroy__ = _ArrayEffectorLockMsgPayload.delete_ArrayEffectorLockMsg

# Register ArrayEffectorLockMsg in _ArrayEffectorLockMsgPayload:
_ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_swigregister(ArrayEffectorLockMsg)
class ArrayEffectorLockMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgRecorder_swiginit(self, _ArrayEffectorLockMsgPayload.new_ArrayEffectorLockMsgRecorder(*args))
    __swig_destroy__ = _ArrayEffectorLockMsgPayload.delete_ArrayEffectorLockMsgRecorder

    def SelfInit(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgRecorder___record_vector(self)

    def size(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgRecorder_clear(self)
    bskLogger = property(_ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgRecorder_bskLogger_get, _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgRecorder_updateTimeInterval(self, timeDiff)

    def _effectorLockFlag_array(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgRecorder__effectorLockFlag_array(self)

    @property
    def effectorLockFlag(self):
        return self._effectorLockFlag_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register ArrayEffectorLockMsgRecorder in _ArrayEffectorLockMsgPayload:
_ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgRecorder_swigregister(ArrayEffectorLockMsgRecorder)
class ArrayEffectorLockMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayloadVector___bool__(self)

    def __len__(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayloadVector_pop(self)

    def append(self, x):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayloadVector_append(self, x)

    def empty(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayloadVector_empty(self)

    def size(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayloadVector_size(self)

    def swap(self, v):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayloadVector_swap(self, v)

    def begin(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayloadVector_begin(self)

    def end(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayloadVector_end(self)

    def rbegin(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayloadVector_rbegin(self)

    def rend(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayloadVector_rend(self)

    def clear(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayloadVector_swiginit(self, _ArrayEffectorLockMsgPayload.new_ArrayEffectorLockMsgPayloadVector(*args))

    def push_back(self, x):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayloadVector_push_back(self, x)

    def front(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayloadVector_front(self)

    def back(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayloadVector_capacity(self)

    def get_all(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _ArrayEffectorLockMsgPayload.delete_ArrayEffectorLockMsgPayloadVector

# Register ArrayEffectorLockMsgPayloadVector in _ArrayEffectorLockMsgPayload:
_ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgPayloadVector_swigregister(ArrayEffectorLockMsgPayloadVector)
class ArrayEffectorLockMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsVector_empty(self)

    def size(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsVector_begin(self)

    def end(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsVector_rend(self)

    def clear(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsVector_swiginit(self, _ArrayEffectorLockMsgPayload.new_ArrayEffectorLockMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsVector_front(self)

    def back(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _ArrayEffectorLockMsgPayload.delete_ArrayEffectorLockMsgOutMsgsVector

# Register ArrayEffectorLockMsgOutMsgsVector in _ArrayEffectorLockMsgPayload:
_ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsVector_swigregister(ArrayEffectorLockMsgOutMsgsVector)
class ArrayEffectorLockMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsPtrVector_swiginit(self, _ArrayEffectorLockMsgPayload.new_ArrayEffectorLockMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _ArrayEffectorLockMsgPayload.delete_ArrayEffectorLockMsgOutMsgsPtrVector

# Register ArrayEffectorLockMsgOutMsgsPtrVector in _ArrayEffectorLockMsgPayload:
_ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgOutMsgsPtrVector_swigregister(ArrayEffectorLockMsgOutMsgsPtrVector)
class ArrayEffectorLockMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgInMsgsVector_pop(self)

    def append(self, x):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgInMsgsVector_append(self, x)

    def empty(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgInMsgsVector_empty(self)

    def size(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgInMsgsVector_size(self)

    def swap(self, v):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgInMsgsVector_begin(self)

    def end(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgInMsgsVector_end(self)

    def rbegin(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgInMsgsVector_rend(self)

    def clear(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgInMsgsVector_swiginit(self, _ArrayEffectorLockMsgPayload.new_ArrayEffectorLockMsgInMsgsVector(*args))

    def push_back(self, x):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgInMsgsVector_front(self)

    def back(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _ArrayEffectorLockMsgPayload.delete_ArrayEffectorLockMsgInMsgsVector

# Register ArrayEffectorLockMsgInMsgsVector in _ArrayEffectorLockMsgPayload:
_ArrayEffectorLockMsgPayload.ArrayEffectorLockMsgInMsgsVector_swigregister(ArrayEffectorLockMsgInMsgsVector)
class ArrayEffectorLockMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_C_header_get, _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_C_header_set)
    payload = property(_ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_C_payload_get, _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_C_payload_set)
    payloadPointer = property(_ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_C_payloadPointer_get, _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_C_payloadPointer_set)
    headerPointer = property(_ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_C_headerPointer_get, _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import ArrayEffectorLockMsg
        if type(source) == type(self):
            ArrayEffectorLockMsg_C_subscribe(self, source)
        elif type(source) == ArrayEffectorLockMsg:
            ArrayEffectorLockMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            ArrayEffectorLockMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe ArrayEffectorLockMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        ArrayEffectorLockMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import ArrayEffectorLockMsg
        if type(source) == type(self):
            return (ArrayEffectorLockMsg_C_isSubscribedTo(self, source))
        elif type(source) == ArrayEffectorLockMsg:
            return (ArrayEffectorLockMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (ArrayEffectorLockMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        ArrayEffectorLockMsg_C_addAuthor(self, self)
        if data:
            ArrayEffectorLockMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        ArrayEffectorLockMsg_C_addAuthor(self, self)
        ArrayEffectorLockMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return ArrayEffectorLockMsg_C_read(self)


    def __init__(self):
        _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_C_swiginit(self, _ArrayEffectorLockMsgPayload.new_ArrayEffectorLockMsg_C())
    __swig_destroy__ = _ArrayEffectorLockMsgPayload.delete_ArrayEffectorLockMsg_C

# Register ArrayEffectorLockMsg_C in _ArrayEffectorLockMsgPayload:
_ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_C_swigregister(ArrayEffectorLockMsg_C)

def ArrayEffectorLockMsg_cpp_subscribe(subscriber, source):
    return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_cpp_subscribe(subscriber, source)

def ArrayEffectorLockMsg_C_subscribe(subscriber, source):
    return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_C_subscribe(subscriber, source)

def ArrayEffectorLockMsg_addr_subscribe(subscriber, sourceAddr):
    return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_addr_subscribe(subscriber, sourceAddr)

def ArrayEffectorLockMsg_unsubscribe(subscriber):
    return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_unsubscribe(subscriber)

def ArrayEffectorLockMsg_C_isSubscribedTo(subscriber, source):
    return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_C_isSubscribedTo(subscriber, source)

def ArrayEffectorLockMsg_cpp_isSubscribedTo(subscriber, source):
    return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_cpp_isSubscribedTo(subscriber, source)

def ArrayEffectorLockMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def ArrayEffectorLockMsg_C_addAuthor(coowner, data):
    return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_C_addAuthor(coowner, data)

def ArrayEffectorLockMsg_C_init(owner):
    return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_C_init(owner)

def ArrayEffectorLockMsg_C_isLinked(data):
    return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_C_isLinked(data)

def ArrayEffectorLockMsg_C_isWritten(data):
    return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_C_isWritten(data)

def ArrayEffectorLockMsg_C_timeWritten(data):
    return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_C_timeWritten(data)

def ArrayEffectorLockMsg_C_moduleID(data):
    return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_C_moduleID(data)

def ArrayEffectorLockMsg_C_write(data, destination, moduleID, callTime):
    return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_C_write(data, destination, moduleID, callTime)

def ArrayEffectorLockMsg_C_read(source):
    return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_C_read(source)

def ArrayEffectorLockMsg_C_zeroMsgPayload():
    return _ArrayEffectorLockMsgPayload.ArrayEffectorLockMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_ArrayEffectorLockMsgPayload.MsgHeader_isLinked_get, _ArrayEffectorLockMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_ArrayEffectorLockMsgPayload.MsgHeader_isWritten_get, _ArrayEffectorLockMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_ArrayEffectorLockMsgPayload.MsgHeader_timeWritten_get, _ArrayEffectorLockMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_ArrayEffectorLockMsgPayload.MsgHeader_moduleID_get, _ArrayEffectorLockMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _ArrayEffectorLockMsgPayload.MsgHeader_swiginit(self, _ArrayEffectorLockMsgPayload.new_MsgHeader())
    __swig_destroy__ = _ArrayEffectorLockMsgPayload.delete_MsgHeader

# Register MsgHeader in _ArrayEffectorLockMsgPayload:
_ArrayEffectorLockMsgPayload.MsgHeader_swigregister(MsgHeader)

