# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _RWCmdMsgPayload
else:
    import _RWCmdMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RWCmdMsgPayload.delete_SwigPyIterator

    def value(self):
        return _RWCmdMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _RWCmdMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _RWCmdMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _RWCmdMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _RWCmdMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _RWCmdMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _RWCmdMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _RWCmdMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _RWCmdMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _RWCmdMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _RWCmdMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _RWCmdMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _RWCmdMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _RWCmdMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _RWCmdMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _RWCmdMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _RWCmdMsgPayload:
_RWCmdMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _RWCmdMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _RWCmdMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _RWCmdMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _RWCmdMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _RWCmdMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _RWCmdMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _RWCmdMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _RWCmdMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _RWCmdMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _RWCmdMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _RWCmdMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _RWCmdMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _RWCmdMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _RWCmdMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _RWCmdMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _RWCmdMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWCmdMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWCmdMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _RWCmdMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _RWCmdMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _RWCmdMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWCmdMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWCmdMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWCmdMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWCmdMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWCmdMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _RWCmdMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _RWCmdMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _RWCmdMsgPayload.TimeVector_empty(self)

    def size(self):
        return _RWCmdMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _RWCmdMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _RWCmdMsgPayload.TimeVector_begin(self)

    def end(self):
        return _RWCmdMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _RWCmdMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _RWCmdMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _RWCmdMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _RWCmdMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _RWCmdMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _RWCmdMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _RWCmdMsgPayload.TimeVector_swiginit(self, _RWCmdMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _RWCmdMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _RWCmdMsgPayload.TimeVector_front(self)

    def back(self):
        return _RWCmdMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _RWCmdMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _RWCmdMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _RWCmdMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _RWCmdMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _RWCmdMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _RWCmdMsgPayload.delete_TimeVector

# Register TimeVector in _RWCmdMsgPayload:
_RWCmdMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWCmdMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWCmdMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _RWCmdMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _RWCmdMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _RWCmdMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWCmdMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWCmdMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWCmdMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWCmdMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWCmdMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _RWCmdMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _RWCmdMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _RWCmdMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _RWCmdMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _RWCmdMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _RWCmdMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _RWCmdMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _RWCmdMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _RWCmdMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _RWCmdMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _RWCmdMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _RWCmdMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _RWCmdMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _RWCmdMsgPayload.DoubleVector_swiginit(self, _RWCmdMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _RWCmdMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _RWCmdMsgPayload.DoubleVector_front(self)

    def back(self):
        return _RWCmdMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _RWCmdMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _RWCmdMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _RWCmdMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _RWCmdMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _RWCmdMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _RWCmdMsgPayload.delete_DoubleVector

# Register DoubleVector in _RWCmdMsgPayload:
_RWCmdMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWCmdMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWCmdMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _RWCmdMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _RWCmdMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _RWCmdMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWCmdMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWCmdMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWCmdMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWCmdMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWCmdMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _RWCmdMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _RWCmdMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _RWCmdMsgPayload.StringVector_empty(self)

    def size(self):
        return _RWCmdMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _RWCmdMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _RWCmdMsgPayload.StringVector_begin(self)

    def end(self):
        return _RWCmdMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _RWCmdMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _RWCmdMsgPayload.StringVector_rend(self)

    def clear(self):
        return _RWCmdMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _RWCmdMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _RWCmdMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _RWCmdMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _RWCmdMsgPayload.StringVector_swiginit(self, _RWCmdMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _RWCmdMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _RWCmdMsgPayload.StringVector_front(self)

    def back(self):
        return _RWCmdMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _RWCmdMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _RWCmdMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _RWCmdMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _RWCmdMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _RWCmdMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _RWCmdMsgPayload.delete_StringVector

# Register StringVector in _RWCmdMsgPayload:
_RWCmdMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _RWCmdMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _RWCmdMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _RWCmdMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _RWCmdMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _RWCmdMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _RWCmdMsgPayload.NANO2SEC
SEC2NANO = _RWCmdMsgPayload.SEC2NANO
SEC2HOUR = _RWCmdMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _RWCmdMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _RWCmdMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _RWCmdMsgPayload.secToNano(seconds)
BOOL_FALSE = _RWCmdMsgPayload.BOOL_FALSE
BOOL_TRUE = _RWCmdMsgPayload.BOOL_TRUE
AVAILABLE = _RWCmdMsgPayload.AVAILABLE
UNAVAILABLE = _RWCmdMsgPayload.UNAVAILABLE
BalancedWheels = _RWCmdMsgPayload.BalancedWheels
JitterSimple = _RWCmdMsgPayload.JitterSimple
JitterFullyCoupled = _RWCmdMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RWCmdMsgPayload.SysModel_swiginit(self, _RWCmdMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _RWCmdMsgPayload.delete_SysModel

    def SelfInit(self):
        return _RWCmdMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _RWCmdMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _RWCmdMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _RWCmdMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_RWCmdMsgPayload.SysModel_ModelTag_get, _RWCmdMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_RWCmdMsgPayload.SysModel_CallCounts_get, _RWCmdMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_RWCmdMsgPayload.SysModel_RNGSeed_get, _RWCmdMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_RWCmdMsgPayload.SysModel_moduleID_get, _RWCmdMsgPayload.SysModel_moduleID_set)

# Register SysModel in _RWCmdMsgPayload:
_RWCmdMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _RWCmdMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _RWCmdMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _RWCmdMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _RWCmdMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _RWCmdMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _RWCmdMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _RWCmdMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _RWCmdMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _RWCmdMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _RWCmdMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _RWCmdMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _RWCmdMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class RWCmdMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    u_cmd = property(_RWCmdMsgPayload.RWCmdMsgPayload_u_cmd_get, _RWCmdMsgPayload.RWCmdMsgPayload_u_cmd_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _RWCmdMsgPayload.RWCmdMsgPayload_swiginit(self, _RWCmdMsgPayload.new_RWCmdMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _RWCmdMsgPayload.delete_RWCmdMsgPayload

# Register RWCmdMsgPayload in _RWCmdMsgPayload:
_RWCmdMsgPayload.RWCmdMsgPayload_swigregister(RWCmdMsgPayload)

def _pprint_RWCmdMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[RWCmdMsgPayload.__repr__] = _pprint_RWCmdMsgPayload

class RWCmdMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_RWCmdMsgPayload.RWCmdMsgReader_bskLogger_get, _RWCmdMsgPayload.RWCmdMsgReader_bskLogger_set)
    zeroMsgPayload = property(_RWCmdMsgPayload.RWCmdMsgReader_zeroMsgPayload_get, _RWCmdMsgPayload.RWCmdMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _RWCmdMsgPayload.RWCmdMsgReader_swiginit(self, _RWCmdMsgPayload.new_RWCmdMsgReader(*args))

    def __call__(self):
        return _RWCmdMsgPayload.RWCmdMsgReader___call__(self)

    def isLinked(self):
        return _RWCmdMsgPayload.RWCmdMsgReader_isLinked(self)

    def isWritten(self):
        return _RWCmdMsgPayload.RWCmdMsgReader_isWritten(self)

    def timeWritten(self):
        return _RWCmdMsgPayload.RWCmdMsgReader_timeWritten(self)

    def moduleID(self):
        return _RWCmdMsgPayload.RWCmdMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _RWCmdMsgPayload.RWCmdMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _RWCmdMsgPayload.RWCmdMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _RWCmdMsgPayload.RWCmdMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _RWCmdMsgPayload.RWCmdMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _RWCmdMsgPayload.RWCmdMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _RWCmdMsgPayload.RWCmdMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _RWCmdMsgPayload.RWCmdMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _RWCmdMsgPayload.RWCmdMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _RWCmdMsgPayload.RWCmdMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _RWCmdMsgPayload.RWCmdMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == RWCmdMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.RWCmdMsgPayload import RWCmdMsg_C
            if type(source) == RWCmdMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<RWCmdMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == RWCmdMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.RWCmdMsgPayload import RWCmdMsg_C
        except ImportError:
            return 0

        if type(source) == RWCmdMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _RWCmdMsgPayload.delete_RWCmdMsgReader

# Register RWCmdMsgReader in _RWCmdMsgPayload:
_RWCmdMsgPayload.RWCmdMsgReader_swigregister(RWCmdMsgReader)
class RWCmdMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RWCmdMsgPayload.RWCmdMsgWriter_swiginit(self, _RWCmdMsgPayload.new_RWCmdMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _RWCmdMsgPayload.RWCmdMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _RWCmdMsgPayload.delete_RWCmdMsgWriter

# Register RWCmdMsgWriter in _RWCmdMsgPayload:
_RWCmdMsgPayload.RWCmdMsgWriter_swigregister(RWCmdMsgWriter)
class RWCmdMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_RWCmdMsgPayload.RWCmdMsg_write_get, _RWCmdMsgPayload.RWCmdMsg_write_set)

    def addSubscriber(self):
        return _RWCmdMsgPayload.RWCmdMsg_addSubscriber(self)

    def addAuthor(self):
        return _RWCmdMsgPayload.RWCmdMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _RWCmdMsgPayload.RWCmdMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _RWCmdMsgPayload.RWCmdMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _RWCmdMsgPayload.RWCmdMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_RWCmdMsgPayload.RWCmdMsg_zeroMsgPayload_get, _RWCmdMsgPayload.RWCmdMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _RWCmdMsgPayload.RWCmdMsg_isLinked(self)

    def getPayloadSize(self):
        return _RWCmdMsgPayload.RWCmdMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _RWCmdMsgPayload.RWCmdMsg_swiginit(self, _RWCmdMsgPayload.new_RWCmdMsg())
    __swig_destroy__ = _RWCmdMsgPayload.delete_RWCmdMsg

# Register RWCmdMsg in _RWCmdMsgPayload:
_RWCmdMsgPayload.RWCmdMsg_swigregister(RWCmdMsg)
class RWCmdMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RWCmdMsgPayload.RWCmdMsgRecorder_swiginit(self, _RWCmdMsgPayload.new_RWCmdMsgRecorder(*args))
    __swig_destroy__ = _RWCmdMsgPayload.delete_RWCmdMsgRecorder

    def SelfInit(self):
        return _RWCmdMsgPayload.RWCmdMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _RWCmdMsgPayload.RWCmdMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _RWCmdMsgPayload.RWCmdMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _RWCmdMsgPayload.RWCmdMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _RWCmdMsgPayload.RWCmdMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _RWCmdMsgPayload.RWCmdMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _RWCmdMsgPayload.RWCmdMsgRecorder___record_vector(self)

    def size(self):
        return _RWCmdMsgPayload.RWCmdMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _RWCmdMsgPayload.RWCmdMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _RWCmdMsgPayload.RWCmdMsgRecorder_clear(self)
    bskLogger = property(_RWCmdMsgPayload.RWCmdMsgRecorder_bskLogger_get, _RWCmdMsgPayload.RWCmdMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _RWCmdMsgPayload.RWCmdMsgRecorder_updateTimeInterval(self, timeDiff)

    def _u_cmd_array(self):
        return _RWCmdMsgPayload.RWCmdMsgRecorder__u_cmd_array(self)

    @property
    def u_cmd(self):
        return self._u_cmd_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register RWCmdMsgRecorder in _RWCmdMsgPayload:
_RWCmdMsgPayload.RWCmdMsgRecorder_swigregister(RWCmdMsgRecorder)
class RWCmdMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWCmdMsgPayload.RWCmdMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWCmdMsgPayload.RWCmdMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _RWCmdMsgPayload.RWCmdMsgPayloadVector___bool__(self)

    def __len__(self):
        return _RWCmdMsgPayload.RWCmdMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _RWCmdMsgPayload.RWCmdMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWCmdMsgPayload.RWCmdMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWCmdMsgPayload.RWCmdMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWCmdMsgPayload.RWCmdMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWCmdMsgPayload.RWCmdMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWCmdMsgPayload.RWCmdMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _RWCmdMsgPayload.RWCmdMsgPayloadVector_pop(self)

    def append(self, x):
        return _RWCmdMsgPayload.RWCmdMsgPayloadVector_append(self, x)

    def empty(self):
        return _RWCmdMsgPayload.RWCmdMsgPayloadVector_empty(self)

    def size(self):
        return _RWCmdMsgPayload.RWCmdMsgPayloadVector_size(self)

    def swap(self, v):
        return _RWCmdMsgPayload.RWCmdMsgPayloadVector_swap(self, v)

    def begin(self):
        return _RWCmdMsgPayload.RWCmdMsgPayloadVector_begin(self)

    def end(self):
        return _RWCmdMsgPayload.RWCmdMsgPayloadVector_end(self)

    def rbegin(self):
        return _RWCmdMsgPayload.RWCmdMsgPayloadVector_rbegin(self)

    def rend(self):
        return _RWCmdMsgPayload.RWCmdMsgPayloadVector_rend(self)

    def clear(self):
        return _RWCmdMsgPayload.RWCmdMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _RWCmdMsgPayload.RWCmdMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _RWCmdMsgPayload.RWCmdMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _RWCmdMsgPayload.RWCmdMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _RWCmdMsgPayload.RWCmdMsgPayloadVector_swiginit(self, _RWCmdMsgPayload.new_RWCmdMsgPayloadVector(*args))

    def push_back(self, x):
        return _RWCmdMsgPayload.RWCmdMsgPayloadVector_push_back(self, x)

    def front(self):
        return _RWCmdMsgPayload.RWCmdMsgPayloadVector_front(self)

    def back(self):
        return _RWCmdMsgPayload.RWCmdMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _RWCmdMsgPayload.RWCmdMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _RWCmdMsgPayload.RWCmdMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _RWCmdMsgPayload.RWCmdMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _RWCmdMsgPayload.RWCmdMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _RWCmdMsgPayload.RWCmdMsgPayloadVector_capacity(self)

    def get_all(self):
        return _RWCmdMsgPayload.RWCmdMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _RWCmdMsgPayload.delete_RWCmdMsgPayloadVector

# Register RWCmdMsgPayloadVector in _RWCmdMsgPayload:
_RWCmdMsgPayload.RWCmdMsgPayloadVector_swigregister(RWCmdMsgPayloadVector)
class RWCmdMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsVector_empty(self)

    def size(self):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsVector_begin(self)

    def end(self):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsVector_rend(self)

    def clear(self):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _RWCmdMsgPayload.RWCmdMsgOutMsgsVector_swiginit(self, _RWCmdMsgPayload.new_RWCmdMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsVector_front(self)

    def back(self):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _RWCmdMsgPayload.delete_RWCmdMsgOutMsgsVector

# Register RWCmdMsgOutMsgsVector in _RWCmdMsgPayload:
_RWCmdMsgPayload.RWCmdMsgOutMsgsVector_swigregister(RWCmdMsgOutMsgsVector)
class RWCmdMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _RWCmdMsgPayload.RWCmdMsgOutMsgsPtrVector_swiginit(self, _RWCmdMsgPayload.new_RWCmdMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _RWCmdMsgPayload.RWCmdMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _RWCmdMsgPayload.delete_RWCmdMsgOutMsgsPtrVector

# Register RWCmdMsgOutMsgsPtrVector in _RWCmdMsgPayload:
_RWCmdMsgPayload.RWCmdMsgOutMsgsPtrVector_swigregister(RWCmdMsgOutMsgsPtrVector)
class RWCmdMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWCmdMsgPayload.RWCmdMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWCmdMsgPayload.RWCmdMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _RWCmdMsgPayload.RWCmdMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _RWCmdMsgPayload.RWCmdMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _RWCmdMsgPayload.RWCmdMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWCmdMsgPayload.RWCmdMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWCmdMsgPayload.RWCmdMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWCmdMsgPayload.RWCmdMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWCmdMsgPayload.RWCmdMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWCmdMsgPayload.RWCmdMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _RWCmdMsgPayload.RWCmdMsgInMsgsVector_pop(self)

    def append(self, x):
        return _RWCmdMsgPayload.RWCmdMsgInMsgsVector_append(self, x)

    def empty(self):
        return _RWCmdMsgPayload.RWCmdMsgInMsgsVector_empty(self)

    def size(self):
        return _RWCmdMsgPayload.RWCmdMsgInMsgsVector_size(self)

    def swap(self, v):
        return _RWCmdMsgPayload.RWCmdMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _RWCmdMsgPayload.RWCmdMsgInMsgsVector_begin(self)

    def end(self):
        return _RWCmdMsgPayload.RWCmdMsgInMsgsVector_end(self)

    def rbegin(self):
        return _RWCmdMsgPayload.RWCmdMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _RWCmdMsgPayload.RWCmdMsgInMsgsVector_rend(self)

    def clear(self):
        return _RWCmdMsgPayload.RWCmdMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _RWCmdMsgPayload.RWCmdMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _RWCmdMsgPayload.RWCmdMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _RWCmdMsgPayload.RWCmdMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _RWCmdMsgPayload.RWCmdMsgInMsgsVector_swiginit(self, _RWCmdMsgPayload.new_RWCmdMsgInMsgsVector(*args))

    def push_back(self, x):
        return _RWCmdMsgPayload.RWCmdMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _RWCmdMsgPayload.RWCmdMsgInMsgsVector_front(self)

    def back(self):
        return _RWCmdMsgPayload.RWCmdMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _RWCmdMsgPayload.RWCmdMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _RWCmdMsgPayload.RWCmdMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _RWCmdMsgPayload.RWCmdMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _RWCmdMsgPayload.RWCmdMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _RWCmdMsgPayload.RWCmdMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _RWCmdMsgPayload.delete_RWCmdMsgInMsgsVector

# Register RWCmdMsgInMsgsVector in _RWCmdMsgPayload:
_RWCmdMsgPayload.RWCmdMsgInMsgsVector_swigregister(RWCmdMsgInMsgsVector)
class RWCmdMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_RWCmdMsgPayload.RWCmdMsg_C_header_get, _RWCmdMsgPayload.RWCmdMsg_C_header_set)
    payload = property(_RWCmdMsgPayload.RWCmdMsg_C_payload_get, _RWCmdMsgPayload.RWCmdMsg_C_payload_set)
    payloadPointer = property(_RWCmdMsgPayload.RWCmdMsg_C_payloadPointer_get, _RWCmdMsgPayload.RWCmdMsg_C_payloadPointer_set)
    headerPointer = property(_RWCmdMsgPayload.RWCmdMsg_C_headerPointer_get, _RWCmdMsgPayload.RWCmdMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _RWCmdMsgPayload.RWCmdMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import RWCmdMsg
        if type(source) == type(self):
            RWCmdMsg_C_subscribe(self, source)
        elif type(source) == RWCmdMsg:
            RWCmdMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            RWCmdMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe RWCmdMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        RWCmdMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import RWCmdMsg
        if type(source) == type(self):
            return (RWCmdMsg_C_isSubscribedTo(self, source))
        elif type(source) == RWCmdMsg:
            return (RWCmdMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (RWCmdMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        RWCmdMsg_C_addAuthor(self, self)
        if data:
            RWCmdMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        RWCmdMsg_C_addAuthor(self, self)
        RWCmdMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return RWCmdMsg_C_read(self)


    def __init__(self):
        _RWCmdMsgPayload.RWCmdMsg_C_swiginit(self, _RWCmdMsgPayload.new_RWCmdMsg_C())
    __swig_destroy__ = _RWCmdMsgPayload.delete_RWCmdMsg_C

# Register RWCmdMsg_C in _RWCmdMsgPayload:
_RWCmdMsgPayload.RWCmdMsg_C_swigregister(RWCmdMsg_C)

def RWCmdMsg_cpp_subscribe(subscriber, source):
    return _RWCmdMsgPayload.RWCmdMsg_cpp_subscribe(subscriber, source)

def RWCmdMsg_C_subscribe(subscriber, source):
    return _RWCmdMsgPayload.RWCmdMsg_C_subscribe(subscriber, source)

def RWCmdMsg_addr_subscribe(subscriber, sourceAddr):
    return _RWCmdMsgPayload.RWCmdMsg_addr_subscribe(subscriber, sourceAddr)

def RWCmdMsg_unsubscribe(subscriber):
    return _RWCmdMsgPayload.RWCmdMsg_unsubscribe(subscriber)

def RWCmdMsg_C_isSubscribedTo(subscriber, source):
    return _RWCmdMsgPayload.RWCmdMsg_C_isSubscribedTo(subscriber, source)

def RWCmdMsg_cpp_isSubscribedTo(subscriber, source):
    return _RWCmdMsgPayload.RWCmdMsg_cpp_isSubscribedTo(subscriber, source)

def RWCmdMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _RWCmdMsgPayload.RWCmdMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def RWCmdMsg_C_addAuthor(coowner, data):
    return _RWCmdMsgPayload.RWCmdMsg_C_addAuthor(coowner, data)

def RWCmdMsg_C_init(owner):
    return _RWCmdMsgPayload.RWCmdMsg_C_init(owner)

def RWCmdMsg_C_isLinked(data):
    return _RWCmdMsgPayload.RWCmdMsg_C_isLinked(data)

def RWCmdMsg_C_isWritten(data):
    return _RWCmdMsgPayload.RWCmdMsg_C_isWritten(data)

def RWCmdMsg_C_timeWritten(data):
    return _RWCmdMsgPayload.RWCmdMsg_C_timeWritten(data)

def RWCmdMsg_C_moduleID(data):
    return _RWCmdMsgPayload.RWCmdMsg_C_moduleID(data)

def RWCmdMsg_C_write(data, destination, moduleID, callTime):
    return _RWCmdMsgPayload.RWCmdMsg_C_write(data, destination, moduleID, callTime)

def RWCmdMsg_C_read(source):
    return _RWCmdMsgPayload.RWCmdMsg_C_read(source)

def RWCmdMsg_C_zeroMsgPayload():
    return _RWCmdMsgPayload.RWCmdMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_RWCmdMsgPayload.MsgHeader_isLinked_get, _RWCmdMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_RWCmdMsgPayload.MsgHeader_isWritten_get, _RWCmdMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_RWCmdMsgPayload.MsgHeader_timeWritten_get, _RWCmdMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_RWCmdMsgPayload.MsgHeader_moduleID_get, _RWCmdMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _RWCmdMsgPayload.MsgHeader_swiginit(self, _RWCmdMsgPayload.new_MsgHeader())
    __swig_destroy__ = _RWCmdMsgPayload.delete_MsgHeader

# Register MsgHeader in _RWCmdMsgPayload:
_RWCmdMsgPayload.MsgHeader_swigregister(MsgHeader)

