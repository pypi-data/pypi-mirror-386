# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _VSCMGConfigElementMsgPayload
else:
    import _VSCMGConfigElementMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VSCMGConfigElementMsgPayload.delete_SwigPyIterator

    def value(self):
        return _VSCMGConfigElementMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VSCMGConfigElementMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VSCMGConfigElementMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VSCMGConfigElementMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VSCMGConfigElementMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VSCMGConfigElementMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _VSCMGConfigElementMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _VSCMGConfigElementMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _VSCMGConfigElementMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VSCMGConfigElementMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VSCMGConfigElementMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VSCMGConfigElementMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VSCMGConfigElementMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VSCMGConfigElementMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VSCMGConfigElementMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VSCMGConfigElementMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _VSCMGConfigElementMsgPayload:
_VSCMGConfigElementMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _VSCMGConfigElementMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _VSCMGConfigElementMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _VSCMGConfigElementMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _VSCMGConfigElementMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _VSCMGConfigElementMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _VSCMGConfigElementMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _VSCMGConfigElementMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _VSCMGConfigElementMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _VSCMGConfigElementMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _VSCMGConfigElementMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _VSCMGConfigElementMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _VSCMGConfigElementMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _VSCMGConfigElementMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _VSCMGConfigElementMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _VSCMGConfigElementMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _VSCMGConfigElementMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGConfigElementMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGConfigElementMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGConfigElementMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _VSCMGConfigElementMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGConfigElementMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGConfigElementMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGConfigElementMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGConfigElementMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGConfigElementMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGConfigElementMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGConfigElementMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _VSCMGConfigElementMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _VSCMGConfigElementMsgPayload.TimeVector_empty(self)

    def size(self):
        return _VSCMGConfigElementMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _VSCMGConfigElementMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _VSCMGConfigElementMsgPayload.TimeVector_begin(self)

    def end(self):
        return _VSCMGConfigElementMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _VSCMGConfigElementMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _VSCMGConfigElementMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _VSCMGConfigElementMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _VSCMGConfigElementMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGConfigElementMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGConfigElementMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGConfigElementMsgPayload.TimeVector_swiginit(self, _VSCMGConfigElementMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _VSCMGConfigElementMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _VSCMGConfigElementMsgPayload.TimeVector_front(self)

    def back(self):
        return _VSCMGConfigElementMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _VSCMGConfigElementMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGConfigElementMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGConfigElementMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGConfigElementMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _VSCMGConfigElementMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _VSCMGConfigElementMsgPayload.delete_TimeVector

# Register TimeVector in _VSCMGConfigElementMsgPayload:
_VSCMGConfigElementMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGConfigElementMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGConfigElementMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGConfigElementMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _VSCMGConfigElementMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGConfigElementMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGConfigElementMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGConfigElementMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGConfigElementMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGConfigElementMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGConfigElementMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGConfigElementMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _VSCMGConfigElementMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _VSCMGConfigElementMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _VSCMGConfigElementMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _VSCMGConfigElementMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _VSCMGConfigElementMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _VSCMGConfigElementMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _VSCMGConfigElementMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _VSCMGConfigElementMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _VSCMGConfigElementMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _VSCMGConfigElementMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGConfigElementMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGConfigElementMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGConfigElementMsgPayload.DoubleVector_swiginit(self, _VSCMGConfigElementMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _VSCMGConfigElementMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _VSCMGConfigElementMsgPayload.DoubleVector_front(self)

    def back(self):
        return _VSCMGConfigElementMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _VSCMGConfigElementMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGConfigElementMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGConfigElementMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGConfigElementMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _VSCMGConfigElementMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _VSCMGConfigElementMsgPayload.delete_DoubleVector

# Register DoubleVector in _VSCMGConfigElementMsgPayload:
_VSCMGConfigElementMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGConfigElementMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGConfigElementMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGConfigElementMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _VSCMGConfigElementMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGConfigElementMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGConfigElementMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGConfigElementMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGConfigElementMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGConfigElementMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGConfigElementMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGConfigElementMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _VSCMGConfigElementMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _VSCMGConfigElementMsgPayload.StringVector_empty(self)

    def size(self):
        return _VSCMGConfigElementMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _VSCMGConfigElementMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _VSCMGConfigElementMsgPayload.StringVector_begin(self)

    def end(self):
        return _VSCMGConfigElementMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _VSCMGConfigElementMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _VSCMGConfigElementMsgPayload.StringVector_rend(self)

    def clear(self):
        return _VSCMGConfigElementMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _VSCMGConfigElementMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGConfigElementMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGConfigElementMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGConfigElementMsgPayload.StringVector_swiginit(self, _VSCMGConfigElementMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _VSCMGConfigElementMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _VSCMGConfigElementMsgPayload.StringVector_front(self)

    def back(self):
        return _VSCMGConfigElementMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _VSCMGConfigElementMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGConfigElementMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGConfigElementMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGConfigElementMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _VSCMGConfigElementMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _VSCMGConfigElementMsgPayload.delete_StringVector

# Register StringVector in _VSCMGConfigElementMsgPayload:
_VSCMGConfigElementMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _VSCMGConfigElementMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _VSCMGConfigElementMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _VSCMGConfigElementMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _VSCMGConfigElementMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _VSCMGConfigElementMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _VSCMGConfigElementMsgPayload.NANO2SEC
SEC2NANO = _VSCMGConfigElementMsgPayload.SEC2NANO
SEC2HOUR = _VSCMGConfigElementMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _VSCMGConfigElementMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _VSCMGConfigElementMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _VSCMGConfigElementMsgPayload.secToNano(seconds)
BOOL_FALSE = _VSCMGConfigElementMsgPayload.BOOL_FALSE
BOOL_TRUE = _VSCMGConfigElementMsgPayload.BOOL_TRUE
AVAILABLE = _VSCMGConfigElementMsgPayload.AVAILABLE
UNAVAILABLE = _VSCMGConfigElementMsgPayload.UNAVAILABLE
BalancedWheels = _VSCMGConfigElementMsgPayload.BalancedWheels
JitterSimple = _VSCMGConfigElementMsgPayload.JitterSimple
JitterFullyCoupled = _VSCMGConfigElementMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VSCMGConfigElementMsgPayload.SysModel_swiginit(self, _VSCMGConfigElementMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _VSCMGConfigElementMsgPayload.delete_SysModel

    def SelfInit(self):
        return _VSCMGConfigElementMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _VSCMGConfigElementMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _VSCMGConfigElementMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _VSCMGConfigElementMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_VSCMGConfigElementMsgPayload.SysModel_ModelTag_get, _VSCMGConfigElementMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_VSCMGConfigElementMsgPayload.SysModel_CallCounts_get, _VSCMGConfigElementMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_VSCMGConfigElementMsgPayload.SysModel_RNGSeed_get, _VSCMGConfigElementMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_VSCMGConfigElementMsgPayload.SysModel_moduleID_get, _VSCMGConfigElementMsgPayload.SysModel_moduleID_set)

# Register SysModel in _VSCMGConfigElementMsgPayload:
_VSCMGConfigElementMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _VSCMGConfigElementMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _VSCMGConfigElementMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _VSCMGConfigElementMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _VSCMGConfigElementMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _VSCMGConfigElementMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _VSCMGConfigElementMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _VSCMGConfigElementMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _VSCMGConfigElementMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _VSCMGConfigElementMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _VSCMGConfigElementMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _VSCMGConfigElementMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _VSCMGConfigElementMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class VSCMGConfigElementMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    gsHat0_B = property(_VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayload_gsHat0_B_get, _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayload_gsHat0_B_set)
    gtHat0_B = property(_VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayload_gtHat0_B_get, _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayload_gtHat0_B_set)
    ggHat_B = property(_VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayload_ggHat_B_get, _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayload_ggHat_B_set)
    Js = property(_VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayload_Js_get, _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayload_Js_set)
    Jt = property(_VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayload_Jt_get, _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayload_Jt_set)
    Jg = property(_VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayload_Jg_get, _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayload_Jg_set)
    Iws = property(_VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayload_Iws_get, _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayload_Iws_set)
    Omega0 = property(_VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayload_Omega0_get, _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayload_Omega0_set)
    gamma0 = property(_VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayload_gamma0_get, _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayload_gamma0_set)
    gammaDot0 = property(_VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayload_gammaDot0_get, _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayload_gammaDot0_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayload_swiginit(self, _VSCMGConfigElementMsgPayload.new_VSCMGConfigElementMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _VSCMGConfigElementMsgPayload.delete_VSCMGConfigElementMsgPayload

# Register VSCMGConfigElementMsgPayload in _VSCMGConfigElementMsgPayload:
_VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayload_swigregister(VSCMGConfigElementMsgPayload)

def _pprint_VSCMGConfigElementMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[VSCMGConfigElementMsgPayload.__repr__] = _pprint_VSCMGConfigElementMsgPayload

class VSCMGConfigElementMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgReader_bskLogger_get, _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgReader_bskLogger_set)
    zeroMsgPayload = property(_VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgReader_zeroMsgPayload_get, _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgReader_swiginit(self, _VSCMGConfigElementMsgPayload.new_VSCMGConfigElementMsgReader(*args))

    def __call__(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgReader___call__(self)

    def isLinked(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgReader_isLinked(self)

    def isWritten(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgReader_isWritten(self)

    def timeWritten(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgReader_timeWritten(self)

    def moduleID(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == VSCMGConfigElementMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.VSCMGConfigElementMsgPayload import VSCMGConfigElementMsg_C
            if type(source) == VSCMGConfigElementMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<VSCMGConfigElementMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == VSCMGConfigElementMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.VSCMGConfigElementMsgPayload import VSCMGConfigElementMsg_C
        except ImportError:
            return 0

        if type(source) == VSCMGConfigElementMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _VSCMGConfigElementMsgPayload.delete_VSCMGConfigElementMsgReader

# Register VSCMGConfigElementMsgReader in _VSCMGConfigElementMsgPayload:
_VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgReader_swigregister(VSCMGConfigElementMsgReader)
class VSCMGConfigElementMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgWriter_swiginit(self, _VSCMGConfigElementMsgPayload.new_VSCMGConfigElementMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _VSCMGConfigElementMsgPayload.delete_VSCMGConfigElementMsgWriter

# Register VSCMGConfigElementMsgWriter in _VSCMGConfigElementMsgPayload:
_VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgWriter_swigregister(VSCMGConfigElementMsgWriter)
class VSCMGConfigElementMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_write_get, _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_write_set)

    def addSubscriber(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_addSubscriber(self)

    def addAuthor(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_zeroMsgPayload_get, _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_isLinked(self)

    def getPayloadSize(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_swiginit(self, _VSCMGConfigElementMsgPayload.new_VSCMGConfigElementMsg())
    __swig_destroy__ = _VSCMGConfigElementMsgPayload.delete_VSCMGConfigElementMsg

# Register VSCMGConfigElementMsg in _VSCMGConfigElementMsgPayload:
_VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_swigregister(VSCMGConfigElementMsg)
class VSCMGConfigElementMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgRecorder_swiginit(self, _VSCMGConfigElementMsgPayload.new_VSCMGConfigElementMsgRecorder(*args))
    __swig_destroy__ = _VSCMGConfigElementMsgPayload.delete_VSCMGConfigElementMsgRecorder

    def SelfInit(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgRecorder___record_vector(self)

    def size(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgRecorder_clear(self)
    bskLogger = property(_VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgRecorder_bskLogger_get, _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgRecorder_updateTimeInterval(self, timeDiff)

    def _gsHat0_B_array(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgRecorder__gsHat0_B_array(self)

    @property
    def gsHat0_B(self):
        return self._gsHat0_B_array()


    def _gtHat0_B_array(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgRecorder__gtHat0_B_array(self)

    @property
    def gtHat0_B(self):
        return self._gtHat0_B_array()


    def _ggHat_B_array(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgRecorder__ggHat_B_array(self)

    @property
    def ggHat_B(self):
        return self._ggHat_B_array()


    def _Js_array(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgRecorder__Js_array(self)

    @property
    def Js(self):
        return self._Js_array()


    def _Jt_array(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgRecorder__Jt_array(self)

    @property
    def Jt(self):
        return self._Jt_array()


    def _Jg_array(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgRecorder__Jg_array(self)

    @property
    def Jg(self):
        return self._Jg_array()


    def _Iws_array(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgRecorder__Iws_array(self)

    @property
    def Iws(self):
        return self._Iws_array()


    def _Omega0_array(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgRecorder__Omega0_array(self)

    @property
    def Omega0(self):
        return self._Omega0_array()


    def _gamma0_array(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgRecorder__gamma0_array(self)

    @property
    def gamma0(self):
        return self._gamma0_array()


    def _gammaDot0_array(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgRecorder__gammaDot0_array(self)

    @property
    def gammaDot0(self):
        return self._gammaDot0_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register VSCMGConfigElementMsgRecorder in _VSCMGConfigElementMsgPayload:
_VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgRecorder_swigregister(VSCMGConfigElementMsgRecorder)
class VSCMGConfigElementMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayloadVector___bool__(self)

    def __len__(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayloadVector_pop(self)

    def append(self, x):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayloadVector_append(self, x)

    def empty(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayloadVector_empty(self)

    def size(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayloadVector_size(self)

    def swap(self, v):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayloadVector_swap(self, v)

    def begin(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayloadVector_begin(self)

    def end(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayloadVector_end(self)

    def rbegin(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayloadVector_rbegin(self)

    def rend(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayloadVector_rend(self)

    def clear(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayloadVector_swiginit(self, _VSCMGConfigElementMsgPayload.new_VSCMGConfigElementMsgPayloadVector(*args))

    def push_back(self, x):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayloadVector_push_back(self, x)

    def front(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayloadVector_front(self)

    def back(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayloadVector_capacity(self)

    def get_all(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _VSCMGConfigElementMsgPayload.delete_VSCMGConfigElementMsgPayloadVector

# Register VSCMGConfigElementMsgPayloadVector in _VSCMGConfigElementMsgPayload:
_VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgPayloadVector_swigregister(VSCMGConfigElementMsgPayloadVector)
class VSCMGConfigElementMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsVector_empty(self)

    def size(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsVector_begin(self)

    def end(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsVector_rend(self)

    def clear(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsVector_swiginit(self, _VSCMGConfigElementMsgPayload.new_VSCMGConfigElementMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsVector_front(self)

    def back(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _VSCMGConfigElementMsgPayload.delete_VSCMGConfigElementMsgOutMsgsVector

# Register VSCMGConfigElementMsgOutMsgsVector in _VSCMGConfigElementMsgPayload:
_VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsVector_swigregister(VSCMGConfigElementMsgOutMsgsVector)
class VSCMGConfigElementMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsPtrVector_swiginit(self, _VSCMGConfigElementMsgPayload.new_VSCMGConfigElementMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _VSCMGConfigElementMsgPayload.delete_VSCMGConfigElementMsgOutMsgsPtrVector

# Register VSCMGConfigElementMsgOutMsgsPtrVector in _VSCMGConfigElementMsgPayload:
_VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgOutMsgsPtrVector_swigregister(VSCMGConfigElementMsgOutMsgsPtrVector)
class VSCMGConfigElementMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgInMsgsVector_pop(self)

    def append(self, x):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgInMsgsVector_append(self, x)

    def empty(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgInMsgsVector_empty(self)

    def size(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgInMsgsVector_size(self)

    def swap(self, v):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgInMsgsVector_begin(self)

    def end(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgInMsgsVector_end(self)

    def rbegin(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgInMsgsVector_rend(self)

    def clear(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgInMsgsVector_swiginit(self, _VSCMGConfigElementMsgPayload.new_VSCMGConfigElementMsgInMsgsVector(*args))

    def push_back(self, x):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgInMsgsVector_front(self)

    def back(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _VSCMGConfigElementMsgPayload.delete_VSCMGConfigElementMsgInMsgsVector

# Register VSCMGConfigElementMsgInMsgsVector in _VSCMGConfigElementMsgPayload:
_VSCMGConfigElementMsgPayload.VSCMGConfigElementMsgInMsgsVector_swigregister(VSCMGConfigElementMsgInMsgsVector)
class VSCMGConfigElementMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_C_header_get, _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_C_header_set)
    payload = property(_VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_C_payload_get, _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_C_payload_set)
    payloadPointer = property(_VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_C_payloadPointer_get, _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_C_payloadPointer_set)
    headerPointer = property(_VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_C_headerPointer_get, _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import VSCMGConfigElementMsg
        if type(source) == type(self):
            VSCMGConfigElementMsg_C_subscribe(self, source)
        elif type(source) == VSCMGConfigElementMsg:
            VSCMGConfigElementMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            VSCMGConfigElementMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe VSCMGConfigElementMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        VSCMGConfigElementMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import VSCMGConfigElementMsg
        if type(source) == type(self):
            return (VSCMGConfigElementMsg_C_isSubscribedTo(self, source))
        elif type(source) == VSCMGConfigElementMsg:
            return (VSCMGConfigElementMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (VSCMGConfigElementMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        VSCMGConfigElementMsg_C_addAuthor(self, self)
        if data:
            VSCMGConfigElementMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        VSCMGConfigElementMsg_C_addAuthor(self, self)
        VSCMGConfigElementMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return VSCMGConfigElementMsg_C_read(self)


    def __init__(self):
        _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_C_swiginit(self, _VSCMGConfigElementMsgPayload.new_VSCMGConfigElementMsg_C())
    __swig_destroy__ = _VSCMGConfigElementMsgPayload.delete_VSCMGConfigElementMsg_C

# Register VSCMGConfigElementMsg_C in _VSCMGConfigElementMsgPayload:
_VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_C_swigregister(VSCMGConfigElementMsg_C)

def VSCMGConfigElementMsg_cpp_subscribe(subscriber, source):
    return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_cpp_subscribe(subscriber, source)

def VSCMGConfigElementMsg_C_subscribe(subscriber, source):
    return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_C_subscribe(subscriber, source)

def VSCMGConfigElementMsg_addr_subscribe(subscriber, sourceAddr):
    return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_addr_subscribe(subscriber, sourceAddr)

def VSCMGConfigElementMsg_unsubscribe(subscriber):
    return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_unsubscribe(subscriber)

def VSCMGConfigElementMsg_C_isSubscribedTo(subscriber, source):
    return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_C_isSubscribedTo(subscriber, source)

def VSCMGConfigElementMsg_cpp_isSubscribedTo(subscriber, source):
    return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_cpp_isSubscribedTo(subscriber, source)

def VSCMGConfigElementMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def VSCMGConfigElementMsg_C_addAuthor(coowner, data):
    return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_C_addAuthor(coowner, data)

def VSCMGConfigElementMsg_C_init(owner):
    return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_C_init(owner)

def VSCMGConfigElementMsg_C_isLinked(data):
    return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_C_isLinked(data)

def VSCMGConfigElementMsg_C_isWritten(data):
    return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_C_isWritten(data)

def VSCMGConfigElementMsg_C_timeWritten(data):
    return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_C_timeWritten(data)

def VSCMGConfigElementMsg_C_moduleID(data):
    return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_C_moduleID(data)

def VSCMGConfigElementMsg_C_write(data, destination, moduleID, callTime):
    return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_C_write(data, destination, moduleID, callTime)

def VSCMGConfigElementMsg_C_read(source):
    return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_C_read(source)

def VSCMGConfigElementMsg_C_zeroMsgPayload():
    return _VSCMGConfigElementMsgPayload.VSCMGConfigElementMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_VSCMGConfigElementMsgPayload.MsgHeader_isLinked_get, _VSCMGConfigElementMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_VSCMGConfigElementMsgPayload.MsgHeader_isWritten_get, _VSCMGConfigElementMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_VSCMGConfigElementMsgPayload.MsgHeader_timeWritten_get, _VSCMGConfigElementMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_VSCMGConfigElementMsgPayload.MsgHeader_moduleID_get, _VSCMGConfigElementMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _VSCMGConfigElementMsgPayload.MsgHeader_swiginit(self, _VSCMGConfigElementMsgPayload.new_MsgHeader())
    __swig_destroy__ = _VSCMGConfigElementMsgPayload.delete_MsgHeader

# Register MsgHeader in _VSCMGConfigElementMsgPayload:
_VSCMGConfigElementMsgPayload.MsgHeader_swigregister(MsgHeader)

