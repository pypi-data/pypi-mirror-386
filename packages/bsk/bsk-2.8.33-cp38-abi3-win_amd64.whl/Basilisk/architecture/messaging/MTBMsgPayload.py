# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _MTBMsgPayload
else:
    import _MTBMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MTBMsgPayload.delete_SwigPyIterator

    def value(self):
        return _MTBMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _MTBMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _MTBMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _MTBMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _MTBMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _MTBMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _MTBMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _MTBMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _MTBMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _MTBMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _MTBMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _MTBMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _MTBMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _MTBMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _MTBMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _MTBMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _MTBMsgPayload:
_MTBMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _MTBMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _MTBMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _MTBMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _MTBMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _MTBMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _MTBMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _MTBMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _MTBMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _MTBMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _MTBMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _MTBMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _MTBMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _MTBMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _MTBMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _MTBMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _MTBMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MTBMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MTBMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _MTBMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _MTBMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _MTBMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MTBMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MTBMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MTBMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MTBMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MTBMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _MTBMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _MTBMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _MTBMsgPayload.TimeVector_empty(self)

    def size(self):
        return _MTBMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _MTBMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _MTBMsgPayload.TimeVector_begin(self)

    def end(self):
        return _MTBMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _MTBMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _MTBMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _MTBMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _MTBMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _MTBMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _MTBMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _MTBMsgPayload.TimeVector_swiginit(self, _MTBMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _MTBMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _MTBMsgPayload.TimeVector_front(self)

    def back(self):
        return _MTBMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _MTBMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _MTBMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _MTBMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _MTBMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _MTBMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _MTBMsgPayload.delete_TimeVector

# Register TimeVector in _MTBMsgPayload:
_MTBMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MTBMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MTBMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _MTBMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _MTBMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _MTBMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MTBMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MTBMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MTBMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MTBMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MTBMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _MTBMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _MTBMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _MTBMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _MTBMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _MTBMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _MTBMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _MTBMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _MTBMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _MTBMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _MTBMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _MTBMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _MTBMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _MTBMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _MTBMsgPayload.DoubleVector_swiginit(self, _MTBMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _MTBMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _MTBMsgPayload.DoubleVector_front(self)

    def back(self):
        return _MTBMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _MTBMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _MTBMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _MTBMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _MTBMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _MTBMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _MTBMsgPayload.delete_DoubleVector

# Register DoubleVector in _MTBMsgPayload:
_MTBMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MTBMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MTBMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _MTBMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _MTBMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _MTBMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MTBMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MTBMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MTBMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MTBMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MTBMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _MTBMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _MTBMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _MTBMsgPayload.StringVector_empty(self)

    def size(self):
        return _MTBMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _MTBMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _MTBMsgPayload.StringVector_begin(self)

    def end(self):
        return _MTBMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _MTBMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _MTBMsgPayload.StringVector_rend(self)

    def clear(self):
        return _MTBMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _MTBMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _MTBMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _MTBMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _MTBMsgPayload.StringVector_swiginit(self, _MTBMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _MTBMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _MTBMsgPayload.StringVector_front(self)

    def back(self):
        return _MTBMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _MTBMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _MTBMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _MTBMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _MTBMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _MTBMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _MTBMsgPayload.delete_StringVector

# Register StringVector in _MTBMsgPayload:
_MTBMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _MTBMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _MTBMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _MTBMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _MTBMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _MTBMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _MTBMsgPayload.NANO2SEC
SEC2NANO = _MTBMsgPayload.SEC2NANO
SEC2HOUR = _MTBMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _MTBMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _MTBMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _MTBMsgPayload.secToNano(seconds)
BOOL_FALSE = _MTBMsgPayload.BOOL_FALSE
BOOL_TRUE = _MTBMsgPayload.BOOL_TRUE
AVAILABLE = _MTBMsgPayload.AVAILABLE
UNAVAILABLE = _MTBMsgPayload.UNAVAILABLE
BalancedWheels = _MTBMsgPayload.BalancedWheels
JitterSimple = _MTBMsgPayload.JitterSimple
JitterFullyCoupled = _MTBMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MTBMsgPayload.SysModel_swiginit(self, _MTBMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _MTBMsgPayload.delete_SysModel

    def SelfInit(self):
        return _MTBMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _MTBMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _MTBMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _MTBMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_MTBMsgPayload.SysModel_ModelTag_get, _MTBMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_MTBMsgPayload.SysModel_CallCounts_get, _MTBMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_MTBMsgPayload.SysModel_RNGSeed_get, _MTBMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_MTBMsgPayload.SysModel_moduleID_get, _MTBMsgPayload.SysModel_moduleID_set)

# Register SysModel in _MTBMsgPayload:
_MTBMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _MTBMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _MTBMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _MTBMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _MTBMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _MTBMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _MTBMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _MTBMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _MTBMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _MTBMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _MTBMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _MTBMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _MTBMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class MTBMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mtbNetTorque_B = property(_MTBMsgPayload.MTBMsgPayload_mtbNetTorque_B_get, _MTBMsgPayload.MTBMsgPayload_mtbNetTorque_B_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _MTBMsgPayload.MTBMsgPayload_swiginit(self, _MTBMsgPayload.new_MTBMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _MTBMsgPayload.delete_MTBMsgPayload

# Register MTBMsgPayload in _MTBMsgPayload:
_MTBMsgPayload.MTBMsgPayload_swigregister(MTBMsgPayload)

def _pprint_MTBMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[MTBMsgPayload.__repr__] = _pprint_MTBMsgPayload

class MTBMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_MTBMsgPayload.MTBMsgReader_bskLogger_get, _MTBMsgPayload.MTBMsgReader_bskLogger_set)
    zeroMsgPayload = property(_MTBMsgPayload.MTBMsgReader_zeroMsgPayload_get, _MTBMsgPayload.MTBMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _MTBMsgPayload.MTBMsgReader_swiginit(self, _MTBMsgPayload.new_MTBMsgReader(*args))

    def __call__(self):
        return _MTBMsgPayload.MTBMsgReader___call__(self)

    def isLinked(self):
        return _MTBMsgPayload.MTBMsgReader_isLinked(self)

    def isWritten(self):
        return _MTBMsgPayload.MTBMsgReader_isWritten(self)

    def timeWritten(self):
        return _MTBMsgPayload.MTBMsgReader_timeWritten(self)

    def moduleID(self):
        return _MTBMsgPayload.MTBMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _MTBMsgPayload.MTBMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _MTBMsgPayload.MTBMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _MTBMsgPayload.MTBMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _MTBMsgPayload.MTBMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _MTBMsgPayload.MTBMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _MTBMsgPayload.MTBMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _MTBMsgPayload.MTBMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _MTBMsgPayload.MTBMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _MTBMsgPayload.MTBMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _MTBMsgPayload.MTBMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == MTBMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.MTBMsgPayload import MTBMsg_C
            if type(source) == MTBMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<MTBMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == MTBMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.MTBMsgPayload import MTBMsg_C
        except ImportError:
            return 0

        if type(source) == MTBMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _MTBMsgPayload.delete_MTBMsgReader

# Register MTBMsgReader in _MTBMsgPayload:
_MTBMsgPayload.MTBMsgReader_swigregister(MTBMsgReader)
class MTBMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MTBMsgPayload.MTBMsgWriter_swiginit(self, _MTBMsgPayload.new_MTBMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _MTBMsgPayload.MTBMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _MTBMsgPayload.delete_MTBMsgWriter

# Register MTBMsgWriter in _MTBMsgPayload:
_MTBMsgPayload.MTBMsgWriter_swigregister(MTBMsgWriter)
class MTBMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_MTBMsgPayload.MTBMsg_write_get, _MTBMsgPayload.MTBMsg_write_set)

    def addSubscriber(self):
        return _MTBMsgPayload.MTBMsg_addSubscriber(self)

    def addAuthor(self):
        return _MTBMsgPayload.MTBMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _MTBMsgPayload.MTBMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _MTBMsgPayload.MTBMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _MTBMsgPayload.MTBMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_MTBMsgPayload.MTBMsg_zeroMsgPayload_get, _MTBMsgPayload.MTBMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _MTBMsgPayload.MTBMsg_isLinked(self)

    def getPayloadSize(self):
        return _MTBMsgPayload.MTBMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _MTBMsgPayload.MTBMsg_swiginit(self, _MTBMsgPayload.new_MTBMsg())
    __swig_destroy__ = _MTBMsgPayload.delete_MTBMsg

# Register MTBMsg in _MTBMsgPayload:
_MTBMsgPayload.MTBMsg_swigregister(MTBMsg)
class MTBMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MTBMsgPayload.MTBMsgRecorder_swiginit(self, _MTBMsgPayload.new_MTBMsgRecorder(*args))
    __swig_destroy__ = _MTBMsgPayload.delete_MTBMsgRecorder

    def SelfInit(self):
        return _MTBMsgPayload.MTBMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _MTBMsgPayload.MTBMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _MTBMsgPayload.MTBMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _MTBMsgPayload.MTBMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _MTBMsgPayload.MTBMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _MTBMsgPayload.MTBMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _MTBMsgPayload.MTBMsgRecorder___record_vector(self)

    def size(self):
        return _MTBMsgPayload.MTBMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _MTBMsgPayload.MTBMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _MTBMsgPayload.MTBMsgRecorder_clear(self)
    bskLogger = property(_MTBMsgPayload.MTBMsgRecorder_bskLogger_get, _MTBMsgPayload.MTBMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _MTBMsgPayload.MTBMsgRecorder_updateTimeInterval(self, timeDiff)

    def _mtbNetTorque_B_array(self):
        return _MTBMsgPayload.MTBMsgRecorder__mtbNetTorque_B_array(self)

    @property
    def mtbNetTorque_B(self):
        return self._mtbNetTorque_B_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register MTBMsgRecorder in _MTBMsgPayload:
_MTBMsgPayload.MTBMsgRecorder_swigregister(MTBMsgRecorder)
class MTBMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MTBMsgPayload.MTBMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MTBMsgPayload.MTBMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _MTBMsgPayload.MTBMsgPayloadVector___bool__(self)

    def __len__(self):
        return _MTBMsgPayload.MTBMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _MTBMsgPayload.MTBMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MTBMsgPayload.MTBMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MTBMsgPayload.MTBMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MTBMsgPayload.MTBMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MTBMsgPayload.MTBMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MTBMsgPayload.MTBMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _MTBMsgPayload.MTBMsgPayloadVector_pop(self)

    def append(self, x):
        return _MTBMsgPayload.MTBMsgPayloadVector_append(self, x)

    def empty(self):
        return _MTBMsgPayload.MTBMsgPayloadVector_empty(self)

    def size(self):
        return _MTBMsgPayload.MTBMsgPayloadVector_size(self)

    def swap(self, v):
        return _MTBMsgPayload.MTBMsgPayloadVector_swap(self, v)

    def begin(self):
        return _MTBMsgPayload.MTBMsgPayloadVector_begin(self)

    def end(self):
        return _MTBMsgPayload.MTBMsgPayloadVector_end(self)

    def rbegin(self):
        return _MTBMsgPayload.MTBMsgPayloadVector_rbegin(self)

    def rend(self):
        return _MTBMsgPayload.MTBMsgPayloadVector_rend(self)

    def clear(self):
        return _MTBMsgPayload.MTBMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _MTBMsgPayload.MTBMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _MTBMsgPayload.MTBMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _MTBMsgPayload.MTBMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _MTBMsgPayload.MTBMsgPayloadVector_swiginit(self, _MTBMsgPayload.new_MTBMsgPayloadVector(*args))

    def push_back(self, x):
        return _MTBMsgPayload.MTBMsgPayloadVector_push_back(self, x)

    def front(self):
        return _MTBMsgPayload.MTBMsgPayloadVector_front(self)

    def back(self):
        return _MTBMsgPayload.MTBMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _MTBMsgPayload.MTBMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _MTBMsgPayload.MTBMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _MTBMsgPayload.MTBMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _MTBMsgPayload.MTBMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _MTBMsgPayload.MTBMsgPayloadVector_capacity(self)

    def get_all(self):
        return _MTBMsgPayload.MTBMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _MTBMsgPayload.delete_MTBMsgPayloadVector

# Register MTBMsgPayloadVector in _MTBMsgPayload:
_MTBMsgPayload.MTBMsgPayloadVector_swigregister(MTBMsgPayloadVector)
class MTBMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MTBMsgPayload.MTBMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MTBMsgPayload.MTBMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _MTBMsgPayload.MTBMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _MTBMsgPayload.MTBMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _MTBMsgPayload.MTBMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MTBMsgPayload.MTBMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MTBMsgPayload.MTBMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MTBMsgPayload.MTBMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MTBMsgPayload.MTBMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MTBMsgPayload.MTBMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _MTBMsgPayload.MTBMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _MTBMsgPayload.MTBMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _MTBMsgPayload.MTBMsgOutMsgsVector_empty(self)

    def size(self):
        return _MTBMsgPayload.MTBMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _MTBMsgPayload.MTBMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _MTBMsgPayload.MTBMsgOutMsgsVector_begin(self)

    def end(self):
        return _MTBMsgPayload.MTBMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _MTBMsgPayload.MTBMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _MTBMsgPayload.MTBMsgOutMsgsVector_rend(self)

    def clear(self):
        return _MTBMsgPayload.MTBMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _MTBMsgPayload.MTBMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _MTBMsgPayload.MTBMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _MTBMsgPayload.MTBMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _MTBMsgPayload.MTBMsgOutMsgsVector_swiginit(self, _MTBMsgPayload.new_MTBMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _MTBMsgPayload.MTBMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _MTBMsgPayload.MTBMsgOutMsgsVector_front(self)

    def back(self):
        return _MTBMsgPayload.MTBMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _MTBMsgPayload.MTBMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _MTBMsgPayload.MTBMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _MTBMsgPayload.MTBMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _MTBMsgPayload.MTBMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _MTBMsgPayload.MTBMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _MTBMsgPayload.delete_MTBMsgOutMsgsVector

# Register MTBMsgOutMsgsVector in _MTBMsgPayload:
_MTBMsgPayload.MTBMsgOutMsgsVector_swigregister(MTBMsgOutMsgsVector)
class MTBMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MTBMsgPayload.MTBMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MTBMsgPayload.MTBMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _MTBMsgPayload.MTBMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _MTBMsgPayload.MTBMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _MTBMsgPayload.MTBMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MTBMsgPayload.MTBMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MTBMsgPayload.MTBMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MTBMsgPayload.MTBMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MTBMsgPayload.MTBMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MTBMsgPayload.MTBMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _MTBMsgPayload.MTBMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _MTBMsgPayload.MTBMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _MTBMsgPayload.MTBMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _MTBMsgPayload.MTBMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _MTBMsgPayload.MTBMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _MTBMsgPayload.MTBMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _MTBMsgPayload.MTBMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _MTBMsgPayload.MTBMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _MTBMsgPayload.MTBMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _MTBMsgPayload.MTBMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _MTBMsgPayload.MTBMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _MTBMsgPayload.MTBMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _MTBMsgPayload.MTBMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _MTBMsgPayload.MTBMsgOutMsgsPtrVector_swiginit(self, _MTBMsgPayload.new_MTBMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _MTBMsgPayload.MTBMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _MTBMsgPayload.MTBMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _MTBMsgPayload.MTBMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _MTBMsgPayload.MTBMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _MTBMsgPayload.MTBMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _MTBMsgPayload.MTBMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _MTBMsgPayload.MTBMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _MTBMsgPayload.MTBMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _MTBMsgPayload.delete_MTBMsgOutMsgsPtrVector

# Register MTBMsgOutMsgsPtrVector in _MTBMsgPayload:
_MTBMsgPayload.MTBMsgOutMsgsPtrVector_swigregister(MTBMsgOutMsgsPtrVector)
class MTBMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MTBMsgPayload.MTBMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MTBMsgPayload.MTBMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _MTBMsgPayload.MTBMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _MTBMsgPayload.MTBMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _MTBMsgPayload.MTBMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MTBMsgPayload.MTBMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MTBMsgPayload.MTBMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MTBMsgPayload.MTBMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MTBMsgPayload.MTBMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MTBMsgPayload.MTBMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _MTBMsgPayload.MTBMsgInMsgsVector_pop(self)

    def append(self, x):
        return _MTBMsgPayload.MTBMsgInMsgsVector_append(self, x)

    def empty(self):
        return _MTBMsgPayload.MTBMsgInMsgsVector_empty(self)

    def size(self):
        return _MTBMsgPayload.MTBMsgInMsgsVector_size(self)

    def swap(self, v):
        return _MTBMsgPayload.MTBMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _MTBMsgPayload.MTBMsgInMsgsVector_begin(self)

    def end(self):
        return _MTBMsgPayload.MTBMsgInMsgsVector_end(self)

    def rbegin(self):
        return _MTBMsgPayload.MTBMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _MTBMsgPayload.MTBMsgInMsgsVector_rend(self)

    def clear(self):
        return _MTBMsgPayload.MTBMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _MTBMsgPayload.MTBMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _MTBMsgPayload.MTBMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _MTBMsgPayload.MTBMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _MTBMsgPayload.MTBMsgInMsgsVector_swiginit(self, _MTBMsgPayload.new_MTBMsgInMsgsVector(*args))

    def push_back(self, x):
        return _MTBMsgPayload.MTBMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _MTBMsgPayload.MTBMsgInMsgsVector_front(self)

    def back(self):
        return _MTBMsgPayload.MTBMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _MTBMsgPayload.MTBMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _MTBMsgPayload.MTBMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _MTBMsgPayload.MTBMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _MTBMsgPayload.MTBMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _MTBMsgPayload.MTBMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _MTBMsgPayload.delete_MTBMsgInMsgsVector

# Register MTBMsgInMsgsVector in _MTBMsgPayload:
_MTBMsgPayload.MTBMsgInMsgsVector_swigregister(MTBMsgInMsgsVector)
class MTBMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_MTBMsgPayload.MTBMsg_C_header_get, _MTBMsgPayload.MTBMsg_C_header_set)
    payload = property(_MTBMsgPayload.MTBMsg_C_payload_get, _MTBMsgPayload.MTBMsg_C_payload_set)
    payloadPointer = property(_MTBMsgPayload.MTBMsg_C_payloadPointer_get, _MTBMsgPayload.MTBMsg_C_payloadPointer_set)
    headerPointer = property(_MTBMsgPayload.MTBMsg_C_headerPointer_get, _MTBMsgPayload.MTBMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _MTBMsgPayload.MTBMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import MTBMsg
        if type(source) == type(self):
            MTBMsg_C_subscribe(self, source)
        elif type(source) == MTBMsg:
            MTBMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            MTBMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe MTBMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        MTBMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import MTBMsg
        if type(source) == type(self):
            return (MTBMsg_C_isSubscribedTo(self, source))
        elif type(source) == MTBMsg:
            return (MTBMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (MTBMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        MTBMsg_C_addAuthor(self, self)
        if data:
            MTBMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        MTBMsg_C_addAuthor(self, self)
        MTBMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return MTBMsg_C_read(self)


    def __init__(self):
        _MTBMsgPayload.MTBMsg_C_swiginit(self, _MTBMsgPayload.new_MTBMsg_C())
    __swig_destroy__ = _MTBMsgPayload.delete_MTBMsg_C

# Register MTBMsg_C in _MTBMsgPayload:
_MTBMsgPayload.MTBMsg_C_swigregister(MTBMsg_C)

def MTBMsg_cpp_subscribe(subscriber, source):
    return _MTBMsgPayload.MTBMsg_cpp_subscribe(subscriber, source)

def MTBMsg_C_subscribe(subscriber, source):
    return _MTBMsgPayload.MTBMsg_C_subscribe(subscriber, source)

def MTBMsg_addr_subscribe(subscriber, sourceAddr):
    return _MTBMsgPayload.MTBMsg_addr_subscribe(subscriber, sourceAddr)

def MTBMsg_unsubscribe(subscriber):
    return _MTBMsgPayload.MTBMsg_unsubscribe(subscriber)

def MTBMsg_C_isSubscribedTo(subscriber, source):
    return _MTBMsgPayload.MTBMsg_C_isSubscribedTo(subscriber, source)

def MTBMsg_cpp_isSubscribedTo(subscriber, source):
    return _MTBMsgPayload.MTBMsg_cpp_isSubscribedTo(subscriber, source)

def MTBMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _MTBMsgPayload.MTBMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def MTBMsg_C_addAuthor(coowner, data):
    return _MTBMsgPayload.MTBMsg_C_addAuthor(coowner, data)

def MTBMsg_C_init(owner):
    return _MTBMsgPayload.MTBMsg_C_init(owner)

def MTBMsg_C_isLinked(data):
    return _MTBMsgPayload.MTBMsg_C_isLinked(data)

def MTBMsg_C_isWritten(data):
    return _MTBMsgPayload.MTBMsg_C_isWritten(data)

def MTBMsg_C_timeWritten(data):
    return _MTBMsgPayload.MTBMsg_C_timeWritten(data)

def MTBMsg_C_moduleID(data):
    return _MTBMsgPayload.MTBMsg_C_moduleID(data)

def MTBMsg_C_write(data, destination, moduleID, callTime):
    return _MTBMsgPayload.MTBMsg_C_write(data, destination, moduleID, callTime)

def MTBMsg_C_read(source):
    return _MTBMsgPayload.MTBMsg_C_read(source)

def MTBMsg_C_zeroMsgPayload():
    return _MTBMsgPayload.MTBMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_MTBMsgPayload.MsgHeader_isLinked_get, _MTBMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_MTBMsgPayload.MsgHeader_isWritten_get, _MTBMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_MTBMsgPayload.MsgHeader_timeWritten_get, _MTBMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_MTBMsgPayload.MsgHeader_moduleID_get, _MTBMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _MTBMsgPayload.MsgHeader_swiginit(self, _MTBMsgPayload.new_MsgHeader())
    __swig_destroy__ = _MTBMsgPayload.delete_MsgHeader

# Register MsgHeader in _MTBMsgPayload:
_MTBMsgPayload.MsgHeader_swigregister(MsgHeader)

