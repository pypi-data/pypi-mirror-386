# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _TorqueAtSiteMsgPayload
else:
    import _TorqueAtSiteMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TorqueAtSiteMsgPayload.delete_SwigPyIterator

    def value(self):
        return _TorqueAtSiteMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _TorqueAtSiteMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _TorqueAtSiteMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _TorqueAtSiteMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _TorqueAtSiteMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _TorqueAtSiteMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _TorqueAtSiteMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _TorqueAtSiteMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _TorqueAtSiteMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _TorqueAtSiteMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _TorqueAtSiteMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _TorqueAtSiteMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _TorqueAtSiteMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _TorqueAtSiteMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _TorqueAtSiteMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _TorqueAtSiteMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _TorqueAtSiteMsgPayload:
_TorqueAtSiteMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _TorqueAtSiteMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _TorqueAtSiteMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _TorqueAtSiteMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _TorqueAtSiteMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _TorqueAtSiteMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _TorqueAtSiteMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _TorqueAtSiteMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _TorqueAtSiteMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _TorqueAtSiteMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _TorqueAtSiteMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _TorqueAtSiteMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _TorqueAtSiteMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _TorqueAtSiteMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _TorqueAtSiteMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _TorqueAtSiteMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _TorqueAtSiteMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TorqueAtSiteMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TorqueAtSiteMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _TorqueAtSiteMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _TorqueAtSiteMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _TorqueAtSiteMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TorqueAtSiteMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TorqueAtSiteMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TorqueAtSiteMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TorqueAtSiteMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TorqueAtSiteMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _TorqueAtSiteMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _TorqueAtSiteMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _TorqueAtSiteMsgPayload.TimeVector_empty(self)

    def size(self):
        return _TorqueAtSiteMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _TorqueAtSiteMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _TorqueAtSiteMsgPayload.TimeVector_begin(self)

    def end(self):
        return _TorqueAtSiteMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _TorqueAtSiteMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _TorqueAtSiteMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _TorqueAtSiteMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _TorqueAtSiteMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _TorqueAtSiteMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _TorqueAtSiteMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _TorqueAtSiteMsgPayload.TimeVector_swiginit(self, _TorqueAtSiteMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _TorqueAtSiteMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _TorqueAtSiteMsgPayload.TimeVector_front(self)

    def back(self):
        return _TorqueAtSiteMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _TorqueAtSiteMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _TorqueAtSiteMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _TorqueAtSiteMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _TorqueAtSiteMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _TorqueAtSiteMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _TorqueAtSiteMsgPayload.delete_TimeVector

# Register TimeVector in _TorqueAtSiteMsgPayload:
_TorqueAtSiteMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TorqueAtSiteMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TorqueAtSiteMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _TorqueAtSiteMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _TorqueAtSiteMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _TorqueAtSiteMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TorqueAtSiteMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TorqueAtSiteMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TorqueAtSiteMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TorqueAtSiteMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TorqueAtSiteMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _TorqueAtSiteMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _TorqueAtSiteMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _TorqueAtSiteMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _TorqueAtSiteMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _TorqueAtSiteMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _TorqueAtSiteMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _TorqueAtSiteMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _TorqueAtSiteMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _TorqueAtSiteMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _TorqueAtSiteMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _TorqueAtSiteMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _TorqueAtSiteMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _TorqueAtSiteMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _TorqueAtSiteMsgPayload.DoubleVector_swiginit(self, _TorqueAtSiteMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _TorqueAtSiteMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _TorqueAtSiteMsgPayload.DoubleVector_front(self)

    def back(self):
        return _TorqueAtSiteMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _TorqueAtSiteMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _TorqueAtSiteMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _TorqueAtSiteMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _TorqueAtSiteMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _TorqueAtSiteMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _TorqueAtSiteMsgPayload.delete_DoubleVector

# Register DoubleVector in _TorqueAtSiteMsgPayload:
_TorqueAtSiteMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TorqueAtSiteMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TorqueAtSiteMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _TorqueAtSiteMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _TorqueAtSiteMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _TorqueAtSiteMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TorqueAtSiteMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TorqueAtSiteMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TorqueAtSiteMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TorqueAtSiteMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TorqueAtSiteMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _TorqueAtSiteMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _TorqueAtSiteMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _TorqueAtSiteMsgPayload.StringVector_empty(self)

    def size(self):
        return _TorqueAtSiteMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _TorqueAtSiteMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _TorqueAtSiteMsgPayload.StringVector_begin(self)

    def end(self):
        return _TorqueAtSiteMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _TorqueAtSiteMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _TorqueAtSiteMsgPayload.StringVector_rend(self)

    def clear(self):
        return _TorqueAtSiteMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _TorqueAtSiteMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _TorqueAtSiteMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _TorqueAtSiteMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _TorqueAtSiteMsgPayload.StringVector_swiginit(self, _TorqueAtSiteMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _TorqueAtSiteMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _TorqueAtSiteMsgPayload.StringVector_front(self)

    def back(self):
        return _TorqueAtSiteMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _TorqueAtSiteMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _TorqueAtSiteMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _TorqueAtSiteMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _TorqueAtSiteMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _TorqueAtSiteMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _TorqueAtSiteMsgPayload.delete_StringVector

# Register StringVector in _TorqueAtSiteMsgPayload:
_TorqueAtSiteMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _TorqueAtSiteMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _TorqueAtSiteMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _TorqueAtSiteMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _TorqueAtSiteMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _TorqueAtSiteMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _TorqueAtSiteMsgPayload.NANO2SEC
SEC2NANO = _TorqueAtSiteMsgPayload.SEC2NANO
SEC2HOUR = _TorqueAtSiteMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _TorqueAtSiteMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _TorqueAtSiteMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _TorqueAtSiteMsgPayload.secToNano(seconds)
BOOL_FALSE = _TorqueAtSiteMsgPayload.BOOL_FALSE
BOOL_TRUE = _TorqueAtSiteMsgPayload.BOOL_TRUE
AVAILABLE = _TorqueAtSiteMsgPayload.AVAILABLE
UNAVAILABLE = _TorqueAtSiteMsgPayload.UNAVAILABLE
BalancedWheels = _TorqueAtSiteMsgPayload.BalancedWheels
JitterSimple = _TorqueAtSiteMsgPayload.JitterSimple
JitterFullyCoupled = _TorqueAtSiteMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TorqueAtSiteMsgPayload.SysModel_swiginit(self, _TorqueAtSiteMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _TorqueAtSiteMsgPayload.delete_SysModel

    def SelfInit(self):
        return _TorqueAtSiteMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _TorqueAtSiteMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _TorqueAtSiteMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _TorqueAtSiteMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_TorqueAtSiteMsgPayload.SysModel_ModelTag_get, _TorqueAtSiteMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_TorqueAtSiteMsgPayload.SysModel_CallCounts_get, _TorqueAtSiteMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_TorqueAtSiteMsgPayload.SysModel_RNGSeed_get, _TorqueAtSiteMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_TorqueAtSiteMsgPayload.SysModel_moduleID_get, _TorqueAtSiteMsgPayload.SysModel_moduleID_set)

# Register SysModel in _TorqueAtSiteMsgPayload:
_TorqueAtSiteMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _TorqueAtSiteMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _TorqueAtSiteMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _TorqueAtSiteMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _TorqueAtSiteMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _TorqueAtSiteMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _TorqueAtSiteMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _TorqueAtSiteMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _TorqueAtSiteMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _TorqueAtSiteMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _TorqueAtSiteMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _TorqueAtSiteMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _TorqueAtSiteMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class TorqueAtSiteMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    torque_S = property(_TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayload_torque_S_get, _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayload_torque_S_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayload_swiginit(self, _TorqueAtSiteMsgPayload.new_TorqueAtSiteMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _TorqueAtSiteMsgPayload.delete_TorqueAtSiteMsgPayload

# Register TorqueAtSiteMsgPayload in _TorqueAtSiteMsgPayload:
_TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayload_swigregister(TorqueAtSiteMsgPayload)

def _pprint_TorqueAtSiteMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[TorqueAtSiteMsgPayload.__repr__] = _pprint_TorqueAtSiteMsgPayload

class TorqueAtSiteMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_TorqueAtSiteMsgPayload.TorqueAtSiteMsgReader_bskLogger_get, _TorqueAtSiteMsgPayload.TorqueAtSiteMsgReader_bskLogger_set)
    zeroMsgPayload = property(_TorqueAtSiteMsgPayload.TorqueAtSiteMsgReader_zeroMsgPayload_get, _TorqueAtSiteMsgPayload.TorqueAtSiteMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _TorqueAtSiteMsgPayload.TorqueAtSiteMsgReader_swiginit(self, _TorqueAtSiteMsgPayload.new_TorqueAtSiteMsgReader(*args))

    def __call__(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgReader___call__(self)

    def isLinked(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgReader_isLinked(self)

    def isWritten(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgReader_isWritten(self)

    def timeWritten(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgReader_timeWritten(self)

    def moduleID(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == TorqueAtSiteMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.TorqueAtSiteMsgPayload import TorqueAtSiteMsg_C
            if type(source) == TorqueAtSiteMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<TorqueAtSiteMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == TorqueAtSiteMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.TorqueAtSiteMsgPayload import TorqueAtSiteMsg_C
        except ImportError:
            return 0

        if type(source) == TorqueAtSiteMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _TorqueAtSiteMsgPayload.delete_TorqueAtSiteMsgReader

# Register TorqueAtSiteMsgReader in _TorqueAtSiteMsgPayload:
_TorqueAtSiteMsgPayload.TorqueAtSiteMsgReader_swigregister(TorqueAtSiteMsgReader)
class TorqueAtSiteMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TorqueAtSiteMsgPayload.TorqueAtSiteMsgWriter_swiginit(self, _TorqueAtSiteMsgPayload.new_TorqueAtSiteMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _TorqueAtSiteMsgPayload.delete_TorqueAtSiteMsgWriter

# Register TorqueAtSiteMsgWriter in _TorqueAtSiteMsgPayload:
_TorqueAtSiteMsgPayload.TorqueAtSiteMsgWriter_swigregister(TorqueAtSiteMsgWriter)
class TorqueAtSiteMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_TorqueAtSiteMsgPayload.TorqueAtSiteMsg_write_get, _TorqueAtSiteMsgPayload.TorqueAtSiteMsg_write_set)

    def addSubscriber(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsg_addSubscriber(self)

    def addAuthor(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_TorqueAtSiteMsgPayload.TorqueAtSiteMsg_zeroMsgPayload_get, _TorqueAtSiteMsgPayload.TorqueAtSiteMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsg_isLinked(self)

    def getPayloadSize(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _TorqueAtSiteMsgPayload.TorqueAtSiteMsg_swiginit(self, _TorqueAtSiteMsgPayload.new_TorqueAtSiteMsg())
    __swig_destroy__ = _TorqueAtSiteMsgPayload.delete_TorqueAtSiteMsg

# Register TorqueAtSiteMsg in _TorqueAtSiteMsgPayload:
_TorqueAtSiteMsgPayload.TorqueAtSiteMsg_swigregister(TorqueAtSiteMsg)
class TorqueAtSiteMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TorqueAtSiteMsgPayload.TorqueAtSiteMsgRecorder_swiginit(self, _TorqueAtSiteMsgPayload.new_TorqueAtSiteMsgRecorder(*args))
    __swig_destroy__ = _TorqueAtSiteMsgPayload.delete_TorqueAtSiteMsgRecorder

    def SelfInit(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgRecorder___record_vector(self)

    def size(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgRecorder_clear(self)
    bskLogger = property(_TorqueAtSiteMsgPayload.TorqueAtSiteMsgRecorder_bskLogger_get, _TorqueAtSiteMsgPayload.TorqueAtSiteMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgRecorder_updateTimeInterval(self, timeDiff)

    def _torque_S_array(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgRecorder__torque_S_array(self)

    @property
    def torque_S(self):
        return self._torque_S_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register TorqueAtSiteMsgRecorder in _TorqueAtSiteMsgPayload:
_TorqueAtSiteMsgPayload.TorqueAtSiteMsgRecorder_swigregister(TorqueAtSiteMsgRecorder)
class TorqueAtSiteMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayloadVector___bool__(self)

    def __len__(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayloadVector_pop(self)

    def append(self, x):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayloadVector_append(self, x)

    def empty(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayloadVector_empty(self)

    def size(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayloadVector_size(self)

    def swap(self, v):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayloadVector_swap(self, v)

    def begin(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayloadVector_begin(self)

    def end(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayloadVector_end(self)

    def rbegin(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayloadVector_rbegin(self)

    def rend(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayloadVector_rend(self)

    def clear(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayloadVector_swiginit(self, _TorqueAtSiteMsgPayload.new_TorqueAtSiteMsgPayloadVector(*args))

    def push_back(self, x):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayloadVector_push_back(self, x)

    def front(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayloadVector_front(self)

    def back(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayloadVector_capacity(self)

    def get_all(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _TorqueAtSiteMsgPayload.delete_TorqueAtSiteMsgPayloadVector

# Register TorqueAtSiteMsgPayloadVector in _TorqueAtSiteMsgPayload:
_TorqueAtSiteMsgPayload.TorqueAtSiteMsgPayloadVector_swigregister(TorqueAtSiteMsgPayloadVector)
class TorqueAtSiteMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsVector_empty(self)

    def size(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsVector_begin(self)

    def end(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsVector_rend(self)

    def clear(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsVector_swiginit(self, _TorqueAtSiteMsgPayload.new_TorqueAtSiteMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsVector_front(self)

    def back(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _TorqueAtSiteMsgPayload.delete_TorqueAtSiteMsgOutMsgsVector

# Register TorqueAtSiteMsgOutMsgsVector in _TorqueAtSiteMsgPayload:
_TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsVector_swigregister(TorqueAtSiteMsgOutMsgsVector)
class TorqueAtSiteMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsPtrVector_swiginit(self, _TorqueAtSiteMsgPayload.new_TorqueAtSiteMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _TorqueAtSiteMsgPayload.delete_TorqueAtSiteMsgOutMsgsPtrVector

# Register TorqueAtSiteMsgOutMsgsPtrVector in _TorqueAtSiteMsgPayload:
_TorqueAtSiteMsgPayload.TorqueAtSiteMsgOutMsgsPtrVector_swigregister(TorqueAtSiteMsgOutMsgsPtrVector)
class TorqueAtSiteMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgInMsgsVector_pop(self)

    def append(self, x):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgInMsgsVector_append(self, x)

    def empty(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgInMsgsVector_empty(self)

    def size(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgInMsgsVector_size(self)

    def swap(self, v):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgInMsgsVector_begin(self)

    def end(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgInMsgsVector_end(self)

    def rbegin(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgInMsgsVector_rend(self)

    def clear(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _TorqueAtSiteMsgPayload.TorqueAtSiteMsgInMsgsVector_swiginit(self, _TorqueAtSiteMsgPayload.new_TorqueAtSiteMsgInMsgsVector(*args))

    def push_back(self, x):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgInMsgsVector_front(self)

    def back(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _TorqueAtSiteMsgPayload.delete_TorqueAtSiteMsgInMsgsVector

# Register TorqueAtSiteMsgInMsgsVector in _TorqueAtSiteMsgPayload:
_TorqueAtSiteMsgPayload.TorqueAtSiteMsgInMsgsVector_swigregister(TorqueAtSiteMsgInMsgsVector)
class TorqueAtSiteMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_TorqueAtSiteMsgPayload.TorqueAtSiteMsg_C_header_get, _TorqueAtSiteMsgPayload.TorqueAtSiteMsg_C_header_set)
    payload = property(_TorqueAtSiteMsgPayload.TorqueAtSiteMsg_C_payload_get, _TorqueAtSiteMsgPayload.TorqueAtSiteMsg_C_payload_set)
    payloadPointer = property(_TorqueAtSiteMsgPayload.TorqueAtSiteMsg_C_payloadPointer_get, _TorqueAtSiteMsgPayload.TorqueAtSiteMsg_C_payloadPointer_set)
    headerPointer = property(_TorqueAtSiteMsgPayload.TorqueAtSiteMsg_C_headerPointer_get, _TorqueAtSiteMsgPayload.TorqueAtSiteMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _TorqueAtSiteMsgPayload.TorqueAtSiteMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import TorqueAtSiteMsg
        if type(source) == type(self):
            TorqueAtSiteMsg_C_subscribe(self, source)
        elif type(source) == TorqueAtSiteMsg:
            TorqueAtSiteMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            TorqueAtSiteMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe TorqueAtSiteMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        TorqueAtSiteMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import TorqueAtSiteMsg
        if type(source) == type(self):
            return (TorqueAtSiteMsg_C_isSubscribedTo(self, source))
        elif type(source) == TorqueAtSiteMsg:
            return (TorqueAtSiteMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (TorqueAtSiteMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        TorqueAtSiteMsg_C_addAuthor(self, self)
        if data:
            TorqueAtSiteMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        TorqueAtSiteMsg_C_addAuthor(self, self)
        TorqueAtSiteMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return TorqueAtSiteMsg_C_read(self)


    def __init__(self):
        _TorqueAtSiteMsgPayload.TorqueAtSiteMsg_C_swiginit(self, _TorqueAtSiteMsgPayload.new_TorqueAtSiteMsg_C())
    __swig_destroy__ = _TorqueAtSiteMsgPayload.delete_TorqueAtSiteMsg_C

# Register TorqueAtSiteMsg_C in _TorqueAtSiteMsgPayload:
_TorqueAtSiteMsgPayload.TorqueAtSiteMsg_C_swigregister(TorqueAtSiteMsg_C)

def TorqueAtSiteMsg_cpp_subscribe(subscriber, source):
    return _TorqueAtSiteMsgPayload.TorqueAtSiteMsg_cpp_subscribe(subscriber, source)

def TorqueAtSiteMsg_C_subscribe(subscriber, source):
    return _TorqueAtSiteMsgPayload.TorqueAtSiteMsg_C_subscribe(subscriber, source)

def TorqueAtSiteMsg_addr_subscribe(subscriber, sourceAddr):
    return _TorqueAtSiteMsgPayload.TorqueAtSiteMsg_addr_subscribe(subscriber, sourceAddr)

def TorqueAtSiteMsg_unsubscribe(subscriber):
    return _TorqueAtSiteMsgPayload.TorqueAtSiteMsg_unsubscribe(subscriber)

def TorqueAtSiteMsg_C_isSubscribedTo(subscriber, source):
    return _TorqueAtSiteMsgPayload.TorqueAtSiteMsg_C_isSubscribedTo(subscriber, source)

def TorqueAtSiteMsg_cpp_isSubscribedTo(subscriber, source):
    return _TorqueAtSiteMsgPayload.TorqueAtSiteMsg_cpp_isSubscribedTo(subscriber, source)

def TorqueAtSiteMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _TorqueAtSiteMsgPayload.TorqueAtSiteMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def TorqueAtSiteMsg_C_addAuthor(coowner, data):
    return _TorqueAtSiteMsgPayload.TorqueAtSiteMsg_C_addAuthor(coowner, data)

def TorqueAtSiteMsg_C_init(owner):
    return _TorqueAtSiteMsgPayload.TorqueAtSiteMsg_C_init(owner)

def TorqueAtSiteMsg_C_isLinked(data):
    return _TorqueAtSiteMsgPayload.TorqueAtSiteMsg_C_isLinked(data)

def TorqueAtSiteMsg_C_isWritten(data):
    return _TorqueAtSiteMsgPayload.TorqueAtSiteMsg_C_isWritten(data)

def TorqueAtSiteMsg_C_timeWritten(data):
    return _TorqueAtSiteMsgPayload.TorqueAtSiteMsg_C_timeWritten(data)

def TorqueAtSiteMsg_C_moduleID(data):
    return _TorqueAtSiteMsgPayload.TorqueAtSiteMsg_C_moduleID(data)

def TorqueAtSiteMsg_C_write(data, destination, moduleID, callTime):
    return _TorqueAtSiteMsgPayload.TorqueAtSiteMsg_C_write(data, destination, moduleID, callTime)

def TorqueAtSiteMsg_C_read(source):
    return _TorqueAtSiteMsgPayload.TorqueAtSiteMsg_C_read(source)

def TorqueAtSiteMsg_C_zeroMsgPayload():
    return _TorqueAtSiteMsgPayload.TorqueAtSiteMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_TorqueAtSiteMsgPayload.MsgHeader_isLinked_get, _TorqueAtSiteMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_TorqueAtSiteMsgPayload.MsgHeader_isWritten_get, _TorqueAtSiteMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_TorqueAtSiteMsgPayload.MsgHeader_timeWritten_get, _TorqueAtSiteMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_TorqueAtSiteMsgPayload.MsgHeader_moduleID_get, _TorqueAtSiteMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _TorqueAtSiteMsgPayload.MsgHeader_swiginit(self, _TorqueAtSiteMsgPayload.new_MsgHeader())
    __swig_destroy__ = _TorqueAtSiteMsgPayload.delete_MsgHeader

# Register MsgHeader in _TorqueAtSiteMsgPayload:
_TorqueAtSiteMsgPayload.MsgHeader_swigregister(MsgHeader)

