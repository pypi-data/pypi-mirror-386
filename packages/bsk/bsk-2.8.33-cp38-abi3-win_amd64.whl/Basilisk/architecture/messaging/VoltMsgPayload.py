# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _VoltMsgPayload
else:
    import _VoltMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VoltMsgPayload.delete_SwigPyIterator

    def value(self):
        return _VoltMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VoltMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VoltMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VoltMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VoltMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VoltMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _VoltMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _VoltMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _VoltMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VoltMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VoltMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VoltMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VoltMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VoltMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VoltMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VoltMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _VoltMsgPayload:
_VoltMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _VoltMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _VoltMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _VoltMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _VoltMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _VoltMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _VoltMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _VoltMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _VoltMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _VoltMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _VoltMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _VoltMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _VoltMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _VoltMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _VoltMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _VoltMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _VoltMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VoltMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VoltMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _VoltMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _VoltMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _VoltMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VoltMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VoltMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VoltMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VoltMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VoltMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _VoltMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _VoltMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _VoltMsgPayload.TimeVector_empty(self)

    def size(self):
        return _VoltMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _VoltMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _VoltMsgPayload.TimeVector_begin(self)

    def end(self):
        return _VoltMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _VoltMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _VoltMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _VoltMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _VoltMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _VoltMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _VoltMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _VoltMsgPayload.TimeVector_swiginit(self, _VoltMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _VoltMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _VoltMsgPayload.TimeVector_front(self)

    def back(self):
        return _VoltMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _VoltMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _VoltMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _VoltMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _VoltMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _VoltMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _VoltMsgPayload.delete_TimeVector

# Register TimeVector in _VoltMsgPayload:
_VoltMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VoltMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VoltMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _VoltMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _VoltMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _VoltMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VoltMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VoltMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VoltMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VoltMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VoltMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _VoltMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _VoltMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _VoltMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _VoltMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _VoltMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _VoltMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _VoltMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _VoltMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _VoltMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _VoltMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _VoltMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _VoltMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _VoltMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _VoltMsgPayload.DoubleVector_swiginit(self, _VoltMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _VoltMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _VoltMsgPayload.DoubleVector_front(self)

    def back(self):
        return _VoltMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _VoltMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _VoltMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _VoltMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _VoltMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _VoltMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _VoltMsgPayload.delete_DoubleVector

# Register DoubleVector in _VoltMsgPayload:
_VoltMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VoltMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VoltMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _VoltMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _VoltMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _VoltMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VoltMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VoltMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VoltMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VoltMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VoltMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _VoltMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _VoltMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _VoltMsgPayload.StringVector_empty(self)

    def size(self):
        return _VoltMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _VoltMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _VoltMsgPayload.StringVector_begin(self)

    def end(self):
        return _VoltMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _VoltMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _VoltMsgPayload.StringVector_rend(self)

    def clear(self):
        return _VoltMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _VoltMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _VoltMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _VoltMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _VoltMsgPayload.StringVector_swiginit(self, _VoltMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _VoltMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _VoltMsgPayload.StringVector_front(self)

    def back(self):
        return _VoltMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _VoltMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _VoltMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _VoltMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _VoltMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _VoltMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _VoltMsgPayload.delete_StringVector

# Register StringVector in _VoltMsgPayload:
_VoltMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _VoltMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _VoltMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _VoltMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _VoltMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _VoltMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _VoltMsgPayload.NANO2SEC
SEC2NANO = _VoltMsgPayload.SEC2NANO
SEC2HOUR = _VoltMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _VoltMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _VoltMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _VoltMsgPayload.secToNano(seconds)
BOOL_FALSE = _VoltMsgPayload.BOOL_FALSE
BOOL_TRUE = _VoltMsgPayload.BOOL_TRUE
AVAILABLE = _VoltMsgPayload.AVAILABLE
UNAVAILABLE = _VoltMsgPayload.UNAVAILABLE
BalancedWheels = _VoltMsgPayload.BalancedWheels
JitterSimple = _VoltMsgPayload.JitterSimple
JitterFullyCoupled = _VoltMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VoltMsgPayload.SysModel_swiginit(self, _VoltMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _VoltMsgPayload.delete_SysModel

    def SelfInit(self):
        return _VoltMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _VoltMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _VoltMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _VoltMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_VoltMsgPayload.SysModel_ModelTag_get, _VoltMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_VoltMsgPayload.SysModel_CallCounts_get, _VoltMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_VoltMsgPayload.SysModel_RNGSeed_get, _VoltMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_VoltMsgPayload.SysModel_moduleID_get, _VoltMsgPayload.SysModel_moduleID_set)

# Register SysModel in _VoltMsgPayload:
_VoltMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _VoltMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _VoltMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _VoltMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _VoltMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _VoltMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _VoltMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _VoltMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _VoltMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _VoltMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _VoltMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _VoltMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _VoltMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class VoltMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    voltage = property(_VoltMsgPayload.VoltMsgPayload_voltage_get, _VoltMsgPayload.VoltMsgPayload_voltage_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _VoltMsgPayload.VoltMsgPayload_swiginit(self, _VoltMsgPayload.new_VoltMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _VoltMsgPayload.delete_VoltMsgPayload

# Register VoltMsgPayload in _VoltMsgPayload:
_VoltMsgPayload.VoltMsgPayload_swigregister(VoltMsgPayload)

def _pprint_VoltMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[VoltMsgPayload.__repr__] = _pprint_VoltMsgPayload

class VoltMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_VoltMsgPayload.VoltMsgReader_bskLogger_get, _VoltMsgPayload.VoltMsgReader_bskLogger_set)
    zeroMsgPayload = property(_VoltMsgPayload.VoltMsgReader_zeroMsgPayload_get, _VoltMsgPayload.VoltMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _VoltMsgPayload.VoltMsgReader_swiginit(self, _VoltMsgPayload.new_VoltMsgReader(*args))

    def __call__(self):
        return _VoltMsgPayload.VoltMsgReader___call__(self)

    def isLinked(self):
        return _VoltMsgPayload.VoltMsgReader_isLinked(self)

    def isWritten(self):
        return _VoltMsgPayload.VoltMsgReader_isWritten(self)

    def timeWritten(self):
        return _VoltMsgPayload.VoltMsgReader_timeWritten(self)

    def moduleID(self):
        return _VoltMsgPayload.VoltMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _VoltMsgPayload.VoltMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _VoltMsgPayload.VoltMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _VoltMsgPayload.VoltMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _VoltMsgPayload.VoltMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _VoltMsgPayload.VoltMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _VoltMsgPayload.VoltMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _VoltMsgPayload.VoltMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _VoltMsgPayload.VoltMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _VoltMsgPayload.VoltMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _VoltMsgPayload.VoltMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == VoltMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.VoltMsgPayload import VoltMsg_C
            if type(source) == VoltMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<VoltMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == VoltMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.VoltMsgPayload import VoltMsg_C
        except ImportError:
            return 0

        if type(source) == VoltMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _VoltMsgPayload.delete_VoltMsgReader

# Register VoltMsgReader in _VoltMsgPayload:
_VoltMsgPayload.VoltMsgReader_swigregister(VoltMsgReader)
class VoltMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VoltMsgPayload.VoltMsgWriter_swiginit(self, _VoltMsgPayload.new_VoltMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _VoltMsgPayload.VoltMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _VoltMsgPayload.delete_VoltMsgWriter

# Register VoltMsgWriter in _VoltMsgPayload:
_VoltMsgPayload.VoltMsgWriter_swigregister(VoltMsgWriter)
class VoltMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_VoltMsgPayload.VoltMsg_write_get, _VoltMsgPayload.VoltMsg_write_set)

    def addSubscriber(self):
        return _VoltMsgPayload.VoltMsg_addSubscriber(self)

    def addAuthor(self):
        return _VoltMsgPayload.VoltMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _VoltMsgPayload.VoltMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _VoltMsgPayload.VoltMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _VoltMsgPayload.VoltMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_VoltMsgPayload.VoltMsg_zeroMsgPayload_get, _VoltMsgPayload.VoltMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _VoltMsgPayload.VoltMsg_isLinked(self)

    def getPayloadSize(self):
        return _VoltMsgPayload.VoltMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _VoltMsgPayload.VoltMsg_swiginit(self, _VoltMsgPayload.new_VoltMsg())
    __swig_destroy__ = _VoltMsgPayload.delete_VoltMsg

# Register VoltMsg in _VoltMsgPayload:
_VoltMsgPayload.VoltMsg_swigregister(VoltMsg)
class VoltMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VoltMsgPayload.VoltMsgRecorder_swiginit(self, _VoltMsgPayload.new_VoltMsgRecorder(*args))
    __swig_destroy__ = _VoltMsgPayload.delete_VoltMsgRecorder

    def SelfInit(self):
        return _VoltMsgPayload.VoltMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _VoltMsgPayload.VoltMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _VoltMsgPayload.VoltMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _VoltMsgPayload.VoltMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _VoltMsgPayload.VoltMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _VoltMsgPayload.VoltMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _VoltMsgPayload.VoltMsgRecorder___record_vector(self)

    def size(self):
        return _VoltMsgPayload.VoltMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _VoltMsgPayload.VoltMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _VoltMsgPayload.VoltMsgRecorder_clear(self)
    bskLogger = property(_VoltMsgPayload.VoltMsgRecorder_bskLogger_get, _VoltMsgPayload.VoltMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _VoltMsgPayload.VoltMsgRecorder_updateTimeInterval(self, timeDiff)

    def _voltage_array(self):
        return _VoltMsgPayload.VoltMsgRecorder__voltage_array(self)

    @property
    def voltage(self):
        return self._voltage_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register VoltMsgRecorder in _VoltMsgPayload:
_VoltMsgPayload.VoltMsgRecorder_swigregister(VoltMsgRecorder)
class VoltMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VoltMsgPayload.VoltMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VoltMsgPayload.VoltMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _VoltMsgPayload.VoltMsgPayloadVector___bool__(self)

    def __len__(self):
        return _VoltMsgPayload.VoltMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _VoltMsgPayload.VoltMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VoltMsgPayload.VoltMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VoltMsgPayload.VoltMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VoltMsgPayload.VoltMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VoltMsgPayload.VoltMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VoltMsgPayload.VoltMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _VoltMsgPayload.VoltMsgPayloadVector_pop(self)

    def append(self, x):
        return _VoltMsgPayload.VoltMsgPayloadVector_append(self, x)

    def empty(self):
        return _VoltMsgPayload.VoltMsgPayloadVector_empty(self)

    def size(self):
        return _VoltMsgPayload.VoltMsgPayloadVector_size(self)

    def swap(self, v):
        return _VoltMsgPayload.VoltMsgPayloadVector_swap(self, v)

    def begin(self):
        return _VoltMsgPayload.VoltMsgPayloadVector_begin(self)

    def end(self):
        return _VoltMsgPayload.VoltMsgPayloadVector_end(self)

    def rbegin(self):
        return _VoltMsgPayload.VoltMsgPayloadVector_rbegin(self)

    def rend(self):
        return _VoltMsgPayload.VoltMsgPayloadVector_rend(self)

    def clear(self):
        return _VoltMsgPayload.VoltMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _VoltMsgPayload.VoltMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _VoltMsgPayload.VoltMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _VoltMsgPayload.VoltMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _VoltMsgPayload.VoltMsgPayloadVector_swiginit(self, _VoltMsgPayload.new_VoltMsgPayloadVector(*args))

    def push_back(self, x):
        return _VoltMsgPayload.VoltMsgPayloadVector_push_back(self, x)

    def front(self):
        return _VoltMsgPayload.VoltMsgPayloadVector_front(self)

    def back(self):
        return _VoltMsgPayload.VoltMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _VoltMsgPayload.VoltMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _VoltMsgPayload.VoltMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _VoltMsgPayload.VoltMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _VoltMsgPayload.VoltMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _VoltMsgPayload.VoltMsgPayloadVector_capacity(self)

    def get_all(self):
        return _VoltMsgPayload.VoltMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _VoltMsgPayload.delete_VoltMsgPayloadVector

# Register VoltMsgPayloadVector in _VoltMsgPayload:
_VoltMsgPayload.VoltMsgPayloadVector_swigregister(VoltMsgPayloadVector)
class VoltMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VoltMsgPayload.VoltMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VoltMsgPayload.VoltMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _VoltMsgPayload.VoltMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _VoltMsgPayload.VoltMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _VoltMsgPayload.VoltMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VoltMsgPayload.VoltMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VoltMsgPayload.VoltMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VoltMsgPayload.VoltMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VoltMsgPayload.VoltMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VoltMsgPayload.VoltMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _VoltMsgPayload.VoltMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _VoltMsgPayload.VoltMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _VoltMsgPayload.VoltMsgOutMsgsVector_empty(self)

    def size(self):
        return _VoltMsgPayload.VoltMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _VoltMsgPayload.VoltMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _VoltMsgPayload.VoltMsgOutMsgsVector_begin(self)

    def end(self):
        return _VoltMsgPayload.VoltMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _VoltMsgPayload.VoltMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _VoltMsgPayload.VoltMsgOutMsgsVector_rend(self)

    def clear(self):
        return _VoltMsgPayload.VoltMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _VoltMsgPayload.VoltMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _VoltMsgPayload.VoltMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _VoltMsgPayload.VoltMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _VoltMsgPayload.VoltMsgOutMsgsVector_swiginit(self, _VoltMsgPayload.new_VoltMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _VoltMsgPayload.VoltMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _VoltMsgPayload.VoltMsgOutMsgsVector_front(self)

    def back(self):
        return _VoltMsgPayload.VoltMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _VoltMsgPayload.VoltMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _VoltMsgPayload.VoltMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _VoltMsgPayload.VoltMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _VoltMsgPayload.VoltMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _VoltMsgPayload.VoltMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _VoltMsgPayload.delete_VoltMsgOutMsgsVector

# Register VoltMsgOutMsgsVector in _VoltMsgPayload:
_VoltMsgPayload.VoltMsgOutMsgsVector_swigregister(VoltMsgOutMsgsVector)
class VoltMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VoltMsgPayload.VoltMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VoltMsgPayload.VoltMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _VoltMsgPayload.VoltMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _VoltMsgPayload.VoltMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _VoltMsgPayload.VoltMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VoltMsgPayload.VoltMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VoltMsgPayload.VoltMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VoltMsgPayload.VoltMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VoltMsgPayload.VoltMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VoltMsgPayload.VoltMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _VoltMsgPayload.VoltMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _VoltMsgPayload.VoltMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _VoltMsgPayload.VoltMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _VoltMsgPayload.VoltMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _VoltMsgPayload.VoltMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _VoltMsgPayload.VoltMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _VoltMsgPayload.VoltMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _VoltMsgPayload.VoltMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _VoltMsgPayload.VoltMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _VoltMsgPayload.VoltMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _VoltMsgPayload.VoltMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _VoltMsgPayload.VoltMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _VoltMsgPayload.VoltMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _VoltMsgPayload.VoltMsgOutMsgsPtrVector_swiginit(self, _VoltMsgPayload.new_VoltMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _VoltMsgPayload.VoltMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _VoltMsgPayload.VoltMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _VoltMsgPayload.VoltMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _VoltMsgPayload.VoltMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _VoltMsgPayload.VoltMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _VoltMsgPayload.VoltMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _VoltMsgPayload.VoltMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _VoltMsgPayload.VoltMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _VoltMsgPayload.delete_VoltMsgOutMsgsPtrVector

# Register VoltMsgOutMsgsPtrVector in _VoltMsgPayload:
_VoltMsgPayload.VoltMsgOutMsgsPtrVector_swigregister(VoltMsgOutMsgsPtrVector)
class VoltMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VoltMsgPayload.VoltMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VoltMsgPayload.VoltMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _VoltMsgPayload.VoltMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _VoltMsgPayload.VoltMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _VoltMsgPayload.VoltMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VoltMsgPayload.VoltMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VoltMsgPayload.VoltMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VoltMsgPayload.VoltMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VoltMsgPayload.VoltMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VoltMsgPayload.VoltMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _VoltMsgPayload.VoltMsgInMsgsVector_pop(self)

    def append(self, x):
        return _VoltMsgPayload.VoltMsgInMsgsVector_append(self, x)

    def empty(self):
        return _VoltMsgPayload.VoltMsgInMsgsVector_empty(self)

    def size(self):
        return _VoltMsgPayload.VoltMsgInMsgsVector_size(self)

    def swap(self, v):
        return _VoltMsgPayload.VoltMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _VoltMsgPayload.VoltMsgInMsgsVector_begin(self)

    def end(self):
        return _VoltMsgPayload.VoltMsgInMsgsVector_end(self)

    def rbegin(self):
        return _VoltMsgPayload.VoltMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _VoltMsgPayload.VoltMsgInMsgsVector_rend(self)

    def clear(self):
        return _VoltMsgPayload.VoltMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _VoltMsgPayload.VoltMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _VoltMsgPayload.VoltMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _VoltMsgPayload.VoltMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _VoltMsgPayload.VoltMsgInMsgsVector_swiginit(self, _VoltMsgPayload.new_VoltMsgInMsgsVector(*args))

    def push_back(self, x):
        return _VoltMsgPayload.VoltMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _VoltMsgPayload.VoltMsgInMsgsVector_front(self)

    def back(self):
        return _VoltMsgPayload.VoltMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _VoltMsgPayload.VoltMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _VoltMsgPayload.VoltMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _VoltMsgPayload.VoltMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _VoltMsgPayload.VoltMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _VoltMsgPayload.VoltMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _VoltMsgPayload.delete_VoltMsgInMsgsVector

# Register VoltMsgInMsgsVector in _VoltMsgPayload:
_VoltMsgPayload.VoltMsgInMsgsVector_swigregister(VoltMsgInMsgsVector)
class VoltMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_VoltMsgPayload.VoltMsg_C_header_get, _VoltMsgPayload.VoltMsg_C_header_set)
    payload = property(_VoltMsgPayload.VoltMsg_C_payload_get, _VoltMsgPayload.VoltMsg_C_payload_set)
    payloadPointer = property(_VoltMsgPayload.VoltMsg_C_payloadPointer_get, _VoltMsgPayload.VoltMsg_C_payloadPointer_set)
    headerPointer = property(_VoltMsgPayload.VoltMsg_C_headerPointer_get, _VoltMsgPayload.VoltMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _VoltMsgPayload.VoltMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import VoltMsg
        if type(source) == type(self):
            VoltMsg_C_subscribe(self, source)
        elif type(source) == VoltMsg:
            VoltMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            VoltMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe VoltMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        VoltMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import VoltMsg
        if type(source) == type(self):
            return (VoltMsg_C_isSubscribedTo(self, source))
        elif type(source) == VoltMsg:
            return (VoltMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (VoltMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        VoltMsg_C_addAuthor(self, self)
        if data:
            VoltMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        VoltMsg_C_addAuthor(self, self)
        VoltMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return VoltMsg_C_read(self)


    def __init__(self):
        _VoltMsgPayload.VoltMsg_C_swiginit(self, _VoltMsgPayload.new_VoltMsg_C())
    __swig_destroy__ = _VoltMsgPayload.delete_VoltMsg_C

# Register VoltMsg_C in _VoltMsgPayload:
_VoltMsgPayload.VoltMsg_C_swigregister(VoltMsg_C)

def VoltMsg_cpp_subscribe(subscriber, source):
    return _VoltMsgPayload.VoltMsg_cpp_subscribe(subscriber, source)

def VoltMsg_C_subscribe(subscriber, source):
    return _VoltMsgPayload.VoltMsg_C_subscribe(subscriber, source)

def VoltMsg_addr_subscribe(subscriber, sourceAddr):
    return _VoltMsgPayload.VoltMsg_addr_subscribe(subscriber, sourceAddr)

def VoltMsg_unsubscribe(subscriber):
    return _VoltMsgPayload.VoltMsg_unsubscribe(subscriber)

def VoltMsg_C_isSubscribedTo(subscriber, source):
    return _VoltMsgPayload.VoltMsg_C_isSubscribedTo(subscriber, source)

def VoltMsg_cpp_isSubscribedTo(subscriber, source):
    return _VoltMsgPayload.VoltMsg_cpp_isSubscribedTo(subscriber, source)

def VoltMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _VoltMsgPayload.VoltMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def VoltMsg_C_addAuthor(coowner, data):
    return _VoltMsgPayload.VoltMsg_C_addAuthor(coowner, data)

def VoltMsg_C_init(owner):
    return _VoltMsgPayload.VoltMsg_C_init(owner)

def VoltMsg_C_isLinked(data):
    return _VoltMsgPayload.VoltMsg_C_isLinked(data)

def VoltMsg_C_isWritten(data):
    return _VoltMsgPayload.VoltMsg_C_isWritten(data)

def VoltMsg_C_timeWritten(data):
    return _VoltMsgPayload.VoltMsg_C_timeWritten(data)

def VoltMsg_C_moduleID(data):
    return _VoltMsgPayload.VoltMsg_C_moduleID(data)

def VoltMsg_C_write(data, destination, moduleID, callTime):
    return _VoltMsgPayload.VoltMsg_C_write(data, destination, moduleID, callTime)

def VoltMsg_C_read(source):
    return _VoltMsgPayload.VoltMsg_C_read(source)

def VoltMsg_C_zeroMsgPayload():
    return _VoltMsgPayload.VoltMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_VoltMsgPayload.MsgHeader_isLinked_get, _VoltMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_VoltMsgPayload.MsgHeader_isWritten_get, _VoltMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_VoltMsgPayload.MsgHeader_timeWritten_get, _VoltMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_VoltMsgPayload.MsgHeader_moduleID_get, _VoltMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _VoltMsgPayload.MsgHeader_swiginit(self, _VoltMsgPayload.new_MsgHeader())
    __swig_destroy__ = _VoltMsgPayload.delete_MsgHeader

# Register MsgHeader in _VoltMsgPayload:
_VoltMsgPayload.MsgHeader_swigregister(MsgHeader)

