# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _RealTimeFactorMsgPayload
else:
    import _RealTimeFactorMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RealTimeFactorMsgPayload.delete_SwigPyIterator

    def value(self):
        return _RealTimeFactorMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _RealTimeFactorMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _RealTimeFactorMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _RealTimeFactorMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _RealTimeFactorMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _RealTimeFactorMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _RealTimeFactorMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _RealTimeFactorMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _RealTimeFactorMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _RealTimeFactorMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _RealTimeFactorMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _RealTimeFactorMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _RealTimeFactorMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _RealTimeFactorMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _RealTimeFactorMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _RealTimeFactorMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _RealTimeFactorMsgPayload:
_RealTimeFactorMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _RealTimeFactorMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _RealTimeFactorMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _RealTimeFactorMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _RealTimeFactorMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _RealTimeFactorMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _RealTimeFactorMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _RealTimeFactorMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _RealTimeFactorMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _RealTimeFactorMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _RealTimeFactorMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _RealTimeFactorMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _RealTimeFactorMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _RealTimeFactorMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _RealTimeFactorMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _RealTimeFactorMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _RealTimeFactorMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RealTimeFactorMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RealTimeFactorMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _RealTimeFactorMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _RealTimeFactorMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _RealTimeFactorMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RealTimeFactorMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RealTimeFactorMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RealTimeFactorMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RealTimeFactorMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RealTimeFactorMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _RealTimeFactorMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _RealTimeFactorMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _RealTimeFactorMsgPayload.TimeVector_empty(self)

    def size(self):
        return _RealTimeFactorMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _RealTimeFactorMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _RealTimeFactorMsgPayload.TimeVector_begin(self)

    def end(self):
        return _RealTimeFactorMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _RealTimeFactorMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _RealTimeFactorMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _RealTimeFactorMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _RealTimeFactorMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _RealTimeFactorMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _RealTimeFactorMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _RealTimeFactorMsgPayload.TimeVector_swiginit(self, _RealTimeFactorMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _RealTimeFactorMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _RealTimeFactorMsgPayload.TimeVector_front(self)

    def back(self):
        return _RealTimeFactorMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _RealTimeFactorMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _RealTimeFactorMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _RealTimeFactorMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _RealTimeFactorMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _RealTimeFactorMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _RealTimeFactorMsgPayload.delete_TimeVector

# Register TimeVector in _RealTimeFactorMsgPayload:
_RealTimeFactorMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RealTimeFactorMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RealTimeFactorMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _RealTimeFactorMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _RealTimeFactorMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _RealTimeFactorMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RealTimeFactorMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RealTimeFactorMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RealTimeFactorMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RealTimeFactorMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RealTimeFactorMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _RealTimeFactorMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _RealTimeFactorMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _RealTimeFactorMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _RealTimeFactorMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _RealTimeFactorMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _RealTimeFactorMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _RealTimeFactorMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _RealTimeFactorMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _RealTimeFactorMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _RealTimeFactorMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _RealTimeFactorMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _RealTimeFactorMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _RealTimeFactorMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _RealTimeFactorMsgPayload.DoubleVector_swiginit(self, _RealTimeFactorMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _RealTimeFactorMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _RealTimeFactorMsgPayload.DoubleVector_front(self)

    def back(self):
        return _RealTimeFactorMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _RealTimeFactorMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _RealTimeFactorMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _RealTimeFactorMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _RealTimeFactorMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _RealTimeFactorMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _RealTimeFactorMsgPayload.delete_DoubleVector

# Register DoubleVector in _RealTimeFactorMsgPayload:
_RealTimeFactorMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RealTimeFactorMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RealTimeFactorMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _RealTimeFactorMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _RealTimeFactorMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _RealTimeFactorMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RealTimeFactorMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RealTimeFactorMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RealTimeFactorMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RealTimeFactorMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RealTimeFactorMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _RealTimeFactorMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _RealTimeFactorMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _RealTimeFactorMsgPayload.StringVector_empty(self)

    def size(self):
        return _RealTimeFactorMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _RealTimeFactorMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _RealTimeFactorMsgPayload.StringVector_begin(self)

    def end(self):
        return _RealTimeFactorMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _RealTimeFactorMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _RealTimeFactorMsgPayload.StringVector_rend(self)

    def clear(self):
        return _RealTimeFactorMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _RealTimeFactorMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _RealTimeFactorMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _RealTimeFactorMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _RealTimeFactorMsgPayload.StringVector_swiginit(self, _RealTimeFactorMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _RealTimeFactorMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _RealTimeFactorMsgPayload.StringVector_front(self)

    def back(self):
        return _RealTimeFactorMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _RealTimeFactorMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _RealTimeFactorMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _RealTimeFactorMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _RealTimeFactorMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _RealTimeFactorMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _RealTimeFactorMsgPayload.delete_StringVector

# Register StringVector in _RealTimeFactorMsgPayload:
_RealTimeFactorMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _RealTimeFactorMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _RealTimeFactorMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _RealTimeFactorMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _RealTimeFactorMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _RealTimeFactorMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _RealTimeFactorMsgPayload.NANO2SEC
SEC2NANO = _RealTimeFactorMsgPayload.SEC2NANO
SEC2HOUR = _RealTimeFactorMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _RealTimeFactorMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _RealTimeFactorMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _RealTimeFactorMsgPayload.secToNano(seconds)
BOOL_FALSE = _RealTimeFactorMsgPayload.BOOL_FALSE
BOOL_TRUE = _RealTimeFactorMsgPayload.BOOL_TRUE
AVAILABLE = _RealTimeFactorMsgPayload.AVAILABLE
UNAVAILABLE = _RealTimeFactorMsgPayload.UNAVAILABLE
BalancedWheels = _RealTimeFactorMsgPayload.BalancedWheels
JitterSimple = _RealTimeFactorMsgPayload.JitterSimple
JitterFullyCoupled = _RealTimeFactorMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RealTimeFactorMsgPayload.SysModel_swiginit(self, _RealTimeFactorMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _RealTimeFactorMsgPayload.delete_SysModel

    def SelfInit(self):
        return _RealTimeFactorMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _RealTimeFactorMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _RealTimeFactorMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _RealTimeFactorMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_RealTimeFactorMsgPayload.SysModel_ModelTag_get, _RealTimeFactorMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_RealTimeFactorMsgPayload.SysModel_CallCounts_get, _RealTimeFactorMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_RealTimeFactorMsgPayload.SysModel_RNGSeed_get, _RealTimeFactorMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_RealTimeFactorMsgPayload.SysModel_moduleID_get, _RealTimeFactorMsgPayload.SysModel_moduleID_set)

# Register SysModel in _RealTimeFactorMsgPayload:
_RealTimeFactorMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _RealTimeFactorMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _RealTimeFactorMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _RealTimeFactorMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _RealTimeFactorMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _RealTimeFactorMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _RealTimeFactorMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _RealTimeFactorMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _RealTimeFactorMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _RealTimeFactorMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _RealTimeFactorMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _RealTimeFactorMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _RealTimeFactorMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class RealTimeFactorMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    speedFactor = property(_RealTimeFactorMsgPayload.RealTimeFactorMsgPayload_speedFactor_get, _RealTimeFactorMsgPayload.RealTimeFactorMsgPayload_speedFactor_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _RealTimeFactorMsgPayload.RealTimeFactorMsgPayload_swiginit(self, _RealTimeFactorMsgPayload.new_RealTimeFactorMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _RealTimeFactorMsgPayload.delete_RealTimeFactorMsgPayload

# Register RealTimeFactorMsgPayload in _RealTimeFactorMsgPayload:
_RealTimeFactorMsgPayload.RealTimeFactorMsgPayload_swigregister(RealTimeFactorMsgPayload)

def _pprint_RealTimeFactorMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[RealTimeFactorMsgPayload.__repr__] = _pprint_RealTimeFactorMsgPayload

class RealTimeFactorMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_RealTimeFactorMsgPayload.RealTimeFactorMsgReader_bskLogger_get, _RealTimeFactorMsgPayload.RealTimeFactorMsgReader_bskLogger_set)
    zeroMsgPayload = property(_RealTimeFactorMsgPayload.RealTimeFactorMsgReader_zeroMsgPayload_get, _RealTimeFactorMsgPayload.RealTimeFactorMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _RealTimeFactorMsgPayload.RealTimeFactorMsgReader_swiginit(self, _RealTimeFactorMsgPayload.new_RealTimeFactorMsgReader(*args))

    def __call__(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgReader___call__(self)

    def isLinked(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgReader_isLinked(self)

    def isWritten(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgReader_isWritten(self)

    def timeWritten(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgReader_timeWritten(self)

    def moduleID(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == RealTimeFactorMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.RealTimeFactorMsgPayload import RealTimeFactorMsg_C
            if type(source) == RealTimeFactorMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<RealTimeFactorMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == RealTimeFactorMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.RealTimeFactorMsgPayload import RealTimeFactorMsg_C
        except ImportError:
            return 0

        if type(source) == RealTimeFactorMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _RealTimeFactorMsgPayload.delete_RealTimeFactorMsgReader

# Register RealTimeFactorMsgReader in _RealTimeFactorMsgPayload:
_RealTimeFactorMsgPayload.RealTimeFactorMsgReader_swigregister(RealTimeFactorMsgReader)
class RealTimeFactorMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RealTimeFactorMsgPayload.RealTimeFactorMsgWriter_swiginit(self, _RealTimeFactorMsgPayload.new_RealTimeFactorMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _RealTimeFactorMsgPayload.delete_RealTimeFactorMsgWriter

# Register RealTimeFactorMsgWriter in _RealTimeFactorMsgPayload:
_RealTimeFactorMsgPayload.RealTimeFactorMsgWriter_swigregister(RealTimeFactorMsgWriter)
class RealTimeFactorMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_RealTimeFactorMsgPayload.RealTimeFactorMsg_write_get, _RealTimeFactorMsgPayload.RealTimeFactorMsg_write_set)

    def addSubscriber(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsg_addSubscriber(self)

    def addAuthor(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_RealTimeFactorMsgPayload.RealTimeFactorMsg_zeroMsgPayload_get, _RealTimeFactorMsgPayload.RealTimeFactorMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsg_isLinked(self)

    def getPayloadSize(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _RealTimeFactorMsgPayload.RealTimeFactorMsg_swiginit(self, _RealTimeFactorMsgPayload.new_RealTimeFactorMsg())
    __swig_destroy__ = _RealTimeFactorMsgPayload.delete_RealTimeFactorMsg

# Register RealTimeFactorMsg in _RealTimeFactorMsgPayload:
_RealTimeFactorMsgPayload.RealTimeFactorMsg_swigregister(RealTimeFactorMsg)
class RealTimeFactorMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RealTimeFactorMsgPayload.RealTimeFactorMsgRecorder_swiginit(self, _RealTimeFactorMsgPayload.new_RealTimeFactorMsgRecorder(*args))
    __swig_destroy__ = _RealTimeFactorMsgPayload.delete_RealTimeFactorMsgRecorder

    def SelfInit(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgRecorder___record_vector(self)

    def size(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgRecorder_clear(self)
    bskLogger = property(_RealTimeFactorMsgPayload.RealTimeFactorMsgRecorder_bskLogger_get, _RealTimeFactorMsgPayload.RealTimeFactorMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgRecorder_updateTimeInterval(self, timeDiff)

    def _speedFactor_array(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgRecorder__speedFactor_array(self)

    @property
    def speedFactor(self):
        return self._speedFactor_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register RealTimeFactorMsgRecorder in _RealTimeFactorMsgPayload:
_RealTimeFactorMsgPayload.RealTimeFactorMsgRecorder_swigregister(RealTimeFactorMsgRecorder)
class RealTimeFactorMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgPayloadVector___bool__(self)

    def __len__(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgPayloadVector_pop(self)

    def append(self, x):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgPayloadVector_append(self, x)

    def empty(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgPayloadVector_empty(self)

    def size(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgPayloadVector_size(self)

    def swap(self, v):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgPayloadVector_swap(self, v)

    def begin(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgPayloadVector_begin(self)

    def end(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgPayloadVector_end(self)

    def rbegin(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgPayloadVector_rbegin(self)

    def rend(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgPayloadVector_rend(self)

    def clear(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _RealTimeFactorMsgPayload.RealTimeFactorMsgPayloadVector_swiginit(self, _RealTimeFactorMsgPayload.new_RealTimeFactorMsgPayloadVector(*args))

    def push_back(self, x):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgPayloadVector_push_back(self, x)

    def front(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgPayloadVector_front(self)

    def back(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgPayloadVector_capacity(self)

    def get_all(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _RealTimeFactorMsgPayload.delete_RealTimeFactorMsgPayloadVector

# Register RealTimeFactorMsgPayloadVector in _RealTimeFactorMsgPayload:
_RealTimeFactorMsgPayload.RealTimeFactorMsgPayloadVector_swigregister(RealTimeFactorMsgPayloadVector)
class RealTimeFactorMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsVector_empty(self)

    def size(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsVector_begin(self)

    def end(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsVector_rend(self)

    def clear(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsVector_swiginit(self, _RealTimeFactorMsgPayload.new_RealTimeFactorMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsVector_front(self)

    def back(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _RealTimeFactorMsgPayload.delete_RealTimeFactorMsgOutMsgsVector

# Register RealTimeFactorMsgOutMsgsVector in _RealTimeFactorMsgPayload:
_RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsVector_swigregister(RealTimeFactorMsgOutMsgsVector)
class RealTimeFactorMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsPtrVector_swiginit(self, _RealTimeFactorMsgPayload.new_RealTimeFactorMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _RealTimeFactorMsgPayload.delete_RealTimeFactorMsgOutMsgsPtrVector

# Register RealTimeFactorMsgOutMsgsPtrVector in _RealTimeFactorMsgPayload:
_RealTimeFactorMsgPayload.RealTimeFactorMsgOutMsgsPtrVector_swigregister(RealTimeFactorMsgOutMsgsPtrVector)
class RealTimeFactorMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgInMsgsVector_pop(self)

    def append(self, x):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgInMsgsVector_append(self, x)

    def empty(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgInMsgsVector_empty(self)

    def size(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgInMsgsVector_size(self)

    def swap(self, v):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgInMsgsVector_begin(self)

    def end(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgInMsgsVector_end(self)

    def rbegin(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgInMsgsVector_rend(self)

    def clear(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _RealTimeFactorMsgPayload.RealTimeFactorMsgInMsgsVector_swiginit(self, _RealTimeFactorMsgPayload.new_RealTimeFactorMsgInMsgsVector(*args))

    def push_back(self, x):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgInMsgsVector_front(self)

    def back(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _RealTimeFactorMsgPayload.delete_RealTimeFactorMsgInMsgsVector

# Register RealTimeFactorMsgInMsgsVector in _RealTimeFactorMsgPayload:
_RealTimeFactorMsgPayload.RealTimeFactorMsgInMsgsVector_swigregister(RealTimeFactorMsgInMsgsVector)
class RealTimeFactorMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_RealTimeFactorMsgPayload.RealTimeFactorMsg_C_header_get, _RealTimeFactorMsgPayload.RealTimeFactorMsg_C_header_set)
    payload = property(_RealTimeFactorMsgPayload.RealTimeFactorMsg_C_payload_get, _RealTimeFactorMsgPayload.RealTimeFactorMsg_C_payload_set)
    payloadPointer = property(_RealTimeFactorMsgPayload.RealTimeFactorMsg_C_payloadPointer_get, _RealTimeFactorMsgPayload.RealTimeFactorMsg_C_payloadPointer_set)
    headerPointer = property(_RealTimeFactorMsgPayload.RealTimeFactorMsg_C_headerPointer_get, _RealTimeFactorMsgPayload.RealTimeFactorMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _RealTimeFactorMsgPayload.RealTimeFactorMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import RealTimeFactorMsg
        if type(source) == type(self):
            RealTimeFactorMsg_C_subscribe(self, source)
        elif type(source) == RealTimeFactorMsg:
            RealTimeFactorMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            RealTimeFactorMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe RealTimeFactorMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        RealTimeFactorMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import RealTimeFactorMsg
        if type(source) == type(self):
            return (RealTimeFactorMsg_C_isSubscribedTo(self, source))
        elif type(source) == RealTimeFactorMsg:
            return (RealTimeFactorMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (RealTimeFactorMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        RealTimeFactorMsg_C_addAuthor(self, self)
        if data:
            RealTimeFactorMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        RealTimeFactorMsg_C_addAuthor(self, self)
        RealTimeFactorMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return RealTimeFactorMsg_C_read(self)


    def __init__(self):
        _RealTimeFactorMsgPayload.RealTimeFactorMsg_C_swiginit(self, _RealTimeFactorMsgPayload.new_RealTimeFactorMsg_C())
    __swig_destroy__ = _RealTimeFactorMsgPayload.delete_RealTimeFactorMsg_C

# Register RealTimeFactorMsg_C in _RealTimeFactorMsgPayload:
_RealTimeFactorMsgPayload.RealTimeFactorMsg_C_swigregister(RealTimeFactorMsg_C)

def RealTimeFactorMsg_cpp_subscribe(subscriber, source):
    return _RealTimeFactorMsgPayload.RealTimeFactorMsg_cpp_subscribe(subscriber, source)

def RealTimeFactorMsg_C_subscribe(subscriber, source):
    return _RealTimeFactorMsgPayload.RealTimeFactorMsg_C_subscribe(subscriber, source)

def RealTimeFactorMsg_addr_subscribe(subscriber, sourceAddr):
    return _RealTimeFactorMsgPayload.RealTimeFactorMsg_addr_subscribe(subscriber, sourceAddr)

def RealTimeFactorMsg_unsubscribe(subscriber):
    return _RealTimeFactorMsgPayload.RealTimeFactorMsg_unsubscribe(subscriber)

def RealTimeFactorMsg_C_isSubscribedTo(subscriber, source):
    return _RealTimeFactorMsgPayload.RealTimeFactorMsg_C_isSubscribedTo(subscriber, source)

def RealTimeFactorMsg_cpp_isSubscribedTo(subscriber, source):
    return _RealTimeFactorMsgPayload.RealTimeFactorMsg_cpp_isSubscribedTo(subscriber, source)

def RealTimeFactorMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _RealTimeFactorMsgPayload.RealTimeFactorMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def RealTimeFactorMsg_C_addAuthor(coowner, data):
    return _RealTimeFactorMsgPayload.RealTimeFactorMsg_C_addAuthor(coowner, data)

def RealTimeFactorMsg_C_init(owner):
    return _RealTimeFactorMsgPayload.RealTimeFactorMsg_C_init(owner)

def RealTimeFactorMsg_C_isLinked(data):
    return _RealTimeFactorMsgPayload.RealTimeFactorMsg_C_isLinked(data)

def RealTimeFactorMsg_C_isWritten(data):
    return _RealTimeFactorMsgPayload.RealTimeFactorMsg_C_isWritten(data)

def RealTimeFactorMsg_C_timeWritten(data):
    return _RealTimeFactorMsgPayload.RealTimeFactorMsg_C_timeWritten(data)

def RealTimeFactorMsg_C_moduleID(data):
    return _RealTimeFactorMsgPayload.RealTimeFactorMsg_C_moduleID(data)

def RealTimeFactorMsg_C_write(data, destination, moduleID, callTime):
    return _RealTimeFactorMsgPayload.RealTimeFactorMsg_C_write(data, destination, moduleID, callTime)

def RealTimeFactorMsg_C_read(source):
    return _RealTimeFactorMsgPayload.RealTimeFactorMsg_C_read(source)

def RealTimeFactorMsg_C_zeroMsgPayload():
    return _RealTimeFactorMsgPayload.RealTimeFactorMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_RealTimeFactorMsgPayload.MsgHeader_isLinked_get, _RealTimeFactorMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_RealTimeFactorMsgPayload.MsgHeader_isWritten_get, _RealTimeFactorMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_RealTimeFactorMsgPayload.MsgHeader_timeWritten_get, _RealTimeFactorMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_RealTimeFactorMsgPayload.MsgHeader_moduleID_get, _RealTimeFactorMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _RealTimeFactorMsgPayload.MsgHeader_swiginit(self, _RealTimeFactorMsgPayload.new_MsgHeader())
    __swig_destroy__ = _RealTimeFactorMsgPayload.delete_MsgHeader

# Register MsgHeader in _RealTimeFactorMsgPayload:
_RealTimeFactorMsgPayload.MsgHeader_swigregister(MsgHeader)

