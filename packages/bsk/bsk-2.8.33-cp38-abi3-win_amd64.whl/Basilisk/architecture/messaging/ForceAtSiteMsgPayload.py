# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ForceAtSiteMsgPayload
else:
    import _ForceAtSiteMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ForceAtSiteMsgPayload.delete_SwigPyIterator

    def value(self):
        return _ForceAtSiteMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ForceAtSiteMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ForceAtSiteMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ForceAtSiteMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ForceAtSiteMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ForceAtSiteMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _ForceAtSiteMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _ForceAtSiteMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _ForceAtSiteMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ForceAtSiteMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ForceAtSiteMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ForceAtSiteMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ForceAtSiteMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ForceAtSiteMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ForceAtSiteMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ForceAtSiteMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ForceAtSiteMsgPayload:
_ForceAtSiteMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _ForceAtSiteMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _ForceAtSiteMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _ForceAtSiteMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _ForceAtSiteMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _ForceAtSiteMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _ForceAtSiteMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _ForceAtSiteMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _ForceAtSiteMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _ForceAtSiteMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _ForceAtSiteMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _ForceAtSiteMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _ForceAtSiteMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _ForceAtSiteMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _ForceAtSiteMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _ForceAtSiteMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _ForceAtSiteMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ForceAtSiteMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ForceAtSiteMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _ForceAtSiteMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _ForceAtSiteMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _ForceAtSiteMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ForceAtSiteMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ForceAtSiteMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ForceAtSiteMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ForceAtSiteMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ForceAtSiteMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _ForceAtSiteMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _ForceAtSiteMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _ForceAtSiteMsgPayload.TimeVector_empty(self)

    def size(self):
        return _ForceAtSiteMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _ForceAtSiteMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _ForceAtSiteMsgPayload.TimeVector_begin(self)

    def end(self):
        return _ForceAtSiteMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _ForceAtSiteMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _ForceAtSiteMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _ForceAtSiteMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _ForceAtSiteMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _ForceAtSiteMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _ForceAtSiteMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _ForceAtSiteMsgPayload.TimeVector_swiginit(self, _ForceAtSiteMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _ForceAtSiteMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _ForceAtSiteMsgPayload.TimeVector_front(self)

    def back(self):
        return _ForceAtSiteMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _ForceAtSiteMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _ForceAtSiteMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _ForceAtSiteMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _ForceAtSiteMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _ForceAtSiteMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _ForceAtSiteMsgPayload.delete_TimeVector

# Register TimeVector in _ForceAtSiteMsgPayload:
_ForceAtSiteMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ForceAtSiteMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ForceAtSiteMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _ForceAtSiteMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _ForceAtSiteMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _ForceAtSiteMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ForceAtSiteMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ForceAtSiteMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ForceAtSiteMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ForceAtSiteMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ForceAtSiteMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _ForceAtSiteMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _ForceAtSiteMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _ForceAtSiteMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _ForceAtSiteMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _ForceAtSiteMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _ForceAtSiteMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _ForceAtSiteMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _ForceAtSiteMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _ForceAtSiteMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _ForceAtSiteMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _ForceAtSiteMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _ForceAtSiteMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _ForceAtSiteMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _ForceAtSiteMsgPayload.DoubleVector_swiginit(self, _ForceAtSiteMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _ForceAtSiteMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _ForceAtSiteMsgPayload.DoubleVector_front(self)

    def back(self):
        return _ForceAtSiteMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _ForceAtSiteMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _ForceAtSiteMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _ForceAtSiteMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _ForceAtSiteMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _ForceAtSiteMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _ForceAtSiteMsgPayload.delete_DoubleVector

# Register DoubleVector in _ForceAtSiteMsgPayload:
_ForceAtSiteMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ForceAtSiteMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ForceAtSiteMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _ForceAtSiteMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _ForceAtSiteMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _ForceAtSiteMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ForceAtSiteMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ForceAtSiteMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ForceAtSiteMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ForceAtSiteMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ForceAtSiteMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _ForceAtSiteMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _ForceAtSiteMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _ForceAtSiteMsgPayload.StringVector_empty(self)

    def size(self):
        return _ForceAtSiteMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _ForceAtSiteMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _ForceAtSiteMsgPayload.StringVector_begin(self)

    def end(self):
        return _ForceAtSiteMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _ForceAtSiteMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _ForceAtSiteMsgPayload.StringVector_rend(self)

    def clear(self):
        return _ForceAtSiteMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _ForceAtSiteMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _ForceAtSiteMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _ForceAtSiteMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _ForceAtSiteMsgPayload.StringVector_swiginit(self, _ForceAtSiteMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _ForceAtSiteMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _ForceAtSiteMsgPayload.StringVector_front(self)

    def back(self):
        return _ForceAtSiteMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _ForceAtSiteMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _ForceAtSiteMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _ForceAtSiteMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _ForceAtSiteMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _ForceAtSiteMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _ForceAtSiteMsgPayload.delete_StringVector

# Register StringVector in _ForceAtSiteMsgPayload:
_ForceAtSiteMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _ForceAtSiteMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _ForceAtSiteMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _ForceAtSiteMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _ForceAtSiteMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _ForceAtSiteMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _ForceAtSiteMsgPayload.NANO2SEC
SEC2NANO = _ForceAtSiteMsgPayload.SEC2NANO
SEC2HOUR = _ForceAtSiteMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _ForceAtSiteMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _ForceAtSiteMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _ForceAtSiteMsgPayload.secToNano(seconds)
BOOL_FALSE = _ForceAtSiteMsgPayload.BOOL_FALSE
BOOL_TRUE = _ForceAtSiteMsgPayload.BOOL_TRUE
AVAILABLE = _ForceAtSiteMsgPayload.AVAILABLE
UNAVAILABLE = _ForceAtSiteMsgPayload.UNAVAILABLE
BalancedWheels = _ForceAtSiteMsgPayload.BalancedWheels
JitterSimple = _ForceAtSiteMsgPayload.JitterSimple
JitterFullyCoupled = _ForceAtSiteMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ForceAtSiteMsgPayload.SysModel_swiginit(self, _ForceAtSiteMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _ForceAtSiteMsgPayload.delete_SysModel

    def SelfInit(self):
        return _ForceAtSiteMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _ForceAtSiteMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _ForceAtSiteMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _ForceAtSiteMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_ForceAtSiteMsgPayload.SysModel_ModelTag_get, _ForceAtSiteMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_ForceAtSiteMsgPayload.SysModel_CallCounts_get, _ForceAtSiteMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_ForceAtSiteMsgPayload.SysModel_RNGSeed_get, _ForceAtSiteMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_ForceAtSiteMsgPayload.SysModel_moduleID_get, _ForceAtSiteMsgPayload.SysModel_moduleID_set)

# Register SysModel in _ForceAtSiteMsgPayload:
_ForceAtSiteMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _ForceAtSiteMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _ForceAtSiteMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _ForceAtSiteMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _ForceAtSiteMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _ForceAtSiteMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _ForceAtSiteMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _ForceAtSiteMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _ForceAtSiteMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _ForceAtSiteMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _ForceAtSiteMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _ForceAtSiteMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _ForceAtSiteMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class ForceAtSiteMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    force_S = property(_ForceAtSiteMsgPayload.ForceAtSiteMsgPayload_force_S_get, _ForceAtSiteMsgPayload.ForceAtSiteMsgPayload_force_S_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _ForceAtSiteMsgPayload.ForceAtSiteMsgPayload_swiginit(self, _ForceAtSiteMsgPayload.new_ForceAtSiteMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _ForceAtSiteMsgPayload.delete_ForceAtSiteMsgPayload

# Register ForceAtSiteMsgPayload in _ForceAtSiteMsgPayload:
_ForceAtSiteMsgPayload.ForceAtSiteMsgPayload_swigregister(ForceAtSiteMsgPayload)

def _pprint_ForceAtSiteMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[ForceAtSiteMsgPayload.__repr__] = _pprint_ForceAtSiteMsgPayload

class ForceAtSiteMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_ForceAtSiteMsgPayload.ForceAtSiteMsgReader_bskLogger_get, _ForceAtSiteMsgPayload.ForceAtSiteMsgReader_bskLogger_set)
    zeroMsgPayload = property(_ForceAtSiteMsgPayload.ForceAtSiteMsgReader_zeroMsgPayload_get, _ForceAtSiteMsgPayload.ForceAtSiteMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _ForceAtSiteMsgPayload.ForceAtSiteMsgReader_swiginit(self, _ForceAtSiteMsgPayload.new_ForceAtSiteMsgReader(*args))

    def __call__(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgReader___call__(self)

    def isLinked(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgReader_isLinked(self)

    def isWritten(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgReader_isWritten(self)

    def timeWritten(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgReader_timeWritten(self)

    def moduleID(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == ForceAtSiteMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.ForceAtSiteMsgPayload import ForceAtSiteMsg_C
            if type(source) == ForceAtSiteMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<ForceAtSiteMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == ForceAtSiteMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.ForceAtSiteMsgPayload import ForceAtSiteMsg_C
        except ImportError:
            return 0

        if type(source) == ForceAtSiteMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _ForceAtSiteMsgPayload.delete_ForceAtSiteMsgReader

# Register ForceAtSiteMsgReader in _ForceAtSiteMsgPayload:
_ForceAtSiteMsgPayload.ForceAtSiteMsgReader_swigregister(ForceAtSiteMsgReader)
class ForceAtSiteMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ForceAtSiteMsgPayload.ForceAtSiteMsgWriter_swiginit(self, _ForceAtSiteMsgPayload.new_ForceAtSiteMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _ForceAtSiteMsgPayload.delete_ForceAtSiteMsgWriter

# Register ForceAtSiteMsgWriter in _ForceAtSiteMsgPayload:
_ForceAtSiteMsgPayload.ForceAtSiteMsgWriter_swigregister(ForceAtSiteMsgWriter)
class ForceAtSiteMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_ForceAtSiteMsgPayload.ForceAtSiteMsg_write_get, _ForceAtSiteMsgPayload.ForceAtSiteMsg_write_set)

    def addSubscriber(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsg_addSubscriber(self)

    def addAuthor(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_ForceAtSiteMsgPayload.ForceAtSiteMsg_zeroMsgPayload_get, _ForceAtSiteMsgPayload.ForceAtSiteMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsg_isLinked(self)

    def getPayloadSize(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _ForceAtSiteMsgPayload.ForceAtSiteMsg_swiginit(self, _ForceAtSiteMsgPayload.new_ForceAtSiteMsg())
    __swig_destroy__ = _ForceAtSiteMsgPayload.delete_ForceAtSiteMsg

# Register ForceAtSiteMsg in _ForceAtSiteMsgPayload:
_ForceAtSiteMsgPayload.ForceAtSiteMsg_swigregister(ForceAtSiteMsg)
class ForceAtSiteMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ForceAtSiteMsgPayload.ForceAtSiteMsgRecorder_swiginit(self, _ForceAtSiteMsgPayload.new_ForceAtSiteMsgRecorder(*args))
    __swig_destroy__ = _ForceAtSiteMsgPayload.delete_ForceAtSiteMsgRecorder

    def SelfInit(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgRecorder___record_vector(self)

    def size(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgRecorder_clear(self)
    bskLogger = property(_ForceAtSiteMsgPayload.ForceAtSiteMsgRecorder_bskLogger_get, _ForceAtSiteMsgPayload.ForceAtSiteMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgRecorder_updateTimeInterval(self, timeDiff)

    def _force_S_array(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgRecorder__force_S_array(self)

    @property
    def force_S(self):
        return self._force_S_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register ForceAtSiteMsgRecorder in _ForceAtSiteMsgPayload:
_ForceAtSiteMsgPayload.ForceAtSiteMsgRecorder_swigregister(ForceAtSiteMsgRecorder)
class ForceAtSiteMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgPayloadVector___bool__(self)

    def __len__(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgPayloadVector_pop(self)

    def append(self, x):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgPayloadVector_append(self, x)

    def empty(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgPayloadVector_empty(self)

    def size(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgPayloadVector_size(self)

    def swap(self, v):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgPayloadVector_swap(self, v)

    def begin(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgPayloadVector_begin(self)

    def end(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgPayloadVector_end(self)

    def rbegin(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgPayloadVector_rbegin(self)

    def rend(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgPayloadVector_rend(self)

    def clear(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _ForceAtSiteMsgPayload.ForceAtSiteMsgPayloadVector_swiginit(self, _ForceAtSiteMsgPayload.new_ForceAtSiteMsgPayloadVector(*args))

    def push_back(self, x):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgPayloadVector_push_back(self, x)

    def front(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgPayloadVector_front(self)

    def back(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgPayloadVector_capacity(self)

    def get_all(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _ForceAtSiteMsgPayload.delete_ForceAtSiteMsgPayloadVector

# Register ForceAtSiteMsgPayloadVector in _ForceAtSiteMsgPayload:
_ForceAtSiteMsgPayload.ForceAtSiteMsgPayloadVector_swigregister(ForceAtSiteMsgPayloadVector)
class ForceAtSiteMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsVector_empty(self)

    def size(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsVector_begin(self)

    def end(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsVector_rend(self)

    def clear(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsVector_swiginit(self, _ForceAtSiteMsgPayload.new_ForceAtSiteMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsVector_front(self)

    def back(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _ForceAtSiteMsgPayload.delete_ForceAtSiteMsgOutMsgsVector

# Register ForceAtSiteMsgOutMsgsVector in _ForceAtSiteMsgPayload:
_ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsVector_swigregister(ForceAtSiteMsgOutMsgsVector)
class ForceAtSiteMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsPtrVector_swiginit(self, _ForceAtSiteMsgPayload.new_ForceAtSiteMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _ForceAtSiteMsgPayload.delete_ForceAtSiteMsgOutMsgsPtrVector

# Register ForceAtSiteMsgOutMsgsPtrVector in _ForceAtSiteMsgPayload:
_ForceAtSiteMsgPayload.ForceAtSiteMsgOutMsgsPtrVector_swigregister(ForceAtSiteMsgOutMsgsPtrVector)
class ForceAtSiteMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgInMsgsVector_pop(self)

    def append(self, x):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgInMsgsVector_append(self, x)

    def empty(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgInMsgsVector_empty(self)

    def size(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgInMsgsVector_size(self)

    def swap(self, v):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgInMsgsVector_begin(self)

    def end(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgInMsgsVector_end(self)

    def rbegin(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgInMsgsVector_rend(self)

    def clear(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _ForceAtSiteMsgPayload.ForceAtSiteMsgInMsgsVector_swiginit(self, _ForceAtSiteMsgPayload.new_ForceAtSiteMsgInMsgsVector(*args))

    def push_back(self, x):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgInMsgsVector_front(self)

    def back(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _ForceAtSiteMsgPayload.delete_ForceAtSiteMsgInMsgsVector

# Register ForceAtSiteMsgInMsgsVector in _ForceAtSiteMsgPayload:
_ForceAtSiteMsgPayload.ForceAtSiteMsgInMsgsVector_swigregister(ForceAtSiteMsgInMsgsVector)
class ForceAtSiteMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_ForceAtSiteMsgPayload.ForceAtSiteMsg_C_header_get, _ForceAtSiteMsgPayload.ForceAtSiteMsg_C_header_set)
    payload = property(_ForceAtSiteMsgPayload.ForceAtSiteMsg_C_payload_get, _ForceAtSiteMsgPayload.ForceAtSiteMsg_C_payload_set)
    payloadPointer = property(_ForceAtSiteMsgPayload.ForceAtSiteMsg_C_payloadPointer_get, _ForceAtSiteMsgPayload.ForceAtSiteMsg_C_payloadPointer_set)
    headerPointer = property(_ForceAtSiteMsgPayload.ForceAtSiteMsg_C_headerPointer_get, _ForceAtSiteMsgPayload.ForceAtSiteMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _ForceAtSiteMsgPayload.ForceAtSiteMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import ForceAtSiteMsg
        if type(source) == type(self):
            ForceAtSiteMsg_C_subscribe(self, source)
        elif type(source) == ForceAtSiteMsg:
            ForceAtSiteMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            ForceAtSiteMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe ForceAtSiteMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        ForceAtSiteMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import ForceAtSiteMsg
        if type(source) == type(self):
            return (ForceAtSiteMsg_C_isSubscribedTo(self, source))
        elif type(source) == ForceAtSiteMsg:
            return (ForceAtSiteMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (ForceAtSiteMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        ForceAtSiteMsg_C_addAuthor(self, self)
        if data:
            ForceAtSiteMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        ForceAtSiteMsg_C_addAuthor(self, self)
        ForceAtSiteMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return ForceAtSiteMsg_C_read(self)


    def __init__(self):
        _ForceAtSiteMsgPayload.ForceAtSiteMsg_C_swiginit(self, _ForceAtSiteMsgPayload.new_ForceAtSiteMsg_C())
    __swig_destroy__ = _ForceAtSiteMsgPayload.delete_ForceAtSiteMsg_C

# Register ForceAtSiteMsg_C in _ForceAtSiteMsgPayload:
_ForceAtSiteMsgPayload.ForceAtSiteMsg_C_swigregister(ForceAtSiteMsg_C)

def ForceAtSiteMsg_cpp_subscribe(subscriber, source):
    return _ForceAtSiteMsgPayload.ForceAtSiteMsg_cpp_subscribe(subscriber, source)

def ForceAtSiteMsg_C_subscribe(subscriber, source):
    return _ForceAtSiteMsgPayload.ForceAtSiteMsg_C_subscribe(subscriber, source)

def ForceAtSiteMsg_addr_subscribe(subscriber, sourceAddr):
    return _ForceAtSiteMsgPayload.ForceAtSiteMsg_addr_subscribe(subscriber, sourceAddr)

def ForceAtSiteMsg_unsubscribe(subscriber):
    return _ForceAtSiteMsgPayload.ForceAtSiteMsg_unsubscribe(subscriber)

def ForceAtSiteMsg_C_isSubscribedTo(subscriber, source):
    return _ForceAtSiteMsgPayload.ForceAtSiteMsg_C_isSubscribedTo(subscriber, source)

def ForceAtSiteMsg_cpp_isSubscribedTo(subscriber, source):
    return _ForceAtSiteMsgPayload.ForceAtSiteMsg_cpp_isSubscribedTo(subscriber, source)

def ForceAtSiteMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _ForceAtSiteMsgPayload.ForceAtSiteMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def ForceAtSiteMsg_C_addAuthor(coowner, data):
    return _ForceAtSiteMsgPayload.ForceAtSiteMsg_C_addAuthor(coowner, data)

def ForceAtSiteMsg_C_init(owner):
    return _ForceAtSiteMsgPayload.ForceAtSiteMsg_C_init(owner)

def ForceAtSiteMsg_C_isLinked(data):
    return _ForceAtSiteMsgPayload.ForceAtSiteMsg_C_isLinked(data)

def ForceAtSiteMsg_C_isWritten(data):
    return _ForceAtSiteMsgPayload.ForceAtSiteMsg_C_isWritten(data)

def ForceAtSiteMsg_C_timeWritten(data):
    return _ForceAtSiteMsgPayload.ForceAtSiteMsg_C_timeWritten(data)

def ForceAtSiteMsg_C_moduleID(data):
    return _ForceAtSiteMsgPayload.ForceAtSiteMsg_C_moduleID(data)

def ForceAtSiteMsg_C_write(data, destination, moduleID, callTime):
    return _ForceAtSiteMsgPayload.ForceAtSiteMsg_C_write(data, destination, moduleID, callTime)

def ForceAtSiteMsg_C_read(source):
    return _ForceAtSiteMsgPayload.ForceAtSiteMsg_C_read(source)

def ForceAtSiteMsg_C_zeroMsgPayload():
    return _ForceAtSiteMsgPayload.ForceAtSiteMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_ForceAtSiteMsgPayload.MsgHeader_isLinked_get, _ForceAtSiteMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_ForceAtSiteMsgPayload.MsgHeader_isWritten_get, _ForceAtSiteMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_ForceAtSiteMsgPayload.MsgHeader_timeWritten_get, _ForceAtSiteMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_ForceAtSiteMsgPayload.MsgHeader_moduleID_get, _ForceAtSiteMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _ForceAtSiteMsgPayload.MsgHeader_swiginit(self, _ForceAtSiteMsgPayload.new_MsgHeader())
    __swig_destroy__ = _ForceAtSiteMsgPayload.delete_MsgHeader

# Register MsgHeader in _ForceAtSiteMsgPayload:
_ForceAtSiteMsgPayload.MsgHeader_swigregister(MsgHeader)

