# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _DeviceCmdMsgPayload
else:
    import _DeviceCmdMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _DeviceCmdMsgPayload.delete_SwigPyIterator

    def value(self):
        return _DeviceCmdMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _DeviceCmdMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _DeviceCmdMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _DeviceCmdMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _DeviceCmdMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _DeviceCmdMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _DeviceCmdMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _DeviceCmdMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _DeviceCmdMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _DeviceCmdMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _DeviceCmdMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _DeviceCmdMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _DeviceCmdMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _DeviceCmdMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _DeviceCmdMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _DeviceCmdMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _DeviceCmdMsgPayload:
_DeviceCmdMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _DeviceCmdMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _DeviceCmdMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _DeviceCmdMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _DeviceCmdMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _DeviceCmdMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _DeviceCmdMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _DeviceCmdMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _DeviceCmdMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _DeviceCmdMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _DeviceCmdMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _DeviceCmdMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _DeviceCmdMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _DeviceCmdMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _DeviceCmdMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _DeviceCmdMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _DeviceCmdMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DeviceCmdMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DeviceCmdMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _DeviceCmdMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _DeviceCmdMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _DeviceCmdMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DeviceCmdMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DeviceCmdMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DeviceCmdMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DeviceCmdMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DeviceCmdMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _DeviceCmdMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _DeviceCmdMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _DeviceCmdMsgPayload.TimeVector_empty(self)

    def size(self):
        return _DeviceCmdMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _DeviceCmdMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _DeviceCmdMsgPayload.TimeVector_begin(self)

    def end(self):
        return _DeviceCmdMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _DeviceCmdMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _DeviceCmdMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _DeviceCmdMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _DeviceCmdMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _DeviceCmdMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _DeviceCmdMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _DeviceCmdMsgPayload.TimeVector_swiginit(self, _DeviceCmdMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _DeviceCmdMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _DeviceCmdMsgPayload.TimeVector_front(self)

    def back(self):
        return _DeviceCmdMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _DeviceCmdMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _DeviceCmdMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _DeviceCmdMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _DeviceCmdMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _DeviceCmdMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _DeviceCmdMsgPayload.delete_TimeVector

# Register TimeVector in _DeviceCmdMsgPayload:
_DeviceCmdMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DeviceCmdMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DeviceCmdMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _DeviceCmdMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _DeviceCmdMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _DeviceCmdMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DeviceCmdMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DeviceCmdMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DeviceCmdMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DeviceCmdMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DeviceCmdMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _DeviceCmdMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _DeviceCmdMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _DeviceCmdMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _DeviceCmdMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _DeviceCmdMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _DeviceCmdMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _DeviceCmdMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _DeviceCmdMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _DeviceCmdMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _DeviceCmdMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _DeviceCmdMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _DeviceCmdMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _DeviceCmdMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _DeviceCmdMsgPayload.DoubleVector_swiginit(self, _DeviceCmdMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _DeviceCmdMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _DeviceCmdMsgPayload.DoubleVector_front(self)

    def back(self):
        return _DeviceCmdMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _DeviceCmdMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _DeviceCmdMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _DeviceCmdMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _DeviceCmdMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _DeviceCmdMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _DeviceCmdMsgPayload.delete_DoubleVector

# Register DoubleVector in _DeviceCmdMsgPayload:
_DeviceCmdMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DeviceCmdMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DeviceCmdMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _DeviceCmdMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _DeviceCmdMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _DeviceCmdMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DeviceCmdMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DeviceCmdMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DeviceCmdMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DeviceCmdMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DeviceCmdMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _DeviceCmdMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _DeviceCmdMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _DeviceCmdMsgPayload.StringVector_empty(self)

    def size(self):
        return _DeviceCmdMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _DeviceCmdMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _DeviceCmdMsgPayload.StringVector_begin(self)

    def end(self):
        return _DeviceCmdMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _DeviceCmdMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _DeviceCmdMsgPayload.StringVector_rend(self)

    def clear(self):
        return _DeviceCmdMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _DeviceCmdMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _DeviceCmdMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _DeviceCmdMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _DeviceCmdMsgPayload.StringVector_swiginit(self, _DeviceCmdMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _DeviceCmdMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _DeviceCmdMsgPayload.StringVector_front(self)

    def back(self):
        return _DeviceCmdMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _DeviceCmdMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _DeviceCmdMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _DeviceCmdMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _DeviceCmdMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _DeviceCmdMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _DeviceCmdMsgPayload.delete_StringVector

# Register StringVector in _DeviceCmdMsgPayload:
_DeviceCmdMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _DeviceCmdMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _DeviceCmdMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _DeviceCmdMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _DeviceCmdMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _DeviceCmdMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _DeviceCmdMsgPayload.NANO2SEC
SEC2NANO = _DeviceCmdMsgPayload.SEC2NANO
SEC2HOUR = _DeviceCmdMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _DeviceCmdMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _DeviceCmdMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _DeviceCmdMsgPayload.secToNano(seconds)
BOOL_FALSE = _DeviceCmdMsgPayload.BOOL_FALSE
BOOL_TRUE = _DeviceCmdMsgPayload.BOOL_TRUE
AVAILABLE = _DeviceCmdMsgPayload.AVAILABLE
UNAVAILABLE = _DeviceCmdMsgPayload.UNAVAILABLE
BalancedWheels = _DeviceCmdMsgPayload.BalancedWheels
JitterSimple = _DeviceCmdMsgPayload.JitterSimple
JitterFullyCoupled = _DeviceCmdMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _DeviceCmdMsgPayload.SysModel_swiginit(self, _DeviceCmdMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _DeviceCmdMsgPayload.delete_SysModel

    def SelfInit(self):
        return _DeviceCmdMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _DeviceCmdMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _DeviceCmdMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _DeviceCmdMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_DeviceCmdMsgPayload.SysModel_ModelTag_get, _DeviceCmdMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_DeviceCmdMsgPayload.SysModel_CallCounts_get, _DeviceCmdMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_DeviceCmdMsgPayload.SysModel_RNGSeed_get, _DeviceCmdMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_DeviceCmdMsgPayload.SysModel_moduleID_get, _DeviceCmdMsgPayload.SysModel_moduleID_set)

# Register SysModel in _DeviceCmdMsgPayload:
_DeviceCmdMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _DeviceCmdMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _DeviceCmdMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _DeviceCmdMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _DeviceCmdMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _DeviceCmdMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _DeviceCmdMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _DeviceCmdMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _DeviceCmdMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _DeviceCmdMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _DeviceCmdMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _DeviceCmdMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _DeviceCmdMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class DeviceCmdMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    deviceCmd = property(_DeviceCmdMsgPayload.DeviceCmdMsgPayload_deviceCmd_get, _DeviceCmdMsgPayload.DeviceCmdMsgPayload_deviceCmd_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _DeviceCmdMsgPayload.DeviceCmdMsgPayload_swiginit(self, _DeviceCmdMsgPayload.new_DeviceCmdMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _DeviceCmdMsgPayload.delete_DeviceCmdMsgPayload

# Register DeviceCmdMsgPayload in _DeviceCmdMsgPayload:
_DeviceCmdMsgPayload.DeviceCmdMsgPayload_swigregister(DeviceCmdMsgPayload)

def _pprint_DeviceCmdMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[DeviceCmdMsgPayload.__repr__] = _pprint_DeviceCmdMsgPayload

class DeviceCmdMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_DeviceCmdMsgPayload.DeviceCmdMsgReader_bskLogger_get, _DeviceCmdMsgPayload.DeviceCmdMsgReader_bskLogger_set)
    zeroMsgPayload = property(_DeviceCmdMsgPayload.DeviceCmdMsgReader_zeroMsgPayload_get, _DeviceCmdMsgPayload.DeviceCmdMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _DeviceCmdMsgPayload.DeviceCmdMsgReader_swiginit(self, _DeviceCmdMsgPayload.new_DeviceCmdMsgReader(*args))

    def __call__(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgReader___call__(self)

    def isLinked(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgReader_isLinked(self)

    def isWritten(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgReader_isWritten(self)

    def timeWritten(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgReader_timeWritten(self)

    def moduleID(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _DeviceCmdMsgPayload.DeviceCmdMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _DeviceCmdMsgPayload.DeviceCmdMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _DeviceCmdMsgPayload.DeviceCmdMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _DeviceCmdMsgPayload.DeviceCmdMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _DeviceCmdMsgPayload.DeviceCmdMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _DeviceCmdMsgPayload.DeviceCmdMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _DeviceCmdMsgPayload.DeviceCmdMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _DeviceCmdMsgPayload.DeviceCmdMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _DeviceCmdMsgPayload.DeviceCmdMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == DeviceCmdMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.DeviceCmdMsgPayload import DeviceCmdMsg_C
            if type(source) == DeviceCmdMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<DeviceCmdMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == DeviceCmdMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.DeviceCmdMsgPayload import DeviceCmdMsg_C
        except ImportError:
            return 0

        if type(source) == DeviceCmdMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _DeviceCmdMsgPayload.delete_DeviceCmdMsgReader

# Register DeviceCmdMsgReader in _DeviceCmdMsgPayload:
_DeviceCmdMsgPayload.DeviceCmdMsgReader_swigregister(DeviceCmdMsgReader)
class DeviceCmdMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _DeviceCmdMsgPayload.DeviceCmdMsgWriter_swiginit(self, _DeviceCmdMsgPayload.new_DeviceCmdMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _DeviceCmdMsgPayload.DeviceCmdMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _DeviceCmdMsgPayload.delete_DeviceCmdMsgWriter

# Register DeviceCmdMsgWriter in _DeviceCmdMsgPayload:
_DeviceCmdMsgPayload.DeviceCmdMsgWriter_swigregister(DeviceCmdMsgWriter)
class DeviceCmdMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_DeviceCmdMsgPayload.DeviceCmdMsg_write_get, _DeviceCmdMsgPayload.DeviceCmdMsg_write_set)

    def addSubscriber(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsg_addSubscriber(self)

    def addAuthor(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _DeviceCmdMsgPayload.DeviceCmdMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _DeviceCmdMsgPayload.DeviceCmdMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _DeviceCmdMsgPayload.DeviceCmdMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_DeviceCmdMsgPayload.DeviceCmdMsg_zeroMsgPayload_get, _DeviceCmdMsgPayload.DeviceCmdMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsg_isLinked(self)

    def getPayloadSize(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _DeviceCmdMsgPayload.DeviceCmdMsg_swiginit(self, _DeviceCmdMsgPayload.new_DeviceCmdMsg())
    __swig_destroy__ = _DeviceCmdMsgPayload.delete_DeviceCmdMsg

# Register DeviceCmdMsg in _DeviceCmdMsgPayload:
_DeviceCmdMsgPayload.DeviceCmdMsg_swigregister(DeviceCmdMsg)
class DeviceCmdMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _DeviceCmdMsgPayload.DeviceCmdMsgRecorder_swiginit(self, _DeviceCmdMsgPayload.new_DeviceCmdMsgRecorder(*args))
    __swig_destroy__ = _DeviceCmdMsgPayload.delete_DeviceCmdMsgRecorder

    def SelfInit(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _DeviceCmdMsgPayload.DeviceCmdMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _DeviceCmdMsgPayload.DeviceCmdMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgRecorder___record_vector(self)

    def size(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _DeviceCmdMsgPayload.DeviceCmdMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgRecorder_clear(self)
    bskLogger = property(_DeviceCmdMsgPayload.DeviceCmdMsgRecorder_bskLogger_get, _DeviceCmdMsgPayload.DeviceCmdMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _DeviceCmdMsgPayload.DeviceCmdMsgRecorder_updateTimeInterval(self, timeDiff)

    def _deviceCmd_array(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgRecorder__deviceCmd_array(self)

    @property
    def deviceCmd(self):
        return self._deviceCmd_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register DeviceCmdMsgRecorder in _DeviceCmdMsgPayload:
_DeviceCmdMsgPayload.DeviceCmdMsgRecorder_swigregister(DeviceCmdMsgRecorder)
class DeviceCmdMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgPayloadVector___bool__(self)

    def __len__(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _DeviceCmdMsgPayload.DeviceCmdMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DeviceCmdMsgPayload.DeviceCmdMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DeviceCmdMsgPayload.DeviceCmdMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DeviceCmdMsgPayload.DeviceCmdMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DeviceCmdMsgPayload.DeviceCmdMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DeviceCmdMsgPayload.DeviceCmdMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgPayloadVector_pop(self)

    def append(self, x):
        return _DeviceCmdMsgPayload.DeviceCmdMsgPayloadVector_append(self, x)

    def empty(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgPayloadVector_empty(self)

    def size(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgPayloadVector_size(self)

    def swap(self, v):
        return _DeviceCmdMsgPayload.DeviceCmdMsgPayloadVector_swap(self, v)

    def begin(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgPayloadVector_begin(self)

    def end(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgPayloadVector_end(self)

    def rbegin(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgPayloadVector_rbegin(self)

    def rend(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgPayloadVector_rend(self)

    def clear(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _DeviceCmdMsgPayload.DeviceCmdMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _DeviceCmdMsgPayload.DeviceCmdMsgPayloadVector_swiginit(self, _DeviceCmdMsgPayload.new_DeviceCmdMsgPayloadVector(*args))

    def push_back(self, x):
        return _DeviceCmdMsgPayload.DeviceCmdMsgPayloadVector_push_back(self, x)

    def front(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgPayloadVector_front(self)

    def back(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _DeviceCmdMsgPayload.DeviceCmdMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _DeviceCmdMsgPayload.DeviceCmdMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _DeviceCmdMsgPayload.DeviceCmdMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _DeviceCmdMsgPayload.DeviceCmdMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgPayloadVector_capacity(self)

    def get_all(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _DeviceCmdMsgPayload.delete_DeviceCmdMsgPayloadVector

# Register DeviceCmdMsgPayloadVector in _DeviceCmdMsgPayload:
_DeviceCmdMsgPayload.DeviceCmdMsgPayloadVector_swigregister(DeviceCmdMsgPayloadVector)
class DeviceCmdMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsVector_empty(self)

    def size(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsVector_begin(self)

    def end(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsVector_rend(self)

    def clear(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsVector_swiginit(self, _DeviceCmdMsgPayload.new_DeviceCmdMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsVector_front(self)

    def back(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _DeviceCmdMsgPayload.delete_DeviceCmdMsgOutMsgsVector

# Register DeviceCmdMsgOutMsgsVector in _DeviceCmdMsgPayload:
_DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsVector_swigregister(DeviceCmdMsgOutMsgsVector)
class DeviceCmdMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsPtrVector_swiginit(self, _DeviceCmdMsgPayload.new_DeviceCmdMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _DeviceCmdMsgPayload.delete_DeviceCmdMsgOutMsgsPtrVector

# Register DeviceCmdMsgOutMsgsPtrVector in _DeviceCmdMsgPayload:
_DeviceCmdMsgPayload.DeviceCmdMsgOutMsgsPtrVector_swigregister(DeviceCmdMsgOutMsgsPtrVector)
class DeviceCmdMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _DeviceCmdMsgPayload.DeviceCmdMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DeviceCmdMsgPayload.DeviceCmdMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DeviceCmdMsgPayload.DeviceCmdMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DeviceCmdMsgPayload.DeviceCmdMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DeviceCmdMsgPayload.DeviceCmdMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DeviceCmdMsgPayload.DeviceCmdMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgInMsgsVector_pop(self)

    def append(self, x):
        return _DeviceCmdMsgPayload.DeviceCmdMsgInMsgsVector_append(self, x)

    def empty(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgInMsgsVector_empty(self)

    def size(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgInMsgsVector_size(self)

    def swap(self, v):
        return _DeviceCmdMsgPayload.DeviceCmdMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgInMsgsVector_begin(self)

    def end(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgInMsgsVector_end(self)

    def rbegin(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgInMsgsVector_rend(self)

    def clear(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _DeviceCmdMsgPayload.DeviceCmdMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _DeviceCmdMsgPayload.DeviceCmdMsgInMsgsVector_swiginit(self, _DeviceCmdMsgPayload.new_DeviceCmdMsgInMsgsVector(*args))

    def push_back(self, x):
        return _DeviceCmdMsgPayload.DeviceCmdMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgInMsgsVector_front(self)

    def back(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _DeviceCmdMsgPayload.DeviceCmdMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _DeviceCmdMsgPayload.DeviceCmdMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _DeviceCmdMsgPayload.DeviceCmdMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _DeviceCmdMsgPayload.DeviceCmdMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _DeviceCmdMsgPayload.DeviceCmdMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _DeviceCmdMsgPayload.delete_DeviceCmdMsgInMsgsVector

# Register DeviceCmdMsgInMsgsVector in _DeviceCmdMsgPayload:
_DeviceCmdMsgPayload.DeviceCmdMsgInMsgsVector_swigregister(DeviceCmdMsgInMsgsVector)
class DeviceCmdMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_DeviceCmdMsgPayload.DeviceCmdMsg_C_header_get, _DeviceCmdMsgPayload.DeviceCmdMsg_C_header_set)
    payload = property(_DeviceCmdMsgPayload.DeviceCmdMsg_C_payload_get, _DeviceCmdMsgPayload.DeviceCmdMsg_C_payload_set)
    payloadPointer = property(_DeviceCmdMsgPayload.DeviceCmdMsg_C_payloadPointer_get, _DeviceCmdMsgPayload.DeviceCmdMsg_C_payloadPointer_set)
    headerPointer = property(_DeviceCmdMsgPayload.DeviceCmdMsg_C_headerPointer_get, _DeviceCmdMsgPayload.DeviceCmdMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _DeviceCmdMsgPayload.DeviceCmdMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import DeviceCmdMsg
        if type(source) == type(self):
            DeviceCmdMsg_C_subscribe(self, source)
        elif type(source) == DeviceCmdMsg:
            DeviceCmdMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            DeviceCmdMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe DeviceCmdMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        DeviceCmdMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import DeviceCmdMsg
        if type(source) == type(self):
            return (DeviceCmdMsg_C_isSubscribedTo(self, source))
        elif type(source) == DeviceCmdMsg:
            return (DeviceCmdMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (DeviceCmdMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        DeviceCmdMsg_C_addAuthor(self, self)
        if data:
            DeviceCmdMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        DeviceCmdMsg_C_addAuthor(self, self)
        DeviceCmdMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return DeviceCmdMsg_C_read(self)


    def __init__(self):
        _DeviceCmdMsgPayload.DeviceCmdMsg_C_swiginit(self, _DeviceCmdMsgPayload.new_DeviceCmdMsg_C())
    __swig_destroy__ = _DeviceCmdMsgPayload.delete_DeviceCmdMsg_C

# Register DeviceCmdMsg_C in _DeviceCmdMsgPayload:
_DeviceCmdMsgPayload.DeviceCmdMsg_C_swigregister(DeviceCmdMsg_C)

def DeviceCmdMsg_cpp_subscribe(subscriber, source):
    return _DeviceCmdMsgPayload.DeviceCmdMsg_cpp_subscribe(subscriber, source)

def DeviceCmdMsg_C_subscribe(subscriber, source):
    return _DeviceCmdMsgPayload.DeviceCmdMsg_C_subscribe(subscriber, source)

def DeviceCmdMsg_addr_subscribe(subscriber, sourceAddr):
    return _DeviceCmdMsgPayload.DeviceCmdMsg_addr_subscribe(subscriber, sourceAddr)

def DeviceCmdMsg_unsubscribe(subscriber):
    return _DeviceCmdMsgPayload.DeviceCmdMsg_unsubscribe(subscriber)

def DeviceCmdMsg_C_isSubscribedTo(subscriber, source):
    return _DeviceCmdMsgPayload.DeviceCmdMsg_C_isSubscribedTo(subscriber, source)

def DeviceCmdMsg_cpp_isSubscribedTo(subscriber, source):
    return _DeviceCmdMsgPayload.DeviceCmdMsg_cpp_isSubscribedTo(subscriber, source)

def DeviceCmdMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _DeviceCmdMsgPayload.DeviceCmdMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def DeviceCmdMsg_C_addAuthor(coowner, data):
    return _DeviceCmdMsgPayload.DeviceCmdMsg_C_addAuthor(coowner, data)

def DeviceCmdMsg_C_init(owner):
    return _DeviceCmdMsgPayload.DeviceCmdMsg_C_init(owner)

def DeviceCmdMsg_C_isLinked(data):
    return _DeviceCmdMsgPayload.DeviceCmdMsg_C_isLinked(data)

def DeviceCmdMsg_C_isWritten(data):
    return _DeviceCmdMsgPayload.DeviceCmdMsg_C_isWritten(data)

def DeviceCmdMsg_C_timeWritten(data):
    return _DeviceCmdMsgPayload.DeviceCmdMsg_C_timeWritten(data)

def DeviceCmdMsg_C_moduleID(data):
    return _DeviceCmdMsgPayload.DeviceCmdMsg_C_moduleID(data)

def DeviceCmdMsg_C_write(data, destination, moduleID, callTime):
    return _DeviceCmdMsgPayload.DeviceCmdMsg_C_write(data, destination, moduleID, callTime)

def DeviceCmdMsg_C_read(source):
    return _DeviceCmdMsgPayload.DeviceCmdMsg_C_read(source)

def DeviceCmdMsg_C_zeroMsgPayload():
    return _DeviceCmdMsgPayload.DeviceCmdMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_DeviceCmdMsgPayload.MsgHeader_isLinked_get, _DeviceCmdMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_DeviceCmdMsgPayload.MsgHeader_isWritten_get, _DeviceCmdMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_DeviceCmdMsgPayload.MsgHeader_timeWritten_get, _DeviceCmdMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_DeviceCmdMsgPayload.MsgHeader_moduleID_get, _DeviceCmdMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _DeviceCmdMsgPayload.MsgHeader_swiginit(self, _DeviceCmdMsgPayload.new_MsgHeader())
    __swig_destroy__ = _DeviceCmdMsgPayload.delete_MsgHeader

# Register MsgHeader in _DeviceCmdMsgPayload:
_DeviceCmdMsgPayload.MsgHeader_swigregister(MsgHeader)

