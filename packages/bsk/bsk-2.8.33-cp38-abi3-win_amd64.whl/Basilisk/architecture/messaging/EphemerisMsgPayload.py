# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _EphemerisMsgPayload
else:
    import _EphemerisMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _EphemerisMsgPayload.delete_SwigPyIterator

    def value(self):
        return _EphemerisMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _EphemerisMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _EphemerisMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _EphemerisMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _EphemerisMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _EphemerisMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _EphemerisMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _EphemerisMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _EphemerisMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _EphemerisMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _EphemerisMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _EphemerisMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _EphemerisMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _EphemerisMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _EphemerisMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _EphemerisMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _EphemerisMsgPayload:
_EphemerisMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _EphemerisMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _EphemerisMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _EphemerisMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _EphemerisMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _EphemerisMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _EphemerisMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _EphemerisMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _EphemerisMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _EphemerisMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _EphemerisMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _EphemerisMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _EphemerisMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _EphemerisMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _EphemerisMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _EphemerisMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _EphemerisMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _EphemerisMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _EphemerisMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _EphemerisMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _EphemerisMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _EphemerisMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _EphemerisMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _EphemerisMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _EphemerisMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _EphemerisMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _EphemerisMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _EphemerisMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _EphemerisMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _EphemerisMsgPayload.TimeVector_empty(self)

    def size(self):
        return _EphemerisMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _EphemerisMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _EphemerisMsgPayload.TimeVector_begin(self)

    def end(self):
        return _EphemerisMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _EphemerisMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _EphemerisMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _EphemerisMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _EphemerisMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _EphemerisMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _EphemerisMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _EphemerisMsgPayload.TimeVector_swiginit(self, _EphemerisMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _EphemerisMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _EphemerisMsgPayload.TimeVector_front(self)

    def back(self):
        return _EphemerisMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _EphemerisMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _EphemerisMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _EphemerisMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _EphemerisMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _EphemerisMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _EphemerisMsgPayload.delete_TimeVector

# Register TimeVector in _EphemerisMsgPayload:
_EphemerisMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _EphemerisMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _EphemerisMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _EphemerisMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _EphemerisMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _EphemerisMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _EphemerisMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _EphemerisMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _EphemerisMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _EphemerisMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _EphemerisMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _EphemerisMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _EphemerisMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _EphemerisMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _EphemerisMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _EphemerisMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _EphemerisMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _EphemerisMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _EphemerisMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _EphemerisMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _EphemerisMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _EphemerisMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _EphemerisMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _EphemerisMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _EphemerisMsgPayload.DoubleVector_swiginit(self, _EphemerisMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _EphemerisMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _EphemerisMsgPayload.DoubleVector_front(self)

    def back(self):
        return _EphemerisMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _EphemerisMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _EphemerisMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _EphemerisMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _EphemerisMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _EphemerisMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _EphemerisMsgPayload.delete_DoubleVector

# Register DoubleVector in _EphemerisMsgPayload:
_EphemerisMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _EphemerisMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _EphemerisMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _EphemerisMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _EphemerisMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _EphemerisMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _EphemerisMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _EphemerisMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _EphemerisMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _EphemerisMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _EphemerisMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _EphemerisMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _EphemerisMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _EphemerisMsgPayload.StringVector_empty(self)

    def size(self):
        return _EphemerisMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _EphemerisMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _EphemerisMsgPayload.StringVector_begin(self)

    def end(self):
        return _EphemerisMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _EphemerisMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _EphemerisMsgPayload.StringVector_rend(self)

    def clear(self):
        return _EphemerisMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _EphemerisMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _EphemerisMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _EphemerisMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _EphemerisMsgPayload.StringVector_swiginit(self, _EphemerisMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _EphemerisMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _EphemerisMsgPayload.StringVector_front(self)

    def back(self):
        return _EphemerisMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _EphemerisMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _EphemerisMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _EphemerisMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _EphemerisMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _EphemerisMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _EphemerisMsgPayload.delete_StringVector

# Register StringVector in _EphemerisMsgPayload:
_EphemerisMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _EphemerisMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _EphemerisMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _EphemerisMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _EphemerisMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _EphemerisMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _EphemerisMsgPayload.NANO2SEC
SEC2NANO = _EphemerisMsgPayload.SEC2NANO
SEC2HOUR = _EphemerisMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _EphemerisMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _EphemerisMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _EphemerisMsgPayload.secToNano(seconds)
BOOL_FALSE = _EphemerisMsgPayload.BOOL_FALSE
BOOL_TRUE = _EphemerisMsgPayload.BOOL_TRUE
AVAILABLE = _EphemerisMsgPayload.AVAILABLE
UNAVAILABLE = _EphemerisMsgPayload.UNAVAILABLE
BalancedWheels = _EphemerisMsgPayload.BalancedWheels
JitterSimple = _EphemerisMsgPayload.JitterSimple
JitterFullyCoupled = _EphemerisMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _EphemerisMsgPayload.SysModel_swiginit(self, _EphemerisMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _EphemerisMsgPayload.delete_SysModel

    def SelfInit(self):
        return _EphemerisMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _EphemerisMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _EphemerisMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _EphemerisMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_EphemerisMsgPayload.SysModel_ModelTag_get, _EphemerisMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_EphemerisMsgPayload.SysModel_CallCounts_get, _EphemerisMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_EphemerisMsgPayload.SysModel_RNGSeed_get, _EphemerisMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_EphemerisMsgPayload.SysModel_moduleID_get, _EphemerisMsgPayload.SysModel_moduleID_set)

# Register SysModel in _EphemerisMsgPayload:
_EphemerisMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _EphemerisMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _EphemerisMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _EphemerisMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _EphemerisMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _EphemerisMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _EphemerisMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _EphemerisMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _EphemerisMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _EphemerisMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _EphemerisMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _EphemerisMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _EphemerisMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class EphemerisMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r_BdyZero_N = property(_EphemerisMsgPayload.EphemerisMsgPayload_r_BdyZero_N_get, _EphemerisMsgPayload.EphemerisMsgPayload_r_BdyZero_N_set)
    v_BdyZero_N = property(_EphemerisMsgPayload.EphemerisMsgPayload_v_BdyZero_N_get, _EphemerisMsgPayload.EphemerisMsgPayload_v_BdyZero_N_set)
    sigma_BN = property(_EphemerisMsgPayload.EphemerisMsgPayload_sigma_BN_get, _EphemerisMsgPayload.EphemerisMsgPayload_sigma_BN_set)
    omega_BN_B = property(_EphemerisMsgPayload.EphemerisMsgPayload_omega_BN_B_get, _EphemerisMsgPayload.EphemerisMsgPayload_omega_BN_B_set)
    timeTag = property(_EphemerisMsgPayload.EphemerisMsgPayload_timeTag_get, _EphemerisMsgPayload.EphemerisMsgPayload_timeTag_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _EphemerisMsgPayload.EphemerisMsgPayload_swiginit(self, _EphemerisMsgPayload.new_EphemerisMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _EphemerisMsgPayload.delete_EphemerisMsgPayload

# Register EphemerisMsgPayload in _EphemerisMsgPayload:
_EphemerisMsgPayload.EphemerisMsgPayload_swigregister(EphemerisMsgPayload)

def _pprint_EphemerisMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[EphemerisMsgPayload.__repr__] = _pprint_EphemerisMsgPayload

class EphemerisMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_EphemerisMsgPayload.EphemerisMsgReader_bskLogger_get, _EphemerisMsgPayload.EphemerisMsgReader_bskLogger_set)
    zeroMsgPayload = property(_EphemerisMsgPayload.EphemerisMsgReader_zeroMsgPayload_get, _EphemerisMsgPayload.EphemerisMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _EphemerisMsgPayload.EphemerisMsgReader_swiginit(self, _EphemerisMsgPayload.new_EphemerisMsgReader(*args))

    def __call__(self):
        return _EphemerisMsgPayload.EphemerisMsgReader___call__(self)

    def isLinked(self):
        return _EphemerisMsgPayload.EphemerisMsgReader_isLinked(self)

    def isWritten(self):
        return _EphemerisMsgPayload.EphemerisMsgReader_isWritten(self)

    def timeWritten(self):
        return _EphemerisMsgPayload.EphemerisMsgReader_timeWritten(self)

    def moduleID(self):
        return _EphemerisMsgPayload.EphemerisMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _EphemerisMsgPayload.EphemerisMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _EphemerisMsgPayload.EphemerisMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _EphemerisMsgPayload.EphemerisMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _EphemerisMsgPayload.EphemerisMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _EphemerisMsgPayload.EphemerisMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _EphemerisMsgPayload.EphemerisMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _EphemerisMsgPayload.EphemerisMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _EphemerisMsgPayload.EphemerisMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _EphemerisMsgPayload.EphemerisMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _EphemerisMsgPayload.EphemerisMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == EphemerisMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.EphemerisMsgPayload import EphemerisMsg_C
            if type(source) == EphemerisMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<EphemerisMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == EphemerisMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.EphemerisMsgPayload import EphemerisMsg_C
        except ImportError:
            return 0

        if type(source) == EphemerisMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _EphemerisMsgPayload.delete_EphemerisMsgReader

# Register EphemerisMsgReader in _EphemerisMsgPayload:
_EphemerisMsgPayload.EphemerisMsgReader_swigregister(EphemerisMsgReader)
class EphemerisMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _EphemerisMsgPayload.EphemerisMsgWriter_swiginit(self, _EphemerisMsgPayload.new_EphemerisMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _EphemerisMsgPayload.EphemerisMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _EphemerisMsgPayload.delete_EphemerisMsgWriter

# Register EphemerisMsgWriter in _EphemerisMsgPayload:
_EphemerisMsgPayload.EphemerisMsgWriter_swigregister(EphemerisMsgWriter)
class EphemerisMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_EphemerisMsgPayload.EphemerisMsg_write_get, _EphemerisMsgPayload.EphemerisMsg_write_set)

    def addSubscriber(self):
        return _EphemerisMsgPayload.EphemerisMsg_addSubscriber(self)

    def addAuthor(self):
        return _EphemerisMsgPayload.EphemerisMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _EphemerisMsgPayload.EphemerisMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _EphemerisMsgPayload.EphemerisMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _EphemerisMsgPayload.EphemerisMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_EphemerisMsgPayload.EphemerisMsg_zeroMsgPayload_get, _EphemerisMsgPayload.EphemerisMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _EphemerisMsgPayload.EphemerisMsg_isLinked(self)

    def getPayloadSize(self):
        return _EphemerisMsgPayload.EphemerisMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _EphemerisMsgPayload.EphemerisMsg_swiginit(self, _EphemerisMsgPayload.new_EphemerisMsg())
    __swig_destroy__ = _EphemerisMsgPayload.delete_EphemerisMsg

# Register EphemerisMsg in _EphemerisMsgPayload:
_EphemerisMsgPayload.EphemerisMsg_swigregister(EphemerisMsg)
class EphemerisMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _EphemerisMsgPayload.EphemerisMsgRecorder_swiginit(self, _EphemerisMsgPayload.new_EphemerisMsgRecorder(*args))
    __swig_destroy__ = _EphemerisMsgPayload.delete_EphemerisMsgRecorder

    def SelfInit(self):
        return _EphemerisMsgPayload.EphemerisMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _EphemerisMsgPayload.EphemerisMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _EphemerisMsgPayload.EphemerisMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _EphemerisMsgPayload.EphemerisMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _EphemerisMsgPayload.EphemerisMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _EphemerisMsgPayload.EphemerisMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _EphemerisMsgPayload.EphemerisMsgRecorder___record_vector(self)

    def size(self):
        return _EphemerisMsgPayload.EphemerisMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _EphemerisMsgPayload.EphemerisMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _EphemerisMsgPayload.EphemerisMsgRecorder_clear(self)
    bskLogger = property(_EphemerisMsgPayload.EphemerisMsgRecorder_bskLogger_get, _EphemerisMsgPayload.EphemerisMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _EphemerisMsgPayload.EphemerisMsgRecorder_updateTimeInterval(self, timeDiff)

    def _r_BdyZero_N_array(self):
        return _EphemerisMsgPayload.EphemerisMsgRecorder__r_BdyZero_N_array(self)

    @property
    def r_BdyZero_N(self):
        return self._r_BdyZero_N_array()


    def _v_BdyZero_N_array(self):
        return _EphemerisMsgPayload.EphemerisMsgRecorder__v_BdyZero_N_array(self)

    @property
    def v_BdyZero_N(self):
        return self._v_BdyZero_N_array()


    def _sigma_BN_array(self):
        return _EphemerisMsgPayload.EphemerisMsgRecorder__sigma_BN_array(self)

    @property
    def sigma_BN(self):
        return self._sigma_BN_array()


    def _omega_BN_B_array(self):
        return _EphemerisMsgPayload.EphemerisMsgRecorder__omega_BN_B_array(self)

    @property
    def omega_BN_B(self):
        return self._omega_BN_B_array()


    def _timeTag_array(self):
        return _EphemerisMsgPayload.EphemerisMsgRecorder__timeTag_array(self)

    @property
    def timeTag(self):
        return self._timeTag_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register EphemerisMsgRecorder in _EphemerisMsgPayload:
_EphemerisMsgPayload.EphemerisMsgRecorder_swigregister(EphemerisMsgRecorder)
class EphemerisMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _EphemerisMsgPayload.EphemerisMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _EphemerisMsgPayload.EphemerisMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _EphemerisMsgPayload.EphemerisMsgPayloadVector___bool__(self)

    def __len__(self):
        return _EphemerisMsgPayload.EphemerisMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _EphemerisMsgPayload.EphemerisMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _EphemerisMsgPayload.EphemerisMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _EphemerisMsgPayload.EphemerisMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _EphemerisMsgPayload.EphemerisMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _EphemerisMsgPayload.EphemerisMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _EphemerisMsgPayload.EphemerisMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _EphemerisMsgPayload.EphemerisMsgPayloadVector_pop(self)

    def append(self, x):
        return _EphemerisMsgPayload.EphemerisMsgPayloadVector_append(self, x)

    def empty(self):
        return _EphemerisMsgPayload.EphemerisMsgPayloadVector_empty(self)

    def size(self):
        return _EphemerisMsgPayload.EphemerisMsgPayloadVector_size(self)

    def swap(self, v):
        return _EphemerisMsgPayload.EphemerisMsgPayloadVector_swap(self, v)

    def begin(self):
        return _EphemerisMsgPayload.EphemerisMsgPayloadVector_begin(self)

    def end(self):
        return _EphemerisMsgPayload.EphemerisMsgPayloadVector_end(self)

    def rbegin(self):
        return _EphemerisMsgPayload.EphemerisMsgPayloadVector_rbegin(self)

    def rend(self):
        return _EphemerisMsgPayload.EphemerisMsgPayloadVector_rend(self)

    def clear(self):
        return _EphemerisMsgPayload.EphemerisMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _EphemerisMsgPayload.EphemerisMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _EphemerisMsgPayload.EphemerisMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _EphemerisMsgPayload.EphemerisMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _EphemerisMsgPayload.EphemerisMsgPayloadVector_swiginit(self, _EphemerisMsgPayload.new_EphemerisMsgPayloadVector(*args))

    def push_back(self, x):
        return _EphemerisMsgPayload.EphemerisMsgPayloadVector_push_back(self, x)

    def front(self):
        return _EphemerisMsgPayload.EphemerisMsgPayloadVector_front(self)

    def back(self):
        return _EphemerisMsgPayload.EphemerisMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _EphemerisMsgPayload.EphemerisMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _EphemerisMsgPayload.EphemerisMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _EphemerisMsgPayload.EphemerisMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _EphemerisMsgPayload.EphemerisMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _EphemerisMsgPayload.EphemerisMsgPayloadVector_capacity(self)

    def get_all(self):
        return _EphemerisMsgPayload.EphemerisMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _EphemerisMsgPayload.delete_EphemerisMsgPayloadVector

# Register EphemerisMsgPayloadVector in _EphemerisMsgPayload:
_EphemerisMsgPayload.EphemerisMsgPayloadVector_swigregister(EphemerisMsgPayloadVector)
class EphemerisMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsVector_empty(self)

    def size(self):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsVector_begin(self)

    def end(self):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsVector_rend(self)

    def clear(self):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _EphemerisMsgPayload.EphemerisMsgOutMsgsVector_swiginit(self, _EphemerisMsgPayload.new_EphemerisMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsVector_front(self)

    def back(self):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _EphemerisMsgPayload.delete_EphemerisMsgOutMsgsVector

# Register EphemerisMsgOutMsgsVector in _EphemerisMsgPayload:
_EphemerisMsgPayload.EphemerisMsgOutMsgsVector_swigregister(EphemerisMsgOutMsgsVector)
class EphemerisMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _EphemerisMsgPayload.EphemerisMsgOutMsgsPtrVector_swiginit(self, _EphemerisMsgPayload.new_EphemerisMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _EphemerisMsgPayload.EphemerisMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _EphemerisMsgPayload.delete_EphemerisMsgOutMsgsPtrVector

# Register EphemerisMsgOutMsgsPtrVector in _EphemerisMsgPayload:
_EphemerisMsgPayload.EphemerisMsgOutMsgsPtrVector_swigregister(EphemerisMsgOutMsgsPtrVector)
class EphemerisMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _EphemerisMsgPayload.EphemerisMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _EphemerisMsgPayload.EphemerisMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _EphemerisMsgPayload.EphemerisMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _EphemerisMsgPayload.EphemerisMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _EphemerisMsgPayload.EphemerisMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _EphemerisMsgPayload.EphemerisMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _EphemerisMsgPayload.EphemerisMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _EphemerisMsgPayload.EphemerisMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _EphemerisMsgPayload.EphemerisMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _EphemerisMsgPayload.EphemerisMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _EphemerisMsgPayload.EphemerisMsgInMsgsVector_pop(self)

    def append(self, x):
        return _EphemerisMsgPayload.EphemerisMsgInMsgsVector_append(self, x)

    def empty(self):
        return _EphemerisMsgPayload.EphemerisMsgInMsgsVector_empty(self)

    def size(self):
        return _EphemerisMsgPayload.EphemerisMsgInMsgsVector_size(self)

    def swap(self, v):
        return _EphemerisMsgPayload.EphemerisMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _EphemerisMsgPayload.EphemerisMsgInMsgsVector_begin(self)

    def end(self):
        return _EphemerisMsgPayload.EphemerisMsgInMsgsVector_end(self)

    def rbegin(self):
        return _EphemerisMsgPayload.EphemerisMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _EphemerisMsgPayload.EphemerisMsgInMsgsVector_rend(self)

    def clear(self):
        return _EphemerisMsgPayload.EphemerisMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _EphemerisMsgPayload.EphemerisMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _EphemerisMsgPayload.EphemerisMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _EphemerisMsgPayload.EphemerisMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _EphemerisMsgPayload.EphemerisMsgInMsgsVector_swiginit(self, _EphemerisMsgPayload.new_EphemerisMsgInMsgsVector(*args))

    def push_back(self, x):
        return _EphemerisMsgPayload.EphemerisMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _EphemerisMsgPayload.EphemerisMsgInMsgsVector_front(self)

    def back(self):
        return _EphemerisMsgPayload.EphemerisMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _EphemerisMsgPayload.EphemerisMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _EphemerisMsgPayload.EphemerisMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _EphemerisMsgPayload.EphemerisMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _EphemerisMsgPayload.EphemerisMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _EphemerisMsgPayload.EphemerisMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _EphemerisMsgPayload.delete_EphemerisMsgInMsgsVector

# Register EphemerisMsgInMsgsVector in _EphemerisMsgPayload:
_EphemerisMsgPayload.EphemerisMsgInMsgsVector_swigregister(EphemerisMsgInMsgsVector)
class EphemerisMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_EphemerisMsgPayload.EphemerisMsg_C_header_get, _EphemerisMsgPayload.EphemerisMsg_C_header_set)
    payload = property(_EphemerisMsgPayload.EphemerisMsg_C_payload_get, _EphemerisMsgPayload.EphemerisMsg_C_payload_set)
    payloadPointer = property(_EphemerisMsgPayload.EphemerisMsg_C_payloadPointer_get, _EphemerisMsgPayload.EphemerisMsg_C_payloadPointer_set)
    headerPointer = property(_EphemerisMsgPayload.EphemerisMsg_C_headerPointer_get, _EphemerisMsgPayload.EphemerisMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _EphemerisMsgPayload.EphemerisMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import EphemerisMsg
        if type(source) == type(self):
            EphemerisMsg_C_subscribe(self, source)
        elif type(source) == EphemerisMsg:
            EphemerisMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            EphemerisMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe EphemerisMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        EphemerisMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import EphemerisMsg
        if type(source) == type(self):
            return (EphemerisMsg_C_isSubscribedTo(self, source))
        elif type(source) == EphemerisMsg:
            return (EphemerisMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (EphemerisMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        EphemerisMsg_C_addAuthor(self, self)
        if data:
            EphemerisMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        EphemerisMsg_C_addAuthor(self, self)
        EphemerisMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return EphemerisMsg_C_read(self)


    def __init__(self):
        _EphemerisMsgPayload.EphemerisMsg_C_swiginit(self, _EphemerisMsgPayload.new_EphemerisMsg_C())
    __swig_destroy__ = _EphemerisMsgPayload.delete_EphemerisMsg_C

# Register EphemerisMsg_C in _EphemerisMsgPayload:
_EphemerisMsgPayload.EphemerisMsg_C_swigregister(EphemerisMsg_C)

def EphemerisMsg_cpp_subscribe(subscriber, source):
    return _EphemerisMsgPayload.EphemerisMsg_cpp_subscribe(subscriber, source)

def EphemerisMsg_C_subscribe(subscriber, source):
    return _EphemerisMsgPayload.EphemerisMsg_C_subscribe(subscriber, source)

def EphemerisMsg_addr_subscribe(subscriber, sourceAddr):
    return _EphemerisMsgPayload.EphemerisMsg_addr_subscribe(subscriber, sourceAddr)

def EphemerisMsg_unsubscribe(subscriber):
    return _EphemerisMsgPayload.EphemerisMsg_unsubscribe(subscriber)

def EphemerisMsg_C_isSubscribedTo(subscriber, source):
    return _EphemerisMsgPayload.EphemerisMsg_C_isSubscribedTo(subscriber, source)

def EphemerisMsg_cpp_isSubscribedTo(subscriber, source):
    return _EphemerisMsgPayload.EphemerisMsg_cpp_isSubscribedTo(subscriber, source)

def EphemerisMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _EphemerisMsgPayload.EphemerisMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def EphemerisMsg_C_addAuthor(coowner, data):
    return _EphemerisMsgPayload.EphemerisMsg_C_addAuthor(coowner, data)

def EphemerisMsg_C_init(owner):
    return _EphemerisMsgPayload.EphemerisMsg_C_init(owner)

def EphemerisMsg_C_isLinked(data):
    return _EphemerisMsgPayload.EphemerisMsg_C_isLinked(data)

def EphemerisMsg_C_isWritten(data):
    return _EphemerisMsgPayload.EphemerisMsg_C_isWritten(data)

def EphemerisMsg_C_timeWritten(data):
    return _EphemerisMsgPayload.EphemerisMsg_C_timeWritten(data)

def EphemerisMsg_C_moduleID(data):
    return _EphemerisMsgPayload.EphemerisMsg_C_moduleID(data)

def EphemerisMsg_C_write(data, destination, moduleID, callTime):
    return _EphemerisMsgPayload.EphemerisMsg_C_write(data, destination, moduleID, callTime)

def EphemerisMsg_C_read(source):
    return _EphemerisMsgPayload.EphemerisMsg_C_read(source)

def EphemerisMsg_C_zeroMsgPayload():
    return _EphemerisMsgPayload.EphemerisMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_EphemerisMsgPayload.MsgHeader_isLinked_get, _EphemerisMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_EphemerisMsgPayload.MsgHeader_isWritten_get, _EphemerisMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_EphemerisMsgPayload.MsgHeader_timeWritten_get, _EphemerisMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_EphemerisMsgPayload.MsgHeader_moduleID_get, _EphemerisMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _EphemerisMsgPayload.MsgHeader_swiginit(self, _EphemerisMsgPayload.new_MsgHeader())
    __swig_destroy__ = _EphemerisMsgPayload.delete_MsgHeader

# Register MsgHeader in _EphemerisMsgPayload:
_EphemerisMsgPayload.MsgHeader_swigregister(MsgHeader)

