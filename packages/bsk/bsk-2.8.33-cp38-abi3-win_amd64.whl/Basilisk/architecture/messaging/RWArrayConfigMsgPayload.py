# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _RWArrayConfigMsgPayload
else:
    import _RWArrayConfigMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RWArrayConfigMsgPayload.delete_SwigPyIterator

    def value(self):
        return _RWArrayConfigMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _RWArrayConfigMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _RWArrayConfigMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _RWArrayConfigMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _RWArrayConfigMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _RWArrayConfigMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _RWArrayConfigMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _RWArrayConfigMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _RWArrayConfigMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _RWArrayConfigMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _RWArrayConfigMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _RWArrayConfigMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _RWArrayConfigMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _RWArrayConfigMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _RWArrayConfigMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _RWArrayConfigMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _RWArrayConfigMsgPayload:
_RWArrayConfigMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _RWArrayConfigMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _RWArrayConfigMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _RWArrayConfigMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _RWArrayConfigMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _RWArrayConfigMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _RWArrayConfigMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _RWArrayConfigMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _RWArrayConfigMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _RWArrayConfigMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _RWArrayConfigMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _RWArrayConfigMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _RWArrayConfigMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _RWArrayConfigMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _RWArrayConfigMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _RWArrayConfigMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _RWArrayConfigMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWArrayConfigMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWArrayConfigMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _RWArrayConfigMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _RWArrayConfigMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _RWArrayConfigMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWArrayConfigMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWArrayConfigMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWArrayConfigMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWArrayConfigMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWArrayConfigMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _RWArrayConfigMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _RWArrayConfigMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _RWArrayConfigMsgPayload.TimeVector_empty(self)

    def size(self):
        return _RWArrayConfigMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _RWArrayConfigMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _RWArrayConfigMsgPayload.TimeVector_begin(self)

    def end(self):
        return _RWArrayConfigMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _RWArrayConfigMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _RWArrayConfigMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _RWArrayConfigMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _RWArrayConfigMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _RWArrayConfigMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _RWArrayConfigMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _RWArrayConfigMsgPayload.TimeVector_swiginit(self, _RWArrayConfigMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _RWArrayConfigMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _RWArrayConfigMsgPayload.TimeVector_front(self)

    def back(self):
        return _RWArrayConfigMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _RWArrayConfigMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _RWArrayConfigMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _RWArrayConfigMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _RWArrayConfigMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _RWArrayConfigMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _RWArrayConfigMsgPayload.delete_TimeVector

# Register TimeVector in _RWArrayConfigMsgPayload:
_RWArrayConfigMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWArrayConfigMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWArrayConfigMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _RWArrayConfigMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _RWArrayConfigMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _RWArrayConfigMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWArrayConfigMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWArrayConfigMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWArrayConfigMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWArrayConfigMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWArrayConfigMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _RWArrayConfigMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _RWArrayConfigMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _RWArrayConfigMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _RWArrayConfigMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _RWArrayConfigMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _RWArrayConfigMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _RWArrayConfigMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _RWArrayConfigMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _RWArrayConfigMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _RWArrayConfigMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _RWArrayConfigMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _RWArrayConfigMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _RWArrayConfigMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _RWArrayConfigMsgPayload.DoubleVector_swiginit(self, _RWArrayConfigMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _RWArrayConfigMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _RWArrayConfigMsgPayload.DoubleVector_front(self)

    def back(self):
        return _RWArrayConfigMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _RWArrayConfigMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _RWArrayConfigMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _RWArrayConfigMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _RWArrayConfigMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _RWArrayConfigMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _RWArrayConfigMsgPayload.delete_DoubleVector

# Register DoubleVector in _RWArrayConfigMsgPayload:
_RWArrayConfigMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWArrayConfigMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWArrayConfigMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _RWArrayConfigMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _RWArrayConfigMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _RWArrayConfigMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWArrayConfigMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWArrayConfigMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWArrayConfigMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWArrayConfigMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWArrayConfigMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _RWArrayConfigMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _RWArrayConfigMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _RWArrayConfigMsgPayload.StringVector_empty(self)

    def size(self):
        return _RWArrayConfigMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _RWArrayConfigMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _RWArrayConfigMsgPayload.StringVector_begin(self)

    def end(self):
        return _RWArrayConfigMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _RWArrayConfigMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _RWArrayConfigMsgPayload.StringVector_rend(self)

    def clear(self):
        return _RWArrayConfigMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _RWArrayConfigMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _RWArrayConfigMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _RWArrayConfigMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _RWArrayConfigMsgPayload.StringVector_swiginit(self, _RWArrayConfigMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _RWArrayConfigMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _RWArrayConfigMsgPayload.StringVector_front(self)

    def back(self):
        return _RWArrayConfigMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _RWArrayConfigMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _RWArrayConfigMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _RWArrayConfigMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _RWArrayConfigMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _RWArrayConfigMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _RWArrayConfigMsgPayload.delete_StringVector

# Register StringVector in _RWArrayConfigMsgPayload:
_RWArrayConfigMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _RWArrayConfigMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _RWArrayConfigMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _RWArrayConfigMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _RWArrayConfigMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _RWArrayConfigMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _RWArrayConfigMsgPayload.NANO2SEC
SEC2NANO = _RWArrayConfigMsgPayload.SEC2NANO
SEC2HOUR = _RWArrayConfigMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _RWArrayConfigMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _RWArrayConfigMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _RWArrayConfigMsgPayload.secToNano(seconds)
BOOL_FALSE = _RWArrayConfigMsgPayload.BOOL_FALSE
BOOL_TRUE = _RWArrayConfigMsgPayload.BOOL_TRUE
AVAILABLE = _RWArrayConfigMsgPayload.AVAILABLE
UNAVAILABLE = _RWArrayConfigMsgPayload.UNAVAILABLE
BalancedWheels = _RWArrayConfigMsgPayload.BalancedWheels
JitterSimple = _RWArrayConfigMsgPayload.JitterSimple
JitterFullyCoupled = _RWArrayConfigMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RWArrayConfigMsgPayload.SysModel_swiginit(self, _RWArrayConfigMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _RWArrayConfigMsgPayload.delete_SysModel

    def SelfInit(self):
        return _RWArrayConfigMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _RWArrayConfigMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _RWArrayConfigMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _RWArrayConfigMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_RWArrayConfigMsgPayload.SysModel_ModelTag_get, _RWArrayConfigMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_RWArrayConfigMsgPayload.SysModel_CallCounts_get, _RWArrayConfigMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_RWArrayConfigMsgPayload.SysModel_RNGSeed_get, _RWArrayConfigMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_RWArrayConfigMsgPayload.SysModel_moduleID_get, _RWArrayConfigMsgPayload.SysModel_moduleID_set)

# Register SysModel in _RWArrayConfigMsgPayload:
_RWArrayConfigMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _RWArrayConfigMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _RWArrayConfigMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _RWArrayConfigMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _RWArrayConfigMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _RWArrayConfigMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _RWArrayConfigMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _RWArrayConfigMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _RWArrayConfigMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _RWArrayConfigMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _RWArrayConfigMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _RWArrayConfigMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _RWArrayConfigMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class RWArrayConfigMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GsMatrix_B = property(_RWArrayConfigMsgPayload.RWArrayConfigMsgPayload_GsMatrix_B_get, _RWArrayConfigMsgPayload.RWArrayConfigMsgPayload_GsMatrix_B_set)
    JsList = property(_RWArrayConfigMsgPayload.RWArrayConfigMsgPayload_JsList_get, _RWArrayConfigMsgPayload.RWArrayConfigMsgPayload_JsList_set)
    numRW = property(_RWArrayConfigMsgPayload.RWArrayConfigMsgPayload_numRW_get, _RWArrayConfigMsgPayload.RWArrayConfigMsgPayload_numRW_set)
    uMax = property(_RWArrayConfigMsgPayload.RWArrayConfigMsgPayload_uMax_get, _RWArrayConfigMsgPayload.RWArrayConfigMsgPayload_uMax_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _RWArrayConfigMsgPayload.RWArrayConfigMsgPayload_swiginit(self, _RWArrayConfigMsgPayload.new_RWArrayConfigMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _RWArrayConfigMsgPayload.delete_RWArrayConfigMsgPayload

# Register RWArrayConfigMsgPayload in _RWArrayConfigMsgPayload:
_RWArrayConfigMsgPayload.RWArrayConfigMsgPayload_swigregister(RWArrayConfigMsgPayload)

def _pprint_RWArrayConfigMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[RWArrayConfigMsgPayload.__repr__] = _pprint_RWArrayConfigMsgPayload

class RWArrayConfigMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_RWArrayConfigMsgPayload.RWArrayConfigMsgReader_bskLogger_get, _RWArrayConfigMsgPayload.RWArrayConfigMsgReader_bskLogger_set)
    zeroMsgPayload = property(_RWArrayConfigMsgPayload.RWArrayConfigMsgReader_zeroMsgPayload_get, _RWArrayConfigMsgPayload.RWArrayConfigMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _RWArrayConfigMsgPayload.RWArrayConfigMsgReader_swiginit(self, _RWArrayConfigMsgPayload.new_RWArrayConfigMsgReader(*args))

    def __call__(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgReader___call__(self)

    def isLinked(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgReader_isLinked(self)

    def isWritten(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgReader_isWritten(self)

    def timeWritten(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgReader_timeWritten(self)

    def moduleID(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == RWArrayConfigMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.RWArrayConfigMsgPayload import RWArrayConfigMsg_C
            if type(source) == RWArrayConfigMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<RWArrayConfigMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == RWArrayConfigMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.RWArrayConfigMsgPayload import RWArrayConfigMsg_C
        except ImportError:
            return 0

        if type(source) == RWArrayConfigMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _RWArrayConfigMsgPayload.delete_RWArrayConfigMsgReader

# Register RWArrayConfigMsgReader in _RWArrayConfigMsgPayload:
_RWArrayConfigMsgPayload.RWArrayConfigMsgReader_swigregister(RWArrayConfigMsgReader)
class RWArrayConfigMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RWArrayConfigMsgPayload.RWArrayConfigMsgWriter_swiginit(self, _RWArrayConfigMsgPayload.new_RWArrayConfigMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _RWArrayConfigMsgPayload.delete_RWArrayConfigMsgWriter

# Register RWArrayConfigMsgWriter in _RWArrayConfigMsgPayload:
_RWArrayConfigMsgPayload.RWArrayConfigMsgWriter_swigregister(RWArrayConfigMsgWriter)
class RWArrayConfigMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_RWArrayConfigMsgPayload.RWArrayConfigMsg_write_get, _RWArrayConfigMsgPayload.RWArrayConfigMsg_write_set)

    def addSubscriber(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsg_addSubscriber(self)

    def addAuthor(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_RWArrayConfigMsgPayload.RWArrayConfigMsg_zeroMsgPayload_get, _RWArrayConfigMsgPayload.RWArrayConfigMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsg_isLinked(self)

    def getPayloadSize(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _RWArrayConfigMsgPayload.RWArrayConfigMsg_swiginit(self, _RWArrayConfigMsgPayload.new_RWArrayConfigMsg())
    __swig_destroy__ = _RWArrayConfigMsgPayload.delete_RWArrayConfigMsg

# Register RWArrayConfigMsg in _RWArrayConfigMsgPayload:
_RWArrayConfigMsgPayload.RWArrayConfigMsg_swigregister(RWArrayConfigMsg)
class RWArrayConfigMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RWArrayConfigMsgPayload.RWArrayConfigMsgRecorder_swiginit(self, _RWArrayConfigMsgPayload.new_RWArrayConfigMsgRecorder(*args))
    __swig_destroy__ = _RWArrayConfigMsgPayload.delete_RWArrayConfigMsgRecorder

    def SelfInit(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgRecorder___record_vector(self)

    def size(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgRecorder_clear(self)
    bskLogger = property(_RWArrayConfigMsgPayload.RWArrayConfigMsgRecorder_bskLogger_get, _RWArrayConfigMsgPayload.RWArrayConfigMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgRecorder_updateTimeInterval(self, timeDiff)

    def _GsMatrix_B_array(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgRecorder__GsMatrix_B_array(self)

    @property
    def GsMatrix_B(self):
        return self._GsMatrix_B_array()


    def _JsList_array(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgRecorder__JsList_array(self)

    @property
    def JsList(self):
        return self._JsList_array()


    def _numRW_array(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgRecorder__numRW_array(self)

    @property
    def numRW(self):
        return self._numRW_array()


    def _uMax_array(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgRecorder__uMax_array(self)

    @property
    def uMax(self):
        return self._uMax_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register RWArrayConfigMsgRecorder in _RWArrayConfigMsgPayload:
_RWArrayConfigMsgPayload.RWArrayConfigMsgRecorder_swigregister(RWArrayConfigMsgRecorder)
class RWArrayConfigMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgPayloadVector___bool__(self)

    def __len__(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgPayloadVector_pop(self)

    def append(self, x):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgPayloadVector_append(self, x)

    def empty(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgPayloadVector_empty(self)

    def size(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgPayloadVector_size(self)

    def swap(self, v):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgPayloadVector_swap(self, v)

    def begin(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgPayloadVector_begin(self)

    def end(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgPayloadVector_end(self)

    def rbegin(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgPayloadVector_rbegin(self)

    def rend(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgPayloadVector_rend(self)

    def clear(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _RWArrayConfigMsgPayload.RWArrayConfigMsgPayloadVector_swiginit(self, _RWArrayConfigMsgPayload.new_RWArrayConfigMsgPayloadVector(*args))

    def push_back(self, x):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgPayloadVector_push_back(self, x)

    def front(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgPayloadVector_front(self)

    def back(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgPayloadVector_capacity(self)

    def get_all(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _RWArrayConfigMsgPayload.delete_RWArrayConfigMsgPayloadVector

# Register RWArrayConfigMsgPayloadVector in _RWArrayConfigMsgPayload:
_RWArrayConfigMsgPayload.RWArrayConfigMsgPayloadVector_swigregister(RWArrayConfigMsgPayloadVector)
class RWArrayConfigMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsVector_empty(self)

    def size(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsVector_begin(self)

    def end(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsVector_rend(self)

    def clear(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsVector_swiginit(self, _RWArrayConfigMsgPayload.new_RWArrayConfigMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsVector_front(self)

    def back(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _RWArrayConfigMsgPayload.delete_RWArrayConfigMsgOutMsgsVector

# Register RWArrayConfigMsgOutMsgsVector in _RWArrayConfigMsgPayload:
_RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsVector_swigregister(RWArrayConfigMsgOutMsgsVector)
class RWArrayConfigMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsPtrVector_swiginit(self, _RWArrayConfigMsgPayload.new_RWArrayConfigMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _RWArrayConfigMsgPayload.delete_RWArrayConfigMsgOutMsgsPtrVector

# Register RWArrayConfigMsgOutMsgsPtrVector in _RWArrayConfigMsgPayload:
_RWArrayConfigMsgPayload.RWArrayConfigMsgOutMsgsPtrVector_swigregister(RWArrayConfigMsgOutMsgsPtrVector)
class RWArrayConfigMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgInMsgsVector_pop(self)

    def append(self, x):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgInMsgsVector_append(self, x)

    def empty(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgInMsgsVector_empty(self)

    def size(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgInMsgsVector_size(self)

    def swap(self, v):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgInMsgsVector_begin(self)

    def end(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgInMsgsVector_end(self)

    def rbegin(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgInMsgsVector_rend(self)

    def clear(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _RWArrayConfigMsgPayload.RWArrayConfigMsgInMsgsVector_swiginit(self, _RWArrayConfigMsgPayload.new_RWArrayConfigMsgInMsgsVector(*args))

    def push_back(self, x):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgInMsgsVector_front(self)

    def back(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _RWArrayConfigMsgPayload.delete_RWArrayConfigMsgInMsgsVector

# Register RWArrayConfigMsgInMsgsVector in _RWArrayConfigMsgPayload:
_RWArrayConfigMsgPayload.RWArrayConfigMsgInMsgsVector_swigregister(RWArrayConfigMsgInMsgsVector)
class RWArrayConfigMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_RWArrayConfigMsgPayload.RWArrayConfigMsg_C_header_get, _RWArrayConfigMsgPayload.RWArrayConfigMsg_C_header_set)
    payload = property(_RWArrayConfigMsgPayload.RWArrayConfigMsg_C_payload_get, _RWArrayConfigMsgPayload.RWArrayConfigMsg_C_payload_set)
    payloadPointer = property(_RWArrayConfigMsgPayload.RWArrayConfigMsg_C_payloadPointer_get, _RWArrayConfigMsgPayload.RWArrayConfigMsg_C_payloadPointer_set)
    headerPointer = property(_RWArrayConfigMsgPayload.RWArrayConfigMsg_C_headerPointer_get, _RWArrayConfigMsgPayload.RWArrayConfigMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _RWArrayConfigMsgPayload.RWArrayConfigMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import RWArrayConfigMsg
        if type(source) == type(self):
            RWArrayConfigMsg_C_subscribe(self, source)
        elif type(source) == RWArrayConfigMsg:
            RWArrayConfigMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            RWArrayConfigMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe RWArrayConfigMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        RWArrayConfigMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import RWArrayConfigMsg
        if type(source) == type(self):
            return (RWArrayConfigMsg_C_isSubscribedTo(self, source))
        elif type(source) == RWArrayConfigMsg:
            return (RWArrayConfigMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (RWArrayConfigMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        RWArrayConfigMsg_C_addAuthor(self, self)
        if data:
            RWArrayConfigMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        RWArrayConfigMsg_C_addAuthor(self, self)
        RWArrayConfigMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return RWArrayConfigMsg_C_read(self)


    def __init__(self):
        _RWArrayConfigMsgPayload.RWArrayConfigMsg_C_swiginit(self, _RWArrayConfigMsgPayload.new_RWArrayConfigMsg_C())
    __swig_destroy__ = _RWArrayConfigMsgPayload.delete_RWArrayConfigMsg_C

# Register RWArrayConfigMsg_C in _RWArrayConfigMsgPayload:
_RWArrayConfigMsgPayload.RWArrayConfigMsg_C_swigregister(RWArrayConfigMsg_C)

def RWArrayConfigMsg_cpp_subscribe(subscriber, source):
    return _RWArrayConfigMsgPayload.RWArrayConfigMsg_cpp_subscribe(subscriber, source)

def RWArrayConfigMsg_C_subscribe(subscriber, source):
    return _RWArrayConfigMsgPayload.RWArrayConfigMsg_C_subscribe(subscriber, source)

def RWArrayConfigMsg_addr_subscribe(subscriber, sourceAddr):
    return _RWArrayConfigMsgPayload.RWArrayConfigMsg_addr_subscribe(subscriber, sourceAddr)

def RWArrayConfigMsg_unsubscribe(subscriber):
    return _RWArrayConfigMsgPayload.RWArrayConfigMsg_unsubscribe(subscriber)

def RWArrayConfigMsg_C_isSubscribedTo(subscriber, source):
    return _RWArrayConfigMsgPayload.RWArrayConfigMsg_C_isSubscribedTo(subscriber, source)

def RWArrayConfigMsg_cpp_isSubscribedTo(subscriber, source):
    return _RWArrayConfigMsgPayload.RWArrayConfigMsg_cpp_isSubscribedTo(subscriber, source)

def RWArrayConfigMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _RWArrayConfigMsgPayload.RWArrayConfigMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def RWArrayConfigMsg_C_addAuthor(coowner, data):
    return _RWArrayConfigMsgPayload.RWArrayConfigMsg_C_addAuthor(coowner, data)

def RWArrayConfigMsg_C_init(owner):
    return _RWArrayConfigMsgPayload.RWArrayConfigMsg_C_init(owner)

def RWArrayConfigMsg_C_isLinked(data):
    return _RWArrayConfigMsgPayload.RWArrayConfigMsg_C_isLinked(data)

def RWArrayConfigMsg_C_isWritten(data):
    return _RWArrayConfigMsgPayload.RWArrayConfigMsg_C_isWritten(data)

def RWArrayConfigMsg_C_timeWritten(data):
    return _RWArrayConfigMsgPayload.RWArrayConfigMsg_C_timeWritten(data)

def RWArrayConfigMsg_C_moduleID(data):
    return _RWArrayConfigMsgPayload.RWArrayConfigMsg_C_moduleID(data)

def RWArrayConfigMsg_C_write(data, destination, moduleID, callTime):
    return _RWArrayConfigMsgPayload.RWArrayConfigMsg_C_write(data, destination, moduleID, callTime)

def RWArrayConfigMsg_C_read(source):
    return _RWArrayConfigMsgPayload.RWArrayConfigMsg_C_read(source)

def RWArrayConfigMsg_C_zeroMsgPayload():
    return _RWArrayConfigMsgPayload.RWArrayConfigMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_RWArrayConfigMsgPayload.MsgHeader_isLinked_get, _RWArrayConfigMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_RWArrayConfigMsgPayload.MsgHeader_isWritten_get, _RWArrayConfigMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_RWArrayConfigMsgPayload.MsgHeader_timeWritten_get, _RWArrayConfigMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_RWArrayConfigMsgPayload.MsgHeader_moduleID_get, _RWArrayConfigMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _RWArrayConfigMsgPayload.MsgHeader_swiginit(self, _RWArrayConfigMsgPayload.new_MsgHeader())
    __swig_destroy__ = _RWArrayConfigMsgPayload.delete_MsgHeader

# Register MsgHeader in _RWArrayConfigMsgPayload:
_RWArrayConfigMsgPayload.MsgHeader_swigregister(MsgHeader)

