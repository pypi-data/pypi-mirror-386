# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _SmallBodyNavUKFMsgPayload
else:
    import _SmallBodyNavUKFMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SmallBodyNavUKFMsgPayload.delete_SwigPyIterator

    def value(self):
        return _SmallBodyNavUKFMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _SmallBodyNavUKFMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _SmallBodyNavUKFMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _SmallBodyNavUKFMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _SmallBodyNavUKFMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _SmallBodyNavUKFMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _SmallBodyNavUKFMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _SmallBodyNavUKFMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _SmallBodyNavUKFMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _SmallBodyNavUKFMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _SmallBodyNavUKFMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _SmallBodyNavUKFMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _SmallBodyNavUKFMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _SmallBodyNavUKFMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _SmallBodyNavUKFMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _SmallBodyNavUKFMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _SmallBodyNavUKFMsgPayload:
_SmallBodyNavUKFMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _SmallBodyNavUKFMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _SmallBodyNavUKFMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _SmallBodyNavUKFMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _SmallBodyNavUKFMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _SmallBodyNavUKFMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _SmallBodyNavUKFMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _SmallBodyNavUKFMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _SmallBodyNavUKFMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _SmallBodyNavUKFMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _SmallBodyNavUKFMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _SmallBodyNavUKFMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _SmallBodyNavUKFMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _SmallBodyNavUKFMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _SmallBodyNavUKFMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _SmallBodyNavUKFMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _SmallBodyNavUKFMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavUKFMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavUKFMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavUKFMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavUKFMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavUKFMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavUKFMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavUKFMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavUKFMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavUKFMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavUKFMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavUKFMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _SmallBodyNavUKFMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _SmallBodyNavUKFMsgPayload.TimeVector_empty(self)

    def size(self):
        return _SmallBodyNavUKFMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _SmallBodyNavUKFMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavUKFMsgPayload.TimeVector_begin(self)

    def end(self):
        return _SmallBodyNavUKFMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _SmallBodyNavUKFMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavUKFMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _SmallBodyNavUKFMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavUKFMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavUKFMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavUKFMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavUKFMsgPayload.TimeVector_swiginit(self, _SmallBodyNavUKFMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _SmallBodyNavUKFMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavUKFMsgPayload.TimeVector_front(self)

    def back(self):
        return _SmallBodyNavUKFMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavUKFMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavUKFMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavUKFMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavUKFMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavUKFMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _SmallBodyNavUKFMsgPayload.delete_TimeVector

# Register TimeVector in _SmallBodyNavUKFMsgPayload:
_SmallBodyNavUKFMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavUKFMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavUKFMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavUKFMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavUKFMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavUKFMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavUKFMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavUKFMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavUKFMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavUKFMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavUKFMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavUKFMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _SmallBodyNavUKFMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _SmallBodyNavUKFMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _SmallBodyNavUKFMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _SmallBodyNavUKFMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavUKFMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _SmallBodyNavUKFMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _SmallBodyNavUKFMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavUKFMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _SmallBodyNavUKFMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavUKFMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavUKFMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavUKFMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavUKFMsgPayload.DoubleVector_swiginit(self, _SmallBodyNavUKFMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _SmallBodyNavUKFMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavUKFMsgPayload.DoubleVector_front(self)

    def back(self):
        return _SmallBodyNavUKFMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavUKFMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavUKFMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavUKFMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavUKFMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavUKFMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _SmallBodyNavUKFMsgPayload.delete_DoubleVector

# Register DoubleVector in _SmallBodyNavUKFMsgPayload:
_SmallBodyNavUKFMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavUKFMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavUKFMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavUKFMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavUKFMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavUKFMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavUKFMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavUKFMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavUKFMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavUKFMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavUKFMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavUKFMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _SmallBodyNavUKFMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _SmallBodyNavUKFMsgPayload.StringVector_empty(self)

    def size(self):
        return _SmallBodyNavUKFMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _SmallBodyNavUKFMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavUKFMsgPayload.StringVector_begin(self)

    def end(self):
        return _SmallBodyNavUKFMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _SmallBodyNavUKFMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavUKFMsgPayload.StringVector_rend(self)

    def clear(self):
        return _SmallBodyNavUKFMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavUKFMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavUKFMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavUKFMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavUKFMsgPayload.StringVector_swiginit(self, _SmallBodyNavUKFMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _SmallBodyNavUKFMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavUKFMsgPayload.StringVector_front(self)

    def back(self):
        return _SmallBodyNavUKFMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavUKFMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavUKFMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavUKFMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavUKFMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavUKFMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _SmallBodyNavUKFMsgPayload.delete_StringVector

# Register StringVector in _SmallBodyNavUKFMsgPayload:
_SmallBodyNavUKFMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _SmallBodyNavUKFMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _SmallBodyNavUKFMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _SmallBodyNavUKFMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _SmallBodyNavUKFMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _SmallBodyNavUKFMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _SmallBodyNavUKFMsgPayload.NANO2SEC
SEC2NANO = _SmallBodyNavUKFMsgPayload.SEC2NANO
SEC2HOUR = _SmallBodyNavUKFMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _SmallBodyNavUKFMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _SmallBodyNavUKFMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _SmallBodyNavUKFMsgPayload.secToNano(seconds)
BOOL_FALSE = _SmallBodyNavUKFMsgPayload.BOOL_FALSE
BOOL_TRUE = _SmallBodyNavUKFMsgPayload.BOOL_TRUE
AVAILABLE = _SmallBodyNavUKFMsgPayload.AVAILABLE
UNAVAILABLE = _SmallBodyNavUKFMsgPayload.UNAVAILABLE
BalancedWheels = _SmallBodyNavUKFMsgPayload.BalancedWheels
JitterSimple = _SmallBodyNavUKFMsgPayload.JitterSimple
JitterFullyCoupled = _SmallBodyNavUKFMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SmallBodyNavUKFMsgPayload.SysModel_swiginit(self, _SmallBodyNavUKFMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _SmallBodyNavUKFMsgPayload.delete_SysModel

    def SelfInit(self):
        return _SmallBodyNavUKFMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _SmallBodyNavUKFMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _SmallBodyNavUKFMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _SmallBodyNavUKFMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_SmallBodyNavUKFMsgPayload.SysModel_ModelTag_get, _SmallBodyNavUKFMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_SmallBodyNavUKFMsgPayload.SysModel_CallCounts_get, _SmallBodyNavUKFMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_SmallBodyNavUKFMsgPayload.SysModel_RNGSeed_get, _SmallBodyNavUKFMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_SmallBodyNavUKFMsgPayload.SysModel_moduleID_get, _SmallBodyNavUKFMsgPayload.SysModel_moduleID_set)

# Register SysModel in _SmallBodyNavUKFMsgPayload:
_SmallBodyNavUKFMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _SmallBodyNavUKFMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _SmallBodyNavUKFMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _SmallBodyNavUKFMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _SmallBodyNavUKFMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _SmallBodyNavUKFMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _SmallBodyNavUKFMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _SmallBodyNavUKFMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _SmallBodyNavUKFMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _SmallBodyNavUKFMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _SmallBodyNavUKFMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _SmallBodyNavUKFMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _SmallBodyNavUKFMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class SmallBodyNavUKFMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    state = property(_SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayload_state_get, _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayload_state_set)
    covar = property(_SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayload_covar_get, _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayload_covar_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayload_swiginit(self, _SmallBodyNavUKFMsgPayload.new_SmallBodyNavUKFMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _SmallBodyNavUKFMsgPayload.delete_SmallBodyNavUKFMsgPayload

# Register SmallBodyNavUKFMsgPayload in _SmallBodyNavUKFMsgPayload:
_SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayload_swigregister(SmallBodyNavUKFMsgPayload)

def _pprint_SmallBodyNavUKFMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[SmallBodyNavUKFMsgPayload.__repr__] = _pprint_SmallBodyNavUKFMsgPayload

class SmallBodyNavUKFMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgReader_bskLogger_get, _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgReader_bskLogger_set)
    zeroMsgPayload = property(_SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgReader_zeroMsgPayload_get, _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgReader_swiginit(self, _SmallBodyNavUKFMsgPayload.new_SmallBodyNavUKFMsgReader(*args))

    def __call__(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgReader___call__(self)

    def isLinked(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgReader_isLinked(self)

    def isWritten(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgReader_isWritten(self)

    def timeWritten(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgReader_timeWritten(self)

    def moduleID(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == SmallBodyNavUKFMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.SmallBodyNavUKFMsgPayload import SmallBodyNavUKFMsg_C
            if type(source) == SmallBodyNavUKFMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<SmallBodyNavUKFMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == SmallBodyNavUKFMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.SmallBodyNavUKFMsgPayload import SmallBodyNavUKFMsg_C
        except ImportError:
            return 0

        if type(source) == SmallBodyNavUKFMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _SmallBodyNavUKFMsgPayload.delete_SmallBodyNavUKFMsgReader

# Register SmallBodyNavUKFMsgReader in _SmallBodyNavUKFMsgPayload:
_SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgReader_swigregister(SmallBodyNavUKFMsgReader)
class SmallBodyNavUKFMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgWriter_swiginit(self, _SmallBodyNavUKFMsgPayload.new_SmallBodyNavUKFMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _SmallBodyNavUKFMsgPayload.delete_SmallBodyNavUKFMsgWriter

# Register SmallBodyNavUKFMsgWriter in _SmallBodyNavUKFMsgPayload:
_SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgWriter_swigregister(SmallBodyNavUKFMsgWriter)
class SmallBodyNavUKFMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_write_get, _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_write_set)

    def addSubscriber(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_addSubscriber(self)

    def addAuthor(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_zeroMsgPayload_get, _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_isLinked(self)

    def getPayloadSize(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_swiginit(self, _SmallBodyNavUKFMsgPayload.new_SmallBodyNavUKFMsg())
    __swig_destroy__ = _SmallBodyNavUKFMsgPayload.delete_SmallBodyNavUKFMsg

# Register SmallBodyNavUKFMsg in _SmallBodyNavUKFMsgPayload:
_SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_swigregister(SmallBodyNavUKFMsg)
class SmallBodyNavUKFMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgRecorder_swiginit(self, _SmallBodyNavUKFMsgPayload.new_SmallBodyNavUKFMsgRecorder(*args))
    __swig_destroy__ = _SmallBodyNavUKFMsgPayload.delete_SmallBodyNavUKFMsgRecorder

    def SelfInit(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgRecorder___record_vector(self)

    def size(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgRecorder_clear(self)
    bskLogger = property(_SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgRecorder_bskLogger_get, _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgRecorder_updateTimeInterval(self, timeDiff)

    def _state_array(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgRecorder__state_array(self)

    @property
    def state(self):
        return self._state_array()


    def _covar_array(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgRecorder__covar_array(self)

    @property
    def covar(self):
        return self._covar_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register SmallBodyNavUKFMsgRecorder in _SmallBodyNavUKFMsgPayload:
_SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgRecorder_swigregister(SmallBodyNavUKFMsgRecorder)
class SmallBodyNavUKFMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayloadVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayloadVector_pop(self)

    def append(self, x):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayloadVector_append(self, x)

    def empty(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayloadVector_empty(self)

    def size(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayloadVector_size(self)

    def swap(self, v):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayloadVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayloadVector_begin(self)

    def end(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayloadVector_end(self)

    def rbegin(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayloadVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayloadVector_rend(self)

    def clear(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayloadVector_swiginit(self, _SmallBodyNavUKFMsgPayload.new_SmallBodyNavUKFMsgPayloadVector(*args))

    def push_back(self, x):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayloadVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayloadVector_front(self)

    def back(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayloadVector_capacity(self)

    def get_all(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _SmallBodyNavUKFMsgPayload.delete_SmallBodyNavUKFMsgPayloadVector

# Register SmallBodyNavUKFMsgPayloadVector in _SmallBodyNavUKFMsgPayload:
_SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgPayloadVector_swigregister(SmallBodyNavUKFMsgPayloadVector)
class SmallBodyNavUKFMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsVector_empty(self)

    def size(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsVector_begin(self)

    def end(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsVector_rend(self)

    def clear(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsVector_swiginit(self, _SmallBodyNavUKFMsgPayload.new_SmallBodyNavUKFMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsVector_front(self)

    def back(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _SmallBodyNavUKFMsgPayload.delete_SmallBodyNavUKFMsgOutMsgsVector

# Register SmallBodyNavUKFMsgOutMsgsVector in _SmallBodyNavUKFMsgPayload:
_SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsVector_swigregister(SmallBodyNavUKFMsgOutMsgsVector)
class SmallBodyNavUKFMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsPtrVector_swiginit(self, _SmallBodyNavUKFMsgPayload.new_SmallBodyNavUKFMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _SmallBodyNavUKFMsgPayload.delete_SmallBodyNavUKFMsgOutMsgsPtrVector

# Register SmallBodyNavUKFMsgOutMsgsPtrVector in _SmallBodyNavUKFMsgPayload:
_SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgOutMsgsPtrVector_swigregister(SmallBodyNavUKFMsgOutMsgsPtrVector)
class SmallBodyNavUKFMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgInMsgsVector_pop(self)

    def append(self, x):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgInMsgsVector_append(self, x)

    def empty(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgInMsgsVector_empty(self)

    def size(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgInMsgsVector_size(self)

    def swap(self, v):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgInMsgsVector_begin(self)

    def end(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgInMsgsVector_end(self)

    def rbegin(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgInMsgsVector_rend(self)

    def clear(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgInMsgsVector_swiginit(self, _SmallBodyNavUKFMsgPayload.new_SmallBodyNavUKFMsgInMsgsVector(*args))

    def push_back(self, x):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgInMsgsVector_front(self)

    def back(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _SmallBodyNavUKFMsgPayload.delete_SmallBodyNavUKFMsgInMsgsVector

# Register SmallBodyNavUKFMsgInMsgsVector in _SmallBodyNavUKFMsgPayload:
_SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsgInMsgsVector_swigregister(SmallBodyNavUKFMsgInMsgsVector)
class SmallBodyNavUKFMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_C_header_get, _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_C_header_set)
    payload = property(_SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_C_payload_get, _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_C_payload_set)
    payloadPointer = property(_SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_C_payloadPointer_get, _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_C_payloadPointer_set)
    headerPointer = property(_SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_C_headerPointer_get, _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import SmallBodyNavUKFMsg
        if type(source) == type(self):
            SmallBodyNavUKFMsg_C_subscribe(self, source)
        elif type(source) == SmallBodyNavUKFMsg:
            SmallBodyNavUKFMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            SmallBodyNavUKFMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe SmallBodyNavUKFMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        SmallBodyNavUKFMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import SmallBodyNavUKFMsg
        if type(source) == type(self):
            return (SmallBodyNavUKFMsg_C_isSubscribedTo(self, source))
        elif type(source) == SmallBodyNavUKFMsg:
            return (SmallBodyNavUKFMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (SmallBodyNavUKFMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        SmallBodyNavUKFMsg_C_addAuthor(self, self)
        if data:
            SmallBodyNavUKFMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        SmallBodyNavUKFMsg_C_addAuthor(self, self)
        SmallBodyNavUKFMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return SmallBodyNavUKFMsg_C_read(self)


    def __init__(self):
        _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_C_swiginit(self, _SmallBodyNavUKFMsgPayload.new_SmallBodyNavUKFMsg_C())
    __swig_destroy__ = _SmallBodyNavUKFMsgPayload.delete_SmallBodyNavUKFMsg_C

# Register SmallBodyNavUKFMsg_C in _SmallBodyNavUKFMsgPayload:
_SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_C_swigregister(SmallBodyNavUKFMsg_C)

def SmallBodyNavUKFMsg_cpp_subscribe(subscriber, source):
    return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_cpp_subscribe(subscriber, source)

def SmallBodyNavUKFMsg_C_subscribe(subscriber, source):
    return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_C_subscribe(subscriber, source)

def SmallBodyNavUKFMsg_addr_subscribe(subscriber, sourceAddr):
    return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_addr_subscribe(subscriber, sourceAddr)

def SmallBodyNavUKFMsg_unsubscribe(subscriber):
    return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_unsubscribe(subscriber)

def SmallBodyNavUKFMsg_C_isSubscribedTo(subscriber, source):
    return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_C_isSubscribedTo(subscriber, source)

def SmallBodyNavUKFMsg_cpp_isSubscribedTo(subscriber, source):
    return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_cpp_isSubscribedTo(subscriber, source)

def SmallBodyNavUKFMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def SmallBodyNavUKFMsg_C_addAuthor(coowner, data):
    return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_C_addAuthor(coowner, data)

def SmallBodyNavUKFMsg_C_init(owner):
    return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_C_init(owner)

def SmallBodyNavUKFMsg_C_isLinked(data):
    return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_C_isLinked(data)

def SmallBodyNavUKFMsg_C_isWritten(data):
    return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_C_isWritten(data)

def SmallBodyNavUKFMsg_C_timeWritten(data):
    return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_C_timeWritten(data)

def SmallBodyNavUKFMsg_C_moduleID(data):
    return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_C_moduleID(data)

def SmallBodyNavUKFMsg_C_write(data, destination, moduleID, callTime):
    return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_C_write(data, destination, moduleID, callTime)

def SmallBodyNavUKFMsg_C_read(source):
    return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_C_read(source)

def SmallBodyNavUKFMsg_C_zeroMsgPayload():
    return _SmallBodyNavUKFMsgPayload.SmallBodyNavUKFMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_SmallBodyNavUKFMsgPayload.MsgHeader_isLinked_get, _SmallBodyNavUKFMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_SmallBodyNavUKFMsgPayload.MsgHeader_isWritten_get, _SmallBodyNavUKFMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_SmallBodyNavUKFMsgPayload.MsgHeader_timeWritten_get, _SmallBodyNavUKFMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_SmallBodyNavUKFMsgPayload.MsgHeader_moduleID_get, _SmallBodyNavUKFMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _SmallBodyNavUKFMsgPayload.MsgHeader_swiginit(self, _SmallBodyNavUKFMsgPayload.new_MsgHeader())
    __swig_destroy__ = _SmallBodyNavUKFMsgPayload.delete_MsgHeader

# Register MsgHeader in _SmallBodyNavUKFMsgPayload:
_SmallBodyNavUKFMsgPayload.MsgHeader_swigregister(MsgHeader)

