# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _THRArrayOnTimeCmdMsgPayload
else:
    import _THRArrayOnTimeCmdMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _THRArrayOnTimeCmdMsgPayload.delete_SwigPyIterator

    def value(self):
        return _THRArrayOnTimeCmdMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _THRArrayOnTimeCmdMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _THRArrayOnTimeCmdMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _THRArrayOnTimeCmdMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _THRArrayOnTimeCmdMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _THRArrayOnTimeCmdMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _THRArrayOnTimeCmdMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _THRArrayOnTimeCmdMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _THRArrayOnTimeCmdMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _THRArrayOnTimeCmdMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _THRArrayOnTimeCmdMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _THRArrayOnTimeCmdMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _THRArrayOnTimeCmdMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _THRArrayOnTimeCmdMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _THRArrayOnTimeCmdMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _THRArrayOnTimeCmdMsgPayload:
_THRArrayOnTimeCmdMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _THRArrayOnTimeCmdMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _THRArrayOnTimeCmdMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _THRArrayOnTimeCmdMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _THRArrayOnTimeCmdMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _THRArrayOnTimeCmdMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _THRArrayOnTimeCmdMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _THRArrayOnTimeCmdMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _THRArrayOnTimeCmdMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _THRArrayOnTimeCmdMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _THRArrayOnTimeCmdMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _THRArrayOnTimeCmdMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _THRArrayOnTimeCmdMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _THRArrayOnTimeCmdMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _THRArrayOnTimeCmdMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _THRArrayOnTimeCmdMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _THRArrayOnTimeCmdMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _THRArrayOnTimeCmdMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _THRArrayOnTimeCmdMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _THRArrayOnTimeCmdMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _THRArrayOnTimeCmdMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _THRArrayOnTimeCmdMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _THRArrayOnTimeCmdMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _THRArrayOnTimeCmdMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _THRArrayOnTimeCmdMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _THRArrayOnTimeCmdMsgPayload.TimeVector_empty(self)

    def size(self):
        return _THRArrayOnTimeCmdMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _THRArrayOnTimeCmdMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _THRArrayOnTimeCmdMsgPayload.TimeVector_begin(self)

    def end(self):
        return _THRArrayOnTimeCmdMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _THRArrayOnTimeCmdMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _THRArrayOnTimeCmdMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _THRArrayOnTimeCmdMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _THRArrayOnTimeCmdMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _THRArrayOnTimeCmdMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _THRArrayOnTimeCmdMsgPayload.TimeVector_swiginit(self, _THRArrayOnTimeCmdMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _THRArrayOnTimeCmdMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _THRArrayOnTimeCmdMsgPayload.TimeVector_front(self)

    def back(self):
        return _THRArrayOnTimeCmdMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _THRArrayOnTimeCmdMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _THRArrayOnTimeCmdMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _THRArrayOnTimeCmdMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _THRArrayOnTimeCmdMsgPayload.delete_TimeVector

# Register TimeVector in _THRArrayOnTimeCmdMsgPayload:
_THRArrayOnTimeCmdMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _THRArrayOnTimeCmdMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _THRArrayOnTimeCmdMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _THRArrayOnTimeCmdMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _THRArrayOnTimeCmdMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _THRArrayOnTimeCmdMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _THRArrayOnTimeCmdMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _THRArrayOnTimeCmdMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _THRArrayOnTimeCmdMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _THRArrayOnTimeCmdMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _THRArrayOnTimeCmdMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _THRArrayOnTimeCmdMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _THRArrayOnTimeCmdMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _THRArrayOnTimeCmdMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _THRArrayOnTimeCmdMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _THRArrayOnTimeCmdMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _THRArrayOnTimeCmdMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _THRArrayOnTimeCmdMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _THRArrayOnTimeCmdMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _THRArrayOnTimeCmdMsgPayload.DoubleVector_swiginit(self, _THRArrayOnTimeCmdMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _THRArrayOnTimeCmdMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _THRArrayOnTimeCmdMsgPayload.DoubleVector_front(self)

    def back(self):
        return _THRArrayOnTimeCmdMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _THRArrayOnTimeCmdMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _THRArrayOnTimeCmdMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _THRArrayOnTimeCmdMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _THRArrayOnTimeCmdMsgPayload.delete_DoubleVector

# Register DoubleVector in _THRArrayOnTimeCmdMsgPayload:
_THRArrayOnTimeCmdMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _THRArrayOnTimeCmdMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _THRArrayOnTimeCmdMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _THRArrayOnTimeCmdMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _THRArrayOnTimeCmdMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _THRArrayOnTimeCmdMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _THRArrayOnTimeCmdMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _THRArrayOnTimeCmdMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _THRArrayOnTimeCmdMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _THRArrayOnTimeCmdMsgPayload.StringVector_empty(self)

    def size(self):
        return _THRArrayOnTimeCmdMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _THRArrayOnTimeCmdMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _THRArrayOnTimeCmdMsgPayload.StringVector_begin(self)

    def end(self):
        return _THRArrayOnTimeCmdMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _THRArrayOnTimeCmdMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _THRArrayOnTimeCmdMsgPayload.StringVector_rend(self)

    def clear(self):
        return _THRArrayOnTimeCmdMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _THRArrayOnTimeCmdMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _THRArrayOnTimeCmdMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _THRArrayOnTimeCmdMsgPayload.StringVector_swiginit(self, _THRArrayOnTimeCmdMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _THRArrayOnTimeCmdMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _THRArrayOnTimeCmdMsgPayload.StringVector_front(self)

    def back(self):
        return _THRArrayOnTimeCmdMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _THRArrayOnTimeCmdMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _THRArrayOnTimeCmdMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _THRArrayOnTimeCmdMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _THRArrayOnTimeCmdMsgPayload.delete_StringVector

# Register StringVector in _THRArrayOnTimeCmdMsgPayload:
_THRArrayOnTimeCmdMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _THRArrayOnTimeCmdMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _THRArrayOnTimeCmdMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _THRArrayOnTimeCmdMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _THRArrayOnTimeCmdMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _THRArrayOnTimeCmdMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _THRArrayOnTimeCmdMsgPayload.NANO2SEC
SEC2NANO = _THRArrayOnTimeCmdMsgPayload.SEC2NANO
SEC2HOUR = _THRArrayOnTimeCmdMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _THRArrayOnTimeCmdMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _THRArrayOnTimeCmdMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _THRArrayOnTimeCmdMsgPayload.secToNano(seconds)
BOOL_FALSE = _THRArrayOnTimeCmdMsgPayload.BOOL_FALSE
BOOL_TRUE = _THRArrayOnTimeCmdMsgPayload.BOOL_TRUE
AVAILABLE = _THRArrayOnTimeCmdMsgPayload.AVAILABLE
UNAVAILABLE = _THRArrayOnTimeCmdMsgPayload.UNAVAILABLE
BalancedWheels = _THRArrayOnTimeCmdMsgPayload.BalancedWheels
JitterSimple = _THRArrayOnTimeCmdMsgPayload.JitterSimple
JitterFullyCoupled = _THRArrayOnTimeCmdMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _THRArrayOnTimeCmdMsgPayload.SysModel_swiginit(self, _THRArrayOnTimeCmdMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _THRArrayOnTimeCmdMsgPayload.delete_SysModel

    def SelfInit(self):
        return _THRArrayOnTimeCmdMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _THRArrayOnTimeCmdMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _THRArrayOnTimeCmdMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _THRArrayOnTimeCmdMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_THRArrayOnTimeCmdMsgPayload.SysModel_ModelTag_get, _THRArrayOnTimeCmdMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_THRArrayOnTimeCmdMsgPayload.SysModel_CallCounts_get, _THRArrayOnTimeCmdMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_THRArrayOnTimeCmdMsgPayload.SysModel_RNGSeed_get, _THRArrayOnTimeCmdMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_THRArrayOnTimeCmdMsgPayload.SysModel_moduleID_get, _THRArrayOnTimeCmdMsgPayload.SysModel_moduleID_set)

# Register SysModel in _THRArrayOnTimeCmdMsgPayload:
_THRArrayOnTimeCmdMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _THRArrayOnTimeCmdMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _THRArrayOnTimeCmdMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _THRArrayOnTimeCmdMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _THRArrayOnTimeCmdMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _THRArrayOnTimeCmdMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _THRArrayOnTimeCmdMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _THRArrayOnTimeCmdMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _THRArrayOnTimeCmdMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _THRArrayOnTimeCmdMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _THRArrayOnTimeCmdMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _THRArrayOnTimeCmdMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _THRArrayOnTimeCmdMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class THRArrayOnTimeCmdMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    OnTimeRequest = property(_THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayload_OnTimeRequest_get, _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayload_OnTimeRequest_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayload_swiginit(self, _THRArrayOnTimeCmdMsgPayload.new_THRArrayOnTimeCmdMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _THRArrayOnTimeCmdMsgPayload.delete_THRArrayOnTimeCmdMsgPayload

# Register THRArrayOnTimeCmdMsgPayload in _THRArrayOnTimeCmdMsgPayload:
_THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayload_swigregister(THRArrayOnTimeCmdMsgPayload)

def _pprint_THRArrayOnTimeCmdMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[THRArrayOnTimeCmdMsgPayload.__repr__] = _pprint_THRArrayOnTimeCmdMsgPayload

class THRArrayOnTimeCmdMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgReader_bskLogger_get, _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgReader_bskLogger_set)
    zeroMsgPayload = property(_THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgReader_zeroMsgPayload_get, _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgReader_swiginit(self, _THRArrayOnTimeCmdMsgPayload.new_THRArrayOnTimeCmdMsgReader(*args))

    def __call__(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgReader___call__(self)

    def isLinked(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgReader_isLinked(self)

    def isWritten(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgReader_isWritten(self)

    def timeWritten(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgReader_timeWritten(self)

    def moduleID(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == THRArrayOnTimeCmdMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.THRArrayOnTimeCmdMsgPayload import THRArrayOnTimeCmdMsg_C
            if type(source) == THRArrayOnTimeCmdMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<THRArrayOnTimeCmdMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == THRArrayOnTimeCmdMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.THRArrayOnTimeCmdMsgPayload import THRArrayOnTimeCmdMsg_C
        except ImportError:
            return 0

        if type(source) == THRArrayOnTimeCmdMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _THRArrayOnTimeCmdMsgPayload.delete_THRArrayOnTimeCmdMsgReader

# Register THRArrayOnTimeCmdMsgReader in _THRArrayOnTimeCmdMsgPayload:
_THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgReader_swigregister(THRArrayOnTimeCmdMsgReader)
class THRArrayOnTimeCmdMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgWriter_swiginit(self, _THRArrayOnTimeCmdMsgPayload.new_THRArrayOnTimeCmdMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _THRArrayOnTimeCmdMsgPayload.delete_THRArrayOnTimeCmdMsgWriter

# Register THRArrayOnTimeCmdMsgWriter in _THRArrayOnTimeCmdMsgPayload:
_THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgWriter_swigregister(THRArrayOnTimeCmdMsgWriter)
class THRArrayOnTimeCmdMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_write_get, _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_write_set)

    def addSubscriber(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_addSubscriber(self)

    def addAuthor(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_zeroMsgPayload_get, _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_isLinked(self)

    def getPayloadSize(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_swiginit(self, _THRArrayOnTimeCmdMsgPayload.new_THRArrayOnTimeCmdMsg())
    __swig_destroy__ = _THRArrayOnTimeCmdMsgPayload.delete_THRArrayOnTimeCmdMsg

# Register THRArrayOnTimeCmdMsg in _THRArrayOnTimeCmdMsgPayload:
_THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_swigregister(THRArrayOnTimeCmdMsg)
class THRArrayOnTimeCmdMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgRecorder_swiginit(self, _THRArrayOnTimeCmdMsgPayload.new_THRArrayOnTimeCmdMsgRecorder(*args))
    __swig_destroy__ = _THRArrayOnTimeCmdMsgPayload.delete_THRArrayOnTimeCmdMsgRecorder

    def SelfInit(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgRecorder___record_vector(self)

    def size(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgRecorder_clear(self)
    bskLogger = property(_THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgRecorder_bskLogger_get, _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgRecorder_updateTimeInterval(self, timeDiff)

    def _OnTimeRequest_array(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgRecorder__OnTimeRequest_array(self)

    @property
    def OnTimeRequest(self):
        return self._OnTimeRequest_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register THRArrayOnTimeCmdMsgRecorder in _THRArrayOnTimeCmdMsgPayload:
_THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgRecorder_swigregister(THRArrayOnTimeCmdMsgRecorder)
class THRArrayOnTimeCmdMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayloadVector___bool__(self)

    def __len__(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayloadVector_pop(self)

    def append(self, x):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayloadVector_append(self, x)

    def empty(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayloadVector_empty(self)

    def size(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayloadVector_size(self)

    def swap(self, v):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayloadVector_swap(self, v)

    def begin(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayloadVector_begin(self)

    def end(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayloadVector_end(self)

    def rbegin(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayloadVector_rbegin(self)

    def rend(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayloadVector_rend(self)

    def clear(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayloadVector_swiginit(self, _THRArrayOnTimeCmdMsgPayload.new_THRArrayOnTimeCmdMsgPayloadVector(*args))

    def push_back(self, x):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayloadVector_push_back(self, x)

    def front(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayloadVector_front(self)

    def back(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayloadVector_capacity(self)

    def get_all(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _THRArrayOnTimeCmdMsgPayload.delete_THRArrayOnTimeCmdMsgPayloadVector

# Register THRArrayOnTimeCmdMsgPayloadVector in _THRArrayOnTimeCmdMsgPayload:
_THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgPayloadVector_swigregister(THRArrayOnTimeCmdMsgPayloadVector)
class THRArrayOnTimeCmdMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsVector_empty(self)

    def size(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsVector_begin(self)

    def end(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsVector_rend(self)

    def clear(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsVector_swiginit(self, _THRArrayOnTimeCmdMsgPayload.new_THRArrayOnTimeCmdMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsVector_front(self)

    def back(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _THRArrayOnTimeCmdMsgPayload.delete_THRArrayOnTimeCmdMsgOutMsgsVector

# Register THRArrayOnTimeCmdMsgOutMsgsVector in _THRArrayOnTimeCmdMsgPayload:
_THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsVector_swigregister(THRArrayOnTimeCmdMsgOutMsgsVector)
class THRArrayOnTimeCmdMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsPtrVector_swiginit(self, _THRArrayOnTimeCmdMsgPayload.new_THRArrayOnTimeCmdMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _THRArrayOnTimeCmdMsgPayload.delete_THRArrayOnTimeCmdMsgOutMsgsPtrVector

# Register THRArrayOnTimeCmdMsgOutMsgsPtrVector in _THRArrayOnTimeCmdMsgPayload:
_THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgOutMsgsPtrVector_swigregister(THRArrayOnTimeCmdMsgOutMsgsPtrVector)
class THRArrayOnTimeCmdMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgInMsgsVector_pop(self)

    def append(self, x):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgInMsgsVector_append(self, x)

    def empty(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgInMsgsVector_empty(self)

    def size(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgInMsgsVector_size(self)

    def swap(self, v):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgInMsgsVector_begin(self)

    def end(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgInMsgsVector_end(self)

    def rbegin(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgInMsgsVector_rend(self)

    def clear(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgInMsgsVector_swiginit(self, _THRArrayOnTimeCmdMsgPayload.new_THRArrayOnTimeCmdMsgInMsgsVector(*args))

    def push_back(self, x):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgInMsgsVector_front(self)

    def back(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _THRArrayOnTimeCmdMsgPayload.delete_THRArrayOnTimeCmdMsgInMsgsVector

# Register THRArrayOnTimeCmdMsgInMsgsVector in _THRArrayOnTimeCmdMsgPayload:
_THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsgInMsgsVector_swigregister(THRArrayOnTimeCmdMsgInMsgsVector)
class THRArrayOnTimeCmdMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_C_header_get, _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_C_header_set)
    payload = property(_THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_C_payload_get, _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_C_payload_set)
    payloadPointer = property(_THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_C_payloadPointer_get, _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_C_payloadPointer_set)
    headerPointer = property(_THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_C_headerPointer_get, _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import THRArrayOnTimeCmdMsg
        if type(source) == type(self):
            THRArrayOnTimeCmdMsg_C_subscribe(self, source)
        elif type(source) == THRArrayOnTimeCmdMsg:
            THRArrayOnTimeCmdMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            THRArrayOnTimeCmdMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe THRArrayOnTimeCmdMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        THRArrayOnTimeCmdMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import THRArrayOnTimeCmdMsg
        if type(source) == type(self):
            return (THRArrayOnTimeCmdMsg_C_isSubscribedTo(self, source))
        elif type(source) == THRArrayOnTimeCmdMsg:
            return (THRArrayOnTimeCmdMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (THRArrayOnTimeCmdMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        THRArrayOnTimeCmdMsg_C_addAuthor(self, self)
        if data:
            THRArrayOnTimeCmdMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        THRArrayOnTimeCmdMsg_C_addAuthor(self, self)
        THRArrayOnTimeCmdMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return THRArrayOnTimeCmdMsg_C_read(self)


    def __init__(self):
        _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_C_swiginit(self, _THRArrayOnTimeCmdMsgPayload.new_THRArrayOnTimeCmdMsg_C())
    __swig_destroy__ = _THRArrayOnTimeCmdMsgPayload.delete_THRArrayOnTimeCmdMsg_C

# Register THRArrayOnTimeCmdMsg_C in _THRArrayOnTimeCmdMsgPayload:
_THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_C_swigregister(THRArrayOnTimeCmdMsg_C)

def THRArrayOnTimeCmdMsg_cpp_subscribe(subscriber, source):
    return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_cpp_subscribe(subscriber, source)

def THRArrayOnTimeCmdMsg_C_subscribe(subscriber, source):
    return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_C_subscribe(subscriber, source)

def THRArrayOnTimeCmdMsg_addr_subscribe(subscriber, sourceAddr):
    return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_addr_subscribe(subscriber, sourceAddr)

def THRArrayOnTimeCmdMsg_unsubscribe(subscriber):
    return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_unsubscribe(subscriber)

def THRArrayOnTimeCmdMsg_C_isSubscribedTo(subscriber, source):
    return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_C_isSubscribedTo(subscriber, source)

def THRArrayOnTimeCmdMsg_cpp_isSubscribedTo(subscriber, source):
    return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_cpp_isSubscribedTo(subscriber, source)

def THRArrayOnTimeCmdMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def THRArrayOnTimeCmdMsg_C_addAuthor(coowner, data):
    return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_C_addAuthor(coowner, data)

def THRArrayOnTimeCmdMsg_C_init(owner):
    return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_C_init(owner)

def THRArrayOnTimeCmdMsg_C_isLinked(data):
    return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_C_isLinked(data)

def THRArrayOnTimeCmdMsg_C_isWritten(data):
    return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_C_isWritten(data)

def THRArrayOnTimeCmdMsg_C_timeWritten(data):
    return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_C_timeWritten(data)

def THRArrayOnTimeCmdMsg_C_moduleID(data):
    return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_C_moduleID(data)

def THRArrayOnTimeCmdMsg_C_write(data, destination, moduleID, callTime):
    return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_C_write(data, destination, moduleID, callTime)

def THRArrayOnTimeCmdMsg_C_read(source):
    return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_C_read(source)

def THRArrayOnTimeCmdMsg_C_zeroMsgPayload():
    return _THRArrayOnTimeCmdMsgPayload.THRArrayOnTimeCmdMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_THRArrayOnTimeCmdMsgPayload.MsgHeader_isLinked_get, _THRArrayOnTimeCmdMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_THRArrayOnTimeCmdMsgPayload.MsgHeader_isWritten_get, _THRArrayOnTimeCmdMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_THRArrayOnTimeCmdMsgPayload.MsgHeader_timeWritten_get, _THRArrayOnTimeCmdMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_THRArrayOnTimeCmdMsgPayload.MsgHeader_moduleID_get, _THRArrayOnTimeCmdMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _THRArrayOnTimeCmdMsgPayload.MsgHeader_swiginit(self, _THRArrayOnTimeCmdMsgPayload.new_MsgHeader())
    __swig_destroy__ = _THRArrayOnTimeCmdMsgPayload.delete_MsgHeader

# Register MsgHeader in _THRArrayOnTimeCmdMsgPayload:
_THRArrayOnTimeCmdMsgPayload.MsgHeader_swigregister(MsgHeader)

