# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _BoreAngleMsgPayload
else:
    import _BoreAngleMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BoreAngleMsgPayload.delete_SwigPyIterator

    def value(self):
        return _BoreAngleMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BoreAngleMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BoreAngleMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BoreAngleMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BoreAngleMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BoreAngleMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _BoreAngleMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _BoreAngleMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _BoreAngleMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BoreAngleMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BoreAngleMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BoreAngleMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BoreAngleMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BoreAngleMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BoreAngleMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BoreAngleMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _BoreAngleMsgPayload:
_BoreAngleMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _BoreAngleMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _BoreAngleMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _BoreAngleMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _BoreAngleMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _BoreAngleMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _BoreAngleMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _BoreAngleMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _BoreAngleMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _BoreAngleMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _BoreAngleMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _BoreAngleMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _BoreAngleMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _BoreAngleMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _BoreAngleMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _BoreAngleMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _BoreAngleMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _BoreAngleMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _BoreAngleMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _BoreAngleMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _BoreAngleMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _BoreAngleMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _BoreAngleMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _BoreAngleMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _BoreAngleMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _BoreAngleMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _BoreAngleMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _BoreAngleMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _BoreAngleMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _BoreAngleMsgPayload.TimeVector_empty(self)

    def size(self):
        return _BoreAngleMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _BoreAngleMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _BoreAngleMsgPayload.TimeVector_begin(self)

    def end(self):
        return _BoreAngleMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _BoreAngleMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _BoreAngleMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _BoreAngleMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _BoreAngleMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _BoreAngleMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _BoreAngleMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _BoreAngleMsgPayload.TimeVector_swiginit(self, _BoreAngleMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _BoreAngleMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _BoreAngleMsgPayload.TimeVector_front(self)

    def back(self):
        return _BoreAngleMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _BoreAngleMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _BoreAngleMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _BoreAngleMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _BoreAngleMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _BoreAngleMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _BoreAngleMsgPayload.delete_TimeVector

# Register TimeVector in _BoreAngleMsgPayload:
_BoreAngleMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _BoreAngleMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _BoreAngleMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _BoreAngleMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _BoreAngleMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _BoreAngleMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _BoreAngleMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _BoreAngleMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _BoreAngleMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _BoreAngleMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _BoreAngleMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _BoreAngleMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _BoreAngleMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _BoreAngleMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _BoreAngleMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _BoreAngleMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _BoreAngleMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _BoreAngleMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _BoreAngleMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _BoreAngleMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _BoreAngleMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _BoreAngleMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _BoreAngleMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _BoreAngleMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _BoreAngleMsgPayload.DoubleVector_swiginit(self, _BoreAngleMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _BoreAngleMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _BoreAngleMsgPayload.DoubleVector_front(self)

    def back(self):
        return _BoreAngleMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _BoreAngleMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _BoreAngleMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _BoreAngleMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _BoreAngleMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _BoreAngleMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _BoreAngleMsgPayload.delete_DoubleVector

# Register DoubleVector in _BoreAngleMsgPayload:
_BoreAngleMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _BoreAngleMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _BoreAngleMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _BoreAngleMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _BoreAngleMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _BoreAngleMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _BoreAngleMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _BoreAngleMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _BoreAngleMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _BoreAngleMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _BoreAngleMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _BoreAngleMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _BoreAngleMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _BoreAngleMsgPayload.StringVector_empty(self)

    def size(self):
        return _BoreAngleMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _BoreAngleMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _BoreAngleMsgPayload.StringVector_begin(self)

    def end(self):
        return _BoreAngleMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _BoreAngleMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _BoreAngleMsgPayload.StringVector_rend(self)

    def clear(self):
        return _BoreAngleMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _BoreAngleMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _BoreAngleMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _BoreAngleMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _BoreAngleMsgPayload.StringVector_swiginit(self, _BoreAngleMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _BoreAngleMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _BoreAngleMsgPayload.StringVector_front(self)

    def back(self):
        return _BoreAngleMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _BoreAngleMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _BoreAngleMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _BoreAngleMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _BoreAngleMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _BoreAngleMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _BoreAngleMsgPayload.delete_StringVector

# Register StringVector in _BoreAngleMsgPayload:
_BoreAngleMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _BoreAngleMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _BoreAngleMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _BoreAngleMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _BoreAngleMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _BoreAngleMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _BoreAngleMsgPayload.NANO2SEC
SEC2NANO = _BoreAngleMsgPayload.SEC2NANO
SEC2HOUR = _BoreAngleMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _BoreAngleMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _BoreAngleMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _BoreAngleMsgPayload.secToNano(seconds)
BOOL_FALSE = _BoreAngleMsgPayload.BOOL_FALSE
BOOL_TRUE = _BoreAngleMsgPayload.BOOL_TRUE
AVAILABLE = _BoreAngleMsgPayload.AVAILABLE
UNAVAILABLE = _BoreAngleMsgPayload.UNAVAILABLE
BalancedWheels = _BoreAngleMsgPayload.BalancedWheels
JitterSimple = _BoreAngleMsgPayload.JitterSimple
JitterFullyCoupled = _BoreAngleMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BoreAngleMsgPayload.SysModel_swiginit(self, _BoreAngleMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _BoreAngleMsgPayload.delete_SysModel

    def SelfInit(self):
        return _BoreAngleMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _BoreAngleMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _BoreAngleMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _BoreAngleMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_BoreAngleMsgPayload.SysModel_ModelTag_get, _BoreAngleMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_BoreAngleMsgPayload.SysModel_CallCounts_get, _BoreAngleMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_BoreAngleMsgPayload.SysModel_RNGSeed_get, _BoreAngleMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_BoreAngleMsgPayload.SysModel_moduleID_get, _BoreAngleMsgPayload.SysModel_moduleID_set)

# Register SysModel in _BoreAngleMsgPayload:
_BoreAngleMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _BoreAngleMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _BoreAngleMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _BoreAngleMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _BoreAngleMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _BoreAngleMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _BoreAngleMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _BoreAngleMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _BoreAngleMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _BoreAngleMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _BoreAngleMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _BoreAngleMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _BoreAngleMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class BoreAngleMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    azimuth = property(_BoreAngleMsgPayload.BoreAngleMsgPayload_azimuth_get, _BoreAngleMsgPayload.BoreAngleMsgPayload_azimuth_set)
    missAngle = property(_BoreAngleMsgPayload.BoreAngleMsgPayload_missAngle_get, _BoreAngleMsgPayload.BoreAngleMsgPayload_missAngle_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _BoreAngleMsgPayload.BoreAngleMsgPayload_swiginit(self, _BoreAngleMsgPayload.new_BoreAngleMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _BoreAngleMsgPayload.delete_BoreAngleMsgPayload

# Register BoreAngleMsgPayload in _BoreAngleMsgPayload:
_BoreAngleMsgPayload.BoreAngleMsgPayload_swigregister(BoreAngleMsgPayload)

def _pprint_BoreAngleMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[BoreAngleMsgPayload.__repr__] = _pprint_BoreAngleMsgPayload

class BoreAngleMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_BoreAngleMsgPayload.BoreAngleMsgReader_bskLogger_get, _BoreAngleMsgPayload.BoreAngleMsgReader_bskLogger_set)
    zeroMsgPayload = property(_BoreAngleMsgPayload.BoreAngleMsgReader_zeroMsgPayload_get, _BoreAngleMsgPayload.BoreAngleMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _BoreAngleMsgPayload.BoreAngleMsgReader_swiginit(self, _BoreAngleMsgPayload.new_BoreAngleMsgReader(*args))

    def __call__(self):
        return _BoreAngleMsgPayload.BoreAngleMsgReader___call__(self)

    def isLinked(self):
        return _BoreAngleMsgPayload.BoreAngleMsgReader_isLinked(self)

    def isWritten(self):
        return _BoreAngleMsgPayload.BoreAngleMsgReader_isWritten(self)

    def timeWritten(self):
        return _BoreAngleMsgPayload.BoreAngleMsgReader_timeWritten(self)

    def moduleID(self):
        return _BoreAngleMsgPayload.BoreAngleMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _BoreAngleMsgPayload.BoreAngleMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _BoreAngleMsgPayload.BoreAngleMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _BoreAngleMsgPayload.BoreAngleMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _BoreAngleMsgPayload.BoreAngleMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _BoreAngleMsgPayload.BoreAngleMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _BoreAngleMsgPayload.BoreAngleMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _BoreAngleMsgPayload.BoreAngleMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _BoreAngleMsgPayload.BoreAngleMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _BoreAngleMsgPayload.BoreAngleMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _BoreAngleMsgPayload.BoreAngleMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == BoreAngleMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.BoreAngleMsgPayload import BoreAngleMsg_C
            if type(source) == BoreAngleMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<BoreAngleMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == BoreAngleMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.BoreAngleMsgPayload import BoreAngleMsg_C
        except ImportError:
            return 0

        if type(source) == BoreAngleMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _BoreAngleMsgPayload.delete_BoreAngleMsgReader

# Register BoreAngleMsgReader in _BoreAngleMsgPayload:
_BoreAngleMsgPayload.BoreAngleMsgReader_swigregister(BoreAngleMsgReader)
class BoreAngleMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BoreAngleMsgPayload.BoreAngleMsgWriter_swiginit(self, _BoreAngleMsgPayload.new_BoreAngleMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _BoreAngleMsgPayload.BoreAngleMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _BoreAngleMsgPayload.delete_BoreAngleMsgWriter

# Register BoreAngleMsgWriter in _BoreAngleMsgPayload:
_BoreAngleMsgPayload.BoreAngleMsgWriter_swigregister(BoreAngleMsgWriter)
class BoreAngleMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_BoreAngleMsgPayload.BoreAngleMsg_write_get, _BoreAngleMsgPayload.BoreAngleMsg_write_set)

    def addSubscriber(self):
        return _BoreAngleMsgPayload.BoreAngleMsg_addSubscriber(self)

    def addAuthor(self):
        return _BoreAngleMsgPayload.BoreAngleMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _BoreAngleMsgPayload.BoreAngleMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _BoreAngleMsgPayload.BoreAngleMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _BoreAngleMsgPayload.BoreAngleMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_BoreAngleMsgPayload.BoreAngleMsg_zeroMsgPayload_get, _BoreAngleMsgPayload.BoreAngleMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _BoreAngleMsgPayload.BoreAngleMsg_isLinked(self)

    def getPayloadSize(self):
        return _BoreAngleMsgPayload.BoreAngleMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _BoreAngleMsgPayload.BoreAngleMsg_swiginit(self, _BoreAngleMsgPayload.new_BoreAngleMsg())
    __swig_destroy__ = _BoreAngleMsgPayload.delete_BoreAngleMsg

# Register BoreAngleMsg in _BoreAngleMsgPayload:
_BoreAngleMsgPayload.BoreAngleMsg_swigregister(BoreAngleMsg)
class BoreAngleMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BoreAngleMsgPayload.BoreAngleMsgRecorder_swiginit(self, _BoreAngleMsgPayload.new_BoreAngleMsgRecorder(*args))
    __swig_destroy__ = _BoreAngleMsgPayload.delete_BoreAngleMsgRecorder

    def SelfInit(self):
        return _BoreAngleMsgPayload.BoreAngleMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _BoreAngleMsgPayload.BoreAngleMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _BoreAngleMsgPayload.BoreAngleMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _BoreAngleMsgPayload.BoreAngleMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _BoreAngleMsgPayload.BoreAngleMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _BoreAngleMsgPayload.BoreAngleMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _BoreAngleMsgPayload.BoreAngleMsgRecorder___record_vector(self)

    def size(self):
        return _BoreAngleMsgPayload.BoreAngleMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _BoreAngleMsgPayload.BoreAngleMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _BoreAngleMsgPayload.BoreAngleMsgRecorder_clear(self)
    bskLogger = property(_BoreAngleMsgPayload.BoreAngleMsgRecorder_bskLogger_get, _BoreAngleMsgPayload.BoreAngleMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _BoreAngleMsgPayload.BoreAngleMsgRecorder_updateTimeInterval(self, timeDiff)

    def _azimuth_array(self):
        return _BoreAngleMsgPayload.BoreAngleMsgRecorder__azimuth_array(self)

    @property
    def azimuth(self):
        return self._azimuth_array()


    def _missAngle_array(self):
        return _BoreAngleMsgPayload.BoreAngleMsgRecorder__missAngle_array(self)

    @property
    def missAngle(self):
        return self._missAngle_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register BoreAngleMsgRecorder in _BoreAngleMsgPayload:
_BoreAngleMsgPayload.BoreAngleMsgRecorder_swigregister(BoreAngleMsgRecorder)
class BoreAngleMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _BoreAngleMsgPayload.BoreAngleMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _BoreAngleMsgPayload.BoreAngleMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _BoreAngleMsgPayload.BoreAngleMsgPayloadVector___bool__(self)

    def __len__(self):
        return _BoreAngleMsgPayload.BoreAngleMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _BoreAngleMsgPayload.BoreAngleMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _BoreAngleMsgPayload.BoreAngleMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _BoreAngleMsgPayload.BoreAngleMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _BoreAngleMsgPayload.BoreAngleMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _BoreAngleMsgPayload.BoreAngleMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _BoreAngleMsgPayload.BoreAngleMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _BoreAngleMsgPayload.BoreAngleMsgPayloadVector_pop(self)

    def append(self, x):
        return _BoreAngleMsgPayload.BoreAngleMsgPayloadVector_append(self, x)

    def empty(self):
        return _BoreAngleMsgPayload.BoreAngleMsgPayloadVector_empty(self)

    def size(self):
        return _BoreAngleMsgPayload.BoreAngleMsgPayloadVector_size(self)

    def swap(self, v):
        return _BoreAngleMsgPayload.BoreAngleMsgPayloadVector_swap(self, v)

    def begin(self):
        return _BoreAngleMsgPayload.BoreAngleMsgPayloadVector_begin(self)

    def end(self):
        return _BoreAngleMsgPayload.BoreAngleMsgPayloadVector_end(self)

    def rbegin(self):
        return _BoreAngleMsgPayload.BoreAngleMsgPayloadVector_rbegin(self)

    def rend(self):
        return _BoreAngleMsgPayload.BoreAngleMsgPayloadVector_rend(self)

    def clear(self):
        return _BoreAngleMsgPayload.BoreAngleMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _BoreAngleMsgPayload.BoreAngleMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _BoreAngleMsgPayload.BoreAngleMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _BoreAngleMsgPayload.BoreAngleMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _BoreAngleMsgPayload.BoreAngleMsgPayloadVector_swiginit(self, _BoreAngleMsgPayload.new_BoreAngleMsgPayloadVector(*args))

    def push_back(self, x):
        return _BoreAngleMsgPayload.BoreAngleMsgPayloadVector_push_back(self, x)

    def front(self):
        return _BoreAngleMsgPayload.BoreAngleMsgPayloadVector_front(self)

    def back(self):
        return _BoreAngleMsgPayload.BoreAngleMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _BoreAngleMsgPayload.BoreAngleMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _BoreAngleMsgPayload.BoreAngleMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _BoreAngleMsgPayload.BoreAngleMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _BoreAngleMsgPayload.BoreAngleMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _BoreAngleMsgPayload.BoreAngleMsgPayloadVector_capacity(self)

    def get_all(self):
        return _BoreAngleMsgPayload.BoreAngleMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _BoreAngleMsgPayload.delete_BoreAngleMsgPayloadVector

# Register BoreAngleMsgPayloadVector in _BoreAngleMsgPayload:
_BoreAngleMsgPayload.BoreAngleMsgPayloadVector_swigregister(BoreAngleMsgPayloadVector)
class BoreAngleMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsVector_empty(self)

    def size(self):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsVector_begin(self)

    def end(self):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsVector_rend(self)

    def clear(self):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _BoreAngleMsgPayload.BoreAngleMsgOutMsgsVector_swiginit(self, _BoreAngleMsgPayload.new_BoreAngleMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsVector_front(self)

    def back(self):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _BoreAngleMsgPayload.delete_BoreAngleMsgOutMsgsVector

# Register BoreAngleMsgOutMsgsVector in _BoreAngleMsgPayload:
_BoreAngleMsgPayload.BoreAngleMsgOutMsgsVector_swigregister(BoreAngleMsgOutMsgsVector)
class BoreAngleMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _BoreAngleMsgPayload.BoreAngleMsgOutMsgsPtrVector_swiginit(self, _BoreAngleMsgPayload.new_BoreAngleMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _BoreAngleMsgPayload.BoreAngleMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _BoreAngleMsgPayload.delete_BoreAngleMsgOutMsgsPtrVector

# Register BoreAngleMsgOutMsgsPtrVector in _BoreAngleMsgPayload:
_BoreAngleMsgPayload.BoreAngleMsgOutMsgsPtrVector_swigregister(BoreAngleMsgOutMsgsPtrVector)
class BoreAngleMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _BoreAngleMsgPayload.BoreAngleMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _BoreAngleMsgPayload.BoreAngleMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _BoreAngleMsgPayload.BoreAngleMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _BoreAngleMsgPayload.BoreAngleMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _BoreAngleMsgPayload.BoreAngleMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _BoreAngleMsgPayload.BoreAngleMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _BoreAngleMsgPayload.BoreAngleMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _BoreAngleMsgPayload.BoreAngleMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _BoreAngleMsgPayload.BoreAngleMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _BoreAngleMsgPayload.BoreAngleMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _BoreAngleMsgPayload.BoreAngleMsgInMsgsVector_pop(self)

    def append(self, x):
        return _BoreAngleMsgPayload.BoreAngleMsgInMsgsVector_append(self, x)

    def empty(self):
        return _BoreAngleMsgPayload.BoreAngleMsgInMsgsVector_empty(self)

    def size(self):
        return _BoreAngleMsgPayload.BoreAngleMsgInMsgsVector_size(self)

    def swap(self, v):
        return _BoreAngleMsgPayload.BoreAngleMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _BoreAngleMsgPayload.BoreAngleMsgInMsgsVector_begin(self)

    def end(self):
        return _BoreAngleMsgPayload.BoreAngleMsgInMsgsVector_end(self)

    def rbegin(self):
        return _BoreAngleMsgPayload.BoreAngleMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _BoreAngleMsgPayload.BoreAngleMsgInMsgsVector_rend(self)

    def clear(self):
        return _BoreAngleMsgPayload.BoreAngleMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _BoreAngleMsgPayload.BoreAngleMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _BoreAngleMsgPayload.BoreAngleMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _BoreAngleMsgPayload.BoreAngleMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _BoreAngleMsgPayload.BoreAngleMsgInMsgsVector_swiginit(self, _BoreAngleMsgPayload.new_BoreAngleMsgInMsgsVector(*args))

    def push_back(self, x):
        return _BoreAngleMsgPayload.BoreAngleMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _BoreAngleMsgPayload.BoreAngleMsgInMsgsVector_front(self)

    def back(self):
        return _BoreAngleMsgPayload.BoreAngleMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _BoreAngleMsgPayload.BoreAngleMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _BoreAngleMsgPayload.BoreAngleMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _BoreAngleMsgPayload.BoreAngleMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _BoreAngleMsgPayload.BoreAngleMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _BoreAngleMsgPayload.BoreAngleMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _BoreAngleMsgPayload.delete_BoreAngleMsgInMsgsVector

# Register BoreAngleMsgInMsgsVector in _BoreAngleMsgPayload:
_BoreAngleMsgPayload.BoreAngleMsgInMsgsVector_swigregister(BoreAngleMsgInMsgsVector)
class BoreAngleMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_BoreAngleMsgPayload.BoreAngleMsg_C_header_get, _BoreAngleMsgPayload.BoreAngleMsg_C_header_set)
    payload = property(_BoreAngleMsgPayload.BoreAngleMsg_C_payload_get, _BoreAngleMsgPayload.BoreAngleMsg_C_payload_set)
    payloadPointer = property(_BoreAngleMsgPayload.BoreAngleMsg_C_payloadPointer_get, _BoreAngleMsgPayload.BoreAngleMsg_C_payloadPointer_set)
    headerPointer = property(_BoreAngleMsgPayload.BoreAngleMsg_C_headerPointer_get, _BoreAngleMsgPayload.BoreAngleMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _BoreAngleMsgPayload.BoreAngleMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import BoreAngleMsg
        if type(source) == type(self):
            BoreAngleMsg_C_subscribe(self, source)
        elif type(source) == BoreAngleMsg:
            BoreAngleMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            BoreAngleMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe BoreAngleMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        BoreAngleMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import BoreAngleMsg
        if type(source) == type(self):
            return (BoreAngleMsg_C_isSubscribedTo(self, source))
        elif type(source) == BoreAngleMsg:
            return (BoreAngleMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (BoreAngleMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        BoreAngleMsg_C_addAuthor(self, self)
        if data:
            BoreAngleMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        BoreAngleMsg_C_addAuthor(self, self)
        BoreAngleMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return BoreAngleMsg_C_read(self)


    def __init__(self):
        _BoreAngleMsgPayload.BoreAngleMsg_C_swiginit(self, _BoreAngleMsgPayload.new_BoreAngleMsg_C())
    __swig_destroy__ = _BoreAngleMsgPayload.delete_BoreAngleMsg_C

# Register BoreAngleMsg_C in _BoreAngleMsgPayload:
_BoreAngleMsgPayload.BoreAngleMsg_C_swigregister(BoreAngleMsg_C)

def BoreAngleMsg_cpp_subscribe(subscriber, source):
    return _BoreAngleMsgPayload.BoreAngleMsg_cpp_subscribe(subscriber, source)

def BoreAngleMsg_C_subscribe(subscriber, source):
    return _BoreAngleMsgPayload.BoreAngleMsg_C_subscribe(subscriber, source)

def BoreAngleMsg_addr_subscribe(subscriber, sourceAddr):
    return _BoreAngleMsgPayload.BoreAngleMsg_addr_subscribe(subscriber, sourceAddr)

def BoreAngleMsg_unsubscribe(subscriber):
    return _BoreAngleMsgPayload.BoreAngleMsg_unsubscribe(subscriber)

def BoreAngleMsg_C_isSubscribedTo(subscriber, source):
    return _BoreAngleMsgPayload.BoreAngleMsg_C_isSubscribedTo(subscriber, source)

def BoreAngleMsg_cpp_isSubscribedTo(subscriber, source):
    return _BoreAngleMsgPayload.BoreAngleMsg_cpp_isSubscribedTo(subscriber, source)

def BoreAngleMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _BoreAngleMsgPayload.BoreAngleMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def BoreAngleMsg_C_addAuthor(coowner, data):
    return _BoreAngleMsgPayload.BoreAngleMsg_C_addAuthor(coowner, data)

def BoreAngleMsg_C_init(owner):
    return _BoreAngleMsgPayload.BoreAngleMsg_C_init(owner)

def BoreAngleMsg_C_isLinked(data):
    return _BoreAngleMsgPayload.BoreAngleMsg_C_isLinked(data)

def BoreAngleMsg_C_isWritten(data):
    return _BoreAngleMsgPayload.BoreAngleMsg_C_isWritten(data)

def BoreAngleMsg_C_timeWritten(data):
    return _BoreAngleMsgPayload.BoreAngleMsg_C_timeWritten(data)

def BoreAngleMsg_C_moduleID(data):
    return _BoreAngleMsgPayload.BoreAngleMsg_C_moduleID(data)

def BoreAngleMsg_C_write(data, destination, moduleID, callTime):
    return _BoreAngleMsgPayload.BoreAngleMsg_C_write(data, destination, moduleID, callTime)

def BoreAngleMsg_C_read(source):
    return _BoreAngleMsgPayload.BoreAngleMsg_C_read(source)

def BoreAngleMsg_C_zeroMsgPayload():
    return _BoreAngleMsgPayload.BoreAngleMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_BoreAngleMsgPayload.MsgHeader_isLinked_get, _BoreAngleMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_BoreAngleMsgPayload.MsgHeader_isWritten_get, _BoreAngleMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_BoreAngleMsgPayload.MsgHeader_timeWritten_get, _BoreAngleMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_BoreAngleMsgPayload.MsgHeader_moduleID_get, _BoreAngleMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _BoreAngleMsgPayload.MsgHeader_swiginit(self, _BoreAngleMsgPayload.new_MsgHeader())
    __swig_destroy__ = _BoreAngleMsgPayload.delete_MsgHeader

# Register MsgHeader in _BoreAngleMsgPayload:
_BoreAngleMsgPayload.MsgHeader_swigregister(MsgHeader)

