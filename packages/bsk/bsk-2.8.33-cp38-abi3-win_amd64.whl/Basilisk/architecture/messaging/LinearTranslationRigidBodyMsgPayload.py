# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _LinearTranslationRigidBodyMsgPayload
else:
    import _LinearTranslationRigidBodyMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LinearTranslationRigidBodyMsgPayload.delete_SwigPyIterator

    def value(self):
        return _LinearTranslationRigidBodyMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _LinearTranslationRigidBodyMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _LinearTranslationRigidBodyMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _LinearTranslationRigidBodyMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _LinearTranslationRigidBodyMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _LinearTranslationRigidBodyMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _LinearTranslationRigidBodyMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _LinearTranslationRigidBodyMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _LinearTranslationRigidBodyMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _LinearTranslationRigidBodyMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _LinearTranslationRigidBodyMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _LinearTranslationRigidBodyMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _LinearTranslationRigidBodyMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _LinearTranslationRigidBodyMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _LinearTranslationRigidBodyMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _LinearTranslationRigidBodyMsgPayload:
_LinearTranslationRigidBodyMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _LinearTranslationRigidBodyMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _LinearTranslationRigidBodyMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _LinearTranslationRigidBodyMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _LinearTranslationRigidBodyMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _LinearTranslationRigidBodyMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _LinearTranslationRigidBodyMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _LinearTranslationRigidBodyMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _LinearTranslationRigidBodyMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _LinearTranslationRigidBodyMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _LinearTranslationRigidBodyMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _LinearTranslationRigidBodyMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _LinearTranslationRigidBodyMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _LinearTranslationRigidBodyMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _LinearTranslationRigidBodyMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _LinearTranslationRigidBodyMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _LinearTranslationRigidBodyMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LinearTranslationRigidBodyMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LinearTranslationRigidBodyMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _LinearTranslationRigidBodyMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _LinearTranslationRigidBodyMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _LinearTranslationRigidBodyMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LinearTranslationRigidBodyMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _LinearTranslationRigidBodyMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _LinearTranslationRigidBodyMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _LinearTranslationRigidBodyMsgPayload.TimeVector_empty(self)

    def size(self):
        return _LinearTranslationRigidBodyMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _LinearTranslationRigidBodyMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _LinearTranslationRigidBodyMsgPayload.TimeVector_begin(self)

    def end(self):
        return _LinearTranslationRigidBodyMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _LinearTranslationRigidBodyMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _LinearTranslationRigidBodyMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _LinearTranslationRigidBodyMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _LinearTranslationRigidBodyMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _LinearTranslationRigidBodyMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _LinearTranslationRigidBodyMsgPayload.TimeVector_swiginit(self, _LinearTranslationRigidBodyMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _LinearTranslationRigidBodyMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _LinearTranslationRigidBodyMsgPayload.TimeVector_front(self)

    def back(self):
        return _LinearTranslationRigidBodyMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _LinearTranslationRigidBodyMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _LinearTranslationRigidBodyMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _LinearTranslationRigidBodyMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _LinearTranslationRigidBodyMsgPayload.delete_TimeVector

# Register TimeVector in _LinearTranslationRigidBodyMsgPayload:
_LinearTranslationRigidBodyMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LinearTranslationRigidBodyMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LinearTranslationRigidBodyMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _LinearTranslationRigidBodyMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _LinearTranslationRigidBodyMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _LinearTranslationRigidBodyMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LinearTranslationRigidBodyMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _LinearTranslationRigidBodyMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _LinearTranslationRigidBodyMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _LinearTranslationRigidBodyMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _LinearTranslationRigidBodyMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _LinearTranslationRigidBodyMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _LinearTranslationRigidBodyMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _LinearTranslationRigidBodyMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _LinearTranslationRigidBodyMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _LinearTranslationRigidBodyMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _LinearTranslationRigidBodyMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _LinearTranslationRigidBodyMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _LinearTranslationRigidBodyMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _LinearTranslationRigidBodyMsgPayload.DoubleVector_swiginit(self, _LinearTranslationRigidBodyMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _LinearTranslationRigidBodyMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _LinearTranslationRigidBodyMsgPayload.DoubleVector_front(self)

    def back(self):
        return _LinearTranslationRigidBodyMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _LinearTranslationRigidBodyMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _LinearTranslationRigidBodyMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _LinearTranslationRigidBodyMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _LinearTranslationRigidBodyMsgPayload.delete_DoubleVector

# Register DoubleVector in _LinearTranslationRigidBodyMsgPayload:
_LinearTranslationRigidBodyMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LinearTranslationRigidBodyMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LinearTranslationRigidBodyMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _LinearTranslationRigidBodyMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _LinearTranslationRigidBodyMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _LinearTranslationRigidBodyMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LinearTranslationRigidBodyMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _LinearTranslationRigidBodyMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _LinearTranslationRigidBodyMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _LinearTranslationRigidBodyMsgPayload.StringVector_empty(self)

    def size(self):
        return _LinearTranslationRigidBodyMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _LinearTranslationRigidBodyMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _LinearTranslationRigidBodyMsgPayload.StringVector_begin(self)

    def end(self):
        return _LinearTranslationRigidBodyMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _LinearTranslationRigidBodyMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _LinearTranslationRigidBodyMsgPayload.StringVector_rend(self)

    def clear(self):
        return _LinearTranslationRigidBodyMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _LinearTranslationRigidBodyMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _LinearTranslationRigidBodyMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _LinearTranslationRigidBodyMsgPayload.StringVector_swiginit(self, _LinearTranslationRigidBodyMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _LinearTranslationRigidBodyMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _LinearTranslationRigidBodyMsgPayload.StringVector_front(self)

    def back(self):
        return _LinearTranslationRigidBodyMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _LinearTranslationRigidBodyMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _LinearTranslationRigidBodyMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _LinearTranslationRigidBodyMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _LinearTranslationRigidBodyMsgPayload.delete_StringVector

# Register StringVector in _LinearTranslationRigidBodyMsgPayload:
_LinearTranslationRigidBodyMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _LinearTranslationRigidBodyMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _LinearTranslationRigidBodyMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _LinearTranslationRigidBodyMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _LinearTranslationRigidBodyMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _LinearTranslationRigidBodyMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _LinearTranslationRigidBodyMsgPayload.NANO2SEC
SEC2NANO = _LinearTranslationRigidBodyMsgPayload.SEC2NANO
SEC2HOUR = _LinearTranslationRigidBodyMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _LinearTranslationRigidBodyMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _LinearTranslationRigidBodyMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _LinearTranslationRigidBodyMsgPayload.secToNano(seconds)
BOOL_FALSE = _LinearTranslationRigidBodyMsgPayload.BOOL_FALSE
BOOL_TRUE = _LinearTranslationRigidBodyMsgPayload.BOOL_TRUE
AVAILABLE = _LinearTranslationRigidBodyMsgPayload.AVAILABLE
UNAVAILABLE = _LinearTranslationRigidBodyMsgPayload.UNAVAILABLE
BalancedWheels = _LinearTranslationRigidBodyMsgPayload.BalancedWheels
JitterSimple = _LinearTranslationRigidBodyMsgPayload.JitterSimple
JitterFullyCoupled = _LinearTranslationRigidBodyMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LinearTranslationRigidBodyMsgPayload.SysModel_swiginit(self, _LinearTranslationRigidBodyMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _LinearTranslationRigidBodyMsgPayload.delete_SysModel

    def SelfInit(self):
        return _LinearTranslationRigidBodyMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _LinearTranslationRigidBodyMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _LinearTranslationRigidBodyMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _LinearTranslationRigidBodyMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_LinearTranslationRigidBodyMsgPayload.SysModel_ModelTag_get, _LinearTranslationRigidBodyMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_LinearTranslationRigidBodyMsgPayload.SysModel_CallCounts_get, _LinearTranslationRigidBodyMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_LinearTranslationRigidBodyMsgPayload.SysModel_RNGSeed_get, _LinearTranslationRigidBodyMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_LinearTranslationRigidBodyMsgPayload.SysModel_moduleID_get, _LinearTranslationRigidBodyMsgPayload.SysModel_moduleID_set)

# Register SysModel in _LinearTranslationRigidBodyMsgPayload:
_LinearTranslationRigidBodyMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _LinearTranslationRigidBodyMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _LinearTranslationRigidBodyMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _LinearTranslationRigidBodyMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _LinearTranslationRigidBodyMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _LinearTranslationRigidBodyMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _LinearTranslationRigidBodyMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _LinearTranslationRigidBodyMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _LinearTranslationRigidBodyMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _LinearTranslationRigidBodyMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _LinearTranslationRigidBodyMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _LinearTranslationRigidBodyMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _LinearTranslationRigidBodyMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class LinearTranslationRigidBodyMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rho = property(_LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayload_rho_get, _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayload_rho_set)
    rhoDot = property(_LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayload_rhoDot_get, _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayload_rhoDot_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayload_swiginit(self, _LinearTranslationRigidBodyMsgPayload.new_LinearTranslationRigidBodyMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _LinearTranslationRigidBodyMsgPayload.delete_LinearTranslationRigidBodyMsgPayload

# Register LinearTranslationRigidBodyMsgPayload in _LinearTranslationRigidBodyMsgPayload:
_LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayload_swigregister(LinearTranslationRigidBodyMsgPayload)

def _pprint_LinearTranslationRigidBodyMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[LinearTranslationRigidBodyMsgPayload.__repr__] = _pprint_LinearTranslationRigidBodyMsgPayload

class LinearTranslationRigidBodyMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgReader_bskLogger_get, _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgReader_bskLogger_set)
    zeroMsgPayload = property(_LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgReader_zeroMsgPayload_get, _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgReader_swiginit(self, _LinearTranslationRigidBodyMsgPayload.new_LinearTranslationRigidBodyMsgReader(*args))

    def __call__(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgReader___call__(self)

    def isLinked(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgReader_isLinked(self)

    def isWritten(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgReader_isWritten(self)

    def timeWritten(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgReader_timeWritten(self)

    def moduleID(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == LinearTranslationRigidBodyMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.LinearTranslationRigidBodyMsgPayload import LinearTranslationRigidBodyMsg_C
            if type(source) == LinearTranslationRigidBodyMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<LinearTranslationRigidBodyMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == LinearTranslationRigidBodyMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.LinearTranslationRigidBodyMsgPayload import LinearTranslationRigidBodyMsg_C
        except ImportError:
            return 0

        if type(source) == LinearTranslationRigidBodyMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _LinearTranslationRigidBodyMsgPayload.delete_LinearTranslationRigidBodyMsgReader

# Register LinearTranslationRigidBodyMsgReader in _LinearTranslationRigidBodyMsgPayload:
_LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgReader_swigregister(LinearTranslationRigidBodyMsgReader)
class LinearTranslationRigidBodyMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgWriter_swiginit(self, _LinearTranslationRigidBodyMsgPayload.new_LinearTranslationRigidBodyMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _LinearTranslationRigidBodyMsgPayload.delete_LinearTranslationRigidBodyMsgWriter

# Register LinearTranslationRigidBodyMsgWriter in _LinearTranslationRigidBodyMsgPayload:
_LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgWriter_swigregister(LinearTranslationRigidBodyMsgWriter)
class LinearTranslationRigidBodyMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_write_get, _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_write_set)

    def addSubscriber(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_addSubscriber(self)

    def addAuthor(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_zeroMsgPayload_get, _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_isLinked(self)

    def getPayloadSize(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_swiginit(self, _LinearTranslationRigidBodyMsgPayload.new_LinearTranslationRigidBodyMsg())
    __swig_destroy__ = _LinearTranslationRigidBodyMsgPayload.delete_LinearTranslationRigidBodyMsg

# Register LinearTranslationRigidBodyMsg in _LinearTranslationRigidBodyMsgPayload:
_LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_swigregister(LinearTranslationRigidBodyMsg)
class LinearTranslationRigidBodyMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgRecorder_swiginit(self, _LinearTranslationRigidBodyMsgPayload.new_LinearTranslationRigidBodyMsgRecorder(*args))
    __swig_destroy__ = _LinearTranslationRigidBodyMsgPayload.delete_LinearTranslationRigidBodyMsgRecorder

    def SelfInit(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgRecorder___record_vector(self)

    def size(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgRecorder_clear(self)
    bskLogger = property(_LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgRecorder_bskLogger_get, _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgRecorder_updateTimeInterval(self, timeDiff)

    def _rho_array(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgRecorder__rho_array(self)

    @property
    def rho(self):
        return self._rho_array()


    def _rhoDot_array(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgRecorder__rhoDot_array(self)

    @property
    def rhoDot(self):
        return self._rhoDot_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register LinearTranslationRigidBodyMsgRecorder in _LinearTranslationRigidBodyMsgPayload:
_LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgRecorder_swigregister(LinearTranslationRigidBodyMsgRecorder)
class LinearTranslationRigidBodyMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayloadVector___bool__(self)

    def __len__(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayloadVector_pop(self)

    def append(self, x):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayloadVector_append(self, x)

    def empty(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayloadVector_empty(self)

    def size(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayloadVector_size(self)

    def swap(self, v):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayloadVector_swap(self, v)

    def begin(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayloadVector_begin(self)

    def end(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayloadVector_end(self)

    def rbegin(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayloadVector_rbegin(self)

    def rend(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayloadVector_rend(self)

    def clear(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayloadVector_swiginit(self, _LinearTranslationRigidBodyMsgPayload.new_LinearTranslationRigidBodyMsgPayloadVector(*args))

    def push_back(self, x):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayloadVector_push_back(self, x)

    def front(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayloadVector_front(self)

    def back(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayloadVector_capacity(self)

    def get_all(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _LinearTranslationRigidBodyMsgPayload.delete_LinearTranslationRigidBodyMsgPayloadVector

# Register LinearTranslationRigidBodyMsgPayloadVector in _LinearTranslationRigidBodyMsgPayload:
_LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgPayloadVector_swigregister(LinearTranslationRigidBodyMsgPayloadVector)
class LinearTranslationRigidBodyMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsVector_empty(self)

    def size(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsVector_begin(self)

    def end(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsVector_rend(self)

    def clear(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsVector_swiginit(self, _LinearTranslationRigidBodyMsgPayload.new_LinearTranslationRigidBodyMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsVector_front(self)

    def back(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _LinearTranslationRigidBodyMsgPayload.delete_LinearTranslationRigidBodyMsgOutMsgsVector

# Register LinearTranslationRigidBodyMsgOutMsgsVector in _LinearTranslationRigidBodyMsgPayload:
_LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsVector_swigregister(LinearTranslationRigidBodyMsgOutMsgsVector)
class LinearTranslationRigidBodyMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsPtrVector_swiginit(self, _LinearTranslationRigidBodyMsgPayload.new_LinearTranslationRigidBodyMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _LinearTranslationRigidBodyMsgPayload.delete_LinearTranslationRigidBodyMsgOutMsgsPtrVector

# Register LinearTranslationRigidBodyMsgOutMsgsPtrVector in _LinearTranslationRigidBodyMsgPayload:
_LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgOutMsgsPtrVector_swigregister(LinearTranslationRigidBodyMsgOutMsgsPtrVector)
class LinearTranslationRigidBodyMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgInMsgsVector_pop(self)

    def append(self, x):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgInMsgsVector_append(self, x)

    def empty(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgInMsgsVector_empty(self)

    def size(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgInMsgsVector_size(self)

    def swap(self, v):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgInMsgsVector_begin(self)

    def end(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgInMsgsVector_end(self)

    def rbegin(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgInMsgsVector_rend(self)

    def clear(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgInMsgsVector_swiginit(self, _LinearTranslationRigidBodyMsgPayload.new_LinearTranslationRigidBodyMsgInMsgsVector(*args))

    def push_back(self, x):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgInMsgsVector_front(self)

    def back(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _LinearTranslationRigidBodyMsgPayload.delete_LinearTranslationRigidBodyMsgInMsgsVector

# Register LinearTranslationRigidBodyMsgInMsgsVector in _LinearTranslationRigidBodyMsgPayload:
_LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsgInMsgsVector_swigregister(LinearTranslationRigidBodyMsgInMsgsVector)
class LinearTranslationRigidBodyMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_C_header_get, _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_C_header_set)
    payload = property(_LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_C_payload_get, _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_C_payload_set)
    payloadPointer = property(_LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_C_payloadPointer_get, _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_C_payloadPointer_set)
    headerPointer = property(_LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_C_headerPointer_get, _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import LinearTranslationRigidBodyMsg
        if type(source) == type(self):
            LinearTranslationRigidBodyMsg_C_subscribe(self, source)
        elif type(source) == LinearTranslationRigidBodyMsg:
            LinearTranslationRigidBodyMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            LinearTranslationRigidBodyMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe LinearTranslationRigidBodyMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        LinearTranslationRigidBodyMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import LinearTranslationRigidBodyMsg
        if type(source) == type(self):
            return (LinearTranslationRigidBodyMsg_C_isSubscribedTo(self, source))
        elif type(source) == LinearTranslationRigidBodyMsg:
            return (LinearTranslationRigidBodyMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (LinearTranslationRigidBodyMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        LinearTranslationRigidBodyMsg_C_addAuthor(self, self)
        if data:
            LinearTranslationRigidBodyMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        LinearTranslationRigidBodyMsg_C_addAuthor(self, self)
        LinearTranslationRigidBodyMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return LinearTranslationRigidBodyMsg_C_read(self)


    def __init__(self):
        _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_C_swiginit(self, _LinearTranslationRigidBodyMsgPayload.new_LinearTranslationRigidBodyMsg_C())
    __swig_destroy__ = _LinearTranslationRigidBodyMsgPayload.delete_LinearTranslationRigidBodyMsg_C

# Register LinearTranslationRigidBodyMsg_C in _LinearTranslationRigidBodyMsgPayload:
_LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_C_swigregister(LinearTranslationRigidBodyMsg_C)

def LinearTranslationRigidBodyMsg_cpp_subscribe(subscriber, source):
    return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_cpp_subscribe(subscriber, source)

def LinearTranslationRigidBodyMsg_C_subscribe(subscriber, source):
    return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_C_subscribe(subscriber, source)

def LinearTranslationRigidBodyMsg_addr_subscribe(subscriber, sourceAddr):
    return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_addr_subscribe(subscriber, sourceAddr)

def LinearTranslationRigidBodyMsg_unsubscribe(subscriber):
    return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_unsubscribe(subscriber)

def LinearTranslationRigidBodyMsg_C_isSubscribedTo(subscriber, source):
    return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_C_isSubscribedTo(subscriber, source)

def LinearTranslationRigidBodyMsg_cpp_isSubscribedTo(subscriber, source):
    return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_cpp_isSubscribedTo(subscriber, source)

def LinearTranslationRigidBodyMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def LinearTranslationRigidBodyMsg_C_addAuthor(coowner, data):
    return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_C_addAuthor(coowner, data)

def LinearTranslationRigidBodyMsg_C_init(owner):
    return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_C_init(owner)

def LinearTranslationRigidBodyMsg_C_isLinked(data):
    return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_C_isLinked(data)

def LinearTranslationRigidBodyMsg_C_isWritten(data):
    return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_C_isWritten(data)

def LinearTranslationRigidBodyMsg_C_timeWritten(data):
    return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_C_timeWritten(data)

def LinearTranslationRigidBodyMsg_C_moduleID(data):
    return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_C_moduleID(data)

def LinearTranslationRigidBodyMsg_C_write(data, destination, moduleID, callTime):
    return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_C_write(data, destination, moduleID, callTime)

def LinearTranslationRigidBodyMsg_C_read(source):
    return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_C_read(source)

def LinearTranslationRigidBodyMsg_C_zeroMsgPayload():
    return _LinearTranslationRigidBodyMsgPayload.LinearTranslationRigidBodyMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_LinearTranslationRigidBodyMsgPayload.MsgHeader_isLinked_get, _LinearTranslationRigidBodyMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_LinearTranslationRigidBodyMsgPayload.MsgHeader_isWritten_get, _LinearTranslationRigidBodyMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_LinearTranslationRigidBodyMsgPayload.MsgHeader_timeWritten_get, _LinearTranslationRigidBodyMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_LinearTranslationRigidBodyMsgPayload.MsgHeader_moduleID_get, _LinearTranslationRigidBodyMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _LinearTranslationRigidBodyMsgPayload.MsgHeader_swiginit(self, _LinearTranslationRigidBodyMsgPayload.new_MsgHeader())
    __swig_destroy__ = _LinearTranslationRigidBodyMsgPayload.delete_MsgHeader

# Register MsgHeader in _LinearTranslationRigidBodyMsgPayload:
_LinearTranslationRigidBodyMsgPayload.MsgHeader_swigregister(MsgHeader)

