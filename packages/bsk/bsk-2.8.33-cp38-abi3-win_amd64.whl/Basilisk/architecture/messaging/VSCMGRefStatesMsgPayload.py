# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _VSCMGRefStatesMsgPayload
else:
    import _VSCMGRefStatesMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VSCMGRefStatesMsgPayload.delete_SwigPyIterator

    def value(self):
        return _VSCMGRefStatesMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VSCMGRefStatesMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VSCMGRefStatesMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VSCMGRefStatesMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VSCMGRefStatesMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VSCMGRefStatesMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _VSCMGRefStatesMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _VSCMGRefStatesMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _VSCMGRefStatesMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VSCMGRefStatesMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VSCMGRefStatesMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VSCMGRefStatesMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VSCMGRefStatesMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VSCMGRefStatesMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VSCMGRefStatesMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VSCMGRefStatesMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _VSCMGRefStatesMsgPayload:
_VSCMGRefStatesMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _VSCMGRefStatesMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _VSCMGRefStatesMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _VSCMGRefStatesMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _VSCMGRefStatesMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _VSCMGRefStatesMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _VSCMGRefStatesMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _VSCMGRefStatesMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _VSCMGRefStatesMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _VSCMGRefStatesMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _VSCMGRefStatesMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _VSCMGRefStatesMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _VSCMGRefStatesMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _VSCMGRefStatesMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _VSCMGRefStatesMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _VSCMGRefStatesMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _VSCMGRefStatesMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGRefStatesMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGRefStatesMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGRefStatesMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _VSCMGRefStatesMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGRefStatesMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGRefStatesMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGRefStatesMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGRefStatesMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGRefStatesMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGRefStatesMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGRefStatesMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _VSCMGRefStatesMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _VSCMGRefStatesMsgPayload.TimeVector_empty(self)

    def size(self):
        return _VSCMGRefStatesMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _VSCMGRefStatesMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _VSCMGRefStatesMsgPayload.TimeVector_begin(self)

    def end(self):
        return _VSCMGRefStatesMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _VSCMGRefStatesMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _VSCMGRefStatesMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _VSCMGRefStatesMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _VSCMGRefStatesMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGRefStatesMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGRefStatesMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGRefStatesMsgPayload.TimeVector_swiginit(self, _VSCMGRefStatesMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _VSCMGRefStatesMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _VSCMGRefStatesMsgPayload.TimeVector_front(self)

    def back(self):
        return _VSCMGRefStatesMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _VSCMGRefStatesMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGRefStatesMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGRefStatesMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGRefStatesMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _VSCMGRefStatesMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _VSCMGRefStatesMsgPayload.delete_TimeVector

# Register TimeVector in _VSCMGRefStatesMsgPayload:
_VSCMGRefStatesMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGRefStatesMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGRefStatesMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGRefStatesMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _VSCMGRefStatesMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGRefStatesMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGRefStatesMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGRefStatesMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGRefStatesMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGRefStatesMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGRefStatesMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGRefStatesMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _VSCMGRefStatesMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _VSCMGRefStatesMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _VSCMGRefStatesMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _VSCMGRefStatesMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _VSCMGRefStatesMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _VSCMGRefStatesMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _VSCMGRefStatesMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _VSCMGRefStatesMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _VSCMGRefStatesMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _VSCMGRefStatesMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGRefStatesMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGRefStatesMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGRefStatesMsgPayload.DoubleVector_swiginit(self, _VSCMGRefStatesMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _VSCMGRefStatesMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _VSCMGRefStatesMsgPayload.DoubleVector_front(self)

    def back(self):
        return _VSCMGRefStatesMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _VSCMGRefStatesMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGRefStatesMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGRefStatesMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGRefStatesMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _VSCMGRefStatesMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _VSCMGRefStatesMsgPayload.delete_DoubleVector

# Register DoubleVector in _VSCMGRefStatesMsgPayload:
_VSCMGRefStatesMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGRefStatesMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGRefStatesMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGRefStatesMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _VSCMGRefStatesMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGRefStatesMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGRefStatesMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGRefStatesMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGRefStatesMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGRefStatesMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGRefStatesMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGRefStatesMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _VSCMGRefStatesMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _VSCMGRefStatesMsgPayload.StringVector_empty(self)

    def size(self):
        return _VSCMGRefStatesMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _VSCMGRefStatesMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _VSCMGRefStatesMsgPayload.StringVector_begin(self)

    def end(self):
        return _VSCMGRefStatesMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _VSCMGRefStatesMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _VSCMGRefStatesMsgPayload.StringVector_rend(self)

    def clear(self):
        return _VSCMGRefStatesMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _VSCMGRefStatesMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGRefStatesMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGRefStatesMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGRefStatesMsgPayload.StringVector_swiginit(self, _VSCMGRefStatesMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _VSCMGRefStatesMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _VSCMGRefStatesMsgPayload.StringVector_front(self)

    def back(self):
        return _VSCMGRefStatesMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _VSCMGRefStatesMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGRefStatesMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGRefStatesMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGRefStatesMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _VSCMGRefStatesMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _VSCMGRefStatesMsgPayload.delete_StringVector

# Register StringVector in _VSCMGRefStatesMsgPayload:
_VSCMGRefStatesMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _VSCMGRefStatesMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _VSCMGRefStatesMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _VSCMGRefStatesMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _VSCMGRefStatesMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _VSCMGRefStatesMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _VSCMGRefStatesMsgPayload.NANO2SEC
SEC2NANO = _VSCMGRefStatesMsgPayload.SEC2NANO
SEC2HOUR = _VSCMGRefStatesMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _VSCMGRefStatesMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _VSCMGRefStatesMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _VSCMGRefStatesMsgPayload.secToNano(seconds)
BOOL_FALSE = _VSCMGRefStatesMsgPayload.BOOL_FALSE
BOOL_TRUE = _VSCMGRefStatesMsgPayload.BOOL_TRUE
AVAILABLE = _VSCMGRefStatesMsgPayload.AVAILABLE
UNAVAILABLE = _VSCMGRefStatesMsgPayload.UNAVAILABLE
BalancedWheels = _VSCMGRefStatesMsgPayload.BalancedWheels
JitterSimple = _VSCMGRefStatesMsgPayload.JitterSimple
JitterFullyCoupled = _VSCMGRefStatesMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VSCMGRefStatesMsgPayload.SysModel_swiginit(self, _VSCMGRefStatesMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _VSCMGRefStatesMsgPayload.delete_SysModel

    def SelfInit(self):
        return _VSCMGRefStatesMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _VSCMGRefStatesMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _VSCMGRefStatesMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _VSCMGRefStatesMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_VSCMGRefStatesMsgPayload.SysModel_ModelTag_get, _VSCMGRefStatesMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_VSCMGRefStatesMsgPayload.SysModel_CallCounts_get, _VSCMGRefStatesMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_VSCMGRefStatesMsgPayload.SysModel_RNGSeed_get, _VSCMGRefStatesMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_VSCMGRefStatesMsgPayload.SysModel_moduleID_get, _VSCMGRefStatesMsgPayload.SysModel_moduleID_set)

# Register SysModel in _VSCMGRefStatesMsgPayload:
_VSCMGRefStatesMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _VSCMGRefStatesMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _VSCMGRefStatesMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _VSCMGRefStatesMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _VSCMGRefStatesMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _VSCMGRefStatesMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _VSCMGRefStatesMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _VSCMGRefStatesMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _VSCMGRefStatesMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _VSCMGRefStatesMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _VSCMGRefStatesMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _VSCMGRefStatesMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _VSCMGRefStatesMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class VSCMGRefStatesMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    wheelAccels = property(_VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayload_wheelAccels_get, _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayload_wheelAccels_set)
    gimbalRates = property(_VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayload_gimbalRates_get, _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayload_gimbalRates_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayload_swiginit(self, _VSCMGRefStatesMsgPayload.new_VSCMGRefStatesMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _VSCMGRefStatesMsgPayload.delete_VSCMGRefStatesMsgPayload

# Register VSCMGRefStatesMsgPayload in _VSCMGRefStatesMsgPayload:
_VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayload_swigregister(VSCMGRefStatesMsgPayload)

def _pprint_VSCMGRefStatesMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[VSCMGRefStatesMsgPayload.__repr__] = _pprint_VSCMGRefStatesMsgPayload

class VSCMGRefStatesMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgReader_bskLogger_get, _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgReader_bskLogger_set)
    zeroMsgPayload = property(_VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgReader_zeroMsgPayload_get, _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgReader_swiginit(self, _VSCMGRefStatesMsgPayload.new_VSCMGRefStatesMsgReader(*args))

    def __call__(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgReader___call__(self)

    def isLinked(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgReader_isLinked(self)

    def isWritten(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgReader_isWritten(self)

    def timeWritten(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgReader_timeWritten(self)

    def moduleID(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == VSCMGRefStatesMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.VSCMGRefStatesMsgPayload import VSCMGRefStatesMsg_C
            if type(source) == VSCMGRefStatesMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<VSCMGRefStatesMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == VSCMGRefStatesMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.VSCMGRefStatesMsgPayload import VSCMGRefStatesMsg_C
        except ImportError:
            return 0

        if type(source) == VSCMGRefStatesMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _VSCMGRefStatesMsgPayload.delete_VSCMGRefStatesMsgReader

# Register VSCMGRefStatesMsgReader in _VSCMGRefStatesMsgPayload:
_VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgReader_swigregister(VSCMGRefStatesMsgReader)
class VSCMGRefStatesMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgWriter_swiginit(self, _VSCMGRefStatesMsgPayload.new_VSCMGRefStatesMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _VSCMGRefStatesMsgPayload.delete_VSCMGRefStatesMsgWriter

# Register VSCMGRefStatesMsgWriter in _VSCMGRefStatesMsgPayload:
_VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgWriter_swigregister(VSCMGRefStatesMsgWriter)
class VSCMGRefStatesMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_write_get, _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_write_set)

    def addSubscriber(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_addSubscriber(self)

    def addAuthor(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_zeroMsgPayload_get, _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_isLinked(self)

    def getPayloadSize(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_swiginit(self, _VSCMGRefStatesMsgPayload.new_VSCMGRefStatesMsg())
    __swig_destroy__ = _VSCMGRefStatesMsgPayload.delete_VSCMGRefStatesMsg

# Register VSCMGRefStatesMsg in _VSCMGRefStatesMsgPayload:
_VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_swigregister(VSCMGRefStatesMsg)
class VSCMGRefStatesMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgRecorder_swiginit(self, _VSCMGRefStatesMsgPayload.new_VSCMGRefStatesMsgRecorder(*args))
    __swig_destroy__ = _VSCMGRefStatesMsgPayload.delete_VSCMGRefStatesMsgRecorder

    def SelfInit(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgRecorder___record_vector(self)

    def size(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgRecorder_clear(self)
    bskLogger = property(_VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgRecorder_bskLogger_get, _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgRecorder_updateTimeInterval(self, timeDiff)

    def _wheelAccels_array(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgRecorder__wheelAccels_array(self)

    @property
    def wheelAccels(self):
        return self._wheelAccels_array()


    def _gimbalRates_array(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgRecorder__gimbalRates_array(self)

    @property
    def gimbalRates(self):
        return self._gimbalRates_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register VSCMGRefStatesMsgRecorder in _VSCMGRefStatesMsgPayload:
_VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgRecorder_swigregister(VSCMGRefStatesMsgRecorder)
class VSCMGRefStatesMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayloadVector___bool__(self)

    def __len__(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayloadVector_pop(self)

    def append(self, x):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayloadVector_append(self, x)

    def empty(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayloadVector_empty(self)

    def size(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayloadVector_size(self)

    def swap(self, v):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayloadVector_swap(self, v)

    def begin(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayloadVector_begin(self)

    def end(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayloadVector_end(self)

    def rbegin(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayloadVector_rbegin(self)

    def rend(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayloadVector_rend(self)

    def clear(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayloadVector_swiginit(self, _VSCMGRefStatesMsgPayload.new_VSCMGRefStatesMsgPayloadVector(*args))

    def push_back(self, x):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayloadVector_push_back(self, x)

    def front(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayloadVector_front(self)

    def back(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayloadVector_capacity(self)

    def get_all(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _VSCMGRefStatesMsgPayload.delete_VSCMGRefStatesMsgPayloadVector

# Register VSCMGRefStatesMsgPayloadVector in _VSCMGRefStatesMsgPayload:
_VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgPayloadVector_swigregister(VSCMGRefStatesMsgPayloadVector)
class VSCMGRefStatesMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsVector_empty(self)

    def size(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsVector_begin(self)

    def end(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsVector_rend(self)

    def clear(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsVector_swiginit(self, _VSCMGRefStatesMsgPayload.new_VSCMGRefStatesMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsVector_front(self)

    def back(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _VSCMGRefStatesMsgPayload.delete_VSCMGRefStatesMsgOutMsgsVector

# Register VSCMGRefStatesMsgOutMsgsVector in _VSCMGRefStatesMsgPayload:
_VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsVector_swigregister(VSCMGRefStatesMsgOutMsgsVector)
class VSCMGRefStatesMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsPtrVector_swiginit(self, _VSCMGRefStatesMsgPayload.new_VSCMGRefStatesMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _VSCMGRefStatesMsgPayload.delete_VSCMGRefStatesMsgOutMsgsPtrVector

# Register VSCMGRefStatesMsgOutMsgsPtrVector in _VSCMGRefStatesMsgPayload:
_VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgOutMsgsPtrVector_swigregister(VSCMGRefStatesMsgOutMsgsPtrVector)
class VSCMGRefStatesMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgInMsgsVector_pop(self)

    def append(self, x):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgInMsgsVector_append(self, x)

    def empty(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgInMsgsVector_empty(self)

    def size(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgInMsgsVector_size(self)

    def swap(self, v):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgInMsgsVector_begin(self)

    def end(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgInMsgsVector_end(self)

    def rbegin(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgInMsgsVector_rend(self)

    def clear(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgInMsgsVector_swiginit(self, _VSCMGRefStatesMsgPayload.new_VSCMGRefStatesMsgInMsgsVector(*args))

    def push_back(self, x):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgInMsgsVector_front(self)

    def back(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _VSCMGRefStatesMsgPayload.delete_VSCMGRefStatesMsgInMsgsVector

# Register VSCMGRefStatesMsgInMsgsVector in _VSCMGRefStatesMsgPayload:
_VSCMGRefStatesMsgPayload.VSCMGRefStatesMsgInMsgsVector_swigregister(VSCMGRefStatesMsgInMsgsVector)
class VSCMGRefStatesMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_C_header_get, _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_C_header_set)
    payload = property(_VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_C_payload_get, _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_C_payload_set)
    payloadPointer = property(_VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_C_payloadPointer_get, _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_C_payloadPointer_set)
    headerPointer = property(_VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_C_headerPointer_get, _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import VSCMGRefStatesMsg
        if type(source) == type(self):
            VSCMGRefStatesMsg_C_subscribe(self, source)
        elif type(source) == VSCMGRefStatesMsg:
            VSCMGRefStatesMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            VSCMGRefStatesMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe VSCMGRefStatesMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        VSCMGRefStatesMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import VSCMGRefStatesMsg
        if type(source) == type(self):
            return (VSCMGRefStatesMsg_C_isSubscribedTo(self, source))
        elif type(source) == VSCMGRefStatesMsg:
            return (VSCMGRefStatesMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (VSCMGRefStatesMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        VSCMGRefStatesMsg_C_addAuthor(self, self)
        if data:
            VSCMGRefStatesMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        VSCMGRefStatesMsg_C_addAuthor(self, self)
        VSCMGRefStatesMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return VSCMGRefStatesMsg_C_read(self)


    def __init__(self):
        _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_C_swiginit(self, _VSCMGRefStatesMsgPayload.new_VSCMGRefStatesMsg_C())
    __swig_destroy__ = _VSCMGRefStatesMsgPayload.delete_VSCMGRefStatesMsg_C

# Register VSCMGRefStatesMsg_C in _VSCMGRefStatesMsgPayload:
_VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_C_swigregister(VSCMGRefStatesMsg_C)

def VSCMGRefStatesMsg_cpp_subscribe(subscriber, source):
    return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_cpp_subscribe(subscriber, source)

def VSCMGRefStatesMsg_C_subscribe(subscriber, source):
    return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_C_subscribe(subscriber, source)

def VSCMGRefStatesMsg_addr_subscribe(subscriber, sourceAddr):
    return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_addr_subscribe(subscriber, sourceAddr)

def VSCMGRefStatesMsg_unsubscribe(subscriber):
    return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_unsubscribe(subscriber)

def VSCMGRefStatesMsg_C_isSubscribedTo(subscriber, source):
    return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_C_isSubscribedTo(subscriber, source)

def VSCMGRefStatesMsg_cpp_isSubscribedTo(subscriber, source):
    return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_cpp_isSubscribedTo(subscriber, source)

def VSCMGRefStatesMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def VSCMGRefStatesMsg_C_addAuthor(coowner, data):
    return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_C_addAuthor(coowner, data)

def VSCMGRefStatesMsg_C_init(owner):
    return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_C_init(owner)

def VSCMGRefStatesMsg_C_isLinked(data):
    return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_C_isLinked(data)

def VSCMGRefStatesMsg_C_isWritten(data):
    return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_C_isWritten(data)

def VSCMGRefStatesMsg_C_timeWritten(data):
    return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_C_timeWritten(data)

def VSCMGRefStatesMsg_C_moduleID(data):
    return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_C_moduleID(data)

def VSCMGRefStatesMsg_C_write(data, destination, moduleID, callTime):
    return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_C_write(data, destination, moduleID, callTime)

def VSCMGRefStatesMsg_C_read(source):
    return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_C_read(source)

def VSCMGRefStatesMsg_C_zeroMsgPayload():
    return _VSCMGRefStatesMsgPayload.VSCMGRefStatesMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_VSCMGRefStatesMsgPayload.MsgHeader_isLinked_get, _VSCMGRefStatesMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_VSCMGRefStatesMsgPayload.MsgHeader_isWritten_get, _VSCMGRefStatesMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_VSCMGRefStatesMsgPayload.MsgHeader_timeWritten_get, _VSCMGRefStatesMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_VSCMGRefStatesMsgPayload.MsgHeader_moduleID_get, _VSCMGRefStatesMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _VSCMGRefStatesMsgPayload.MsgHeader_swiginit(self, _VSCMGRefStatesMsgPayload.new_MsgHeader())
    __swig_destroy__ = _VSCMGRefStatesMsgPayload.delete_MsgHeader

# Register MsgHeader in _VSCMGRefStatesMsgPayload:
_VSCMGRefStatesMsgPayload.MsgHeader_swigregister(MsgHeader)

