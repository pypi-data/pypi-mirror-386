# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _OpNavLimbMsgPayload
else:
    import _OpNavLimbMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _OpNavLimbMsgPayload.delete_SwigPyIterator

    def value(self):
        return _OpNavLimbMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _OpNavLimbMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _OpNavLimbMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _OpNavLimbMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _OpNavLimbMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _OpNavLimbMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _OpNavLimbMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _OpNavLimbMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _OpNavLimbMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _OpNavLimbMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _OpNavLimbMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _OpNavLimbMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _OpNavLimbMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _OpNavLimbMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _OpNavLimbMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _OpNavLimbMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _OpNavLimbMsgPayload:
_OpNavLimbMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _OpNavLimbMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _OpNavLimbMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _OpNavLimbMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _OpNavLimbMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _OpNavLimbMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _OpNavLimbMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _OpNavLimbMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _OpNavLimbMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _OpNavLimbMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _OpNavLimbMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _OpNavLimbMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _OpNavLimbMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _OpNavLimbMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _OpNavLimbMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _OpNavLimbMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _OpNavLimbMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _OpNavLimbMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OpNavLimbMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _OpNavLimbMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _OpNavLimbMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _OpNavLimbMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OpNavLimbMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OpNavLimbMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OpNavLimbMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OpNavLimbMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OpNavLimbMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _OpNavLimbMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _OpNavLimbMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _OpNavLimbMsgPayload.TimeVector_empty(self)

    def size(self):
        return _OpNavLimbMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _OpNavLimbMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _OpNavLimbMsgPayload.TimeVector_begin(self)

    def end(self):
        return _OpNavLimbMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _OpNavLimbMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _OpNavLimbMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _OpNavLimbMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _OpNavLimbMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _OpNavLimbMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _OpNavLimbMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _OpNavLimbMsgPayload.TimeVector_swiginit(self, _OpNavLimbMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _OpNavLimbMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _OpNavLimbMsgPayload.TimeVector_front(self)

    def back(self):
        return _OpNavLimbMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _OpNavLimbMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _OpNavLimbMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _OpNavLimbMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _OpNavLimbMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _OpNavLimbMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _OpNavLimbMsgPayload.delete_TimeVector

# Register TimeVector in _OpNavLimbMsgPayload:
_OpNavLimbMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _OpNavLimbMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OpNavLimbMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _OpNavLimbMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _OpNavLimbMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _OpNavLimbMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OpNavLimbMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OpNavLimbMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OpNavLimbMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OpNavLimbMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OpNavLimbMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _OpNavLimbMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _OpNavLimbMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _OpNavLimbMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _OpNavLimbMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _OpNavLimbMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _OpNavLimbMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _OpNavLimbMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _OpNavLimbMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _OpNavLimbMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _OpNavLimbMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _OpNavLimbMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _OpNavLimbMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _OpNavLimbMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _OpNavLimbMsgPayload.DoubleVector_swiginit(self, _OpNavLimbMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _OpNavLimbMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _OpNavLimbMsgPayload.DoubleVector_front(self)

    def back(self):
        return _OpNavLimbMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _OpNavLimbMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _OpNavLimbMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _OpNavLimbMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _OpNavLimbMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _OpNavLimbMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _OpNavLimbMsgPayload.delete_DoubleVector

# Register DoubleVector in _OpNavLimbMsgPayload:
_OpNavLimbMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _OpNavLimbMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OpNavLimbMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _OpNavLimbMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _OpNavLimbMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _OpNavLimbMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OpNavLimbMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OpNavLimbMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OpNavLimbMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OpNavLimbMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OpNavLimbMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _OpNavLimbMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _OpNavLimbMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _OpNavLimbMsgPayload.StringVector_empty(self)

    def size(self):
        return _OpNavLimbMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _OpNavLimbMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _OpNavLimbMsgPayload.StringVector_begin(self)

    def end(self):
        return _OpNavLimbMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _OpNavLimbMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _OpNavLimbMsgPayload.StringVector_rend(self)

    def clear(self):
        return _OpNavLimbMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _OpNavLimbMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _OpNavLimbMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _OpNavLimbMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _OpNavLimbMsgPayload.StringVector_swiginit(self, _OpNavLimbMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _OpNavLimbMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _OpNavLimbMsgPayload.StringVector_front(self)

    def back(self):
        return _OpNavLimbMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _OpNavLimbMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _OpNavLimbMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _OpNavLimbMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _OpNavLimbMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _OpNavLimbMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _OpNavLimbMsgPayload.delete_StringVector

# Register StringVector in _OpNavLimbMsgPayload:
_OpNavLimbMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _OpNavLimbMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _OpNavLimbMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _OpNavLimbMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _OpNavLimbMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _OpNavLimbMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _OpNavLimbMsgPayload.NANO2SEC
SEC2NANO = _OpNavLimbMsgPayload.SEC2NANO
SEC2HOUR = _OpNavLimbMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _OpNavLimbMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _OpNavLimbMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _OpNavLimbMsgPayload.secToNano(seconds)
BOOL_FALSE = _OpNavLimbMsgPayload.BOOL_FALSE
BOOL_TRUE = _OpNavLimbMsgPayload.BOOL_TRUE
AVAILABLE = _OpNavLimbMsgPayload.AVAILABLE
UNAVAILABLE = _OpNavLimbMsgPayload.UNAVAILABLE
BalancedWheels = _OpNavLimbMsgPayload.BalancedWheels
JitterSimple = _OpNavLimbMsgPayload.JitterSimple
JitterFullyCoupled = _OpNavLimbMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _OpNavLimbMsgPayload.SysModel_swiginit(self, _OpNavLimbMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _OpNavLimbMsgPayload.delete_SysModel

    def SelfInit(self):
        return _OpNavLimbMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _OpNavLimbMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _OpNavLimbMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _OpNavLimbMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_OpNavLimbMsgPayload.SysModel_ModelTag_get, _OpNavLimbMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_OpNavLimbMsgPayload.SysModel_CallCounts_get, _OpNavLimbMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_OpNavLimbMsgPayload.SysModel_RNGSeed_get, _OpNavLimbMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_OpNavLimbMsgPayload.SysModel_moduleID_get, _OpNavLimbMsgPayload.SysModel_moduleID_set)

# Register SysModel in _OpNavLimbMsgPayload:
_OpNavLimbMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _OpNavLimbMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _OpNavLimbMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _OpNavLimbMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _OpNavLimbMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _OpNavLimbMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _OpNavLimbMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _OpNavLimbMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _OpNavLimbMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _OpNavLimbMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _OpNavLimbMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _OpNavLimbMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _OpNavLimbMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class OpNavLimbMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timeTag = property(_OpNavLimbMsgPayload.OpNavLimbMsgPayload_timeTag_get, _OpNavLimbMsgPayload.OpNavLimbMsgPayload_timeTag_set)
    valid = property(_OpNavLimbMsgPayload.OpNavLimbMsgPayload_valid_get, _OpNavLimbMsgPayload.OpNavLimbMsgPayload_valid_set)
    numLimbPoints = property(_OpNavLimbMsgPayload.OpNavLimbMsgPayload_numLimbPoints_get, _OpNavLimbMsgPayload.OpNavLimbMsgPayload_numLimbPoints_set)
    cameraID = property(_OpNavLimbMsgPayload.OpNavLimbMsgPayload_cameraID_get, _OpNavLimbMsgPayload.OpNavLimbMsgPayload_cameraID_set)
    planetIds = property(_OpNavLimbMsgPayload.OpNavLimbMsgPayload_planetIds_get, _OpNavLimbMsgPayload.OpNavLimbMsgPayload_planetIds_set)
    limbPoints = property(_OpNavLimbMsgPayload.OpNavLimbMsgPayload_limbPoints_get, _OpNavLimbMsgPayload.OpNavLimbMsgPayload_limbPoints_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _OpNavLimbMsgPayload.OpNavLimbMsgPayload_swiginit(self, _OpNavLimbMsgPayload.new_OpNavLimbMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _OpNavLimbMsgPayload.delete_OpNavLimbMsgPayload

# Register OpNavLimbMsgPayload in _OpNavLimbMsgPayload:
_OpNavLimbMsgPayload.OpNavLimbMsgPayload_swigregister(OpNavLimbMsgPayload)

def _pprint_OpNavLimbMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[OpNavLimbMsgPayload.__repr__] = _pprint_OpNavLimbMsgPayload

class OpNavLimbMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_OpNavLimbMsgPayload.OpNavLimbMsgReader_bskLogger_get, _OpNavLimbMsgPayload.OpNavLimbMsgReader_bskLogger_set)
    zeroMsgPayload = property(_OpNavLimbMsgPayload.OpNavLimbMsgReader_zeroMsgPayload_get, _OpNavLimbMsgPayload.OpNavLimbMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _OpNavLimbMsgPayload.OpNavLimbMsgReader_swiginit(self, _OpNavLimbMsgPayload.new_OpNavLimbMsgReader(*args))

    def __call__(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgReader___call__(self)

    def isLinked(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgReader_isLinked(self)

    def isWritten(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgReader_isWritten(self)

    def timeWritten(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgReader_timeWritten(self)

    def moduleID(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _OpNavLimbMsgPayload.OpNavLimbMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _OpNavLimbMsgPayload.OpNavLimbMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _OpNavLimbMsgPayload.OpNavLimbMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _OpNavLimbMsgPayload.OpNavLimbMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _OpNavLimbMsgPayload.OpNavLimbMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _OpNavLimbMsgPayload.OpNavLimbMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _OpNavLimbMsgPayload.OpNavLimbMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _OpNavLimbMsgPayload.OpNavLimbMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _OpNavLimbMsgPayload.OpNavLimbMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == OpNavLimbMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.OpNavLimbMsgPayload import OpNavLimbMsg_C
            if type(source) == OpNavLimbMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<OpNavLimbMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == OpNavLimbMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.OpNavLimbMsgPayload import OpNavLimbMsg_C
        except ImportError:
            return 0

        if type(source) == OpNavLimbMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _OpNavLimbMsgPayload.delete_OpNavLimbMsgReader

# Register OpNavLimbMsgReader in _OpNavLimbMsgPayload:
_OpNavLimbMsgPayload.OpNavLimbMsgReader_swigregister(OpNavLimbMsgReader)
class OpNavLimbMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _OpNavLimbMsgPayload.OpNavLimbMsgWriter_swiginit(self, _OpNavLimbMsgPayload.new_OpNavLimbMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _OpNavLimbMsgPayload.OpNavLimbMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _OpNavLimbMsgPayload.delete_OpNavLimbMsgWriter

# Register OpNavLimbMsgWriter in _OpNavLimbMsgPayload:
_OpNavLimbMsgPayload.OpNavLimbMsgWriter_swigregister(OpNavLimbMsgWriter)
class OpNavLimbMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_OpNavLimbMsgPayload.OpNavLimbMsg_write_get, _OpNavLimbMsgPayload.OpNavLimbMsg_write_set)

    def addSubscriber(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsg_addSubscriber(self)

    def addAuthor(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _OpNavLimbMsgPayload.OpNavLimbMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _OpNavLimbMsgPayload.OpNavLimbMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _OpNavLimbMsgPayload.OpNavLimbMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_OpNavLimbMsgPayload.OpNavLimbMsg_zeroMsgPayload_get, _OpNavLimbMsgPayload.OpNavLimbMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsg_isLinked(self)

    def getPayloadSize(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _OpNavLimbMsgPayload.OpNavLimbMsg_swiginit(self, _OpNavLimbMsgPayload.new_OpNavLimbMsg())
    __swig_destroy__ = _OpNavLimbMsgPayload.delete_OpNavLimbMsg

# Register OpNavLimbMsg in _OpNavLimbMsgPayload:
_OpNavLimbMsgPayload.OpNavLimbMsg_swigregister(OpNavLimbMsg)
class OpNavLimbMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _OpNavLimbMsgPayload.OpNavLimbMsgRecorder_swiginit(self, _OpNavLimbMsgPayload.new_OpNavLimbMsgRecorder(*args))
    __swig_destroy__ = _OpNavLimbMsgPayload.delete_OpNavLimbMsgRecorder

    def SelfInit(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _OpNavLimbMsgPayload.OpNavLimbMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _OpNavLimbMsgPayload.OpNavLimbMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgRecorder___record_vector(self)

    def size(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _OpNavLimbMsgPayload.OpNavLimbMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgRecorder_clear(self)
    bskLogger = property(_OpNavLimbMsgPayload.OpNavLimbMsgRecorder_bskLogger_get, _OpNavLimbMsgPayload.OpNavLimbMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _OpNavLimbMsgPayload.OpNavLimbMsgRecorder_updateTimeInterval(self, timeDiff)

    def _timeTag_array(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgRecorder__timeTag_array(self)

    @property
    def timeTag(self):
        return self._timeTag_array()


    def _valid_array(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgRecorder__valid_array(self)

    @property
    def valid(self):
        return self._valid_array()


    def _numLimbPoints_array(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgRecorder__numLimbPoints_array(self)

    @property
    def numLimbPoints(self):
        return self._numLimbPoints_array()


    def _cameraID_array(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgRecorder__cameraID_array(self)

    @property
    def cameraID(self):
        return self._cameraID_array()


    def _planetIds_array(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgRecorder__planetIds_array(self)

    @property
    def planetIds(self):
        return self._planetIds_array()


    def _limbPoints_array(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgRecorder__limbPoints_array(self)

    @property
    def limbPoints(self):
        return self._limbPoints_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register OpNavLimbMsgRecorder in _OpNavLimbMsgPayload:
_OpNavLimbMsgPayload.OpNavLimbMsgRecorder_swigregister(OpNavLimbMsgRecorder)
class OpNavLimbMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgPayloadVector___bool__(self)

    def __len__(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _OpNavLimbMsgPayload.OpNavLimbMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OpNavLimbMsgPayload.OpNavLimbMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OpNavLimbMsgPayload.OpNavLimbMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OpNavLimbMsgPayload.OpNavLimbMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OpNavLimbMsgPayload.OpNavLimbMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OpNavLimbMsgPayload.OpNavLimbMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgPayloadVector_pop(self)

    def append(self, x):
        return _OpNavLimbMsgPayload.OpNavLimbMsgPayloadVector_append(self, x)

    def empty(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgPayloadVector_empty(self)

    def size(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgPayloadVector_size(self)

    def swap(self, v):
        return _OpNavLimbMsgPayload.OpNavLimbMsgPayloadVector_swap(self, v)

    def begin(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgPayloadVector_begin(self)

    def end(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgPayloadVector_end(self)

    def rbegin(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgPayloadVector_rbegin(self)

    def rend(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgPayloadVector_rend(self)

    def clear(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _OpNavLimbMsgPayload.OpNavLimbMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _OpNavLimbMsgPayload.OpNavLimbMsgPayloadVector_swiginit(self, _OpNavLimbMsgPayload.new_OpNavLimbMsgPayloadVector(*args))

    def push_back(self, x):
        return _OpNavLimbMsgPayload.OpNavLimbMsgPayloadVector_push_back(self, x)

    def front(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgPayloadVector_front(self)

    def back(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _OpNavLimbMsgPayload.OpNavLimbMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _OpNavLimbMsgPayload.OpNavLimbMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _OpNavLimbMsgPayload.OpNavLimbMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _OpNavLimbMsgPayload.OpNavLimbMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgPayloadVector_capacity(self)

    def get_all(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _OpNavLimbMsgPayload.delete_OpNavLimbMsgPayloadVector

# Register OpNavLimbMsgPayloadVector in _OpNavLimbMsgPayload:
_OpNavLimbMsgPayload.OpNavLimbMsgPayloadVector_swigregister(OpNavLimbMsgPayloadVector)
class OpNavLimbMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsVector_empty(self)

    def size(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsVector_begin(self)

    def end(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsVector_rend(self)

    def clear(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsVector_swiginit(self, _OpNavLimbMsgPayload.new_OpNavLimbMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsVector_front(self)

    def back(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _OpNavLimbMsgPayload.delete_OpNavLimbMsgOutMsgsVector

# Register OpNavLimbMsgOutMsgsVector in _OpNavLimbMsgPayload:
_OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsVector_swigregister(OpNavLimbMsgOutMsgsVector)
class OpNavLimbMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsPtrVector_swiginit(self, _OpNavLimbMsgPayload.new_OpNavLimbMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _OpNavLimbMsgPayload.delete_OpNavLimbMsgOutMsgsPtrVector

# Register OpNavLimbMsgOutMsgsPtrVector in _OpNavLimbMsgPayload:
_OpNavLimbMsgPayload.OpNavLimbMsgOutMsgsPtrVector_swigregister(OpNavLimbMsgOutMsgsPtrVector)
class OpNavLimbMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _OpNavLimbMsgPayload.OpNavLimbMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OpNavLimbMsgPayload.OpNavLimbMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OpNavLimbMsgPayload.OpNavLimbMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OpNavLimbMsgPayload.OpNavLimbMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OpNavLimbMsgPayload.OpNavLimbMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OpNavLimbMsgPayload.OpNavLimbMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgInMsgsVector_pop(self)

    def append(self, x):
        return _OpNavLimbMsgPayload.OpNavLimbMsgInMsgsVector_append(self, x)

    def empty(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgInMsgsVector_empty(self)

    def size(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgInMsgsVector_size(self)

    def swap(self, v):
        return _OpNavLimbMsgPayload.OpNavLimbMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgInMsgsVector_begin(self)

    def end(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgInMsgsVector_end(self)

    def rbegin(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgInMsgsVector_rend(self)

    def clear(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _OpNavLimbMsgPayload.OpNavLimbMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _OpNavLimbMsgPayload.OpNavLimbMsgInMsgsVector_swiginit(self, _OpNavLimbMsgPayload.new_OpNavLimbMsgInMsgsVector(*args))

    def push_back(self, x):
        return _OpNavLimbMsgPayload.OpNavLimbMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgInMsgsVector_front(self)

    def back(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _OpNavLimbMsgPayload.OpNavLimbMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _OpNavLimbMsgPayload.OpNavLimbMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _OpNavLimbMsgPayload.OpNavLimbMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _OpNavLimbMsgPayload.OpNavLimbMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _OpNavLimbMsgPayload.OpNavLimbMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _OpNavLimbMsgPayload.delete_OpNavLimbMsgInMsgsVector

# Register OpNavLimbMsgInMsgsVector in _OpNavLimbMsgPayload:
_OpNavLimbMsgPayload.OpNavLimbMsgInMsgsVector_swigregister(OpNavLimbMsgInMsgsVector)
class OpNavLimbMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_OpNavLimbMsgPayload.OpNavLimbMsg_C_header_get, _OpNavLimbMsgPayload.OpNavLimbMsg_C_header_set)
    payload = property(_OpNavLimbMsgPayload.OpNavLimbMsg_C_payload_get, _OpNavLimbMsgPayload.OpNavLimbMsg_C_payload_set)
    payloadPointer = property(_OpNavLimbMsgPayload.OpNavLimbMsg_C_payloadPointer_get, _OpNavLimbMsgPayload.OpNavLimbMsg_C_payloadPointer_set)
    headerPointer = property(_OpNavLimbMsgPayload.OpNavLimbMsg_C_headerPointer_get, _OpNavLimbMsgPayload.OpNavLimbMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _OpNavLimbMsgPayload.OpNavLimbMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import OpNavLimbMsg
        if type(source) == type(self):
            OpNavLimbMsg_C_subscribe(self, source)
        elif type(source) == OpNavLimbMsg:
            OpNavLimbMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            OpNavLimbMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe OpNavLimbMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        OpNavLimbMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import OpNavLimbMsg
        if type(source) == type(self):
            return (OpNavLimbMsg_C_isSubscribedTo(self, source))
        elif type(source) == OpNavLimbMsg:
            return (OpNavLimbMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (OpNavLimbMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        OpNavLimbMsg_C_addAuthor(self, self)
        if data:
            OpNavLimbMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        OpNavLimbMsg_C_addAuthor(self, self)
        OpNavLimbMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return OpNavLimbMsg_C_read(self)


    def __init__(self):
        _OpNavLimbMsgPayload.OpNavLimbMsg_C_swiginit(self, _OpNavLimbMsgPayload.new_OpNavLimbMsg_C())
    __swig_destroy__ = _OpNavLimbMsgPayload.delete_OpNavLimbMsg_C

# Register OpNavLimbMsg_C in _OpNavLimbMsgPayload:
_OpNavLimbMsgPayload.OpNavLimbMsg_C_swigregister(OpNavLimbMsg_C)

def OpNavLimbMsg_cpp_subscribe(subscriber, source):
    return _OpNavLimbMsgPayload.OpNavLimbMsg_cpp_subscribe(subscriber, source)

def OpNavLimbMsg_C_subscribe(subscriber, source):
    return _OpNavLimbMsgPayload.OpNavLimbMsg_C_subscribe(subscriber, source)

def OpNavLimbMsg_addr_subscribe(subscriber, sourceAddr):
    return _OpNavLimbMsgPayload.OpNavLimbMsg_addr_subscribe(subscriber, sourceAddr)

def OpNavLimbMsg_unsubscribe(subscriber):
    return _OpNavLimbMsgPayload.OpNavLimbMsg_unsubscribe(subscriber)

def OpNavLimbMsg_C_isSubscribedTo(subscriber, source):
    return _OpNavLimbMsgPayload.OpNavLimbMsg_C_isSubscribedTo(subscriber, source)

def OpNavLimbMsg_cpp_isSubscribedTo(subscriber, source):
    return _OpNavLimbMsgPayload.OpNavLimbMsg_cpp_isSubscribedTo(subscriber, source)

def OpNavLimbMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _OpNavLimbMsgPayload.OpNavLimbMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def OpNavLimbMsg_C_addAuthor(coowner, data):
    return _OpNavLimbMsgPayload.OpNavLimbMsg_C_addAuthor(coowner, data)

def OpNavLimbMsg_C_init(owner):
    return _OpNavLimbMsgPayload.OpNavLimbMsg_C_init(owner)

def OpNavLimbMsg_C_isLinked(data):
    return _OpNavLimbMsgPayload.OpNavLimbMsg_C_isLinked(data)

def OpNavLimbMsg_C_isWritten(data):
    return _OpNavLimbMsgPayload.OpNavLimbMsg_C_isWritten(data)

def OpNavLimbMsg_C_timeWritten(data):
    return _OpNavLimbMsgPayload.OpNavLimbMsg_C_timeWritten(data)

def OpNavLimbMsg_C_moduleID(data):
    return _OpNavLimbMsgPayload.OpNavLimbMsg_C_moduleID(data)

def OpNavLimbMsg_C_write(data, destination, moduleID, callTime):
    return _OpNavLimbMsgPayload.OpNavLimbMsg_C_write(data, destination, moduleID, callTime)

def OpNavLimbMsg_C_read(source):
    return _OpNavLimbMsgPayload.OpNavLimbMsg_C_read(source)

def OpNavLimbMsg_C_zeroMsgPayload():
    return _OpNavLimbMsgPayload.OpNavLimbMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_OpNavLimbMsgPayload.MsgHeader_isLinked_get, _OpNavLimbMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_OpNavLimbMsgPayload.MsgHeader_isWritten_get, _OpNavLimbMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_OpNavLimbMsgPayload.MsgHeader_timeWritten_get, _OpNavLimbMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_OpNavLimbMsgPayload.MsgHeader_moduleID_get, _OpNavLimbMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _OpNavLimbMsgPayload.MsgHeader_swiginit(self, _OpNavLimbMsgPayload.new_MsgHeader())
    __swig_destroy__ = _OpNavLimbMsgPayload.delete_MsgHeader

# Register MsgHeader in _OpNavLimbMsgPayload:
_OpNavLimbMsgPayload.MsgHeader_swigregister(MsgHeader)

