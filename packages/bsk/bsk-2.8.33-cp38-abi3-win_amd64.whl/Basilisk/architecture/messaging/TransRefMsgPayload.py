# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _TransRefMsgPayload
else:
    import _TransRefMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TransRefMsgPayload.delete_SwigPyIterator

    def value(self):
        return _TransRefMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _TransRefMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _TransRefMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _TransRefMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _TransRefMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _TransRefMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _TransRefMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _TransRefMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _TransRefMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _TransRefMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _TransRefMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _TransRefMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _TransRefMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _TransRefMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _TransRefMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _TransRefMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _TransRefMsgPayload:
_TransRefMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _TransRefMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _TransRefMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _TransRefMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _TransRefMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _TransRefMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _TransRefMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _TransRefMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _TransRefMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _TransRefMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _TransRefMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _TransRefMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _TransRefMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _TransRefMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _TransRefMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _TransRefMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _TransRefMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TransRefMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TransRefMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _TransRefMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _TransRefMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _TransRefMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TransRefMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TransRefMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TransRefMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TransRefMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TransRefMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _TransRefMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _TransRefMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _TransRefMsgPayload.TimeVector_empty(self)

    def size(self):
        return _TransRefMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _TransRefMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _TransRefMsgPayload.TimeVector_begin(self)

    def end(self):
        return _TransRefMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _TransRefMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _TransRefMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _TransRefMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _TransRefMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _TransRefMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _TransRefMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _TransRefMsgPayload.TimeVector_swiginit(self, _TransRefMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _TransRefMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _TransRefMsgPayload.TimeVector_front(self)

    def back(self):
        return _TransRefMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _TransRefMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _TransRefMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _TransRefMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _TransRefMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _TransRefMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _TransRefMsgPayload.delete_TimeVector

# Register TimeVector in _TransRefMsgPayload:
_TransRefMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TransRefMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TransRefMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _TransRefMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _TransRefMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _TransRefMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TransRefMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TransRefMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TransRefMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TransRefMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TransRefMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _TransRefMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _TransRefMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _TransRefMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _TransRefMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _TransRefMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _TransRefMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _TransRefMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _TransRefMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _TransRefMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _TransRefMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _TransRefMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _TransRefMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _TransRefMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _TransRefMsgPayload.DoubleVector_swiginit(self, _TransRefMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _TransRefMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _TransRefMsgPayload.DoubleVector_front(self)

    def back(self):
        return _TransRefMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _TransRefMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _TransRefMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _TransRefMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _TransRefMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _TransRefMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _TransRefMsgPayload.delete_DoubleVector

# Register DoubleVector in _TransRefMsgPayload:
_TransRefMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TransRefMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TransRefMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _TransRefMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _TransRefMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _TransRefMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TransRefMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TransRefMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TransRefMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TransRefMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TransRefMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _TransRefMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _TransRefMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _TransRefMsgPayload.StringVector_empty(self)

    def size(self):
        return _TransRefMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _TransRefMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _TransRefMsgPayload.StringVector_begin(self)

    def end(self):
        return _TransRefMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _TransRefMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _TransRefMsgPayload.StringVector_rend(self)

    def clear(self):
        return _TransRefMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _TransRefMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _TransRefMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _TransRefMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _TransRefMsgPayload.StringVector_swiginit(self, _TransRefMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _TransRefMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _TransRefMsgPayload.StringVector_front(self)

    def back(self):
        return _TransRefMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _TransRefMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _TransRefMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _TransRefMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _TransRefMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _TransRefMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _TransRefMsgPayload.delete_StringVector

# Register StringVector in _TransRefMsgPayload:
_TransRefMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _TransRefMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _TransRefMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _TransRefMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _TransRefMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _TransRefMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _TransRefMsgPayload.NANO2SEC
SEC2NANO = _TransRefMsgPayload.SEC2NANO
SEC2HOUR = _TransRefMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _TransRefMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _TransRefMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _TransRefMsgPayload.secToNano(seconds)
BOOL_FALSE = _TransRefMsgPayload.BOOL_FALSE
BOOL_TRUE = _TransRefMsgPayload.BOOL_TRUE
AVAILABLE = _TransRefMsgPayload.AVAILABLE
UNAVAILABLE = _TransRefMsgPayload.UNAVAILABLE
BalancedWheels = _TransRefMsgPayload.BalancedWheels
JitterSimple = _TransRefMsgPayload.JitterSimple
JitterFullyCoupled = _TransRefMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TransRefMsgPayload.SysModel_swiginit(self, _TransRefMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _TransRefMsgPayload.delete_SysModel

    def SelfInit(self):
        return _TransRefMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _TransRefMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _TransRefMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _TransRefMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_TransRefMsgPayload.SysModel_ModelTag_get, _TransRefMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_TransRefMsgPayload.SysModel_CallCounts_get, _TransRefMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_TransRefMsgPayload.SysModel_RNGSeed_get, _TransRefMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_TransRefMsgPayload.SysModel_moduleID_get, _TransRefMsgPayload.SysModel_moduleID_set)

# Register SysModel in _TransRefMsgPayload:
_TransRefMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _TransRefMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _TransRefMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _TransRefMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _TransRefMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _TransRefMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _TransRefMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _TransRefMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _TransRefMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _TransRefMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _TransRefMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _TransRefMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _TransRefMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class TransRefMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r_RN_N = property(_TransRefMsgPayload.TransRefMsgPayload_r_RN_N_get, _TransRefMsgPayload.TransRefMsgPayload_r_RN_N_set)
    v_RN_N = property(_TransRefMsgPayload.TransRefMsgPayload_v_RN_N_get, _TransRefMsgPayload.TransRefMsgPayload_v_RN_N_set)
    a_RN_N = property(_TransRefMsgPayload.TransRefMsgPayload_a_RN_N_get, _TransRefMsgPayload.TransRefMsgPayload_a_RN_N_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _TransRefMsgPayload.TransRefMsgPayload_swiginit(self, _TransRefMsgPayload.new_TransRefMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _TransRefMsgPayload.delete_TransRefMsgPayload

# Register TransRefMsgPayload in _TransRefMsgPayload:
_TransRefMsgPayload.TransRefMsgPayload_swigregister(TransRefMsgPayload)

def _pprint_TransRefMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[TransRefMsgPayload.__repr__] = _pprint_TransRefMsgPayload

class TransRefMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_TransRefMsgPayload.TransRefMsgReader_bskLogger_get, _TransRefMsgPayload.TransRefMsgReader_bskLogger_set)
    zeroMsgPayload = property(_TransRefMsgPayload.TransRefMsgReader_zeroMsgPayload_get, _TransRefMsgPayload.TransRefMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _TransRefMsgPayload.TransRefMsgReader_swiginit(self, _TransRefMsgPayload.new_TransRefMsgReader(*args))

    def __call__(self):
        return _TransRefMsgPayload.TransRefMsgReader___call__(self)

    def isLinked(self):
        return _TransRefMsgPayload.TransRefMsgReader_isLinked(self)

    def isWritten(self):
        return _TransRefMsgPayload.TransRefMsgReader_isWritten(self)

    def timeWritten(self):
        return _TransRefMsgPayload.TransRefMsgReader_timeWritten(self)

    def moduleID(self):
        return _TransRefMsgPayload.TransRefMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _TransRefMsgPayload.TransRefMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _TransRefMsgPayload.TransRefMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _TransRefMsgPayload.TransRefMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _TransRefMsgPayload.TransRefMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _TransRefMsgPayload.TransRefMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _TransRefMsgPayload.TransRefMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _TransRefMsgPayload.TransRefMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _TransRefMsgPayload.TransRefMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _TransRefMsgPayload.TransRefMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _TransRefMsgPayload.TransRefMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == TransRefMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.TransRefMsgPayload import TransRefMsg_C
            if type(source) == TransRefMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<TransRefMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == TransRefMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.TransRefMsgPayload import TransRefMsg_C
        except ImportError:
            return 0

        if type(source) == TransRefMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _TransRefMsgPayload.delete_TransRefMsgReader

# Register TransRefMsgReader in _TransRefMsgPayload:
_TransRefMsgPayload.TransRefMsgReader_swigregister(TransRefMsgReader)
class TransRefMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TransRefMsgPayload.TransRefMsgWriter_swiginit(self, _TransRefMsgPayload.new_TransRefMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _TransRefMsgPayload.TransRefMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _TransRefMsgPayload.delete_TransRefMsgWriter

# Register TransRefMsgWriter in _TransRefMsgPayload:
_TransRefMsgPayload.TransRefMsgWriter_swigregister(TransRefMsgWriter)
class TransRefMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_TransRefMsgPayload.TransRefMsg_write_get, _TransRefMsgPayload.TransRefMsg_write_set)

    def addSubscriber(self):
        return _TransRefMsgPayload.TransRefMsg_addSubscriber(self)

    def addAuthor(self):
        return _TransRefMsgPayload.TransRefMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _TransRefMsgPayload.TransRefMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _TransRefMsgPayload.TransRefMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _TransRefMsgPayload.TransRefMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_TransRefMsgPayload.TransRefMsg_zeroMsgPayload_get, _TransRefMsgPayload.TransRefMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _TransRefMsgPayload.TransRefMsg_isLinked(self)

    def getPayloadSize(self):
        return _TransRefMsgPayload.TransRefMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _TransRefMsgPayload.TransRefMsg_swiginit(self, _TransRefMsgPayload.new_TransRefMsg())
    __swig_destroy__ = _TransRefMsgPayload.delete_TransRefMsg

# Register TransRefMsg in _TransRefMsgPayload:
_TransRefMsgPayload.TransRefMsg_swigregister(TransRefMsg)
class TransRefMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TransRefMsgPayload.TransRefMsgRecorder_swiginit(self, _TransRefMsgPayload.new_TransRefMsgRecorder(*args))
    __swig_destroy__ = _TransRefMsgPayload.delete_TransRefMsgRecorder

    def SelfInit(self):
        return _TransRefMsgPayload.TransRefMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _TransRefMsgPayload.TransRefMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _TransRefMsgPayload.TransRefMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _TransRefMsgPayload.TransRefMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _TransRefMsgPayload.TransRefMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _TransRefMsgPayload.TransRefMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _TransRefMsgPayload.TransRefMsgRecorder___record_vector(self)

    def size(self):
        return _TransRefMsgPayload.TransRefMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _TransRefMsgPayload.TransRefMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _TransRefMsgPayload.TransRefMsgRecorder_clear(self)
    bskLogger = property(_TransRefMsgPayload.TransRefMsgRecorder_bskLogger_get, _TransRefMsgPayload.TransRefMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _TransRefMsgPayload.TransRefMsgRecorder_updateTimeInterval(self, timeDiff)

    def _r_RN_N_array(self):
        return _TransRefMsgPayload.TransRefMsgRecorder__r_RN_N_array(self)

    @property
    def r_RN_N(self):
        return self._r_RN_N_array()


    def _v_RN_N_array(self):
        return _TransRefMsgPayload.TransRefMsgRecorder__v_RN_N_array(self)

    @property
    def v_RN_N(self):
        return self._v_RN_N_array()


    def _a_RN_N_array(self):
        return _TransRefMsgPayload.TransRefMsgRecorder__a_RN_N_array(self)

    @property
    def a_RN_N(self):
        return self._a_RN_N_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register TransRefMsgRecorder in _TransRefMsgPayload:
_TransRefMsgPayload.TransRefMsgRecorder_swigregister(TransRefMsgRecorder)
class TransRefMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TransRefMsgPayload.TransRefMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TransRefMsgPayload.TransRefMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _TransRefMsgPayload.TransRefMsgPayloadVector___bool__(self)

    def __len__(self):
        return _TransRefMsgPayload.TransRefMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _TransRefMsgPayload.TransRefMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TransRefMsgPayload.TransRefMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TransRefMsgPayload.TransRefMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TransRefMsgPayload.TransRefMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TransRefMsgPayload.TransRefMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TransRefMsgPayload.TransRefMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _TransRefMsgPayload.TransRefMsgPayloadVector_pop(self)

    def append(self, x):
        return _TransRefMsgPayload.TransRefMsgPayloadVector_append(self, x)

    def empty(self):
        return _TransRefMsgPayload.TransRefMsgPayloadVector_empty(self)

    def size(self):
        return _TransRefMsgPayload.TransRefMsgPayloadVector_size(self)

    def swap(self, v):
        return _TransRefMsgPayload.TransRefMsgPayloadVector_swap(self, v)

    def begin(self):
        return _TransRefMsgPayload.TransRefMsgPayloadVector_begin(self)

    def end(self):
        return _TransRefMsgPayload.TransRefMsgPayloadVector_end(self)

    def rbegin(self):
        return _TransRefMsgPayload.TransRefMsgPayloadVector_rbegin(self)

    def rend(self):
        return _TransRefMsgPayload.TransRefMsgPayloadVector_rend(self)

    def clear(self):
        return _TransRefMsgPayload.TransRefMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _TransRefMsgPayload.TransRefMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _TransRefMsgPayload.TransRefMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _TransRefMsgPayload.TransRefMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _TransRefMsgPayload.TransRefMsgPayloadVector_swiginit(self, _TransRefMsgPayload.new_TransRefMsgPayloadVector(*args))

    def push_back(self, x):
        return _TransRefMsgPayload.TransRefMsgPayloadVector_push_back(self, x)

    def front(self):
        return _TransRefMsgPayload.TransRefMsgPayloadVector_front(self)

    def back(self):
        return _TransRefMsgPayload.TransRefMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _TransRefMsgPayload.TransRefMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _TransRefMsgPayload.TransRefMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _TransRefMsgPayload.TransRefMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _TransRefMsgPayload.TransRefMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _TransRefMsgPayload.TransRefMsgPayloadVector_capacity(self)

    def get_all(self):
        return _TransRefMsgPayload.TransRefMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _TransRefMsgPayload.delete_TransRefMsgPayloadVector

# Register TransRefMsgPayloadVector in _TransRefMsgPayload:
_TransRefMsgPayload.TransRefMsgPayloadVector_swigregister(TransRefMsgPayloadVector)
class TransRefMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TransRefMsgPayload.TransRefMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TransRefMsgPayload.TransRefMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _TransRefMsgPayload.TransRefMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _TransRefMsgPayload.TransRefMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _TransRefMsgPayload.TransRefMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TransRefMsgPayload.TransRefMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TransRefMsgPayload.TransRefMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TransRefMsgPayload.TransRefMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TransRefMsgPayload.TransRefMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TransRefMsgPayload.TransRefMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _TransRefMsgPayload.TransRefMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _TransRefMsgPayload.TransRefMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _TransRefMsgPayload.TransRefMsgOutMsgsVector_empty(self)

    def size(self):
        return _TransRefMsgPayload.TransRefMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _TransRefMsgPayload.TransRefMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _TransRefMsgPayload.TransRefMsgOutMsgsVector_begin(self)

    def end(self):
        return _TransRefMsgPayload.TransRefMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _TransRefMsgPayload.TransRefMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _TransRefMsgPayload.TransRefMsgOutMsgsVector_rend(self)

    def clear(self):
        return _TransRefMsgPayload.TransRefMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _TransRefMsgPayload.TransRefMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _TransRefMsgPayload.TransRefMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _TransRefMsgPayload.TransRefMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _TransRefMsgPayload.TransRefMsgOutMsgsVector_swiginit(self, _TransRefMsgPayload.new_TransRefMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _TransRefMsgPayload.TransRefMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _TransRefMsgPayload.TransRefMsgOutMsgsVector_front(self)

    def back(self):
        return _TransRefMsgPayload.TransRefMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _TransRefMsgPayload.TransRefMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _TransRefMsgPayload.TransRefMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _TransRefMsgPayload.TransRefMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _TransRefMsgPayload.TransRefMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _TransRefMsgPayload.TransRefMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _TransRefMsgPayload.delete_TransRefMsgOutMsgsVector

# Register TransRefMsgOutMsgsVector in _TransRefMsgPayload:
_TransRefMsgPayload.TransRefMsgOutMsgsVector_swigregister(TransRefMsgOutMsgsVector)
class TransRefMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TransRefMsgPayload.TransRefMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TransRefMsgPayload.TransRefMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _TransRefMsgPayload.TransRefMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _TransRefMsgPayload.TransRefMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _TransRefMsgPayload.TransRefMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TransRefMsgPayload.TransRefMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TransRefMsgPayload.TransRefMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TransRefMsgPayload.TransRefMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TransRefMsgPayload.TransRefMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TransRefMsgPayload.TransRefMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _TransRefMsgPayload.TransRefMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _TransRefMsgPayload.TransRefMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _TransRefMsgPayload.TransRefMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _TransRefMsgPayload.TransRefMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _TransRefMsgPayload.TransRefMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _TransRefMsgPayload.TransRefMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _TransRefMsgPayload.TransRefMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _TransRefMsgPayload.TransRefMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _TransRefMsgPayload.TransRefMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _TransRefMsgPayload.TransRefMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _TransRefMsgPayload.TransRefMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _TransRefMsgPayload.TransRefMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _TransRefMsgPayload.TransRefMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _TransRefMsgPayload.TransRefMsgOutMsgsPtrVector_swiginit(self, _TransRefMsgPayload.new_TransRefMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _TransRefMsgPayload.TransRefMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _TransRefMsgPayload.TransRefMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _TransRefMsgPayload.TransRefMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _TransRefMsgPayload.TransRefMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _TransRefMsgPayload.TransRefMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _TransRefMsgPayload.TransRefMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _TransRefMsgPayload.TransRefMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _TransRefMsgPayload.TransRefMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _TransRefMsgPayload.delete_TransRefMsgOutMsgsPtrVector

# Register TransRefMsgOutMsgsPtrVector in _TransRefMsgPayload:
_TransRefMsgPayload.TransRefMsgOutMsgsPtrVector_swigregister(TransRefMsgOutMsgsPtrVector)
class TransRefMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TransRefMsgPayload.TransRefMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TransRefMsgPayload.TransRefMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _TransRefMsgPayload.TransRefMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _TransRefMsgPayload.TransRefMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _TransRefMsgPayload.TransRefMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TransRefMsgPayload.TransRefMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TransRefMsgPayload.TransRefMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TransRefMsgPayload.TransRefMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TransRefMsgPayload.TransRefMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TransRefMsgPayload.TransRefMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _TransRefMsgPayload.TransRefMsgInMsgsVector_pop(self)

    def append(self, x):
        return _TransRefMsgPayload.TransRefMsgInMsgsVector_append(self, x)

    def empty(self):
        return _TransRefMsgPayload.TransRefMsgInMsgsVector_empty(self)

    def size(self):
        return _TransRefMsgPayload.TransRefMsgInMsgsVector_size(self)

    def swap(self, v):
        return _TransRefMsgPayload.TransRefMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _TransRefMsgPayload.TransRefMsgInMsgsVector_begin(self)

    def end(self):
        return _TransRefMsgPayload.TransRefMsgInMsgsVector_end(self)

    def rbegin(self):
        return _TransRefMsgPayload.TransRefMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _TransRefMsgPayload.TransRefMsgInMsgsVector_rend(self)

    def clear(self):
        return _TransRefMsgPayload.TransRefMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _TransRefMsgPayload.TransRefMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _TransRefMsgPayload.TransRefMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _TransRefMsgPayload.TransRefMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _TransRefMsgPayload.TransRefMsgInMsgsVector_swiginit(self, _TransRefMsgPayload.new_TransRefMsgInMsgsVector(*args))

    def push_back(self, x):
        return _TransRefMsgPayload.TransRefMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _TransRefMsgPayload.TransRefMsgInMsgsVector_front(self)

    def back(self):
        return _TransRefMsgPayload.TransRefMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _TransRefMsgPayload.TransRefMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _TransRefMsgPayload.TransRefMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _TransRefMsgPayload.TransRefMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _TransRefMsgPayload.TransRefMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _TransRefMsgPayload.TransRefMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _TransRefMsgPayload.delete_TransRefMsgInMsgsVector

# Register TransRefMsgInMsgsVector in _TransRefMsgPayload:
_TransRefMsgPayload.TransRefMsgInMsgsVector_swigregister(TransRefMsgInMsgsVector)
class TransRefMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_TransRefMsgPayload.TransRefMsg_C_header_get, _TransRefMsgPayload.TransRefMsg_C_header_set)
    payload = property(_TransRefMsgPayload.TransRefMsg_C_payload_get, _TransRefMsgPayload.TransRefMsg_C_payload_set)
    payloadPointer = property(_TransRefMsgPayload.TransRefMsg_C_payloadPointer_get, _TransRefMsgPayload.TransRefMsg_C_payloadPointer_set)
    headerPointer = property(_TransRefMsgPayload.TransRefMsg_C_headerPointer_get, _TransRefMsgPayload.TransRefMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _TransRefMsgPayload.TransRefMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import TransRefMsg
        if type(source) == type(self):
            TransRefMsg_C_subscribe(self, source)
        elif type(source) == TransRefMsg:
            TransRefMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            TransRefMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe TransRefMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        TransRefMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import TransRefMsg
        if type(source) == type(self):
            return (TransRefMsg_C_isSubscribedTo(self, source))
        elif type(source) == TransRefMsg:
            return (TransRefMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (TransRefMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        TransRefMsg_C_addAuthor(self, self)
        if data:
            TransRefMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        TransRefMsg_C_addAuthor(self, self)
        TransRefMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return TransRefMsg_C_read(self)


    def __init__(self):
        _TransRefMsgPayload.TransRefMsg_C_swiginit(self, _TransRefMsgPayload.new_TransRefMsg_C())
    __swig_destroy__ = _TransRefMsgPayload.delete_TransRefMsg_C

# Register TransRefMsg_C in _TransRefMsgPayload:
_TransRefMsgPayload.TransRefMsg_C_swigregister(TransRefMsg_C)

def TransRefMsg_cpp_subscribe(subscriber, source):
    return _TransRefMsgPayload.TransRefMsg_cpp_subscribe(subscriber, source)

def TransRefMsg_C_subscribe(subscriber, source):
    return _TransRefMsgPayload.TransRefMsg_C_subscribe(subscriber, source)

def TransRefMsg_addr_subscribe(subscriber, sourceAddr):
    return _TransRefMsgPayload.TransRefMsg_addr_subscribe(subscriber, sourceAddr)

def TransRefMsg_unsubscribe(subscriber):
    return _TransRefMsgPayload.TransRefMsg_unsubscribe(subscriber)

def TransRefMsg_C_isSubscribedTo(subscriber, source):
    return _TransRefMsgPayload.TransRefMsg_C_isSubscribedTo(subscriber, source)

def TransRefMsg_cpp_isSubscribedTo(subscriber, source):
    return _TransRefMsgPayload.TransRefMsg_cpp_isSubscribedTo(subscriber, source)

def TransRefMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _TransRefMsgPayload.TransRefMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def TransRefMsg_C_addAuthor(coowner, data):
    return _TransRefMsgPayload.TransRefMsg_C_addAuthor(coowner, data)

def TransRefMsg_C_init(owner):
    return _TransRefMsgPayload.TransRefMsg_C_init(owner)

def TransRefMsg_C_isLinked(data):
    return _TransRefMsgPayload.TransRefMsg_C_isLinked(data)

def TransRefMsg_C_isWritten(data):
    return _TransRefMsgPayload.TransRefMsg_C_isWritten(data)

def TransRefMsg_C_timeWritten(data):
    return _TransRefMsgPayload.TransRefMsg_C_timeWritten(data)

def TransRefMsg_C_moduleID(data):
    return _TransRefMsgPayload.TransRefMsg_C_moduleID(data)

def TransRefMsg_C_write(data, destination, moduleID, callTime):
    return _TransRefMsgPayload.TransRefMsg_C_write(data, destination, moduleID, callTime)

def TransRefMsg_C_read(source):
    return _TransRefMsgPayload.TransRefMsg_C_read(source)

def TransRefMsg_C_zeroMsgPayload():
    return _TransRefMsgPayload.TransRefMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_TransRefMsgPayload.MsgHeader_isLinked_get, _TransRefMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_TransRefMsgPayload.MsgHeader_isWritten_get, _TransRefMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_TransRefMsgPayload.MsgHeader_timeWritten_get, _TransRefMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_TransRefMsgPayload.MsgHeader_moduleID_get, _TransRefMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _TransRefMsgPayload.MsgHeader_swiginit(self, _TransRefMsgPayload.new_MsgHeader())
    __swig_destroy__ = _TransRefMsgPayload.delete_MsgHeader

# Register MsgHeader in _TransRefMsgPayload:
_TransRefMsgPayload.MsgHeader_swigregister(MsgHeader)

