# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CmdTorqueBodyMsgPayload
else:
    import _CmdTorqueBodyMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CmdTorqueBodyMsgPayload.delete_SwigPyIterator

    def value(self):
        return _CmdTorqueBodyMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _CmdTorqueBodyMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _CmdTorqueBodyMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _CmdTorqueBodyMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _CmdTorqueBodyMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _CmdTorqueBodyMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _CmdTorqueBodyMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _CmdTorqueBodyMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _CmdTorqueBodyMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _CmdTorqueBodyMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _CmdTorqueBodyMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _CmdTorqueBodyMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _CmdTorqueBodyMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _CmdTorqueBodyMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _CmdTorqueBodyMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _CmdTorqueBodyMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CmdTorqueBodyMsgPayload:
_CmdTorqueBodyMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _CmdTorqueBodyMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _CmdTorqueBodyMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _CmdTorqueBodyMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _CmdTorqueBodyMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _CmdTorqueBodyMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _CmdTorqueBodyMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _CmdTorqueBodyMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _CmdTorqueBodyMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _CmdTorqueBodyMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _CmdTorqueBodyMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _CmdTorqueBodyMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _CmdTorqueBodyMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _CmdTorqueBodyMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _CmdTorqueBodyMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _CmdTorqueBodyMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _CmdTorqueBodyMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CmdTorqueBodyMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CmdTorqueBodyMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _CmdTorqueBodyMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _CmdTorqueBodyMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _CmdTorqueBodyMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CmdTorqueBodyMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CmdTorqueBodyMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CmdTorqueBodyMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CmdTorqueBodyMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CmdTorqueBodyMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _CmdTorqueBodyMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _CmdTorqueBodyMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _CmdTorqueBodyMsgPayload.TimeVector_empty(self)

    def size(self):
        return _CmdTorqueBodyMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _CmdTorqueBodyMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _CmdTorqueBodyMsgPayload.TimeVector_begin(self)

    def end(self):
        return _CmdTorqueBodyMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _CmdTorqueBodyMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _CmdTorqueBodyMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _CmdTorqueBodyMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _CmdTorqueBodyMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _CmdTorqueBodyMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _CmdTorqueBodyMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _CmdTorqueBodyMsgPayload.TimeVector_swiginit(self, _CmdTorqueBodyMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _CmdTorqueBodyMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _CmdTorqueBodyMsgPayload.TimeVector_front(self)

    def back(self):
        return _CmdTorqueBodyMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _CmdTorqueBodyMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _CmdTorqueBodyMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _CmdTorqueBodyMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _CmdTorqueBodyMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _CmdTorqueBodyMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _CmdTorqueBodyMsgPayload.delete_TimeVector

# Register TimeVector in _CmdTorqueBodyMsgPayload:
_CmdTorqueBodyMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CmdTorqueBodyMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CmdTorqueBodyMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _CmdTorqueBodyMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _CmdTorqueBodyMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _CmdTorqueBodyMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CmdTorqueBodyMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CmdTorqueBodyMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CmdTorqueBodyMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CmdTorqueBodyMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CmdTorqueBodyMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _CmdTorqueBodyMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _CmdTorqueBodyMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _CmdTorqueBodyMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _CmdTorqueBodyMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _CmdTorqueBodyMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _CmdTorqueBodyMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _CmdTorqueBodyMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _CmdTorqueBodyMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _CmdTorqueBodyMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _CmdTorqueBodyMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _CmdTorqueBodyMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _CmdTorqueBodyMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _CmdTorqueBodyMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _CmdTorqueBodyMsgPayload.DoubleVector_swiginit(self, _CmdTorqueBodyMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _CmdTorqueBodyMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _CmdTorqueBodyMsgPayload.DoubleVector_front(self)

    def back(self):
        return _CmdTorqueBodyMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _CmdTorqueBodyMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _CmdTorqueBodyMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _CmdTorqueBodyMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _CmdTorqueBodyMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _CmdTorqueBodyMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _CmdTorqueBodyMsgPayload.delete_DoubleVector

# Register DoubleVector in _CmdTorqueBodyMsgPayload:
_CmdTorqueBodyMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CmdTorqueBodyMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CmdTorqueBodyMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _CmdTorqueBodyMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _CmdTorqueBodyMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _CmdTorqueBodyMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CmdTorqueBodyMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CmdTorqueBodyMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CmdTorqueBodyMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CmdTorqueBodyMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CmdTorqueBodyMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _CmdTorqueBodyMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _CmdTorqueBodyMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _CmdTorqueBodyMsgPayload.StringVector_empty(self)

    def size(self):
        return _CmdTorqueBodyMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _CmdTorqueBodyMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _CmdTorqueBodyMsgPayload.StringVector_begin(self)

    def end(self):
        return _CmdTorqueBodyMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _CmdTorqueBodyMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _CmdTorqueBodyMsgPayload.StringVector_rend(self)

    def clear(self):
        return _CmdTorqueBodyMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _CmdTorqueBodyMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _CmdTorqueBodyMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _CmdTorqueBodyMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _CmdTorqueBodyMsgPayload.StringVector_swiginit(self, _CmdTorqueBodyMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _CmdTorqueBodyMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _CmdTorqueBodyMsgPayload.StringVector_front(self)

    def back(self):
        return _CmdTorqueBodyMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _CmdTorqueBodyMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _CmdTorqueBodyMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _CmdTorqueBodyMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _CmdTorqueBodyMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _CmdTorqueBodyMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _CmdTorqueBodyMsgPayload.delete_StringVector

# Register StringVector in _CmdTorqueBodyMsgPayload:
_CmdTorqueBodyMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _CmdTorqueBodyMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _CmdTorqueBodyMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _CmdTorqueBodyMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _CmdTorqueBodyMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _CmdTorqueBodyMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _CmdTorqueBodyMsgPayload.NANO2SEC
SEC2NANO = _CmdTorqueBodyMsgPayload.SEC2NANO
SEC2HOUR = _CmdTorqueBodyMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _CmdTorqueBodyMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _CmdTorqueBodyMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _CmdTorqueBodyMsgPayload.secToNano(seconds)
BOOL_FALSE = _CmdTorqueBodyMsgPayload.BOOL_FALSE
BOOL_TRUE = _CmdTorqueBodyMsgPayload.BOOL_TRUE
AVAILABLE = _CmdTorqueBodyMsgPayload.AVAILABLE
UNAVAILABLE = _CmdTorqueBodyMsgPayload.UNAVAILABLE
BalancedWheels = _CmdTorqueBodyMsgPayload.BalancedWheels
JitterSimple = _CmdTorqueBodyMsgPayload.JitterSimple
JitterFullyCoupled = _CmdTorqueBodyMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CmdTorqueBodyMsgPayload.SysModel_swiginit(self, _CmdTorqueBodyMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _CmdTorqueBodyMsgPayload.delete_SysModel

    def SelfInit(self):
        return _CmdTorqueBodyMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _CmdTorqueBodyMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _CmdTorqueBodyMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _CmdTorqueBodyMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_CmdTorqueBodyMsgPayload.SysModel_ModelTag_get, _CmdTorqueBodyMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_CmdTorqueBodyMsgPayload.SysModel_CallCounts_get, _CmdTorqueBodyMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_CmdTorqueBodyMsgPayload.SysModel_RNGSeed_get, _CmdTorqueBodyMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_CmdTorqueBodyMsgPayload.SysModel_moduleID_get, _CmdTorqueBodyMsgPayload.SysModel_moduleID_set)

# Register SysModel in _CmdTorqueBodyMsgPayload:
_CmdTorqueBodyMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _CmdTorqueBodyMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _CmdTorqueBodyMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _CmdTorqueBodyMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _CmdTorqueBodyMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _CmdTorqueBodyMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _CmdTorqueBodyMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _CmdTorqueBodyMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _CmdTorqueBodyMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _CmdTorqueBodyMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _CmdTorqueBodyMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _CmdTorqueBodyMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _CmdTorqueBodyMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class CmdTorqueBodyMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    torqueRequestBody = property(_CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayload_torqueRequestBody_get, _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayload_torqueRequestBody_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayload_swiginit(self, _CmdTorqueBodyMsgPayload.new_CmdTorqueBodyMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _CmdTorqueBodyMsgPayload.delete_CmdTorqueBodyMsgPayload

# Register CmdTorqueBodyMsgPayload in _CmdTorqueBodyMsgPayload:
_CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayload_swigregister(CmdTorqueBodyMsgPayload)

def _pprint_CmdTorqueBodyMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[CmdTorqueBodyMsgPayload.__repr__] = _pprint_CmdTorqueBodyMsgPayload

class CmdTorqueBodyMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgReader_bskLogger_get, _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgReader_bskLogger_set)
    zeroMsgPayload = property(_CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgReader_zeroMsgPayload_get, _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgReader_swiginit(self, _CmdTorqueBodyMsgPayload.new_CmdTorqueBodyMsgReader(*args))

    def __call__(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgReader___call__(self)

    def isLinked(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgReader_isLinked(self)

    def isWritten(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgReader_isWritten(self)

    def timeWritten(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgReader_timeWritten(self)

    def moduleID(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == CmdTorqueBodyMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.CmdTorqueBodyMsgPayload import CmdTorqueBodyMsg_C
            if type(source) == CmdTorqueBodyMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<CmdTorqueBodyMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == CmdTorqueBodyMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.CmdTorqueBodyMsgPayload import CmdTorqueBodyMsg_C
        except ImportError:
            return 0

        if type(source) == CmdTorqueBodyMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _CmdTorqueBodyMsgPayload.delete_CmdTorqueBodyMsgReader

# Register CmdTorqueBodyMsgReader in _CmdTorqueBodyMsgPayload:
_CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgReader_swigregister(CmdTorqueBodyMsgReader)
class CmdTorqueBodyMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgWriter_swiginit(self, _CmdTorqueBodyMsgPayload.new_CmdTorqueBodyMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _CmdTorqueBodyMsgPayload.delete_CmdTorqueBodyMsgWriter

# Register CmdTorqueBodyMsgWriter in _CmdTorqueBodyMsgPayload:
_CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgWriter_swigregister(CmdTorqueBodyMsgWriter)
class CmdTorqueBodyMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_write_get, _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_write_set)

    def addSubscriber(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_addSubscriber(self)

    def addAuthor(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_zeroMsgPayload_get, _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_isLinked(self)

    def getPayloadSize(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_swiginit(self, _CmdTorqueBodyMsgPayload.new_CmdTorqueBodyMsg())
    __swig_destroy__ = _CmdTorqueBodyMsgPayload.delete_CmdTorqueBodyMsg

# Register CmdTorqueBodyMsg in _CmdTorqueBodyMsgPayload:
_CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_swigregister(CmdTorqueBodyMsg)
class CmdTorqueBodyMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgRecorder_swiginit(self, _CmdTorqueBodyMsgPayload.new_CmdTorqueBodyMsgRecorder(*args))
    __swig_destroy__ = _CmdTorqueBodyMsgPayload.delete_CmdTorqueBodyMsgRecorder

    def SelfInit(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgRecorder___record_vector(self)

    def size(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgRecorder_clear(self)
    bskLogger = property(_CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgRecorder_bskLogger_get, _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgRecorder_updateTimeInterval(self, timeDiff)

    def _torqueRequestBody_array(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgRecorder__torqueRequestBody_array(self)

    @property
    def torqueRequestBody(self):
        return self._torqueRequestBody_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register CmdTorqueBodyMsgRecorder in _CmdTorqueBodyMsgPayload:
_CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgRecorder_swigregister(CmdTorqueBodyMsgRecorder)
class CmdTorqueBodyMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayloadVector___bool__(self)

    def __len__(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayloadVector_pop(self)

    def append(self, x):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayloadVector_append(self, x)

    def empty(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayloadVector_empty(self)

    def size(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayloadVector_size(self)

    def swap(self, v):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayloadVector_swap(self, v)

    def begin(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayloadVector_begin(self)

    def end(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayloadVector_end(self)

    def rbegin(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayloadVector_rbegin(self)

    def rend(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayloadVector_rend(self)

    def clear(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayloadVector_swiginit(self, _CmdTorqueBodyMsgPayload.new_CmdTorqueBodyMsgPayloadVector(*args))

    def push_back(self, x):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayloadVector_push_back(self, x)

    def front(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayloadVector_front(self)

    def back(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayloadVector_capacity(self)

    def get_all(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _CmdTorqueBodyMsgPayload.delete_CmdTorqueBodyMsgPayloadVector

# Register CmdTorqueBodyMsgPayloadVector in _CmdTorqueBodyMsgPayload:
_CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgPayloadVector_swigregister(CmdTorqueBodyMsgPayloadVector)
class CmdTorqueBodyMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsVector_empty(self)

    def size(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsVector_begin(self)

    def end(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsVector_rend(self)

    def clear(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsVector_swiginit(self, _CmdTorqueBodyMsgPayload.new_CmdTorqueBodyMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsVector_front(self)

    def back(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _CmdTorqueBodyMsgPayload.delete_CmdTorqueBodyMsgOutMsgsVector

# Register CmdTorqueBodyMsgOutMsgsVector in _CmdTorqueBodyMsgPayload:
_CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsVector_swigregister(CmdTorqueBodyMsgOutMsgsVector)
class CmdTorqueBodyMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsPtrVector_swiginit(self, _CmdTorqueBodyMsgPayload.new_CmdTorqueBodyMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _CmdTorqueBodyMsgPayload.delete_CmdTorqueBodyMsgOutMsgsPtrVector

# Register CmdTorqueBodyMsgOutMsgsPtrVector in _CmdTorqueBodyMsgPayload:
_CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgOutMsgsPtrVector_swigregister(CmdTorqueBodyMsgOutMsgsPtrVector)
class CmdTorqueBodyMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgInMsgsVector_pop(self)

    def append(self, x):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgInMsgsVector_append(self, x)

    def empty(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgInMsgsVector_empty(self)

    def size(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgInMsgsVector_size(self)

    def swap(self, v):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgInMsgsVector_begin(self)

    def end(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgInMsgsVector_end(self)

    def rbegin(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgInMsgsVector_rend(self)

    def clear(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgInMsgsVector_swiginit(self, _CmdTorqueBodyMsgPayload.new_CmdTorqueBodyMsgInMsgsVector(*args))

    def push_back(self, x):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgInMsgsVector_front(self)

    def back(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _CmdTorqueBodyMsgPayload.delete_CmdTorqueBodyMsgInMsgsVector

# Register CmdTorqueBodyMsgInMsgsVector in _CmdTorqueBodyMsgPayload:
_CmdTorqueBodyMsgPayload.CmdTorqueBodyMsgInMsgsVector_swigregister(CmdTorqueBodyMsgInMsgsVector)
class CmdTorqueBodyMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_C_header_get, _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_C_header_set)
    payload = property(_CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_C_payload_get, _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_C_payload_set)
    payloadPointer = property(_CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_C_payloadPointer_get, _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_C_payloadPointer_set)
    headerPointer = property(_CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_C_headerPointer_get, _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import CmdTorqueBodyMsg
        if type(source) == type(self):
            CmdTorqueBodyMsg_C_subscribe(self, source)
        elif type(source) == CmdTorqueBodyMsg:
            CmdTorqueBodyMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            CmdTorqueBodyMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe CmdTorqueBodyMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        CmdTorqueBodyMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import CmdTorqueBodyMsg
        if type(source) == type(self):
            return (CmdTorqueBodyMsg_C_isSubscribedTo(self, source))
        elif type(source) == CmdTorqueBodyMsg:
            return (CmdTorqueBodyMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (CmdTorqueBodyMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        CmdTorqueBodyMsg_C_addAuthor(self, self)
        if data:
            CmdTorqueBodyMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        CmdTorqueBodyMsg_C_addAuthor(self, self)
        CmdTorqueBodyMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return CmdTorqueBodyMsg_C_read(self)


    def __init__(self):
        _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_C_swiginit(self, _CmdTorqueBodyMsgPayload.new_CmdTorqueBodyMsg_C())
    __swig_destroy__ = _CmdTorqueBodyMsgPayload.delete_CmdTorqueBodyMsg_C

# Register CmdTorqueBodyMsg_C in _CmdTorqueBodyMsgPayload:
_CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_C_swigregister(CmdTorqueBodyMsg_C)

def CmdTorqueBodyMsg_cpp_subscribe(subscriber, source):
    return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_cpp_subscribe(subscriber, source)

def CmdTorqueBodyMsg_C_subscribe(subscriber, source):
    return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_C_subscribe(subscriber, source)

def CmdTorqueBodyMsg_addr_subscribe(subscriber, sourceAddr):
    return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_addr_subscribe(subscriber, sourceAddr)

def CmdTorqueBodyMsg_unsubscribe(subscriber):
    return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_unsubscribe(subscriber)

def CmdTorqueBodyMsg_C_isSubscribedTo(subscriber, source):
    return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_C_isSubscribedTo(subscriber, source)

def CmdTorqueBodyMsg_cpp_isSubscribedTo(subscriber, source):
    return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_cpp_isSubscribedTo(subscriber, source)

def CmdTorqueBodyMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def CmdTorqueBodyMsg_C_addAuthor(coowner, data):
    return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_C_addAuthor(coowner, data)

def CmdTorqueBodyMsg_C_init(owner):
    return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_C_init(owner)

def CmdTorqueBodyMsg_C_isLinked(data):
    return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_C_isLinked(data)

def CmdTorqueBodyMsg_C_isWritten(data):
    return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_C_isWritten(data)

def CmdTorqueBodyMsg_C_timeWritten(data):
    return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_C_timeWritten(data)

def CmdTorqueBodyMsg_C_moduleID(data):
    return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_C_moduleID(data)

def CmdTorqueBodyMsg_C_write(data, destination, moduleID, callTime):
    return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_C_write(data, destination, moduleID, callTime)

def CmdTorqueBodyMsg_C_read(source):
    return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_C_read(source)

def CmdTorqueBodyMsg_C_zeroMsgPayload():
    return _CmdTorqueBodyMsgPayload.CmdTorqueBodyMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_CmdTorqueBodyMsgPayload.MsgHeader_isLinked_get, _CmdTorqueBodyMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_CmdTorqueBodyMsgPayload.MsgHeader_isWritten_get, _CmdTorqueBodyMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_CmdTorqueBodyMsgPayload.MsgHeader_timeWritten_get, _CmdTorqueBodyMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_CmdTorqueBodyMsgPayload.MsgHeader_moduleID_get, _CmdTorqueBodyMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _CmdTorqueBodyMsgPayload.MsgHeader_swiginit(self, _CmdTorqueBodyMsgPayload.new_MsgHeader())
    __swig_destroy__ = _CmdTorqueBodyMsgPayload.delete_MsgHeader

# Register MsgHeader in _CmdTorqueBodyMsgPayload:
_CmdTorqueBodyMsgPayload.MsgHeader_swigregister(MsgHeader)

