# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ColorMsgPayload
else:
    import _ColorMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ColorMsgPayload.delete_SwigPyIterator

    def value(self):
        return _ColorMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ColorMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ColorMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ColorMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ColorMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ColorMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _ColorMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _ColorMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _ColorMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ColorMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ColorMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ColorMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ColorMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ColorMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ColorMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ColorMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ColorMsgPayload:
_ColorMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _ColorMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _ColorMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _ColorMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _ColorMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _ColorMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _ColorMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _ColorMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _ColorMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _ColorMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _ColorMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _ColorMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _ColorMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _ColorMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _ColorMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _ColorMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _ColorMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ColorMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ColorMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _ColorMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _ColorMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _ColorMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ColorMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ColorMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ColorMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ColorMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ColorMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _ColorMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _ColorMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _ColorMsgPayload.TimeVector_empty(self)

    def size(self):
        return _ColorMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _ColorMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _ColorMsgPayload.TimeVector_begin(self)

    def end(self):
        return _ColorMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _ColorMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _ColorMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _ColorMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _ColorMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _ColorMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _ColorMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _ColorMsgPayload.TimeVector_swiginit(self, _ColorMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _ColorMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _ColorMsgPayload.TimeVector_front(self)

    def back(self):
        return _ColorMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _ColorMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _ColorMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _ColorMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _ColorMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _ColorMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _ColorMsgPayload.delete_TimeVector

# Register TimeVector in _ColorMsgPayload:
_ColorMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ColorMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ColorMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _ColorMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _ColorMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _ColorMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ColorMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ColorMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ColorMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ColorMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ColorMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _ColorMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _ColorMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _ColorMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _ColorMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _ColorMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _ColorMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _ColorMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _ColorMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _ColorMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _ColorMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _ColorMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _ColorMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _ColorMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _ColorMsgPayload.DoubleVector_swiginit(self, _ColorMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _ColorMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _ColorMsgPayload.DoubleVector_front(self)

    def back(self):
        return _ColorMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _ColorMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _ColorMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _ColorMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _ColorMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _ColorMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _ColorMsgPayload.delete_DoubleVector

# Register DoubleVector in _ColorMsgPayload:
_ColorMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ColorMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ColorMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _ColorMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _ColorMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _ColorMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ColorMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ColorMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ColorMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ColorMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ColorMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _ColorMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _ColorMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _ColorMsgPayload.StringVector_empty(self)

    def size(self):
        return _ColorMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _ColorMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _ColorMsgPayload.StringVector_begin(self)

    def end(self):
        return _ColorMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _ColorMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _ColorMsgPayload.StringVector_rend(self)

    def clear(self):
        return _ColorMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _ColorMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _ColorMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _ColorMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _ColorMsgPayload.StringVector_swiginit(self, _ColorMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _ColorMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _ColorMsgPayload.StringVector_front(self)

    def back(self):
        return _ColorMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _ColorMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _ColorMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _ColorMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _ColorMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _ColorMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _ColorMsgPayload.delete_StringVector

# Register StringVector in _ColorMsgPayload:
_ColorMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _ColorMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _ColorMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _ColorMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _ColorMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _ColorMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _ColorMsgPayload.NANO2SEC
SEC2NANO = _ColorMsgPayload.SEC2NANO
SEC2HOUR = _ColorMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _ColorMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _ColorMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _ColorMsgPayload.secToNano(seconds)
BOOL_FALSE = _ColorMsgPayload.BOOL_FALSE
BOOL_TRUE = _ColorMsgPayload.BOOL_TRUE
AVAILABLE = _ColorMsgPayload.AVAILABLE
UNAVAILABLE = _ColorMsgPayload.UNAVAILABLE
BalancedWheels = _ColorMsgPayload.BalancedWheels
JitterSimple = _ColorMsgPayload.JitterSimple
JitterFullyCoupled = _ColorMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ColorMsgPayload.SysModel_swiginit(self, _ColorMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _ColorMsgPayload.delete_SysModel

    def SelfInit(self):
        return _ColorMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _ColorMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _ColorMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _ColorMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_ColorMsgPayload.SysModel_ModelTag_get, _ColorMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_ColorMsgPayload.SysModel_CallCounts_get, _ColorMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_ColorMsgPayload.SysModel_RNGSeed_get, _ColorMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_ColorMsgPayload.SysModel_moduleID_get, _ColorMsgPayload.SysModel_moduleID_set)

# Register SysModel in _ColorMsgPayload:
_ColorMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _ColorMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _ColorMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _ColorMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _ColorMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _ColorMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _ColorMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _ColorMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _ColorMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _ColorMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _ColorMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _ColorMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _ColorMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class ColorMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    colorRGBA = property(_ColorMsgPayload.ColorMsgPayload_colorRGBA_get, _ColorMsgPayload.ColorMsgPayload_colorRGBA_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _ColorMsgPayload.ColorMsgPayload_swiginit(self, _ColorMsgPayload.new_ColorMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _ColorMsgPayload.delete_ColorMsgPayload

# Register ColorMsgPayload in _ColorMsgPayload:
_ColorMsgPayload.ColorMsgPayload_swigregister(ColorMsgPayload)

def _pprint_ColorMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[ColorMsgPayload.__repr__] = _pprint_ColorMsgPayload

class ColorMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_ColorMsgPayload.ColorMsgReader_bskLogger_get, _ColorMsgPayload.ColorMsgReader_bskLogger_set)
    zeroMsgPayload = property(_ColorMsgPayload.ColorMsgReader_zeroMsgPayload_get, _ColorMsgPayload.ColorMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _ColorMsgPayload.ColorMsgReader_swiginit(self, _ColorMsgPayload.new_ColorMsgReader(*args))

    def __call__(self):
        return _ColorMsgPayload.ColorMsgReader___call__(self)

    def isLinked(self):
        return _ColorMsgPayload.ColorMsgReader_isLinked(self)

    def isWritten(self):
        return _ColorMsgPayload.ColorMsgReader_isWritten(self)

    def timeWritten(self):
        return _ColorMsgPayload.ColorMsgReader_timeWritten(self)

    def moduleID(self):
        return _ColorMsgPayload.ColorMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _ColorMsgPayload.ColorMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _ColorMsgPayload.ColorMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _ColorMsgPayload.ColorMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _ColorMsgPayload.ColorMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _ColorMsgPayload.ColorMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _ColorMsgPayload.ColorMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _ColorMsgPayload.ColorMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _ColorMsgPayload.ColorMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _ColorMsgPayload.ColorMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _ColorMsgPayload.ColorMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == ColorMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.ColorMsgPayload import ColorMsg_C
            if type(source) == ColorMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<ColorMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == ColorMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.ColorMsgPayload import ColorMsg_C
        except ImportError:
            return 0

        if type(source) == ColorMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _ColorMsgPayload.delete_ColorMsgReader

# Register ColorMsgReader in _ColorMsgPayload:
_ColorMsgPayload.ColorMsgReader_swigregister(ColorMsgReader)
class ColorMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ColorMsgPayload.ColorMsgWriter_swiginit(self, _ColorMsgPayload.new_ColorMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _ColorMsgPayload.ColorMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _ColorMsgPayload.delete_ColorMsgWriter

# Register ColorMsgWriter in _ColorMsgPayload:
_ColorMsgPayload.ColorMsgWriter_swigregister(ColorMsgWriter)
class ColorMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_ColorMsgPayload.ColorMsg_write_get, _ColorMsgPayload.ColorMsg_write_set)

    def addSubscriber(self):
        return _ColorMsgPayload.ColorMsg_addSubscriber(self)

    def addAuthor(self):
        return _ColorMsgPayload.ColorMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _ColorMsgPayload.ColorMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _ColorMsgPayload.ColorMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _ColorMsgPayload.ColorMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_ColorMsgPayload.ColorMsg_zeroMsgPayload_get, _ColorMsgPayload.ColorMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _ColorMsgPayload.ColorMsg_isLinked(self)

    def getPayloadSize(self):
        return _ColorMsgPayload.ColorMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _ColorMsgPayload.ColorMsg_swiginit(self, _ColorMsgPayload.new_ColorMsg())
    __swig_destroy__ = _ColorMsgPayload.delete_ColorMsg

# Register ColorMsg in _ColorMsgPayload:
_ColorMsgPayload.ColorMsg_swigregister(ColorMsg)
class ColorMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ColorMsgPayload.ColorMsgRecorder_swiginit(self, _ColorMsgPayload.new_ColorMsgRecorder(*args))
    __swig_destroy__ = _ColorMsgPayload.delete_ColorMsgRecorder

    def SelfInit(self):
        return _ColorMsgPayload.ColorMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _ColorMsgPayload.ColorMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _ColorMsgPayload.ColorMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _ColorMsgPayload.ColorMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _ColorMsgPayload.ColorMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _ColorMsgPayload.ColorMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _ColorMsgPayload.ColorMsgRecorder___record_vector(self)

    def size(self):
        return _ColorMsgPayload.ColorMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _ColorMsgPayload.ColorMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _ColorMsgPayload.ColorMsgRecorder_clear(self)
    bskLogger = property(_ColorMsgPayload.ColorMsgRecorder_bskLogger_get, _ColorMsgPayload.ColorMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _ColorMsgPayload.ColorMsgRecorder_updateTimeInterval(self, timeDiff)

    def _colorRGBA_array(self):
        return _ColorMsgPayload.ColorMsgRecorder__colorRGBA_array(self)

    @property
    def colorRGBA(self):
        return self._colorRGBA_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register ColorMsgRecorder in _ColorMsgPayload:
_ColorMsgPayload.ColorMsgRecorder_swigregister(ColorMsgRecorder)
class ColorMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ColorMsgPayload.ColorMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ColorMsgPayload.ColorMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _ColorMsgPayload.ColorMsgPayloadVector___bool__(self)

    def __len__(self):
        return _ColorMsgPayload.ColorMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _ColorMsgPayload.ColorMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ColorMsgPayload.ColorMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ColorMsgPayload.ColorMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ColorMsgPayload.ColorMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ColorMsgPayload.ColorMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ColorMsgPayload.ColorMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _ColorMsgPayload.ColorMsgPayloadVector_pop(self)

    def append(self, x):
        return _ColorMsgPayload.ColorMsgPayloadVector_append(self, x)

    def empty(self):
        return _ColorMsgPayload.ColorMsgPayloadVector_empty(self)

    def size(self):
        return _ColorMsgPayload.ColorMsgPayloadVector_size(self)

    def swap(self, v):
        return _ColorMsgPayload.ColorMsgPayloadVector_swap(self, v)

    def begin(self):
        return _ColorMsgPayload.ColorMsgPayloadVector_begin(self)

    def end(self):
        return _ColorMsgPayload.ColorMsgPayloadVector_end(self)

    def rbegin(self):
        return _ColorMsgPayload.ColorMsgPayloadVector_rbegin(self)

    def rend(self):
        return _ColorMsgPayload.ColorMsgPayloadVector_rend(self)

    def clear(self):
        return _ColorMsgPayload.ColorMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _ColorMsgPayload.ColorMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _ColorMsgPayload.ColorMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _ColorMsgPayload.ColorMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _ColorMsgPayload.ColorMsgPayloadVector_swiginit(self, _ColorMsgPayload.new_ColorMsgPayloadVector(*args))

    def push_back(self, x):
        return _ColorMsgPayload.ColorMsgPayloadVector_push_back(self, x)

    def front(self):
        return _ColorMsgPayload.ColorMsgPayloadVector_front(self)

    def back(self):
        return _ColorMsgPayload.ColorMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _ColorMsgPayload.ColorMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _ColorMsgPayload.ColorMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _ColorMsgPayload.ColorMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _ColorMsgPayload.ColorMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _ColorMsgPayload.ColorMsgPayloadVector_capacity(self)

    def get_all(self):
        return _ColorMsgPayload.ColorMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _ColorMsgPayload.delete_ColorMsgPayloadVector

# Register ColorMsgPayloadVector in _ColorMsgPayload:
_ColorMsgPayload.ColorMsgPayloadVector_swigregister(ColorMsgPayloadVector)
class ColorMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ColorMsgPayload.ColorMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ColorMsgPayload.ColorMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _ColorMsgPayload.ColorMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _ColorMsgPayload.ColorMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _ColorMsgPayload.ColorMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ColorMsgPayload.ColorMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ColorMsgPayload.ColorMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ColorMsgPayload.ColorMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ColorMsgPayload.ColorMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ColorMsgPayload.ColorMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _ColorMsgPayload.ColorMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _ColorMsgPayload.ColorMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _ColorMsgPayload.ColorMsgOutMsgsVector_empty(self)

    def size(self):
        return _ColorMsgPayload.ColorMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _ColorMsgPayload.ColorMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _ColorMsgPayload.ColorMsgOutMsgsVector_begin(self)

    def end(self):
        return _ColorMsgPayload.ColorMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _ColorMsgPayload.ColorMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _ColorMsgPayload.ColorMsgOutMsgsVector_rend(self)

    def clear(self):
        return _ColorMsgPayload.ColorMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _ColorMsgPayload.ColorMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _ColorMsgPayload.ColorMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _ColorMsgPayload.ColorMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _ColorMsgPayload.ColorMsgOutMsgsVector_swiginit(self, _ColorMsgPayload.new_ColorMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _ColorMsgPayload.ColorMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _ColorMsgPayload.ColorMsgOutMsgsVector_front(self)

    def back(self):
        return _ColorMsgPayload.ColorMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _ColorMsgPayload.ColorMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _ColorMsgPayload.ColorMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _ColorMsgPayload.ColorMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _ColorMsgPayload.ColorMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _ColorMsgPayload.ColorMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _ColorMsgPayload.delete_ColorMsgOutMsgsVector

# Register ColorMsgOutMsgsVector in _ColorMsgPayload:
_ColorMsgPayload.ColorMsgOutMsgsVector_swigregister(ColorMsgOutMsgsVector)
class ColorMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ColorMsgPayload.ColorMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ColorMsgPayload.ColorMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _ColorMsgPayload.ColorMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _ColorMsgPayload.ColorMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _ColorMsgPayload.ColorMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ColorMsgPayload.ColorMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ColorMsgPayload.ColorMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ColorMsgPayload.ColorMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ColorMsgPayload.ColorMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ColorMsgPayload.ColorMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _ColorMsgPayload.ColorMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _ColorMsgPayload.ColorMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _ColorMsgPayload.ColorMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _ColorMsgPayload.ColorMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _ColorMsgPayload.ColorMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _ColorMsgPayload.ColorMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _ColorMsgPayload.ColorMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _ColorMsgPayload.ColorMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _ColorMsgPayload.ColorMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _ColorMsgPayload.ColorMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _ColorMsgPayload.ColorMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _ColorMsgPayload.ColorMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _ColorMsgPayload.ColorMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _ColorMsgPayload.ColorMsgOutMsgsPtrVector_swiginit(self, _ColorMsgPayload.new_ColorMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _ColorMsgPayload.ColorMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _ColorMsgPayload.ColorMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _ColorMsgPayload.ColorMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _ColorMsgPayload.ColorMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _ColorMsgPayload.ColorMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _ColorMsgPayload.ColorMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _ColorMsgPayload.ColorMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _ColorMsgPayload.ColorMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _ColorMsgPayload.delete_ColorMsgOutMsgsPtrVector

# Register ColorMsgOutMsgsPtrVector in _ColorMsgPayload:
_ColorMsgPayload.ColorMsgOutMsgsPtrVector_swigregister(ColorMsgOutMsgsPtrVector)
class ColorMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ColorMsgPayload.ColorMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ColorMsgPayload.ColorMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _ColorMsgPayload.ColorMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _ColorMsgPayload.ColorMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _ColorMsgPayload.ColorMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ColorMsgPayload.ColorMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ColorMsgPayload.ColorMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ColorMsgPayload.ColorMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ColorMsgPayload.ColorMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ColorMsgPayload.ColorMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _ColorMsgPayload.ColorMsgInMsgsVector_pop(self)

    def append(self, x):
        return _ColorMsgPayload.ColorMsgInMsgsVector_append(self, x)

    def empty(self):
        return _ColorMsgPayload.ColorMsgInMsgsVector_empty(self)

    def size(self):
        return _ColorMsgPayload.ColorMsgInMsgsVector_size(self)

    def swap(self, v):
        return _ColorMsgPayload.ColorMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _ColorMsgPayload.ColorMsgInMsgsVector_begin(self)

    def end(self):
        return _ColorMsgPayload.ColorMsgInMsgsVector_end(self)

    def rbegin(self):
        return _ColorMsgPayload.ColorMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _ColorMsgPayload.ColorMsgInMsgsVector_rend(self)

    def clear(self):
        return _ColorMsgPayload.ColorMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _ColorMsgPayload.ColorMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _ColorMsgPayload.ColorMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _ColorMsgPayload.ColorMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _ColorMsgPayload.ColorMsgInMsgsVector_swiginit(self, _ColorMsgPayload.new_ColorMsgInMsgsVector(*args))

    def push_back(self, x):
        return _ColorMsgPayload.ColorMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _ColorMsgPayload.ColorMsgInMsgsVector_front(self)

    def back(self):
        return _ColorMsgPayload.ColorMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _ColorMsgPayload.ColorMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _ColorMsgPayload.ColorMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _ColorMsgPayload.ColorMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _ColorMsgPayload.ColorMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _ColorMsgPayload.ColorMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _ColorMsgPayload.delete_ColorMsgInMsgsVector

# Register ColorMsgInMsgsVector in _ColorMsgPayload:
_ColorMsgPayload.ColorMsgInMsgsVector_swigregister(ColorMsgInMsgsVector)
class ColorMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_ColorMsgPayload.ColorMsg_C_header_get, _ColorMsgPayload.ColorMsg_C_header_set)
    payload = property(_ColorMsgPayload.ColorMsg_C_payload_get, _ColorMsgPayload.ColorMsg_C_payload_set)
    payloadPointer = property(_ColorMsgPayload.ColorMsg_C_payloadPointer_get, _ColorMsgPayload.ColorMsg_C_payloadPointer_set)
    headerPointer = property(_ColorMsgPayload.ColorMsg_C_headerPointer_get, _ColorMsgPayload.ColorMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _ColorMsgPayload.ColorMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import ColorMsg
        if type(source) == type(self):
            ColorMsg_C_subscribe(self, source)
        elif type(source) == ColorMsg:
            ColorMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            ColorMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe ColorMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        ColorMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import ColorMsg
        if type(source) == type(self):
            return (ColorMsg_C_isSubscribedTo(self, source))
        elif type(source) == ColorMsg:
            return (ColorMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (ColorMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        ColorMsg_C_addAuthor(self, self)
        if data:
            ColorMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        ColorMsg_C_addAuthor(self, self)
        ColorMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return ColorMsg_C_read(self)


    def __init__(self):
        _ColorMsgPayload.ColorMsg_C_swiginit(self, _ColorMsgPayload.new_ColorMsg_C())
    __swig_destroy__ = _ColorMsgPayload.delete_ColorMsg_C

# Register ColorMsg_C in _ColorMsgPayload:
_ColorMsgPayload.ColorMsg_C_swigregister(ColorMsg_C)

def ColorMsg_cpp_subscribe(subscriber, source):
    return _ColorMsgPayload.ColorMsg_cpp_subscribe(subscriber, source)

def ColorMsg_C_subscribe(subscriber, source):
    return _ColorMsgPayload.ColorMsg_C_subscribe(subscriber, source)

def ColorMsg_addr_subscribe(subscriber, sourceAddr):
    return _ColorMsgPayload.ColorMsg_addr_subscribe(subscriber, sourceAddr)

def ColorMsg_unsubscribe(subscriber):
    return _ColorMsgPayload.ColorMsg_unsubscribe(subscriber)

def ColorMsg_C_isSubscribedTo(subscriber, source):
    return _ColorMsgPayload.ColorMsg_C_isSubscribedTo(subscriber, source)

def ColorMsg_cpp_isSubscribedTo(subscriber, source):
    return _ColorMsgPayload.ColorMsg_cpp_isSubscribedTo(subscriber, source)

def ColorMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _ColorMsgPayload.ColorMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def ColorMsg_C_addAuthor(coowner, data):
    return _ColorMsgPayload.ColorMsg_C_addAuthor(coowner, data)

def ColorMsg_C_init(owner):
    return _ColorMsgPayload.ColorMsg_C_init(owner)

def ColorMsg_C_isLinked(data):
    return _ColorMsgPayload.ColorMsg_C_isLinked(data)

def ColorMsg_C_isWritten(data):
    return _ColorMsgPayload.ColorMsg_C_isWritten(data)

def ColorMsg_C_timeWritten(data):
    return _ColorMsgPayload.ColorMsg_C_timeWritten(data)

def ColorMsg_C_moduleID(data):
    return _ColorMsgPayload.ColorMsg_C_moduleID(data)

def ColorMsg_C_write(data, destination, moduleID, callTime):
    return _ColorMsgPayload.ColorMsg_C_write(data, destination, moduleID, callTime)

def ColorMsg_C_read(source):
    return _ColorMsgPayload.ColorMsg_C_read(source)

def ColorMsg_C_zeroMsgPayload():
    return _ColorMsgPayload.ColorMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_ColorMsgPayload.MsgHeader_isLinked_get, _ColorMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_ColorMsgPayload.MsgHeader_isWritten_get, _ColorMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_ColorMsgPayload.MsgHeader_timeWritten_get, _ColorMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_ColorMsgPayload.MsgHeader_moduleID_get, _ColorMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _ColorMsgPayload.MsgHeader_swiginit(self, _ColorMsgPayload.new_MsgHeader())
    __swig_destroy__ = _ColorMsgPayload.delete_MsgHeader

# Register MsgHeader in _ColorMsgPayload:
_ColorMsgPayload.MsgHeader_swigregister(MsgHeader)

