# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _PowerNodeUsageMsgPayload
else:
    import _PowerNodeUsageMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PowerNodeUsageMsgPayload.delete_SwigPyIterator

    def value(self):
        return _PowerNodeUsageMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _PowerNodeUsageMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _PowerNodeUsageMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _PowerNodeUsageMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _PowerNodeUsageMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _PowerNodeUsageMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _PowerNodeUsageMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _PowerNodeUsageMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _PowerNodeUsageMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _PowerNodeUsageMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _PowerNodeUsageMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _PowerNodeUsageMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _PowerNodeUsageMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _PowerNodeUsageMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _PowerNodeUsageMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _PowerNodeUsageMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _PowerNodeUsageMsgPayload:
_PowerNodeUsageMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _PowerNodeUsageMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _PowerNodeUsageMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _PowerNodeUsageMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _PowerNodeUsageMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _PowerNodeUsageMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _PowerNodeUsageMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _PowerNodeUsageMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _PowerNodeUsageMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _PowerNodeUsageMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _PowerNodeUsageMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _PowerNodeUsageMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _PowerNodeUsageMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _PowerNodeUsageMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _PowerNodeUsageMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _PowerNodeUsageMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _PowerNodeUsageMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PowerNodeUsageMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PowerNodeUsageMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _PowerNodeUsageMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _PowerNodeUsageMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _PowerNodeUsageMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PowerNodeUsageMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PowerNodeUsageMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PowerNodeUsageMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PowerNodeUsageMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PowerNodeUsageMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _PowerNodeUsageMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _PowerNodeUsageMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _PowerNodeUsageMsgPayload.TimeVector_empty(self)

    def size(self):
        return _PowerNodeUsageMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _PowerNodeUsageMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _PowerNodeUsageMsgPayload.TimeVector_begin(self)

    def end(self):
        return _PowerNodeUsageMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _PowerNodeUsageMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _PowerNodeUsageMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _PowerNodeUsageMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _PowerNodeUsageMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _PowerNodeUsageMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _PowerNodeUsageMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _PowerNodeUsageMsgPayload.TimeVector_swiginit(self, _PowerNodeUsageMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _PowerNodeUsageMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _PowerNodeUsageMsgPayload.TimeVector_front(self)

    def back(self):
        return _PowerNodeUsageMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _PowerNodeUsageMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _PowerNodeUsageMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _PowerNodeUsageMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _PowerNodeUsageMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _PowerNodeUsageMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _PowerNodeUsageMsgPayload.delete_TimeVector

# Register TimeVector in _PowerNodeUsageMsgPayload:
_PowerNodeUsageMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PowerNodeUsageMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PowerNodeUsageMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _PowerNodeUsageMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _PowerNodeUsageMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _PowerNodeUsageMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PowerNodeUsageMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PowerNodeUsageMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PowerNodeUsageMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PowerNodeUsageMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PowerNodeUsageMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _PowerNodeUsageMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _PowerNodeUsageMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _PowerNodeUsageMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _PowerNodeUsageMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _PowerNodeUsageMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _PowerNodeUsageMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _PowerNodeUsageMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _PowerNodeUsageMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _PowerNodeUsageMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _PowerNodeUsageMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _PowerNodeUsageMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _PowerNodeUsageMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _PowerNodeUsageMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _PowerNodeUsageMsgPayload.DoubleVector_swiginit(self, _PowerNodeUsageMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _PowerNodeUsageMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _PowerNodeUsageMsgPayload.DoubleVector_front(self)

    def back(self):
        return _PowerNodeUsageMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _PowerNodeUsageMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _PowerNodeUsageMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _PowerNodeUsageMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _PowerNodeUsageMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _PowerNodeUsageMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _PowerNodeUsageMsgPayload.delete_DoubleVector

# Register DoubleVector in _PowerNodeUsageMsgPayload:
_PowerNodeUsageMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PowerNodeUsageMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PowerNodeUsageMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _PowerNodeUsageMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _PowerNodeUsageMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _PowerNodeUsageMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PowerNodeUsageMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PowerNodeUsageMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PowerNodeUsageMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PowerNodeUsageMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PowerNodeUsageMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _PowerNodeUsageMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _PowerNodeUsageMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _PowerNodeUsageMsgPayload.StringVector_empty(self)

    def size(self):
        return _PowerNodeUsageMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _PowerNodeUsageMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _PowerNodeUsageMsgPayload.StringVector_begin(self)

    def end(self):
        return _PowerNodeUsageMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _PowerNodeUsageMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _PowerNodeUsageMsgPayload.StringVector_rend(self)

    def clear(self):
        return _PowerNodeUsageMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _PowerNodeUsageMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _PowerNodeUsageMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _PowerNodeUsageMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _PowerNodeUsageMsgPayload.StringVector_swiginit(self, _PowerNodeUsageMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _PowerNodeUsageMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _PowerNodeUsageMsgPayload.StringVector_front(self)

    def back(self):
        return _PowerNodeUsageMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _PowerNodeUsageMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _PowerNodeUsageMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _PowerNodeUsageMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _PowerNodeUsageMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _PowerNodeUsageMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _PowerNodeUsageMsgPayload.delete_StringVector

# Register StringVector in _PowerNodeUsageMsgPayload:
_PowerNodeUsageMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _PowerNodeUsageMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _PowerNodeUsageMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _PowerNodeUsageMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _PowerNodeUsageMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _PowerNodeUsageMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _PowerNodeUsageMsgPayload.NANO2SEC
SEC2NANO = _PowerNodeUsageMsgPayload.SEC2NANO
SEC2HOUR = _PowerNodeUsageMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _PowerNodeUsageMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _PowerNodeUsageMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _PowerNodeUsageMsgPayload.secToNano(seconds)
BOOL_FALSE = _PowerNodeUsageMsgPayload.BOOL_FALSE
BOOL_TRUE = _PowerNodeUsageMsgPayload.BOOL_TRUE
AVAILABLE = _PowerNodeUsageMsgPayload.AVAILABLE
UNAVAILABLE = _PowerNodeUsageMsgPayload.UNAVAILABLE
BalancedWheels = _PowerNodeUsageMsgPayload.BalancedWheels
JitterSimple = _PowerNodeUsageMsgPayload.JitterSimple
JitterFullyCoupled = _PowerNodeUsageMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PowerNodeUsageMsgPayload.SysModel_swiginit(self, _PowerNodeUsageMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _PowerNodeUsageMsgPayload.delete_SysModel

    def SelfInit(self):
        return _PowerNodeUsageMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _PowerNodeUsageMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _PowerNodeUsageMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _PowerNodeUsageMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_PowerNodeUsageMsgPayload.SysModel_ModelTag_get, _PowerNodeUsageMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_PowerNodeUsageMsgPayload.SysModel_CallCounts_get, _PowerNodeUsageMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_PowerNodeUsageMsgPayload.SysModel_RNGSeed_get, _PowerNodeUsageMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_PowerNodeUsageMsgPayload.SysModel_moduleID_get, _PowerNodeUsageMsgPayload.SysModel_moduleID_set)

# Register SysModel in _PowerNodeUsageMsgPayload:
_PowerNodeUsageMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _PowerNodeUsageMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _PowerNodeUsageMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _PowerNodeUsageMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _PowerNodeUsageMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _PowerNodeUsageMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _PowerNodeUsageMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _PowerNodeUsageMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _PowerNodeUsageMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _PowerNodeUsageMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _PowerNodeUsageMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _PowerNodeUsageMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _PowerNodeUsageMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class PowerNodeUsageMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    netPower = property(_PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayload_netPower_get, _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayload_netPower_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayload_swiginit(self, _PowerNodeUsageMsgPayload.new_PowerNodeUsageMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _PowerNodeUsageMsgPayload.delete_PowerNodeUsageMsgPayload

# Register PowerNodeUsageMsgPayload in _PowerNodeUsageMsgPayload:
_PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayload_swigregister(PowerNodeUsageMsgPayload)

def _pprint_PowerNodeUsageMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[PowerNodeUsageMsgPayload.__repr__] = _pprint_PowerNodeUsageMsgPayload

class PowerNodeUsageMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_PowerNodeUsageMsgPayload.PowerNodeUsageMsgReader_bskLogger_get, _PowerNodeUsageMsgPayload.PowerNodeUsageMsgReader_bskLogger_set)
    zeroMsgPayload = property(_PowerNodeUsageMsgPayload.PowerNodeUsageMsgReader_zeroMsgPayload_get, _PowerNodeUsageMsgPayload.PowerNodeUsageMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _PowerNodeUsageMsgPayload.PowerNodeUsageMsgReader_swiginit(self, _PowerNodeUsageMsgPayload.new_PowerNodeUsageMsgReader(*args))

    def __call__(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgReader___call__(self)

    def isLinked(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgReader_isLinked(self)

    def isWritten(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgReader_isWritten(self)

    def timeWritten(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgReader_timeWritten(self)

    def moduleID(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == PowerNodeUsageMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.PowerNodeUsageMsgPayload import PowerNodeUsageMsg_C
            if type(source) == PowerNodeUsageMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<PowerNodeUsageMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == PowerNodeUsageMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.PowerNodeUsageMsgPayload import PowerNodeUsageMsg_C
        except ImportError:
            return 0

        if type(source) == PowerNodeUsageMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _PowerNodeUsageMsgPayload.delete_PowerNodeUsageMsgReader

# Register PowerNodeUsageMsgReader in _PowerNodeUsageMsgPayload:
_PowerNodeUsageMsgPayload.PowerNodeUsageMsgReader_swigregister(PowerNodeUsageMsgReader)
class PowerNodeUsageMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PowerNodeUsageMsgPayload.PowerNodeUsageMsgWriter_swiginit(self, _PowerNodeUsageMsgPayload.new_PowerNodeUsageMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _PowerNodeUsageMsgPayload.delete_PowerNodeUsageMsgWriter

# Register PowerNodeUsageMsgWriter in _PowerNodeUsageMsgPayload:
_PowerNodeUsageMsgPayload.PowerNodeUsageMsgWriter_swigregister(PowerNodeUsageMsgWriter)
class PowerNodeUsageMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_PowerNodeUsageMsgPayload.PowerNodeUsageMsg_write_get, _PowerNodeUsageMsgPayload.PowerNodeUsageMsg_write_set)

    def addSubscriber(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsg_addSubscriber(self)

    def addAuthor(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_PowerNodeUsageMsgPayload.PowerNodeUsageMsg_zeroMsgPayload_get, _PowerNodeUsageMsgPayload.PowerNodeUsageMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsg_isLinked(self)

    def getPayloadSize(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _PowerNodeUsageMsgPayload.PowerNodeUsageMsg_swiginit(self, _PowerNodeUsageMsgPayload.new_PowerNodeUsageMsg())
    __swig_destroy__ = _PowerNodeUsageMsgPayload.delete_PowerNodeUsageMsg

# Register PowerNodeUsageMsg in _PowerNodeUsageMsgPayload:
_PowerNodeUsageMsgPayload.PowerNodeUsageMsg_swigregister(PowerNodeUsageMsg)
class PowerNodeUsageMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PowerNodeUsageMsgPayload.PowerNodeUsageMsgRecorder_swiginit(self, _PowerNodeUsageMsgPayload.new_PowerNodeUsageMsgRecorder(*args))
    __swig_destroy__ = _PowerNodeUsageMsgPayload.delete_PowerNodeUsageMsgRecorder

    def SelfInit(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgRecorder___record_vector(self)

    def size(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgRecorder_clear(self)
    bskLogger = property(_PowerNodeUsageMsgPayload.PowerNodeUsageMsgRecorder_bskLogger_get, _PowerNodeUsageMsgPayload.PowerNodeUsageMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgRecorder_updateTimeInterval(self, timeDiff)

    def _netPower_array(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgRecorder__netPower_array(self)

    @property
    def netPower(self):
        return self._netPower_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register PowerNodeUsageMsgRecorder in _PowerNodeUsageMsgPayload:
_PowerNodeUsageMsgPayload.PowerNodeUsageMsgRecorder_swigregister(PowerNodeUsageMsgRecorder)
class PowerNodeUsageMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayloadVector___bool__(self)

    def __len__(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayloadVector_pop(self)

    def append(self, x):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayloadVector_append(self, x)

    def empty(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayloadVector_empty(self)

    def size(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayloadVector_size(self)

    def swap(self, v):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayloadVector_swap(self, v)

    def begin(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayloadVector_begin(self)

    def end(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayloadVector_end(self)

    def rbegin(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayloadVector_rbegin(self)

    def rend(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayloadVector_rend(self)

    def clear(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayloadVector_swiginit(self, _PowerNodeUsageMsgPayload.new_PowerNodeUsageMsgPayloadVector(*args))

    def push_back(self, x):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayloadVector_push_back(self, x)

    def front(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayloadVector_front(self)

    def back(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayloadVector_capacity(self)

    def get_all(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _PowerNodeUsageMsgPayload.delete_PowerNodeUsageMsgPayloadVector

# Register PowerNodeUsageMsgPayloadVector in _PowerNodeUsageMsgPayload:
_PowerNodeUsageMsgPayload.PowerNodeUsageMsgPayloadVector_swigregister(PowerNodeUsageMsgPayloadVector)
class PowerNodeUsageMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsVector_empty(self)

    def size(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsVector_begin(self)

    def end(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsVector_rend(self)

    def clear(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsVector_swiginit(self, _PowerNodeUsageMsgPayload.new_PowerNodeUsageMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsVector_front(self)

    def back(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _PowerNodeUsageMsgPayload.delete_PowerNodeUsageMsgOutMsgsVector

# Register PowerNodeUsageMsgOutMsgsVector in _PowerNodeUsageMsgPayload:
_PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsVector_swigregister(PowerNodeUsageMsgOutMsgsVector)
class PowerNodeUsageMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsPtrVector_swiginit(self, _PowerNodeUsageMsgPayload.new_PowerNodeUsageMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _PowerNodeUsageMsgPayload.delete_PowerNodeUsageMsgOutMsgsPtrVector

# Register PowerNodeUsageMsgOutMsgsPtrVector in _PowerNodeUsageMsgPayload:
_PowerNodeUsageMsgPayload.PowerNodeUsageMsgOutMsgsPtrVector_swigregister(PowerNodeUsageMsgOutMsgsPtrVector)
class PowerNodeUsageMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgInMsgsVector_pop(self)

    def append(self, x):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgInMsgsVector_append(self, x)

    def empty(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgInMsgsVector_empty(self)

    def size(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgInMsgsVector_size(self)

    def swap(self, v):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgInMsgsVector_begin(self)

    def end(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgInMsgsVector_end(self)

    def rbegin(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgInMsgsVector_rend(self)

    def clear(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _PowerNodeUsageMsgPayload.PowerNodeUsageMsgInMsgsVector_swiginit(self, _PowerNodeUsageMsgPayload.new_PowerNodeUsageMsgInMsgsVector(*args))

    def push_back(self, x):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgInMsgsVector_front(self)

    def back(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _PowerNodeUsageMsgPayload.delete_PowerNodeUsageMsgInMsgsVector

# Register PowerNodeUsageMsgInMsgsVector in _PowerNodeUsageMsgPayload:
_PowerNodeUsageMsgPayload.PowerNodeUsageMsgInMsgsVector_swigregister(PowerNodeUsageMsgInMsgsVector)
class PowerNodeUsageMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_PowerNodeUsageMsgPayload.PowerNodeUsageMsg_C_header_get, _PowerNodeUsageMsgPayload.PowerNodeUsageMsg_C_header_set)
    payload = property(_PowerNodeUsageMsgPayload.PowerNodeUsageMsg_C_payload_get, _PowerNodeUsageMsgPayload.PowerNodeUsageMsg_C_payload_set)
    payloadPointer = property(_PowerNodeUsageMsgPayload.PowerNodeUsageMsg_C_payloadPointer_get, _PowerNodeUsageMsgPayload.PowerNodeUsageMsg_C_payloadPointer_set)
    headerPointer = property(_PowerNodeUsageMsgPayload.PowerNodeUsageMsg_C_headerPointer_get, _PowerNodeUsageMsgPayload.PowerNodeUsageMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _PowerNodeUsageMsgPayload.PowerNodeUsageMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import PowerNodeUsageMsg
        if type(source) == type(self):
            PowerNodeUsageMsg_C_subscribe(self, source)
        elif type(source) == PowerNodeUsageMsg:
            PowerNodeUsageMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            PowerNodeUsageMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe PowerNodeUsageMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        PowerNodeUsageMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import PowerNodeUsageMsg
        if type(source) == type(self):
            return (PowerNodeUsageMsg_C_isSubscribedTo(self, source))
        elif type(source) == PowerNodeUsageMsg:
            return (PowerNodeUsageMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (PowerNodeUsageMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        PowerNodeUsageMsg_C_addAuthor(self, self)
        if data:
            PowerNodeUsageMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        PowerNodeUsageMsg_C_addAuthor(self, self)
        PowerNodeUsageMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return PowerNodeUsageMsg_C_read(self)


    def __init__(self):
        _PowerNodeUsageMsgPayload.PowerNodeUsageMsg_C_swiginit(self, _PowerNodeUsageMsgPayload.new_PowerNodeUsageMsg_C())
    __swig_destroy__ = _PowerNodeUsageMsgPayload.delete_PowerNodeUsageMsg_C

# Register PowerNodeUsageMsg_C in _PowerNodeUsageMsgPayload:
_PowerNodeUsageMsgPayload.PowerNodeUsageMsg_C_swigregister(PowerNodeUsageMsg_C)

def PowerNodeUsageMsg_cpp_subscribe(subscriber, source):
    return _PowerNodeUsageMsgPayload.PowerNodeUsageMsg_cpp_subscribe(subscriber, source)

def PowerNodeUsageMsg_C_subscribe(subscriber, source):
    return _PowerNodeUsageMsgPayload.PowerNodeUsageMsg_C_subscribe(subscriber, source)

def PowerNodeUsageMsg_addr_subscribe(subscriber, sourceAddr):
    return _PowerNodeUsageMsgPayload.PowerNodeUsageMsg_addr_subscribe(subscriber, sourceAddr)

def PowerNodeUsageMsg_unsubscribe(subscriber):
    return _PowerNodeUsageMsgPayload.PowerNodeUsageMsg_unsubscribe(subscriber)

def PowerNodeUsageMsg_C_isSubscribedTo(subscriber, source):
    return _PowerNodeUsageMsgPayload.PowerNodeUsageMsg_C_isSubscribedTo(subscriber, source)

def PowerNodeUsageMsg_cpp_isSubscribedTo(subscriber, source):
    return _PowerNodeUsageMsgPayload.PowerNodeUsageMsg_cpp_isSubscribedTo(subscriber, source)

def PowerNodeUsageMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _PowerNodeUsageMsgPayload.PowerNodeUsageMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def PowerNodeUsageMsg_C_addAuthor(coowner, data):
    return _PowerNodeUsageMsgPayload.PowerNodeUsageMsg_C_addAuthor(coowner, data)

def PowerNodeUsageMsg_C_init(owner):
    return _PowerNodeUsageMsgPayload.PowerNodeUsageMsg_C_init(owner)

def PowerNodeUsageMsg_C_isLinked(data):
    return _PowerNodeUsageMsgPayload.PowerNodeUsageMsg_C_isLinked(data)

def PowerNodeUsageMsg_C_isWritten(data):
    return _PowerNodeUsageMsgPayload.PowerNodeUsageMsg_C_isWritten(data)

def PowerNodeUsageMsg_C_timeWritten(data):
    return _PowerNodeUsageMsgPayload.PowerNodeUsageMsg_C_timeWritten(data)

def PowerNodeUsageMsg_C_moduleID(data):
    return _PowerNodeUsageMsgPayload.PowerNodeUsageMsg_C_moduleID(data)

def PowerNodeUsageMsg_C_write(data, destination, moduleID, callTime):
    return _PowerNodeUsageMsgPayload.PowerNodeUsageMsg_C_write(data, destination, moduleID, callTime)

def PowerNodeUsageMsg_C_read(source):
    return _PowerNodeUsageMsgPayload.PowerNodeUsageMsg_C_read(source)

def PowerNodeUsageMsg_C_zeroMsgPayload():
    return _PowerNodeUsageMsgPayload.PowerNodeUsageMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_PowerNodeUsageMsgPayload.MsgHeader_isLinked_get, _PowerNodeUsageMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_PowerNodeUsageMsgPayload.MsgHeader_isWritten_get, _PowerNodeUsageMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_PowerNodeUsageMsgPayload.MsgHeader_timeWritten_get, _PowerNodeUsageMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_PowerNodeUsageMsgPayload.MsgHeader_moduleID_get, _PowerNodeUsageMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _PowerNodeUsageMsgPayload.MsgHeader_swiginit(self, _PowerNodeUsageMsgPayload.new_MsgHeader())
    __swig_destroy__ = _PowerNodeUsageMsgPayload.delete_MsgHeader

# Register MsgHeader in _PowerNodeUsageMsgPayload:
_PowerNodeUsageMsgPayload.MsgHeader_swigregister(MsgHeader)

