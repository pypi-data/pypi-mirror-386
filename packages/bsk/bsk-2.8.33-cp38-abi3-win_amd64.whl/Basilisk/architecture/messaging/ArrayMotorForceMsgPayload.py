# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ArrayMotorForceMsgPayload
else:
    import _ArrayMotorForceMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ArrayMotorForceMsgPayload.delete_SwigPyIterator

    def value(self):
        return _ArrayMotorForceMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ArrayMotorForceMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ArrayMotorForceMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ArrayMotorForceMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ArrayMotorForceMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ArrayMotorForceMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _ArrayMotorForceMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _ArrayMotorForceMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _ArrayMotorForceMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ArrayMotorForceMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ArrayMotorForceMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ArrayMotorForceMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ArrayMotorForceMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ArrayMotorForceMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ArrayMotorForceMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ArrayMotorForceMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ArrayMotorForceMsgPayload:
_ArrayMotorForceMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _ArrayMotorForceMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _ArrayMotorForceMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _ArrayMotorForceMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _ArrayMotorForceMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _ArrayMotorForceMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _ArrayMotorForceMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _ArrayMotorForceMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _ArrayMotorForceMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _ArrayMotorForceMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _ArrayMotorForceMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _ArrayMotorForceMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _ArrayMotorForceMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _ArrayMotorForceMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _ArrayMotorForceMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _ArrayMotorForceMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _ArrayMotorForceMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ArrayMotorForceMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ArrayMotorForceMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _ArrayMotorForceMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _ArrayMotorForceMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _ArrayMotorForceMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ArrayMotorForceMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ArrayMotorForceMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ArrayMotorForceMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ArrayMotorForceMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ArrayMotorForceMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _ArrayMotorForceMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _ArrayMotorForceMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _ArrayMotorForceMsgPayload.TimeVector_empty(self)

    def size(self):
        return _ArrayMotorForceMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _ArrayMotorForceMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _ArrayMotorForceMsgPayload.TimeVector_begin(self)

    def end(self):
        return _ArrayMotorForceMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _ArrayMotorForceMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _ArrayMotorForceMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _ArrayMotorForceMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _ArrayMotorForceMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _ArrayMotorForceMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _ArrayMotorForceMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _ArrayMotorForceMsgPayload.TimeVector_swiginit(self, _ArrayMotorForceMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _ArrayMotorForceMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _ArrayMotorForceMsgPayload.TimeVector_front(self)

    def back(self):
        return _ArrayMotorForceMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _ArrayMotorForceMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _ArrayMotorForceMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _ArrayMotorForceMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _ArrayMotorForceMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _ArrayMotorForceMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _ArrayMotorForceMsgPayload.delete_TimeVector

# Register TimeVector in _ArrayMotorForceMsgPayload:
_ArrayMotorForceMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ArrayMotorForceMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ArrayMotorForceMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _ArrayMotorForceMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _ArrayMotorForceMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _ArrayMotorForceMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ArrayMotorForceMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ArrayMotorForceMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ArrayMotorForceMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ArrayMotorForceMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ArrayMotorForceMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _ArrayMotorForceMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _ArrayMotorForceMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _ArrayMotorForceMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _ArrayMotorForceMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _ArrayMotorForceMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _ArrayMotorForceMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _ArrayMotorForceMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _ArrayMotorForceMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _ArrayMotorForceMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _ArrayMotorForceMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _ArrayMotorForceMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _ArrayMotorForceMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _ArrayMotorForceMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _ArrayMotorForceMsgPayload.DoubleVector_swiginit(self, _ArrayMotorForceMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _ArrayMotorForceMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _ArrayMotorForceMsgPayload.DoubleVector_front(self)

    def back(self):
        return _ArrayMotorForceMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _ArrayMotorForceMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _ArrayMotorForceMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _ArrayMotorForceMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _ArrayMotorForceMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _ArrayMotorForceMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _ArrayMotorForceMsgPayload.delete_DoubleVector

# Register DoubleVector in _ArrayMotorForceMsgPayload:
_ArrayMotorForceMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ArrayMotorForceMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ArrayMotorForceMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _ArrayMotorForceMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _ArrayMotorForceMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _ArrayMotorForceMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ArrayMotorForceMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ArrayMotorForceMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ArrayMotorForceMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ArrayMotorForceMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ArrayMotorForceMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _ArrayMotorForceMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _ArrayMotorForceMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _ArrayMotorForceMsgPayload.StringVector_empty(self)

    def size(self):
        return _ArrayMotorForceMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _ArrayMotorForceMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _ArrayMotorForceMsgPayload.StringVector_begin(self)

    def end(self):
        return _ArrayMotorForceMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _ArrayMotorForceMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _ArrayMotorForceMsgPayload.StringVector_rend(self)

    def clear(self):
        return _ArrayMotorForceMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _ArrayMotorForceMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _ArrayMotorForceMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _ArrayMotorForceMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _ArrayMotorForceMsgPayload.StringVector_swiginit(self, _ArrayMotorForceMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _ArrayMotorForceMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _ArrayMotorForceMsgPayload.StringVector_front(self)

    def back(self):
        return _ArrayMotorForceMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _ArrayMotorForceMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _ArrayMotorForceMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _ArrayMotorForceMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _ArrayMotorForceMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _ArrayMotorForceMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _ArrayMotorForceMsgPayload.delete_StringVector

# Register StringVector in _ArrayMotorForceMsgPayload:
_ArrayMotorForceMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _ArrayMotorForceMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _ArrayMotorForceMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _ArrayMotorForceMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _ArrayMotorForceMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _ArrayMotorForceMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _ArrayMotorForceMsgPayload.NANO2SEC
SEC2NANO = _ArrayMotorForceMsgPayload.SEC2NANO
SEC2HOUR = _ArrayMotorForceMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _ArrayMotorForceMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _ArrayMotorForceMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _ArrayMotorForceMsgPayload.secToNano(seconds)
BOOL_FALSE = _ArrayMotorForceMsgPayload.BOOL_FALSE
BOOL_TRUE = _ArrayMotorForceMsgPayload.BOOL_TRUE
AVAILABLE = _ArrayMotorForceMsgPayload.AVAILABLE
UNAVAILABLE = _ArrayMotorForceMsgPayload.UNAVAILABLE
BalancedWheels = _ArrayMotorForceMsgPayload.BalancedWheels
JitterSimple = _ArrayMotorForceMsgPayload.JitterSimple
JitterFullyCoupled = _ArrayMotorForceMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ArrayMotorForceMsgPayload.SysModel_swiginit(self, _ArrayMotorForceMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _ArrayMotorForceMsgPayload.delete_SysModel

    def SelfInit(self):
        return _ArrayMotorForceMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _ArrayMotorForceMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _ArrayMotorForceMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _ArrayMotorForceMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_ArrayMotorForceMsgPayload.SysModel_ModelTag_get, _ArrayMotorForceMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_ArrayMotorForceMsgPayload.SysModel_CallCounts_get, _ArrayMotorForceMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_ArrayMotorForceMsgPayload.SysModel_RNGSeed_get, _ArrayMotorForceMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_ArrayMotorForceMsgPayload.SysModel_moduleID_get, _ArrayMotorForceMsgPayload.SysModel_moduleID_set)

# Register SysModel in _ArrayMotorForceMsgPayload:
_ArrayMotorForceMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _ArrayMotorForceMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _ArrayMotorForceMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _ArrayMotorForceMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _ArrayMotorForceMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _ArrayMotorForceMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _ArrayMotorForceMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _ArrayMotorForceMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _ArrayMotorForceMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _ArrayMotorForceMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _ArrayMotorForceMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _ArrayMotorForceMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _ArrayMotorForceMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class ArrayMotorForceMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    motorForce = property(_ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayload_motorForce_get, _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayload_motorForce_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayload_swiginit(self, _ArrayMotorForceMsgPayload.new_ArrayMotorForceMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _ArrayMotorForceMsgPayload.delete_ArrayMotorForceMsgPayload

# Register ArrayMotorForceMsgPayload in _ArrayMotorForceMsgPayload:
_ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayload_swigregister(ArrayMotorForceMsgPayload)

def _pprint_ArrayMotorForceMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[ArrayMotorForceMsgPayload.__repr__] = _pprint_ArrayMotorForceMsgPayload

class ArrayMotorForceMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_ArrayMotorForceMsgPayload.ArrayMotorForceMsgReader_bskLogger_get, _ArrayMotorForceMsgPayload.ArrayMotorForceMsgReader_bskLogger_set)
    zeroMsgPayload = property(_ArrayMotorForceMsgPayload.ArrayMotorForceMsgReader_zeroMsgPayload_get, _ArrayMotorForceMsgPayload.ArrayMotorForceMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _ArrayMotorForceMsgPayload.ArrayMotorForceMsgReader_swiginit(self, _ArrayMotorForceMsgPayload.new_ArrayMotorForceMsgReader(*args))

    def __call__(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgReader___call__(self)

    def isLinked(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgReader_isLinked(self)

    def isWritten(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgReader_isWritten(self)

    def timeWritten(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgReader_timeWritten(self)

    def moduleID(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == ArrayMotorForceMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.ArrayMotorForceMsgPayload import ArrayMotorForceMsg_C
            if type(source) == ArrayMotorForceMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<ArrayMotorForceMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == ArrayMotorForceMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.ArrayMotorForceMsgPayload import ArrayMotorForceMsg_C
        except ImportError:
            return 0

        if type(source) == ArrayMotorForceMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _ArrayMotorForceMsgPayload.delete_ArrayMotorForceMsgReader

# Register ArrayMotorForceMsgReader in _ArrayMotorForceMsgPayload:
_ArrayMotorForceMsgPayload.ArrayMotorForceMsgReader_swigregister(ArrayMotorForceMsgReader)
class ArrayMotorForceMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ArrayMotorForceMsgPayload.ArrayMotorForceMsgWriter_swiginit(self, _ArrayMotorForceMsgPayload.new_ArrayMotorForceMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _ArrayMotorForceMsgPayload.delete_ArrayMotorForceMsgWriter

# Register ArrayMotorForceMsgWriter in _ArrayMotorForceMsgPayload:
_ArrayMotorForceMsgPayload.ArrayMotorForceMsgWriter_swigregister(ArrayMotorForceMsgWriter)
class ArrayMotorForceMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_ArrayMotorForceMsgPayload.ArrayMotorForceMsg_write_get, _ArrayMotorForceMsgPayload.ArrayMotorForceMsg_write_set)

    def addSubscriber(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsg_addSubscriber(self)

    def addAuthor(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_ArrayMotorForceMsgPayload.ArrayMotorForceMsg_zeroMsgPayload_get, _ArrayMotorForceMsgPayload.ArrayMotorForceMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsg_isLinked(self)

    def getPayloadSize(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _ArrayMotorForceMsgPayload.ArrayMotorForceMsg_swiginit(self, _ArrayMotorForceMsgPayload.new_ArrayMotorForceMsg())
    __swig_destroy__ = _ArrayMotorForceMsgPayload.delete_ArrayMotorForceMsg

# Register ArrayMotorForceMsg in _ArrayMotorForceMsgPayload:
_ArrayMotorForceMsgPayload.ArrayMotorForceMsg_swigregister(ArrayMotorForceMsg)
class ArrayMotorForceMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ArrayMotorForceMsgPayload.ArrayMotorForceMsgRecorder_swiginit(self, _ArrayMotorForceMsgPayload.new_ArrayMotorForceMsgRecorder(*args))
    __swig_destroy__ = _ArrayMotorForceMsgPayload.delete_ArrayMotorForceMsgRecorder

    def SelfInit(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgRecorder___record_vector(self)

    def size(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgRecorder_clear(self)
    bskLogger = property(_ArrayMotorForceMsgPayload.ArrayMotorForceMsgRecorder_bskLogger_get, _ArrayMotorForceMsgPayload.ArrayMotorForceMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgRecorder_updateTimeInterval(self, timeDiff)

    def _motorForce_array(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgRecorder__motorForce_array(self)

    @property
    def motorForce(self):
        return self._motorForce_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register ArrayMotorForceMsgRecorder in _ArrayMotorForceMsgPayload:
_ArrayMotorForceMsgPayload.ArrayMotorForceMsgRecorder_swigregister(ArrayMotorForceMsgRecorder)
class ArrayMotorForceMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayloadVector___bool__(self)

    def __len__(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayloadVector_pop(self)

    def append(self, x):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayloadVector_append(self, x)

    def empty(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayloadVector_empty(self)

    def size(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayloadVector_size(self)

    def swap(self, v):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayloadVector_swap(self, v)

    def begin(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayloadVector_begin(self)

    def end(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayloadVector_end(self)

    def rbegin(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayloadVector_rbegin(self)

    def rend(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayloadVector_rend(self)

    def clear(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayloadVector_swiginit(self, _ArrayMotorForceMsgPayload.new_ArrayMotorForceMsgPayloadVector(*args))

    def push_back(self, x):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayloadVector_push_back(self, x)

    def front(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayloadVector_front(self)

    def back(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayloadVector_capacity(self)

    def get_all(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _ArrayMotorForceMsgPayload.delete_ArrayMotorForceMsgPayloadVector

# Register ArrayMotorForceMsgPayloadVector in _ArrayMotorForceMsgPayload:
_ArrayMotorForceMsgPayload.ArrayMotorForceMsgPayloadVector_swigregister(ArrayMotorForceMsgPayloadVector)
class ArrayMotorForceMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsVector_empty(self)

    def size(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsVector_begin(self)

    def end(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsVector_rend(self)

    def clear(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsVector_swiginit(self, _ArrayMotorForceMsgPayload.new_ArrayMotorForceMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsVector_front(self)

    def back(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _ArrayMotorForceMsgPayload.delete_ArrayMotorForceMsgOutMsgsVector

# Register ArrayMotorForceMsgOutMsgsVector in _ArrayMotorForceMsgPayload:
_ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsVector_swigregister(ArrayMotorForceMsgOutMsgsVector)
class ArrayMotorForceMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsPtrVector_swiginit(self, _ArrayMotorForceMsgPayload.new_ArrayMotorForceMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _ArrayMotorForceMsgPayload.delete_ArrayMotorForceMsgOutMsgsPtrVector

# Register ArrayMotorForceMsgOutMsgsPtrVector in _ArrayMotorForceMsgPayload:
_ArrayMotorForceMsgPayload.ArrayMotorForceMsgOutMsgsPtrVector_swigregister(ArrayMotorForceMsgOutMsgsPtrVector)
class ArrayMotorForceMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgInMsgsVector_pop(self)

    def append(self, x):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgInMsgsVector_append(self, x)

    def empty(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgInMsgsVector_empty(self)

    def size(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgInMsgsVector_size(self)

    def swap(self, v):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgInMsgsVector_begin(self)

    def end(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgInMsgsVector_end(self)

    def rbegin(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgInMsgsVector_rend(self)

    def clear(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _ArrayMotorForceMsgPayload.ArrayMotorForceMsgInMsgsVector_swiginit(self, _ArrayMotorForceMsgPayload.new_ArrayMotorForceMsgInMsgsVector(*args))

    def push_back(self, x):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgInMsgsVector_front(self)

    def back(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _ArrayMotorForceMsgPayload.delete_ArrayMotorForceMsgInMsgsVector

# Register ArrayMotorForceMsgInMsgsVector in _ArrayMotorForceMsgPayload:
_ArrayMotorForceMsgPayload.ArrayMotorForceMsgInMsgsVector_swigregister(ArrayMotorForceMsgInMsgsVector)
class ArrayMotorForceMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_ArrayMotorForceMsgPayload.ArrayMotorForceMsg_C_header_get, _ArrayMotorForceMsgPayload.ArrayMotorForceMsg_C_header_set)
    payload = property(_ArrayMotorForceMsgPayload.ArrayMotorForceMsg_C_payload_get, _ArrayMotorForceMsgPayload.ArrayMotorForceMsg_C_payload_set)
    payloadPointer = property(_ArrayMotorForceMsgPayload.ArrayMotorForceMsg_C_payloadPointer_get, _ArrayMotorForceMsgPayload.ArrayMotorForceMsg_C_payloadPointer_set)
    headerPointer = property(_ArrayMotorForceMsgPayload.ArrayMotorForceMsg_C_headerPointer_get, _ArrayMotorForceMsgPayload.ArrayMotorForceMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _ArrayMotorForceMsgPayload.ArrayMotorForceMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import ArrayMotorForceMsg
        if type(source) == type(self):
            ArrayMotorForceMsg_C_subscribe(self, source)
        elif type(source) == ArrayMotorForceMsg:
            ArrayMotorForceMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            ArrayMotorForceMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe ArrayMotorForceMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        ArrayMotorForceMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import ArrayMotorForceMsg
        if type(source) == type(self):
            return (ArrayMotorForceMsg_C_isSubscribedTo(self, source))
        elif type(source) == ArrayMotorForceMsg:
            return (ArrayMotorForceMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (ArrayMotorForceMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        ArrayMotorForceMsg_C_addAuthor(self, self)
        if data:
            ArrayMotorForceMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        ArrayMotorForceMsg_C_addAuthor(self, self)
        ArrayMotorForceMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return ArrayMotorForceMsg_C_read(self)


    def __init__(self):
        _ArrayMotorForceMsgPayload.ArrayMotorForceMsg_C_swiginit(self, _ArrayMotorForceMsgPayload.new_ArrayMotorForceMsg_C())
    __swig_destroy__ = _ArrayMotorForceMsgPayload.delete_ArrayMotorForceMsg_C

# Register ArrayMotorForceMsg_C in _ArrayMotorForceMsgPayload:
_ArrayMotorForceMsgPayload.ArrayMotorForceMsg_C_swigregister(ArrayMotorForceMsg_C)

def ArrayMotorForceMsg_cpp_subscribe(subscriber, source):
    return _ArrayMotorForceMsgPayload.ArrayMotorForceMsg_cpp_subscribe(subscriber, source)

def ArrayMotorForceMsg_C_subscribe(subscriber, source):
    return _ArrayMotorForceMsgPayload.ArrayMotorForceMsg_C_subscribe(subscriber, source)

def ArrayMotorForceMsg_addr_subscribe(subscriber, sourceAddr):
    return _ArrayMotorForceMsgPayload.ArrayMotorForceMsg_addr_subscribe(subscriber, sourceAddr)

def ArrayMotorForceMsg_unsubscribe(subscriber):
    return _ArrayMotorForceMsgPayload.ArrayMotorForceMsg_unsubscribe(subscriber)

def ArrayMotorForceMsg_C_isSubscribedTo(subscriber, source):
    return _ArrayMotorForceMsgPayload.ArrayMotorForceMsg_C_isSubscribedTo(subscriber, source)

def ArrayMotorForceMsg_cpp_isSubscribedTo(subscriber, source):
    return _ArrayMotorForceMsgPayload.ArrayMotorForceMsg_cpp_isSubscribedTo(subscriber, source)

def ArrayMotorForceMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _ArrayMotorForceMsgPayload.ArrayMotorForceMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def ArrayMotorForceMsg_C_addAuthor(coowner, data):
    return _ArrayMotorForceMsgPayload.ArrayMotorForceMsg_C_addAuthor(coowner, data)

def ArrayMotorForceMsg_C_init(owner):
    return _ArrayMotorForceMsgPayload.ArrayMotorForceMsg_C_init(owner)

def ArrayMotorForceMsg_C_isLinked(data):
    return _ArrayMotorForceMsgPayload.ArrayMotorForceMsg_C_isLinked(data)

def ArrayMotorForceMsg_C_isWritten(data):
    return _ArrayMotorForceMsgPayload.ArrayMotorForceMsg_C_isWritten(data)

def ArrayMotorForceMsg_C_timeWritten(data):
    return _ArrayMotorForceMsgPayload.ArrayMotorForceMsg_C_timeWritten(data)

def ArrayMotorForceMsg_C_moduleID(data):
    return _ArrayMotorForceMsgPayload.ArrayMotorForceMsg_C_moduleID(data)

def ArrayMotorForceMsg_C_write(data, destination, moduleID, callTime):
    return _ArrayMotorForceMsgPayload.ArrayMotorForceMsg_C_write(data, destination, moduleID, callTime)

def ArrayMotorForceMsg_C_read(source):
    return _ArrayMotorForceMsgPayload.ArrayMotorForceMsg_C_read(source)

def ArrayMotorForceMsg_C_zeroMsgPayload():
    return _ArrayMotorForceMsgPayload.ArrayMotorForceMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_ArrayMotorForceMsgPayload.MsgHeader_isLinked_get, _ArrayMotorForceMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_ArrayMotorForceMsgPayload.MsgHeader_isWritten_get, _ArrayMotorForceMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_ArrayMotorForceMsgPayload.MsgHeader_timeWritten_get, _ArrayMotorForceMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_ArrayMotorForceMsgPayload.MsgHeader_moduleID_get, _ArrayMotorForceMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _ArrayMotorForceMsgPayload.MsgHeader_swiginit(self, _ArrayMotorForceMsgPayload.new_MsgHeader())
    __swig_destroy__ = _ArrayMotorForceMsgPayload.delete_MsgHeader

# Register MsgHeader in _ArrayMotorForceMsgPayload:
_ArrayMotorForceMsgPayload.MsgHeader_swigregister(MsgHeader)

