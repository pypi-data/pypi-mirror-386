# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ConstDynEffectorMsgPayload
else:
    import _ConstDynEffectorMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ConstDynEffectorMsgPayload.delete_SwigPyIterator

    def value(self):
        return _ConstDynEffectorMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ConstDynEffectorMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ConstDynEffectorMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ConstDynEffectorMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ConstDynEffectorMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ConstDynEffectorMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _ConstDynEffectorMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _ConstDynEffectorMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _ConstDynEffectorMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ConstDynEffectorMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ConstDynEffectorMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ConstDynEffectorMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ConstDynEffectorMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ConstDynEffectorMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ConstDynEffectorMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ConstDynEffectorMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ConstDynEffectorMsgPayload:
_ConstDynEffectorMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _ConstDynEffectorMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _ConstDynEffectorMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _ConstDynEffectorMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _ConstDynEffectorMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _ConstDynEffectorMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _ConstDynEffectorMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _ConstDynEffectorMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _ConstDynEffectorMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _ConstDynEffectorMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _ConstDynEffectorMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _ConstDynEffectorMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _ConstDynEffectorMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _ConstDynEffectorMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _ConstDynEffectorMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _ConstDynEffectorMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _ConstDynEffectorMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ConstDynEffectorMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ConstDynEffectorMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _ConstDynEffectorMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _ConstDynEffectorMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _ConstDynEffectorMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ConstDynEffectorMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ConstDynEffectorMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ConstDynEffectorMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ConstDynEffectorMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ConstDynEffectorMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _ConstDynEffectorMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _ConstDynEffectorMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _ConstDynEffectorMsgPayload.TimeVector_empty(self)

    def size(self):
        return _ConstDynEffectorMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _ConstDynEffectorMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _ConstDynEffectorMsgPayload.TimeVector_begin(self)

    def end(self):
        return _ConstDynEffectorMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _ConstDynEffectorMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _ConstDynEffectorMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _ConstDynEffectorMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _ConstDynEffectorMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _ConstDynEffectorMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _ConstDynEffectorMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _ConstDynEffectorMsgPayload.TimeVector_swiginit(self, _ConstDynEffectorMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _ConstDynEffectorMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _ConstDynEffectorMsgPayload.TimeVector_front(self)

    def back(self):
        return _ConstDynEffectorMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _ConstDynEffectorMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _ConstDynEffectorMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _ConstDynEffectorMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _ConstDynEffectorMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _ConstDynEffectorMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _ConstDynEffectorMsgPayload.delete_TimeVector

# Register TimeVector in _ConstDynEffectorMsgPayload:
_ConstDynEffectorMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ConstDynEffectorMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ConstDynEffectorMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _ConstDynEffectorMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _ConstDynEffectorMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _ConstDynEffectorMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ConstDynEffectorMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ConstDynEffectorMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ConstDynEffectorMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ConstDynEffectorMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ConstDynEffectorMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _ConstDynEffectorMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _ConstDynEffectorMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _ConstDynEffectorMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _ConstDynEffectorMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _ConstDynEffectorMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _ConstDynEffectorMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _ConstDynEffectorMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _ConstDynEffectorMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _ConstDynEffectorMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _ConstDynEffectorMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _ConstDynEffectorMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _ConstDynEffectorMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _ConstDynEffectorMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _ConstDynEffectorMsgPayload.DoubleVector_swiginit(self, _ConstDynEffectorMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _ConstDynEffectorMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _ConstDynEffectorMsgPayload.DoubleVector_front(self)

    def back(self):
        return _ConstDynEffectorMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _ConstDynEffectorMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _ConstDynEffectorMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _ConstDynEffectorMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _ConstDynEffectorMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _ConstDynEffectorMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _ConstDynEffectorMsgPayload.delete_DoubleVector

# Register DoubleVector in _ConstDynEffectorMsgPayload:
_ConstDynEffectorMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ConstDynEffectorMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ConstDynEffectorMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _ConstDynEffectorMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _ConstDynEffectorMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _ConstDynEffectorMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ConstDynEffectorMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ConstDynEffectorMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ConstDynEffectorMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ConstDynEffectorMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ConstDynEffectorMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _ConstDynEffectorMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _ConstDynEffectorMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _ConstDynEffectorMsgPayload.StringVector_empty(self)

    def size(self):
        return _ConstDynEffectorMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _ConstDynEffectorMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _ConstDynEffectorMsgPayload.StringVector_begin(self)

    def end(self):
        return _ConstDynEffectorMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _ConstDynEffectorMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _ConstDynEffectorMsgPayload.StringVector_rend(self)

    def clear(self):
        return _ConstDynEffectorMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _ConstDynEffectorMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _ConstDynEffectorMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _ConstDynEffectorMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _ConstDynEffectorMsgPayload.StringVector_swiginit(self, _ConstDynEffectorMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _ConstDynEffectorMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _ConstDynEffectorMsgPayload.StringVector_front(self)

    def back(self):
        return _ConstDynEffectorMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _ConstDynEffectorMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _ConstDynEffectorMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _ConstDynEffectorMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _ConstDynEffectorMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _ConstDynEffectorMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _ConstDynEffectorMsgPayload.delete_StringVector

# Register StringVector in _ConstDynEffectorMsgPayload:
_ConstDynEffectorMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _ConstDynEffectorMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _ConstDynEffectorMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _ConstDynEffectorMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _ConstDynEffectorMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _ConstDynEffectorMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _ConstDynEffectorMsgPayload.NANO2SEC
SEC2NANO = _ConstDynEffectorMsgPayload.SEC2NANO
SEC2HOUR = _ConstDynEffectorMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _ConstDynEffectorMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _ConstDynEffectorMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _ConstDynEffectorMsgPayload.secToNano(seconds)
BOOL_FALSE = _ConstDynEffectorMsgPayload.BOOL_FALSE
BOOL_TRUE = _ConstDynEffectorMsgPayload.BOOL_TRUE
AVAILABLE = _ConstDynEffectorMsgPayload.AVAILABLE
UNAVAILABLE = _ConstDynEffectorMsgPayload.UNAVAILABLE
BalancedWheels = _ConstDynEffectorMsgPayload.BalancedWheels
JitterSimple = _ConstDynEffectorMsgPayload.JitterSimple
JitterFullyCoupled = _ConstDynEffectorMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ConstDynEffectorMsgPayload.SysModel_swiginit(self, _ConstDynEffectorMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _ConstDynEffectorMsgPayload.delete_SysModel

    def SelfInit(self):
        return _ConstDynEffectorMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _ConstDynEffectorMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _ConstDynEffectorMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _ConstDynEffectorMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_ConstDynEffectorMsgPayload.SysModel_ModelTag_get, _ConstDynEffectorMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_ConstDynEffectorMsgPayload.SysModel_CallCounts_get, _ConstDynEffectorMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_ConstDynEffectorMsgPayload.SysModel_RNGSeed_get, _ConstDynEffectorMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_ConstDynEffectorMsgPayload.SysModel_moduleID_get, _ConstDynEffectorMsgPayload.SysModel_moduleID_set)

# Register SysModel in _ConstDynEffectorMsgPayload:
_ConstDynEffectorMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _ConstDynEffectorMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _ConstDynEffectorMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _ConstDynEffectorMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _ConstDynEffectorMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _ConstDynEffectorMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _ConstDynEffectorMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _ConstDynEffectorMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _ConstDynEffectorMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _ConstDynEffectorMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _ConstDynEffectorMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _ConstDynEffectorMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _ConstDynEffectorMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class ConstDynEffectorMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Fc_N = property(_ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayload_Fc_N_get, _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayload_Fc_N_set)
    L1_B1 = property(_ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayload_L1_B1_get, _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayload_L1_B1_set)
    L2_B2 = property(_ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayload_L2_B2_get, _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayload_L2_B2_set)
    psi_N = property(_ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayload_psi_N_get, _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayload_psi_N_set)
    Fc_mag_filtered = property(_ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayload_Fc_mag_filtered_get, _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayload_Fc_mag_filtered_set)
    L1_mag_filtered = property(_ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayload_L1_mag_filtered_get, _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayload_L1_mag_filtered_set)
    L2_mag_filtered = property(_ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayload_L2_mag_filtered_get, _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayload_L2_mag_filtered_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayload_swiginit(self, _ConstDynEffectorMsgPayload.new_ConstDynEffectorMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _ConstDynEffectorMsgPayload.delete_ConstDynEffectorMsgPayload

# Register ConstDynEffectorMsgPayload in _ConstDynEffectorMsgPayload:
_ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayload_swigregister(ConstDynEffectorMsgPayload)

def _pprint_ConstDynEffectorMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[ConstDynEffectorMsgPayload.__repr__] = _pprint_ConstDynEffectorMsgPayload

class ConstDynEffectorMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_ConstDynEffectorMsgPayload.ConstDynEffectorMsgReader_bskLogger_get, _ConstDynEffectorMsgPayload.ConstDynEffectorMsgReader_bskLogger_set)
    zeroMsgPayload = property(_ConstDynEffectorMsgPayload.ConstDynEffectorMsgReader_zeroMsgPayload_get, _ConstDynEffectorMsgPayload.ConstDynEffectorMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _ConstDynEffectorMsgPayload.ConstDynEffectorMsgReader_swiginit(self, _ConstDynEffectorMsgPayload.new_ConstDynEffectorMsgReader(*args))

    def __call__(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgReader___call__(self)

    def isLinked(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgReader_isLinked(self)

    def isWritten(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgReader_isWritten(self)

    def timeWritten(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgReader_timeWritten(self)

    def moduleID(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == ConstDynEffectorMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.ConstDynEffectorMsgPayload import ConstDynEffectorMsg_C
            if type(source) == ConstDynEffectorMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<ConstDynEffectorMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == ConstDynEffectorMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.ConstDynEffectorMsgPayload import ConstDynEffectorMsg_C
        except ImportError:
            return 0

        if type(source) == ConstDynEffectorMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _ConstDynEffectorMsgPayload.delete_ConstDynEffectorMsgReader

# Register ConstDynEffectorMsgReader in _ConstDynEffectorMsgPayload:
_ConstDynEffectorMsgPayload.ConstDynEffectorMsgReader_swigregister(ConstDynEffectorMsgReader)
class ConstDynEffectorMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ConstDynEffectorMsgPayload.ConstDynEffectorMsgWriter_swiginit(self, _ConstDynEffectorMsgPayload.new_ConstDynEffectorMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _ConstDynEffectorMsgPayload.delete_ConstDynEffectorMsgWriter

# Register ConstDynEffectorMsgWriter in _ConstDynEffectorMsgPayload:
_ConstDynEffectorMsgPayload.ConstDynEffectorMsgWriter_swigregister(ConstDynEffectorMsgWriter)
class ConstDynEffectorMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_ConstDynEffectorMsgPayload.ConstDynEffectorMsg_write_get, _ConstDynEffectorMsgPayload.ConstDynEffectorMsg_write_set)

    def addSubscriber(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsg_addSubscriber(self)

    def addAuthor(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_ConstDynEffectorMsgPayload.ConstDynEffectorMsg_zeroMsgPayload_get, _ConstDynEffectorMsgPayload.ConstDynEffectorMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsg_isLinked(self)

    def getPayloadSize(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _ConstDynEffectorMsgPayload.ConstDynEffectorMsg_swiginit(self, _ConstDynEffectorMsgPayload.new_ConstDynEffectorMsg())
    __swig_destroy__ = _ConstDynEffectorMsgPayload.delete_ConstDynEffectorMsg

# Register ConstDynEffectorMsg in _ConstDynEffectorMsgPayload:
_ConstDynEffectorMsgPayload.ConstDynEffectorMsg_swigregister(ConstDynEffectorMsg)
class ConstDynEffectorMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ConstDynEffectorMsgPayload.ConstDynEffectorMsgRecorder_swiginit(self, _ConstDynEffectorMsgPayload.new_ConstDynEffectorMsgRecorder(*args))
    __swig_destroy__ = _ConstDynEffectorMsgPayload.delete_ConstDynEffectorMsgRecorder

    def SelfInit(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgRecorder___record_vector(self)

    def size(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgRecorder_clear(self)
    bskLogger = property(_ConstDynEffectorMsgPayload.ConstDynEffectorMsgRecorder_bskLogger_get, _ConstDynEffectorMsgPayload.ConstDynEffectorMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgRecorder_updateTimeInterval(self, timeDiff)

    def _Fc_N_array(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgRecorder__Fc_N_array(self)

    @property
    def Fc_N(self):
        return self._Fc_N_array()


    def _L1_B1_array(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgRecorder__L1_B1_array(self)

    @property
    def L1_B1(self):
        return self._L1_B1_array()


    def _L2_B2_array(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgRecorder__L2_B2_array(self)

    @property
    def L2_B2(self):
        return self._L2_B2_array()


    def _psi_N_array(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgRecorder__psi_N_array(self)

    @property
    def psi_N(self):
        return self._psi_N_array()


    def _Fc_mag_filtered_array(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgRecorder__Fc_mag_filtered_array(self)

    @property
    def Fc_mag_filtered(self):
        return self._Fc_mag_filtered_array()


    def _L1_mag_filtered_array(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgRecorder__L1_mag_filtered_array(self)

    @property
    def L1_mag_filtered(self):
        return self._L1_mag_filtered_array()


    def _L2_mag_filtered_array(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgRecorder__L2_mag_filtered_array(self)

    @property
    def L2_mag_filtered(self):
        return self._L2_mag_filtered_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register ConstDynEffectorMsgRecorder in _ConstDynEffectorMsgPayload:
_ConstDynEffectorMsgPayload.ConstDynEffectorMsgRecorder_swigregister(ConstDynEffectorMsgRecorder)
class ConstDynEffectorMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayloadVector___bool__(self)

    def __len__(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayloadVector_pop(self)

    def append(self, x):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayloadVector_append(self, x)

    def empty(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayloadVector_empty(self)

    def size(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayloadVector_size(self)

    def swap(self, v):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayloadVector_swap(self, v)

    def begin(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayloadVector_begin(self)

    def end(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayloadVector_end(self)

    def rbegin(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayloadVector_rbegin(self)

    def rend(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayloadVector_rend(self)

    def clear(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayloadVector_swiginit(self, _ConstDynEffectorMsgPayload.new_ConstDynEffectorMsgPayloadVector(*args))

    def push_back(self, x):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayloadVector_push_back(self, x)

    def front(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayloadVector_front(self)

    def back(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayloadVector_capacity(self)

    def get_all(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _ConstDynEffectorMsgPayload.delete_ConstDynEffectorMsgPayloadVector

# Register ConstDynEffectorMsgPayloadVector in _ConstDynEffectorMsgPayload:
_ConstDynEffectorMsgPayload.ConstDynEffectorMsgPayloadVector_swigregister(ConstDynEffectorMsgPayloadVector)
class ConstDynEffectorMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsVector_empty(self)

    def size(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsVector_begin(self)

    def end(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsVector_rend(self)

    def clear(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsVector_swiginit(self, _ConstDynEffectorMsgPayload.new_ConstDynEffectorMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsVector_front(self)

    def back(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _ConstDynEffectorMsgPayload.delete_ConstDynEffectorMsgOutMsgsVector

# Register ConstDynEffectorMsgOutMsgsVector in _ConstDynEffectorMsgPayload:
_ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsVector_swigregister(ConstDynEffectorMsgOutMsgsVector)
class ConstDynEffectorMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsPtrVector_swiginit(self, _ConstDynEffectorMsgPayload.new_ConstDynEffectorMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _ConstDynEffectorMsgPayload.delete_ConstDynEffectorMsgOutMsgsPtrVector

# Register ConstDynEffectorMsgOutMsgsPtrVector in _ConstDynEffectorMsgPayload:
_ConstDynEffectorMsgPayload.ConstDynEffectorMsgOutMsgsPtrVector_swigregister(ConstDynEffectorMsgOutMsgsPtrVector)
class ConstDynEffectorMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgInMsgsVector_pop(self)

    def append(self, x):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgInMsgsVector_append(self, x)

    def empty(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgInMsgsVector_empty(self)

    def size(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgInMsgsVector_size(self)

    def swap(self, v):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgInMsgsVector_begin(self)

    def end(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgInMsgsVector_end(self)

    def rbegin(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgInMsgsVector_rend(self)

    def clear(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _ConstDynEffectorMsgPayload.ConstDynEffectorMsgInMsgsVector_swiginit(self, _ConstDynEffectorMsgPayload.new_ConstDynEffectorMsgInMsgsVector(*args))

    def push_back(self, x):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgInMsgsVector_front(self)

    def back(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _ConstDynEffectorMsgPayload.delete_ConstDynEffectorMsgInMsgsVector

# Register ConstDynEffectorMsgInMsgsVector in _ConstDynEffectorMsgPayload:
_ConstDynEffectorMsgPayload.ConstDynEffectorMsgInMsgsVector_swigregister(ConstDynEffectorMsgInMsgsVector)
class ConstDynEffectorMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_ConstDynEffectorMsgPayload.ConstDynEffectorMsg_C_header_get, _ConstDynEffectorMsgPayload.ConstDynEffectorMsg_C_header_set)
    payload = property(_ConstDynEffectorMsgPayload.ConstDynEffectorMsg_C_payload_get, _ConstDynEffectorMsgPayload.ConstDynEffectorMsg_C_payload_set)
    payloadPointer = property(_ConstDynEffectorMsgPayload.ConstDynEffectorMsg_C_payloadPointer_get, _ConstDynEffectorMsgPayload.ConstDynEffectorMsg_C_payloadPointer_set)
    headerPointer = property(_ConstDynEffectorMsgPayload.ConstDynEffectorMsg_C_headerPointer_get, _ConstDynEffectorMsgPayload.ConstDynEffectorMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _ConstDynEffectorMsgPayload.ConstDynEffectorMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import ConstDynEffectorMsg
        if type(source) == type(self):
            ConstDynEffectorMsg_C_subscribe(self, source)
        elif type(source) == ConstDynEffectorMsg:
            ConstDynEffectorMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            ConstDynEffectorMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe ConstDynEffectorMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        ConstDynEffectorMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import ConstDynEffectorMsg
        if type(source) == type(self):
            return (ConstDynEffectorMsg_C_isSubscribedTo(self, source))
        elif type(source) == ConstDynEffectorMsg:
            return (ConstDynEffectorMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (ConstDynEffectorMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        ConstDynEffectorMsg_C_addAuthor(self, self)
        if data:
            ConstDynEffectorMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        ConstDynEffectorMsg_C_addAuthor(self, self)
        ConstDynEffectorMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return ConstDynEffectorMsg_C_read(self)


    def __init__(self):
        _ConstDynEffectorMsgPayload.ConstDynEffectorMsg_C_swiginit(self, _ConstDynEffectorMsgPayload.new_ConstDynEffectorMsg_C())
    __swig_destroy__ = _ConstDynEffectorMsgPayload.delete_ConstDynEffectorMsg_C

# Register ConstDynEffectorMsg_C in _ConstDynEffectorMsgPayload:
_ConstDynEffectorMsgPayload.ConstDynEffectorMsg_C_swigregister(ConstDynEffectorMsg_C)

def ConstDynEffectorMsg_cpp_subscribe(subscriber, source):
    return _ConstDynEffectorMsgPayload.ConstDynEffectorMsg_cpp_subscribe(subscriber, source)

def ConstDynEffectorMsg_C_subscribe(subscriber, source):
    return _ConstDynEffectorMsgPayload.ConstDynEffectorMsg_C_subscribe(subscriber, source)

def ConstDynEffectorMsg_addr_subscribe(subscriber, sourceAddr):
    return _ConstDynEffectorMsgPayload.ConstDynEffectorMsg_addr_subscribe(subscriber, sourceAddr)

def ConstDynEffectorMsg_unsubscribe(subscriber):
    return _ConstDynEffectorMsgPayload.ConstDynEffectorMsg_unsubscribe(subscriber)

def ConstDynEffectorMsg_C_isSubscribedTo(subscriber, source):
    return _ConstDynEffectorMsgPayload.ConstDynEffectorMsg_C_isSubscribedTo(subscriber, source)

def ConstDynEffectorMsg_cpp_isSubscribedTo(subscriber, source):
    return _ConstDynEffectorMsgPayload.ConstDynEffectorMsg_cpp_isSubscribedTo(subscriber, source)

def ConstDynEffectorMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _ConstDynEffectorMsgPayload.ConstDynEffectorMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def ConstDynEffectorMsg_C_addAuthor(coowner, data):
    return _ConstDynEffectorMsgPayload.ConstDynEffectorMsg_C_addAuthor(coowner, data)

def ConstDynEffectorMsg_C_init(owner):
    return _ConstDynEffectorMsgPayload.ConstDynEffectorMsg_C_init(owner)

def ConstDynEffectorMsg_C_isLinked(data):
    return _ConstDynEffectorMsgPayload.ConstDynEffectorMsg_C_isLinked(data)

def ConstDynEffectorMsg_C_isWritten(data):
    return _ConstDynEffectorMsgPayload.ConstDynEffectorMsg_C_isWritten(data)

def ConstDynEffectorMsg_C_timeWritten(data):
    return _ConstDynEffectorMsgPayload.ConstDynEffectorMsg_C_timeWritten(data)

def ConstDynEffectorMsg_C_moduleID(data):
    return _ConstDynEffectorMsgPayload.ConstDynEffectorMsg_C_moduleID(data)

def ConstDynEffectorMsg_C_write(data, destination, moduleID, callTime):
    return _ConstDynEffectorMsgPayload.ConstDynEffectorMsg_C_write(data, destination, moduleID, callTime)

def ConstDynEffectorMsg_C_read(source):
    return _ConstDynEffectorMsgPayload.ConstDynEffectorMsg_C_read(source)

def ConstDynEffectorMsg_C_zeroMsgPayload():
    return _ConstDynEffectorMsgPayload.ConstDynEffectorMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_ConstDynEffectorMsgPayload.MsgHeader_isLinked_get, _ConstDynEffectorMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_ConstDynEffectorMsgPayload.MsgHeader_isWritten_get, _ConstDynEffectorMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_ConstDynEffectorMsgPayload.MsgHeader_timeWritten_get, _ConstDynEffectorMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_ConstDynEffectorMsgPayload.MsgHeader_moduleID_get, _ConstDynEffectorMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _ConstDynEffectorMsgPayload.MsgHeader_swiginit(self, _ConstDynEffectorMsgPayload.new_MsgHeader())
    __swig_destroy__ = _ConstDynEffectorMsgPayload.delete_MsgHeader

# Register MsgHeader in _ConstDynEffectorMsgPayload:
_ConstDynEffectorMsgPayload.MsgHeader_swigregister(MsgHeader)

