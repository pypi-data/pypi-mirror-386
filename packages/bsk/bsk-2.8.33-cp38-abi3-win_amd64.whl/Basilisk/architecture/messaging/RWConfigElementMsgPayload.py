# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _RWConfigElementMsgPayload
else:
    import _RWConfigElementMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RWConfigElementMsgPayload.delete_SwigPyIterator

    def value(self):
        return _RWConfigElementMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _RWConfigElementMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _RWConfigElementMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _RWConfigElementMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _RWConfigElementMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _RWConfigElementMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _RWConfigElementMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _RWConfigElementMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _RWConfigElementMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _RWConfigElementMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _RWConfigElementMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _RWConfigElementMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _RWConfigElementMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _RWConfigElementMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _RWConfigElementMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _RWConfigElementMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _RWConfigElementMsgPayload:
_RWConfigElementMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _RWConfigElementMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _RWConfigElementMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _RWConfigElementMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _RWConfigElementMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _RWConfigElementMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _RWConfigElementMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _RWConfigElementMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _RWConfigElementMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _RWConfigElementMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _RWConfigElementMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _RWConfigElementMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _RWConfigElementMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _RWConfigElementMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _RWConfigElementMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _RWConfigElementMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _RWConfigElementMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWConfigElementMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWConfigElementMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _RWConfigElementMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _RWConfigElementMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _RWConfigElementMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWConfigElementMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWConfigElementMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWConfigElementMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWConfigElementMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWConfigElementMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _RWConfigElementMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _RWConfigElementMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _RWConfigElementMsgPayload.TimeVector_empty(self)

    def size(self):
        return _RWConfigElementMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _RWConfigElementMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _RWConfigElementMsgPayload.TimeVector_begin(self)

    def end(self):
        return _RWConfigElementMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _RWConfigElementMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _RWConfigElementMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _RWConfigElementMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _RWConfigElementMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _RWConfigElementMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _RWConfigElementMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _RWConfigElementMsgPayload.TimeVector_swiginit(self, _RWConfigElementMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _RWConfigElementMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _RWConfigElementMsgPayload.TimeVector_front(self)

    def back(self):
        return _RWConfigElementMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _RWConfigElementMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _RWConfigElementMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _RWConfigElementMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _RWConfigElementMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _RWConfigElementMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _RWConfigElementMsgPayload.delete_TimeVector

# Register TimeVector in _RWConfigElementMsgPayload:
_RWConfigElementMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWConfigElementMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWConfigElementMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _RWConfigElementMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _RWConfigElementMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _RWConfigElementMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWConfigElementMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWConfigElementMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWConfigElementMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWConfigElementMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWConfigElementMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _RWConfigElementMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _RWConfigElementMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _RWConfigElementMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _RWConfigElementMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _RWConfigElementMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _RWConfigElementMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _RWConfigElementMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _RWConfigElementMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _RWConfigElementMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _RWConfigElementMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _RWConfigElementMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _RWConfigElementMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _RWConfigElementMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _RWConfigElementMsgPayload.DoubleVector_swiginit(self, _RWConfigElementMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _RWConfigElementMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _RWConfigElementMsgPayload.DoubleVector_front(self)

    def back(self):
        return _RWConfigElementMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _RWConfigElementMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _RWConfigElementMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _RWConfigElementMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _RWConfigElementMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _RWConfigElementMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _RWConfigElementMsgPayload.delete_DoubleVector

# Register DoubleVector in _RWConfigElementMsgPayload:
_RWConfigElementMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWConfigElementMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWConfigElementMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _RWConfigElementMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _RWConfigElementMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _RWConfigElementMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWConfigElementMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWConfigElementMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWConfigElementMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWConfigElementMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWConfigElementMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _RWConfigElementMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _RWConfigElementMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _RWConfigElementMsgPayload.StringVector_empty(self)

    def size(self):
        return _RWConfigElementMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _RWConfigElementMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _RWConfigElementMsgPayload.StringVector_begin(self)

    def end(self):
        return _RWConfigElementMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _RWConfigElementMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _RWConfigElementMsgPayload.StringVector_rend(self)

    def clear(self):
        return _RWConfigElementMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _RWConfigElementMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _RWConfigElementMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _RWConfigElementMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _RWConfigElementMsgPayload.StringVector_swiginit(self, _RWConfigElementMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _RWConfigElementMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _RWConfigElementMsgPayload.StringVector_front(self)

    def back(self):
        return _RWConfigElementMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _RWConfigElementMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _RWConfigElementMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _RWConfigElementMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _RWConfigElementMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _RWConfigElementMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _RWConfigElementMsgPayload.delete_StringVector

# Register StringVector in _RWConfigElementMsgPayload:
_RWConfigElementMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _RWConfigElementMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _RWConfigElementMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _RWConfigElementMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _RWConfigElementMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _RWConfigElementMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _RWConfigElementMsgPayload.NANO2SEC
SEC2NANO = _RWConfigElementMsgPayload.SEC2NANO
SEC2HOUR = _RWConfigElementMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _RWConfigElementMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _RWConfigElementMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _RWConfigElementMsgPayload.secToNano(seconds)
BOOL_FALSE = _RWConfigElementMsgPayload.BOOL_FALSE
BOOL_TRUE = _RWConfigElementMsgPayload.BOOL_TRUE
AVAILABLE = _RWConfigElementMsgPayload.AVAILABLE
UNAVAILABLE = _RWConfigElementMsgPayload.UNAVAILABLE
BalancedWheels = _RWConfigElementMsgPayload.BalancedWheels
JitterSimple = _RWConfigElementMsgPayload.JitterSimple
JitterFullyCoupled = _RWConfigElementMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RWConfigElementMsgPayload.SysModel_swiginit(self, _RWConfigElementMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _RWConfigElementMsgPayload.delete_SysModel

    def SelfInit(self):
        return _RWConfigElementMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _RWConfigElementMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _RWConfigElementMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _RWConfigElementMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_RWConfigElementMsgPayload.SysModel_ModelTag_get, _RWConfigElementMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_RWConfigElementMsgPayload.SysModel_CallCounts_get, _RWConfigElementMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_RWConfigElementMsgPayload.SysModel_RNGSeed_get, _RWConfigElementMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_RWConfigElementMsgPayload.SysModel_moduleID_get, _RWConfigElementMsgPayload.SysModel_moduleID_set)

# Register SysModel in _RWConfigElementMsgPayload:
_RWConfigElementMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _RWConfigElementMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _RWConfigElementMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _RWConfigElementMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _RWConfigElementMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _RWConfigElementMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _RWConfigElementMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _RWConfigElementMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _RWConfigElementMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _RWConfigElementMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _RWConfigElementMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _RWConfigElementMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _RWConfigElementMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class RWConfigElementMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    gsHat_B = property(_RWConfigElementMsgPayload.RWConfigElementMsgPayload_gsHat_B_get, _RWConfigElementMsgPayload.RWConfigElementMsgPayload_gsHat_B_set)
    Js = property(_RWConfigElementMsgPayload.RWConfigElementMsgPayload_Js_get, _RWConfigElementMsgPayload.RWConfigElementMsgPayload_Js_set)
    uMax = property(_RWConfigElementMsgPayload.RWConfigElementMsgPayload_uMax_get, _RWConfigElementMsgPayload.RWConfigElementMsgPayload_uMax_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _RWConfigElementMsgPayload.RWConfigElementMsgPayload_swiginit(self, _RWConfigElementMsgPayload.new_RWConfigElementMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _RWConfigElementMsgPayload.delete_RWConfigElementMsgPayload

# Register RWConfigElementMsgPayload in _RWConfigElementMsgPayload:
_RWConfigElementMsgPayload.RWConfigElementMsgPayload_swigregister(RWConfigElementMsgPayload)

def _pprint_RWConfigElementMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[RWConfigElementMsgPayload.__repr__] = _pprint_RWConfigElementMsgPayload

class RWConfigElementMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_RWConfigElementMsgPayload.RWConfigElementMsgReader_bskLogger_get, _RWConfigElementMsgPayload.RWConfigElementMsgReader_bskLogger_set)
    zeroMsgPayload = property(_RWConfigElementMsgPayload.RWConfigElementMsgReader_zeroMsgPayload_get, _RWConfigElementMsgPayload.RWConfigElementMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _RWConfigElementMsgPayload.RWConfigElementMsgReader_swiginit(self, _RWConfigElementMsgPayload.new_RWConfigElementMsgReader(*args))

    def __call__(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgReader___call__(self)

    def isLinked(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgReader_isLinked(self)

    def isWritten(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgReader_isWritten(self)

    def timeWritten(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgReader_timeWritten(self)

    def moduleID(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _RWConfigElementMsgPayload.RWConfigElementMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _RWConfigElementMsgPayload.RWConfigElementMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _RWConfigElementMsgPayload.RWConfigElementMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _RWConfigElementMsgPayload.RWConfigElementMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _RWConfigElementMsgPayload.RWConfigElementMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _RWConfigElementMsgPayload.RWConfigElementMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _RWConfigElementMsgPayload.RWConfigElementMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _RWConfigElementMsgPayload.RWConfigElementMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _RWConfigElementMsgPayload.RWConfigElementMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == RWConfigElementMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.RWConfigElementMsgPayload import RWConfigElementMsg_C
            if type(source) == RWConfigElementMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<RWConfigElementMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == RWConfigElementMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.RWConfigElementMsgPayload import RWConfigElementMsg_C
        except ImportError:
            return 0

        if type(source) == RWConfigElementMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _RWConfigElementMsgPayload.delete_RWConfigElementMsgReader

# Register RWConfigElementMsgReader in _RWConfigElementMsgPayload:
_RWConfigElementMsgPayload.RWConfigElementMsgReader_swigregister(RWConfigElementMsgReader)
class RWConfigElementMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RWConfigElementMsgPayload.RWConfigElementMsgWriter_swiginit(self, _RWConfigElementMsgPayload.new_RWConfigElementMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _RWConfigElementMsgPayload.RWConfigElementMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _RWConfigElementMsgPayload.delete_RWConfigElementMsgWriter

# Register RWConfigElementMsgWriter in _RWConfigElementMsgPayload:
_RWConfigElementMsgPayload.RWConfigElementMsgWriter_swigregister(RWConfigElementMsgWriter)
class RWConfigElementMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_RWConfigElementMsgPayload.RWConfigElementMsg_write_get, _RWConfigElementMsgPayload.RWConfigElementMsg_write_set)

    def addSubscriber(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsg_addSubscriber(self)

    def addAuthor(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _RWConfigElementMsgPayload.RWConfigElementMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _RWConfigElementMsgPayload.RWConfigElementMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _RWConfigElementMsgPayload.RWConfigElementMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_RWConfigElementMsgPayload.RWConfigElementMsg_zeroMsgPayload_get, _RWConfigElementMsgPayload.RWConfigElementMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsg_isLinked(self)

    def getPayloadSize(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _RWConfigElementMsgPayload.RWConfigElementMsg_swiginit(self, _RWConfigElementMsgPayload.new_RWConfigElementMsg())
    __swig_destroy__ = _RWConfigElementMsgPayload.delete_RWConfigElementMsg

# Register RWConfigElementMsg in _RWConfigElementMsgPayload:
_RWConfigElementMsgPayload.RWConfigElementMsg_swigregister(RWConfigElementMsg)
class RWConfigElementMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RWConfigElementMsgPayload.RWConfigElementMsgRecorder_swiginit(self, _RWConfigElementMsgPayload.new_RWConfigElementMsgRecorder(*args))
    __swig_destroy__ = _RWConfigElementMsgPayload.delete_RWConfigElementMsgRecorder

    def SelfInit(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _RWConfigElementMsgPayload.RWConfigElementMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _RWConfigElementMsgPayload.RWConfigElementMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgRecorder___record_vector(self)

    def size(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _RWConfigElementMsgPayload.RWConfigElementMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgRecorder_clear(self)
    bskLogger = property(_RWConfigElementMsgPayload.RWConfigElementMsgRecorder_bskLogger_get, _RWConfigElementMsgPayload.RWConfigElementMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _RWConfigElementMsgPayload.RWConfigElementMsgRecorder_updateTimeInterval(self, timeDiff)

    def _gsHat_B_array(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgRecorder__gsHat_B_array(self)

    @property
    def gsHat_B(self):
        return self._gsHat_B_array()


    def _Js_array(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgRecorder__Js_array(self)

    @property
    def Js(self):
        return self._Js_array()


    def _uMax_array(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgRecorder__uMax_array(self)

    @property
    def uMax(self):
        return self._uMax_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register RWConfigElementMsgRecorder in _RWConfigElementMsgPayload:
_RWConfigElementMsgPayload.RWConfigElementMsgRecorder_swigregister(RWConfigElementMsgRecorder)
class RWConfigElementMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgPayloadVector___bool__(self)

    def __len__(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _RWConfigElementMsgPayload.RWConfigElementMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWConfigElementMsgPayload.RWConfigElementMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWConfigElementMsgPayload.RWConfigElementMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWConfigElementMsgPayload.RWConfigElementMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWConfigElementMsgPayload.RWConfigElementMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWConfigElementMsgPayload.RWConfigElementMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgPayloadVector_pop(self)

    def append(self, x):
        return _RWConfigElementMsgPayload.RWConfigElementMsgPayloadVector_append(self, x)

    def empty(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgPayloadVector_empty(self)

    def size(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgPayloadVector_size(self)

    def swap(self, v):
        return _RWConfigElementMsgPayload.RWConfigElementMsgPayloadVector_swap(self, v)

    def begin(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgPayloadVector_begin(self)

    def end(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgPayloadVector_end(self)

    def rbegin(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgPayloadVector_rbegin(self)

    def rend(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgPayloadVector_rend(self)

    def clear(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _RWConfigElementMsgPayload.RWConfigElementMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _RWConfigElementMsgPayload.RWConfigElementMsgPayloadVector_swiginit(self, _RWConfigElementMsgPayload.new_RWConfigElementMsgPayloadVector(*args))

    def push_back(self, x):
        return _RWConfigElementMsgPayload.RWConfigElementMsgPayloadVector_push_back(self, x)

    def front(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgPayloadVector_front(self)

    def back(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _RWConfigElementMsgPayload.RWConfigElementMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _RWConfigElementMsgPayload.RWConfigElementMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _RWConfigElementMsgPayload.RWConfigElementMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _RWConfigElementMsgPayload.RWConfigElementMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgPayloadVector_capacity(self)

    def get_all(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _RWConfigElementMsgPayload.delete_RWConfigElementMsgPayloadVector

# Register RWConfigElementMsgPayloadVector in _RWConfigElementMsgPayload:
_RWConfigElementMsgPayload.RWConfigElementMsgPayloadVector_swigregister(RWConfigElementMsgPayloadVector)
class RWConfigElementMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsVector_empty(self)

    def size(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsVector_begin(self)

    def end(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsVector_rend(self)

    def clear(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsVector_swiginit(self, _RWConfigElementMsgPayload.new_RWConfigElementMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsVector_front(self)

    def back(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _RWConfigElementMsgPayload.delete_RWConfigElementMsgOutMsgsVector

# Register RWConfigElementMsgOutMsgsVector in _RWConfigElementMsgPayload:
_RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsVector_swigregister(RWConfigElementMsgOutMsgsVector)
class RWConfigElementMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsPtrVector_swiginit(self, _RWConfigElementMsgPayload.new_RWConfigElementMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _RWConfigElementMsgPayload.delete_RWConfigElementMsgOutMsgsPtrVector

# Register RWConfigElementMsgOutMsgsPtrVector in _RWConfigElementMsgPayload:
_RWConfigElementMsgPayload.RWConfigElementMsgOutMsgsPtrVector_swigregister(RWConfigElementMsgOutMsgsPtrVector)
class RWConfigElementMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _RWConfigElementMsgPayload.RWConfigElementMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWConfigElementMsgPayload.RWConfigElementMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWConfigElementMsgPayload.RWConfigElementMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWConfigElementMsgPayload.RWConfigElementMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWConfigElementMsgPayload.RWConfigElementMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWConfigElementMsgPayload.RWConfigElementMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgInMsgsVector_pop(self)

    def append(self, x):
        return _RWConfigElementMsgPayload.RWConfigElementMsgInMsgsVector_append(self, x)

    def empty(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgInMsgsVector_empty(self)

    def size(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgInMsgsVector_size(self)

    def swap(self, v):
        return _RWConfigElementMsgPayload.RWConfigElementMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgInMsgsVector_begin(self)

    def end(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgInMsgsVector_end(self)

    def rbegin(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgInMsgsVector_rend(self)

    def clear(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _RWConfigElementMsgPayload.RWConfigElementMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _RWConfigElementMsgPayload.RWConfigElementMsgInMsgsVector_swiginit(self, _RWConfigElementMsgPayload.new_RWConfigElementMsgInMsgsVector(*args))

    def push_back(self, x):
        return _RWConfigElementMsgPayload.RWConfigElementMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgInMsgsVector_front(self)

    def back(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _RWConfigElementMsgPayload.RWConfigElementMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _RWConfigElementMsgPayload.RWConfigElementMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _RWConfigElementMsgPayload.RWConfigElementMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _RWConfigElementMsgPayload.RWConfigElementMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _RWConfigElementMsgPayload.RWConfigElementMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _RWConfigElementMsgPayload.delete_RWConfigElementMsgInMsgsVector

# Register RWConfigElementMsgInMsgsVector in _RWConfigElementMsgPayload:
_RWConfigElementMsgPayload.RWConfigElementMsgInMsgsVector_swigregister(RWConfigElementMsgInMsgsVector)
class RWConfigElementMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_RWConfigElementMsgPayload.RWConfigElementMsg_C_header_get, _RWConfigElementMsgPayload.RWConfigElementMsg_C_header_set)
    payload = property(_RWConfigElementMsgPayload.RWConfigElementMsg_C_payload_get, _RWConfigElementMsgPayload.RWConfigElementMsg_C_payload_set)
    payloadPointer = property(_RWConfigElementMsgPayload.RWConfigElementMsg_C_payloadPointer_get, _RWConfigElementMsgPayload.RWConfigElementMsg_C_payloadPointer_set)
    headerPointer = property(_RWConfigElementMsgPayload.RWConfigElementMsg_C_headerPointer_get, _RWConfigElementMsgPayload.RWConfigElementMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _RWConfigElementMsgPayload.RWConfigElementMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import RWConfigElementMsg
        if type(source) == type(self):
            RWConfigElementMsg_C_subscribe(self, source)
        elif type(source) == RWConfigElementMsg:
            RWConfigElementMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            RWConfigElementMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe RWConfigElementMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        RWConfigElementMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import RWConfigElementMsg
        if type(source) == type(self):
            return (RWConfigElementMsg_C_isSubscribedTo(self, source))
        elif type(source) == RWConfigElementMsg:
            return (RWConfigElementMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (RWConfigElementMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        RWConfigElementMsg_C_addAuthor(self, self)
        if data:
            RWConfigElementMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        RWConfigElementMsg_C_addAuthor(self, self)
        RWConfigElementMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return RWConfigElementMsg_C_read(self)


    def __init__(self):
        _RWConfigElementMsgPayload.RWConfigElementMsg_C_swiginit(self, _RWConfigElementMsgPayload.new_RWConfigElementMsg_C())
    __swig_destroy__ = _RWConfigElementMsgPayload.delete_RWConfigElementMsg_C

# Register RWConfigElementMsg_C in _RWConfigElementMsgPayload:
_RWConfigElementMsgPayload.RWConfigElementMsg_C_swigregister(RWConfigElementMsg_C)

def RWConfigElementMsg_cpp_subscribe(subscriber, source):
    return _RWConfigElementMsgPayload.RWConfigElementMsg_cpp_subscribe(subscriber, source)

def RWConfigElementMsg_C_subscribe(subscriber, source):
    return _RWConfigElementMsgPayload.RWConfigElementMsg_C_subscribe(subscriber, source)

def RWConfigElementMsg_addr_subscribe(subscriber, sourceAddr):
    return _RWConfigElementMsgPayload.RWConfigElementMsg_addr_subscribe(subscriber, sourceAddr)

def RWConfigElementMsg_unsubscribe(subscriber):
    return _RWConfigElementMsgPayload.RWConfigElementMsg_unsubscribe(subscriber)

def RWConfigElementMsg_C_isSubscribedTo(subscriber, source):
    return _RWConfigElementMsgPayload.RWConfigElementMsg_C_isSubscribedTo(subscriber, source)

def RWConfigElementMsg_cpp_isSubscribedTo(subscriber, source):
    return _RWConfigElementMsgPayload.RWConfigElementMsg_cpp_isSubscribedTo(subscriber, source)

def RWConfigElementMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _RWConfigElementMsgPayload.RWConfigElementMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def RWConfigElementMsg_C_addAuthor(coowner, data):
    return _RWConfigElementMsgPayload.RWConfigElementMsg_C_addAuthor(coowner, data)

def RWConfigElementMsg_C_init(owner):
    return _RWConfigElementMsgPayload.RWConfigElementMsg_C_init(owner)

def RWConfigElementMsg_C_isLinked(data):
    return _RWConfigElementMsgPayload.RWConfigElementMsg_C_isLinked(data)

def RWConfigElementMsg_C_isWritten(data):
    return _RWConfigElementMsgPayload.RWConfigElementMsg_C_isWritten(data)

def RWConfigElementMsg_C_timeWritten(data):
    return _RWConfigElementMsgPayload.RWConfigElementMsg_C_timeWritten(data)

def RWConfigElementMsg_C_moduleID(data):
    return _RWConfigElementMsgPayload.RWConfigElementMsg_C_moduleID(data)

def RWConfigElementMsg_C_write(data, destination, moduleID, callTime):
    return _RWConfigElementMsgPayload.RWConfigElementMsg_C_write(data, destination, moduleID, callTime)

def RWConfigElementMsg_C_read(source):
    return _RWConfigElementMsgPayload.RWConfigElementMsg_C_read(source)

def RWConfigElementMsg_C_zeroMsgPayload():
    return _RWConfigElementMsgPayload.RWConfigElementMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_RWConfigElementMsgPayload.MsgHeader_isLinked_get, _RWConfigElementMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_RWConfigElementMsgPayload.MsgHeader_isWritten_get, _RWConfigElementMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_RWConfigElementMsgPayload.MsgHeader_timeWritten_get, _RWConfigElementMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_RWConfigElementMsgPayload.MsgHeader_moduleID_get, _RWConfigElementMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _RWConfigElementMsgPayload.MsgHeader_swiginit(self, _RWConfigElementMsgPayload.new_MsgHeader())
    __swig_destroy__ = _RWConfigElementMsgPayload.delete_MsgHeader

# Register MsgHeader in _RWConfigElementMsgPayload:
_RWConfigElementMsgPayload.MsgHeader_swigregister(MsgHeader)

