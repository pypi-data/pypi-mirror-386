# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _AttGuidMsgPayload
else:
    import _AttGuidMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AttGuidMsgPayload.delete_SwigPyIterator

    def value(self):
        return _AttGuidMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _AttGuidMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _AttGuidMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _AttGuidMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _AttGuidMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _AttGuidMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _AttGuidMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _AttGuidMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _AttGuidMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _AttGuidMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _AttGuidMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _AttGuidMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _AttGuidMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _AttGuidMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _AttGuidMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _AttGuidMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _AttGuidMsgPayload:
_AttGuidMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _AttGuidMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _AttGuidMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _AttGuidMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _AttGuidMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _AttGuidMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _AttGuidMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _AttGuidMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _AttGuidMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _AttGuidMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _AttGuidMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _AttGuidMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _AttGuidMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _AttGuidMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _AttGuidMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _AttGuidMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _AttGuidMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AttGuidMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AttGuidMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _AttGuidMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _AttGuidMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _AttGuidMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AttGuidMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AttGuidMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AttGuidMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AttGuidMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AttGuidMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _AttGuidMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _AttGuidMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _AttGuidMsgPayload.TimeVector_empty(self)

    def size(self):
        return _AttGuidMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _AttGuidMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _AttGuidMsgPayload.TimeVector_begin(self)

    def end(self):
        return _AttGuidMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _AttGuidMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _AttGuidMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _AttGuidMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _AttGuidMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _AttGuidMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _AttGuidMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _AttGuidMsgPayload.TimeVector_swiginit(self, _AttGuidMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _AttGuidMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _AttGuidMsgPayload.TimeVector_front(self)

    def back(self):
        return _AttGuidMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _AttGuidMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _AttGuidMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _AttGuidMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _AttGuidMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _AttGuidMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _AttGuidMsgPayload.delete_TimeVector

# Register TimeVector in _AttGuidMsgPayload:
_AttGuidMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AttGuidMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AttGuidMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _AttGuidMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _AttGuidMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _AttGuidMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AttGuidMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AttGuidMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AttGuidMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AttGuidMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AttGuidMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _AttGuidMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _AttGuidMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _AttGuidMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _AttGuidMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _AttGuidMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _AttGuidMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _AttGuidMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _AttGuidMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _AttGuidMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _AttGuidMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _AttGuidMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _AttGuidMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _AttGuidMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _AttGuidMsgPayload.DoubleVector_swiginit(self, _AttGuidMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _AttGuidMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _AttGuidMsgPayload.DoubleVector_front(self)

    def back(self):
        return _AttGuidMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _AttGuidMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _AttGuidMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _AttGuidMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _AttGuidMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _AttGuidMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _AttGuidMsgPayload.delete_DoubleVector

# Register DoubleVector in _AttGuidMsgPayload:
_AttGuidMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AttGuidMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AttGuidMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _AttGuidMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _AttGuidMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _AttGuidMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AttGuidMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AttGuidMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AttGuidMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AttGuidMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AttGuidMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _AttGuidMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _AttGuidMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _AttGuidMsgPayload.StringVector_empty(self)

    def size(self):
        return _AttGuidMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _AttGuidMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _AttGuidMsgPayload.StringVector_begin(self)

    def end(self):
        return _AttGuidMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _AttGuidMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _AttGuidMsgPayload.StringVector_rend(self)

    def clear(self):
        return _AttGuidMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _AttGuidMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _AttGuidMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _AttGuidMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _AttGuidMsgPayload.StringVector_swiginit(self, _AttGuidMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _AttGuidMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _AttGuidMsgPayload.StringVector_front(self)

    def back(self):
        return _AttGuidMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _AttGuidMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _AttGuidMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _AttGuidMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _AttGuidMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _AttGuidMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _AttGuidMsgPayload.delete_StringVector

# Register StringVector in _AttGuidMsgPayload:
_AttGuidMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _AttGuidMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _AttGuidMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _AttGuidMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _AttGuidMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _AttGuidMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _AttGuidMsgPayload.NANO2SEC
SEC2NANO = _AttGuidMsgPayload.SEC2NANO
SEC2HOUR = _AttGuidMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _AttGuidMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _AttGuidMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _AttGuidMsgPayload.secToNano(seconds)
BOOL_FALSE = _AttGuidMsgPayload.BOOL_FALSE
BOOL_TRUE = _AttGuidMsgPayload.BOOL_TRUE
AVAILABLE = _AttGuidMsgPayload.AVAILABLE
UNAVAILABLE = _AttGuidMsgPayload.UNAVAILABLE
BalancedWheels = _AttGuidMsgPayload.BalancedWheels
JitterSimple = _AttGuidMsgPayload.JitterSimple
JitterFullyCoupled = _AttGuidMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AttGuidMsgPayload.SysModel_swiginit(self, _AttGuidMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _AttGuidMsgPayload.delete_SysModel

    def SelfInit(self):
        return _AttGuidMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _AttGuidMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _AttGuidMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _AttGuidMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_AttGuidMsgPayload.SysModel_ModelTag_get, _AttGuidMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_AttGuidMsgPayload.SysModel_CallCounts_get, _AttGuidMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_AttGuidMsgPayload.SysModel_RNGSeed_get, _AttGuidMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_AttGuidMsgPayload.SysModel_moduleID_get, _AttGuidMsgPayload.SysModel_moduleID_set)

# Register SysModel in _AttGuidMsgPayload:
_AttGuidMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _AttGuidMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _AttGuidMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _AttGuidMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _AttGuidMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _AttGuidMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _AttGuidMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _AttGuidMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _AttGuidMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _AttGuidMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _AttGuidMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _AttGuidMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _AttGuidMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class AttGuidMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sigma_BR = property(_AttGuidMsgPayload.AttGuidMsgPayload_sigma_BR_get, _AttGuidMsgPayload.AttGuidMsgPayload_sigma_BR_set)
    omega_BR_B = property(_AttGuidMsgPayload.AttGuidMsgPayload_omega_BR_B_get, _AttGuidMsgPayload.AttGuidMsgPayload_omega_BR_B_set)
    omega_RN_B = property(_AttGuidMsgPayload.AttGuidMsgPayload_omega_RN_B_get, _AttGuidMsgPayload.AttGuidMsgPayload_omega_RN_B_set)
    domega_RN_B = property(_AttGuidMsgPayload.AttGuidMsgPayload_domega_RN_B_get, _AttGuidMsgPayload.AttGuidMsgPayload_domega_RN_B_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _AttGuidMsgPayload.AttGuidMsgPayload_swiginit(self, _AttGuidMsgPayload.new_AttGuidMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _AttGuidMsgPayload.delete_AttGuidMsgPayload

# Register AttGuidMsgPayload in _AttGuidMsgPayload:
_AttGuidMsgPayload.AttGuidMsgPayload_swigregister(AttGuidMsgPayload)

def _pprint_AttGuidMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[AttGuidMsgPayload.__repr__] = _pprint_AttGuidMsgPayload

class AttGuidMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_AttGuidMsgPayload.AttGuidMsgReader_bskLogger_get, _AttGuidMsgPayload.AttGuidMsgReader_bskLogger_set)
    zeroMsgPayload = property(_AttGuidMsgPayload.AttGuidMsgReader_zeroMsgPayload_get, _AttGuidMsgPayload.AttGuidMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _AttGuidMsgPayload.AttGuidMsgReader_swiginit(self, _AttGuidMsgPayload.new_AttGuidMsgReader(*args))

    def __call__(self):
        return _AttGuidMsgPayload.AttGuidMsgReader___call__(self)

    def isLinked(self):
        return _AttGuidMsgPayload.AttGuidMsgReader_isLinked(self)

    def isWritten(self):
        return _AttGuidMsgPayload.AttGuidMsgReader_isWritten(self)

    def timeWritten(self):
        return _AttGuidMsgPayload.AttGuidMsgReader_timeWritten(self)

    def moduleID(self):
        return _AttGuidMsgPayload.AttGuidMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _AttGuidMsgPayload.AttGuidMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _AttGuidMsgPayload.AttGuidMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _AttGuidMsgPayload.AttGuidMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _AttGuidMsgPayload.AttGuidMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _AttGuidMsgPayload.AttGuidMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _AttGuidMsgPayload.AttGuidMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _AttGuidMsgPayload.AttGuidMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _AttGuidMsgPayload.AttGuidMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _AttGuidMsgPayload.AttGuidMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _AttGuidMsgPayload.AttGuidMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == AttGuidMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.AttGuidMsgPayload import AttGuidMsg_C
            if type(source) == AttGuidMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<AttGuidMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == AttGuidMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.AttGuidMsgPayload import AttGuidMsg_C
        except ImportError:
            return 0

        if type(source) == AttGuidMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _AttGuidMsgPayload.delete_AttGuidMsgReader

# Register AttGuidMsgReader in _AttGuidMsgPayload:
_AttGuidMsgPayload.AttGuidMsgReader_swigregister(AttGuidMsgReader)
class AttGuidMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AttGuidMsgPayload.AttGuidMsgWriter_swiginit(self, _AttGuidMsgPayload.new_AttGuidMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _AttGuidMsgPayload.AttGuidMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _AttGuidMsgPayload.delete_AttGuidMsgWriter

# Register AttGuidMsgWriter in _AttGuidMsgPayload:
_AttGuidMsgPayload.AttGuidMsgWriter_swigregister(AttGuidMsgWriter)
class AttGuidMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_AttGuidMsgPayload.AttGuidMsg_write_get, _AttGuidMsgPayload.AttGuidMsg_write_set)

    def addSubscriber(self):
        return _AttGuidMsgPayload.AttGuidMsg_addSubscriber(self)

    def addAuthor(self):
        return _AttGuidMsgPayload.AttGuidMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _AttGuidMsgPayload.AttGuidMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _AttGuidMsgPayload.AttGuidMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _AttGuidMsgPayload.AttGuidMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_AttGuidMsgPayload.AttGuidMsg_zeroMsgPayload_get, _AttGuidMsgPayload.AttGuidMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _AttGuidMsgPayload.AttGuidMsg_isLinked(self)

    def getPayloadSize(self):
        return _AttGuidMsgPayload.AttGuidMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _AttGuidMsgPayload.AttGuidMsg_swiginit(self, _AttGuidMsgPayload.new_AttGuidMsg())
    __swig_destroy__ = _AttGuidMsgPayload.delete_AttGuidMsg

# Register AttGuidMsg in _AttGuidMsgPayload:
_AttGuidMsgPayload.AttGuidMsg_swigregister(AttGuidMsg)
class AttGuidMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AttGuidMsgPayload.AttGuidMsgRecorder_swiginit(self, _AttGuidMsgPayload.new_AttGuidMsgRecorder(*args))
    __swig_destroy__ = _AttGuidMsgPayload.delete_AttGuidMsgRecorder

    def SelfInit(self):
        return _AttGuidMsgPayload.AttGuidMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _AttGuidMsgPayload.AttGuidMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _AttGuidMsgPayload.AttGuidMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _AttGuidMsgPayload.AttGuidMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _AttGuidMsgPayload.AttGuidMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _AttGuidMsgPayload.AttGuidMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _AttGuidMsgPayload.AttGuidMsgRecorder___record_vector(self)

    def size(self):
        return _AttGuidMsgPayload.AttGuidMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _AttGuidMsgPayload.AttGuidMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _AttGuidMsgPayload.AttGuidMsgRecorder_clear(self)
    bskLogger = property(_AttGuidMsgPayload.AttGuidMsgRecorder_bskLogger_get, _AttGuidMsgPayload.AttGuidMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _AttGuidMsgPayload.AttGuidMsgRecorder_updateTimeInterval(self, timeDiff)

    def _sigma_BR_array(self):
        return _AttGuidMsgPayload.AttGuidMsgRecorder__sigma_BR_array(self)

    @property
    def sigma_BR(self):
        return self._sigma_BR_array()


    def _omega_BR_B_array(self):
        return _AttGuidMsgPayload.AttGuidMsgRecorder__omega_BR_B_array(self)

    @property
    def omega_BR_B(self):
        return self._omega_BR_B_array()


    def _omega_RN_B_array(self):
        return _AttGuidMsgPayload.AttGuidMsgRecorder__omega_RN_B_array(self)

    @property
    def omega_RN_B(self):
        return self._omega_RN_B_array()


    def _domega_RN_B_array(self):
        return _AttGuidMsgPayload.AttGuidMsgRecorder__domega_RN_B_array(self)

    @property
    def domega_RN_B(self):
        return self._domega_RN_B_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register AttGuidMsgRecorder in _AttGuidMsgPayload:
_AttGuidMsgPayload.AttGuidMsgRecorder_swigregister(AttGuidMsgRecorder)
class AttGuidMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AttGuidMsgPayload.AttGuidMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AttGuidMsgPayload.AttGuidMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _AttGuidMsgPayload.AttGuidMsgPayloadVector___bool__(self)

    def __len__(self):
        return _AttGuidMsgPayload.AttGuidMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _AttGuidMsgPayload.AttGuidMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AttGuidMsgPayload.AttGuidMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AttGuidMsgPayload.AttGuidMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AttGuidMsgPayload.AttGuidMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AttGuidMsgPayload.AttGuidMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AttGuidMsgPayload.AttGuidMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _AttGuidMsgPayload.AttGuidMsgPayloadVector_pop(self)

    def append(self, x):
        return _AttGuidMsgPayload.AttGuidMsgPayloadVector_append(self, x)

    def empty(self):
        return _AttGuidMsgPayload.AttGuidMsgPayloadVector_empty(self)

    def size(self):
        return _AttGuidMsgPayload.AttGuidMsgPayloadVector_size(self)

    def swap(self, v):
        return _AttGuidMsgPayload.AttGuidMsgPayloadVector_swap(self, v)

    def begin(self):
        return _AttGuidMsgPayload.AttGuidMsgPayloadVector_begin(self)

    def end(self):
        return _AttGuidMsgPayload.AttGuidMsgPayloadVector_end(self)

    def rbegin(self):
        return _AttGuidMsgPayload.AttGuidMsgPayloadVector_rbegin(self)

    def rend(self):
        return _AttGuidMsgPayload.AttGuidMsgPayloadVector_rend(self)

    def clear(self):
        return _AttGuidMsgPayload.AttGuidMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _AttGuidMsgPayload.AttGuidMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _AttGuidMsgPayload.AttGuidMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _AttGuidMsgPayload.AttGuidMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _AttGuidMsgPayload.AttGuidMsgPayloadVector_swiginit(self, _AttGuidMsgPayload.new_AttGuidMsgPayloadVector(*args))

    def push_back(self, x):
        return _AttGuidMsgPayload.AttGuidMsgPayloadVector_push_back(self, x)

    def front(self):
        return _AttGuidMsgPayload.AttGuidMsgPayloadVector_front(self)

    def back(self):
        return _AttGuidMsgPayload.AttGuidMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _AttGuidMsgPayload.AttGuidMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _AttGuidMsgPayload.AttGuidMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _AttGuidMsgPayload.AttGuidMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _AttGuidMsgPayload.AttGuidMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _AttGuidMsgPayload.AttGuidMsgPayloadVector_capacity(self)

    def get_all(self):
        return _AttGuidMsgPayload.AttGuidMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _AttGuidMsgPayload.delete_AttGuidMsgPayloadVector

# Register AttGuidMsgPayloadVector in _AttGuidMsgPayload:
_AttGuidMsgPayload.AttGuidMsgPayloadVector_swigregister(AttGuidMsgPayloadVector)
class AttGuidMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsVector_empty(self)

    def size(self):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsVector_begin(self)

    def end(self):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsVector_rend(self)

    def clear(self):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _AttGuidMsgPayload.AttGuidMsgOutMsgsVector_swiginit(self, _AttGuidMsgPayload.new_AttGuidMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsVector_front(self)

    def back(self):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _AttGuidMsgPayload.delete_AttGuidMsgOutMsgsVector

# Register AttGuidMsgOutMsgsVector in _AttGuidMsgPayload:
_AttGuidMsgPayload.AttGuidMsgOutMsgsVector_swigregister(AttGuidMsgOutMsgsVector)
class AttGuidMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _AttGuidMsgPayload.AttGuidMsgOutMsgsPtrVector_swiginit(self, _AttGuidMsgPayload.new_AttGuidMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _AttGuidMsgPayload.AttGuidMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _AttGuidMsgPayload.delete_AttGuidMsgOutMsgsPtrVector

# Register AttGuidMsgOutMsgsPtrVector in _AttGuidMsgPayload:
_AttGuidMsgPayload.AttGuidMsgOutMsgsPtrVector_swigregister(AttGuidMsgOutMsgsPtrVector)
class AttGuidMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AttGuidMsgPayload.AttGuidMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AttGuidMsgPayload.AttGuidMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _AttGuidMsgPayload.AttGuidMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _AttGuidMsgPayload.AttGuidMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _AttGuidMsgPayload.AttGuidMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AttGuidMsgPayload.AttGuidMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AttGuidMsgPayload.AttGuidMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AttGuidMsgPayload.AttGuidMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AttGuidMsgPayload.AttGuidMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AttGuidMsgPayload.AttGuidMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _AttGuidMsgPayload.AttGuidMsgInMsgsVector_pop(self)

    def append(self, x):
        return _AttGuidMsgPayload.AttGuidMsgInMsgsVector_append(self, x)

    def empty(self):
        return _AttGuidMsgPayload.AttGuidMsgInMsgsVector_empty(self)

    def size(self):
        return _AttGuidMsgPayload.AttGuidMsgInMsgsVector_size(self)

    def swap(self, v):
        return _AttGuidMsgPayload.AttGuidMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _AttGuidMsgPayload.AttGuidMsgInMsgsVector_begin(self)

    def end(self):
        return _AttGuidMsgPayload.AttGuidMsgInMsgsVector_end(self)

    def rbegin(self):
        return _AttGuidMsgPayload.AttGuidMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _AttGuidMsgPayload.AttGuidMsgInMsgsVector_rend(self)

    def clear(self):
        return _AttGuidMsgPayload.AttGuidMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _AttGuidMsgPayload.AttGuidMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _AttGuidMsgPayload.AttGuidMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _AttGuidMsgPayload.AttGuidMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _AttGuidMsgPayload.AttGuidMsgInMsgsVector_swiginit(self, _AttGuidMsgPayload.new_AttGuidMsgInMsgsVector(*args))

    def push_back(self, x):
        return _AttGuidMsgPayload.AttGuidMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _AttGuidMsgPayload.AttGuidMsgInMsgsVector_front(self)

    def back(self):
        return _AttGuidMsgPayload.AttGuidMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _AttGuidMsgPayload.AttGuidMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _AttGuidMsgPayload.AttGuidMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _AttGuidMsgPayload.AttGuidMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _AttGuidMsgPayload.AttGuidMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _AttGuidMsgPayload.AttGuidMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _AttGuidMsgPayload.delete_AttGuidMsgInMsgsVector

# Register AttGuidMsgInMsgsVector in _AttGuidMsgPayload:
_AttGuidMsgPayload.AttGuidMsgInMsgsVector_swigregister(AttGuidMsgInMsgsVector)
class AttGuidMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_AttGuidMsgPayload.AttGuidMsg_C_header_get, _AttGuidMsgPayload.AttGuidMsg_C_header_set)
    payload = property(_AttGuidMsgPayload.AttGuidMsg_C_payload_get, _AttGuidMsgPayload.AttGuidMsg_C_payload_set)
    payloadPointer = property(_AttGuidMsgPayload.AttGuidMsg_C_payloadPointer_get, _AttGuidMsgPayload.AttGuidMsg_C_payloadPointer_set)
    headerPointer = property(_AttGuidMsgPayload.AttGuidMsg_C_headerPointer_get, _AttGuidMsgPayload.AttGuidMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _AttGuidMsgPayload.AttGuidMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import AttGuidMsg
        if type(source) == type(self):
            AttGuidMsg_C_subscribe(self, source)
        elif type(source) == AttGuidMsg:
            AttGuidMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            AttGuidMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe AttGuidMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        AttGuidMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import AttGuidMsg
        if type(source) == type(self):
            return (AttGuidMsg_C_isSubscribedTo(self, source))
        elif type(source) == AttGuidMsg:
            return (AttGuidMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (AttGuidMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        AttGuidMsg_C_addAuthor(self, self)
        if data:
            AttGuidMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        AttGuidMsg_C_addAuthor(self, self)
        AttGuidMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return AttGuidMsg_C_read(self)


    def __init__(self):
        _AttGuidMsgPayload.AttGuidMsg_C_swiginit(self, _AttGuidMsgPayload.new_AttGuidMsg_C())
    __swig_destroy__ = _AttGuidMsgPayload.delete_AttGuidMsg_C

# Register AttGuidMsg_C in _AttGuidMsgPayload:
_AttGuidMsgPayload.AttGuidMsg_C_swigregister(AttGuidMsg_C)

def AttGuidMsg_cpp_subscribe(subscriber, source):
    return _AttGuidMsgPayload.AttGuidMsg_cpp_subscribe(subscriber, source)

def AttGuidMsg_C_subscribe(subscriber, source):
    return _AttGuidMsgPayload.AttGuidMsg_C_subscribe(subscriber, source)

def AttGuidMsg_addr_subscribe(subscriber, sourceAddr):
    return _AttGuidMsgPayload.AttGuidMsg_addr_subscribe(subscriber, sourceAddr)

def AttGuidMsg_unsubscribe(subscriber):
    return _AttGuidMsgPayload.AttGuidMsg_unsubscribe(subscriber)

def AttGuidMsg_C_isSubscribedTo(subscriber, source):
    return _AttGuidMsgPayload.AttGuidMsg_C_isSubscribedTo(subscriber, source)

def AttGuidMsg_cpp_isSubscribedTo(subscriber, source):
    return _AttGuidMsgPayload.AttGuidMsg_cpp_isSubscribedTo(subscriber, source)

def AttGuidMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _AttGuidMsgPayload.AttGuidMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def AttGuidMsg_C_addAuthor(coowner, data):
    return _AttGuidMsgPayload.AttGuidMsg_C_addAuthor(coowner, data)

def AttGuidMsg_C_init(owner):
    return _AttGuidMsgPayload.AttGuidMsg_C_init(owner)

def AttGuidMsg_C_isLinked(data):
    return _AttGuidMsgPayload.AttGuidMsg_C_isLinked(data)

def AttGuidMsg_C_isWritten(data):
    return _AttGuidMsgPayload.AttGuidMsg_C_isWritten(data)

def AttGuidMsg_C_timeWritten(data):
    return _AttGuidMsgPayload.AttGuidMsg_C_timeWritten(data)

def AttGuidMsg_C_moduleID(data):
    return _AttGuidMsgPayload.AttGuidMsg_C_moduleID(data)

def AttGuidMsg_C_write(data, destination, moduleID, callTime):
    return _AttGuidMsgPayload.AttGuidMsg_C_write(data, destination, moduleID, callTime)

def AttGuidMsg_C_read(source):
    return _AttGuidMsgPayload.AttGuidMsg_C_read(source)

def AttGuidMsg_C_zeroMsgPayload():
    return _AttGuidMsgPayload.AttGuidMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_AttGuidMsgPayload.MsgHeader_isLinked_get, _AttGuidMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_AttGuidMsgPayload.MsgHeader_isWritten_get, _AttGuidMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_AttGuidMsgPayload.MsgHeader_timeWritten_get, _AttGuidMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_AttGuidMsgPayload.MsgHeader_moduleID_get, _AttGuidMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _AttGuidMsgPayload.MsgHeader_swiginit(self, _AttGuidMsgPayload.new_MsgHeader())
    __swig_destroy__ = _AttGuidMsgPayload.delete_MsgHeader

# Register MsgHeader in _AttGuidMsgPayload:
_AttGuidMsgPayload.MsgHeader_swigregister(MsgHeader)

