# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _STAttMsgPayload
else:
    import _STAttMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _STAttMsgPayload.delete_SwigPyIterator

    def value(self):
        return _STAttMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _STAttMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _STAttMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _STAttMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _STAttMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _STAttMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _STAttMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _STAttMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _STAttMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _STAttMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _STAttMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _STAttMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _STAttMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _STAttMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _STAttMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _STAttMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _STAttMsgPayload:
_STAttMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _STAttMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _STAttMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _STAttMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _STAttMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _STAttMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _STAttMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _STAttMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _STAttMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _STAttMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _STAttMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _STAttMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _STAttMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _STAttMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _STAttMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _STAttMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _STAttMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _STAttMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _STAttMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _STAttMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _STAttMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _STAttMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _STAttMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _STAttMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _STAttMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _STAttMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _STAttMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _STAttMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _STAttMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _STAttMsgPayload.TimeVector_empty(self)

    def size(self):
        return _STAttMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _STAttMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _STAttMsgPayload.TimeVector_begin(self)

    def end(self):
        return _STAttMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _STAttMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _STAttMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _STAttMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _STAttMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _STAttMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _STAttMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _STAttMsgPayload.TimeVector_swiginit(self, _STAttMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _STAttMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _STAttMsgPayload.TimeVector_front(self)

    def back(self):
        return _STAttMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _STAttMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _STAttMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _STAttMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _STAttMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _STAttMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _STAttMsgPayload.delete_TimeVector

# Register TimeVector in _STAttMsgPayload:
_STAttMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _STAttMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _STAttMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _STAttMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _STAttMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _STAttMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _STAttMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _STAttMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _STAttMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _STAttMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _STAttMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _STAttMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _STAttMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _STAttMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _STAttMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _STAttMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _STAttMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _STAttMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _STAttMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _STAttMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _STAttMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _STAttMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _STAttMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _STAttMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _STAttMsgPayload.DoubleVector_swiginit(self, _STAttMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _STAttMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _STAttMsgPayload.DoubleVector_front(self)

    def back(self):
        return _STAttMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _STAttMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _STAttMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _STAttMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _STAttMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _STAttMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _STAttMsgPayload.delete_DoubleVector

# Register DoubleVector in _STAttMsgPayload:
_STAttMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _STAttMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _STAttMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _STAttMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _STAttMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _STAttMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _STAttMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _STAttMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _STAttMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _STAttMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _STAttMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _STAttMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _STAttMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _STAttMsgPayload.StringVector_empty(self)

    def size(self):
        return _STAttMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _STAttMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _STAttMsgPayload.StringVector_begin(self)

    def end(self):
        return _STAttMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _STAttMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _STAttMsgPayload.StringVector_rend(self)

    def clear(self):
        return _STAttMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _STAttMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _STAttMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _STAttMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _STAttMsgPayload.StringVector_swiginit(self, _STAttMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _STAttMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _STAttMsgPayload.StringVector_front(self)

    def back(self):
        return _STAttMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _STAttMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _STAttMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _STAttMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _STAttMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _STAttMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _STAttMsgPayload.delete_StringVector

# Register StringVector in _STAttMsgPayload:
_STAttMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _STAttMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _STAttMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _STAttMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _STAttMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _STAttMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _STAttMsgPayload.NANO2SEC
SEC2NANO = _STAttMsgPayload.SEC2NANO
SEC2HOUR = _STAttMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _STAttMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _STAttMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _STAttMsgPayload.secToNano(seconds)
BOOL_FALSE = _STAttMsgPayload.BOOL_FALSE
BOOL_TRUE = _STAttMsgPayload.BOOL_TRUE
AVAILABLE = _STAttMsgPayload.AVAILABLE
UNAVAILABLE = _STAttMsgPayload.UNAVAILABLE
BalancedWheels = _STAttMsgPayload.BalancedWheels
JitterSimple = _STAttMsgPayload.JitterSimple
JitterFullyCoupled = _STAttMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _STAttMsgPayload.SysModel_swiginit(self, _STAttMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _STAttMsgPayload.delete_SysModel

    def SelfInit(self):
        return _STAttMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _STAttMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _STAttMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _STAttMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_STAttMsgPayload.SysModel_ModelTag_get, _STAttMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_STAttMsgPayload.SysModel_CallCounts_get, _STAttMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_STAttMsgPayload.SysModel_RNGSeed_get, _STAttMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_STAttMsgPayload.SysModel_moduleID_get, _STAttMsgPayload.SysModel_moduleID_set)

# Register SysModel in _STAttMsgPayload:
_STAttMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _STAttMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _STAttMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _STAttMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _STAttMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _STAttMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _STAttMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _STAttMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _STAttMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _STAttMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _STAttMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _STAttMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _STAttMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class STAttMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timeTag = property(_STAttMsgPayload.STAttMsgPayload_timeTag_get, _STAttMsgPayload.STAttMsgPayload_timeTag_set)
    MRP_BdyInrtl = property(_STAttMsgPayload.STAttMsgPayload_MRP_BdyInrtl_get, _STAttMsgPayload.STAttMsgPayload_MRP_BdyInrtl_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _STAttMsgPayload.STAttMsgPayload_swiginit(self, _STAttMsgPayload.new_STAttMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _STAttMsgPayload.delete_STAttMsgPayload

# Register STAttMsgPayload in _STAttMsgPayload:
_STAttMsgPayload.STAttMsgPayload_swigregister(STAttMsgPayload)

def _pprint_STAttMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[STAttMsgPayload.__repr__] = _pprint_STAttMsgPayload

class STAttMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_STAttMsgPayload.STAttMsgReader_bskLogger_get, _STAttMsgPayload.STAttMsgReader_bskLogger_set)
    zeroMsgPayload = property(_STAttMsgPayload.STAttMsgReader_zeroMsgPayload_get, _STAttMsgPayload.STAttMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _STAttMsgPayload.STAttMsgReader_swiginit(self, _STAttMsgPayload.new_STAttMsgReader(*args))

    def __call__(self):
        return _STAttMsgPayload.STAttMsgReader___call__(self)

    def isLinked(self):
        return _STAttMsgPayload.STAttMsgReader_isLinked(self)

    def isWritten(self):
        return _STAttMsgPayload.STAttMsgReader_isWritten(self)

    def timeWritten(self):
        return _STAttMsgPayload.STAttMsgReader_timeWritten(self)

    def moduleID(self):
        return _STAttMsgPayload.STAttMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _STAttMsgPayload.STAttMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _STAttMsgPayload.STAttMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _STAttMsgPayload.STAttMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _STAttMsgPayload.STAttMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _STAttMsgPayload.STAttMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _STAttMsgPayload.STAttMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _STAttMsgPayload.STAttMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _STAttMsgPayload.STAttMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _STAttMsgPayload.STAttMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _STAttMsgPayload.STAttMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == STAttMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.STAttMsgPayload import STAttMsg_C
            if type(source) == STAttMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<STAttMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == STAttMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.STAttMsgPayload import STAttMsg_C
        except ImportError:
            return 0

        if type(source) == STAttMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _STAttMsgPayload.delete_STAttMsgReader

# Register STAttMsgReader in _STAttMsgPayload:
_STAttMsgPayload.STAttMsgReader_swigregister(STAttMsgReader)
class STAttMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _STAttMsgPayload.STAttMsgWriter_swiginit(self, _STAttMsgPayload.new_STAttMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _STAttMsgPayload.STAttMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _STAttMsgPayload.delete_STAttMsgWriter

# Register STAttMsgWriter in _STAttMsgPayload:
_STAttMsgPayload.STAttMsgWriter_swigregister(STAttMsgWriter)
class STAttMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_STAttMsgPayload.STAttMsg_write_get, _STAttMsgPayload.STAttMsg_write_set)

    def addSubscriber(self):
        return _STAttMsgPayload.STAttMsg_addSubscriber(self)

    def addAuthor(self):
        return _STAttMsgPayload.STAttMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _STAttMsgPayload.STAttMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _STAttMsgPayload.STAttMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _STAttMsgPayload.STAttMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_STAttMsgPayload.STAttMsg_zeroMsgPayload_get, _STAttMsgPayload.STAttMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _STAttMsgPayload.STAttMsg_isLinked(self)

    def getPayloadSize(self):
        return _STAttMsgPayload.STAttMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _STAttMsgPayload.STAttMsg_swiginit(self, _STAttMsgPayload.new_STAttMsg())
    __swig_destroy__ = _STAttMsgPayload.delete_STAttMsg

# Register STAttMsg in _STAttMsgPayload:
_STAttMsgPayload.STAttMsg_swigregister(STAttMsg)
class STAttMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _STAttMsgPayload.STAttMsgRecorder_swiginit(self, _STAttMsgPayload.new_STAttMsgRecorder(*args))
    __swig_destroy__ = _STAttMsgPayload.delete_STAttMsgRecorder

    def SelfInit(self):
        return _STAttMsgPayload.STAttMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _STAttMsgPayload.STAttMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _STAttMsgPayload.STAttMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _STAttMsgPayload.STAttMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _STAttMsgPayload.STAttMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _STAttMsgPayload.STAttMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _STAttMsgPayload.STAttMsgRecorder___record_vector(self)

    def size(self):
        return _STAttMsgPayload.STAttMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _STAttMsgPayload.STAttMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _STAttMsgPayload.STAttMsgRecorder_clear(self)
    bskLogger = property(_STAttMsgPayload.STAttMsgRecorder_bskLogger_get, _STAttMsgPayload.STAttMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _STAttMsgPayload.STAttMsgRecorder_updateTimeInterval(self, timeDiff)

    def _timeTag_array(self):
        return _STAttMsgPayload.STAttMsgRecorder__timeTag_array(self)

    @property
    def timeTag(self):
        return self._timeTag_array()


    def _MRP_BdyInrtl_array(self):
        return _STAttMsgPayload.STAttMsgRecorder__MRP_BdyInrtl_array(self)

    @property
    def MRP_BdyInrtl(self):
        return self._MRP_BdyInrtl_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register STAttMsgRecorder in _STAttMsgPayload:
_STAttMsgPayload.STAttMsgRecorder_swigregister(STAttMsgRecorder)
class STAttMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _STAttMsgPayload.STAttMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _STAttMsgPayload.STAttMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _STAttMsgPayload.STAttMsgPayloadVector___bool__(self)

    def __len__(self):
        return _STAttMsgPayload.STAttMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _STAttMsgPayload.STAttMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _STAttMsgPayload.STAttMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _STAttMsgPayload.STAttMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _STAttMsgPayload.STAttMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _STAttMsgPayload.STAttMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _STAttMsgPayload.STAttMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _STAttMsgPayload.STAttMsgPayloadVector_pop(self)

    def append(self, x):
        return _STAttMsgPayload.STAttMsgPayloadVector_append(self, x)

    def empty(self):
        return _STAttMsgPayload.STAttMsgPayloadVector_empty(self)

    def size(self):
        return _STAttMsgPayload.STAttMsgPayloadVector_size(self)

    def swap(self, v):
        return _STAttMsgPayload.STAttMsgPayloadVector_swap(self, v)

    def begin(self):
        return _STAttMsgPayload.STAttMsgPayloadVector_begin(self)

    def end(self):
        return _STAttMsgPayload.STAttMsgPayloadVector_end(self)

    def rbegin(self):
        return _STAttMsgPayload.STAttMsgPayloadVector_rbegin(self)

    def rend(self):
        return _STAttMsgPayload.STAttMsgPayloadVector_rend(self)

    def clear(self):
        return _STAttMsgPayload.STAttMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _STAttMsgPayload.STAttMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _STAttMsgPayload.STAttMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _STAttMsgPayload.STAttMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _STAttMsgPayload.STAttMsgPayloadVector_swiginit(self, _STAttMsgPayload.new_STAttMsgPayloadVector(*args))

    def push_back(self, x):
        return _STAttMsgPayload.STAttMsgPayloadVector_push_back(self, x)

    def front(self):
        return _STAttMsgPayload.STAttMsgPayloadVector_front(self)

    def back(self):
        return _STAttMsgPayload.STAttMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _STAttMsgPayload.STAttMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _STAttMsgPayload.STAttMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _STAttMsgPayload.STAttMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _STAttMsgPayload.STAttMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _STAttMsgPayload.STAttMsgPayloadVector_capacity(self)

    def get_all(self):
        return _STAttMsgPayload.STAttMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _STAttMsgPayload.delete_STAttMsgPayloadVector

# Register STAttMsgPayloadVector in _STAttMsgPayload:
_STAttMsgPayload.STAttMsgPayloadVector_swigregister(STAttMsgPayloadVector)
class STAttMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _STAttMsgPayload.STAttMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _STAttMsgPayload.STAttMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _STAttMsgPayload.STAttMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _STAttMsgPayload.STAttMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _STAttMsgPayload.STAttMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _STAttMsgPayload.STAttMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _STAttMsgPayload.STAttMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _STAttMsgPayload.STAttMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _STAttMsgPayload.STAttMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _STAttMsgPayload.STAttMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _STAttMsgPayload.STAttMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _STAttMsgPayload.STAttMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _STAttMsgPayload.STAttMsgOutMsgsVector_empty(self)

    def size(self):
        return _STAttMsgPayload.STAttMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _STAttMsgPayload.STAttMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _STAttMsgPayload.STAttMsgOutMsgsVector_begin(self)

    def end(self):
        return _STAttMsgPayload.STAttMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _STAttMsgPayload.STAttMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _STAttMsgPayload.STAttMsgOutMsgsVector_rend(self)

    def clear(self):
        return _STAttMsgPayload.STAttMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _STAttMsgPayload.STAttMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _STAttMsgPayload.STAttMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _STAttMsgPayload.STAttMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _STAttMsgPayload.STAttMsgOutMsgsVector_swiginit(self, _STAttMsgPayload.new_STAttMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _STAttMsgPayload.STAttMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _STAttMsgPayload.STAttMsgOutMsgsVector_front(self)

    def back(self):
        return _STAttMsgPayload.STAttMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _STAttMsgPayload.STAttMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _STAttMsgPayload.STAttMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _STAttMsgPayload.STAttMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _STAttMsgPayload.STAttMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _STAttMsgPayload.STAttMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _STAttMsgPayload.delete_STAttMsgOutMsgsVector

# Register STAttMsgOutMsgsVector in _STAttMsgPayload:
_STAttMsgPayload.STAttMsgOutMsgsVector_swigregister(STAttMsgOutMsgsVector)
class STAttMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _STAttMsgPayload.STAttMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _STAttMsgPayload.STAttMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _STAttMsgPayload.STAttMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _STAttMsgPayload.STAttMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _STAttMsgPayload.STAttMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _STAttMsgPayload.STAttMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _STAttMsgPayload.STAttMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _STAttMsgPayload.STAttMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _STAttMsgPayload.STAttMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _STAttMsgPayload.STAttMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _STAttMsgPayload.STAttMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _STAttMsgPayload.STAttMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _STAttMsgPayload.STAttMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _STAttMsgPayload.STAttMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _STAttMsgPayload.STAttMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _STAttMsgPayload.STAttMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _STAttMsgPayload.STAttMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _STAttMsgPayload.STAttMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _STAttMsgPayload.STAttMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _STAttMsgPayload.STAttMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _STAttMsgPayload.STAttMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _STAttMsgPayload.STAttMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _STAttMsgPayload.STAttMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _STAttMsgPayload.STAttMsgOutMsgsPtrVector_swiginit(self, _STAttMsgPayload.new_STAttMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _STAttMsgPayload.STAttMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _STAttMsgPayload.STAttMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _STAttMsgPayload.STAttMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _STAttMsgPayload.STAttMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _STAttMsgPayload.STAttMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _STAttMsgPayload.STAttMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _STAttMsgPayload.STAttMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _STAttMsgPayload.STAttMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _STAttMsgPayload.delete_STAttMsgOutMsgsPtrVector

# Register STAttMsgOutMsgsPtrVector in _STAttMsgPayload:
_STAttMsgPayload.STAttMsgOutMsgsPtrVector_swigregister(STAttMsgOutMsgsPtrVector)
class STAttMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _STAttMsgPayload.STAttMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _STAttMsgPayload.STAttMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _STAttMsgPayload.STAttMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _STAttMsgPayload.STAttMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _STAttMsgPayload.STAttMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _STAttMsgPayload.STAttMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _STAttMsgPayload.STAttMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _STAttMsgPayload.STAttMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _STAttMsgPayload.STAttMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _STAttMsgPayload.STAttMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _STAttMsgPayload.STAttMsgInMsgsVector_pop(self)

    def append(self, x):
        return _STAttMsgPayload.STAttMsgInMsgsVector_append(self, x)

    def empty(self):
        return _STAttMsgPayload.STAttMsgInMsgsVector_empty(self)

    def size(self):
        return _STAttMsgPayload.STAttMsgInMsgsVector_size(self)

    def swap(self, v):
        return _STAttMsgPayload.STAttMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _STAttMsgPayload.STAttMsgInMsgsVector_begin(self)

    def end(self):
        return _STAttMsgPayload.STAttMsgInMsgsVector_end(self)

    def rbegin(self):
        return _STAttMsgPayload.STAttMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _STAttMsgPayload.STAttMsgInMsgsVector_rend(self)

    def clear(self):
        return _STAttMsgPayload.STAttMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _STAttMsgPayload.STAttMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _STAttMsgPayload.STAttMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _STAttMsgPayload.STAttMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _STAttMsgPayload.STAttMsgInMsgsVector_swiginit(self, _STAttMsgPayload.new_STAttMsgInMsgsVector(*args))

    def push_back(self, x):
        return _STAttMsgPayload.STAttMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _STAttMsgPayload.STAttMsgInMsgsVector_front(self)

    def back(self):
        return _STAttMsgPayload.STAttMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _STAttMsgPayload.STAttMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _STAttMsgPayload.STAttMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _STAttMsgPayload.STAttMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _STAttMsgPayload.STAttMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _STAttMsgPayload.STAttMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _STAttMsgPayload.delete_STAttMsgInMsgsVector

# Register STAttMsgInMsgsVector in _STAttMsgPayload:
_STAttMsgPayload.STAttMsgInMsgsVector_swigregister(STAttMsgInMsgsVector)
class STAttMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_STAttMsgPayload.STAttMsg_C_header_get, _STAttMsgPayload.STAttMsg_C_header_set)
    payload = property(_STAttMsgPayload.STAttMsg_C_payload_get, _STAttMsgPayload.STAttMsg_C_payload_set)
    payloadPointer = property(_STAttMsgPayload.STAttMsg_C_payloadPointer_get, _STAttMsgPayload.STAttMsg_C_payloadPointer_set)
    headerPointer = property(_STAttMsgPayload.STAttMsg_C_headerPointer_get, _STAttMsgPayload.STAttMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _STAttMsgPayload.STAttMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import STAttMsg
        if type(source) == type(self):
            STAttMsg_C_subscribe(self, source)
        elif type(source) == STAttMsg:
            STAttMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            STAttMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe STAttMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        STAttMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import STAttMsg
        if type(source) == type(self):
            return (STAttMsg_C_isSubscribedTo(self, source))
        elif type(source) == STAttMsg:
            return (STAttMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (STAttMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        STAttMsg_C_addAuthor(self, self)
        if data:
            STAttMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        STAttMsg_C_addAuthor(self, self)
        STAttMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return STAttMsg_C_read(self)


    def __init__(self):
        _STAttMsgPayload.STAttMsg_C_swiginit(self, _STAttMsgPayload.new_STAttMsg_C())
    __swig_destroy__ = _STAttMsgPayload.delete_STAttMsg_C

# Register STAttMsg_C in _STAttMsgPayload:
_STAttMsgPayload.STAttMsg_C_swigregister(STAttMsg_C)

def STAttMsg_cpp_subscribe(subscriber, source):
    return _STAttMsgPayload.STAttMsg_cpp_subscribe(subscriber, source)

def STAttMsg_C_subscribe(subscriber, source):
    return _STAttMsgPayload.STAttMsg_C_subscribe(subscriber, source)

def STAttMsg_addr_subscribe(subscriber, sourceAddr):
    return _STAttMsgPayload.STAttMsg_addr_subscribe(subscriber, sourceAddr)

def STAttMsg_unsubscribe(subscriber):
    return _STAttMsgPayload.STAttMsg_unsubscribe(subscriber)

def STAttMsg_C_isSubscribedTo(subscriber, source):
    return _STAttMsgPayload.STAttMsg_C_isSubscribedTo(subscriber, source)

def STAttMsg_cpp_isSubscribedTo(subscriber, source):
    return _STAttMsgPayload.STAttMsg_cpp_isSubscribedTo(subscriber, source)

def STAttMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _STAttMsgPayload.STAttMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def STAttMsg_C_addAuthor(coowner, data):
    return _STAttMsgPayload.STAttMsg_C_addAuthor(coowner, data)

def STAttMsg_C_init(owner):
    return _STAttMsgPayload.STAttMsg_C_init(owner)

def STAttMsg_C_isLinked(data):
    return _STAttMsgPayload.STAttMsg_C_isLinked(data)

def STAttMsg_C_isWritten(data):
    return _STAttMsgPayload.STAttMsg_C_isWritten(data)

def STAttMsg_C_timeWritten(data):
    return _STAttMsgPayload.STAttMsg_C_timeWritten(data)

def STAttMsg_C_moduleID(data):
    return _STAttMsgPayload.STAttMsg_C_moduleID(data)

def STAttMsg_C_write(data, destination, moduleID, callTime):
    return _STAttMsgPayload.STAttMsg_C_write(data, destination, moduleID, callTime)

def STAttMsg_C_read(source):
    return _STAttMsgPayload.STAttMsg_C_read(source)

def STAttMsg_C_zeroMsgPayload():
    return _STAttMsgPayload.STAttMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_STAttMsgPayload.MsgHeader_isLinked_get, _STAttMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_STAttMsgPayload.MsgHeader_isWritten_get, _STAttMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_STAttMsgPayload.MsgHeader_timeWritten_get, _STAttMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_STAttMsgPayload.MsgHeader_moduleID_get, _STAttMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _STAttMsgPayload.MsgHeader_swiginit(self, _STAttMsgPayload.new_MsgHeader())
    __swig_destroy__ = _STAttMsgPayload.delete_MsgHeader

# Register MsgHeader in _STAttMsgPayload:
_STAttMsgPayload.MsgHeader_swigregister(MsgHeader)

