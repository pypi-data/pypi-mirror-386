# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _IMUSensorBodyMsgPayload
else:
    import _IMUSensorBodyMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IMUSensorBodyMsgPayload.delete_SwigPyIterator

    def value(self):
        return _IMUSensorBodyMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _IMUSensorBodyMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _IMUSensorBodyMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _IMUSensorBodyMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _IMUSensorBodyMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _IMUSensorBodyMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _IMUSensorBodyMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _IMUSensorBodyMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _IMUSensorBodyMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _IMUSensorBodyMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _IMUSensorBodyMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _IMUSensorBodyMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _IMUSensorBodyMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _IMUSensorBodyMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _IMUSensorBodyMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _IMUSensorBodyMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _IMUSensorBodyMsgPayload:
_IMUSensorBodyMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _IMUSensorBodyMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _IMUSensorBodyMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _IMUSensorBodyMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _IMUSensorBodyMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _IMUSensorBodyMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _IMUSensorBodyMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _IMUSensorBodyMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _IMUSensorBodyMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _IMUSensorBodyMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _IMUSensorBodyMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _IMUSensorBodyMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _IMUSensorBodyMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _IMUSensorBodyMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _IMUSensorBodyMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _IMUSensorBodyMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _IMUSensorBodyMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _IMUSensorBodyMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _IMUSensorBodyMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _IMUSensorBodyMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _IMUSensorBodyMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _IMUSensorBodyMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _IMUSensorBodyMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _IMUSensorBodyMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _IMUSensorBodyMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _IMUSensorBodyMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _IMUSensorBodyMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _IMUSensorBodyMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _IMUSensorBodyMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _IMUSensorBodyMsgPayload.TimeVector_empty(self)

    def size(self):
        return _IMUSensorBodyMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _IMUSensorBodyMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _IMUSensorBodyMsgPayload.TimeVector_begin(self)

    def end(self):
        return _IMUSensorBodyMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _IMUSensorBodyMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _IMUSensorBodyMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _IMUSensorBodyMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _IMUSensorBodyMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _IMUSensorBodyMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _IMUSensorBodyMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _IMUSensorBodyMsgPayload.TimeVector_swiginit(self, _IMUSensorBodyMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _IMUSensorBodyMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _IMUSensorBodyMsgPayload.TimeVector_front(self)

    def back(self):
        return _IMUSensorBodyMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _IMUSensorBodyMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _IMUSensorBodyMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _IMUSensorBodyMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _IMUSensorBodyMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _IMUSensorBodyMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _IMUSensorBodyMsgPayload.delete_TimeVector

# Register TimeVector in _IMUSensorBodyMsgPayload:
_IMUSensorBodyMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _IMUSensorBodyMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _IMUSensorBodyMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _IMUSensorBodyMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _IMUSensorBodyMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _IMUSensorBodyMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _IMUSensorBodyMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _IMUSensorBodyMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _IMUSensorBodyMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _IMUSensorBodyMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _IMUSensorBodyMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _IMUSensorBodyMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _IMUSensorBodyMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _IMUSensorBodyMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _IMUSensorBodyMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _IMUSensorBodyMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _IMUSensorBodyMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _IMUSensorBodyMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _IMUSensorBodyMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _IMUSensorBodyMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _IMUSensorBodyMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _IMUSensorBodyMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _IMUSensorBodyMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _IMUSensorBodyMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _IMUSensorBodyMsgPayload.DoubleVector_swiginit(self, _IMUSensorBodyMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _IMUSensorBodyMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _IMUSensorBodyMsgPayload.DoubleVector_front(self)

    def back(self):
        return _IMUSensorBodyMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _IMUSensorBodyMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _IMUSensorBodyMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _IMUSensorBodyMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _IMUSensorBodyMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _IMUSensorBodyMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _IMUSensorBodyMsgPayload.delete_DoubleVector

# Register DoubleVector in _IMUSensorBodyMsgPayload:
_IMUSensorBodyMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _IMUSensorBodyMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _IMUSensorBodyMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _IMUSensorBodyMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _IMUSensorBodyMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _IMUSensorBodyMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _IMUSensorBodyMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _IMUSensorBodyMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _IMUSensorBodyMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _IMUSensorBodyMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _IMUSensorBodyMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _IMUSensorBodyMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _IMUSensorBodyMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _IMUSensorBodyMsgPayload.StringVector_empty(self)

    def size(self):
        return _IMUSensorBodyMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _IMUSensorBodyMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _IMUSensorBodyMsgPayload.StringVector_begin(self)

    def end(self):
        return _IMUSensorBodyMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _IMUSensorBodyMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _IMUSensorBodyMsgPayload.StringVector_rend(self)

    def clear(self):
        return _IMUSensorBodyMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _IMUSensorBodyMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _IMUSensorBodyMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _IMUSensorBodyMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _IMUSensorBodyMsgPayload.StringVector_swiginit(self, _IMUSensorBodyMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _IMUSensorBodyMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _IMUSensorBodyMsgPayload.StringVector_front(self)

    def back(self):
        return _IMUSensorBodyMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _IMUSensorBodyMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _IMUSensorBodyMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _IMUSensorBodyMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _IMUSensorBodyMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _IMUSensorBodyMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _IMUSensorBodyMsgPayload.delete_StringVector

# Register StringVector in _IMUSensorBodyMsgPayload:
_IMUSensorBodyMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _IMUSensorBodyMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _IMUSensorBodyMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _IMUSensorBodyMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _IMUSensorBodyMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _IMUSensorBodyMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _IMUSensorBodyMsgPayload.NANO2SEC
SEC2NANO = _IMUSensorBodyMsgPayload.SEC2NANO
SEC2HOUR = _IMUSensorBodyMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _IMUSensorBodyMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _IMUSensorBodyMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _IMUSensorBodyMsgPayload.secToNano(seconds)
BOOL_FALSE = _IMUSensorBodyMsgPayload.BOOL_FALSE
BOOL_TRUE = _IMUSensorBodyMsgPayload.BOOL_TRUE
AVAILABLE = _IMUSensorBodyMsgPayload.AVAILABLE
UNAVAILABLE = _IMUSensorBodyMsgPayload.UNAVAILABLE
BalancedWheels = _IMUSensorBodyMsgPayload.BalancedWheels
JitterSimple = _IMUSensorBodyMsgPayload.JitterSimple
JitterFullyCoupled = _IMUSensorBodyMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IMUSensorBodyMsgPayload.SysModel_swiginit(self, _IMUSensorBodyMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _IMUSensorBodyMsgPayload.delete_SysModel

    def SelfInit(self):
        return _IMUSensorBodyMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _IMUSensorBodyMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _IMUSensorBodyMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _IMUSensorBodyMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_IMUSensorBodyMsgPayload.SysModel_ModelTag_get, _IMUSensorBodyMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_IMUSensorBodyMsgPayload.SysModel_CallCounts_get, _IMUSensorBodyMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_IMUSensorBodyMsgPayload.SysModel_RNGSeed_get, _IMUSensorBodyMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_IMUSensorBodyMsgPayload.SysModel_moduleID_get, _IMUSensorBodyMsgPayload.SysModel_moduleID_set)

# Register SysModel in _IMUSensorBodyMsgPayload:
_IMUSensorBodyMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _IMUSensorBodyMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _IMUSensorBodyMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _IMUSensorBodyMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _IMUSensorBodyMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _IMUSensorBodyMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _IMUSensorBodyMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _IMUSensorBodyMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _IMUSensorBodyMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _IMUSensorBodyMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _IMUSensorBodyMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _IMUSensorBodyMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _IMUSensorBodyMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class IMUSensorBodyMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DVFrameBody = property(_IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayload_DVFrameBody_get, _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayload_DVFrameBody_set)
    AccelBody = property(_IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayload_AccelBody_get, _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayload_AccelBody_set)
    DRFrameBody = property(_IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayload_DRFrameBody_get, _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayload_DRFrameBody_set)
    AngVelBody = property(_IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayload_AngVelBody_get, _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayload_AngVelBody_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayload_swiginit(self, _IMUSensorBodyMsgPayload.new_IMUSensorBodyMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _IMUSensorBodyMsgPayload.delete_IMUSensorBodyMsgPayload

# Register IMUSensorBodyMsgPayload in _IMUSensorBodyMsgPayload:
_IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayload_swigregister(IMUSensorBodyMsgPayload)

def _pprint_IMUSensorBodyMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[IMUSensorBodyMsgPayload.__repr__] = _pprint_IMUSensorBodyMsgPayload

class IMUSensorBodyMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_IMUSensorBodyMsgPayload.IMUSensorBodyMsgReader_bskLogger_get, _IMUSensorBodyMsgPayload.IMUSensorBodyMsgReader_bskLogger_set)
    zeroMsgPayload = property(_IMUSensorBodyMsgPayload.IMUSensorBodyMsgReader_zeroMsgPayload_get, _IMUSensorBodyMsgPayload.IMUSensorBodyMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _IMUSensorBodyMsgPayload.IMUSensorBodyMsgReader_swiginit(self, _IMUSensorBodyMsgPayload.new_IMUSensorBodyMsgReader(*args))

    def __call__(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgReader___call__(self)

    def isLinked(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgReader_isLinked(self)

    def isWritten(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgReader_isWritten(self)

    def timeWritten(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgReader_timeWritten(self)

    def moduleID(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == IMUSensorBodyMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.IMUSensorBodyMsgPayload import IMUSensorBodyMsg_C
            if type(source) == IMUSensorBodyMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<IMUSensorBodyMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == IMUSensorBodyMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.IMUSensorBodyMsgPayload import IMUSensorBodyMsg_C
        except ImportError:
            return 0

        if type(source) == IMUSensorBodyMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _IMUSensorBodyMsgPayload.delete_IMUSensorBodyMsgReader

# Register IMUSensorBodyMsgReader in _IMUSensorBodyMsgPayload:
_IMUSensorBodyMsgPayload.IMUSensorBodyMsgReader_swigregister(IMUSensorBodyMsgReader)
class IMUSensorBodyMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IMUSensorBodyMsgPayload.IMUSensorBodyMsgWriter_swiginit(self, _IMUSensorBodyMsgPayload.new_IMUSensorBodyMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _IMUSensorBodyMsgPayload.delete_IMUSensorBodyMsgWriter

# Register IMUSensorBodyMsgWriter in _IMUSensorBodyMsgPayload:
_IMUSensorBodyMsgPayload.IMUSensorBodyMsgWriter_swigregister(IMUSensorBodyMsgWriter)
class IMUSensorBodyMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_IMUSensorBodyMsgPayload.IMUSensorBodyMsg_write_get, _IMUSensorBodyMsgPayload.IMUSensorBodyMsg_write_set)

    def addSubscriber(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsg_addSubscriber(self)

    def addAuthor(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_IMUSensorBodyMsgPayload.IMUSensorBodyMsg_zeroMsgPayload_get, _IMUSensorBodyMsgPayload.IMUSensorBodyMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsg_isLinked(self)

    def getPayloadSize(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _IMUSensorBodyMsgPayload.IMUSensorBodyMsg_swiginit(self, _IMUSensorBodyMsgPayload.new_IMUSensorBodyMsg())
    __swig_destroy__ = _IMUSensorBodyMsgPayload.delete_IMUSensorBodyMsg

# Register IMUSensorBodyMsg in _IMUSensorBodyMsgPayload:
_IMUSensorBodyMsgPayload.IMUSensorBodyMsg_swigregister(IMUSensorBodyMsg)
class IMUSensorBodyMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IMUSensorBodyMsgPayload.IMUSensorBodyMsgRecorder_swiginit(self, _IMUSensorBodyMsgPayload.new_IMUSensorBodyMsgRecorder(*args))
    __swig_destroy__ = _IMUSensorBodyMsgPayload.delete_IMUSensorBodyMsgRecorder

    def SelfInit(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgRecorder___record_vector(self)

    def size(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgRecorder_clear(self)
    bskLogger = property(_IMUSensorBodyMsgPayload.IMUSensorBodyMsgRecorder_bskLogger_get, _IMUSensorBodyMsgPayload.IMUSensorBodyMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgRecorder_updateTimeInterval(self, timeDiff)

    def _DVFrameBody_array(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgRecorder__DVFrameBody_array(self)

    @property
    def DVFrameBody(self):
        return self._DVFrameBody_array()


    def _AccelBody_array(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgRecorder__AccelBody_array(self)

    @property
    def AccelBody(self):
        return self._AccelBody_array()


    def _DRFrameBody_array(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgRecorder__DRFrameBody_array(self)

    @property
    def DRFrameBody(self):
        return self._DRFrameBody_array()


    def _AngVelBody_array(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgRecorder__AngVelBody_array(self)

    @property
    def AngVelBody(self):
        return self._AngVelBody_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register IMUSensorBodyMsgRecorder in _IMUSensorBodyMsgPayload:
_IMUSensorBodyMsgPayload.IMUSensorBodyMsgRecorder_swigregister(IMUSensorBodyMsgRecorder)
class IMUSensorBodyMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayloadVector___bool__(self)

    def __len__(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayloadVector_pop(self)

    def append(self, x):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayloadVector_append(self, x)

    def empty(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayloadVector_empty(self)

    def size(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayloadVector_size(self)

    def swap(self, v):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayloadVector_swap(self, v)

    def begin(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayloadVector_begin(self)

    def end(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayloadVector_end(self)

    def rbegin(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayloadVector_rbegin(self)

    def rend(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayloadVector_rend(self)

    def clear(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayloadVector_swiginit(self, _IMUSensorBodyMsgPayload.new_IMUSensorBodyMsgPayloadVector(*args))

    def push_back(self, x):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayloadVector_push_back(self, x)

    def front(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayloadVector_front(self)

    def back(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayloadVector_capacity(self)

    def get_all(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _IMUSensorBodyMsgPayload.delete_IMUSensorBodyMsgPayloadVector

# Register IMUSensorBodyMsgPayloadVector in _IMUSensorBodyMsgPayload:
_IMUSensorBodyMsgPayload.IMUSensorBodyMsgPayloadVector_swigregister(IMUSensorBodyMsgPayloadVector)
class IMUSensorBodyMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsVector_empty(self)

    def size(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsVector_begin(self)

    def end(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsVector_rend(self)

    def clear(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsVector_swiginit(self, _IMUSensorBodyMsgPayload.new_IMUSensorBodyMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsVector_front(self)

    def back(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _IMUSensorBodyMsgPayload.delete_IMUSensorBodyMsgOutMsgsVector

# Register IMUSensorBodyMsgOutMsgsVector in _IMUSensorBodyMsgPayload:
_IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsVector_swigregister(IMUSensorBodyMsgOutMsgsVector)
class IMUSensorBodyMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsPtrVector_swiginit(self, _IMUSensorBodyMsgPayload.new_IMUSensorBodyMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _IMUSensorBodyMsgPayload.delete_IMUSensorBodyMsgOutMsgsPtrVector

# Register IMUSensorBodyMsgOutMsgsPtrVector in _IMUSensorBodyMsgPayload:
_IMUSensorBodyMsgPayload.IMUSensorBodyMsgOutMsgsPtrVector_swigregister(IMUSensorBodyMsgOutMsgsPtrVector)
class IMUSensorBodyMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgInMsgsVector_pop(self)

    def append(self, x):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgInMsgsVector_append(self, x)

    def empty(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgInMsgsVector_empty(self)

    def size(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgInMsgsVector_size(self)

    def swap(self, v):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgInMsgsVector_begin(self)

    def end(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgInMsgsVector_end(self)

    def rbegin(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgInMsgsVector_rend(self)

    def clear(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _IMUSensorBodyMsgPayload.IMUSensorBodyMsgInMsgsVector_swiginit(self, _IMUSensorBodyMsgPayload.new_IMUSensorBodyMsgInMsgsVector(*args))

    def push_back(self, x):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgInMsgsVector_front(self)

    def back(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _IMUSensorBodyMsgPayload.delete_IMUSensorBodyMsgInMsgsVector

# Register IMUSensorBodyMsgInMsgsVector in _IMUSensorBodyMsgPayload:
_IMUSensorBodyMsgPayload.IMUSensorBodyMsgInMsgsVector_swigregister(IMUSensorBodyMsgInMsgsVector)
class IMUSensorBodyMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_IMUSensorBodyMsgPayload.IMUSensorBodyMsg_C_header_get, _IMUSensorBodyMsgPayload.IMUSensorBodyMsg_C_header_set)
    payload = property(_IMUSensorBodyMsgPayload.IMUSensorBodyMsg_C_payload_get, _IMUSensorBodyMsgPayload.IMUSensorBodyMsg_C_payload_set)
    payloadPointer = property(_IMUSensorBodyMsgPayload.IMUSensorBodyMsg_C_payloadPointer_get, _IMUSensorBodyMsgPayload.IMUSensorBodyMsg_C_payloadPointer_set)
    headerPointer = property(_IMUSensorBodyMsgPayload.IMUSensorBodyMsg_C_headerPointer_get, _IMUSensorBodyMsgPayload.IMUSensorBodyMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _IMUSensorBodyMsgPayload.IMUSensorBodyMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import IMUSensorBodyMsg
        if type(source) == type(self):
            IMUSensorBodyMsg_C_subscribe(self, source)
        elif type(source) == IMUSensorBodyMsg:
            IMUSensorBodyMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            IMUSensorBodyMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe IMUSensorBodyMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        IMUSensorBodyMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import IMUSensorBodyMsg
        if type(source) == type(self):
            return (IMUSensorBodyMsg_C_isSubscribedTo(self, source))
        elif type(source) == IMUSensorBodyMsg:
            return (IMUSensorBodyMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (IMUSensorBodyMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        IMUSensorBodyMsg_C_addAuthor(self, self)
        if data:
            IMUSensorBodyMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        IMUSensorBodyMsg_C_addAuthor(self, self)
        IMUSensorBodyMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return IMUSensorBodyMsg_C_read(self)


    def __init__(self):
        _IMUSensorBodyMsgPayload.IMUSensorBodyMsg_C_swiginit(self, _IMUSensorBodyMsgPayload.new_IMUSensorBodyMsg_C())
    __swig_destroy__ = _IMUSensorBodyMsgPayload.delete_IMUSensorBodyMsg_C

# Register IMUSensorBodyMsg_C in _IMUSensorBodyMsgPayload:
_IMUSensorBodyMsgPayload.IMUSensorBodyMsg_C_swigregister(IMUSensorBodyMsg_C)

def IMUSensorBodyMsg_cpp_subscribe(subscriber, source):
    return _IMUSensorBodyMsgPayload.IMUSensorBodyMsg_cpp_subscribe(subscriber, source)

def IMUSensorBodyMsg_C_subscribe(subscriber, source):
    return _IMUSensorBodyMsgPayload.IMUSensorBodyMsg_C_subscribe(subscriber, source)

def IMUSensorBodyMsg_addr_subscribe(subscriber, sourceAddr):
    return _IMUSensorBodyMsgPayload.IMUSensorBodyMsg_addr_subscribe(subscriber, sourceAddr)

def IMUSensorBodyMsg_unsubscribe(subscriber):
    return _IMUSensorBodyMsgPayload.IMUSensorBodyMsg_unsubscribe(subscriber)

def IMUSensorBodyMsg_C_isSubscribedTo(subscriber, source):
    return _IMUSensorBodyMsgPayload.IMUSensorBodyMsg_C_isSubscribedTo(subscriber, source)

def IMUSensorBodyMsg_cpp_isSubscribedTo(subscriber, source):
    return _IMUSensorBodyMsgPayload.IMUSensorBodyMsg_cpp_isSubscribedTo(subscriber, source)

def IMUSensorBodyMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _IMUSensorBodyMsgPayload.IMUSensorBodyMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def IMUSensorBodyMsg_C_addAuthor(coowner, data):
    return _IMUSensorBodyMsgPayload.IMUSensorBodyMsg_C_addAuthor(coowner, data)

def IMUSensorBodyMsg_C_init(owner):
    return _IMUSensorBodyMsgPayload.IMUSensorBodyMsg_C_init(owner)

def IMUSensorBodyMsg_C_isLinked(data):
    return _IMUSensorBodyMsgPayload.IMUSensorBodyMsg_C_isLinked(data)

def IMUSensorBodyMsg_C_isWritten(data):
    return _IMUSensorBodyMsgPayload.IMUSensorBodyMsg_C_isWritten(data)

def IMUSensorBodyMsg_C_timeWritten(data):
    return _IMUSensorBodyMsgPayload.IMUSensorBodyMsg_C_timeWritten(data)

def IMUSensorBodyMsg_C_moduleID(data):
    return _IMUSensorBodyMsgPayload.IMUSensorBodyMsg_C_moduleID(data)

def IMUSensorBodyMsg_C_write(data, destination, moduleID, callTime):
    return _IMUSensorBodyMsgPayload.IMUSensorBodyMsg_C_write(data, destination, moduleID, callTime)

def IMUSensorBodyMsg_C_read(source):
    return _IMUSensorBodyMsgPayload.IMUSensorBodyMsg_C_read(source)

def IMUSensorBodyMsg_C_zeroMsgPayload():
    return _IMUSensorBodyMsgPayload.IMUSensorBodyMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_IMUSensorBodyMsgPayload.MsgHeader_isLinked_get, _IMUSensorBodyMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_IMUSensorBodyMsgPayload.MsgHeader_isWritten_get, _IMUSensorBodyMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_IMUSensorBodyMsgPayload.MsgHeader_timeWritten_get, _IMUSensorBodyMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_IMUSensorBodyMsgPayload.MsgHeader_moduleID_get, _IMUSensorBodyMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _IMUSensorBodyMsgPayload.MsgHeader_swiginit(self, _IMUSensorBodyMsgPayload.new_MsgHeader())
    __swig_destroy__ = _IMUSensorBodyMsgPayload.delete_MsgHeader

# Register MsgHeader in _IMUSensorBodyMsgPayload:
_IMUSensorBodyMsgPayload.MsgHeader_swigregister(MsgHeader)

