# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _OpNavCirclesMsgPayload
else:
    import _OpNavCirclesMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _OpNavCirclesMsgPayload.delete_SwigPyIterator

    def value(self):
        return _OpNavCirclesMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _OpNavCirclesMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _OpNavCirclesMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _OpNavCirclesMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _OpNavCirclesMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _OpNavCirclesMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _OpNavCirclesMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _OpNavCirclesMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _OpNavCirclesMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _OpNavCirclesMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _OpNavCirclesMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _OpNavCirclesMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _OpNavCirclesMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _OpNavCirclesMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _OpNavCirclesMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _OpNavCirclesMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _OpNavCirclesMsgPayload:
_OpNavCirclesMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _OpNavCirclesMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _OpNavCirclesMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _OpNavCirclesMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _OpNavCirclesMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _OpNavCirclesMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _OpNavCirclesMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _OpNavCirclesMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _OpNavCirclesMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _OpNavCirclesMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _OpNavCirclesMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _OpNavCirclesMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _OpNavCirclesMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _OpNavCirclesMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _OpNavCirclesMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _OpNavCirclesMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _OpNavCirclesMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _OpNavCirclesMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OpNavCirclesMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _OpNavCirclesMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _OpNavCirclesMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _OpNavCirclesMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OpNavCirclesMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OpNavCirclesMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OpNavCirclesMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OpNavCirclesMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OpNavCirclesMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _OpNavCirclesMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _OpNavCirclesMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _OpNavCirclesMsgPayload.TimeVector_empty(self)

    def size(self):
        return _OpNavCirclesMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _OpNavCirclesMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _OpNavCirclesMsgPayload.TimeVector_begin(self)

    def end(self):
        return _OpNavCirclesMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _OpNavCirclesMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _OpNavCirclesMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _OpNavCirclesMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _OpNavCirclesMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _OpNavCirclesMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _OpNavCirclesMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _OpNavCirclesMsgPayload.TimeVector_swiginit(self, _OpNavCirclesMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _OpNavCirclesMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _OpNavCirclesMsgPayload.TimeVector_front(self)

    def back(self):
        return _OpNavCirclesMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _OpNavCirclesMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _OpNavCirclesMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _OpNavCirclesMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _OpNavCirclesMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _OpNavCirclesMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _OpNavCirclesMsgPayload.delete_TimeVector

# Register TimeVector in _OpNavCirclesMsgPayload:
_OpNavCirclesMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _OpNavCirclesMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OpNavCirclesMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _OpNavCirclesMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _OpNavCirclesMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _OpNavCirclesMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OpNavCirclesMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OpNavCirclesMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OpNavCirclesMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OpNavCirclesMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OpNavCirclesMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _OpNavCirclesMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _OpNavCirclesMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _OpNavCirclesMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _OpNavCirclesMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _OpNavCirclesMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _OpNavCirclesMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _OpNavCirclesMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _OpNavCirclesMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _OpNavCirclesMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _OpNavCirclesMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _OpNavCirclesMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _OpNavCirclesMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _OpNavCirclesMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _OpNavCirclesMsgPayload.DoubleVector_swiginit(self, _OpNavCirclesMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _OpNavCirclesMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _OpNavCirclesMsgPayload.DoubleVector_front(self)

    def back(self):
        return _OpNavCirclesMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _OpNavCirclesMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _OpNavCirclesMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _OpNavCirclesMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _OpNavCirclesMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _OpNavCirclesMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _OpNavCirclesMsgPayload.delete_DoubleVector

# Register DoubleVector in _OpNavCirclesMsgPayload:
_OpNavCirclesMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _OpNavCirclesMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OpNavCirclesMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _OpNavCirclesMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _OpNavCirclesMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _OpNavCirclesMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OpNavCirclesMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OpNavCirclesMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OpNavCirclesMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OpNavCirclesMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OpNavCirclesMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _OpNavCirclesMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _OpNavCirclesMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _OpNavCirclesMsgPayload.StringVector_empty(self)

    def size(self):
        return _OpNavCirclesMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _OpNavCirclesMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _OpNavCirclesMsgPayload.StringVector_begin(self)

    def end(self):
        return _OpNavCirclesMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _OpNavCirclesMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _OpNavCirclesMsgPayload.StringVector_rend(self)

    def clear(self):
        return _OpNavCirclesMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _OpNavCirclesMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _OpNavCirclesMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _OpNavCirclesMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _OpNavCirclesMsgPayload.StringVector_swiginit(self, _OpNavCirclesMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _OpNavCirclesMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _OpNavCirclesMsgPayload.StringVector_front(self)

    def back(self):
        return _OpNavCirclesMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _OpNavCirclesMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _OpNavCirclesMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _OpNavCirclesMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _OpNavCirclesMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _OpNavCirclesMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _OpNavCirclesMsgPayload.delete_StringVector

# Register StringVector in _OpNavCirclesMsgPayload:
_OpNavCirclesMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _OpNavCirclesMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _OpNavCirclesMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _OpNavCirclesMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _OpNavCirclesMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _OpNavCirclesMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _OpNavCirclesMsgPayload.NANO2SEC
SEC2NANO = _OpNavCirclesMsgPayload.SEC2NANO
SEC2HOUR = _OpNavCirclesMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _OpNavCirclesMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _OpNavCirclesMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _OpNavCirclesMsgPayload.secToNano(seconds)
BOOL_FALSE = _OpNavCirclesMsgPayload.BOOL_FALSE
BOOL_TRUE = _OpNavCirclesMsgPayload.BOOL_TRUE
AVAILABLE = _OpNavCirclesMsgPayload.AVAILABLE
UNAVAILABLE = _OpNavCirclesMsgPayload.UNAVAILABLE
BalancedWheels = _OpNavCirclesMsgPayload.BalancedWheels
JitterSimple = _OpNavCirclesMsgPayload.JitterSimple
JitterFullyCoupled = _OpNavCirclesMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _OpNavCirclesMsgPayload.SysModel_swiginit(self, _OpNavCirclesMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _OpNavCirclesMsgPayload.delete_SysModel

    def SelfInit(self):
        return _OpNavCirclesMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _OpNavCirclesMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _OpNavCirclesMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _OpNavCirclesMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_OpNavCirclesMsgPayload.SysModel_ModelTag_get, _OpNavCirclesMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_OpNavCirclesMsgPayload.SysModel_CallCounts_get, _OpNavCirclesMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_OpNavCirclesMsgPayload.SysModel_RNGSeed_get, _OpNavCirclesMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_OpNavCirclesMsgPayload.SysModel_moduleID_get, _OpNavCirclesMsgPayload.SysModel_moduleID_set)

# Register SysModel in _OpNavCirclesMsgPayload:
_OpNavCirclesMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _OpNavCirclesMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _OpNavCirclesMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _OpNavCirclesMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _OpNavCirclesMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _OpNavCirclesMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _OpNavCirclesMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _OpNavCirclesMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _OpNavCirclesMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _OpNavCirclesMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _OpNavCirclesMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _OpNavCirclesMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _OpNavCirclesMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class OpNavCirclesMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timeTag = property(_OpNavCirclesMsgPayload.OpNavCirclesMsgPayload_timeTag_get, _OpNavCirclesMsgPayload.OpNavCirclesMsgPayload_timeTag_set)
    valid = property(_OpNavCirclesMsgPayload.OpNavCirclesMsgPayload_valid_get, _OpNavCirclesMsgPayload.OpNavCirclesMsgPayload_valid_set)
    cameraID = property(_OpNavCirclesMsgPayload.OpNavCirclesMsgPayload_cameraID_get, _OpNavCirclesMsgPayload.OpNavCirclesMsgPayload_cameraID_set)
    planetIds = property(_OpNavCirclesMsgPayload.OpNavCirclesMsgPayload_planetIds_get, _OpNavCirclesMsgPayload.OpNavCirclesMsgPayload_planetIds_set)
    circlesCenters = property(_OpNavCirclesMsgPayload.OpNavCirclesMsgPayload_circlesCenters_get, _OpNavCirclesMsgPayload.OpNavCirclesMsgPayload_circlesCenters_set)
    circlesRadii = property(_OpNavCirclesMsgPayload.OpNavCirclesMsgPayload_circlesRadii_get, _OpNavCirclesMsgPayload.OpNavCirclesMsgPayload_circlesRadii_set)
    uncertainty = property(_OpNavCirclesMsgPayload.OpNavCirclesMsgPayload_uncertainty_get, _OpNavCirclesMsgPayload.OpNavCirclesMsgPayload_uncertainty_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _OpNavCirclesMsgPayload.OpNavCirclesMsgPayload_swiginit(self, _OpNavCirclesMsgPayload.new_OpNavCirclesMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _OpNavCirclesMsgPayload.delete_OpNavCirclesMsgPayload

# Register OpNavCirclesMsgPayload in _OpNavCirclesMsgPayload:
_OpNavCirclesMsgPayload.OpNavCirclesMsgPayload_swigregister(OpNavCirclesMsgPayload)

def _pprint_OpNavCirclesMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[OpNavCirclesMsgPayload.__repr__] = _pprint_OpNavCirclesMsgPayload

class OpNavCirclesMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_OpNavCirclesMsgPayload.OpNavCirclesMsgReader_bskLogger_get, _OpNavCirclesMsgPayload.OpNavCirclesMsgReader_bskLogger_set)
    zeroMsgPayload = property(_OpNavCirclesMsgPayload.OpNavCirclesMsgReader_zeroMsgPayload_get, _OpNavCirclesMsgPayload.OpNavCirclesMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _OpNavCirclesMsgPayload.OpNavCirclesMsgReader_swiginit(self, _OpNavCirclesMsgPayload.new_OpNavCirclesMsgReader(*args))

    def __call__(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgReader___call__(self)

    def isLinked(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgReader_isLinked(self)

    def isWritten(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgReader_isWritten(self)

    def timeWritten(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgReader_timeWritten(self)

    def moduleID(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == OpNavCirclesMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.OpNavCirclesMsgPayload import OpNavCirclesMsg_C
            if type(source) == OpNavCirclesMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<OpNavCirclesMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == OpNavCirclesMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.OpNavCirclesMsgPayload import OpNavCirclesMsg_C
        except ImportError:
            return 0

        if type(source) == OpNavCirclesMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _OpNavCirclesMsgPayload.delete_OpNavCirclesMsgReader

# Register OpNavCirclesMsgReader in _OpNavCirclesMsgPayload:
_OpNavCirclesMsgPayload.OpNavCirclesMsgReader_swigregister(OpNavCirclesMsgReader)
class OpNavCirclesMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _OpNavCirclesMsgPayload.OpNavCirclesMsgWriter_swiginit(self, _OpNavCirclesMsgPayload.new_OpNavCirclesMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _OpNavCirclesMsgPayload.delete_OpNavCirclesMsgWriter

# Register OpNavCirclesMsgWriter in _OpNavCirclesMsgPayload:
_OpNavCirclesMsgPayload.OpNavCirclesMsgWriter_swigregister(OpNavCirclesMsgWriter)
class OpNavCirclesMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_OpNavCirclesMsgPayload.OpNavCirclesMsg_write_get, _OpNavCirclesMsgPayload.OpNavCirclesMsg_write_set)

    def addSubscriber(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsg_addSubscriber(self)

    def addAuthor(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_OpNavCirclesMsgPayload.OpNavCirclesMsg_zeroMsgPayload_get, _OpNavCirclesMsgPayload.OpNavCirclesMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsg_isLinked(self)

    def getPayloadSize(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _OpNavCirclesMsgPayload.OpNavCirclesMsg_swiginit(self, _OpNavCirclesMsgPayload.new_OpNavCirclesMsg())
    __swig_destroy__ = _OpNavCirclesMsgPayload.delete_OpNavCirclesMsg

# Register OpNavCirclesMsg in _OpNavCirclesMsgPayload:
_OpNavCirclesMsgPayload.OpNavCirclesMsg_swigregister(OpNavCirclesMsg)
class OpNavCirclesMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _OpNavCirclesMsgPayload.OpNavCirclesMsgRecorder_swiginit(self, _OpNavCirclesMsgPayload.new_OpNavCirclesMsgRecorder(*args))
    __swig_destroy__ = _OpNavCirclesMsgPayload.delete_OpNavCirclesMsgRecorder

    def SelfInit(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgRecorder___record_vector(self)

    def size(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgRecorder_clear(self)
    bskLogger = property(_OpNavCirclesMsgPayload.OpNavCirclesMsgRecorder_bskLogger_get, _OpNavCirclesMsgPayload.OpNavCirclesMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgRecorder_updateTimeInterval(self, timeDiff)

    def _timeTag_array(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgRecorder__timeTag_array(self)

    @property
    def timeTag(self):
        return self._timeTag_array()


    def _valid_array(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgRecorder__valid_array(self)

    @property
    def valid(self):
        return self._valid_array()


    def _cameraID_array(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgRecorder__cameraID_array(self)

    @property
    def cameraID(self):
        return self._cameraID_array()


    def _planetIds_array(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgRecorder__planetIds_array(self)

    @property
    def planetIds(self):
        return self._planetIds_array()


    def _circlesCenters_array(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgRecorder__circlesCenters_array(self)

    @property
    def circlesCenters(self):
        return self._circlesCenters_array()


    def _circlesRadii_array(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgRecorder__circlesRadii_array(self)

    @property
    def circlesRadii(self):
        return self._circlesRadii_array()


    def _uncertainty_array(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgRecorder__uncertainty_array(self)

    @property
    def uncertainty(self):
        return self._uncertainty_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register OpNavCirclesMsgRecorder in _OpNavCirclesMsgPayload:
_OpNavCirclesMsgPayload.OpNavCirclesMsgRecorder_swigregister(OpNavCirclesMsgRecorder)
class OpNavCirclesMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgPayloadVector___bool__(self)

    def __len__(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgPayloadVector_pop(self)

    def append(self, x):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgPayloadVector_append(self, x)

    def empty(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgPayloadVector_empty(self)

    def size(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgPayloadVector_size(self)

    def swap(self, v):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgPayloadVector_swap(self, v)

    def begin(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgPayloadVector_begin(self)

    def end(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgPayloadVector_end(self)

    def rbegin(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgPayloadVector_rbegin(self)

    def rend(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgPayloadVector_rend(self)

    def clear(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _OpNavCirclesMsgPayload.OpNavCirclesMsgPayloadVector_swiginit(self, _OpNavCirclesMsgPayload.new_OpNavCirclesMsgPayloadVector(*args))

    def push_back(self, x):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgPayloadVector_push_back(self, x)

    def front(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgPayloadVector_front(self)

    def back(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgPayloadVector_capacity(self)

    def get_all(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _OpNavCirclesMsgPayload.delete_OpNavCirclesMsgPayloadVector

# Register OpNavCirclesMsgPayloadVector in _OpNavCirclesMsgPayload:
_OpNavCirclesMsgPayload.OpNavCirclesMsgPayloadVector_swigregister(OpNavCirclesMsgPayloadVector)
class OpNavCirclesMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsVector_empty(self)

    def size(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsVector_begin(self)

    def end(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsVector_rend(self)

    def clear(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsVector_swiginit(self, _OpNavCirclesMsgPayload.new_OpNavCirclesMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsVector_front(self)

    def back(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _OpNavCirclesMsgPayload.delete_OpNavCirclesMsgOutMsgsVector

# Register OpNavCirclesMsgOutMsgsVector in _OpNavCirclesMsgPayload:
_OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsVector_swigregister(OpNavCirclesMsgOutMsgsVector)
class OpNavCirclesMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsPtrVector_swiginit(self, _OpNavCirclesMsgPayload.new_OpNavCirclesMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _OpNavCirclesMsgPayload.delete_OpNavCirclesMsgOutMsgsPtrVector

# Register OpNavCirclesMsgOutMsgsPtrVector in _OpNavCirclesMsgPayload:
_OpNavCirclesMsgPayload.OpNavCirclesMsgOutMsgsPtrVector_swigregister(OpNavCirclesMsgOutMsgsPtrVector)
class OpNavCirclesMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgInMsgsVector_pop(self)

    def append(self, x):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgInMsgsVector_append(self, x)

    def empty(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgInMsgsVector_empty(self)

    def size(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgInMsgsVector_size(self)

    def swap(self, v):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgInMsgsVector_begin(self)

    def end(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgInMsgsVector_end(self)

    def rbegin(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgInMsgsVector_rend(self)

    def clear(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _OpNavCirclesMsgPayload.OpNavCirclesMsgInMsgsVector_swiginit(self, _OpNavCirclesMsgPayload.new_OpNavCirclesMsgInMsgsVector(*args))

    def push_back(self, x):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgInMsgsVector_front(self)

    def back(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _OpNavCirclesMsgPayload.delete_OpNavCirclesMsgInMsgsVector

# Register OpNavCirclesMsgInMsgsVector in _OpNavCirclesMsgPayload:
_OpNavCirclesMsgPayload.OpNavCirclesMsgInMsgsVector_swigregister(OpNavCirclesMsgInMsgsVector)
class OpNavCirclesMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_OpNavCirclesMsgPayload.OpNavCirclesMsg_C_header_get, _OpNavCirclesMsgPayload.OpNavCirclesMsg_C_header_set)
    payload = property(_OpNavCirclesMsgPayload.OpNavCirclesMsg_C_payload_get, _OpNavCirclesMsgPayload.OpNavCirclesMsg_C_payload_set)
    payloadPointer = property(_OpNavCirclesMsgPayload.OpNavCirclesMsg_C_payloadPointer_get, _OpNavCirclesMsgPayload.OpNavCirclesMsg_C_payloadPointer_set)
    headerPointer = property(_OpNavCirclesMsgPayload.OpNavCirclesMsg_C_headerPointer_get, _OpNavCirclesMsgPayload.OpNavCirclesMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _OpNavCirclesMsgPayload.OpNavCirclesMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import OpNavCirclesMsg
        if type(source) == type(self):
            OpNavCirclesMsg_C_subscribe(self, source)
        elif type(source) == OpNavCirclesMsg:
            OpNavCirclesMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            OpNavCirclesMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe OpNavCirclesMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        OpNavCirclesMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import OpNavCirclesMsg
        if type(source) == type(self):
            return (OpNavCirclesMsg_C_isSubscribedTo(self, source))
        elif type(source) == OpNavCirclesMsg:
            return (OpNavCirclesMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (OpNavCirclesMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        OpNavCirclesMsg_C_addAuthor(self, self)
        if data:
            OpNavCirclesMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        OpNavCirclesMsg_C_addAuthor(self, self)
        OpNavCirclesMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return OpNavCirclesMsg_C_read(self)


    def __init__(self):
        _OpNavCirclesMsgPayload.OpNavCirclesMsg_C_swiginit(self, _OpNavCirclesMsgPayload.new_OpNavCirclesMsg_C())
    __swig_destroy__ = _OpNavCirclesMsgPayload.delete_OpNavCirclesMsg_C

# Register OpNavCirclesMsg_C in _OpNavCirclesMsgPayload:
_OpNavCirclesMsgPayload.OpNavCirclesMsg_C_swigregister(OpNavCirclesMsg_C)

def OpNavCirclesMsg_cpp_subscribe(subscriber, source):
    return _OpNavCirclesMsgPayload.OpNavCirclesMsg_cpp_subscribe(subscriber, source)

def OpNavCirclesMsg_C_subscribe(subscriber, source):
    return _OpNavCirclesMsgPayload.OpNavCirclesMsg_C_subscribe(subscriber, source)

def OpNavCirclesMsg_addr_subscribe(subscriber, sourceAddr):
    return _OpNavCirclesMsgPayload.OpNavCirclesMsg_addr_subscribe(subscriber, sourceAddr)

def OpNavCirclesMsg_unsubscribe(subscriber):
    return _OpNavCirclesMsgPayload.OpNavCirclesMsg_unsubscribe(subscriber)

def OpNavCirclesMsg_C_isSubscribedTo(subscriber, source):
    return _OpNavCirclesMsgPayload.OpNavCirclesMsg_C_isSubscribedTo(subscriber, source)

def OpNavCirclesMsg_cpp_isSubscribedTo(subscriber, source):
    return _OpNavCirclesMsgPayload.OpNavCirclesMsg_cpp_isSubscribedTo(subscriber, source)

def OpNavCirclesMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _OpNavCirclesMsgPayload.OpNavCirclesMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def OpNavCirclesMsg_C_addAuthor(coowner, data):
    return _OpNavCirclesMsgPayload.OpNavCirclesMsg_C_addAuthor(coowner, data)

def OpNavCirclesMsg_C_init(owner):
    return _OpNavCirclesMsgPayload.OpNavCirclesMsg_C_init(owner)

def OpNavCirclesMsg_C_isLinked(data):
    return _OpNavCirclesMsgPayload.OpNavCirclesMsg_C_isLinked(data)

def OpNavCirclesMsg_C_isWritten(data):
    return _OpNavCirclesMsgPayload.OpNavCirclesMsg_C_isWritten(data)

def OpNavCirclesMsg_C_timeWritten(data):
    return _OpNavCirclesMsgPayload.OpNavCirclesMsg_C_timeWritten(data)

def OpNavCirclesMsg_C_moduleID(data):
    return _OpNavCirclesMsgPayload.OpNavCirclesMsg_C_moduleID(data)

def OpNavCirclesMsg_C_write(data, destination, moduleID, callTime):
    return _OpNavCirclesMsgPayload.OpNavCirclesMsg_C_write(data, destination, moduleID, callTime)

def OpNavCirclesMsg_C_read(source):
    return _OpNavCirclesMsgPayload.OpNavCirclesMsg_C_read(source)

def OpNavCirclesMsg_C_zeroMsgPayload():
    return _OpNavCirclesMsgPayload.OpNavCirclesMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_OpNavCirclesMsgPayload.MsgHeader_isLinked_get, _OpNavCirclesMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_OpNavCirclesMsgPayload.MsgHeader_isWritten_get, _OpNavCirclesMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_OpNavCirclesMsgPayload.MsgHeader_timeWritten_get, _OpNavCirclesMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_OpNavCirclesMsgPayload.MsgHeader_moduleID_get, _OpNavCirclesMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _OpNavCirclesMsgPayload.MsgHeader_swiginit(self, _OpNavCirclesMsgPayload.new_MsgHeader())
    __swig_destroy__ = _OpNavCirclesMsgPayload.delete_MsgHeader

# Register MsgHeader in _OpNavCirclesMsgPayload:
_OpNavCirclesMsgPayload.MsgHeader_swigregister(MsgHeader)

