# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _VSCMGArrayConfigMsgPayload
else:
    import _VSCMGArrayConfigMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VSCMGArrayConfigMsgPayload.delete_SwigPyIterator

    def value(self):
        return _VSCMGArrayConfigMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VSCMGArrayConfigMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VSCMGArrayConfigMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VSCMGArrayConfigMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VSCMGArrayConfigMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VSCMGArrayConfigMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _VSCMGArrayConfigMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _VSCMGArrayConfigMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _VSCMGArrayConfigMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VSCMGArrayConfigMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VSCMGArrayConfigMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VSCMGArrayConfigMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VSCMGArrayConfigMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VSCMGArrayConfigMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VSCMGArrayConfigMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VSCMGArrayConfigMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _VSCMGArrayConfigMsgPayload:
_VSCMGArrayConfigMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _VSCMGArrayConfigMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _VSCMGArrayConfigMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _VSCMGArrayConfigMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _VSCMGArrayConfigMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _VSCMGArrayConfigMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _VSCMGArrayConfigMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _VSCMGArrayConfigMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _VSCMGArrayConfigMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _VSCMGArrayConfigMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _VSCMGArrayConfigMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _VSCMGArrayConfigMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _VSCMGArrayConfigMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _VSCMGArrayConfigMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _VSCMGArrayConfigMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _VSCMGArrayConfigMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _VSCMGArrayConfigMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGArrayConfigMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGArrayConfigMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGArrayConfigMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _VSCMGArrayConfigMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGArrayConfigMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGArrayConfigMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGArrayConfigMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGArrayConfigMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGArrayConfigMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGArrayConfigMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGArrayConfigMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _VSCMGArrayConfigMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _VSCMGArrayConfigMsgPayload.TimeVector_empty(self)

    def size(self):
        return _VSCMGArrayConfigMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _VSCMGArrayConfigMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _VSCMGArrayConfigMsgPayload.TimeVector_begin(self)

    def end(self):
        return _VSCMGArrayConfigMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _VSCMGArrayConfigMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _VSCMGArrayConfigMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _VSCMGArrayConfigMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _VSCMGArrayConfigMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGArrayConfigMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGArrayConfigMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGArrayConfigMsgPayload.TimeVector_swiginit(self, _VSCMGArrayConfigMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _VSCMGArrayConfigMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _VSCMGArrayConfigMsgPayload.TimeVector_front(self)

    def back(self):
        return _VSCMGArrayConfigMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _VSCMGArrayConfigMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGArrayConfigMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGArrayConfigMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGArrayConfigMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _VSCMGArrayConfigMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _VSCMGArrayConfigMsgPayload.delete_TimeVector

# Register TimeVector in _VSCMGArrayConfigMsgPayload:
_VSCMGArrayConfigMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGArrayConfigMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGArrayConfigMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGArrayConfigMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _VSCMGArrayConfigMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGArrayConfigMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGArrayConfigMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGArrayConfigMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGArrayConfigMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGArrayConfigMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGArrayConfigMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGArrayConfigMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _VSCMGArrayConfigMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _VSCMGArrayConfigMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _VSCMGArrayConfigMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _VSCMGArrayConfigMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _VSCMGArrayConfigMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _VSCMGArrayConfigMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _VSCMGArrayConfigMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _VSCMGArrayConfigMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _VSCMGArrayConfigMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _VSCMGArrayConfigMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGArrayConfigMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGArrayConfigMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGArrayConfigMsgPayload.DoubleVector_swiginit(self, _VSCMGArrayConfigMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _VSCMGArrayConfigMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _VSCMGArrayConfigMsgPayload.DoubleVector_front(self)

    def back(self):
        return _VSCMGArrayConfigMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _VSCMGArrayConfigMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGArrayConfigMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGArrayConfigMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGArrayConfigMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _VSCMGArrayConfigMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _VSCMGArrayConfigMsgPayload.delete_DoubleVector

# Register DoubleVector in _VSCMGArrayConfigMsgPayload:
_VSCMGArrayConfigMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGArrayConfigMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGArrayConfigMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGArrayConfigMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _VSCMGArrayConfigMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGArrayConfigMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGArrayConfigMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGArrayConfigMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGArrayConfigMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGArrayConfigMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGArrayConfigMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGArrayConfigMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _VSCMGArrayConfigMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _VSCMGArrayConfigMsgPayload.StringVector_empty(self)

    def size(self):
        return _VSCMGArrayConfigMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _VSCMGArrayConfigMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _VSCMGArrayConfigMsgPayload.StringVector_begin(self)

    def end(self):
        return _VSCMGArrayConfigMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _VSCMGArrayConfigMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _VSCMGArrayConfigMsgPayload.StringVector_rend(self)

    def clear(self):
        return _VSCMGArrayConfigMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _VSCMGArrayConfigMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGArrayConfigMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGArrayConfigMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGArrayConfigMsgPayload.StringVector_swiginit(self, _VSCMGArrayConfigMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _VSCMGArrayConfigMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _VSCMGArrayConfigMsgPayload.StringVector_front(self)

    def back(self):
        return _VSCMGArrayConfigMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _VSCMGArrayConfigMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGArrayConfigMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGArrayConfigMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGArrayConfigMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _VSCMGArrayConfigMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _VSCMGArrayConfigMsgPayload.delete_StringVector

# Register StringVector in _VSCMGArrayConfigMsgPayload:
_VSCMGArrayConfigMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _VSCMGArrayConfigMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _VSCMGArrayConfigMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _VSCMGArrayConfigMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _VSCMGArrayConfigMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _VSCMGArrayConfigMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _VSCMGArrayConfigMsgPayload.NANO2SEC
SEC2NANO = _VSCMGArrayConfigMsgPayload.SEC2NANO
SEC2HOUR = _VSCMGArrayConfigMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _VSCMGArrayConfigMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _VSCMGArrayConfigMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _VSCMGArrayConfigMsgPayload.secToNano(seconds)
BOOL_FALSE = _VSCMGArrayConfigMsgPayload.BOOL_FALSE
BOOL_TRUE = _VSCMGArrayConfigMsgPayload.BOOL_TRUE
AVAILABLE = _VSCMGArrayConfigMsgPayload.AVAILABLE
UNAVAILABLE = _VSCMGArrayConfigMsgPayload.UNAVAILABLE
BalancedWheels = _VSCMGArrayConfigMsgPayload.BalancedWheels
JitterSimple = _VSCMGArrayConfigMsgPayload.JitterSimple
JitterFullyCoupled = _VSCMGArrayConfigMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VSCMGArrayConfigMsgPayload.SysModel_swiginit(self, _VSCMGArrayConfigMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _VSCMGArrayConfigMsgPayload.delete_SysModel

    def SelfInit(self):
        return _VSCMGArrayConfigMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _VSCMGArrayConfigMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _VSCMGArrayConfigMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _VSCMGArrayConfigMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_VSCMGArrayConfigMsgPayload.SysModel_ModelTag_get, _VSCMGArrayConfigMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_VSCMGArrayConfigMsgPayload.SysModel_CallCounts_get, _VSCMGArrayConfigMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_VSCMGArrayConfigMsgPayload.SysModel_RNGSeed_get, _VSCMGArrayConfigMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_VSCMGArrayConfigMsgPayload.SysModel_moduleID_get, _VSCMGArrayConfigMsgPayload.SysModel_moduleID_set)

# Register SysModel in _VSCMGArrayConfigMsgPayload:
_VSCMGArrayConfigMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _VSCMGArrayConfigMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _VSCMGArrayConfigMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _VSCMGArrayConfigMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _VSCMGArrayConfigMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _VSCMGArrayConfigMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _VSCMGArrayConfigMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _VSCMGArrayConfigMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _VSCMGArrayConfigMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _VSCMGArrayConfigMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _VSCMGArrayConfigMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _VSCMGArrayConfigMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _VSCMGArrayConfigMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class VSCMGArrayConfigMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Gs0Matrix_B = property(_VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayload_Gs0Matrix_B_get, _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayload_Gs0Matrix_B_set)
    Gt0Matrix_B = property(_VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayload_Gt0Matrix_B_get, _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayload_Gt0Matrix_B_set)
    GgMatrix_B = property(_VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayload_GgMatrix_B_get, _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayload_GgMatrix_B_set)
    JsList = property(_VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayload_JsList_get, _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayload_JsList_set)
    JtList = property(_VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayload_JtList_get, _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayload_JtList_set)
    JgList = property(_VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayload_JgList_get, _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayload_JgList_set)
    IwsList = property(_VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayload_IwsList_get, _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayload_IwsList_set)
    Omega0List = property(_VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayload_Omega0List_get, _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayload_Omega0List_set)
    gamma0List = property(_VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayload_gamma0List_get, _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayload_gamma0List_set)
    gammaDot0List = property(_VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayload_gammaDot0List_get, _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayload_gammaDot0List_set)
    numVSCMG = property(_VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayload_numVSCMG_get, _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayload_numVSCMG_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayload_swiginit(self, _VSCMGArrayConfigMsgPayload.new_VSCMGArrayConfigMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _VSCMGArrayConfigMsgPayload.delete_VSCMGArrayConfigMsgPayload

# Register VSCMGArrayConfigMsgPayload in _VSCMGArrayConfigMsgPayload:
_VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayload_swigregister(VSCMGArrayConfigMsgPayload)

def _pprint_VSCMGArrayConfigMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[VSCMGArrayConfigMsgPayload.__repr__] = _pprint_VSCMGArrayConfigMsgPayload

class VSCMGArrayConfigMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgReader_bskLogger_get, _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgReader_bskLogger_set)
    zeroMsgPayload = property(_VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgReader_zeroMsgPayload_get, _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgReader_swiginit(self, _VSCMGArrayConfigMsgPayload.new_VSCMGArrayConfigMsgReader(*args))

    def __call__(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgReader___call__(self)

    def isLinked(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgReader_isLinked(self)

    def isWritten(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgReader_isWritten(self)

    def timeWritten(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgReader_timeWritten(self)

    def moduleID(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == VSCMGArrayConfigMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.VSCMGArrayConfigMsgPayload import VSCMGArrayConfigMsg_C
            if type(source) == VSCMGArrayConfigMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<VSCMGArrayConfigMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == VSCMGArrayConfigMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.VSCMGArrayConfigMsgPayload import VSCMGArrayConfigMsg_C
        except ImportError:
            return 0

        if type(source) == VSCMGArrayConfigMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _VSCMGArrayConfigMsgPayload.delete_VSCMGArrayConfigMsgReader

# Register VSCMGArrayConfigMsgReader in _VSCMGArrayConfigMsgPayload:
_VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgReader_swigregister(VSCMGArrayConfigMsgReader)
class VSCMGArrayConfigMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgWriter_swiginit(self, _VSCMGArrayConfigMsgPayload.new_VSCMGArrayConfigMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _VSCMGArrayConfigMsgPayload.delete_VSCMGArrayConfigMsgWriter

# Register VSCMGArrayConfigMsgWriter in _VSCMGArrayConfigMsgPayload:
_VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgWriter_swigregister(VSCMGArrayConfigMsgWriter)
class VSCMGArrayConfigMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_write_get, _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_write_set)

    def addSubscriber(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_addSubscriber(self)

    def addAuthor(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_zeroMsgPayload_get, _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_isLinked(self)

    def getPayloadSize(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_swiginit(self, _VSCMGArrayConfigMsgPayload.new_VSCMGArrayConfigMsg())
    __swig_destroy__ = _VSCMGArrayConfigMsgPayload.delete_VSCMGArrayConfigMsg

# Register VSCMGArrayConfigMsg in _VSCMGArrayConfigMsgPayload:
_VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_swigregister(VSCMGArrayConfigMsg)
class VSCMGArrayConfigMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgRecorder_swiginit(self, _VSCMGArrayConfigMsgPayload.new_VSCMGArrayConfigMsgRecorder(*args))
    __swig_destroy__ = _VSCMGArrayConfigMsgPayload.delete_VSCMGArrayConfigMsgRecorder

    def SelfInit(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgRecorder___record_vector(self)

    def size(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgRecorder_clear(self)
    bskLogger = property(_VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgRecorder_bskLogger_get, _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgRecorder_updateTimeInterval(self, timeDiff)

    def _Gs0Matrix_B_array(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgRecorder__Gs0Matrix_B_array(self)

    @property
    def Gs0Matrix_B(self):
        return self._Gs0Matrix_B_array()


    def _Gt0Matrix_B_array(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgRecorder__Gt0Matrix_B_array(self)

    @property
    def Gt0Matrix_B(self):
        return self._Gt0Matrix_B_array()


    def _GgMatrix_B_array(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgRecorder__GgMatrix_B_array(self)

    @property
    def GgMatrix_B(self):
        return self._GgMatrix_B_array()


    def _JsList_array(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgRecorder__JsList_array(self)

    @property
    def JsList(self):
        return self._JsList_array()


    def _JtList_array(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgRecorder__JtList_array(self)

    @property
    def JtList(self):
        return self._JtList_array()


    def _JgList_array(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgRecorder__JgList_array(self)

    @property
    def JgList(self):
        return self._JgList_array()


    def _IwsList_array(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgRecorder__IwsList_array(self)

    @property
    def IwsList(self):
        return self._IwsList_array()


    def _Omega0List_array(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgRecorder__Omega0List_array(self)

    @property
    def Omega0List(self):
        return self._Omega0List_array()


    def _gamma0List_array(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgRecorder__gamma0List_array(self)

    @property
    def gamma0List(self):
        return self._gamma0List_array()


    def _gammaDot0List_array(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgRecorder__gammaDot0List_array(self)

    @property
    def gammaDot0List(self):
        return self._gammaDot0List_array()


    def _numVSCMG_array(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgRecorder__numVSCMG_array(self)

    @property
    def numVSCMG(self):
        return self._numVSCMG_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register VSCMGArrayConfigMsgRecorder in _VSCMGArrayConfigMsgPayload:
_VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgRecorder_swigregister(VSCMGArrayConfigMsgRecorder)
class VSCMGArrayConfigMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayloadVector___bool__(self)

    def __len__(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayloadVector_pop(self)

    def append(self, x):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayloadVector_append(self, x)

    def empty(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayloadVector_empty(self)

    def size(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayloadVector_size(self)

    def swap(self, v):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayloadVector_swap(self, v)

    def begin(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayloadVector_begin(self)

    def end(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayloadVector_end(self)

    def rbegin(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayloadVector_rbegin(self)

    def rend(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayloadVector_rend(self)

    def clear(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayloadVector_swiginit(self, _VSCMGArrayConfigMsgPayload.new_VSCMGArrayConfigMsgPayloadVector(*args))

    def push_back(self, x):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayloadVector_push_back(self, x)

    def front(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayloadVector_front(self)

    def back(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayloadVector_capacity(self)

    def get_all(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _VSCMGArrayConfigMsgPayload.delete_VSCMGArrayConfigMsgPayloadVector

# Register VSCMGArrayConfigMsgPayloadVector in _VSCMGArrayConfigMsgPayload:
_VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgPayloadVector_swigregister(VSCMGArrayConfigMsgPayloadVector)
class VSCMGArrayConfigMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsVector_empty(self)

    def size(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsVector_begin(self)

    def end(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsVector_rend(self)

    def clear(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsVector_swiginit(self, _VSCMGArrayConfigMsgPayload.new_VSCMGArrayConfigMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsVector_front(self)

    def back(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _VSCMGArrayConfigMsgPayload.delete_VSCMGArrayConfigMsgOutMsgsVector

# Register VSCMGArrayConfigMsgOutMsgsVector in _VSCMGArrayConfigMsgPayload:
_VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsVector_swigregister(VSCMGArrayConfigMsgOutMsgsVector)
class VSCMGArrayConfigMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsPtrVector_swiginit(self, _VSCMGArrayConfigMsgPayload.new_VSCMGArrayConfigMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _VSCMGArrayConfigMsgPayload.delete_VSCMGArrayConfigMsgOutMsgsPtrVector

# Register VSCMGArrayConfigMsgOutMsgsPtrVector in _VSCMGArrayConfigMsgPayload:
_VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgOutMsgsPtrVector_swigregister(VSCMGArrayConfigMsgOutMsgsPtrVector)
class VSCMGArrayConfigMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgInMsgsVector_pop(self)

    def append(self, x):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgInMsgsVector_append(self, x)

    def empty(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgInMsgsVector_empty(self)

    def size(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgInMsgsVector_size(self)

    def swap(self, v):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgInMsgsVector_begin(self)

    def end(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgInMsgsVector_end(self)

    def rbegin(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgInMsgsVector_rend(self)

    def clear(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgInMsgsVector_swiginit(self, _VSCMGArrayConfigMsgPayload.new_VSCMGArrayConfigMsgInMsgsVector(*args))

    def push_back(self, x):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgInMsgsVector_front(self)

    def back(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _VSCMGArrayConfigMsgPayload.delete_VSCMGArrayConfigMsgInMsgsVector

# Register VSCMGArrayConfigMsgInMsgsVector in _VSCMGArrayConfigMsgPayload:
_VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsgInMsgsVector_swigregister(VSCMGArrayConfigMsgInMsgsVector)
class VSCMGArrayConfigMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_C_header_get, _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_C_header_set)
    payload = property(_VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_C_payload_get, _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_C_payload_set)
    payloadPointer = property(_VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_C_payloadPointer_get, _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_C_payloadPointer_set)
    headerPointer = property(_VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_C_headerPointer_get, _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import VSCMGArrayConfigMsg
        if type(source) == type(self):
            VSCMGArrayConfigMsg_C_subscribe(self, source)
        elif type(source) == VSCMGArrayConfigMsg:
            VSCMGArrayConfigMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            VSCMGArrayConfigMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe VSCMGArrayConfigMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        VSCMGArrayConfigMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import VSCMGArrayConfigMsg
        if type(source) == type(self):
            return (VSCMGArrayConfigMsg_C_isSubscribedTo(self, source))
        elif type(source) == VSCMGArrayConfigMsg:
            return (VSCMGArrayConfigMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (VSCMGArrayConfigMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        VSCMGArrayConfigMsg_C_addAuthor(self, self)
        if data:
            VSCMGArrayConfigMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        VSCMGArrayConfigMsg_C_addAuthor(self, self)
        VSCMGArrayConfigMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return VSCMGArrayConfigMsg_C_read(self)


    def __init__(self):
        _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_C_swiginit(self, _VSCMGArrayConfigMsgPayload.new_VSCMGArrayConfigMsg_C())
    __swig_destroy__ = _VSCMGArrayConfigMsgPayload.delete_VSCMGArrayConfigMsg_C

# Register VSCMGArrayConfigMsg_C in _VSCMGArrayConfigMsgPayload:
_VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_C_swigregister(VSCMGArrayConfigMsg_C)

def VSCMGArrayConfigMsg_cpp_subscribe(subscriber, source):
    return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_cpp_subscribe(subscriber, source)

def VSCMGArrayConfigMsg_C_subscribe(subscriber, source):
    return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_C_subscribe(subscriber, source)

def VSCMGArrayConfigMsg_addr_subscribe(subscriber, sourceAddr):
    return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_addr_subscribe(subscriber, sourceAddr)

def VSCMGArrayConfigMsg_unsubscribe(subscriber):
    return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_unsubscribe(subscriber)

def VSCMGArrayConfigMsg_C_isSubscribedTo(subscriber, source):
    return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_C_isSubscribedTo(subscriber, source)

def VSCMGArrayConfigMsg_cpp_isSubscribedTo(subscriber, source):
    return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_cpp_isSubscribedTo(subscriber, source)

def VSCMGArrayConfigMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def VSCMGArrayConfigMsg_C_addAuthor(coowner, data):
    return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_C_addAuthor(coowner, data)

def VSCMGArrayConfigMsg_C_init(owner):
    return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_C_init(owner)

def VSCMGArrayConfigMsg_C_isLinked(data):
    return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_C_isLinked(data)

def VSCMGArrayConfigMsg_C_isWritten(data):
    return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_C_isWritten(data)

def VSCMGArrayConfigMsg_C_timeWritten(data):
    return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_C_timeWritten(data)

def VSCMGArrayConfigMsg_C_moduleID(data):
    return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_C_moduleID(data)

def VSCMGArrayConfigMsg_C_write(data, destination, moduleID, callTime):
    return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_C_write(data, destination, moduleID, callTime)

def VSCMGArrayConfigMsg_C_read(source):
    return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_C_read(source)

def VSCMGArrayConfigMsg_C_zeroMsgPayload():
    return _VSCMGArrayConfigMsgPayload.VSCMGArrayConfigMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_VSCMGArrayConfigMsgPayload.MsgHeader_isLinked_get, _VSCMGArrayConfigMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_VSCMGArrayConfigMsgPayload.MsgHeader_isWritten_get, _VSCMGArrayConfigMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_VSCMGArrayConfigMsgPayload.MsgHeader_timeWritten_get, _VSCMGArrayConfigMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_VSCMGArrayConfigMsgPayload.MsgHeader_moduleID_get, _VSCMGArrayConfigMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _VSCMGArrayConfigMsgPayload.MsgHeader_swiginit(self, _VSCMGArrayConfigMsgPayload.new_MsgHeader())
    __swig_destroy__ = _VSCMGArrayConfigMsgPayload.delete_MsgHeader

# Register MsgHeader in _VSCMGArrayConfigMsgPayload:
_VSCMGArrayConfigMsgPayload.MsgHeader_swigregister(MsgHeader)

